// ta_Dump File v3.0 -- code v8.0.0.0 rev9957
LeabraProject .projects["ve_arm"] { 
 Doc_Group @.docs = [2] {
  taDoc @["ProjectDocs"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };
  };
  taDoc @["ChangeLog"] { };
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_1"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [4] {
  ControlPanel @["ControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [7] {
    EditMbrItem @[0] { };
    EditMbrItem @[1] { };
    EditMbrItem @[2] { };
    EditMbrItem @[3] { };
    EditMbrItem @[4] { };
    EditMbrItem @[5] { };
    EditMbrItem @[6] { };
    EditMbrItem_Group @.gp["RLNet_Params"] = [6] { 
     EditMbrItem @[0] { };
     EditMbrItem @[1] { };
     EditMbrItem @[2] { };
     EditMbrItem @[3] { };
     EditMbrItem @[4] { };
     EditMbrItem @[5] { };
    };
   };

   EditMthItem_Group @.mths = [8] {
    EditMthItem @[0] { };
    EditMthItem @[1] { };
    EditMthItem @[2] { };
    EditMthItem @[3] { };
    EditMthItem @[4] { };
    EditMthItem @[5] { };
    EditMthItem @[6] { };
    EditMthItem @[7] { };
   };
  };
  ControlPanel @["VEInfo"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
    EditMbrItem_Group @.gp["VE_Arm"] = [6] { 
     EditMbrItem @[0] { };
     EditMbrItem @[1] { };
     EditMbrItem @[2] { };
     EditMbrItem @[3] { };
     EditMbrItem @[4] { };
     EditMbrItem @[5] { };
    };
    EditMbrItem_Group @.gp["Shoulder"] { 
    };
    EditMbrItem_Group @.gp["Elbow"] { 
    };
    EditMbrItem_Group @.gp["Joints"] { 
     EditMbrItem_Group @.gp["Elbow"] { 
     };
     EditMbrItem_Group @.gp["Shoulder"] { 
     };
    };
    EditMbrItem_Group @.gp["Limbs"] = [0] { 
     EditMbrItem_Group @.gp["Humerus"] = [3] { 
      EditMbrItem @[0] { };
      EditMbrItem @[1] { };
      EditMbrItem @[2] { };
     };
     EditMbrItem_Group @.gp["Ulna"] = [3] { 
      EditMbrItem @[0] { };
      EditMbrItem @[1] { };
      EditMbrItem @[2] { };
     };
     EditMbrItem_Group @.gp["Hand"] = [3] { 
      EditMbrItem @[0] { };
      EditMbrItem @[1] { };
      EditMbrItem @[2] { };
     };
    };
   };

   EditMthItem_Group @.mths = [3] {
    EditMthItem @[0] { };
    EditMthItem @[1] { };
    EditMthItem @[2] { };
   };
  };
  ControlPanel @["PVLV"] { 
   EditMbrItem_Group @.mbrs = [1] {
    EditMbrItem @[0] { };
   };

   EditMthItem_Group @.mths = [0] {
   };
  };
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [34] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
    String_Data @["model_svn"] { };
   };

   DataOpList @.jobs_running.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_running.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_done.data = [34] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
    String_Data @["model_svn"] { };
   };

   DataOpList @.jobs_done.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_done.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_deleted.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_deleted.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_deleted.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_archive.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_archive.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_archive.control_panel_cells = [0] {
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataOpList @.file_list.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.file_list.control_panel_cells = [0] {
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   DataOpList @.cluster_info.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.cluster_info.control_panel_cells = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] = [2] { 
   DataTable @["FwdModelInputData"] { 
    DataTableCols @.data = [10] {
     String_Data @["Name"] { };
     float_Data @["VisTarget_Cur"] { };
     float_Data @["VisHand_Cur"] { };
     float_Data @["SomaShoulderAngle_Cur"] { };
     float_Data @["SomaElbowAngle_Cur"] { };
     float_Data @["MotorShoulderForce"] { };
     float_Data @["MotorElbowForce"] { };
     float_Data @["VisHand_Pred"] { };
     float_Data @["SomaShoulderAngle_Pred"] { };
     float_Data @["SomaElbowAngle_Pred"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["RLModelInputData"] { 
    DataTableCols @.data = [7] {
     String_Data @["Name"] { };
     float_Data @["VisTarget_Cur"] { };
     float_Data @["VisHand_Cur"] { };
     float_Data @["SomaShoulderAngle_Cur"] { };
     float_Data @["SomaElbowAngle_Cur"] { };
     float_Data @["MotorElbowForce"] { };
     float_Data @["PVe"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
  };
  DataTable_Group @.gp["OutputData"] = [4] { 
   DataTable @["TrialOutputData"] { 
    DataTableCols @.data = [23] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["trial"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     String_Data @["trial_name"] { };
     String_Data @["group_name"] { };
     float_Data @["VisFwd_phase_no"] { };
     float_Data @["SomaFw_phase_no"] { };
     float_Data @["VisHan_phase_no"] { };
     float_Data @["SomaSh_phase_no"] { };
     float_Data @["SomaEl_phase_no"] { };
     float_Data @["VisFwd_minus_cycles"] { };
     float_Data @["SomaFw_minus_cycles"] { };
     float_Data @["VisHan_minus_cycles"] { };
     float_Data @["SomaSh_minus_cycles"] { };
     float_Data @["SomaEl_minus_cycles"] { };
     float_Data @["sse"] { };
     float_Data @["ext_rew"] { };
     float_Data @["VisFwd_pvlv_pvi"] { };
     float_Data @["SomaFw_pvlv_pvi"] { };
     float_Data @["VisHan_pvlv_pvi"] { };
     float_Data @["SomaSh_pvlv_pvi"] { };
     float_Data @["SomaEl_pvlv_pvi"] { };
     double_Data @["trg_dist"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["EpochOutputData"] { 
    DataTableCols @.data = [10] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     float_Data @["avg_sse"] { };
     float_Data @["cnt_err"] { };
     float_Data @["avg_trg_dist"] { };
     float_Data @["avg_ext_rew"] { };
     double_Data @["rew_dist_thr"] { };
     float_Data @["avg_cycles"] { };
     float_Data @["epoch_time_tot"] { };
     float_Data @["epoch_time_usr"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["TestTrialOutputData"] { 
    DataTableCols @.data = [29] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     String_Data @["train_mode"] { };
     int_Data @["group"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["trial"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["tick"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     float_Data @["time"] { };
     String_Data @["trial_name"] { };
     String_Data @["group_name"] { };
     String_Data @["output_name"] { };
     float_Data @["rt_cycles"] { };
     float_Data @["sse"] { };
     float_Data @["norm_err"] { };
     float_Data @["cos_err"] { };
     float_Data @["ext_rew"] { };
     float_Data @["VisHan_lay_sse"] { };
     float_Data @["SomaSh_lay_sse"] { };
     float_Data @["SomaEl_lay_sse"] { };
     float_Data @["VisHan_lay_norm_err"] { };
     float_Data @["SomaSh_lay_norm_err"] { };
     float_Data @["SomaEl_lay_norm_err"] { };
     float_Data @["VisHan_lay_cos_err"] { };
     float_Data @["SomaSh_lay_cos_err"] { };
     float_Data @["SomaEl_lay_cos_err"] { };
     float_Data @["VisFwd_lay_net_sd"] { };
     float_Data @["SomaFw_lay_net_sd"] { };
     float_Data @["VisHan_lay_net_sd"] { };
     float_Data @["SomaSh_lay_net_sd"] { };
     float_Data @["SomaEl_lay_net_sd"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["TestEpochOutputData"] { 
    DataTableCols @.data = [35] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     float_Data @["avg_sse"] { };
     float_Data @["cnt_err"] { };
     float_Data @["pct_cor"] { };
     float_Data @["pct_err"] { };
     float_Data @["avg_norm_err"] { };
     float_Data @["avg_cos_err"] { };
     float_Data @["avg_ext_rew"] { };
     float_Data @["avg_cycles"] { };
     float_Data @["epoch_time_tot"] { };
     float_Data @["epoch_time_usr"] { };
     float_Data @["VisHan_lay_avg_sse"] { };
     float_Data @["SomaSh_lay_avg_sse"] { };
     float_Data @["SomaEl_lay_avg_sse"] { };
     float_Data @["VisHan_lay_cnt_err"] { };
     float_Data @["SomaSh_lay_cnt_err"] { };
     float_Data @["SomaEl_lay_cnt_err"] { };
     float_Data @["VisHan_lay_pct_cor"] { };
     float_Data @["SomaSh_lay_pct_cor"] { };
     float_Data @["SomaEl_lay_pct_cor"] { };
     float_Data @["VisHan_lay_pct_err"] { };
     float_Data @["SomaSh_lay_pct_err"] { };
     float_Data @["SomaEl_lay_pct_err"] { };
     float_Data @["VisHan_lay_avg_norm_err"] { };
     float_Data @["SomaSh_lay_avg_norm_err"] { };
     float_Data @["SomaEl_lay_avg_norm_err"] { };
     float_Data @["VisHan_lay_avg_cos_err"] { };
     float_Data @["SomaSh_lay_avg_cos_err"] { };
     float_Data @["SomaEl_lay_avg_cos_err"] { };
     float_Data @["VisFwdHi_avg_net_sd"] { };
     float_Data @["SomaFwdH_avg_net_sd"] { };
     float_Data @["VisHand__avg_net_sd"] { };
     float_Data @["SomaShou_avg_net_sd"] { };
     float_Data @["SomaElbo_avg_net_sd"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] { 
  };
 };

 Program_TopGroup @.programs = [1] {
  Program @["LeabraStartup"] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @["DocLink"] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [2] {
    ProgVar @["network"] { };
    ProgVar @["input_data"] { };
   };

   ProgVar_List @.vars = [8] {
    ProgVar @["batch"] { };
    ProgVar @["tag"] { };
    ProgVar @["log_dir"] { };
    ProgVar @["log_file_nm"] { };
    ProgVar @["EpochOutputData"] { };
    ProgVar @["TrialOutputData"] { };
    ProgVar @["LeabraUnitSpec_0"] { };
    ProgVar @["ForceScalarVal"] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [30] {
    IfReturn @[0] { };
    Comment @[1] { };
    MiscCall @[2] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MiscCall @[3] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    RegisterArgs @[4] { };
    Comment @[5] { };
    PrintExpr @[6] { };
    MethodCall @[7] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MiscCall @[8] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MiscCall @[9] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    ProgVarFmArg @[10] { };
    ProgVarFmArg @[11] { };
    Comment @[12] { };
    ProgVarFmArg @[13] { };
    ProgVarFmArg @[14] { };
    ProgVarFmArg @[15] { };
    ProgVarFmArg @[16] { };
    MemberFmArg @[17] { };
    MemberFmArg @[18] { };
    MemberFmArg @[19] { };
    Comment @[20] { };
    MethodCall @[21] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MiscCall @[22] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[23] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[24] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    MethodCall @[25] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[26] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    OtherProgramVar @[27] { };
    PrintExpr @[28] { };
    ProgramCall @[29] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program_Group @.gp["RobotProgs"] = [7] { 
   Program @["EmerRobot"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [7] {
     VEWorld @["VEEmerWorld"] { 
      VEObject_Group @.objects = [2] {
       VEObject @["Emer"] { 
	VEBody_Group @.bodies = [9] {
	 VEBody @["Torso"] { };
	 VEBody @["Humerus"] { };
	 VEBody @["Ulna"] { };
	 VEBody @["Hand"] { };
	 VEBody @["Head"] { };
	 VECamera @["LeftEye"] { };
	 VECamera @["RightEye"] { };
	 VEBody @["Pectoralis"] { };
	 VEBody @["Deltoid"] { };
	};

	VEJoint_Group @.joints = [5] {
	 VEMuscleJoint @["Shoulder"] { };
	 VEMuscleJoint @["Elbow"] { };
	 VEJoint @["Wrist"] { };
	 VEJoint @["LeftEyeJoint"] { };
	 VEJoint @["RightEyeJoint"] { };
	};
       };
       VEObject @["Target"] { 
	VEBody_Group @.bodies = [1] {
	 VEBody @["TargetBody"] { };
	};

	VEJoint_Group @.joints = [0] {
	};
       };
      };

      VESpace_Group @.spaces = [1] {
       VESpace @["RoomSpace"] { 
	VEStatic_Group @.static_els = [2] {
	 VEStatic @["Ground"] { };
	 VEStatic @["BackWall"] { };
	};
       };
      };

      VETexture_List @.textures = [0] {
      };
     };
     DataTable @["ArmOutputData"] { 
      DataTableCols @.data = [20] {
       String_Data @["Reach_Name"] { };
       float_Data @["Reach_No"] { };
       float_Data @["Hand_cur_pos_x"] { };
       float_Data @["Hand_cur_pos_y"] { };
       float_Data @["Hand_cur_pos_z"] { };
       float_Data @["Target_cur_pos_x"] { };
       float_Data @["Target_cur_pos_y"] { };
       float_Data @["Target_cur_pos_z"] { };
       float_Data @["Hand_cur_lin_vel_x"] { };
       float_Data @["Hand_cur_lin_vel_y"] { };
       float_Data @["Hand_cur_lin_vel_z"] { };
       float_Data @["Should_pos"] { };
       float_Data @["Should_vel"] { };
       float_Data @["Should_force_in"] { };
       float_Data @["Elbow_pos"] { };
       float_Data @["Elbow_vel"] { };
       float_Data @["Elbow_force_in"] { };
       float_Data @["n_steps"] { };
       float_Data @["angle_err"] { };
       float_Data @["trg_dist"] { };
      };

      DataOpList @.last_sort_spec.ops = [0] {
      };

      DataTableCell_List @.control_panel_cells = [0] {
      };
     };
     DataTable @["ReachOutputData"] { 
      DataTableCols @.data = [29] {
       float_Data @["time"] { };
       float_Data @["Hand_cur_pos_x"] { };
       float_Data @["Hand_cur_pos_y"] { };
       float_Data @["Hand_cur_pos_z"] { };
       float_Data @["Target_cur_pos_x"] { };
       float_Data @["Target_cur_pos_y"] { };
       float_Data @["Target_cur_pos_z"] { };
       float_Data @["Hand_cur_lin_vel_x"] { };
       float_Data @["Hand_cur_lin_vel_y"] { };
       float_Data @["Hand_cur_lin_vel_z"] { };
       float_Data @["Should_pos"] { };
       float_Data @["Should_vel"] { };
       float_Data @["Should_flexor_len"] { };
       float_Data @["Should_flexor_dlen"] { };
       float_Data @["Should_flexor_act"] { };
       float_Data @["Should_flexor_m_act_force"] { };
       float_Data @["Should_flexor_m_force"] { };
       float_Data @["Should_flexor_force"] { };
       float_Data @["Should_extensor_len"] { };
       float_Data @["Should_extensor_dlen"] { };
       float_Data @["Should_extensor_act"] { };
       float_Data @["Should_extensor_m_act_force"] { };
       float_Data @["Should_extensor_m_force"] { };
       float_Data @["Should_extensor_force"] { };
       float_Data @["should_cur_trg"] { };
       float_Data @["Elbow_pos"] { };
       float_Data @["Elbow_vel"] { };
       float_Data @["Elbow_force_in"] { };
       float_Data @["elbow_cur_trg"] { };
      };

      DataOpList @.last_sort_spec.ops = [0] {
      };

      DataTableCell_List @.control_panel_cells = [0] {
      };
     };
     NetMonitor @["ArmMonitor"] { 
      NetMonItem_List @.items = [20] {
       NetMonItem @["Reach_Name"] { };
       NetMonItem @["Reach_No"] { };
       NetMonItem @["Hand_cur_pos_x"] { };
       NetMonItem @["Hand_cur_pos_y"] { };
       NetMonItem @["Hand_cur_pos_z"] { };
       NetMonItem @["Target_cur_pos_x"] { };
       NetMonItem @["Target_cur_pos_y"] { };
       NetMonItem @["Target_cur_pos_z"] { };
       NetMonItem @["Hand_cur_lin_vel_x"] { };
       NetMonItem @["Hand_cur_lin_vel_y"] { };
       NetMonItem @["Hand_cur_lin_vel_z"] { };
       NetMonItem @["Should_pos"] { };
       NetMonItem @["Should_vel"] { };
       NetMonItem @["Should_force_in"] { };
       NetMonItem @["Elbow_pos"] { };
       NetMonItem @["Elbow_vel"] { };
       NetMonItem @["Elbow_force_in"] { };
       NetMonItem @["n_steps"] { };
       NetMonItem @["angle_err"] { };
       NetMonItem @["trg_dist"] { };
      };
     };
     NetMonitor @["ReachMonitor"] { 
      NetMonItem_List @.items = [29] {
       NetMonItem @["time"] { };
       NetMonItem @["Hand_cur_pos_x"] { };
       NetMonItem @["Hand_cur_pos_y"] { };
       NetMonItem @["Hand_cur_pos_z"] { };
       NetMonItem @["Target_cur_pos_x"] { };
       NetMonItem @["Target_cur_pos_y"] { };
       NetMonItem @["Target_cur_pos_z"] { };
       NetMonItem @["Hand_cur_lin_vel_x"] { };
       NetMonItem @["Hand_cur_lin_vel_y"] { };
       NetMonItem @["Hand_cur_lin_vel_z"] { };
       NetMonItem @["Should_pos"] { };
       NetMonItem @["Should_vel"] { };
       NetMonItem @["Should_flexor_len"] { };
       NetMonItem @["Should_flexor_dlen"] { };
       NetMonItem @["Should_flexor_act"] { };
       NetMonItem @["Should_flexor_m_act_force"] { };
       NetMonItem @["Should_flexor_m_force"] { };
       NetMonItem @["Should_flexor_force"] { };
       NetMonItem @["Should_extensor_len"] { };
       NetMonItem @["Should_extensor_dlen"] { };
       NetMonItem @["Should_extensor_act"] { };
       NetMonItem @["Should_extensor_m_act_force"] { };
       NetMonItem @["Should_extensor_m_force"] { };
       NetMonItem @["Should_extensor_force"] { };
       NetMonItem @["should_cur_trg"] { };
       NetMonItem @["Elbow_pos"] { };
       NetMonItem @["Elbow_vel"] { };
       NetMonItem @["Elbow_force_in"] { };
       NetMonItem @["elbow_cur_trg"] { };
      };
     };
     taImage @["LeftEyeImage"] { };
     taImage @["RightEyeImage"] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @["gen_rnd_angles"] { };
     ProgVar @["shoulder_trg_angle_norm"] { };
     ProgVar @["elbow_trg_angle_norm"] { };
    };

    ProgVar_List @.vars = [43] {
     ProgVar @["VEEmerWorld"] { };
     ProgVar @["Shoulder"] { };
     ProgVar @["Elbow"] { };
     ProgVar @["Hand"] { };
     ProgVar @["Torso"] { };
     ProgVar @["Humerus"] { };
     ProgVar @["Ulna"] { };
     ProgVar @["TargetBody"] { };
     ProgVar @["co_contract_pct"] { };
     ProgVar @["angle_inc"] { };
     ProgVar @["angle_updt_interval"] { };
     ProgVar @["ve_step"] { };
     ProgVar @["max_ve_steps"] { };
     ProgVar @["min_ve_steps"] { };
     ProgVar @["reach_mon_on"] { };
     ProgVar @["capture_images"] { };
     ProgVar @["shoulder_cur_trg_angle"] { };
     ProgVar @["shoulder_pos_dir"] { };
     ProgVar @["shoulder_angle_err"] { };
     ProgVar @["elbow_cur_trg_angle"] { };
     ProgVar @["elbow_pos_dir"] { };
     ProgVar @["elbow_angle_err"] { };
     ProgVar @["angle_err"] { };
     ProgVar @["hand_vel"] { };
     ProgVar @["hand_vel_thr"] { };
     ProgVar @["ArmOutputData"] { };
     ProgVar @["ArmMonitor"] { };
     ProgVar @["ReachMonitor"] { };
     ProgVar @["ReachOutputData"] { };
     ProgVar @["arm_tot_len"] { };
     ProgVar @["shoulder_x_pos"] { };
     ProgVar @["shoulder_z_pos"] { };
     ProgVar @["hand_max_x"] { };
     ProgVar @["hand_min_z"] { };
     ProgVar @["hand_min_x"] { };
     ProgVar @["hand_max_z"] { };
     ProgVar @["hand_pos_x_norm"] { };
     ProgVar @["hand_pos_z_norm"] { };
     ProgVar @["targ_pos_x_norm"] { };
     ProgVar @["targ_pos_z_norm"] { };
     ProgVar @["trg_dist"] { };
     ProgVar @["LeftEyeImage"] { };
     ProgVar @["RightEyeImage"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [14] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     ResetDataRows @[3] { };
     ResetDataRows @[4] { };
     AssignExpr @[5] { };
     AssignExpr @[6] { };
     AssignExpr @[7] { };
     AssignExpr @[8] { };
     AssignExpr @[9] { };
     AssignExpr @[10] { };
     AssignExpr @[11] { };
     AssignExpr @[12] { };
     AssignExpr @[13] { };
    };

    ProgEl_List @.prog_code = [31] {
     If @[0] { 
      ProgEl_List @.true_code = [3] {
       Comment @[0] { };
       RandomCall @[1] { 
	ProgArg_List @.meth_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       RandomCall @[2] { 
	ProgArg_List @.meth_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
      };
     };
     Comment @[1] { };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     AssignExpr @[4] { };
     AssignExpr @[5] { };
     ResetDataRows @[6] { };
     ForLoop @[7] { 
      ProgEl_List @.loop_code = [5] {
       If @[0] { 
	ProgEl_List @.true_code = [6] {
	 If @[0] { 
	  ProgEl_List @.true_code = [2] {
	   VarIncr @[0] { };
	   AssignExpr @[1] { };
	  };
	 };
	 Else @[1] { 
	  ProgEl_List @.else_code = [2] {
	   VarIncr @[0] { };
	   AssignExpr @[1] { };
	  };
	 };
	 If @[2] { 
	  ProgEl_List @.true_code = [2] {
	   VarIncr @[0] { };
	   AssignExpr @[1] { };
	  };
	 };
	 Else @[3] { 
	  ProgEl_List @.else_code = [2] {
	   VarIncr @[0] { };
	   AssignExpr @[1] { };
	  };
	 };
	 MethodCall @[4] { 
	  ProgArg_List @.meth_args = [3] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	  };
	 };
	 MethodCall @[5] { 
	  ProgArg_List @.meth_args = [3] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	  };
	 };
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       If @[2] { 
	ProgEl_List @.true_code = [6] {
	 AddNewDataRow @[0] { };
	 MethodCall @[1] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 MethodCall @[2] { 
	  ProgArg_List @.meth_args = [2] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	  };
	 };
	 MethodCall @[3] { 
	  ProgArg_List @.meth_args = [2] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	  };
	 };
	 MethodCall @[4] { 
	  ProgArg_List @.meth_args = [2] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	  };
	 };
	 DoneWritingDataRow @[5] { };
	};
       };
       If @[3] { 
	ProgEl_List @.true_code = [2] {
	 AssignExpr @[0] { };
	 IfBreak @[1] { };
	};
       };
       StopStepPoint @[4] { };
      };
     };
     Comment @[8] { };
     AssignExpr @[9] { };
     AssignExpr @[10] { };
     AssignExpr @[11] { };
     AssignExpr @[12] { };
     AssignExpr @[13] { };
     MathCall @[14] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     Comment @[15] { };
     AssignExpr @[16] { };
     AssignExpr @[17] { };
     AssignExpr @[18] { };
     AddNewDataRow @[19] { };
     MethodCall @[20] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[21] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[22] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[23] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[24] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[25] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[26] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[27] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     DoneWritingDataRow @[28] { };
     Comment @[29] { };
     If @[30] { 
      ProgEl_List @.true_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       MethodCall @[2] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
    };
   };
   Program @["SetTarget"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @["gen_rnd_targ"] { };
     ProgVar @["targ_angle"] { };
     ProgVar @["targ_dist"] { };
    };

    ProgVar_List @.vars = [9] {
     ProgVar @["TargetBody"] { };
     ProgVar @["arm_tot_len"] { };
     ProgVar @["targ_x"] { };
     ProgVar @["targ_z"] { };
     ProgVar @["shoulder_x_pos"] { };
     ProgVar @["shoulder_z_pos"] { };
     ProgVar @["rnd_angle_min"] { };
     ProgVar @["rnd_angle_max"] { };
     ProgVar @["rnd_dist_min"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [7] {
     OtherProgramVar @[0] { };
     If @[1] { 
      ProgEl_List @.true_code = [2] {
       RandomCall @[0] { 
	ProgArg_List @.meth_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       RandomCall @[1] { 
	ProgArg_List @.meth_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
      };
     };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     MemberAssign @[4] { };
     MemberAssign @[5] { };
     MethodCall @[6] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["RobotGetCurInputs"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [17] {
     ProgVar @["TargetBody"] { };
     ProgVar @["Hand"] { };
     ProgVar @["Shoulder"] { };
     ProgVar @["Elbow"] { };
     ProgVar @["arm_tot_len"] { };
     ProgVar @["shoulder_x_pos"] { };
     ProgVar @["shoulder_z_pos"] { };
     ProgVar @["hand_max_x"] { };
     ProgVar @["hand_min_x"] { };
     ProgVar @["hand_max_z"] { };
     ProgVar @["hand_min_z"] { };
     ProgVar @["hand_pos_x_norm"] { };
     ProgVar @["hand_pos_z_norm"] { };
     ProgVar @["targ_pos_x_norm"] { };
     ProgVar @["targ_pos_z_norm"] { };
     ProgVar @["shoulder_ang_norm"] { };
     ProgVar @["elbow_ang_norm"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [16] {
     OtherProgramVar @[0] { };
     OtherProgramVar @[1] { };
     Comment @[2] { };
     AssignExpr @[3] { };
     AssignExpr @[4] { };
     AssignExpr @[5] { };
     AssignExpr @[6] { };
     AssignExpr @[7] { };
     AssignExpr @[8] { };
     Comment @[9] { };
     MethodCall @[10] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     MethodCall @[11] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     MethodCall @[12] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     MethodCall @[13] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     MethodCall @[14] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     MethodCall @[15] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
    };
   };
   Program @["FwdModelPredTargs"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [15] {
     ProgVar @["Shoulder"] { };
     ProgVar @["Elbow"] { };
     ProgVar @["arm_tot_len"] { };
     ProgVar @["shoulder_x_pos"] { };
     ProgVar @["shoulder_z_pos"] { };
     ProgVar @["hand_max_x"] { };
     ProgVar @["hand_min_x"] { };
     ProgVar @["hand_max_z"] { };
     ProgVar @["hand_min_z"] { };
     ProgVar @["hand_pos_x_norm"] { };
     ProgVar @["hand_pos_z_norm"] { };
     ProgVar @["shoulder_trg_angle_norm"] { };
     ProgVar @["elbow_trg_angle_norm"] { };
     ProgVar @["shoulder_ang_norm"] { };
     ProgVar @["elbow_ang_norm"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [15] {
     Comment @[0] { };
     OtherProgramVar @[1] { };
     OtherProgramVar @[2] { };
     OtherProgramVar @[3] { };
     AssignExpr @[4] { };
     AssignExpr @[5] { };
     OtherProgramVar @[6] { };
     Comment @[7] { };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     MethodCall @[10] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     MethodCall @[11] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     MethodCall @[12] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     MethodCall @[13] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     DoneWritingDataRow @[14] { };
    };
   };
   Program @["RLModelRew"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [7] {
     ProgVar @["trg_dist"] { };
     ProgVar @["rew_val"] { };
     ProgVar @["rew_dist_thr"] { };
     ProgVar @["rew_dist_thr_init"] { };
     ProgVar @["rew_dist_thr_incr"] { };
     ProgVar @["avg_rew_dec_thr"] { };
     ProgVar @["avg_rew_inc_thr"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     AssignExpr @[0] { };
    };

    ProgEl_List @.prog_code = [7] {
     OtherProgramVar @[0] { };
     If @[1] { 
      ProgEl_List @.true_code = [2] {
       If @[0] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       Else @[1] { 
	ProgEl_List @.else_code = [2] {
	 If @[0] { 
	  ProgEl_List @.true_code = [1] {
	   VarIncr @[0] { };
	  };
	 };
	 If @[1] { 
	  ProgEl_List @.true_code = [1] {
	   VarIncr @[0] { };
	  };
	 };
	};
       };
      };
     };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     Comment @[4] { };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     DoneWritingDataRow @[6] { };
    };
   };
   Program @["RobotTrialInit"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["cur_net_name"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     AssignExpr @[0] { };
     Switch @[1] { 
      ProgEl_List @.cases = [2] {
       CaseBlock @[0] { 
	ProgEl_List @.prog_code = [3] {
	 ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [1] {
	   ProgArg @[0] { };
	  };
	 };
	 ProgramCall @[1] { 
	  ProgArg_List @.prog_args = [3] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	  };
	 };
	 ProgramCall @[2] { 
	  ProgArg_List @.prog_args = [1] {
	   ProgArg @[0] { };
	  };
	 };
	};
       };
       CaseBlock @[1] { 
	ProgEl_List @.prog_code = [2] {
	 ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [3] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	  };
	 };
	 ProgramCall @[1] { 
	  ProgArg_List @.prog_args = [1] {
	   ProgArg @[0] { };
	  };
	 };
	};
       };
      };
     };
    };
   };
   Program @["RobotSettleInit"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["cur_net_name"] { };
     ProgVar @["MotorShoulderForce"] { };
     ProgVar @["MotorElbowForce"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     AssignExpr @[0] { };
     Switch @[1] { 
      ProgEl_List @.cases = [2] {
       CaseBlock @[0] { 
	ProgEl_List @.prog_code = [1] {
	 ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [0] {
	  };
	 };
	};
       };
       CaseBlock @[1] { 
	ProgEl_List @.prog_code = [2] {
	 If @[0] { 
	  ProgEl_List @.true_code = [4] {
	   AssignExpr @[0] { };
	   AssignExpr @[1] { };
	   ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [3] {
	     ProgArg @[0] { };
	     ProgArg @[1] { };
	     ProgArg @[2] { };
	    };
	   };
	   ProgramCall @[3] { 
	    ProgArg_List @.prog_args = [2] {
	     ProgArg @[0] { };
	     ProgArg @[1] { };
	    };
	   };
	  };
	 };
	 ProgramCall @[1] { 
	  ProgArg_List @.prog_args = [0] {
	  };
	 };
	};
       };
      };
     };
    };
   };
  };
  Program_Group @.gp["LeabraAll_Std"] = [11] { 
   Program @["LeabraBatch"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["batch"] { };
     ProgVar @["batch_start"] { };
     ProgVar @["n_batches"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["i"] { };
      };
     };
     AssignExpr @[1] { };
     MemberAssign @[2] { };
     ForLoop @[3] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @["LeabraTrain"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [2] {
     RndSeed_List @["rnd_seeds"] { 
      taList @.seeds = [25] {
       RndSeed @["RndSeed_1"] { };
       RndSeed @["RndSeed_2"] { };
       RndSeed @["RndSeed_3"] { };
       RndSeed @["RndSeed_4"] { };
       RndSeed @["RndSeed_5"] { };
       RndSeed @["RndSeed_6"] { };
       RndSeed @["RndSeed_7"] { };
       RndSeed @["RndSeed_8"] { };
       RndSeed @["RndSeed_9"] { };
       RndSeed @["RndSeed_10"] { };
       RndSeed @["RndSeed_11"] { };
       RndSeed @["RndSeed_12"] { };
       RndSeed @["RndSeed_13"] { };
       RndSeed @["RndSeed_14"] { };
       RndSeed @["RndSeed_15"] { };
       RndSeed @["RndSeed_16"] { };
       RndSeed @["RndSeed_17"] { };
       RndSeed @["RndSeed_18"] { };
       RndSeed @["RndSeed_19"] { };
       RndSeed @["RndSeed_20"] { };
       RndSeed @["RndSeed_21"] { };
       RndSeed @["RndSeed_22"] { };
       RndSeed @["RndSeed_23"] { };
       RndSeed @["RndSeed_24"] { };
       RndSeed @["RndSeed_25"] { };
      };
     };
     RndSeed @["rnd_seed"] { };
    };

    ProgType_List @.types = [1] {
     DynEnumType @["RndInitType"] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @["OLD_SEED"] { };
       DynEnumItem @["NEW_SEED"] { };
       DynEnumItem @["BATCH_SEEDS"] { };
      };
     };
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["no_prompts"] { };
    };

    ProgVar_List @.vars = [12] {
     ProgVar @["max_epoch"] { };
     ProgVar @["epoch"] { };
     ProgVar @["train_mode"] { };
     ProgVar @["rnd_init"] { };
     ProgVar @["err_stopcrit"] { };
     ProgVar @["n_under_thr"] { };
     ProgVar @["save_final_wts"] { };
     ProgVar @["save_wts_interval"] { };
     ProgVar @["n_under_cnt"] { };
     ProgVar @["rnd_seeds"] { };
     ProgVar @["train_timer"] { };
     ProgVar @["rnd_seed"] { };
    };

    Function_List @.functions = [1] {
     Function @["GetRandomSeed"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [2] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       Switch @[1] { 
	ProgEl_List @.cases = [3] {
	 CaseBlock @[0] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[1] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[2] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [7] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     WtInitPrompt @[5] { 
      ProgEl_List @.yes_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
     AssignExpr @[6] { };
    };

    ProgEl_List @.prog_code = [10] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     MemberAssign @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[1] { };
      };
     };
     AssignExpr @[6] { };
     WhileLoop @[7] { 
      ProgEl_List @.loop_code = [5] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [2] {
	 VarIncr @[0] { };
	 IfBreak @[1] { };
	};
       };
       Else @[3] { 
	ProgEl_List @.else_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       If @[4] { 
	ProgEl_List @.true_code = [1] {
	 If @[0] { 
	  ProgEl_List @.true_code = [1] {
	   ProgramCall @[0] { 
	    ProgArg_List @.prog_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     If @[8] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraEpoch"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["step_on_err"] { };
     ProgVar @["epoch_timer"] { };
     ProgVar @["data_loop_index"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [10] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 StopStepPoint @[0] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["LeabraTrial"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [11] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["qtr"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     Comment @[4] { };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[6] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[7] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[10] { };
    };
   };
   Program @["LeabraQuarter"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["cycle"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [11] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @["cycle_max"] { };
       ProgVar @["cyc"] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ProgramCall @[4] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[6] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[7] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[10] { };
    };
   };
   Program @["LeabraCycle"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["ApplyInputs"] { 
    UserDataItem_List @*(.user_data_) {
    };

    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [10] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
       LayerWriterEl @[3] { };
       LayerWriterEl @[4] { };
       LayerWriterEl @[5] { };
       LayerWriterEl @[6] { };
       LayerWriterEl @[7] { };
       LayerWriterEl @[8] { };
       LayerWriterEl @[9] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["LayerWriter_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["ApplyInputs_RLModel"] { 
    UserDataItem_List @*(.user_data_) {
    };

    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [7] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
       LayerWriterEl @[3] { };
       LayerWriterEl @[4] { };
       LayerWriterEl @[5] { };
       LayerWriterEl @[6] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["LayerWriter_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraTrialMonitor"] { 
    UserDataItem_List @*(.user_data_) {
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["trial_netmon"] { 
      NetMonItem_List @.items = [11] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["trial"] { };
       NetMonItem @["trial_name"] { };
       NetMonItem @["group_name"] { };
       NetMonItem @["phase_no"] { };
       NetMonItem @["minus_cycles"] { };
       NetMonItem @["sse"] { };
       NetMonItem @["ext_rew"] { };
       NetMonItem @["pvlv_pvi"] { };
       NetMonItem @["trg_dist"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["trial_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["LeabraEpochMonitor"] { 
    UserDataItem_List @*(.user_data_) {
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["epoch_netmon"] { 
      NetMonItem_List @.items = [10] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["avg_sse"] { };
       NetMonItem @["cnt_err"] { };
       NetMonItem @["avg_trg_dist"] { };
       NetMonItem @["avg_ext_rew"] { };
       NetMonItem @["rew_dist_thr"] { };
       NetMonItem @["avg_cycles"] { };
       NetMonItem @["epoch_time_tot"] { };
       NetMonItem @["epoch_time_usr"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["epoch_mon_data"] { };
     ProgVar @["epoch_netmon"] { };
     ProgVar @["epoch_timer"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["SaveWeights"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["tag"] { };
     ProgVar @["wts_subdir"] { };
     ProgVar @["fname"] { };
     ProgVar @["epoch_str"] { };
     ProgVar @["batch_str"] { };
     ProgVar @["final_tag"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     IfReturn @[0] { };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
  Program_Group @.gp["LeabraAll_Test"] = [7] { 
   Program @["LeabraEpochTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["input_data"] { };
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["epoch_timer"] { };
     ProgVar @["data_loop_index"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [11] {
     NetCounterInit @[0] { };
     MemberAssign @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MemberAssign @[10] { };
    };
   };
   Program @["LeabraTrialTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["qtr"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraQuarterTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["cycle"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @["cycle_max"] { };
       ProgVar @["cyc"] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraCycleTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["ApplyInputsTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["LayerWriter_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraTrialMonitorTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["trial_netmon"] { 
      NetMonItem_List @.items = [19] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["train_mode"] { };
       NetMonItem @["group"] { };
       NetMonItem @["trial"] { };
       NetMonItem @["tick"] { };
       NetMonItem @["time"] { };
       NetMonItem @["trial_name"] { };
       NetMonItem @["group_name"] { };
       NetMonItem @["output_name"] { };
       NetMonItem @["rt_cycles"] { };
       NetMonItem @["sse"] { };
       NetMonItem @["norm_err"] { };
       NetMonItem @["cos_err"] { };
       NetMonItem @["ext_rew"] { };
       NetMonItem @["lay_sse"] { };
       NetMonItem @["lay_norm_err"] { };
       NetMonItem @["lay_cos_err"] { };
       NetMonItem @["lay_net_sd"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["trial_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["LeabraEpochMonitorTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["epoch_netmon"] { 
      NetMonItem_List @.items = [19] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["avg_sse"] { };
       NetMonItem @["cnt_err"] { };
       NetMonItem @["pct_cor"] { };
       NetMonItem @["pct_err"] { };
       NetMonItem @["avg_norm_err"] { };
       NetMonItem @["avg_cos_err"] { };
       NetMonItem @["avg_ext_rew"] { };
       NetMonItem @["avg_cycles"] { };
       NetMonItem @["epoch_time_tot"] { };
       NetMonItem @["epoch_time_usr"] { };
       NetMonItem @["lay_avg_sse"] { };
       NetMonItem @["lay_cnt_err"] { };
       NetMonItem @["lay_pct_cor"] { };
       NetMonItem @["lay_pct_err"] { };
       NetMonItem @["lay_avg_norm_err"] { };
       NetMonItem @["lay_avg_cos_err"] { };
       NetMonItem @["avg_net_sd"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["epoch_mon_data"] { };
     ProgVar @["epoch_netmon"] { };
     ProgVar @["epoch_timer"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser3"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["T3Frames"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [5] {
      T3Panel @["VEArmWorld"] { 
       T3DataView_List @.root_view.children = [6] {
	VEWorldView @["VEEmerWorld_View"] { 
	 T3DataView_List @.children = [3] {
	  VESpaceView @["RoomSpace"] { 
	   T3DataView_List @.children = [2] {
	    VEStaticView @["Ground"] { };
	    VEStaticView @["BackWall"] { };
	   };
	  };
	  VEObjectView @["Emer"] { 
	   T3DataView_List @.children = [14] {
	    VEBodyView @["Torso"] { };
	    VEBodyView @["Humerus"] { };
	    VEBodyView @["Ulna"] { };
	    VEBodyView @["Hand"] { };
	    VEBodyView @["Head"] { };
	    VEBodyView @["LeftEye"] { };
	    VEBodyView @["RightEye"] { };
	    VEBodyView @["Pectoralis"] { };
	    VEBodyView @["Deltoid"] { };
	    VEJointView @["Shoulder"] { };
	    VEJointView @["Elbow"] { };
	    VEJointView @["Wrist"] { };
	    VEJointView @["LeftEyeJoint"] { };
	    VEJointView @["RightEyeJoint"] { };
	   };
	  };
	  VEObjectView @["Target"] { 
	   T3DataView_List @.children = [1] {
	    VEBodyView @["TargetBody"] { };
	   };
	  };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
	GraphTableView @["ArmOutputData_Graph"] { 
	 T3DataView_List @.children = [20] {
	  GraphColView @["Reach_Name"] { };
	  GraphColView @["Reach_No"] { };
	  GraphColView @["Hand_cur_pos_x"] { };
	  GraphColView @["Hand_cur_pos_y"] { };
	  GraphColView @["Hand_cur_pos_z"] { };
	  GraphColView @["Target_cur_pos_x"] { };
	  GraphColView @["Target_cur_pos_y"] { };
	  GraphColView @["Target_cur_pos_z"] { };
	  GraphColView @["Hand_cur_lin_vel_x"] { };
	  GraphColView @["Hand_cur_lin_vel_y"] { };
	  GraphColView @["Hand_cur_lin_vel_z"] { };
	  GraphColView @["Should_pos"] { };
	  GraphColView @["Should_vel"] { };
	  GraphColView @["Should_force_in"] { };
	  GraphColView @["Elbow_pos"] { };
	  GraphColView @["Elbow_vel"] { };
	  GraphColView @["Elbow_force_in"] { };
	  GraphColView @["n_steps"] { };
	  GraphColView @["angle_err"] { };
	  GraphColView @["trg_dist"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [6] {
	  GraphPlotView @["ArmOutputData_Graph_plot_1"] { };
	  GraphPlotView @["ArmOutputData_Graph_plot_2"] { };
	  GraphPlotView @["ArmOutputData_Graph_plot_3"] { };
	  GraphPlotView @["ArmOutputData_Graph_plot_4"] { };
	  GraphPlotView @["ArmOutputData_Graph_plot_5"] { };
	  GraphPlotView @["ArmOutputData_Graph_plot_6"] { };
	 };

	 GraphPlotView_List @.errbars = [6] {
	  GraphPlotView @["ArmOutputData_Graph_err_1"] { };
	  GraphPlotView @["ArmOutputData_Graph_err_2"] { };
	  GraphPlotView @["ArmOutputData_Graph_err_3"] { };
	  GraphPlotView @["ArmOutputData_Graph_err_4"] { };
	  GraphPlotView @["ArmOutputData_Graph_err_5"] { };
	  GraphPlotView @["ArmOutputData_Graph_err_6"] { };
	 };
	};
	GraphTableView @["ArmOutputData_Graph_2"] { 
	 T3DataView_List @.children = [20] {
	  GraphColView @["Reach_Name"] { };
	  GraphColView @["Reach_No"] { };
	  GraphColView @["Hand_cur_pos_x"] { };
	  GraphColView @["Hand_cur_pos_y"] { };
	  GraphColView @["Hand_cur_pos_z"] { };
	  GraphColView @["Target_cur_pos_x"] { };
	  GraphColView @["Target_cur_pos_y"] { };
	  GraphColView @["Target_cur_pos_z"] { };
	  GraphColView @["Hand_cur_lin_vel_x"] { };
	  GraphColView @["Hand_cur_lin_vel_y"] { };
	  GraphColView @["Hand_cur_lin_vel_z"] { };
	  GraphColView @["Should_pos"] { };
	  GraphColView @["Should_vel"] { };
	  GraphColView @["Should_force_in"] { };
	  GraphColView @["Elbow_pos"] { };
	  GraphColView @["Elbow_vel"] { };
	  GraphColView @["Elbow_force_in"] { };
	  GraphColView @["n_steps"] { };
	  GraphColView @["angle_err"] { };
	  GraphColView @["trg_dist"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [6] {
	  GraphPlotView @["ArmOutputData_Graph_2_plot_1"] { };
	  GraphPlotView @["ArmOutputData_Graph_2_plot_2"] { };
	  GraphPlotView @["ArmOutputData_Graph_2_plot_3"] { };
	  GraphPlotView @["ArmOutputData_Graph_2_plot_4"] { };
	  GraphPlotView @["ArmOutputData_Graph_2_plot_5"] { };
	  GraphPlotView @["ArmOutputData_Graph_2_plot_6"] { };
	 };

	 GraphPlotView_List @.errbars = [6] {
	  GraphPlotView @["ArmOutputData_Graph_2_err_1"] { };
	  GraphPlotView @["ArmOutputData_Graph_2_err_2"] { };
	  GraphPlotView @["ArmOutputData_Graph_2_err_3"] { };
	  GraphPlotView @["ArmOutputData_Graph_2_err_4"] { };
	  GraphPlotView @["ArmOutputData_Graph_2_err_5"] { };
	  GraphPlotView @["ArmOutputData_Graph_2_err_6"] { };
	 };
	};
	GraphTableView @["ArmOutputData_Graph_3"] { 
	 T3DataView_List @.children = [20] {
	  GraphColView @["Reach_Name"] { };
	  GraphColView @["Reach_No"] { };
	  GraphColView @["Hand_cur_pos_x"] { };
	  GraphColView @["Hand_cur_pos_y"] { };
	  GraphColView @["Hand_cur_pos_z"] { };
	  GraphColView @["Target_cur_pos_x"] { };
	  GraphColView @["Target_cur_pos_y"] { };
	  GraphColView @["Target_cur_pos_z"] { };
	  GraphColView @["Hand_cur_lin_vel_x"] { };
	  GraphColView @["Hand_cur_lin_vel_y"] { };
	  GraphColView @["Hand_cur_lin_vel_z"] { };
	  GraphColView @["Should_pos"] { };
	  GraphColView @["Should_vel"] { };
	  GraphColView @["Should_force_in"] { };
	  GraphColView @["Elbow_pos"] { };
	  GraphColView @["Elbow_vel"] { };
	  GraphColView @["Elbow_force_in"] { };
	  GraphColView @["n_steps"] { };
	  GraphColView @["angle_err"] { };
	  GraphColView @["trg_dist"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [6] {
	  GraphPlotView @["ArmOutputData_Graph_3_plot_1"] { };
	  GraphPlotView @["ArmOutputData_Graph_3_plot_2"] { };
	  GraphPlotView @["ArmOutputData_Graph_3_plot_3"] { };
	  GraphPlotView @["ArmOutputData_Graph_3_plot_4"] { };
	  GraphPlotView @["ArmOutputData_Graph_3_plot_5"] { };
	  GraphPlotView @["ArmOutputData_Graph_3_plot_6"] { };
	 };

	 GraphPlotView_List @.errbars = [6] {
	  GraphPlotView @["ArmOutputData_Graph_3_err_1"] { };
	  GraphPlotView @["ArmOutputData_Graph_3_err_2"] { };
	  GraphPlotView @["ArmOutputData_Graph_3_err_3"] { };
	  GraphPlotView @["ArmOutputData_Graph_3_err_4"] { };
	  GraphPlotView @["ArmOutputData_Graph_3_err_5"] { };
	  GraphPlotView @["ArmOutputData_Graph_3_err_6"] { };
	 };
	};
	GraphTableView @["ReachOutputData_Graph"] { 
	 T3DataView_List @.children = [29] {
	  GraphColView @["time"] { };
	  GraphColView @["Hand_cur_pos_x"] { };
	  GraphColView @["Hand_cur_pos_y"] { };
	  GraphColView @["Hand_cur_pos_z"] { };
	  GraphColView @["Target_cur_pos_x"] { };
	  GraphColView @["Target_cur_pos_y"] { };
	  GraphColView @["Target_cur_pos_z"] { };
	  GraphColView @["Hand_cur_lin_vel_x"] { };
	  GraphColView @["Hand_cur_lin_vel_y"] { };
	  GraphColView @["Hand_cur_lin_vel_z"] { };
	  GraphColView @["Should_pos"] { };
	  GraphColView @["Should_vel"] { };
	  GraphColView @["Should_flexor_len"] { };
	  GraphColView @["Should_flexor_dlen"] { };
	  GraphColView @["Should_flexor_act"] { };
	  GraphColView @["Should_flexor_m_act_force"] { };
	  GraphColView @["Should_flexor_m_force"] { };
	  GraphColView @["Should_flexor_force"] { };
	  GraphColView @["Should_extensor_len"] { };
	  GraphColView @["Should_extensor_dlen"] { };
	  GraphColView @["Should_extensor_act"] { };
	  GraphColView @["Should_extensor_m_act_force"] { };
	  GraphColView @["Should_extensor_m_force"] { };
	  GraphColView @["Should_extensor_force"] { };
	  GraphColView @["should_cur_trg"] { };
	  GraphColView @["Elbow_pos"] { };
	  GraphColView @["Elbow_vel"] { };
	  GraphColView @["Elbow_force_in"] { };
	  GraphColView @["elbow_cur_trg"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [6] {
	  GraphPlotView @["ReachOutputData_Graph_plot_1"] { };
	  GraphPlotView @["ReachOutputData_Graph_plot_2"] { };
	  GraphPlotView @["ReachOutputData_Graph_plot_3"] { };
	  GraphPlotView @["ReachOutputData_Graph_plot_4"] { };
	  GraphPlotView @["ReachOutputData_Graph_plot_5"] { };
	  GraphPlotView @["ReachOutputData_Graph_plot_6"] { };
	 };

	 GraphPlotView_List @.errbars = [6] {
	  GraphPlotView @["ReachOutputData_Graph_err_1"] { };
	  GraphPlotView @["ReachOutputData_Graph_err_2"] { };
	  GraphPlotView @["ReachOutputData_Graph_err_3"] { };
	  GraphPlotView @["ReachOutputData_Graph_err_4"] { };
	  GraphPlotView @["ReachOutputData_Graph_err_5"] { };
	  GraphPlotView @["ReachOutputData_Graph_err_6"] { };
	 };
	};
	GraphTableView @["ReachOutputData_Graph_5"] { 
	 T3DataView_List @.children = [29] {
	  GraphColView @["time"] { };
	  GraphColView @["Hand_cur_pos_x"] { };
	  GraphColView @["Hand_cur_pos_y"] { };
	  GraphColView @["Hand_cur_pos_z"] { };
	  GraphColView @["Target_cur_pos_x"] { };
	  GraphColView @["Target_cur_pos_y"] { };
	  GraphColView @["Target_cur_pos_z"] { };
	  GraphColView @["Hand_cur_lin_vel_x"] { };
	  GraphColView @["Hand_cur_lin_vel_y"] { };
	  GraphColView @["Hand_cur_lin_vel_z"] { };
	  GraphColView @["Should_pos"] { };
	  GraphColView @["Should_vel"] { };
	  GraphColView @["Should_flexor_len"] { };
	  GraphColView @["Should_flexor_dlen"] { };
	  GraphColView @["Should_flexor_act"] { };
	  GraphColView @["Should_flexor_m_act_force"] { };
	  GraphColView @["Should_flexor_m_force"] { };
	  GraphColView @["Should_flexor_force"] { };
	  GraphColView @["Should_extensor_len"] { };
	  GraphColView @["Should_extensor_dlen"] { };
	  GraphColView @["Should_extensor_act"] { };
	  GraphColView @["Should_extensor_m_act_force"] { };
	  GraphColView @["Should_extensor_m_force"] { };
	  GraphColView @["Should_extensor_force"] { };
	  GraphColView @["should_cur_trg"] { };
	  GraphColView @["Elbow_pos"] { };
	  GraphColView @["Elbow_vel"] { };
	  GraphColView @["Elbow_force_in"] { };
	  GraphColView @["elbow_cur_trg"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [6] {
	  GraphPlotView @["ReachOutputData_Graph_5_plot_1"] { };
	  GraphPlotView @["ReachOutputData_Graph_5_plot_2"] { };
	  GraphPlotView @["ReachOutputData_Graph_5_plot_3"] { };
	  GraphPlotView @["ReachOutputData_Graph_5_plot_4"] { };
	  GraphPlotView @["ReachOutputData_Graph_5_plot_5"] { };
	  GraphPlotView @["ReachOutputData_Graph_5_plot_6"] { };
	 };

	 GraphPlotView_List @.errbars = [6] {
	  GraphPlotView @["ReachOutputData_Graph_5_err_1"] { };
	  GraphPlotView @["ReachOutputData_Graph_5_err_2"] { };
	  GraphPlotView @["ReachOutputData_Graph_5_err_3"] { };
	  GraphPlotView @["ReachOutputData_Graph_5_err_4"] { };
	  GraphPlotView @["ReachOutputData_Graph_5_err_5"] { };
	  GraphPlotView @["ReachOutputData_Graph_5_err_6"] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["TopDown"] { };
	T3SavedView @["Side"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["FwdModelNet"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_FwdModelNet_root_view_children_0"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [7] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	  ScaleRange @[5] { };
	  ScaleRange @[6] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["EpochOutputData"] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0"] { 
	 T3DataView_List @.children = [10] {
	  GraphColView @["batch"] { };
	  GraphColView @["epoch"] { };
	  GraphColView @["avg_sse"] { };
	  GraphColView @["cnt_err"] { };
	  GraphColView @["avg_trg_dist"] { };
	  GraphColView @["avg_ext_rew"] { };
	  GraphColView @["rew_dist_thr"] { };
	  GraphColView @["avg_cycles"] { };
	  GraphColView @["epoch_time_tot"] { };
	  GraphColView @["epoch_time_usr"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [6] {
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_1"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_2"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_3"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_4"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_5"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_6"] { };
	 };

	 GraphPlotView_List @.errbars = [6] {
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_1"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_2"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_3"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_4"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_5"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_6"] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["RLNet"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_RLNet_root_view_children_0"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [3] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["TrialOutputData"] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0"] { 
	 T3DataView_List @.children = [23] {
	  GraphColView @["batch"] { };
	  GraphColView @["epoch"] { };
	  GraphColView @["trial"] { };
	  GraphColView @["trial_name"] { };
	  GraphColView @["group_name"] { };
	  GraphColView @["VisFwd_phase_no"] { };
	  GraphColView @["SomaFw_phase_no"] { };
	  GraphColView @["VisHan_phase_no"] { };
	  GraphColView @["SomaSh_phase_no"] { };
	  GraphColView @["SomaEl_phase_no"] { };
	  GraphColView @["VisFwd_minus_cycles"] { };
	  GraphColView @["SomaFw_minus_cycles"] { };
	  GraphColView @["VisHan_minus_cycles"] { };
	  GraphColView @["SomaSh_minus_cycles"] { };
	  GraphColView @["SomaEl_minus_cycles"] { };
	  GraphColView @["sse"] { };
	  GraphColView @["ext_rew"] { };
	  GraphColView @["VisFwd_pvlv_pvi"] { };
	  GraphColView @["SomaFw_pvlv_pvi"] { };
	  GraphColView @["VisHan_pvlv_pvi"] { };
	  GraphColView @["SomaSh_pvlv_pvi"] { };
	  GraphColView @["SomaEl_pvlv_pvi"] { };
	  GraphColView @["trg_dist"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [6] {
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_1"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_2"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_3"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_4"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_5"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_6"] { };
	 };

	 GraphPlotView_List @.errbars = [6] {
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_1"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_2"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_3"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_4"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_5"] { };
	  GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_6"] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [2] {
  LeabraNetwork @["FwdModelNet"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["maxda"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
   };

   BaseSpec_Group @.specs = [7] {
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraLayerSpec @["HiddenLayer"] { 
     BaseSpec_Group @.children = [1] {
      LeabraLayerSpec @["Input_Output"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    FullPrjnSpec @["FullPrjnSpec_2"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_4"] { 
     BaseSpec_Group @.children = [1] {
      LeabraBiasSpec @["LeabraBiasSpec_4"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    ScalarValLayerSpec @["NormScalarVal"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    ScalarValLayerSpec @["ForceScalarVal"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    TwoDValLayerSpec @["VisTwoDVal"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   Layer_Group @.layers = [11] {
    TwoDValLeabraLayer @["VisTarget_Cur"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [110] {
     };
    };
    TwoDValLeabraLayer @["VisHand_Cur"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [110] {
     };
    };
    LeabraLayer @["SomaShoulderAngle_Cur"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [12] {
     };
    };
    LeabraLayer @["SomaElbowAngle_Cur"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [12] {
     };
    };
    LeabraLayer @["MotorShoulderForce"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [12] {
     };
    };
    LeabraLayer @["MotorElbowForce"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [12] {
     };
    };
    LeabraLayer @["VisFwdHidden"] { 
     Projection_Group @.projections = [2] {
      LeabraPrjn @["Fm_MotorShoulderForce"] { };
      LeabraPrjn @["Fm_MotorElbowForce"] { };
     };

     Unit_Group @.units = [49] {
     };
    };
    LeabraLayer @["SomaFwdHidden"] { 
     Projection_Group @.projections = [6] {
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
      LeabraPrjn @["Fm_MotorShoulderForce"] { };
      LeabraPrjn @["Fm_MotorElbowForce"] { };
      LeabraPrjn @["Fm_SomaShoulderAngle_Pred"] { };
      LeabraPrjn @["Fm_SomaElbowAngle_Pred"] { };
     };

     Unit_Group @.units = [49] {
     };
    };
    TwoDValLeabraLayer @["VisHand_Pred"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_VisFwdHidden"] { };
     };

     Unit_Group @.units = [110] {
     };
    };
    LeabraLayer @["SomaShoulderAngle_Pred"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_SomaFwdHidden"] { };
     };

     Unit_Group @.units = [12] {
     };
    };
    LeabraLayer @["SomaElbowAngle_Pred"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_SomaFwdHidden"] { };
     };

     Unit_Group @.units = [12] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
  LeabraNetwork @["RLNet"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["maxda"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
   };

   BaseSpec_Group @.specs = [7] {
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [1] {
      LeabraUnitSpec @["MotorUnits"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.noise_sched = [0] {
       };
      };
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraLayerSpec @["HiddenLayer"] { 
     BaseSpec_Group @.children = [1] {
      LeabraLayerSpec @["Input_Output"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    FullPrjnSpec @["FullPrjnSpec_2"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_4"] { 
     BaseSpec_Group @.children = [1] {
      LeabraBiasSpec @["LeabraBiasSpec_4"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [2] {
	SchedItem @[0] { };
	SchedItem @[1] { };
       };
      };
     };

     Schedule @.lrate_sched = [2] {
      SchedItem @[0] { };
      SchedItem @[1] { };
     };
    };
    ScalarValLayerSpec @["NormScalarVal"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    ScalarValLayerSpec @["ForceScalarVal"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    TwoDValLayerSpec @["VisTwoDVal"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    BaseSpec_Group @.gp["PFC_BG_Units"] = [2] { 
     LeabraUnitSpec @["PVUnits"] { 
      BaseSpec_Group @.children = [1] {
       LeabraUnitSpec @["LVUnits"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
      };

      Schedule @.noise_sched = [0] {
      };
     };
     LeabraUnitSpec @["DaUnits"] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.noise_sched = [0] {
      };
     };
    };
    BaseSpec_Group @.gp["PFC_BG_Cons"] = [2] { 
     LeabraConSpec @["LearnCons"] { 
      BaseSpec_Group @.children = [1] {
       LeabraBiasSpec @["BgBias"] { 
	BaseSpec_Group @.children = [1] {
	 LeabraBiasSpec @["FixedBias"] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     MarkerConSpec @["MarkerCons"] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.lrate_sched = [0] {
      };
     };
    };
    BaseSpec_Group @.gp["PFC_BG_Layers"] = [1] { 
     ExtRewLayerSpec @["PVeLayer"] { 
      BaseSpec_Group @.children = [0] {
      };
     };
    };
    BaseSpec_Group @.gp["PFC_BG_Prjns"] = [2] { 
     FullPrjnSpec @["FullPrjn"] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     OneToOnePrjnSpec @["OneToOne"] { 
      BaseSpec_Group @.children = [0] {
      };
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   Layer_Group @.layers = [18] {
    LeabraLayer @["RewTarg"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [1] {
     };
    };
    LeabraLayer @["PVe"] { 
     Projection_Group @.projections = [5] {
      LeabraPrjn @["Marker_Fm_RewTarg"] { };
      LeabraPrjn @["Marker_Fm_MotorElbowForce"] { };
      LeabraPrjn @["Marker_Fm_MotorShoulderForce"] { };
      LeabraPrjn @["Marker_Fm_SomaElbowAngle_Pred"] { };
      LeabraPrjn @["Marker_Fm_SomaShoulderAngle_Pred"] { };
     };

     Unit_Group @.units = [4] {
     };
    };
    LeabraLayer @["PVr"] { 
     Projection_Group @.projections = [3] {
      LeabraPrjn @["Marker_Fm_PVe"] { };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
     };

     Unit_Group @.units = [4] {
     };
    };
    LeabraLayer @["PVi"] { 
     Projection_Group @.projections = [3] {
      LeabraPrjn @["Marker_Fm_PVe"] { };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
     };

     Unit_Group @.units = [4] {
     };
    };
    LeabraLayer @["LVe"] { 
     Projection_Group @.projections = [3] {
      LeabraPrjn @["Marker_Fm_PVr"] { };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
     };

     Unit_Group @.units = [4] {
     };
    };
    LeabraLayer @["LVi"] { 
     Projection_Group @.projections = [3] {
      LeabraPrjn @["Marker_Fm_PVr"] { };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
     };

     Unit_Group @.units = [4] {
     };
    };
    LeabraLayer @["NV"] { 
     Projection_Group @.projections = [2] {
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
     };

     Unit_Group @.units = [4] {
     };
    };
    LeabraLayer @["DA"] { 
     Projection_Group @.projections = [5] {
      LeabraPrjn @["Marker_Fm_PVi"] { };
      LeabraPrjn @["Marker_Fm_LVe"] { };
      LeabraPrjn @["Marker_Fm_LVi"] { };
      LeabraPrjn @["Marker_Fm_PVr"] { };
      LeabraPrjn @["Marker_Fm_NV"] { };
     };

     Unit_Group @.units = [1] {
     };
    };
    LeabraLayer @["MotorElbowForce"] { 
     Projection_Group @.projections = [2] {
      LeabraPrjn @["Fm_RLHidden"] { };
      LeabraPrjn @["Marker_Fm_DA"] { };
     };

     Unit_Group @.units = [12] {
     };
    };
    LeabraLayer @["MotorShoulderForce"] { 
     Projection_Group @.projections = [2] {
      LeabraPrjn @["Fm_RLHidden"] { };
      LeabraPrjn @["Marker_Fm_DA"] { };
     };

     Unit_Group @.units = [12] {
     };
    };
    LeabraLayer @["RLHidden"] { 
     Projection_Group @.projections = [5] {
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] { };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] { };
      LeabraPrjn @["Fm_MotorShoulderForce"] { };
      LeabraPrjn @["Fm_MotorElbowForce"] { };
      LeabraPrjn @["Marker_Fm_DA"] { };
     };

     Unit_Group @.units = [49] {
     };
    };
    LeabraLayer @["SomaElbowAngle_Cur"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [12] {
     };
    };
    LeabraLayer @["SomaElbowAngle_Pred"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [0] {
     };
    };
    LeabraLayer @["SomaShoulderAngle_Cur"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [12] {
     };
    };
    LeabraLayer @["SomaShoulderAngle_Pred"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [0] {
     };
    };
    TwoDValLeabraLayer @["VisHand_Cur"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [110] {
     };
    };
    TwoDValLeabraLayer @["VisHand_Pred"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [0] {
     };
    };
    TwoDValLeabraLayer @["VisTarget_Cur"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [110] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects["ve_arm"] {
 name="ve_arm";
 desc="arm-only version of emer the robot model";
 tags="Robot, Arm, Motor Learning, Reinforcement Learning, Forward Model";
 version {
  major=8;
  minor=1;
  step=3;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 license {
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2016";
  custom=;
 };
 pub_cite=;
 wiki {
  wiki="emergent";
  page_name="demos/ve_arm";
 };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
  taDoc @["ProjectDocs"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ProjectDocs";
   desc=;
   web_doc=1;
   wiki="emergent";
   url="demos/ve_arm";
   full_url="https://grey.colorado.edu/emergent/index.php/demos/ve_arm";
   text_size=1;
   text="<html>
<head></head>
<body>
= Emer Robot (Arm) =

This project demonstrates how to use the virtual environment (VE) code to simulate a simple robot with a two-joint arm, which learns to reach to a target location (sort of).

The focus of this project so far is on building a clean infrastructure for the modeling work, including a robust VE model and numerous programs in RobotProgs for interfacing between the robot and the networks.  We are not so much interested in the details of individual reach movements, but rather on the learning and higher-level coordination of such movements.  Thus, each reach is considred to be a ballistic event that occurs within the \"Trial\" level of processing, although it is possible to have subsequent trials include corrective reaches or something like that. 

The models contain both joint-level and simluated visual information about the body and world, including current joint angles (somatosensory) and current hand location (visual), and they use scalar value layer specs to represent graded joint angle information.

There networks are:

* [[.T3Tab.FwdModelNet]] -- a forward model that currently is ''only'' a forward model (does not train an \"inverse\" model to control the robot to reach the target), which learns to predict the arm location based on random motor commands.

* [[.T3Tab.RLNet]] -- a reinforcement-learning model using the PVLV dopamine-based RL system to learn to reach the target, based on reward signals that are based on how close the hand got to the target.  Due to the strongly nonlinear properties of the Leabra unit functions, and kwta inhibitory competition, etc, the system does not do a very good job of learning based on graded distance information, and instead learns a set of \"good enough\" reaches that get close but not right on the target.  In general, we think this form of learning is much better for more discrete trial-and-error learning, e.g., for deciding which larger-scale motor plan to execute, rather than learning the fine details of motor control itself.

== Arm Model: Lambda Equilibrium Point (EP) Controller ==

The arm control signals are target final joint angles, which then determine the \"set points\" of muscles that are modeled based on the Gribble, Ostry, Sanguineti, and Labossiere, 1998 version of the Lambda model. There are flexor and extensor muscles for each joint, and each muscle has an equilibrium point (EP) at which no force is generated, based on the muscle spindle fiber reflex system. To move the arm from one joint angle to another, the system generates a smooth trajectory of EP values between the current and target joint angles, and this causes forces to be generated that move the arm.  In addition to joint angles, one can specify the degree of co-contraction (0-1), whereby the muscle set point is reduced by a fixed amount on both sides, causing a constant contraction force at the EP from both muscles, which serves to stabilize the arm.  See co_contract_pct in the EmerRobot program -- it defaults to .4, which produces very stable movements with little oscillation at the end of the reach.  Lower values are \"lower effort\" but result in more oscillations.

The detailed parameters for each muscle can be found under the [[.programs.EmerRobot.objs.VEEmerWorld]] object in the [[.programs.EmerRobot]] program -- just double-click on that World guy and everything will open up below it in the left hand browser, and you'll see the Shoulder and Elbow joints, and their associated flexor and extensor muscles.  All of the parameters are from Gribble et al, 1998 except the muscle recruitment gradient (m_rec_grad) parameter, which needed to be higher to produce faster reaches.  Note that this muscle model is quite realistic in many respects, including temporal delays in the reflex action, and time constants for the build-up of Calcium that actually activates the muscle contraction, etc.  

== Simple Demo of the Model ==

To see the model in action, go to the [[.PanelTab.ControlPanel]] and do Test Init, Test Run -- this will load weights into the RLNet and use that to control the arm to reach for the target -- it is not great as explained above, but much better than chance..

</body>
</html>
";
   html_text="<html>
<head></head>
<body>
<h1> Emer Robot (Arm) </h1>

This project demonstrates how to use the virtual environment (VE) code to simulate a simple robot with a two-joint arm, which learns to reach to a target location (sort of).

The focus of this project so far is on building a clean infrastructure for the modeling work, including a robust VE model and numerous programs in RobotProgs for interfacing between the robot and the networks.  We are not so much interested in the details of individual reach movements, but rather on the learning and higher-level coordination of such movements.  Thus, each reach is considred to be a ballistic event that occurs within the \"Trial\" level of processing, although it is possible to have subsequent trials include corrective reaches or something like that. 

The models contain both joint-level and simluated visual information about the body and world, including current joint angles (somatosensory) and current hand location (visual), and they use scalar value layer specs to represent graded joint angle information.

There networks are:

<ul><li> <a href=\"ta:.T3Tab.FwdModelNet\">FwdModelNet</a> -- a forward model that currently is  <i>only</i>  a forward model (does not train an \"inverse\" model to control the robot to reach the target), which learns to predict the arm location based on random motor commands.
</ul>
<ul><li> <a href=\"ta:.T3Tab.RLNet\">RLNet</a> -- a reinforcement-learning model using the PVLV dopamine-based RL system to learn to reach the target, based on reward signals that are based on how close the hand got to the target.  Due to the strongly nonlinear properties of the Leabra unit functions, and kwta inhibitory competition, etc, the system does not do a very good job of learning based on graded distance information, and instead learns a set of \"good enough\" reaches that get close but not right on the target.  In general, we think this form of learning is much better for more discrete trial-and-error learning, e.g., for deciding which larger-scale motor plan to execute, rather than learning the fine details of motor control itself.
</ul>
<h2> Arm Model: Lambda Equilibrium Point (EP) Controller </h2>

The arm control signals are target final joint angles, which then determine the \"set points\" of muscles that are modeled based on the Gribble, Ostry, Sanguineti, and Labossiere, 1998 version of the Lambda model. There are flexor and extensor muscles for each joint, and each muscle has an equilibrium point (EP) at which no force is generated, based on the muscle spindle fiber reflex system. To move the arm from one joint angle to another, the system generates a smooth trajectory of EP values between the current and target joint angles, and this causes forces to be generated that move the arm.  In addition to joint angles, one can specify the degree of co-contraction (0-1), whereby the muscle set point is reduced by a fixed amount on both sides, causing a constant contraction force at the EP from both muscles, which serves to stabilize the arm.  See co_contract_pct in the EmerRobot program -- it defaults to .4, which produces very stable movements with little oscillation at the end of the reach.  Lower values are \"lower effort\" but result in more oscillations.

The detailed parameters for each muscle can be found under the <a href=\"ta:.programs.EmerRobot.objs.VEEmerWorld\">VEEmerWorld</a> object in the <a href=\"ta:.programs.EmerRobot\">EmerRobot</a> program -- just double-click on that World guy and everything will open up below it in the left hand browser, and you'll see the Shoulder and Elbow joints, and their associated flexor and extensor muscles.  All of the parameters are from Gribble et al, 1998 except the muscle recruitment gradient (m_rec_grad) parameter, which needed to be higher to produce faster reaches.  Note that this muscle model is quite realistic in many respects, including temporal delays in the reflex action, and time constants for the build-up of Calcium that actually activates the muscle contraction, etc.  

<h2> Simple Demo of the Model </h2>

To see the model in action, go to the <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a> and do Test Init, Test Run -- this will load weights into the RLNet and use that to control the arm to reach for the target -- it is not great as explained above, but much better than chance..

</body>
</html>
";
  };
  taDoc @["ChangeLog"] {
   name="ChangeLog";
   desc=;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>


<li>Tue Aug 30 04:02:26 2016 version: 8.1.3 user: oreilly file_name: <code>ve_arm.proj</code> <br>
Project updated on wiki: emergent changes: docs



<li>Tue Aug 30 03:58:17 2016 version: 8.1.2 user: oreilly file_name: <code>ve_arm.proj</code> <br>
Published on wiki: emergent page: demos/ve_arm with description: arm-only version of emer the robot model tags: Robot, Arm, Motor Learning, Reinforcement Learning, Forward Model author: Randall C. O'Reilly email: emergent-users@grey.colorado.edu version: 8.1.1 pub_cite: 


<li>Tue Apr  7 23:42:10 2009 0.1.1. oreilly <code>EmerRobot_Arm.proj</code><br>
  lambda arm muscle code in place, with minimal rl and forward model learning, and all programs cleaned up, docs added.


</ul>
</body>
</html>
";
   html_text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>
<P>
<P>
<li>Tue Aug 30 04:02:26 2016 version: 8.1.3 user: oreilly file_name: <code>ve_arm.proj</code> <br>
Project updated on wiki: emergent changes: docs
<P>
<P>
<P>
<li>Tue Aug 30 03:58:17 2016 version: 8.1.2 user: oreilly file_name: <code>ve_arm.proj</code> <br>
Published on wiki: emergent page: demos/ve_arm with description: arm-only version of emer the robot model tags: Robot, Arm, Motor Learning, Reinforcement Learning, Forward Model author: Randall C. O'Reilly email: emergent-users@grey.colorado.edu version: 8.1.1 pub_cite: 


<li>Tue Apr  7 23:42:10 2009 0.1.1. oreilly <code>EmerRobot_Arm.proj</code><br>
  lambda arm muscle code in place, with minimal rl and forward model learning, and all programs cleaned up, docs added.


</ul>
</body>
</html>
";
  };
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_1"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_1";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ControlPanel @["ControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ControlPanel";
   updt_while_running=0;
   desc="main control panel for the system";
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="LeabraTrain_network";
     desc=" object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program's .objs, then the name will be automatically set -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     is_single=1;
     param_search {
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
    EditMbrItem @[1] {
     label="LeabraTrain_input_data";
     desc=" object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program's .objs, then the name will be automatically set -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["input_data"]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     is_single=1;
     param_search {
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
    EditMbrItem @[2] {
     label="LeabraCycle_update_net_view";
     desc=" boolean value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     is_single=1;
     param_search {
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
    EditMbrItem @[3] {
     label="LeabraAll_Std_step_prog";
     desc=" this is just here for loading prior versions and is no longer used in any fashion";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Std"]$$;
     mbr=Program_Group::step_prog;
     is_numeric=0;
     is_single=0;
     param_search {
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
    EditMbrItem @[4] {
     label="LeabraEpochTest_network";
     desc=" object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program's .objs, then the name will be automatically set -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     is_single=1;
     param_search {
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
    EditMbrItem @[5] {
     label="LeabraEpochTest_input_data";
     desc=" object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program's .objs, then the name will be automatically set -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["input_data"]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     is_single=1;
     param_search {
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
    EditMbrItem @[6] {
     label="LeabraAll_Test_step_prog";
     desc=" this is just here for loading prior versions and is no longer used in any fashion";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Test"]$$;
     mbr=Program_Group::step_prog;
     is_numeric=0;
     is_single=0;
     param_search {
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
    EditMbrItem_Group @.gp["RLNet_Params"] {
     name="RLNet_Params";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="LeabraUnitSpec_0_noise";
      desc=" distribution parameters for random added noise<br>  type:  type of random variable to generate<br>   * UNIFORM:  uniform with var = range on either side of the mean<br>   * BINOMIAL:  binomial with var = p, par = n<br>   * POISSON:  poisson with lambda = var<br>   * GAMMA:  gamma with var scaling parameter and par = k stages<br>   * GAUSSIAN:  normal with var<br>   * BETA:  beta with var = a and par = b shape parameters<br>   * NONE:  just the mean<br>  mean:  mean of random distribution<br>  var:  'varibility' parameter for the random numbers (gauss = standard deviation, not variance; uniform = half-range)<br>  par:  extra parameter for distribution (depends on each one)";
      cust_desc=0;
      base=.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$$;
      mbr=LeabraUnitSpec::noise;
      is_numeric=0;
      is_single=0;
      param_search {
       record=0;
       search=0;
       range="0:1:0.1";
      };
      param_set_value {
       saved_value=;
      };
      notes {
       notes=;
      };
     };
     EditMbrItem @[1] {
      label="LeabraUnitSpec_0_da_mod";
      desc=" da modulation of activations (for da-based learning, and other effects)<br>  on:  whether to add dopamine factor to net input<br>  minus:  how much to multiply da_p in the minus phase to add to netinput -- use negative values for NoGo/indirect pathway/D2 type neurons<br>  plus:  how much to multiply da_p in the plus phase to add to netinput -- use negative values for NoGo/indirect pathway/D2 type neurons";
      cust_desc=0;
      base=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$;
      mbr=LeabraUnitSpec::da_mod;
      is_numeric=0;
      is_single=0;
      param_search {
       record=0;
       search=0;
       range="0:1:0.1";
      };
      param_set_value {
       saved_value=;
      };
      notes {
       notes=;
      };
     };
     EditMbrItem @[2] {
      label="RLModelRew_rew_dist_hr_init";
      desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr_init"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      is_single=1;
      param_search {
       record=0;
       search=0;
       range="0:1:0.1";
      };
      param_set_value {
       saved_value=;
      };
      notes {
       notes=;
      };
     };
     EditMbrItem @[3] {
      label="RLModelRew_rew_dist_hr_incr";
      desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr_incr"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      is_single=1;
      param_search {
       record=0;
       search=0;
       range="0:1:0.1";
      };
      param_set_value {
       saved_value=;
      };
      notes {
       notes=;
      };
     };
     EditMbrItem @[4] {
      label="RLModelRew_avg_rew_dec_thr";
      desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["avg_rew_dec_thr"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      is_single=1;
      param_search {
       record=0;
       search=0;
       range="0:1:0.1";
      };
      param_set_value {
       saved_value=;
      };
      notes {
       notes=;
      };
     };
     EditMbrItem @[5] {
      label="RLModelRew_avg_rew_inc_thr";
      desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["avg_rew_inc_thr"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      is_single=1;
      param_search {
       record=0;
       search=0;
       range="0:1:0.1";
      };
      param_set_value {
       saved_value=;
      };
      notes {
       notes=;
      };
     };
    };
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     label="Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[3] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Stop;
    };
    EditMthItem @[4] {
     label="Test_Init";
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$$;
     mth=Program::Init;
    };
    EditMthItem @[5] {
     label="Test_Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[6] {
     label="Test_Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[7] {
     label="Test_Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
     mth=Program::Stop;
    };
   };
  };
  ControlPanel @["VEInfo"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="VEInfo";
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem_Group @.gp["VE_Arm"] {
     name="VE_Arm";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="VEArmWorld_stepsize";
      desc=" how big of a step to take";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"]$$;
      mbr=VEWorld::stepsize;
      is_numeric=1;
      is_single=1;
      param_search {
       record=0;
       search=0;
       range="0:1:0.1";
      };
      param_set_value {
       saved_value=;
      };
      notes {
       notes=;
      };
     };
     EditMbrItem @[1] {
      label="VEArmWorld_ode_params";
      desc=" parameters for tuning the ODE engine<br>  erp: [Default: 0.2]  (0-1, .1-.8 useful range) error reduction parameter: how much of the joint error is reduced at the next time step<br>  cfm: [Default: 1e-05]  (0-1, 1e-9 - 1 useful range) constraint force mixing parameter: how 'soft' is the constraint (0 = hard, 1 = soft)<br>  max cor vel: [Default: 1e+06]  maximum correcting velocity for contacts (how quickly they can pop things out of contact)<br>  contact depth: [Default: 0.001]  depth of the surface layer arond all geometry objects -- allows things to go this deep into a surface before actual contact is made -- increased value can help prevent jittering<br>  max col pts: [Default: 4]  maximum number of collision points to get (must be less than 64, which is a hard maximum)";
      cust_desc=0;
      base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"]$;
      mbr=VEWorld::ode_params;
      is_numeric=0;
      is_single=0;
      param_search {
       record=0;
       search=0;
       range="0:1:0.1";
      };
      param_set_value {
       saved_value=;
      };
      notes {
       notes=;
      };
     };
     EditMbrItem @[2] {
      label="VEArmWorld_updt_display";
      desc=" if true, will update any attached display after each time step";
      cust_desc=0;
      base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"]$;
      mbr=VEWorld::updt_display;
      is_numeric=0;
      is_single=1;
      param_search {
       record=0;
       search=0;
       range="0:1:0.1";
      };
      param_set_value {
       saved_value=;
      };
      notes {
       notes=;
      };
     };
     EditMbrItem @[3] {
      label="Arm_max_ve_steps";
      desc=" integer value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["max_ve_steps"]$$;
      mbr=ProgVar::int_val;
      is_numeric=1;
      is_single=1;
      param_search {
       record=0;
       search=0;
       range="0:1:0.1";
      };
      param_set_value {
       saved_value=;
      };
      notes {
       notes=;
      };
     };
     EditMbrItem @[4] {
      label="Arm_hand_vel_thr";
      desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_vel_thr"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      is_single=1;
      param_search {
       record=0;
       search=0;
       range="0:1:0.1";
      };
      param_set_value {
       saved_value=;
      };
      notes {
       notes=;
      };
     };
     EditMbrItem @[5] {
      label="Arm_co_contract_pct";
      desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["co_contract_pct"]$$;
      mbr=ProgVar::real_val;
      is_numeric=1;
      is_single=1;
      param_search {
       record=0;
       search=0;
       range="0:1:0.1";
      };
      param_set_value {
       saved_value=;
      };
      notes {
       notes=;
      };
     };
    };
    EditMbrItem_Group @.gp["Shoulder"] {
     name="Shoulder";
     el_typ=EditMbrItem;
     el_def=0;
    };
    EditMbrItem_Group @.gp["Elbow"] {
     name="Elbow";
     el_typ=EditMbrItem;
     el_def=0;
    };
    EditMbrItem_Group @.gp["Joints"] {
     name="Joints";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem_Group @.gp["Elbow"] {
      name="Elbow";
      el_typ=EditMbrItem;
      el_def=0;
     };
     EditMbrItem_Group @.gp["Shoulder"] {
      name="Shoulder";
      el_typ=EditMbrItem;
      el_def=0;
     };
    };
    EditMbrItem_Group @.gp["Limbs"] {
     name="Limbs";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem_Group @.gp["Humerus"] {
      name="Humerus";
      el_typ=EditMbrItem;
      el_def=0;
      EditMbrItem @[0] {
       label="Humerus_cur_pos";
       desc=" current position of body<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$$;
       mbr=VEBody::cur_pos;
       is_numeric=0;
       is_single=0;
       param_search {
	record=0;
	search=0;
	range="0:1:0.1";
       };
       param_set_value {
	saved_value=;
       };
       notes {
	notes=;
       };
      };
      EditMbrItem @[1] {
       label="Humerus_cur_lin_vel";
       desc=" current linear velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$;
       mbr=VEBody::cur_lin_vel;
       is_numeric=0;
       is_single=0;
       param_search {
	record=0;
	search=0;
	range="0:1:0.1";
       };
       param_set_value {
	saved_value=;
       };
       notes {
	notes=;
       };
      };
      EditMbrItem @[2] {
       label="Humerus_cur_ang_vel";
       desc=" current angular velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$;
       mbr=VEBody::cur_ang_vel;
       is_numeric=0;
       is_single=0;
       param_search {
	record=0;
	search=0;
	range="0:1:0.1";
       };
       param_set_value {
	saved_value=;
       };
       notes {
	notes=;
       };
      };
     };
     EditMbrItem_Group @.gp["Ulna"] {
      name="Ulna";
      el_typ=EditMbrItem;
      el_def=0;
      EditMbrItem @[0] {
       label="Ulna_cur_pos";
       desc=" current position of body<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$$;
       mbr=VEBody::cur_pos;
       is_numeric=0;
       is_single=0;
       param_search {
	record=0;
	search=0;
	range="0:1:0.1";
       };
       param_set_value {
	saved_value=;
       };
       notes {
	notes=;
       };
      };
      EditMbrItem @[1] {
       label="Ulna_cur_lin_vel";
       desc=" current linear velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$;
       mbr=VEBody::cur_lin_vel;
       is_numeric=0;
       is_single=0;
       param_search {
	record=0;
	search=0;
	range="0:1:0.1";
       };
       param_set_value {
	saved_value=;
       };
       notes {
	notes=;
       };
      };
      EditMbrItem @[2] {
       label="Ulna_cur_ang_vel";
       desc=" current angular velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$;
       mbr=VEBody::cur_ang_vel;
       is_numeric=0;
       is_single=0;
       param_search {
	record=0;
	search=0;
	range="0:1:0.1";
       };
       param_set_value {
	saved_value=;
       };
       notes {
	notes=;
       };
      };
     };
     EditMbrItem_Group @.gp["Hand"] {
      name="Hand";
      el_typ=EditMbrItem;
      el_def=0;
      EditMbrItem @[0] {
       label="Hand_cur_pos";
       desc=" current position of body<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$$;
       mbr=VEBody::cur_pos;
       is_numeric=0;
       is_single=0;
       param_search {
	record=0;
	search=0;
	range="0:1:0.1";
       };
       param_set_value {
	saved_value=;
       };
       notes {
	notes=;
       };
      };
      EditMbrItem @[1] {
       label="Hand_cur_lin_vel";
       desc=" current linear velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
       mbr=VEBody::cur_lin_vel;
       is_numeric=0;
       is_single=0;
       param_search {
	record=0;
	search=0;
	range="0:1:0.1";
       };
       param_set_value {
	saved_value=;
       };
       notes {
	notes=;
       };
      };
      EditMbrItem @[2] {
       label="Hand_cur_ang_vel";
       desc=" current angular velocity<br>  x:  horizontal<br>  y:  vertical<br>  z:  depth";
       cust_desc=0;
       base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
       mbr=VEBody::cur_ang_vel;
       is_numeric=0;
       is_single=0;
       param_search {
	record=0;
	search=0;
	range="0:1:0.1";
       };
       param_set_value {
	saved_value=;
       };
       notes {
	notes=;
       };
      };
     };
    };
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Arm_Init";
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Arm_Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     label="Arm_Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
     mth=Program::Step_Gui;
    };
   };
  };
  ControlPanel @["PVLV"] {
   name="PVLV";
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="pve_rew";
     desc=" misc reward computation specifications<br>  err val: [Default: 0]  reward value for errors (when network does not respond correctly)<br>  norew val: [Default: 0.5]  reward value when no feedback information is present<br>  rew val: [Default: 1]  reward value for correct responses (positive rewards)";
     cust_desc=0;
     base=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["PVeLayer"]$$;
     mbr=ExtRewLayerSpec::rew;
     is_numeric=0;
     is_single=0;
     param_search {
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    name="jobs_running";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output files generated by model -- files are named as  tag_<extra>.out -- this list automatically generated by parsing the result files checked into svn";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  -1 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the job submission commands";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["done_svn"] {
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["last_svn"] {
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["model_svn"] {
      name="model_svn";
      desc="svn revision for the model";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_done {
    name="jobs_done";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output files generated by model -- files are named as  tag_<extra>.out -- this list automatically generated by parsing the result files checked into svn";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  -1 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the job submission commands";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["done_svn"] {
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["last_svn"] {
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["model_svn"] {
      name="model_svn";
      desc="svn revision for the model";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_deleted {
    name="jobs_deleted";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["done_svn"] {
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["last_svn"] {
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name=;
    [0]     };
    last_sort_spec {
     name=;
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name=;
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_archive {
    name="jobs_archive";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["done_svn"] {
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["last_svn"] {
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name=;
    [0]     };
    last_sort_spec {
     name=;
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name=;
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   file_list {
    name="file_list";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_name"] {
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["size"] {
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["kind"] {
      name="kind";
      desc="type of file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_modified"] {
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_created"] {
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["svn_file_path"] {
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["proj_file_path"] {
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_path"] {
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name=;
    [0]     };
    last_sort_spec {
     name=;
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name=;
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   cluster_info {
    name="cluster_info";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user name";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["state"] {
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["procs"] {
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name=;
    [0]     };
    last_sort_spec {
     name=;
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name=;
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=-1;
   n_threads=2;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 param_sets {
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["FwdModelInputData"] {
    name="FwdModelInputData";
    desc="input data for training the forward model";
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      name="Name";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [100] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
      };
     };
     float_Data @["VisTarget_Cur"] {
      name="VisTarget_Cur";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [2 1 100] 0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;0.63481128;0.91167396;
      };
     };
     float_Data @["VisHand_Cur"] {
      name="VisHand_Cur";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [2 1 100] 0.51096886;1.0057883;0.98583239;0.3451024;0.44195947;0.65126932;0.38861054;0.48832265;0.66205519;0.53255314;
0.6596058;0.92258739;0.95375198;0.45181084;0.36383644;0.24425653;0.61100787;0.97552675;0.93118048;0.40312693;
0.11928414;0.34118894;0.9586153;0.4367142;0.75255936;0.63351345;0.24052298;0.43413293;0.39201331;0.67528093;
0.5410893;0.73877692;0.31896567;0.7229318;0.068093747;0.43243209;0.40452397;0.68079478;0.97379756;0.19044572;
0.85874432;0.49126884;0.48163995;0.95218903;0.88519216;-0.068391003;0.3751882;0.74437666;0.95216393;0.30389342;
0.6970439;0.81935495;0.33170971;0.26718122;0.98218679;0.28160131;0.54452336;0.85651392;0.81826943;0.46205655;
0.34804788;0.21560074;0.28006718;0.86589748;0.6611374;0.90024334;0.97526175;0.27605537;0.39124697;0.53117371;
0.47819534;0.54073048;0.59838259;0.48595592;0.35130996;0.36739612;0.5287981;0.76502192;0.30706015;0.44300655;
0.7092272;0.94864357;0.34805217;0.98352641;0.030797562;0.38978413;0.81786662;0.83963251;0.25918132;0.76147586;
0.71592993;0.66539508;0.39644489;0.63703686;0.9389835;0.62636024;0.39096233;0.48032311;0.32935658;0.97441483;
0.76055068;0.87796301;0.84824944;0.41036087;0.50842828;1.0139002;0.84102994;0.72123355;0.5778082;0.68729031;
0.29931307;0.18306667;0.26868653;0.46602589;0.49766716;0.96234369;0.63614589;0.64010441;0.64369768;0.65791285;
0.2391618;0.46822801;0.89684182;0.35061622;0.93383086;0.24119882;0.24600235;0.24585356;0.5058946;0.64491332;
0.88982457;0.39749727;0.21341392;0.14141205;0.55723369;0.80791354;0.85786039;-0.11404549;0.21654943;0.32500115;
0.25272369;0.66723716;0.34969652;0.22677732;0.8558079;0.43460101;0.38645953;0.99704599;0.95774937;0.56762618;
0.12542969;0.69740433;0.4112727;0.55433714;0.72453099;0.49169356;0.8735885;-0.09030807;0.89773095;0.38663048;
0.083248667;0.70317793;0.34648946;0.63766944;0.3536399;0.79801697;0.97525668;0.31574252;0.26485482;0.25541425;
0.53608727;1.0131906;0.90539497;0.65301037;0.14797363;0.66124892;0.48879674;0.55789983;0.2972132;0.69384331;
0.067379393;0.5239287;0.36603716;0.24352379;0.65098757;0.67542326;0.4055177;0.95881212;0.94788855;0.26166767;
0.5681352;0.9579919;0.92348158;0.64649618;0.82683045;0.82272071;0.24098451;0.87004811;0.93054515;0.1736328;
      };
     };
     float_Data @["SomaShoulderAngle_Cur"] {
      name="SomaShoulderAngle_Cur";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [1 1 100] 0.57998103;0.22518763;0.38028118;0.47049239;0.058510389;0.41968873;0.14982431;0.82348925;0.4965421;0.088460602;
0.87170714;0.14852306;0.14852871;0.70538491;0.45231146;0.31832713;0.54974592;0.88984936;0.43775126;0.11211802;
0.077095099;0.5191406;0.036686327;0.4903608;0.071024418;0.31165045;0.79462916;0.13776471;0.39860865;0.02980607;
0.86130315;0.64547497;0.39408389;0.1111737;0.45000878;0.28046104;0.030960269;0.6472742;0.34580439;0.6262033;
0.51993692;0.71466446;0.96298558;0.38772517;0.62709665;0.17550565;0.43952128;0.29198238;0.47021601;0.74641091;
0.38882509;0.013759866;0.64819831;0.2553384;0.25188237;0.89702308;0.65656531;0.51962101;0.17491531;0.18716566;
0.68794841;0.021919759;0.021969657;0.84924096;0.29387057;0.041062959;0.95246172;0.35475335;0.0082387114;0.80125797;
0.62289637;0.84672827;0.035637967;0.68312114;0.27241889;0.78934944;0.41126227;0.01622382;0.016224485;0.04242802;
0.93279421;0.50713933;0.53233218;0.12239111;0.83190405;0.61745018;0.24927789;0.7509743;0.26901615;0.57132906;
0.87046993;0.82484913;0.19932453;0.58660209;0.049780622;0.48004273;0.27400658;0.36886147;0.70018834;0.0023305418;
      };
     };
     float_Data @["SomaElbowAngle_Cur"] {
      name="SomaElbowAngle_Cur";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [1 1 100] 0.19668387;0.02117639;0.82606035;0.94943124;0.85155845;0.35256702;0.31129858;0.95226562;0.25333425;0.40910709;
0.56112671;0.29789189;0.65184355;0.77293807;0.77293777;0.72485203;0.65744293;0.41880628;0.77448899;0.13568404;
0.5591225;0.3821584;0.030640706;0.68023801;0.34301764;0.50444424;0.9175784;0.16560508;0.55878872;0.65083313;
0.91615731;0.40155777;0.40192395;0.22222605;0.91675037;0.95783311;0.95783252;0.95783126;0.69382095;0.87146533;
0.06200251;0.1006135;0.29789931;0.19242719;0.53846252;0.67196208;0.81761771;0.14965834;0.95798683;0.052095149;
0.2761603;0.60793012;0.038589478;0.39336422;0.77301818;0.83252227;0.80506855;0.35738292;0.78342998;0.75829691;
0.75829542;0.5083366;0.389137;0.78110611;0.84348899;0.52016443;0.67931211;0.62773645;0.039899629;0.74687517;
0.637299;0.9245373;0.58648014;0.1218732;0.13280872;0.35560825;0.91185743;0.79286349;0.052526277;0.50296277;
0.043978229;0.77604836;0.59352189;0.23540485;0.81388474;0.074177809;0.29583311;0.45923567;0.94064236;0.66646582;
0.36800423;0.95477158;0.73311329;0.33258;0.34826711;0.34826729;0.21957879;0.21667665;0.31901348;0.36364707;
      };
     };
     float_Data @["MotorShoulderForce"] {
      name="MotorShoulderForce";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [1 1 100] 0.24357438;0.35429925;0.47382393;0.055935245;0.42502031;0.17021513;0.83672357;0.48577076;0.09080483;0.89008445;
0.17965175;0.16782473;0.70577246;0.46330741;0.32852945;0.51846647;0.88337022;0.43204433;0.11665879;0.056507301;
0.51559621;0.019900462;0.51081628;0.07677675;0.30179051;0.79092532;0.15122773;0.39710256;0.019407135;0.8729803;
0.65361613;0.41346136;0.12016647;0.43633068;0.2882933;0.011766178;0.6568988;0.34425628;0.6460731;0.51356232;
0.68320054;0.94369459;0.40789983;0.62600064;0.17727923;0.40565076;0.29901046;0.44552279;0.75045019;0.41935867;
0.0083638988;0.63332725;0.26158589;0.22853248;0.90312248;0.66341096;0.52372926;0.19329761;0.22073123;0.68058914;
0.045036659;0.035535209;0.84672761;0.2839438;0.056387201;0.94379252;0.36901349;0.032305136;0.81490099;0.65307456;
0.8180753;0.044336386;0.64861327;0.27043495;0.79647917;0.39451793;0.012139625;0.021184931;0.066545464;0.93148702;
0.50233346;0.55708158;0.14569671;0.84671801;0.63822722;0.27489194;0.75094491;0.26900652;0.58232939;0.84869421;
0.80573171;0.19670925;0.59522933;0.064474724;0.49141636;0.29005995;0.36832175;0.67797649;0.039749444;0.56626338;
      };
     };
     float_Data @["MotorElbowForce"] {
      name="MotorElbowForce";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [1 1 100] 0.029047899;0.84847653;0.96682566;0.84430641;0.34201056;0.31409979;0.97372288;0.23113051;0.43368649;0.58344293;
0.29420042;0.6729731;0.80640244;0.76142597;0.70602936;0.65222567;0.38303342;0.79286551;0.11090475;0.57986915;
0.36261871;0.018711248;0.70158541;0.32821575;0.50022084;0.94872755;0.14414093;0.536717;0.65726662;0.93182808;
0.37786913;0.41052893;0.24415851;0.94116014;0.99381036;0.93887287;0.9390353;0.67667967;0.8996973;0.039504025;
0.10362258;0.26918381;0.18173558;0.51937199;0.69853139;0.85146743;0.1264759;0.9806394;0.029567888;0.31525078;
0.64761537;0.0073662223;0.4268018;0.79467279;0.87073499;0.78312659;0.33241615;0.79563743;0.72460854;0.74313259;
0.50166869;0.37619519;0.80859137;0.86631054;0.49487001;0.70486844;0.61449647;0.020879801;0.76290947;0.62820095;
0.94206434;0.56813341;0.10066778;0.1374016;0.36819014;0.93367016;0.78872091;0.030822;0.52546477;0.023157002;
0.79597127;0.5695563;0.22560678;0.84576905;0.051884502;0.33510715;0.47740871;0.96671987;0.64252442;0.33831713;
0.97712648;0.71555424;0.29666898;0.35793853;0.35852194;0.22860298;0.20211278;0.31843811;0.37341881;0.17890175;
      };
     };
     float_Data @["VisHand_Pred"] {
      name="VisHand_Pred";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [2 1 100] 0.98583239;0.3451024;0.44195947;0.65126932;0.38861054;0.48832265;0.66205519;0.53255314;0.6596058;0.92258739;
0.95375198;0.45181084;0.36383644;0.24425653;0.61100787;0.97552675;0.93118048;0.40312693;0.11928414;0.34118894;
0.9586153;0.4367142;0.75255936;0.63351345;0.24052298;0.43413293;0.39201331;0.67528093;0.5410893;0.73877692;
0.31896567;0.7229318;0.068093747;0.43243209;0.40452397;0.68079478;0.97379756;0.19044572;0.85874432;0.49126884;
0.48163995;0.95218903;0.88519216;-0.068391003;0.3751882;0.74437666;0.95216393;0.30389342;0.6970439;0.81935495;
0.33170971;0.26718122;0.98218679;0.28160131;0.54452336;0.85651392;0.81826943;0.46205655;0.34804788;0.21560074;
0.28006718;0.86589748;0.6611374;0.90024334;0.97526175;0.27605537;0.39124697;0.53117371;0.47819534;0.54073048;
0.59838259;0.48595592;0.35130996;0.36739612;0.5287981;0.76502192;0.30706015;0.44300655;0.7092272;0.94864357;
0.34805217;0.98352641;0.030797562;0.38978413;0.81786662;0.83963251;0.25918132;0.76147586;0.71592993;0.66539508;
0.39644489;0.63703686;0.9389835;0.62636024;0.39096233;0.48032311;0.32935658;0.97441483;0.76055068;0.87796301;
0.84824944;0.41036087;0.50842828;1.0139002;0.84102994;0.72123355;0.5778082;0.68729031;0.29931307;0.18306667;
0.26868653;0.46602589;0.49766716;0.96234369;0.63614589;0.64010441;0.64369768;0.65791285;0.2391618;0.46822801;
0.89684182;0.35061622;0.93383086;0.24119882;0.24600235;0.24585356;0.5058946;0.64491332;0.88982457;0.39749727;
0.21341392;0.14141205;0.55723369;0.80791354;0.85786039;-0.11404549;0.21654943;0.32500115;0.25272369;0.66723716;
0.34969652;0.22677732;0.8558079;0.43460101;0.38645953;0.99704599;0.95774937;0.56762618;0.12542969;0.69740433;
0.4112727;0.55433714;0.72453099;0.49169356;0.8735885;-0.09030807;0.89773095;0.38663048;0.083248667;0.70317793;
0.34648946;0.63766944;0.3536399;0.79801697;0.97525668;0.31574252;0.26485482;0.25541425;0.53608727;1.0131906;
0.90539497;0.65301037;0.14797363;0.66124892;0.48879674;0.55789983;0.2972132;0.69384331;0.067379393;0.5239287;
0.36603716;0.24352379;0.65098757;0.67542326;0.4055177;0.95881212;0.94788855;0.26166767;0.5681352;0.9579919;
0.92348158;0.64649618;0.82683045;0.82272071;0.24098451;0.87004811;0.93054515;0.1736328;0.51096886;1.0057883;
      };
     };
     float_Data @["SomaShoulderAngle_Pred"] {
      name="SomaShoulderAngle_Pred";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [1 1 100] 0.22518763;0.38028118;0.47049239;0.058510389;0.41968873;0.14982431;0.82348925;0.4965421;0.088460602;0.87170714;
0.14852306;0.14852871;0.70538491;0.45231146;0.31832713;0.54974592;0.88984936;0.43775126;0.11211802;0.077095099;
0.5191406;0.036686327;0.4903608;0.071024418;0.31165045;0.79462916;0.13776471;0.39860865;0.02980607;0.86130315;
0.64547497;0.39408389;0.1111737;0.45000878;0.28046104;0.030960269;0.6472742;0.34580439;0.6262033;0.51993692;
0.71466446;0.96298558;0.38772517;0.62709665;0.17550565;0.43952128;0.29198238;0.47021601;0.74641091;0.38882509;
0.013759866;0.64819831;0.2553384;0.25188237;0.89702308;0.65656531;0.51962101;0.17491531;0.18716566;0.68794841;
0.021919759;0.021969657;0.84924096;0.29387057;0.041062959;0.95246172;0.35475335;0.0082387114;0.80125797;0.62289637;
0.84672827;0.035637967;0.68312114;0.27241889;0.78934944;0.41126227;0.01622382;0.016224485;0.04242802;0.93279421;
0.50713933;0.53233218;0.12239111;0.83190405;0.61745018;0.24927789;0.7509743;0.26901615;0.57132906;0.87046993;
0.82484913;0.19932453;0.58660209;0.049780622;0.48004273;0.27400658;0.36886147;0.70018834;0.0023305418;0.57998103;
      };
     };
     float_Data @["SomaElbowAngle_Pred"] {
      name="SomaElbowAngle_Pred";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [1 1 100] 0.02117639;0.82606035;0.94943124;0.85155845;0.35256702;0.31129858;0.95226562;0.25333425;0.40910709;0.56112671;
0.29789189;0.65184355;0.77293807;0.77293777;0.72485203;0.65744293;0.41880628;0.77448899;0.13568404;0.5591225;
0.3821584;0.030640706;0.68023801;0.34301764;0.50444424;0.9175784;0.16560508;0.55878872;0.65083313;0.91615731;
0.40155777;0.40192395;0.22222605;0.91675037;0.95783311;0.95783252;0.95783126;0.69382095;0.87146533;0.06200251;
0.1006135;0.29789931;0.19242719;0.53846252;0.67196208;0.81761771;0.14965834;0.95798683;0.052095149;0.2761603;
0.60793012;0.038589478;0.39336422;0.77301818;0.83252227;0.80506855;0.35738292;0.78342998;0.75829691;0.75829542;
0.5083366;0.389137;0.78110611;0.84348899;0.52016443;0.67931211;0.62773645;0.039899629;0.74687517;0.637299;
0.9245373;0.58648014;0.1218732;0.13280872;0.35560825;0.91185743;0.79286349;0.052526277;0.50296277;0.043978229;
0.77604836;0.59352189;0.23540485;0.81388474;0.074177809;0.29583311;0.45923567;0.94064236;0.66646582;0.36800423;
0.95477158;0.73311329;0.33258;0.34826711;0.34826729;0.21957879;0.21667665;0.31901348;0.36364707;0.19668387;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [100] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["RLModelInputData"] {
    name="RLModelInputData";
    desc="input data for training the RL model";
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      name="Name";
      col_flags=SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [100] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
      };
     };
     float_Data @["VisTarget_Cur"] {
      name="VisTarget_Cur";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [2 1 100] 0.78291655;0.52314895;0.26698485;0.58771402;0.53311116;0.7048409;0.67144209;0.90172303;0.25343728;0.77759403;
0.41200456;0.47875258;0.36268064;0.37600109;0.046678059;0.57764792;0.84458596;0.59558135;0.56024134;0.47992578;
0.70047957;0.90869403;0.51541263;0.7818163;0.76908064;0.62168163;0.71556455;0.36583501;0.3187111;0.73407286;
0.32429066;0.58565253;0.65037489;0.82524621;0.73683333;0.55629456;0.66972148;0.6785031;0.53589416;0.80360711;
0.6597684;0.43058196;0.94460547;0.43173656;0.96418399;0.41039598;0.9881621;0.33556414;0.29329875;0.74876493;
0.12845618;0.55061245;0.64474368;0.79807919;0.1070187;0.53205544;0.68105024;0.61593002;0.2377062;0.42132309;
0.62555391;0.53855276;0.45721605;0.59473974;0.41140085;0.76571375;0.77928931;0.84629291;0.29540259;0.62458658;
0.56650263;0.86247796;0.43918985;0.632312;0.95424634;0.56625414;0.70374715;0.46909302;0.71898526;0.33605999;
0.50952196;0.66155541;0.83110434;0.54316455;0.70033014;0.39511669;0.75455064;0.68538183;0.10475238;0.40890858;
0.23633604;0.5781641;0.89710057;0.63809443;0.58183342;0.65386742;0.29134536;0.84421766;0.7757507;0.41800207;
0.72597569;0.51551104;0.49603808;0.60303223;0.44012842;0.64557636;0.64176363;0.75123858;0.33630782;0.67286938;
0.26168939;0.76051521;0.26834983;0.53521639;0.4509514;0.82518971;0.51798874;0.71244943;0.13794455;0.78104508;
0.36176074;0.77521461;0.62730914;0.47361675;0.41154182;0.53458995;0.5343526;0.80036944;0.72799939;0.37084442;
0.54615879;0.61848348;0.50812936;0.91432166;0.50103134;0.57871515;0.25881758;0.85103428;0.50557232;0.75227737;
0.35272118;0.58939809;0.68415117;0.81598544;0.34403995;0.80049032;0.67628211;0.57133269;0.76528543;0.45565635;
0.023283897;0.44482815;0.47406551;0.69202936;0.75478232;0.54499823;0.28192714;0.49281859;0.79241443;0.34957752;
0.75311887;0.42381117;0.74159288;0.78514522;0.75551003;0.61850232;0.14521138;0.45838109;0.66132534;0.33116412;
0.69900244;0.54662991;0.27125716;0.60507035;0.28227058;0.57973915;0.33467433;0.49805981;0.98113823;0.33744302;
0.01871876;0.47371909;0.24950455;0.37637889;0.84852779;0.38323534;0.32763293;0.41747409;0.68261933;0.56003714;
0.47959718;0.54546815;0.76102972;0.57015514;0.37011504;0.54655617;0.1309645;0.61220646;0.93352169;0.34421337;
      };
     };
     float_Data @["VisHand_Cur"] {
      name="VisHand_Cur";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [2 1 100] 0.98657721;0.34101382;0.24267985;0.23175931;0.54014075;0.96761894;0.63031167;0.97734821;0.63031143;0.97734225;
0.63031155;0.97734225;0.63031167;0.97734219;0.63031179;0.97734219;0.63031191;0.97734219;0.63031209;0.97734219;
0.6303122;0.97734219;0.63031232;0.97734213;0.63031244;0.97734213;0.63031256;0.97734213;0.63031274;0.97734213;
0.63031286;0.97734213;0.63031298;0.97734213;1.3260803;0.97141218;1.3260798;0.97140533;1.3260797;0.97140533;
1.3260796;0.97140533;1.3260796;0.97140533;1.4104414;0.91860312;1.604166;0.070759118;1.5691482;-0.047292881;
1.5690882;-0.045901235;1.5690882;-0.04589434;1.5230513;0.80604482;1.4119124;0.46986288;0.66238749;0.96290982;
0.66238767;0.96290952;0.66238773;0.9629094;0.9300257;0.63723934;0.21255161;0.89041692;0.33026639;0.71987569;
0.86188608;0.76841116;0.21570165;0.89347774;0.21570532;0.89347351;0.21570534;0.89347351;0.21570534;0.89347351;
0.21570534;0.89347351;0.20461786;0.51897937;0.39545396;0.75716609;0.39545488;0.75715917;0.56432706;0.89991641;
0.56538546;0.89966571;0.89915299;0.45492464;0.16618028;0.67260176;0.695481;0.84405929;0.19837399;0.87407637;
0.51039737;0.62571281;0.56348062;0.87415874;0.48777536;0.62009603;0.19425389;0.57127726;0.19425839;0.5712747;
0.75222284;0.46805927;0.55810601;0.87128955;0.17284992;0.57613462;0.75363642;0.46660522;0.5579226;0.87148541;
0.60322052;0.78270328;0.94378304;0.36028165;0.63641483;0.93464631;0.25151253;0.5565021;0.62812066;0.65950811;
0.90938592;0.52116972;0.91056001;0.51599491;0.91056025;0.51599455;0.98091704;0.23528983;0.29661921;0.18679646;
0.57999998;0.63016164;0.87575334;0.63836896;0.56111175;0.60897356;0.73211581;0.6990667;0.93045133;0.41811374;
0.66792971;0.56224138;0.89214337;0.34880996;0.68589699;0.95985788;0.41524339;0.68128204;0.93945098;0.40108487;
0.96567965;0.1452907;0.42375314;0.68470538;0.56255472;0.60053962;0.80721855;0.67343724;0.76837373;0.90110141;
0.66154891;0.77388805;0.94075245;0.36024147;0.94075084;0.36024073;0.96726972;0.20346706;0.24443744;0.20170416;
0.43603966;0.89380872;0.95730168;0.1389448;0.5286544;0.69528466;0.89503926;0.44157496;0.25018981;0.15957654;
0.27864453;0.39528492;0.57581991;0.79719537;0.93821532;0.43427095;0.97381735;0.18703447;0.35961789;0.86695707;
      };
     };
     float_Data @["SomaShoulderAngle_Cur"] {
      name="SomaShoulderAngle_Cur";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [1 1 100] 0.2178771;0.86339498;0.50313067;0.5030123;0.5030123;0.5030123;0.5030123;0.5030123;0.5030123;0.5030123;
0.5030123;0.5030123;0.5030123;0.5030123;0.5030123;0.5030123;0.5030123;0.50031495;0.50031495;0.50031495;
0.50031495;0.50031495;0.44690174;0.014084279;0.010899642;0.010851775;0.010851709;0.40067303;-1.9979211e-07;0.48337513;
0.48337486;0.48337471;0.27779275;0.7973038;0.53598613;0.33269271;0.79523474;0.79523474;0.79523474;0.79523474;
0.79523474;0.70429444;0.47221008;0.47221047;0.42302606;0.42230001;0.085279718;0.72793853;0.33489534;0.79656416;
0.27645215;0.40168732;0.30375734;0.7017262;0.7017262;0.0024660507;0.40225381;0.72557658;0.001709055;0.40251258;
0.30902854;0.082668044;0.43580315;0.63901359;0.19613199;0.14055082;0.138007;0.13800694;0.13800712;0.89327067;
0.20405683;0.20405644;0.2040565;0.2040565;0.096151307;0.088061601;0.016175503;0.49733087;0.42437732;0.097977422;
0.098172791;0.41477251;0.19529559;0.19529584;0.45391378;0.27851442;0.078389898;0.07839004;0.0807584;0.88984269;
0.50478166;0.060653675;0.30057278;0.072890639;0.92654419;0.69426423;0.33532664;0.11566903;0.11569729;0.55867505;
      };
     };
     float_Data @["SomaElbowAngle_Cur"] {
      name="SomaElbowAngle_Cur";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [1 1 100] 0.034482758;0.77094489;0.33516788;0.21275541;0.21275525;0.21275508;0.21275492;0.21275476;0.21275459;0.21275443;
0.21275426;0.21275394;0.21275377;0.21275361;0.21275344;0.21275328;0.21275312;0.18524799;0.18524799;0.18524815;
0.18524832;0.18524832;0.18524881;0.23706228;0.11997325;0.11997325;0.11997341;0.10538417;0.77862102;0.21295042;
0.21295026;0.21295026;0.19830626;0.10996132;0.67221582;0.22962755;0.10965827;0.10965827;0.10965827;0.10965827;
0.10965827;0.67719579;0.67720664;0.67720717;0.47746599;0.47746614;0.48161677;0.48593345;0.46638164;0.13668689;
0.86500472;0.52343601;0.87176341;0.62690628;0.62690628;0.76139879;0.53031695;0.58500129;0.75975323;0.53005439;
0.64050597;0.37522057;0.35054311;0.72832012;0.77016848;0.42060429;0.42060363;0.42060316;0.11947043;0.83094394;
0.83562344;0.4100157;0.86853421;0.61581159;0.40743634;0.8217476;0.51965737;0.14892597;0.77983314;0.38329509;
0.12295743;0.78006136;0.8768307;0.52384627;0.12595904;0.6068505;0.38538116;0.38538164;0.22070791;0.76133615;
0.49150324;0.20251031;0.78125149;0.49651924;0.74807447;0.84338862;0.63532555;0.37724581;0.12393001;0.49229512;
      };
     };
     float_Data @["MotorElbowForce"] {
      name="MotorElbowForce";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [1 1 100] -0.73469126;-0.60151935;0.20184834;-0.48843822;0.48594826;0.13401362;-0.38050148;0.48811355;0.28011894;-0.41765282;
0.89781833;0.089683339;-0.86163032;0.33843315;0.11588536;0.84703922;-0.4322457;0.35043433;0.64192826;-0.22558181;
-0.66848999;0.82946682;-0.022540553;0.50963497;0.600959;-0.90989804;-0.043371368;-0.79434448;-0.98404121;0.62802809;
0.81581569;-0.49091306;0.97907567;-0.072904132;-0.82864767;-0.55000192;0.46971512;-0.59208679;-0.54537368;0.096817248;
-0.45785889;-0.90135747;0.87465531;0.85663986;0.89224154;-0.12027332;-0.47391951;-0.68255836;0.95434546;0.49101153;
-0.50469005;-0.83671427;0.76754683;-0.57895017;0.11945336;0.39258355;-0.59352791;-0.24481332;0.018050764;-0.99382603;
-0.35690859;0.26967862;-0.22808613;-0.77872318;0.83556592;0.092091642;0.61840111;-0.50033665;0.013712303;-0.49442145;
-0.28825286;-0.39384967;-0.33434546;-0.86959803;0.056412239;-0.85636848;0.9980666;-0.44892493;-0.020048987;0.53062081;
-0.70407444;-0.15912402;0.9393791;0.72548652;0.94637257;0.74011981;-0.71793795;-0.87050468;-0.88583416;0.68270022;
-0.79229909;-0.56759483;-0.99372041;-0.19247654;-0.62906557;0.71824396;0.027107283;-0.36480534;0.9920463;-0.75794393;
      };
     };
     float_Data @["PVe"] {
      name="PVe";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [1 1 100] 0;0;1;1;0;0;0;0;0;0;
1;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;1;0;0;1;1;0;0;0;
1;0;0;1;0;0;0;1;1;1;
1;1;1;0;0;1;1;0;1;0;
0;0;1;1;1;1;0;0;0;1;
0;1;0;1;1;0;1;1;0;1;
0;1;1;0;0;1;0;0;1;0;
0;0;1;1;0;1;1;0;1;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [100] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
  };
  DataTable_Group @.gp["OutputData"] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["TrialOutputData"] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_38";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_39";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["trial"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_40";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["trial_name"] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["group_name"] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisFwd_phase_no"] {
      name="VisFwd_phase_no";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 7;7;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [7 7 0]       };
     };
     float_Data @["SomaFw_phase_no"] {
      name="SomaFw_phase_no";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 7;7;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [7 7 0]       };
     };
     float_Data @["VisHan_phase_no"] {
      name="VisHan_phase_no";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 11;10;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [11 10 0]       };
     };
     float_Data @["SomaSh_phase_no"] {
      name="SomaSh_phase_no";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 12;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [12 1 0]       };
     };
     float_Data @["SomaEl_phase_no"] {
      name="SomaEl_phase_no";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 12;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [12 1 0]       };
     };
     float_Data @["VisFwd_minus_cycles"] {
      name="VisFwd_minus_cycles";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 7;7;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [7 7 0]       };
     };
     float_Data @["SomaFw_minus_cycles"] {
      name="SomaFw_minus_cycles";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 7;7;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [7 7 0]       };
     };
     float_Data @["VisHan_minus_cycles"] {
      name="VisHan_minus_cycles";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 11;10;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [11 10 0]       };
     };
     float_Data @["SomaSh_minus_cycles"] {
      name="SomaSh_minus_cycles";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 12;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [12 1 0]       };
     };
     float_Data @["SomaEl_minus_cycles"] {
      name="SomaEl_minus_cycles";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 12;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [12 1 0]       };
     };
     float_Data @["sse"] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["ext_rew"] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisFwd_pvlv_pvi"] {
      name="VisFwd_pvlv_pvi";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 7;7;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [7 7 0]       };
     };
     float_Data @["SomaFw_pvlv_pvi"] {
      name="SomaFw_pvlv_pvi";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 7;7;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [7 7 0]       };
     };
     float_Data @["VisHan_pvlv_pvi"] {
      name="VisHan_pvlv_pvi";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 11;10;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [11 10 0]       };
     };
     float_Data @["SomaSh_pvlv_pvi"] {
      name="SomaSh_pvlv_pvi";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 12;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [12 1 0]       };
     };
     float_Data @["SomaEl_pvlv_pvi"] {
      name="SomaEl_pvlv_pvi";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 12;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [12 1 0]       };
     };
     double_Data @["trg_dist"] {
      name="trg_dist";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["EpochOutputData"] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_40";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_41";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_sse"] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["cnt_err"] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_trg_dist"] {
      name="avg_trg_dist";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_ext_rew"] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     double_Data @["rew_dist_thr"] {
      name="rew_dist_thr";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_cycles"] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_tot"] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_usr"] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["TestTrialOutputData"] {
    name="TestTrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["train_mode"] {
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["group"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_153";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="group";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["trial"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["tick"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_154";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["time"] {
      name="time";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["trial_name"] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["group_name"] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["output_name"] {
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["rt_cycles"] {
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["sse"] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["norm_err"] {
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["cos_err"] {
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["ext_rew"] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisHan_lay_sse"] {
      name="VisHan_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaSh_lay_sse"] {
      name="SomaSh_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaEl_lay_sse"] {
      name="SomaEl_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisHan_lay_norm_err"] {
      name="VisHan_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaSh_lay_norm_err"] {
      name="SomaSh_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaEl_lay_norm_err"] {
      name="SomaEl_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisHan_lay_cos_err"] {
      name="VisHan_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaSh_lay_cos_err"] {
      name="SomaSh_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaEl_lay_cos_err"] {
      name="SomaEl_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisFwd_lay_net_sd"] {
      name="VisFwd_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaFw_lay_net_sd"] {
      name="SomaFw_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisHan_lay_net_sd"] {
      name="VisHan_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaSh_lay_net_sd"] {
      name="SomaSh_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaEl_lay_net_sd"] {
      name="SomaEl_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["TestEpochOutputData"] {
    name="TestEpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_sse"] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["cnt_err"] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["pct_cor"] {
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["pct_err"] {
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_norm_err"] {
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_cos_err"] {
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_ext_rew"] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_cycles"] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_tot"] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_usr"] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisHan_lay_avg_sse"] {
      name="VisHan_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaSh_lay_avg_sse"] {
      name="SomaSh_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaEl_lay_avg_sse"] {
      name="SomaEl_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisHan_lay_cnt_err"] {
      name="VisHan_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaSh_lay_cnt_err"] {
      name="SomaSh_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaEl_lay_cnt_err"] {
      name="SomaEl_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisHan_lay_pct_cor"] {
      name="VisHan_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaSh_lay_pct_cor"] {
      name="SomaSh_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaEl_lay_pct_cor"] {
      name="SomaEl_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisHan_lay_pct_err"] {
      name="VisHan_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaSh_lay_pct_err"] {
      name="SomaSh_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaEl_lay_pct_err"] {
      name="SomaEl_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisHan_lay_avg_norm_err"] {
      name="VisHan_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaSh_lay_avg_norm_err"] {
      name="SomaSh_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaEl_lay_avg_norm_err"] {
      name="SomaEl_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisHan_lay_avg_cos_err"] {
      name="VisHan_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaSh_lay_avg_cos_err"] {
      name="SomaSh_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaEl_lay_avg_cos_err"] {
      name="SomaEl_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisFwdHi_avg_net_sd"] {
      name="VisFwdHi_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaFwdH_avg_net_sd"] {
      name="SomaFwdH_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["VisHand__avg_net_sd"] {
      name="VisHand__avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaShou_avg_net_sd"] {
      name="SomaShou_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["SomaElbo_avg_net_sd"] {
      name="SomaElbo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    control_panel_cells {
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @["LeabraStartup"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @["DocLink"] {
     name="DocLink";
     doc=.projects["ve_arm"].programs["LeabraStartup"].doc$$;
    };
   };
   name="LeabraStartup";
   short_nm="Start";
   tags="Leabra, Startup";
   desc="run project in the background (replaces leabra_startup.css)
command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batches=xxx] [tag=xxx]";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP|STARTUP_RUN;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["network"] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.projects["ve_arm"].networks["RLNet"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
    ProgVar @["input_data"] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["batch"] {
     name="batch";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="set this to point to your batch process";
     init_from=NULL;
    };
    ProgVar @["tag"] {
     name="tag";
     var_type=T_String;
     string_val=;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["log_dir"] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="log file directory";
     init_from=NULL;
    };
    ProgVar @["log_file_nm"] {
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @["EpochOutputData"] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["TrialOutputData"] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     var_type=T_Object;
     object_type=LeabraUnitSpec;
     object_val=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["ForceScalarVal"] {
     name="ForceScalarVal";
     var_type=T_Object;
     object_type=ScalarValLayerSpec;
     object_val=.projects["ve_arm"].networks["RLNet"].specs["ForceScalarVal"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    IfReturn @[0] {
     desc="don't run if running in the gui!";
     flags=CAN_REVERT_TO_CODE;
     code_string="if(taMisc::gui_active) return";
     pre_compile_code_string="if(taMisc::gui_active) return";
     cond {
      expr="taMisc::gui_active";
     };
    };
    Comment @[1] {
     desc="add our special args from command line";
     flags=0;
     code_string="// add our special args from command line";
     pre_compile_code_string="// add our special args from command line";
    };
    MiscCall @[2] {
     desc=;
     flags=0;
     code_string="taMisc::AddArgName(\"tag=\", \"FileTag\")";
     pre_compile_code_string="taMisc::AddArgName(\"tag=\", \"FileTag\")";
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="flag";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"tag=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[3] {
     desc=;
     flags=0;
     code_string="taMisc::AddArgName(\"logdir=\", \"LogDir\")";
     pre_compile_code_string="taMisc::AddArgName(\"logdir=\", \"LogDir\")";
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="flag";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"logdir=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    RegisterArgs @[4] {
     desc="This is KEY!!! actuall processes all args, including those from ProgVarFmArg guys below";
     flags=0;
     code_string="Register Args";
     pre_compile_code_string="Register Args";
    };
    Comment @[5] {
     desc="Initialize and set variables from args";
     flags=0;
     code_string="// Initialize and set variables from args";
     pre_compile_code_string="// Initialize and set variables from args";
    };
    PrintExpr @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Loaded project: \" << .projects[0].file_name";
     pre_compile_code_string="Print \"Loaded project: \" << .projects[0].file_name";
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
     debug=0;
    };
    MethodCall @[7] {
     desc=;
     flags=0;
     code_string="batch->Init()";
     pre_compile_code_string="batch->Init()";
     result_var=NULL;
     obj=.projects["ve_arm"].programs["LeabraStartup"].vars["batch"]$$;
     method=Program::Init;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Init()";
     meth_desc=" run init_code, global variables retain current values unless reset in the init_code";
    };
    MiscCall @[8] {
     desc=;
     flags=0;
     code_string="tag = taMisc::FindArgByName(\"FileTag\")";
     pre_compile_code_string="tag = taMisc::FindArgByName(\"FileTag\")";
     result_var=.projects["ve_arm"].programs["LeabraStartup"].vars["tag"]$$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[9] {
     desc=;
     flags=0;
     code_string="log_dir = taMisc::FindArgByName(\"LogDir\")";
     pre_compile_code_string="log_dir = taMisc::FindArgByName(\"LogDir\")";
     result_var=.projects["ve_arm"].programs["LeabraStartup"].vars["log_dir"]$$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    ProgVarFmArg @[10] {
     desc=;
     flags=0;
     code_string="Set Var:max_epoch in Program:LeabraTrain from Arg:epochs";
     pre_compile_code_string="Set Var:max_epoch in Program:LeabraTrain from Arg:epochs";
     prog=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[11] {
     desc=;
     flags=0;
     code_string="Set Var:max_batch in Program:LeabraBatch from Arg:batches";
     pre_compile_code_string="Set Var:max_batch in Program:LeabraBatch from Arg:batches";
     prog=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     var_name="max_batch";
     arg_name="batches";
    };
    Comment @[12] {
     desc="Custom Params";
     flags=0;
     code_string="// Custom Params";
     pre_compile_code_string="// Custom Params";
    };
    ProgVarFmArg @[13] {
     desc=;
     flags=0;
     code_string="Set Var:rew_dist_thr_init in Program:RLModelRew from Arg:rew_dist_thr_init";
     pre_compile_code_string="Set Var:rew_dist_thr_init in Program:RLModelRew from Arg:rew_dist_thr_init";
     prog=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"]$$;
     var_name="rew_dist_thr_init";
     arg_name="rew_dist_thr_init";
    };
    ProgVarFmArg @[14] {
     desc=;
     flags=0;
     code_string="Set Var:rew_dist_thr_incr in Program:RLModelRew from Arg:rew_dist_thr_incr";
     pre_compile_code_string="Set Var:rew_dist_thr_incr in Program:RLModelRew from Arg:rew_dist_thr_incr";
     prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"]$;
     var_name="rew_dist_thr_incr";
     arg_name="rew_dist_thr_incr";
    };
    ProgVarFmArg @[15] {
     desc=;
     flags=0;
     code_string="Set Var:avg_rew_dec_thr in Program:RLModelRew from Arg:avg_rew_dec_thr";
     pre_compile_code_string="Set Var:avg_rew_dec_thr in Program:RLModelRew from Arg:avg_rew_dec_thr";
     prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"]$;
     var_name="avg_rew_dec_thr";
     arg_name="avg_rew_dec_thr";
    };
    ProgVarFmArg @[16] {
     desc=;
     flags=0;
     code_string="Set Var:avg_rew_inc_thr in Program:RLModelRew from Arg:avg_rew_inc_thr";
     pre_compile_code_string="Set Var:avg_rew_inc_thr in Program:RLModelRew from Arg:avg_rew_inc_thr";
     prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"]$;
     var_name="avg_rew_inc_thr";
     arg_name="avg_rew_inc_thr";
    };
    MemberFmArg @[17] {
     desc=;
     flags=0;
     code_string="LeabraUnitSpec_0.noise.var = Arg: noise_var";
     pre_compile_code_string="LeabraUnitSpec_0.noise.var = Arg: noise_var";
     obj=.projects["ve_arm"].programs["LeabraStartup"].vars["LeabraUnitSpec_0"]$$;
     path="noise.var";
     arg_name="noise_var";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[18] {
     desc=;
     flags=0;
     code_string="LeabraUnitSpec_0.da_mod.gain = Arg: da_mod_gain";
     pre_compile_code_string="LeabraUnitSpec_0.da_mod.gain = Arg: da_mod_gain";
     obj=$.projects["ve_arm"].programs["LeabraStartup"].vars["LeabraUnitSpec_0"]$;
     path="da_mod.gain";
     arg_name="da_mod_gain";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[19] {
     desc=;
     flags=0;
     code_string="ForceScalarVal.inhib.kwta_pt = Arg: kwta_pt";
     pre_compile_code_string="ForceScalarVal.inhib.kwta_pt = Arg: kwta_pt";
     obj=.projects["ve_arm"].programs["LeabraStartup"].vars["ForceScalarVal"]$$;
     path="inhib.kwta_pt";
     arg_name="kwta_pt";
     update_after=1;
     quiet=0;
    };
    Comment @[20] {
     desc="Set log files";
     flags=0;
     code_string="// Set log files";
     pre_compile_code_string="// Set log files";
    };
    MethodCall @[21] {
     desc="save args to file: last arg is to include dmem proc number";
     flags=0;
     code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag, log_dir, false)";
     pre_compile_code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag, log_dir, false)";
     result_var=.projects["ve_arm"].programs["LeabraStartup"].vars["log_file_nm"]$$;
     obj=.projects["ve_arm"].programs["LeabraStartup"].vars["EpochOutputData"]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".args\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MiscCall @[22] {
     desc=;
     flags=0;
     code_string="taMisc::FullArgStringToFile(log_file_nm)";
     pre_compile_code_string="taMisc::FullArgStringToFile(log_file_nm)";
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::FullArgStringToFile;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_file_nm";
       };
      };
     };
    };
    MethodCall @[23] {
     desc="last arg is to include dmem proc number";
     flags=0;
     code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".epc.dat\", tag, log_dir, false)";
     pre_compile_code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".epc.dat\", tag, log_dir, false)";
     result_var=$.projects["ve_arm"].programs["LeabraStartup"].vars["log_file_nm"]$;
     obj=$.projects["ve_arm"].programs["LeabraStartup"].vars["EpochOutputData"]$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[24] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=0;
     code_string="EpochOutputData->SaveDataLog(log_file_nm, false, true)";
     pre_compile_code_string="EpochOutputData->SaveDataLog(log_file_nm, false, true)";
     result_var=NULL;
     obj=$.projects["ve_arm"].programs["LeabraStartup"].vars["EpochOutputData"]$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    MethodCall @[25] {
     desc="last arg is to include dmem proc number";
     flags=OFF;
     code_string="log_file_nm = TrialOutputData->GetFileNameFmProject(\".trl.dat\", tag, log_dir, true)";
     pre_compile_code_string="log_file_nm = TrialOutputData->GetFileNameFmProject(\".trl.dat\", tag, log_dir, true)";
     result_var=$.projects["ve_arm"].programs["LeabraStartup"].vars["log_file_nm"]$;
     obj=.projects["ve_arm"].programs["LeabraStartup"].vars["TrialOutputData"]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[26] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF;
     code_string="TrialOutputData->SaveDataLog(log_file_nm, false, false)";
     pre_compile_code_string="TrialOutputData->SaveDataLog(log_file_nm, false, false)";
     result_var=NULL;
     obj=$.projects["ve_arm"].programs["LeabraStartup"].vars["TrialOutputData"]$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    OtherProgramVar @[27] {
     desc=;
     flags=0;
     code_string="Vars To:  program=SaveWeights set=to  var_1=tag  var_2=?  var_3=?  var_4=? ";
     pre_compile_code_string="Vars To:  program=SaveWeights set=to  var_1=tag  var_2=?  var_3=?  var_4=? ";
     other_prog=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"]$$;
     set_other=1;
     var_1=$.projects["ve_arm"].programs["LeabraStartup"].vars["tag"]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[28] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Running: \" << batch.name";
     pre_compile_code_string="Print \"Running: \" << batch.name";
     expr {
      expr="\"Running: \" << batch.name";
     };
     debug=0;
    };
    ProgramCall @[29] {
     desc=;
     flags=0;
     code_string="LeabraBatch(network, input_data)";
     pre_compile_code_string="LeabraBatch(network, input_data)";
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="input_data";
       };
      };
     };
     target=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     targ_ld_init="*LeabraBatch*";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program_Group @.gp["RobotProgs"] {
   name="RobotProgs";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   debug_mode=0;
   Program @["EmerRobot"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].doc$$;
     };
    };
    name="EmerRobot";
    short_nm="Robot";
    tags=;
    desc="main code for controlling Emer the robot, including the virtual environment objects for emer etc.";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=VEWorld;
     el_def=0;
     VEWorld @["VEEmerWorld"] {
      name="VEEmerWorld";
      desc=;
      space_type=HASH_SPACE;
      hash_levels {min=-3: max=10: };
      step_type=STD_STEP;
      stepsize=0.02;
      quick_iters=20;
      gravity {x=0: y=0: z=0: };
      updt_display=1;
      shadows {
       on=0;
       epsilon=1e-5;
       precision=0.5;
       quality=0.5;
       near_radius=-1;
       far_radius=-1;
       threshold=0.1;
       smoothing=0;
      };
      ode_params {
       erp=0.2;
       cfm=1e-5;
       max_cor_vel=1000000;
       contact_depth=0.001;
       max_col_pts=4;
      };
      objects {
       name="objects";
       el_typ=VEObject;
       el_def=0;
       VEObject @["Emer"] {
	name="Emer";
	desc="emer the robot";
	space_type=SIMPLE_SPACE;
	hash_levels {min=1: max=4: };
	auto_updt_rels=1;
	bodies {
	 name="bodies";
	 el_typ=VEBody;
	 el_def=0;
	 VEBody @["Torso"] {
	  name="Torso";
	  desc=;
	  flags=FIXED;
	  init_rel=0;
	  rel_body=NULL;
	  rel_pos {x=0: y=0: z=0: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0: y=0.1: z=0: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0: y=0.1: z=0: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_euler {x=0: y=-0: z=0: };
	  cur_quat {s=1: x=0: y=0: z=0: };
	  cur_quat_raw {s=1: x=0: y=0: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=BOX;
	  mass=1;
	  radius=0.5;
	  length=1;
	  long_axis=LONG_X;
	  box {x=0.45: y=0.1: z=0.02: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0: g=1: b=0: a=1: };
	  phong_color {ambient=0.2: specular=0: shininess=150: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	 VEBody @["Humerus"] {
	  name="Humerus";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$$;
	  rel_pos {x=0.42: y=0.1: z=0.03: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=-0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.42: y=0.2: z=0.03: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.42: y=0.2: z=0.03: };
	  cur_rot {x=0: y=-0.9999999: z=0: rot=1.5708: };
	  cur_euler {x=3.141593: y=-1.570796: z=3.141593: };
	  cur_quat {s=0.7071055: x=0: y=-0.7071081: z=0: };
	  cur_quat_raw {s=1: x=0: y=0: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CAPSULE;
	  mass=2.1;
	  radius=0.03;
	  length=0.34;
	  long_axis=LONG_X;
	  box {x=0.34: y=0.02: z=0.01: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.2: g=0.2: b=0.49: a=1: };
	  phong_color {ambient=0.2: specular=0: shininess=150: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	 VEBody @["Ulna"] {
	  name="Ulna";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	  rel_pos {x=0.77: y=0.1: z=0.03: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=-0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.77: y=0.2: z=0.03: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.77: y=0.2: z=0.03: };
	  cur_rot {x=0: y=-0.9999999: z=0: rot=1.5708: };
	  cur_euler {x=3.141593: y=-1.570796: z=3.141593: };
	  cur_quat {s=0.7071055: x=0: y=-0.7071081: z=0: };
	  cur_quat_raw {s=1: x=0: y=0: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CAPSULE;
	  mass=1.65;
	  radius=0.02;
	  length=0.34;
	  long_axis=LONG_X;
	  box {x=0.34: y=0.02: z=0.01: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0: g=0: b=1: a=1: };
	  phong_color {ambient=0.2: specular=0: shininess=150: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	 VEBody @["Hand"] {
	  name="Hand";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	  rel_pos {x=0.98: y=0.1: z=0.03: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=-0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.98: y=0.2: z=0.03: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.98: y=0.2: z=0.03: };
	  cur_rot {x=-4.819396e-8: y=-0.9999999: z=-1.798483e-7: rot=0: };
	  cur_euler {x=0: y=-0: z=0: };
	  cur_quat {s=1: x=0: y=0: z=0: };
	  cur_quat_raw {s=1: x=0: y=0: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=SPHERE;
	  mass=0.05;
	  radius=0.025;
	  length=1;
	  long_axis=LONG_X;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=1: g=0: b=1: a=1: };
	  phong_color {ambient=0.2: specular=0: shininess=150: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	 VEBody @["Head"] {
	  name="Head";
	  desc=;
	  flags=FIXED;
	  init_rel=1;
	  rel_body=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	  rel_pos {x=0: y=0.25: z=0: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=-0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0: y=0.35: z=0: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0: y=0.35: z=0: };
	  cur_rot {x=-0.9999999: y=0: z=0: rot=1.5708: };
	  cur_euler {x=-1.5708: y=0: z=0: };
	  cur_quat {s=0.7071055: x=-0.7071081: y=0: z=0: };
	  cur_quat_raw {s=1: x=0: y=0: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CAPSULE;
	  mass=1;
	  radius=0.1;
	  length=0.25;
	  long_axis=LONG_Y;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=1: g=0.8: b=0.4: a=1: };
	  phong_color {ambient=0.2: specular=0: shininess=150: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	 VECamera @["LeftEye"] {
	  name="LeftEye";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Head"]$$;
	  rel_pos {x=0.04: y=0: z=0.1: };
	  rel_rot {x=0: y=1: z=0: rot=3.14159: };
	  rel_euler {x=3.141593: y=2.535182e-6: z=3.141593: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.04: y=0.35: z=0.1: };
	  init_rot {x=0: y=1: z=0: rot=3.14159: };
	  init_euler {x=3.141593: y=2.535182e-6: z=3.141593: };
	  init_quat {s=1.267591e-6: x=0: y=1: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.04: y=0.35: z=0.1: };
	  cur_rot {x=0: y=1: z=0: rot=3.14159: };
	  cur_euler {x=3.141593: y=2.535182e-6: z=3.141593: };
	  cur_quat {s=1.267591e-6: x=0: y=1: z=0: };
	  cur_quat_raw {s=1.267591e-6: x=0: y=1: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CYLINDER;
	  mass=0.01;
	  radius=0.01;
	  length=0.01;
	  long_axis=LONG_Z;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.2: g=0.2: b=0.498: a=0.4980392: };
	  phong_color {ambient=0.2: specular=0: shininess=150: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	  img_size {x=320: y=240: };
	  color_cam=1;
	  view_dist {
	   near_distance=0.1;
	   focal=1;
	   far_distance=10;
	  };
	  field_of_view=120;
	  light {
	   on=1;
	   intensity=0.2;
	   color {r=1: g=1: b=1: a=1: };
	  };
	  dir_norm {x=-2.535182e-6: y=0: z=1: };
	 };
	 VECamera @["RightEye"] {
	  name="RightEye";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Head"]$;
	  rel_pos {x=-0.04: y=0: z=0.1: };
	  rel_rot {x=0: y=1: z=0: rot=3.14159: };
	  rel_euler {x=3.141593: y=2.535182e-6: z=3.141593: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=-0.04: y=0.35: z=0.1: };
	  init_rot {x=0: y=1: z=0: rot=3.14159: };
	  init_euler {x=3.141593: y=2.535182e-6: z=3.141593: };
	  init_quat {s=1.267591e-6: x=0: y=1: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=-0.04: y=0.35: z=0.1: };
	  cur_rot {x=0: y=1: z=0: rot=3.14159: };
	  cur_euler {x=3.141593: y=2.535182e-6: z=3.141593: };
	  cur_quat {s=1.267591e-6: x=0: y=1: z=0: };
	  cur_quat_raw {s=1.267591e-6: x=0: y=1: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CYLINDER;
	  mass=0.01;
	  radius=0.01;
	  length=0.01;
	  long_axis=LONG_Z;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.2: g=0.2: b=0.498: a=0.4980392: };
	  phong_color {ambient=0.2: specular=0: shininess=150: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	  img_size {x=320: y=240: };
	  color_cam=1;
	  view_dist {
	   near_distance=0.1;
	   focal=1;
	   far_distance=10;
	  };
	  field_of_view=120;
	  light {
	   on=1;
	   intensity=0.2;
	   color {r=1: g=1: b=1: a=1: };
	  };
	  dir_norm {x=-2.535182e-6: y=0: z=1: };
	 };
	 VEBody @["Pectoralis"] {
	  name="Pectoralis";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	  rel_pos {x=0.3: y=0.15: z=0.05: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=-0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.3: y=0.25: z=0.05: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.3: y=0.25: z=0.05: };
	  cur_rot {x=0: y=-0.9999999: z=0: rot=1.5708: };
	  cur_euler {x=3.141593: y=-1.570796: z=3.141593: };
	  cur_quat {s=0.7071055: x=0: y=-0.7071081: z=0: };
	  cur_quat_raw {s=1: x=0: y=0: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CYLINDER;
	  mass=0.15;
	  radius=0.01;
	  length=0.1282123;
	  long_axis=LONG_X;
	  box {x=0.27: y=0.02: z=0.01: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=1: g=0.117: b=0.203: a=1: };
	  phong_color {ambient=0.2: specular=0: shininess=150: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	 VEBody @["Deltoid"] {
	  name="Deltoid";
	  desc=;
	  flags=0;
	  init_rel=1;
	  rel_body=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	  rel_pos {x=0.3: y=0.15: z=-0.05: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=-0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.3: y=0.25: z=-0.05: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.3: y=0.25: z=-0.05: };
	  cur_rot {x=0: y=-0.9999999: z=0: rot=1.5708: };
	  cur_euler {x=3.141593: y=-1.570796: z=3.141593: };
	  cur_quat {s=0.7071055: x=0: y=-0.7071081: z=0: };
	  cur_quat_raw {s=1: x=0: y=0: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=CYLINDER;
	  mass=0.15;
	  radius=0.01;
	  length=0.07178771;
	  long_axis=LONG_X;
	  box {x=0.27: y=0.02: z=0.01: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=1: g=0.117: b=0.203: a=1: };
	  phong_color {ambient=0.2: specular=0: shininess=150: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	};
	joints {
	 name="joints";
	 el_typ=VEMuscleJoint;
	 el_def=0;
	 VEMuscleJoint @["Shoulder"] {
	  name="Shoulder";
	  desc=;
	  flags=FEEDBACK;
	  body1=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	  body2=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$;
	  joint_type=HINGE;
	  anchor {x=0.25: y=0: z=0.03: };
	  axis {x=0: y=1: z=0: };
	  axis2 {x=1: y=0: z=0: };
	  vis_size=0.1;
	  stops {
	   stops_on=1;
	   lo=-0.78;
	   hi=2.8;
	   def=1;
	   bounce=0.1;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=0;
	   lo=-3.1415;
	   hi=3.1415;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=1;
	   vel=0;
	   f_max=0.5418194;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  motor2 {
	   motor_on=0;
	   vel=0;
	   f_max=0;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-5;
	   no_stop_cfm=1e-5;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  pos=0;
	  pos_norm=0.2178771;
	  vel=0;
	  pos2=0;
	  pos2_norm=0;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	  flexor {
	   name="flexor";
	   lambda_norm=0.4972067;
	   lambda=0.08372068;
	   co_contract_pct=0.4;
	   extra_force=0;
	   muscle_type=FLEXOR;
	   moment_arm=0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1002793;
	   step_size=0.02;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=1;
	   m_rec_grad=50;
	   m_mag=14.9;
	   ca_dt=0.015;
	   ca_dt_cmp=1.333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1282123;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=0;
	   force=0;
	   torque=0;
	   muscle_obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Pectoralis"]$$;
	  };
	  extensor {
	   name="extensor";
	   lambda_norm=0.4972067;
	   lambda=0.08372068;
	   co_contract_pct=0.4;
	   extra_force=0;
	   muscle_type=EXTENSOR;
	   moment_arm=-0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.09972068;
	   step_size=0.02;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=1;
	   m_rec_grad=50;
	   m_mag=14.9;
	   ca_dt=0.015;
	   ca_dt_cmp=1.333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.07178771;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=0;
	   force=0;
	   torque=0;
	   muscle_obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Deltoid"]$$;
	  };
	  flexor2 {
	   name="flexor2";
	   lambda_norm=0.5;
	   lambda=0.09200001;
	   co_contract_pct=0.2;
	   extra_force=0;
	   muscle_type=FLEXOR;
	   moment_arm=0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1;
	   step_size=0.005;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=5;
	   m_rec_grad=11.2;
	   m_mag=2.1;
	   ca_dt=0.015;
	   ca_dt_cmp=0.3333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=2.802597e-45;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  extensor2 {
	   name="extensor2";
	   lambda_norm=0.5;
	   lambda=0.09200001;
	   co_contract_pct=0.2;
	   extra_force=0;
	   muscle_type=EXTENSOR;
	   moment_arm=-0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1;
	   step_size=0.005;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=5;
	   m_rec_grad=11.2;
	   m_mag=2.1;
	   ca_dt=0.015;
	   ca_dt_cmp=0.3333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=1.356313e-19;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  targ_norm_angle=0.4972067;
	  targ_angle=1;
	  targ_norm_angle2=0;
	  targ_angle2=0;
	  co_contract_pct=0.4;
	 };
	 VEMuscleJoint @["Elbow"] {
	  name="Elbow";
	  desc=;
	  flags=FEEDBACK;
	  body1=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$;
	  body2=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$;
	  joint_type=HINGE;
	  anchor {x=0.18: y=0: z=0.025: };
	  axis {x=0: y=1: z=0: };
	  axis2 {x=1: y=0: z=0: };
	  vis_size=0.1;
	  stops {
	   stops_on=1;
	   lo=-0.1;
	   hi=2.8;
	   def=1;
	   bounce=0.1;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=0;
	   lo=-3.1415;
	   hi=3.1415;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=1;
	   vel=0;
	   f_max=0.3570802;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  motor2 {
	   motor_on=0;
	   vel=0;
	   f_max=0;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-5;
	   no_stop_cfm=1e-5;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  pos=0;
	  pos_norm=0.03448276;
	  vel=0;
	  pos2=0;
	  pos2_norm=0;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	  flexor {
	   name="flexor";
	   lambda_norm=0.3793104;
	   lambda=0.2981379;
	   co_contract_pct=0.4;
	   extra_force=0;
	   muscle_type=FLEXOR;
	   moment_arm=0.02;
	   len_range {min=0.28: max=0.37: range=0.09: scale=11.11111: };
	   co_contract_len=0.04;
	   rest_len=0.3358621;
	   step_size=0.02;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=1;
	   m_rec_grad=50;
	   m_mag=14.9;
	   ca_dt=0.015;
	   ca_dt_cmp=1.333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.3668965;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=0;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  extensor {
	   name="extensor";
	   lambda_norm=0.3793104;
	   lambda=0.2981379;
	   co_contract_pct=0.4;
	   extra_force=0;
	   muscle_type=EXTENSOR;
	   moment_arm=-0.02;
	   len_range {min=0.28: max=0.37: range=0.09: scale=11.11111: };
	   co_contract_len=0.04;
	   rest_len=0.3141379;
	   step_size=0.02;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=1;
	   m_rec_grad=50;
	   m_mag=14.9;
	   ca_dt=0.015;
	   ca_dt_cmp=1.333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.2831034;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=0;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  flexor2 {
	   name="flexor2";
	   lambda_norm=0.5;
	   lambda=0.09200001;
	   co_contract_pct=0.2;
	   extra_force=0;
	   muscle_type=FLEXOR;
	   moment_arm=0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1;
	   step_size=0.005;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=5;
	   m_rec_grad=11.2;
	   m_mag=2.1;
	   ca_dt=0.015;
	   ca_dt_cmp=0.3333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=5.240856e-43;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  extensor2 {
	   name="extensor2";
	   lambda_norm=0.5;
	   lambda=0.09200001;
	   co_contract_pct=0.2;
	   extra_force=0;
	   muscle_type=EXTENSOR;
	   moment_arm=-0.04;
	   len_range {min=0.05: max=0.15: range=0.1: scale=9.999999: };
	   co_contract_len=0.04;
	   rest_len=0.1;
	   step_size=0.005;
	   vel_damp=0.06;
	   reflex_delay=0.025;
	   reflex_delay_idx=5;
	   m_rec_grad=11.2;
	   m_mag=2.1;
	   ca_dt=0.015;
	   ca_dt_cmp=0.3333333;
	   fv1=0.82;
	   fv2=0.5;
	   fv3=0.43;
	   fv4=0.58;
	   passive_k=0;
	   len=0.1;
	   dlen=0;
	   act=0;
	   m_act_force=0;
	   m_force=2.127124e-19;
	   force=0;
	   torque=0;
	   muscle_obj=NULL;
	  };
	  targ_norm_angle=0.3793104;
	  targ_angle=1;
	  targ_norm_angle2=0;
	  targ_angle2=0;
	  co_contract_pct=0.4;
	 };
	 VEJoint @["Wrist"] {
	  name="Wrist";
	  desc=;
	  flags=FEEDBACK;
	  body1=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$;
	  body2=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	  joint_type=FIXED;
	  anchor {x=0.18: y=0: z=0: };
	  axis {x=0: y=1: z=0: };
	  axis2 {x=1: y=0: z=0: };
	  vis_size=0.1;
	  stops {
	   stops_on=0;
	   lo=-3.1415;
	   hi=3.1415;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=0;
	   lo=-3.1415;
	   hi=3.1415;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=0;
	   vel=0;
	   f_max=0;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  motor2 {
	   motor_on=0;
	   vel=0;
	   f_max=0;
	   servo_on=0;
	   trg_pos=0;
	   gain=0.1;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-5;
	   no_stop_cfm=1e-5;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  pos=0;
	  pos_norm=0;
	  vel=0;
	  pos2=0;
	  pos2_norm=0;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	 };
	 VEJoint @["LeftEyeJoint"] {
	  name="LeftEyeJoint";
	  desc=;
	  flags=FEEDBACK;
	  body1=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Head"]$;
	  body2=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["LeftEye"]$$;
	  joint_type=UNIVERSAL;
	  anchor {x=0.04: y=0: z=0.1: };
	  axis {x=1: y=0: z=0: };
	  axis2 {x=0: y=1: z=0: };
	  vis_size=0.04;
	  stops {
	   stops_on=1;
	   lo=-1;
	   hi=1;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=1;
	   lo=-3;
	   hi=3;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=1;
	   vel=-0.1;
	   f_max=10;
	   servo_on=1;
	   trg_pos=-0.2;
	   gain=0.5;
	  };
	  motor2 {
	   motor_on=1;
	   vel=0;
	   f_max=10;
	   servo_on=1;
	   trg_pos=0;
	   gain=0.5;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-5;
	   no_stop_cfm=1e-5;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  pos=0;
	  pos_norm=0.5;
	  vel=0;
	  pos2=0;
	  pos2_norm=0.5;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	 };
	 VEJoint @["RightEyeJoint"] {
	  name="RightEyeJoint";
	  desc=;
	  flags=FEEDBACK;
	  body1=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Head"]$;
	  body2=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["RightEye"]$$;
	  joint_type=UNIVERSAL;
	  anchor {x=-0.04: y=0: z=0.1: };
	  axis {x=1: y=0: z=0: };
	  axis2 {x=0: y=1: z=0: };
	  vis_size=0.04;
	  stops {
	   stops_on=1;
	   lo=-1;
	   hi=1;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  stops2 {
	   stops_on=1;
	   lo=-3;
	   hi=3;
	   def=0;
	   bounce=0;
	   def_force=0;
	  };
	  motor {
	   motor_on=1;
	   vel=-0.1;
	   f_max=10;
	   servo_on=1;
	   trg_pos=-0.2;
	   gain=0.5;
	  };
	  motor2 {
	   motor_on=1;
	   vel=0;
	   f_max=10;
	   servo_on=1;
	   trg_pos=0;
	   gain=0.5;
	  };
	  ode_params {
	   erp=0.2;
	   cfm=1e-5;
	   no_stop_cfm=1e-5;
	   fudge=1;
	  };
	  suspension {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  pos=0;
	  pos_norm=0.5;
	  vel=0;
	  pos2=0;
	  pos2_norm=0.5;
	  vel2=0;
	  cur_force1 {x=0: y=0: z=0: };
	  cur_torque1 {x=0: y=0: z=0: };
	  cur_force2 {x=0: y=0: z=0: };
	  cur_torque2 {x=0: y=0: z=0: };
	 };
	};
       };
       VEObject @["Target"] {
	name="Target";
	desc=;
	space_type=SIMPLE_SPACE;
	hash_levels {min=1: max=4: };
	auto_updt_rels=1;
	bodies {
	 name="bodies";
	 el_typ=VEBody;
	 el_def=0;
	 VEBody @["TargetBody"] {
	  name="TargetBody";
	  desc=;
	  flags=FIXED;
	  init_rel=0;
	  rel_body=NULL;
	  rel_pos {x=0: y=0: z=0: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=0: z=0: };
	  rel_lin_vel {x=0: y=0: z=0: };
	  rel_ang_vel {x=0: y=0: z=0: };
	  init_pos {x=0.5247648: y=0.12: z=0.3282841: };
	  init_rot {x=0: y=0: z=1: rot=0: };
	  init_euler {x=0: y=-0: z=0: };
	  init_quat {s=1: x=0: y=0: z=0: };
	  init_lin_vel {x=0: y=0: z=0: };
	  init_ang_vel {x=0: y=0: z=0: };
	  cur_pos {x=0.5247648: y=0.12: z=0.3282841: };
	  cur_rot {x=0: y=0: z=1: rot=0: };
	  cur_euler {x=0: y=-0: z=0: };
	  cur_quat {s=1: x=0: y=0: z=0: };
	  cur_quat_raw {s=1: x=0: y=0: z=0: };
	  cur_lin_vel {x=0: y=0: z=0: };
	  cur_ang_vel {x=0: y=0: z=0: };
	  shape=SPHERE;
	  mass=1;
	  radius=0.02;
	  length=0.1;
	  long_axis=LONG_Y;
	  box {x=1: y=1: z=1: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname="Banana.iv";
	  set_color=1;
	  color {r=1: g=1: b=0: a=1: };
	  phong_color {ambient=0.2: specular=0: shininess=150: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0.5;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	  damp {
	   on=0;
	   lin=0;
	   lin_thr=0;
	   ang=0;
	   ang_thr=0;
	   ang_speed=0;
	  };
	  finite_rotation {
	   on=0;
	   axis {x=0: y=0: z=0: };
	  };
	 };
	};
	joints {
	 name="joints";
	 el_typ=VEJoint;
	 el_def=0;
	};
       };
      };
      spaces {
       name="spaces";
       el_typ=VESpace;
       el_def=0;
       VESpace @["RoomSpace"] {
	name="RoomSpace";
	desc=;
	static_els {
	 name="static_els";
	 el_typ=VEStatic;
	 el_def=0;
	 VEStatic @["Ground"] {
	  name="Ground";
	  desc=;
	  flags=4096;
	  relative=0;
	  rel_static=NULL;
	  rel_pos {x=0: y=0: z=0: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=0: z=0: };
	  rel_quat {s=1: x=0: y=0: z=0: };
	  pos {x=0: y=0: z=0: };
	  rot {x=0: y=0: z=1: rot=0: };
	  rot_euler {x=0: y=-0: z=0: };
	  rot_quat {s=1: x=0: y=0: z=0: };
	  shape=PLANE;
	  radius=0.2;
	  length=1;
	  long_axis=LONG_X;
	  box {x=1: y=1: z=1: };
	  plane_norm=NORM_Y;
	  plane_height=0;
	  plane_vis_size {x=3: y=3: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.4: g=0.4: b=0.4: a=1: };
	  phong_color {ambient=0.2: specular=0: shininess=150: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	 };
	 VEStatic @["BackWall"] {
	  name="BackWall";
	  desc=;
	  flags=4096;
	  relative=0;
	  rel_static=NULL;
	  rel_pos {x=0: y=0: z=0: };
	  rel_rot {x=0: y=0: z=1: rot=0: };
	  rel_euler {x=0: y=0: z=0: };
	  rel_quat {s=1: x=0: y=0: z=0: };
	  pos {x=0: y=1.5: z=-1.5: };
	  rot {x=0: y=0: z=1: rot=0: };
	  rot_euler {x=0: y=-0: z=0: };
	  rot_quat {s=1: x=0: y=0: z=0: };
	  shape=BOX;
	  radius=0.2;
	  length=1;
	  long_axis=LONG_X;
	  box {x=3: y=3: z=0.01: };
	  plane_norm=NORM_Y;
	  plane_height=2.28735e-14;
	  plane_vis_size {x=100: y=100: };
	  obj_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  obj_fname=;
	  set_color=1;
	  color {r=0.701: g=0.701: b=0.701: a=1: };
	  phong_color {ambient=0.2: specular=0: shininess=150: };
	  texture=NULL;
	  surface {
	   friction=1e+22;
	   bounce=0;
	   bounce_vel=0.01;
	  };
	  softness {
	   erp=0.2;
	   cfm=1e-5;
	  };
	 };
	};
	space_type=HASH_SPACE;
	hash_levels {min=-3: max=10: };
       };
      };
      textures {
       name="textures";
       el_typ=VETexture;
       el_def=0;
      };
      camera_0=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["LeftEye"]$;
      camera_1=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["RightEye"]$;
      bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      sun_light {
       on=1;
       intensity=0.5;
       color {r=1: g=1: b=1: a=1: };
      };
      light_0=NULL;
      light_1=NULL;
     };
     DataTable @["ArmOutputData"] {
      name="ArmOutputData";
      desc=;
      data {
       name="data";
       el_typ=String_Data;
       el_def=0;
       String_Data @["Reach_Name"] {
	name="Reach_Name";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Reach_No"] {
	name="Reach_No";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Hand_cur_pos_x"] {
	name="Hand_cur_pos_x";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Hand_cur_pos_y"] {
	name="Hand_cur_pos_y";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Hand_cur_pos_z"] {
	name="Hand_cur_pos_z";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Target_cur_pos_x"] {
	name="Target_cur_pos_x";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Target_cur_pos_y"] {
	name="Target_cur_pos_y";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Target_cur_pos_z"] {
	name="Target_cur_pos_z";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Hand_cur_lin_vel_x"] {
	name="Hand_cur_lin_vel_x";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Hand_cur_lin_vel_y"] {
	name="Hand_cur_lin_vel_y";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Hand_cur_lin_vel_z"] {
	name="Hand_cur_lin_vel_z";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_pos"] {
	name="Should_pos";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_vel"] {
	name="Should_vel";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_force_in"] {
	name="Should_force_in";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Elbow_pos"] {
	name="Elbow_pos";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Elbow_vel"] {
	name="Elbow_vel";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Elbow_force_in"] {
	name="Elbow_force_in";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["n_steps"] {
	name="n_steps";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["angle_err"] {
	name="angle_err";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["trg_dist"] {
	name="trg_dist";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
      row_indexes {
       name="row_indexes";
      [0]       };
      last_sort_spec {
       name="last_sort_spec";
       ops {
	name="ops";
	el_typ=DataSortEl;
	el_def=0;
       };
      };
      control_panel_cells {
       name="control_panel_cells";
       el_typ=DataTableCell;
       el_def=0;
      };
     };
     DataTable @["ReachOutputData"] {
      name="ReachOutputData";
      desc=;
      data {
       name="data";
       el_typ=float_Data;
       el_def=0;
       float_Data @["time"] {
	name="time";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Hand_cur_pos_x"] {
	name="Hand_cur_pos_x";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Hand_cur_pos_y"] {
	name="Hand_cur_pos_y";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Hand_cur_pos_z"] {
	name="Hand_cur_pos_z";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Target_cur_pos_x"] {
	name="Target_cur_pos_x";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Target_cur_pos_y"] {
	name="Target_cur_pos_y";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Target_cur_pos_z"] {
	name="Target_cur_pos_z";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Hand_cur_lin_vel_x"] {
	name="Hand_cur_lin_vel_x";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Hand_cur_lin_vel_y"] {
	name="Hand_cur_lin_vel_y";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Hand_cur_lin_vel_z"] {
	name="Hand_cur_lin_vel_z";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_pos"] {
	name="Should_pos";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_vel"] {
	name="Should_vel";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_flexor_len"] {
	name="Should_flexor_len";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_flexor_dlen"] {
	name="Should_flexor_dlen";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_flexor_act"] {
	name="Should_flexor_act";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_flexor_m_act_force"] {
	name="Should_flexor_m_act_force";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_flexor_m_force"] {
	name="Should_flexor_m_force";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_flexor_force"] {
	name="Should_flexor_force";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_extensor_len"] {
	name="Should_extensor_len";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_extensor_dlen"] {
	name="Should_extensor_dlen";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_extensor_act"] {
	name="Should_extensor_act";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_extensor_m_act_force"] {
	name="Should_extensor_m_act_force";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_extensor_m_force"] {
	name="Should_extensor_m_force";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Should_extensor_force"] {
	name="Should_extensor_force";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["should_cur_trg"] {
	name="should_cur_trg";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Elbow_pos"] {
	name="Elbow_pos";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Elbow_vel"] {
	name="Elbow_vel";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["Elbow_force_in"] {
	name="Elbow_force_in";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
       float_Data @["elbow_cur_trg"] {
	name="elbow_cur_trg";
	col_flags=MARK|PIN|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=0;
	ar {
	 name="ar";
	[0] 	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
      row_indexes {
       name="row_indexes";
      [0]       };
      last_sort_spec {
       name="last_sort_spec";
       ops {
	name="ops";
	el_typ=DataSortEl;
	el_def=0;
       };
      };
      control_panel_cells {
       name="control_panel_cells";
       el_typ=DataTableCell;
       el_def=0;
      };
     };
     NetMonitor @["ArmMonitor"] {
      name="ArmMonitor";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["Reach_Name"] {
	name="Reach_Name";
	computed=1;
	object_type=VEBody;
	object=NULL;
	variable="cur_pos.x";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Reach_No"] {
	name="Reach_No";
	computed=1;
	object_type=VEBody;
	object=NULL;
	variable="cur_pos.x";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_pos_x"] {
	name="Hand_cur_pos_x";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_pos.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_pos_y"] {
	name="Hand_cur_pos_y";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_pos.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_pos_z"] {
	name="Hand_cur_pos_z";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_pos.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Target_cur_pos_x"] {
	name="Target_cur_pos_x";
	computed=0;
	object_type=VEBody;
	object=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$$;
	variable="cur_pos.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Target_cur_pos_y"] {
	name="Target_cur_pos_y";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
	variable="cur_pos.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Target_cur_pos_z"] {
	name="Target_cur_pos_z";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
	variable="cur_pos.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_lin_vel_x"] {
	name="Hand_cur_lin_vel_x";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_lin_vel.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_lin_vel_y"] {
	name="Hand_cur_lin_vel_y";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_lin_vel.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_lin_vel_z"] {
	name="Hand_cur_lin_vel_z";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_lin_vel.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_pos"] {
	name="Should_pos";
	computed=0;
	object_type=VEJoint;
	object=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$$;
	variable="pos";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_vel"] {
	name="Should_vel";
	computed=0;
	object_type=VEJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="vel";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_force_in"] {
	name="Should_force_in";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Elbow_pos"] {
	name="Elbow_pos";
	computed=0;
	object_type=VEJoint;
	object=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$$;
	variable="pos";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Elbow_vel"] {
	name="Elbow_vel";
	computed=0;
	object_type=VEJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
	variable="vel";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Elbow_force_in"] {
	name="Elbow_force_in";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["n_steps"] {
	name="n_steps";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["angle_err"] {
	name="angle_err";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trg_dist"] {
	name="trg_dist";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=.projects["ve_arm"].networks["FwdModelNet"]$$;
      data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"]$$;
      rmv_orphan_cols=1;
     };
     NetMonitor @["ReachMonitor"] {
      name="ReachMonitor";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["time"] {
	name="time";
	computed=1;
	object_type=VEBody;
	object=NULL;
	variable="cur_pos.x";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_pos_x"] {
	name="Hand_cur_pos_x";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_pos.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_pos_y"] {
	name="Hand_cur_pos_y";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_pos.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_pos_z"] {
	name="Hand_cur_pos_z";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_pos.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Target_cur_pos_x"] {
	name="Target_cur_pos_x";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
	variable="cur_pos.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Target_cur_pos_y"] {
	name="Target_cur_pos_y";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
	variable="cur_pos.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Target_cur_pos_z"] {
	name="Target_cur_pos_z";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
	variable="cur_pos.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_lin_vel_x"] {
	name="Hand_cur_lin_vel_x";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_lin_vel.x";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_lin_vel_y"] {
	name="Hand_cur_lin_vel_y";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_lin_vel.y";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Hand_cur_lin_vel_z"] {
	name="Hand_cur_lin_vel_z";
	computed=0;
	object_type=VEBody;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	variable="cur_lin_vel.z";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_pos"] {
	name="Should_pos";
	computed=0;
	object_type=VEJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="pos";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_vel"] {
	name="Should_vel";
	computed=0;
	object_type=VEJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="vel";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_flexor_len"] {
	name="Should_flexor_len";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="flexor.len";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_flexor_dlen"] {
	name="Should_flexor_dlen";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="flexor.dlen";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_flexor_act"] {
	name="Should_flexor_act";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="flexor.act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_flexor_m_act_force"] {
	name="Should_flexor_m_act_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="flexor.m_act_force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_flexor_m_force"] {
	name="Should_flexor_m_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="flexor.m_force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_flexor_force"] {
	name="Should_flexor_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="flexor.force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_extensor_len"] {
	name="Should_extensor_len";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="extensor.len";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_extensor_dlen"] {
	name="Should_extensor_dlen";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="extensor.dlen";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_extensor_act"] {
	name="Should_extensor_act";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="extensor.act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_extensor_m_act_force"] {
	name="Should_extensor_m_act_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="extensor.m_act_force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_extensor_m_force"] {
	name="Should_extensor_m_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="extensor.m_force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Should_extensor_force"] {
	name="Should_extensor_force";
	computed=0;
	object_type=VEMuscleJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	variable="extensor.force";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["should_cur_trg"] {
	name="should_cur_trg";
	computed=1;
	object_type=VEMuscleJoint;
	object=NULL;
	variable="extensor.force";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Elbow_pos"] {
	name="Elbow_pos";
	computed=0;
	object_type=VEJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
	variable="pos";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Elbow_vel"] {
	name="Elbow_vel";
	computed=0;
	object_type=VEJoint;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
	variable="vel";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["Elbow_force_in"] {
	name="Elbow_force_in";
	computed=1;
	object_type=VEJoint;
	object=NULL;
	variable="vel";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["elbow_cur_trg"] {
	name="elbow_cur_trg";
	computed=1;
	object_type=VEMuscleJoint;
	object=NULL;
	variable="extensor.force";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["ve_arm"].networks["FwdModelNet"]$;
      data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"]$$;
      rmv_orphan_cols=1;
     };
     taImage @["LeftEyeImage"] {
      name="LeftEyeImage";
     };
     taImage @["RightEyeImage"] {
      name="RightEyeImage";
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["gen_rnd_angles"] {
      name="gen_rnd_angles";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="generate a new random angles";
      init_from=NULL;
     };
     ProgVar @["shoulder_trg_angle_norm"] {
      name="shoulder_trg_angle_norm";
      var_type=T_Real;
      real_val=0.9585550104492514;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="normalized 0..1 angle value";
      init_from=NULL;
     };
     ProgVar @["elbow_trg_angle_norm"] {
      name="elbow_trg_angle_norm";
      var_type=T_Real;
      real_val=0.3802525214484251;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="normalized 0..1 angle value";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["VEEmerWorld"] {
      name="VEEmerWorld";
      var_type=T_Object;
      object_type=VEWorld;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"]$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Shoulder"] {
      name="Shoulder";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Elbow"] {
      name="Elbow";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Hand"] {
      name="Hand";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Torso"] {
      name="Torso";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Humerus"] {
      name="Humerus";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Ulna"] {
      name="Ulna";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["TargetBody"] {
      name="TargetBody";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["co_contract_pct"] {
      name="co_contract_pct";
      var_type=T_Real;
      real_val=0.4;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how much to co-contract the muscles for the movement";
      init_from=NULL;
     };
     ProgVar @["angle_inc"] {
      name="angle_inc";
      var_type=T_Real;
      real_val=0.02;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="increment in angle control to provide";
      init_from=NULL;
     };
     ProgVar @["angle_updt_interval"] {
      name="angle_updt_interval";
      var_type=T_Int;
      int_val=5;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how frequently to provide new angle commands";
      init_from=NULL;
     };
     ProgVar @["ve_step"] {
      name="ve_step";
      var_type=T_Int;
      int_val=58;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["max_ve_steps"] {
      name="max_ve_steps";
      var_type=T_Int;
      int_val=500;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of ve steps to take per movement";
      init_from=NULL;
     };
     ProgVar @["min_ve_steps"] {
      name="min_ve_steps";
      var_type=T_Int;
      int_val=20;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="minimum number of ve steps to take per movement";
      init_from=NULL;
     };
     ProgVar @["reach_mon_on"] {
      name="reach_mon_on";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="whether to monitor at the reach level";
      init_from=NULL;
     };
     ProgVar @["capture_images"] {
      name="capture_images";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="whether to monitor at the reach level";
      init_from=NULL;
     };
     ProgVar @["shoulder_cur_trg_angle"] {
      name="shoulder_cur_trg_angle";
      var_type=T_Real;
      real_val=0.2178771048784256;
      flags=CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current target angle: is incremented linearly to produce the control trajectory";
      init_from=NULL;
     };
     ProgVar @["shoulder_pos_dir"] {
      name="shoulder_pos_dir";
      var_type=T_Bool;
      bool_val=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="positive angle direction (else neg)";
      init_from=NULL;
     };
     ProgVar @["shoulder_angle_err"] {
      name="shoulder_angle_err";
      var_type=T_Real;
      real_val=0.008322731128540983;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="angle err relative to target";
      init_from=NULL;
     };
     ProgVar @["elbow_cur_trg_angle"] {
      name="elbow_cur_trg_angle";
      var_type=T_Real;
      real_val=0.03448275849223137;
      flags=CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["elbow_pos_dir"] {
      name="elbow_pos_dir";
      var_type=T_Bool;
      bool_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["elbow_angle_err"] {
      name="elbow_angle_err";
      var_type=T_Real;
      real_val=0.007287168949154599;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="angle err relative to target";
      init_from=NULL;
     };
     ProgVar @["angle_err"] {
      name="angle_err";
      var_type=T_Real;
      real_val=0.007804950038847791;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="total angular error across both joints";
      init_from=NULL;
     };
     ProgVar @["hand_vel"] {
      name="hand_vel";
      var_type=T_Real;
      real_val=0.7710923552513123;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["hand_vel_thr"] {
      name="hand_vel_thr";
      var_type=T_Real;
      real_val=0.0001;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="threshold for stopping movement in hand velocity";
      init_from=NULL;
     };
     ProgVar @["ArmOutputData"] {
      name="ArmOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"]$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["ArmMonitor"] {
      name="ArmMonitor";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmMonitor"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["ReachMonitor"] {
      name="ReachMonitor";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachMonitor"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["ReachOutputData"] {
      name="ReachOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"]$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["arm_tot_len"] {
      name="arm_tot_len";
      var_type=T_Real;
      real_val=0.7450000075250864;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="total length of the arm, for target range computations";
      init_from=NULL;
     };
     ProgVar @["shoulder_x_pos"] {
      name="shoulder_x_pos";
      var_type=T_Real;
      real_val=0.2549999940395355;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["shoulder_z_pos"] {
      name="shoulder_z_pos";
      var_type=T_Real;
      real_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["hand_max_x"] {
      name="hand_max_x";
      var_type=T_Real;
      real_val=1.000000001564622;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_min_z"] {
      name="hand_min_z";
      var_type=T_Real;
      real_val=-0.3400000035762787;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_min_x"] {
      name="hand_min_x";
      var_type=T_Real;
      real_val=-0.4900000134855509;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_max_z"] {
      name="hand_max_z";
      var_type=T_Real;
      real_val=0.7450000075250864;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_pos_x_norm"] {
      name="hand_pos_x_norm";
      var_type=T_Real;
      real_val=0.7759468215553323;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["hand_pos_z_norm"] {
      name="hand_pos_z_norm";
      var_type=T_Real;
      real_val=0.7804944413396571;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["targ_pos_x_norm"] {
      name="targ_pos_x_norm";
      var_type=T_Real;
      real_val=0.681050187560729;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["targ_pos_z_norm"] {
      name="targ_pos_z_norm";
      var_type=T_Real;
      real_val=0.6159300565325734;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["trg_dist"] {
      name="trg_dist";
      var_type=T_Real;
      real_val=0.1899652779102325;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="distance from target";
      init_from=NULL;
     };
     ProgVar @["LeftEyeImage"] {
      name="LeftEyeImage";
      var_type=T_Object;
      object_type=taImage;
      object_val=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["LeftEyeImage"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["RightEyeImage"] {
      name="RightEyeImage";
      var_type=T_Object;
      object_type=taImage;
      object_val=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["RightEyeImage"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=0;
      code_string="VEEmerWorld->Init()";
      pre_compile_code_string="VEEmerWorld->Init()";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["VEEmerWorld"]$$;
      method=VEWorld::Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init()";
      meth_desc=" initialize the virtual environment, placing all objects in their init configurations, updating with any added objects, etc";
     };
     MethodCall @[1] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=0;
      code_string="ArmMonitor->UpdateMonitors(true)";
      pre_compile_code_string="ArmMonitor->UpdateMonitors(true)";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmMonitor"]$$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=0;
      code_string="ReachMonitor->UpdateMonitors(true)";
      pre_compile_code_string="ReachMonitor->UpdateMonitors(true)";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachMonitor"]$$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
     ResetDataRows @[3] {
      desc=;
      flags=0;
      code_string="ResetDataRows:  table = ArmOutputData ";
      pre_compile_code_string="ResetDataRows:  table = ArmOutputData ";
      data_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$$;
     };
     ResetDataRows @[4] {
      desc=;
      flags=0;
      code_string="ResetDataRows:  table = ReachOutputData ";
      pre_compile_code_string="ResetDataRows:  table = ReachOutputData ";
      data_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachOutputData"]$$;
     };
     AssignExpr @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="shoulder_cur_trg_angle = Shoulder.pos_norm";
      pre_compile_code_string="shoulder_cur_trg_angle = Shoulder.pos_norm";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_cur_trg_angle"]$$;
      expr {
       expr="Shoulder.pos_norm";
      };
     };
     AssignExpr @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="elbow_cur_trg_angle = Elbow.pos_norm";
      pre_compile_code_string="elbow_cur_trg_angle = Elbow.pos_norm";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_cur_trg_angle"]$$;
      expr {
       expr="Elbow.pos_norm";
      };
     };
     AssignExpr @[7] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="arm_tot_len = Humerus.length + Ulna.length + Hand.radius+.04";
      pre_compile_code_string="arm_tot_len = Humerus.length + Ulna.length + Hand.radius+.04";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["arm_tot_len"]$$;
      expr {
       expr="Humerus.length + Ulna.length + Hand.radius+.04";
      };
     };
     AssignExpr @[8] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="shoulder_x_pos = Torso.cur_pos.x + .5 * Torso.box.x + .03";
      pre_compile_code_string="shoulder_x_pos = Torso.cur_pos.x + .5 * Torso.box.x + .03";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_x_pos"]$$;
      expr {
       expr="Torso.cur_pos.x + .5 * Torso.box.x + .03";
      };
     };
     AssignExpr @[9] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="shoulder_z_pos = Torso.cur_pos.z";
      pre_compile_code_string="shoulder_z_pos = Torso.cur_pos.z";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_z_pos"]$$;
      expr {
       expr="Torso.cur_pos.z";
      };
     };
     AssignExpr @[10] {
      desc="assume reaching out in front of plane";
      flags=CAN_REVERT_TO_CODE;
      code_string="hand_max_x = shoulder_x_pos + arm_tot_len";
      pre_compile_code_string="hand_max_x = shoulder_x_pos + arm_tot_len";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_max_x"]$$;
      expr {
       expr="shoulder_x_pos + arm_tot_len";
      };
     };
     AssignExpr @[11] {
      desc="can stick hand through torso now..";
      flags=CAN_REVERT_TO_CODE;
      code_string="hand_min_z = shoulder_z_pos - Ulna.length";
      pre_compile_code_string="hand_min_z = shoulder_z_pos - Ulna.length";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_min_z"]$$;
      expr {
       expr="shoulder_z_pos - Ulna.length";
      };
     };
     AssignExpr @[12] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="hand_min_x = shoulder_x_pos - arm_tot_len";
      pre_compile_code_string="hand_min_x = shoulder_x_pos - arm_tot_len";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_min_x"]$$;
      expr {
       expr="shoulder_x_pos - arm_tot_len";
      };
     };
     AssignExpr @[13] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="hand_max_z = shoulder_z_pos + arm_tot_len";
      pre_compile_code_string="hand_max_z = shoulder_z_pos + arm_tot_len";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_max_z"]$$;
      expr {
       expr="shoulder_z_pos + arm_tot_len";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gen_rnd_angles)";
      pre_compile_code_string="if (gen_rnd_angles)";
      cond {
       expr="gen_rnd_angles";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       Comment @[0] {
	desc="= Generate Random Forces =";
	flags=CAN_REVERT_TO_CODE;
	code_string="// = Generate Random Forces =";
	pre_compile_code_string="// = Generate Random Forces =";
       };
       RandomCall @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="shoulder_trg_angle_norm = Random::UniformMinMax(0.0, 1.0)";
	pre_compile_code_string="shoulder_trg_angle_norm = Random::UniformMinMax(0.0, 1.0, )";
	result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].args["shoulder_trg_angle_norm"]$$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=1;
	  def_val=;
	  prev_expr="0.0";
	  expr {
	   expr="0.0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=1;
	  def_val=;
	  prev_expr="1.0";
	  expr {
	   expr="1.0";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="thr_no";
	  required=0;
	  def_val="-1";
	  prev_expr=;
	  expr {
	   expr=;
	  };
	 };
	};
       };
       RandomCall @[2] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="elbow_trg_angle_norm = Random::UniformMinMax(0.0, 1.0)";
	pre_compile_code_string="elbow_trg_angle_norm = Random::UniformMinMax(0.0, 1.0, )";
	result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].args["elbow_trg_angle_norm"]$$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=1;
	  def_val=;
	  prev_expr="0.0";
	  expr {
	   expr="0.0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=1;
	  def_val=;
	  prev_expr="1.0";
	  expr {
	   expr="1.0";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="thr_no";
	  required=0;
	  def_val="-1";
	  prev_expr=;
	  expr {
	   expr=;
	  };
	 };
	};
       };
      };
     };
     Comment @[1] {
      desc="= Run the World =";
      flags=CAN_REVERT_TO_CODE;
      code_string="// = Run the World =";
      pre_compile_code_string="// = Run the World =";
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="shoulder_cur_trg_angle = Shoulder.pos_norm";
      pre_compile_code_string="shoulder_cur_trg_angle = Shoulder.pos_norm";
      result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_cur_trg_angle"]$;
      expr {
       expr="Shoulder.pos_norm";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="elbow_cur_trg_angle = Elbow.pos_norm";
      pre_compile_code_string="elbow_cur_trg_angle = Elbow.pos_norm";
      result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_cur_trg_angle"]$;
      expr {
       expr="Elbow.pos_norm";
      };
     };
     AssignExpr @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="shoulder_pos_dir = (shoulder_trg_angle_norm > shoulder_cur_trg_angle)";
      pre_compile_code_string="shoulder_pos_dir = (shoulder_trg_angle_norm > shoulder_cur_trg_angle)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_pos_dir"]$$;
      expr {
       expr="(shoulder_trg_angle_norm > shoulder_cur_trg_angle)";
      };
     };
     AssignExpr @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="elbow_pos_dir = (elbow_trg_angle_norm > elbow_cur_trg_angle)";
      pre_compile_code_string="elbow_pos_dir = (elbow_trg_angle_norm > elbow_cur_trg_angle)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_pos_dir"]$$;
      expr {
       expr="(elbow_trg_angle_norm > elbow_cur_trg_angle)";
      };
     };
     ResetDataRows @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ResetDataRows:  table = ReachOutputData ";
      pre_compile_code_string="ResetDataRows:  table = ReachOutputData ";
      data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachOutputData"]$;
     };
     ForLoop @[7] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (ve_step = 0; ve_step < max_ve_steps; ve_step++)";
      pre_compile_code_string="for (ve_step = 0; ve_step < max_ve_steps; ve_step++)";
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       If @[0] {
	desc="provide new target EP angles at given increments along trajectory";
	flags=CAN_REVERT_TO_CODE;
	code_string="if (ve_step % angle_updt_interval == 0)";
	pre_compile_code_string="if (ve_step % angle_updt_interval == 0)";
	cond {
	 expr="ve_step % angle_updt_interval == 0";
	};
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (shoulder_pos_dir)";
	  pre_compile_code_string="if (shoulder_pos_dir)";
	  cond {
	   expr="shoulder_pos_dir";
	  };
	  true_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="shoulder_cur_trg_angle += angle_inc";
	    pre_compile_code_string="shoulder_cur_trg_angle += angle_inc";
	    var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_cur_trg_angle"]$;
	    expr {
	     expr="angle_inc";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="shoulder_cur_trg_angle = MIN(shoulder_cur_trg_angle, shoulder_trg_angle_norm)";
	    pre_compile_code_string="shoulder_cur_trg_angle = MIN(shoulder_cur_trg_angle, shoulder_trg_angle_norm)";
	    result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_cur_trg_angle"]$;
	    expr {
	     expr="MIN(shoulder_cur_trg_angle, shoulder_trg_angle_norm)";
	    };
	   };
	  };
	 };
	 Else @[1] {
	  desc=;
	  flags=0;
	  code_string=;
	  pre_compile_code_string=;
	  else_code {
	   name="else_code";
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="shoulder_cur_trg_angle += -angle_inc";
	    pre_compile_code_string="shoulder_cur_trg_angle += -angle_inc";
	    var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_cur_trg_angle"]$;
	    expr {
	     expr="-angle_inc";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="shoulder_cur_trg_angle = MAX(shoulder_cur_trg_angle, shoulder_trg_angle_norm)";
	    pre_compile_code_string="shoulder_cur_trg_angle = MAX(shoulder_cur_trg_angle, shoulder_trg_angle_norm)";
	    result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_cur_trg_angle"]$;
	    expr {
	     expr="MAX(shoulder_cur_trg_angle, shoulder_trg_angle_norm)";
	    };
	   };
	  };
	 };
	 If @[2] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (elbow_pos_dir)";
	  pre_compile_code_string="if (elbow_pos_dir)";
	  cond {
	   expr="elbow_pos_dir";
	  };
	  true_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="elbow_cur_trg_angle += angle_inc";
	    pre_compile_code_string="elbow_cur_trg_angle += angle_inc";
	    var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_cur_trg_angle"]$;
	    expr {
	     expr="angle_inc";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="elbow_cur_trg_angle = MIN(elbow_cur_trg_angle, elbow_trg_angle_norm)";
	    pre_compile_code_string="elbow_cur_trg_angle = MIN(elbow_cur_trg_angle, elbow_trg_angle_norm)";
	    result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_cur_trg_angle"]$;
	    expr {
	     expr="MIN(elbow_cur_trg_angle, elbow_trg_angle_norm)";
	    };
	   };
	  };
	 };
	 Else @[3] {
	  desc=;
	  flags=0;
	  code_string=;
	  pre_compile_code_string=;
	  else_code {
	   name="else_code";
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="elbow_cur_trg_angle += -angle_inc";
	    pre_compile_code_string="elbow_cur_trg_angle += -angle_inc";
	    var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_cur_trg_angle"]$;
	    expr {
	     expr="-angle_inc";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="elbow_cur_trg_angle = MAX(elbow_cur_trg_angle, elbow_trg_angle_norm)";
	    pre_compile_code_string="elbow_cur_trg_angle = MAX(elbow_cur_trg_angle, elbow_trg_angle_norm)";
	    result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_cur_trg_angle"]$;
	    expr {
	     expr="MAX(elbow_cur_trg_angle, elbow_trg_angle_norm)";
	    };
	   };
	  };
	 };
	 MethodCall @[4] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Shoulder->SetTargNormAngle(shoulder_cur_trg_angle, co_contract_pct, )";
	  pre_compile_code_string="Shoulder->SetTargNormAngle(shoulder_cur_trg_angle, co_contract_pct, )";
	  result_var=NULL;
	  obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["Shoulder"]$$;
	  method=VEMuscleJoint::SetTargNormAngle;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=float;
	    type="float";
	    name="trg_norm_angle";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="shoulder_cur_trg_angle";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=float;
	    type="float";
	    name="co_contract";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="co_contract_pct";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=float;
	    type="float";
	    name="trg_norm_angle2";
	    required=0;
	    def_val="0.0f";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	  };
	  meth_sig="void SetTargNormAngle(float trg_norm_angle, float co_contract, float trg_norm_angle2 = 0.0f)";
	  meth_desc=" set normalized target angle (0 = lo stop, 1 = hi stop) for the joint, which computes the lambdas (target lengths) for the individual muscles -- the co_contract_pct determines what percentage of co-contraction (stiffnes) to apply, where the lambdas are shorter than they should otherwise be by the given amount, such that both will pull from opposite directions to cause the muscle to stay put (at least around .2 is needed, with .5 being better, to prevent big oscillations)";
	 };
	 MethodCall @[5] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Elbow->SetTargNormAngle(elbow_cur_trg_angle, co_contract_pct, )";
	  pre_compile_code_string="Elbow->SetTargNormAngle(elbow_cur_trg_angle, co_contract_pct, )";
	  result_var=NULL;
	  obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["Elbow"]$$;
	  method=VEMuscleJoint::SetTargNormAngle;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=float;
	    type="float";
	    name="trg_norm_angle";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="elbow_cur_trg_angle";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=float;
	    type="float";
	    name="co_contract";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="co_contract_pct";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=float;
	    type="float";
	    name="trg_norm_angle2";
	    required=0;
	    def_val="0.0f";
	    prev_expr=;
	    expr {
	     expr=;
	    };
	   };
	  };
	  meth_sig="void SetTargNormAngle(float trg_norm_angle, float co_contract, float trg_norm_angle2 = 0.0f)";
	  meth_desc=" set normalized target angle (0 = lo stop, 1 = hi stop) for the joint, which computes the lambdas (target lengths) for the individual muscles -- the co_contract_pct determines what percentage of co-contraction (stiffnes) to apply, where the lambdas are shorter than they should otherwise be by the given amount, such that both will pull from opposite directions to cause the muscle to stay put (at least around .2 is needed, with .5 being better, to prevent big oscillations)";
	 };
	};
       };
       MethodCall @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="VEEmerWorld->Step()";
	pre_compile_code_string="VEEmerWorld->Step()";
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["VEEmerWorld"]$;
	method=VEWorld::Step;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Step()";
	meth_desc=" take one step of integration, and get updated values";
       };
       If @[2] {
	desc="monitor details about the reach itself -- slows things down quite a bit..";
	flags=CAN_REVERT_TO_CODE;
	code_string="if (reach_mon_on)";
	pre_compile_code_string="if (reach_mon_on)";
	cond {
	 expr="reach_mon_on";
	};
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AddNewDataRow @[0] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Add New Row:  table = ReachOutputData ";
	  pre_compile_code_string="Add New Row:  table = ReachOutputData ";
	  data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachOutputData"]$;
	 };
	 MethodCall @[1] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="ReachMonitor->GetMonVals()";
	  pre_compile_code_string="ReachMonitor->GetMonVals()";
	  result_var=NULL;
	  obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachMonitor"]$;
	  method=NetMonitor::GetMonVals;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void GetMonVals()";
	  meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
	 };
	 MethodCall @[2] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="ReachOutputData->SetDataByName(ve_step, \"time\")";
	  pre_compile_code_string="ReachOutputData->SetDataByName(ve_step, \"time\")";
	  result_var=NULL;
	  obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachOutputData"]$;
	  method=DataTable::SetDataByName;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_Variant_ref;
	    type="Variant&";
	    name="data";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="ve_step";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="ch_nm";
	    required=1;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     expr="\"time\"";
	    };
	   };
	  };
	  meth_sig="bool SetDataByName(Variant& data, taString& ch_nm)";
	  meth_desc=" OBSOLETE - only here to get old projects to run";
	 };
	 MethodCall @[3] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="ReachOutputData->SetDataByName(shoulder_cur_trg_angle, \"should_cur_trg\")";
	  pre_compile_code_string="ReachOutputData->SetDataByName(shoulder_cur_trg_angle, \"should_cur_trg\")";
	  result_var=NULL;
	  obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachOutputData"]$;
	  method=DataTable::SetDataByName;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_Variant_ref;
	    type="Variant&";
	    name="data";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="shoulder_cur_trg_angle";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="ch_nm";
	    required=1;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     expr="\"should_cur_trg\"";
	    };
	   };
	  };
	  meth_sig="bool SetDataByName(Variant& data, taString& ch_nm)";
	  meth_desc=" OBSOLETE - only here to get old projects to run";
	 };
	 MethodCall @[4] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="ReachOutputData->SetDataByName(elbow_cur_trg_angle, \"elbow_cur_trg\")";
	  pre_compile_code_string="ReachOutputData->SetDataByName(elbow_cur_trg_angle, \"elbow_cur_trg\")";
	  result_var=NULL;
	  obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ReachOutputData"]$;
	  method=DataTable::SetDataByName;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_Variant_ref;
	    type="Variant&";
	    name="data";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="elbow_cur_trg_angle";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="ch_nm";
	    required=1;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     expr="\"elbow_cur_trg\"";
	    };
	   };
	  };
	  meth_sig="bool SetDataByName(Variant& data, taString& ch_nm)";
	  meth_desc=" OBSOLETE - only here to get old projects to run";
	 };
	 DoneWritingDataRow @[5] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="DoneWritingDataRow:  table = ArmOutputData ";
	  pre_compile_code_string="DoneWritingDataRow:  table = ArmOutputData ";
	  data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
	 };
	};
       };
       If @[3] {
	desc="see if hand velocity is sufficiently slow in magnitude that we can consider the movement over";
	flags=CAN_REVERT_TO_CODE;
	code_string="if (ve_step > min_ve_steps)";
	pre_compile_code_string="if (ve_step > min_ve_steps)";
	cond {
	 expr="ve_step > min_ve_steps";
	};
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="hand_vel = Hand.cur_lin_vel.Mag()";
	  pre_compile_code_string="hand_vel = Hand.cur_lin_vel.Mag()";
	  result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_vel"]$$;
	  expr {
	   expr="Hand.cur_lin_vel.Mag()";
	  };
	 };
	 IfBreak @[1] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if(hand_vel < hand_vel_thr) break";
	  pre_compile_code_string="if(hand_vel < hand_vel_thr) break";
	  cond {
	   expr="hand_vel < hand_vel_thr";
	  };
	 };
	};
       };
       StopStepPoint @[4] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Stop_Step Point";
	pre_compile_code_string="Stop_Step Point";
	cond {
	 expr=;
	};
       };
      };
      init {
       expr="ve_step = 0";
      };
      test {
       expr="ve_step < max_ve_steps";
      };
      iter {
       expr="ve_step++";
      };
     };
     Comment @[8] {
      desc="= Compute Distance to Target =";
      flags=CAN_REVERT_TO_CODE;
      code_string="// = Compute Distance to Target =";
      pre_compile_code_string="// = Compute Distance to Target =";
     };
     AssignExpr @[9] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="hand_pos_x_norm = (Hand.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      pre_compile_code_string="hand_pos_x_norm = (Hand.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_pos_x_norm"]$$;
      expr {
       expr="(Hand.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      };
     };
     AssignExpr @[10] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="hand_pos_z_norm = (Hand.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      pre_compile_code_string="hand_pos_z_norm = (Hand.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["hand_pos_z_norm"]$$;
      expr {
       expr="(Hand.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     AssignExpr @[11] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="targ_pos_x_norm = (TargetBody.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      pre_compile_code_string="targ_pos_x_norm = (TargetBody.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["targ_pos_x_norm"]$$;
      expr {
       expr="(TargetBody.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      };
     };
     AssignExpr @[12] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="targ_pos_z_norm = (TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      pre_compile_code_string="targ_pos_z_norm = (TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["targ_pos_z_norm"]$$;
      expr {
       expr="(TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     AssignExpr @[13] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="trg_dist = (TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      pre_compile_code_string="trg_dist = (TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["trg_dist"]$$;
      expr {
       expr="(TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     MathCall @[14] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="trg_dist = taMath_float::euc_dist(targ_pos_x_norm, targ_pos_z_norm, hand_pos_x_norm, hand_pos_z_norm)";
      pre_compile_code_string="trg_dist = taMath_float::euc_dist(targ_pos_x_norm, targ_pos_z_norm, hand_pos_x_norm, hand_pos_z_norm)";
      result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["trg_dist"]$;
      object_type=taMath_float;
      method=taMath_float::euc_dist;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=float;
	type="float";
	name="x1";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="targ_pos_x_norm";
	};
       };
       ProgArg @[1] {
	arg_type=float;
	type="float";
	name="y1";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="targ_pos_z_norm";
	};
       };
       ProgArg @[2] {
	arg_type=float;
	type="float";
	name="x2";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="hand_pos_x_norm";
	};
       };
       ProgArg @[3] {
	arg_type=float;
	type="float";
	name="y2";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="hand_pos_z_norm";
	};
       };
      };
     };
     Comment @[15] {
      desc="= Read Out the State =";
      flags=CAN_REVERT_TO_CODE;
      code_string="// = Read Out the State =";
      pre_compile_code_string="// = Read Out the State =";
     };
     AssignExpr @[16] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="shoulder_angle_err = fabs(Shoulder.pos_norm - shoulder_trg_angle_norm)";
      pre_compile_code_string="shoulder_angle_err = fabs(Shoulder.pos_norm - shoulder_trg_angle_norm)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["shoulder_angle_err"]$$;
      expr {
       expr="fabs(Shoulder.pos_norm - shoulder_trg_angle_norm)";
      };
     };
     AssignExpr @[17] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="elbow_angle_err = fabs(Elbow.pos_norm - elbow_trg_angle_norm)";
      pre_compile_code_string="elbow_angle_err = fabs(Elbow.pos_norm - elbow_trg_angle_norm)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["elbow_angle_err"]$$;
      expr {
       expr="fabs(Elbow.pos_norm - elbow_trg_angle_norm)";
      };
     };
     AssignExpr @[18] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="angle_err = .5 * (shoulder_angle_err + elbow_angle_err)";
      pre_compile_code_string="angle_err = .5 * (shoulder_angle_err + elbow_angle_err)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["angle_err"]$$;
      expr {
       expr=".5 * (shoulder_angle_err + elbow_angle_err)";
      };
     };
     AddNewDataRow @[19] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Add New Row:  table = ArmOutputData ";
      pre_compile_code_string="Add New Row:  table = ArmOutputData ";
      data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
     };
     MethodCall @[20] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ArmMonitor->GetMonVals()";
      pre_compile_code_string="ArmMonitor->GetMonVals()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmMonitor"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[21] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ArmOutputData->SetDataByName(shoulder_cur_trg_angle, \"Should_force_in\")";
      pre_compile_code_string="ArmOutputData->SetDataByName(shoulder_cur_trg_angle, \"Should_force_in\")";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataTable::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="shoulder_cur_trg_angle";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"Should_force_in\"";
	};
       };
      };
      meth_sig="bool SetDataByName(Variant& data, taString& ch_nm)";
      meth_desc=" OBSOLETE - only here to get old projects to run";
     };
     MethodCall @[22] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ArmOutputData->SetDataByName(elbow_cur_trg_angle, \"Elbow_force_in\")";
      pre_compile_code_string="ArmOutputData->SetDataByName(elbow_cur_trg_angle, \"Elbow_force_in\")";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataTable::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="elbow_cur_trg_angle";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"Elbow_force_in\"";
	};
       };
      };
      meth_sig="bool SetDataByName(Variant& data, taString& ch_nm)";
      meth_desc=" OBSOLETE - only here to get old projects to run";
     };
     MethodCall @[23] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ArmOutputData->SetDataByName(ve_step, \"n_steps\")";
      pre_compile_code_string="ArmOutputData->SetDataByName(ve_step, \"n_steps\")";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataTable::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="ve_step";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"n_steps\"";
	};
       };
      };
      meth_sig="bool SetDataByName(Variant& data, taString& ch_nm)";
      meth_desc=" OBSOLETE - only here to get old projects to run";
     };
     MethodCall @[24] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ArmOutputData->SetDataByName(angle_err, \"angle_err\")";
      pre_compile_code_string="ArmOutputData->SetDataByName(angle_err, \"angle_err\")";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataTable::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="angle_err";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"angle_err\"";
	};
       };
      };
      meth_sig="bool SetDataByName(Variant& data, taString& ch_nm)";
      meth_desc=" OBSOLETE - only here to get old projects to run";
     };
     MethodCall @[25] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ArmOutputData->SetDataByName(trg_dist, \"trg_dist\")";
      pre_compile_code_string="ArmOutputData->SetDataByName(trg_dist, \"trg_dist\")";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataTable::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trg_dist";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"trg_dist\"";
	};
       };
      };
      meth_sig="bool SetDataByName(Variant& data, taString& ch_nm)";
      meth_desc=" OBSOLETE - only here to get old projects to run";
     };
     MethodCall @[26] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ArmOutputData->SetDataByName(ArmOutputData.rows, \"Reach_No\")";
      pre_compile_code_string="ArmOutputData->SetDataByName(ArmOutputData.rows, \"Reach_No\")";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataTable::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="ArmOutputData.rows";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"Reach_No\"";
	};
       };
      };
      meth_sig="bool SetDataByName(Variant& data, taString& ch_nm)";
      meth_desc=" OBSOLETE - only here to get old projects to run";
     };
     MethodCall @[27] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ArmOutputData->SetDataByName(ArmOutputData.rows, \"Reach_Name\")";
      pre_compile_code_string="ArmOutputData->SetDataByName(ArmOutputData.rows, \"Reach_Name\")";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
      method=DataTable::SetDataByName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="ArmOutputData.rows";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"Reach_Name\"";
	};
       };
      };
      meth_sig="bool SetDataByName(Variant& data, taString& ch_nm)";
      meth_desc=" OBSOLETE - only here to get old projects to run";
     };
     DoneWritingDataRow @[28] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="DoneWritingDataRow:  table = ArmOutputData ";
      pre_compile_code_string="DoneWritingDataRow:  table = ArmOutputData ";
      data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["ArmOutputData"]$;
     };
     Comment @[29] {
      desc="= Capture Eye Images =";
      flags=CAN_REVERT_TO_CODE;
      code_string="// = Capture Eye Images =";
      pre_compile_code_string="// = Capture Eye Images =";
     };
     If @[30] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (capture_images)";
      pre_compile_code_string="if (capture_images)";
      cond {
       expr="capture_images";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="VEEmerWorld->GetCameraTaImage(LeftEyeImage, 0)";
	pre_compile_code_string="VEEmerWorld->GetCameraTaImage(LeftEyeImage, 0)";
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["VEEmerWorld"]$;
	method=VEWorld::GetCameraTaImage;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=taImage_ref;
	  type="taImage&";
	  name="ta_img";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="LeftEyeImage";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="camera_no";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="0";
	  };
	 };
	};
	meth_sig="bool GetCameraTaImage(taImage& ta_img, int camera_no)";
	meth_desc=" gets camera image from given camera number into given taImage object -- returns false if unsuccessful";
       };
       MethodCall @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="VEEmerWorld->GetCameraTaImage(RightEyeImage, 1)";
	pre_compile_code_string="VEEmerWorld->GetCameraTaImage(RightEyeImage, 1)";
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["VEEmerWorld"]$;
	method=VEWorld::GetCameraTaImage;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=taImage_ref;
	  type="taImage&";
	  name="ta_img";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="RightEyeImage";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="camera_no";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="1";
	  };
	 };
	};
	meth_sig="bool GetCameraTaImage(taImage& ta_img, int camera_no)";
	meth_desc=" gets camera image from given camera number into given taImage object -- returns false if unsuccessful";
       };
       MethodCall @[2] {
	desc=;
	flags=OFF|CAN_REVERT_TO_CODE;
	code_string="LeftEyeImage->SaveImage(\"test_image_\" + ArmOutputData.rows + \".jpg\")";
	pre_compile_code_string="LeftEyeImage->SaveImage(\"test_image_\" + ArmOutputData.rows + \".jpg\")";
	result_var=NULL;
	obj=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].vars["LeftEyeImage"]$$;
	method=taImage::SaveImage;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="fname";
	  required=1;
	  def_val="\"\"";
	  prev_expr=;
	  expr {
	   expr="\"test_image_\" + ArmOutputData.rows + \".jpg\"";
	  };
	 };
	};
	meth_sig="bool SaveImage(taString& fname)";
	meth_desc=" save the image to given file name (leave file name blank to get a chooser) -- uses extension to determine format";
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["SetTarget"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].doc$$;
     };
    };
    name="SetTarget";
    short_nm="Target";
    tags=;
    desc=;
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["gen_rnd_targ"] {
      name="gen_rnd_targ";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="generate a new random target location";
      init_from=NULL;
     };
     ProgVar @["targ_angle"] {
      name="targ_angle";
      var_type=T_Real;
      real_val=0.8829378330809791;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="target angle from shoulder joint";
      init_from=NULL;
     };
     ProgVar @["targ_dist"] {
      name="targ_dist";
      var_type=T_Real;
      real_val=0.4249041063892947;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="target distance from shoulder joint";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["TargetBody"] {
      name="TargetBody";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["arm_tot_len"] {
      name="arm_tot_len";
      var_type=T_Real;
      real_val=0.7450000075250864;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="total length of the arm, for target range computations";
      init_from=NULL;
     };
     ProgVar @["targ_x"] {
      name="targ_x";
      var_type=T_Real;
      real_val=0.5247648533838436;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="location of target";
      init_from=NULL;
     };
     ProgVar @["targ_z"] {
      name="targ_z";
      var_type=T_Real;
      real_val=0.3282840542722578;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="location of target";
      init_from=NULL;
     };
     ProgVar @["shoulder_x_pos"] {
      name="shoulder_x_pos";
      var_type=T_Real;
      real_val=0.2549999940395355;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["shoulder_z_pos"] {
      name="shoulder_z_pos";
      var_type=T_Real;
      real_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["rnd_angle_min"] {
      name="rnd_angle_min";
      var_type=T_Real;
      real_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="minimum angle for rnd gen";
      init_from=NULL;
     };
     ProgVar @["rnd_angle_max"] {
      name="rnd_angle_max";
      var_type=T_Real;
      real_val=3;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum angle for rnd gen";
      init_from=NULL;
     };
     ProgVar @["rnd_dist_min"] {
      name="rnd_dist_min";
      var_type=T_Real;
      real_val=0.2;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="minimum radial distance for rnd gen";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     OtherProgramVar @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Vars Fm:  program=EmerRobot set=from  var_1=arm_tot_len  var_2=shoulder_x_pos  var_3=shoulder_z_pos  var_4=? ";
      pre_compile_code_string="Vars Fm:  program=EmerRobot set=from  var_1=arm_tot_len  var_2=shoulder_x_pos  var_3=shoulder_z_pos  var_4=? ";
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["arm_tot_len"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["shoulder_x_pos"]$$;
      var_3=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["shoulder_z_pos"]$$;
      var_4=NULL;
     };
     If @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gen_rnd_targ)";
      pre_compile_code_string="if (gen_rnd_targ)";
      cond {
       expr="gen_rnd_targ";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       RandomCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="targ_angle = Random::UniformMinMax(rnd_angle_min, rnd_angle_max)";
	pre_compile_code_string="targ_angle = Random::UniformMinMax(rnd_angle_min, rnd_angle_max, )";
	result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].args["targ_angle"]$$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=1;
	  def_val=;
	  prev_expr="rnd_angle_min";
	  expr {
	   expr="rnd_angle_min";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=1;
	  def_val=;
	  prev_expr="rnd_angle_max";
	  expr {
	   expr="rnd_angle_max";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="thr_no";
	  required=0;
	  def_val="-1";
	  prev_expr=;
	  expr {
	   expr=;
	  };
	 };
	};
       };
       RandomCall @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="targ_dist = Random::UniformMinMax(rnd_dist_min, arm_tot_len)";
	pre_compile_code_string="targ_dist = Random::UniformMinMax(rnd_dist_min, arm_tot_len, )";
	result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].args["targ_dist"]$$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=1;
	  def_val=;
	  prev_expr="rnd_dist_min";
	  expr {
	   expr="rnd_dist_min";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=1;
	  def_val=;
	  prev_expr="arm_tot_len";
	  expr {
	   expr="arm_tot_len";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="thr_no";
	  required=0;
	  def_val="-1";
	  prev_expr=;
	  expr {
	   expr=;
	  };
	 };
	};
       };
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="targ_x = shoulder_x_pos + targ_dist * cos(targ_angle)";
      pre_compile_code_string="targ_x = shoulder_x_pos + targ_dist * cos(targ_angle)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["targ_x"]$$;
      expr {
       expr="shoulder_x_pos + targ_dist * cos(targ_angle)";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="targ_z = shoulder_z_pos + targ_dist * sin(targ_angle)";
      pre_compile_code_string="targ_z = shoulder_z_pos + targ_dist * sin(targ_angle)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["targ_z"]$$;
      expr {
       expr="shoulder_z_pos + targ_dist * sin(targ_angle)";
      };
     };
     MemberAssign @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="TargetBody.init_pos.x = targ_x";
      pre_compile_code_string="TargetBody.init_pos.x = targ_x";
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["TargetBody"]$$;
      path="init_pos.x";
      expr {
       expr="targ_x";
      };
      update_after=0;
     };
     MemberAssign @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="TargetBody.init_pos.z = targ_z";
      pre_compile_code_string="TargetBody.init_pos.z = targ_z";
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["TargetBody"]$;
      path="init_pos.z";
      expr {
       expr="targ_z";
      };
      update_after=0;
     };
     MethodCall @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="TargetBody->SetValsToODE()";
      pre_compile_code_string="TargetBody->SetValsToODE()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"].vars["TargetBody"]$;
      method=VEBody::SetValsToODE;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void SetValsToODE()";
      meth_desc=" NOTE: Obsolete -- just use Init() -- set the initial values to ODE, and creates id's if not already done";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["RobotGetCurInputs"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].doc$$;
     };
    };
    name="RobotGetCurInputs";
    short_nm="AplyIn";
    tags=;
    desc="get input data for forward model: current status inputs -- before running Robot";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["TargetBody"] {
      name="TargetBody";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Hand"] {
      name="Hand";
      var_type=T_Object;
      object_type=VEBody;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Shoulder"] {
      name="Shoulder";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Elbow"] {
      name="Elbow";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["arm_tot_len"] {
      name="arm_tot_len";
      var_type=T_Real;
      real_val=0.7450000075250864;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="total length of the arm, for target range computations";
      init_from=NULL;
     };
     ProgVar @["shoulder_x_pos"] {
      name="shoulder_x_pos";
      var_type=T_Real;
      real_val=0.2549999940395355;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["shoulder_z_pos"] {
      name="shoulder_z_pos";
      var_type=T_Real;
      real_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["hand_max_x"] {
      name="hand_max_x";
      var_type=T_Real;
      real_val=1.000000001564622;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_min_x"] {
      name="hand_min_x";
      var_type=T_Real;
      real_val=-0.4900000134855509;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_max_z"] {
      name="hand_max_z";
      var_type=T_Real;
      real_val=0.7450000075250864;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_min_z"] {
      name="hand_min_z";
      var_type=T_Real;
      real_val=-0.3400000035762787;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_pos_x_norm"] {
      name="hand_pos_x_norm";
      var_type=T_Real;
      real_val=0.7759468215553323;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["hand_pos_z_norm"] {
      name="hand_pos_z_norm";
      var_type=T_Real;
      real_val=0.7804944413396571;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["targ_pos_x_norm"] {
      name="targ_pos_x_norm";
      var_type=T_Real;
      real_val=0.681050187560729;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["targ_pos_z_norm"] {
      name="targ_pos_z_norm";
      var_type=T_Real;
      real_val=0.6159300565325734;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["shoulder_ang_norm"] {
      name="shoulder_ang_norm";
      var_type=T_Real;
      real_val=0.2826650142669678;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized angle";
      init_from=NULL;
     };
     ProgVar @["elbow_ang_norm"] {
      name="elbow_ang_norm";
      var_type=T_Real;
      real_val=0.4446482360363007;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized angle";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     OtherProgramVar @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Vars Fm:  program=EmerRobot set=from  var_1=arm_tot_len  var_2=shoulder_x_pos  var_3=shoulder_z_pos  var_4=? ";
      pre_compile_code_string="Vars Fm:  program=EmerRobot set=from  var_1=arm_tot_len  var_2=shoulder_x_pos  var_3=shoulder_z_pos  var_4=? ";
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["arm_tot_len"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["shoulder_x_pos"]$$;
      var_3=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["shoulder_z_pos"]$$;
      var_4=NULL;
     };
     OtherProgramVar @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Vars Fm:  program=EmerRobot set=from  var_1=hand_max_x  var_2=hand_max_z  var_3=hand_min_x  var_4=hand_min_z ";
      pre_compile_code_string="Vars Fm:  program=EmerRobot set=from  var_1=hand_max_x  var_2=hand_max_z  var_3=hand_min_x  var_4=hand_min_z ";
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["hand_max_x"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["hand_max_z"]$$;
      var_3=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["hand_min_x"]$$;
      var_4=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["hand_min_z"]$$;
     };
     Comment @[2] {
      desc="= get all the data  -- compute here b/c this is BEFORE Arm is run =";
      flags=CAN_REVERT_TO_CODE;
      code_string="// = get all the data  -- compute here b/c this is BEFORE Arm is run =";
      pre_compile_code_string="// = get all the data  -- compute here b/c this is BEFORE Arm is run =";
     };
     AssignExpr @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="hand_pos_x_norm = (Hand.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      pre_compile_code_string="hand_pos_x_norm = (Hand.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["hand_pos_x_norm"]$$;
      expr {
       expr="(Hand.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      };
     };
     AssignExpr @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="hand_pos_z_norm = (Hand.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      pre_compile_code_string="hand_pos_z_norm = (Hand.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["hand_pos_z_norm"]$$;
      expr {
       expr="(Hand.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     AssignExpr @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="targ_pos_x_norm = (TargetBody.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      pre_compile_code_string="targ_pos_x_norm = (TargetBody.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["targ_pos_x_norm"]$$;
      expr {
       expr="(TargetBody.cur_pos.x - hand_min_x) / (hand_max_x - hand_min_x)";
      };
     };
     AssignExpr @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="targ_pos_z_norm = (TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      pre_compile_code_string="targ_pos_z_norm = (TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["targ_pos_z_norm"]$$;
      expr {
       expr="(TargetBody.cur_pos.z - hand_min_z) / (hand_max_z - hand_min_z)";
      };
     };
     AssignExpr @[7] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="shoulder_ang_norm = Shoulder.pos_norm";
      pre_compile_code_string="shoulder_ang_norm = Shoulder.pos_norm";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["shoulder_ang_norm"]$$;
      expr {
       expr="Shoulder.pos_norm";
      };
     };
     AssignExpr @[8] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="elbow_ang_norm = Elbow.pos_norm";
      pre_compile_code_string="elbow_ang_norm = Elbow.pos_norm";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].vars["elbow_ang_norm"]$$;
      expr {
       expr="Elbow.pos_norm";
      };
     };
     Comment @[9] {
      desc="= write to the data table -- assumes row added and set as target =";
      flags=CAN_REVERT_TO_CODE;
      code_string="// = write to the data table -- assumes row added and set as target =";
      pre_compile_code_string="// = write to the data table -- assumes row added and set as target =";
     };
     MethodCall @[10] {
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].args["input_data"]$$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="hand_pos_x_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"VisHand_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="0";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
     MethodCall @[11] {
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].args["input_data"]$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="hand_pos_z_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"VisHand_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
     MethodCall @[12] {
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].args["input_data"]$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="targ_pos_x_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"VisTarget_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="0";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
     MethodCall @[13] {
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].args["input_data"]$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="targ_pos_z_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"VisTarget_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
     MethodCall @[14] {
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].args["input_data"]$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="shoulder_ang_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"SomaShoulderAngle_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="0";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
     MethodCall @[15] {
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"].args["input_data"]$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="elbow_ang_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"SomaElbowAngle_Cur\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="0";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["FwdModelPredTargs"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].doc$$;
     };
    };
    name="FwdModelPredTargs";
    short_nm="Targs";
    tags=;
    desc="get input data for forward mode: targets for predictions (after running Robot)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["Shoulder"] {
      name="Shoulder";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["Elbow"] {
      name="Elbow";
      var_type=T_Object;
      object_type=VEMuscleJoint;
      object_val=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["arm_tot_len"] {
      name="arm_tot_len";
      var_type=T_Real;
      real_val=0.7450000075250864;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="total length of the arm, for target range computations";
      init_from=NULL;
     };
     ProgVar @["shoulder_x_pos"] {
      name="shoulder_x_pos";
      var_type=T_Real;
      real_val=0.2549999940395355;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["shoulder_z_pos"] {
      name="shoulder_z_pos";
      var_type=T_Real;
      real_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="position of shoulder joint";
      init_from=NULL;
     };
     ProgVar @["hand_max_x"] {
      name="hand_max_x";
      var_type=T_Real;
      real_val=1.000000001564622;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_min_x"] {
      name="hand_min_x";
      var_type=T_Real;
      real_val=-0.4900000134855509;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_max_z"] {
      name="hand_max_z";
      var_type=T_Real;
      real_val=0.7450000075250864;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_min_z"] {
      name="hand_min_z";
      var_type=T_Real;
      real_val=-0.3400000035762787;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="computed max hand pos";
      init_from=NULL;
     };
     ProgVar @["hand_pos_x_norm"] {
      name="hand_pos_x_norm";
      var_type=T_Real;
      real_val=0.7759468215553323;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["hand_pos_z_norm"] {
      name="hand_pos_z_norm";
      var_type=T_Real;
      real_val=0.7804944413396571;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized pos";
      init_from=NULL;
     };
     ProgVar @["shoulder_trg_angle_norm"] {
      name="shoulder_trg_angle_norm";
      var_type=T_Real;
      real_val=0.2909877453955088;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized 0..1 motor control value";
      init_from=NULL;
     };
     ProgVar @["elbow_trg_angle_norm"] {
      name="elbow_trg_angle_norm";
      var_type=T_Real;
      real_val=0.4373610670871461;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["shoulder_ang_norm"] {
      name="shoulder_ang_norm";
      var_type=T_Real;
      real_val=0.2826650142669678;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized angle";
      init_from=NULL;
     };
     ProgVar @["elbow_ang_norm"] {
      name="elbow_ang_norm";
      var_type=T_Real;
      real_val=0.4446482360363007;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="normalized angle";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     Comment @[0] {
      desc="== get all the data in normalized form ==";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == get all the data in normalized form ==";
      pre_compile_code_string="// == get all the data in normalized form ==";
     };
     OtherProgramVar @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Vars Fm:  program=EmerRobot set=from  var_1=arm_tot_len  var_2=shoulder_x_pos  var_3=shoulder_z_pos  var_4=? ";
      pre_compile_code_string="Vars Fm:  program=EmerRobot set=from  var_1=arm_tot_len  var_2=shoulder_x_pos  var_3=shoulder_z_pos  var_4=? ";
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["arm_tot_len"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["shoulder_x_pos"]$$;
      var_3=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["shoulder_z_pos"]$$;
      var_4=NULL;
     };
     OtherProgramVar @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Vars Fm:  program=EmerRobot set=from  var_1=hand_max_x  var_2=hand_max_z  var_3=hand_min_x  var_4=hand_min_z ";
      pre_compile_code_string="Vars Fm:  program=EmerRobot set=from  var_1=hand_max_x  var_2=hand_max_z  var_3=hand_min_x  var_4=hand_min_z ";
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["hand_max_x"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["hand_max_z"]$$;
      var_3=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["hand_min_x"]$$;
      var_4=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["hand_min_z"]$$;
     };
     OtherProgramVar @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Vars Fm:  program=EmerRobot set=from  var_1=hand_pos_x_norm  var_2=hand_pos_z_norm  var_3=?  var_4=? ";
      pre_compile_code_string="Vars Fm:  program=EmerRobot set=from  var_1=hand_pos_x_norm  var_2=hand_pos_z_norm  var_3=?  var_4=? ";
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["hand_pos_x_norm"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["hand_pos_z_norm"]$$;
      var_3=NULL;
      var_4=NULL;
     };
     AssignExpr @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="shoulder_ang_norm = Shoulder.pos_norm";
      pre_compile_code_string="shoulder_ang_norm = Shoulder.pos_norm";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["shoulder_ang_norm"]$$;
      expr {
       expr="Shoulder.pos_norm";
      };
     };
     AssignExpr @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="elbow_ang_norm = Elbow.pos_norm";
      pre_compile_code_string="elbow_ang_norm = Elbow.pos_norm";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["elbow_ang_norm"]$$;
      expr {
       expr="Elbow.pos_norm";
      };
     };
     OtherProgramVar @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Vars Fm:  program=EmerRobot set=from  var_1=shoulder_trg_angle_norm  var_2=elbow_trg_angle_norm  var_3=?  var_4=? ";
      pre_compile_code_string="Vars Fm:  program=EmerRobot set=from  var_1=shoulder_trg_angle_norm  var_2=elbow_trg_angle_norm  var_3=?  var_4=? ";
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["shoulder_trg_angle_norm"]$$;
      var_2=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].vars["elbow_trg_angle_norm"]$$;
      var_3=NULL;
      var_4=NULL;
     };
     Comment @[7] {
      desc="== write to the data table -- assumes row added and set as target ==";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == write to the data table -- assumes row added and set as target ==";
      pre_compile_code_string="// == write to the data table -- assumes row added and set as target ==";
     };
     MethodCall @[8] {
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="hand_pos_x_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"VisHand_Pred\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="0";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
     MethodCall @[9] {
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="hand_pos_z_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"VisHand_Pred\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
     MethodCall @[10] {
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="shoulder_ang_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"SomaShoulderAngle_Pred\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="0";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
     MethodCall @[11] {
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="elbow_ang_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"SomaElbowAngle_Pred\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="0";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
     MethodCall @[12] {
      desc="this must be done here because random forces generated after grabbing cur inputs";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="shoulder_trg_angle_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"MotorShoulderForce\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="0";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
     MethodCall @[13] {
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="elbow_trg_angle_norm";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"MotorElbowForce\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="0";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
     DoneWritingDataRow @[14] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="DoneWritingDataRow:  table = input_data ";
      pre_compile_code_string="DoneWritingDataRow:  table = input_data ";
      data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"].args["input_data"]$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["RLModelRew"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].doc$$;
     };
    };
    name="RLModelRew";
    short_nm="Rew";
    tags=;
    desc="get input data for RL model: reward value (after running Robot)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to train";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trg_dist"] {
      name="trg_dist";
      var_type=T_Real;
      real_val=1.306375026702881;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="distance from target";
      init_from=NULL;
     };
     ProgVar @["rew_val"] {
      name="rew_val";
      var_type=T_Real;
      real_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="reward value";
      init_from=NULL;
     };
     ProgVar @["rew_dist_thr"] {
      name="rew_dist_thr";
      var_type=T_Real;
      real_val=0.4;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="threshold on distance to get a reward: updated as a function of network performance";
      init_from=NULL;
     };
     ProgVar @["rew_dist_thr_init"] {
      name="rew_dist_thr_init";
      var_type=T_Real;
      real_val=0.4;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="initial threshold on distance to get a reward at start of training";
      init_from=NULL;
     };
     ProgVar @["rew_dist_thr_incr"] {
      name="rew_dist_thr_incr";
      var_type=T_Real;
      real_val=0.01;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how much to change the distance threshold when network is doing well or poorly (see avg_rew_*_thr)";
      init_from=NULL;
     };
     ProgVar @["avg_rew_dec_thr"] {
      name="avg_rew_dec_thr";
      var_type=T_Real;
      real_val=0.8;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="threshold on network avg_rew for decreasing the reward threshold (makes the task harder -- when doing well)";
      init_from=NULL;
     };
     ProgVar @["avg_rew_inc_thr"] {
      name="avg_rew_inc_thr";
      var_type=T_Real;
      real_val=0.2;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="threshold on network avg_rew for increasing the reward threshold (makes task easier -- when doing poorly)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="rew_dist_thr = rew_dist_thr_init";
      pre_compile_code_string="rew_dist_thr = rew_dist_thr_init";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr"]$$;
      expr {
       expr="rew_dist_thr_init";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     OtherProgramVar @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Vars Fm:  program=EmerRobot set=from  var_1=trg_dist  var_2=?  var_3=?  var_4=? ";
      pre_compile_code_string="Vars Fm:  program=EmerRobot set=from  var_1=trg_dist  var_2=?  var_3=?  var_4=? ";
      other_prog=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
      set_other=0;
      var_1=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["trg_dist"]$$;
      var_2=NULL;
      var_3=NULL;
      var_4=NULL;
     };
     If @[1] {
      desc="on first trial of new epoch, update the reward threshold based on performance";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.trial == 0)";
      pre_compile_code_string="if (network.trial == 0)";
      cond {
       expr="network.trial == 0";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       If @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (network.epoch == 0)";
	pre_compile_code_string="if (network.epoch == 0)";
	cond {
	 expr="network.epoch == 0";
	};
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="rew_dist_thr = rew_dist_thr_init";
	  pre_compile_code_string="rew_dist_thr = rew_dist_thr_init";
	  result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr"]$;
	  expr {
	   expr="rew_dist_thr_init";
	  };
	 };
	};
       };
       Else @[1] {
	desc=;
	flags=0;
	code_string=;
	pre_compile_code_string=;
	else_code {
	 name="else_code";
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (network.avg_ext_rew >= avg_rew_dec_thr)";
	  pre_compile_code_string="if (network.avg_ext_rew >= avg_rew_dec_thr)";
	  cond {
	   expr="network.avg_ext_rew >= avg_rew_dec_thr";
	  };
	  true_code {
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rew_dist_thr += -rew_dist_thr_incr";
	    pre_compile_code_string="rew_dist_thr += -rew_dist_thr_incr";
	    var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr"]$;
	    expr {
	     expr="-rew_dist_thr_incr";
	    };
	   };
	  };
	 };
	 If @[1] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (network.avg_ext_rew <= avg_rew_inc_thr)";
	  pre_compile_code_string="if (network.avg_ext_rew <= avg_rew_inc_thr)";
	  cond {
	   expr="network.avg_ext_rew <= avg_rew_inc_thr";
	  };
	  true_code {
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rew_dist_thr += rew_dist_thr_incr";
	    pre_compile_code_string="rew_dist_thr += rew_dist_thr_incr";
	    var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr"]$;
	    expr {
	     expr="rew_dist_thr_incr";
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="by threshold";
      flags=CAN_REVERT_TO_CODE;
      code_string="rew_val = trg_dist < rew_dist_thr ? 1.0 : 0.0";
      pre_compile_code_string="rew_val = trg_dist < rew_dist_thr ? 1.0 : 0.0";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_val"]$$;
      expr {
       expr="trg_dist < rew_dist_thr ? 1.0 : 0.0";
      };
     };
     AssignExpr @[3] {
      desc="just inverse distance for now..";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="rew_val = rew_val > 0.0 ? rew_val : 0.0";
      pre_compile_code_string="rew_val = rew_val > 0.0 ? rew_val : 0.0";
      result_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_val"]$;
      expr {
       expr="rew_val > 0.0 ? rew_val : 0.0";
      };
     };
     Comment @[4] {
      desc="== write to the data table -- assumes row added and set as target ==";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == write to the data table -- assumes row added and set as target ==";
      pre_compile_code_string="// == write to the data table -- assumes row added and set as target ==";
     };
     MethodCall @[5] {
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="input_data->method()";
      pre_compile_code_string="input_data->method()";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].args["input_data"]$$;
      method=NULL;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="rew_val";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ch_nm";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"PVe\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="cell";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="0";
	};
       };
      };
      meth_sig=;
      meth_desc=;
     };
     DoneWritingDataRow @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="DoneWritingDataRow:  table = input_data ";
      pre_compile_code_string="DoneWritingDataRow:  table = input_data ";
      data_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].args["input_data"]$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["RobotTrialInit"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotTrialInit"].doc$$;
     };
    };
    name="RobotTrialInit";
    short_nm="Init";
    tags=;
    desc="interfacing between the robot and the model(s) at the start of the Trial level of processing";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cur_net_name"] {
      name="cur_net_name";
      var_type=T_String;
      string_val="FwdModelNet";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current network name -- used for a switch to determine what to perform";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cur_net_name = network.name";
      pre_compile_code_string="cur_net_name = network.name";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotTrialInit"].vars["cur_net_name"]$$;
      expr {
       expr="network.name";
      };
     };
     Switch @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="switch(cur_net_name)";
      pre_compile_code_string="switch(cur_net_name)";
      switch_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotTrialInit"].vars["cur_net_name"]$;
      cases {
       name=;
       el_typ=CaseBlock;
       el_def=0;
       CaseBlock @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="case: \"FwdModelNet\"";
	pre_compile_code_string="case: \"FwdModelNet\"";
	prog_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="capture current arm configuration prior to running Arm";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="RobotGetCurInputs(input_data)";
	  pre_compile_code_string="RobotGetCurInputs(input_data)";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="input_data";
	    };
	   };
	  };
	  target=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"]$$;
	  targ_ld_init="*GetCurInputs*";
	 };
	 ProgramCall @[1] {
	  desc="run the arm to generate target predictions -- random forces generated now";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="EmerRobot(true, 0.0, 0.0)";
	  pre_compile_code_string="EmerRobot(true, 0.0, 0.0)";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=bool;
	    type="bool";
	    name="gen_rnd_angles";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="true";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="shoulder_trg_angle_norm";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="0.0";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=double;
	    type="double";
	    name="elbow_trg_angle_norm";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="0.0";
	    };
	   };
	  };
	  target=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
	  targ_ld_init="*EmerRobot*";
	 };
	 ProgramCall @[2] {
	  desc="capture prediction targets (actual outputs of motor system) after running arm";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="FwdModelPredTargs(input_data)";
	  pre_compile_code_string="FwdModelPredTargs(input_data)";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="input_data";
	    };
	   };
	  };
	  target=.projects["ve_arm"].programs.gp["RobotProgs"]["FwdModelPredTargs"]$$;
	  targ_ld_init="*FwdModelPredTargs*";
	 };
	};
	case_val {
	 expr="\"FwdModelNet\"";
	};
	is_default=0;
       };
       CaseBlock @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="case: \"RLNet\"";
	pre_compile_code_string="case: \"RLNet\"";
	prog_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="set new random target location";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="SetTarget(true, 0.0, 0.0)";
	  pre_compile_code_string="SetTarget(true, 0.0, 0.0)";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=bool;
	    type="bool";
	    name="gen_rnd_targ";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="true";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="targ_angle";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="0.0";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=double;
	    type="double";
	    name="targ_dist";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="0.0";
	    };
	   };
	  };
	  target=.projects["ve_arm"].programs.gp["RobotProgs"]["SetTarget"]$$;
	  targ_ld_init="*SetTarget*";
	 };
	 ProgramCall @[1] {
	  desc="capture current arm configuration prior to running Arm";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="RobotGetCurInputs(input_data)";
	  pre_compile_code_string="RobotGetCurInputs(input_data)";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="input_data";
	    };
	   };
	  };
	  target=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotGetCurInputs"]$;
	  targ_ld_init="*GetCurInputs*";
	 };
	};
	case_val {
	 expr="\"RLNet\"";
	};
	is_default=0;
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["RobotSettleInit"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotSettleInit"].doc$$;
     };
    };
    name="RobotSettleInit";
    short_nm="Init";
    tags=;
    desc="interfacing between the robot and the model(s) at the start of the Settle level of processing";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cur_net_name"] {
      name="cur_net_name";
      var_type=T_String;
      string_val="FwdModelNet";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current network name -- used for a switch to determine what to perform";
      init_from=NULL;
     };
     ProgVar @["MotorShoulderForce"] {
      name="MotorShoulderForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=.projects["ve_arm"].networks["RLNet"].layers["MotorShoulderForce"]$$;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["MotorElbowForce"] {
      name="MotorElbowForce";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=.projects["ve_arm"].networks["RLNet"].layers["MotorElbowForce"]$$;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cur_net_name = network.name";
      pre_compile_code_string="cur_net_name = network.name";
      result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotSettleInit"].vars["cur_net_name"]$$;
      expr {
       expr="network.name";
      };
     };
     Switch @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="switch(cur_net_name)";
      pre_compile_code_string="switch(cur_net_name)";
      switch_var=$.projects["ve_arm"].programs.gp["RobotProgs"]["RobotSettleInit"].vars["cur_net_name"]$;
      cases {
       name=;
       el_typ=CaseBlock;
       el_def=0;
       CaseBlock @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="case: \"FwdModelNet\"";
	pre_compile_code_string="case: \"FwdModelNet\"";
	prog_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="ApplyInputs_FwdModel()";
	  pre_compile_code_string="ApplyInputs_FwdModel()";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$$;
	  targ_ld_init="*ApplyInputs*";
	 };
	};
	case_val {
	 expr="\"FwdModelNet\"";
	};
	is_default=0;
       };
       CaseBlock @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="case: \"RLNet\"";
	pre_compile_code_string="case: \"RLNet\"";
	prog_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (network.phase_no == 1)";
	  pre_compile_code_string="if (network.phase_no == 1)";
	  cond {
	   expr="network.phase_no == 1";
	  };
	  true_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   AssignExpr @[0] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="MotorShoulderForce = network.layers.MotorShoulderForce";
	    pre_compile_code_string="MotorShoulderForce = network.layers.MotorShoulderForce";
	    result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotSettleInit"].vars["MotorShoulderForce"]$$;
	    expr {
	     expr="network.layers.MotorShoulderForce";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="MotorElbowForce = network.layers.MotorElbowForce";
	    pre_compile_code_string="MotorElbowForce = network.layers.MotorElbowForce";
	    result_var=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotSettleInit"].vars["MotorElbowForce"]$$;
	    expr {
	     expr="network.layers.MotorElbowForce";
	    };
	   };
	   ProgramCall @[2] {
	    desc="run the arm using forces from the network force layers";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="EmerRobot(false, MotorShoulderForce.units[0].act_m, MotorElbowForce.units[0].act_m)";
	    pre_compile_code_string="EmerRobot(false, MotorShoulderForce.units[0].act_m, MotorElbowForce.units[0].act_m)";
	    prog_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=bool;
	      type="bool";
	      name="gen_rnd_angles";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="false";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=double;
	      type="double";
	      name="shoulder_trg_angle_norm";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="MotorShoulderForce.units[0].act_m";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=double;
	      type="double";
	      name="elbow_trg_angle_norm";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="MotorElbowForce.units[0].act_m";
	      };
	     };
	    };
	    target=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"]$;
	    targ_ld_init="*EmerRobot*";
	   };
	   ProgramCall @[3] {
	    desc="get reward value based on action";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="RLModelRew(network, input_data)";
	    pre_compile_code_string="RLModelRew(network, input_data)";
	    prog_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=LeabraNetwork;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable;
	      type="DataTable*";
	      name="input_data";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="input_data";
	      };
	     };
	    };
	    target=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"]$;
	    targ_ld_init="*RLModelRew*";
	   };
	  };
	 };
	 ProgramCall @[1] {
	  desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="ApplyInputs_RLModel()";
	  pre_compile_code_string="ApplyInputs_RLModel()";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"]$$;
	  targ_ld_init="*ApplyInputs*";
	 };
	};
	case_val {
	 expr="\"RLNet\"";
	};
	is_default=0;
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp["LeabraAll_Std"] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @["LeabraBatch"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].doc$$;
     };
    };
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["batch"] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @["batch_start"] {
      name="batch_start";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch number to start on";
      init_from=NULL;
     };
     ProgVar @["n_batches"] {
      name="n_batches";
      var_type=T_Int;
      int_val=10;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of batches to run";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: batch";
      pre_compile_code_string="Net Counter Init: batch";
      network_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$$;
      local_ctr_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      pre_compile_code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["i"] {
	name="i";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc="start at the start";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch = batch_start";
      pre_compile_code_string="batch = batch_start";
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
      expr {
       expr="batch_start";
      };
     };
     MemberAssign @[2] {
      desc="update network";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.batch = batch";
      pre_compile_code_string="network.batch = batch";
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
      path="batch";
      expr {
       expr="batch";
      };
      update_after=0;
     };
     ForLoop @[3] {
      desc="main loop over training runs";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (i=0; i<n_batches; i++)";
      pre_compile_code_string="for (i=0; i<n_batches; i++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrain(network, input_data, true)";
	pre_compile_code_string="LeabraTrain(network, input_data, true)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="true";
	  };
	 };
	};
	target=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: batch";
	pre_compile_code_string="Net Counter Incr: batch";
	network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
	local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      init {
       expr="i=0";
      };
      test {
       expr="i<n_batches";
      };
      iter {
       expr="i++";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraBatch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraBatch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrain"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].doc$$;
     };
    };
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Train, RndSeedList";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task.  Also has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed_List @["rnd_seeds"] {
      name="rnd_seeds";
      seeds {
       name="seeds";
       el_typ=RndSeed;
       el_def=0;
       RndSeed @["RndSeed_1"] {
	name="RndSeed_1";
	rnd_seed=2878175685;
       };
       RndSeed @["RndSeed_2"] {
	name="RndSeed_2";
	rnd_seed=2878175686;
       };
       RndSeed @["RndSeed_3"] {
	name="RndSeed_3";
	rnd_seed=2878175687;
       };
       RndSeed @["RndSeed_4"] {
	name="RndSeed_4";
	rnd_seed=2878175688;
       };
       RndSeed @["RndSeed_5"] {
	name="RndSeed_5";
	rnd_seed=2878175689;
       };
       RndSeed @["RndSeed_6"] {
	name="RndSeed_6";
	rnd_seed=2878175690;
       };
       RndSeed @["RndSeed_7"] {
	name="RndSeed_7";
	rnd_seed=2878175691;
       };
       RndSeed @["RndSeed_8"] {
	name="RndSeed_8";
	rnd_seed=2878175692;
       };
       RndSeed @["RndSeed_9"] {
	name="RndSeed_9";
	rnd_seed=2878175693;
       };
       RndSeed @["RndSeed_10"] {
	name="RndSeed_10";
	rnd_seed=2878175694;
       };
       RndSeed @["RndSeed_11"] {
	name="RndSeed_11";
	rnd_seed=2878175695;
       };
       RndSeed @["RndSeed_12"] {
	name="RndSeed_12";
	rnd_seed=2878175696;
       };
       RndSeed @["RndSeed_13"] {
	name="RndSeed_13";
	rnd_seed=2878175697;
       };
       RndSeed @["RndSeed_14"] {
	name="RndSeed_14";
	rnd_seed=2878175698;
       };
       RndSeed @["RndSeed_15"] {
	name="RndSeed_15";
	rnd_seed=2878175699;
       };
       RndSeed @["RndSeed_16"] {
	name="RndSeed_16";
	rnd_seed=2878175700;
       };
       RndSeed @["RndSeed_17"] {
	name="RndSeed_17";
	rnd_seed=2878175701;
       };
       RndSeed @["RndSeed_18"] {
	name="RndSeed_18";
	rnd_seed=2878175702;
       };
       RndSeed @["RndSeed_19"] {
	name="RndSeed_19";
	rnd_seed=2878175703;
       };
       RndSeed @["RndSeed_20"] {
	name="RndSeed_20";
	rnd_seed=2878175704;
       };
       RndSeed @["RndSeed_21"] {
	name="RndSeed_21";
	rnd_seed=2878175705;
       };
       RndSeed @["RndSeed_22"] {
	name="RndSeed_22";
	rnd_seed=2878175706;
       };
       RndSeed @["RndSeed_23"] {
	name="RndSeed_23";
	rnd_seed=2878175707;
       };
       RndSeed @["RndSeed_24"] {
	name="RndSeed_24";
	rnd_seed=2878175708;
       };
       RndSeed @["RndSeed_25"] {
	name="RndSeed_25";
	rnd_seed=2878175709;
       };
      };
     };
     RndSeed @["rnd_seed"] {
      name="rnd_seed";
      rnd_seed=1208639044;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @["RndInitType"] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @["OLD_SEED"] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @["NEW_SEED"] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
       DynEnumItem @["BATCH_SEEDS"] {
	name="BATCH_SEEDS";
	value=2;
	desc="use a fixed list of random seeds with the current batch number selecting the seed to use -- provides a consistent set of initial conditions for each batch regardless..";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["no_prompts"] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["max_epoch"] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["epoch"] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["train_mode"] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["rnd_init"] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].types["RndInitType"]$$;
       value=2;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @["err_stopcrit"] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion for training, in terms of count of trials with errors in the epoch (nework cnt_err)";
      init_from=NULL;
     };
     ProgVar @["n_under_thr"] {
      name="n_under_thr";
      var_type=T_Int;
      int_val=2;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of times network needs to be under stopcrit threshold to actually stop";
      init_from=NULL;
     };
     ProgVar @["save_final_wts"] {
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the network's weights at the end of training?  ";
      init_from=NULL;
     };
     ProgVar @["save_wts_interval"] {
      name="save_wts_interval";
      var_type=T_Int;
      int_val=-1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the weights every this many epochs, if number is >= 1 (otherwise do not save weights)";
      init_from=NULL;
     };
     ProgVar @["n_under_cnt"] {
      name="n_under_cnt";
      var_type=T_Int;
      int_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current under threshold counter";
      init_from=NULL;
     };
     ProgVar @["rnd_seeds"] {
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seeds"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["train_timer"] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["ve_arm"].networks["FwdModelNet"].train_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["rnd_seed"] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seed"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["GetRandomSeed"] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed() returns: int";
      pre_compile_code_string="GetRandomSeed() returns: int";
      name="GetRandomSeed";
      return_type=T_Int;
      object_type=taOBase;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	pre_compile_code_string="LocalVars (0 vars)";
	local_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       Switch @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="switch(rnd_init)";
	pre_compile_code_string="switch(rnd_init)";
	switch_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_init"]$$;
	cases {
	 name=;
	 el_typ=CaseBlock;
	 el_def=0;
	 CaseBlock @[0] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: OLD_SEED";
	  pre_compile_code_string="case: OLD_SEED";
	  prog_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    desc="restore previous random seed (all runs produce same results) -- click on rnd_seed object to generate a new seed to use for this if you want";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->OldSeed()";
	    pre_compile_code_string="rnd_seed->OldSeed()";
	    result_var=NULL;
	    obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$$;
	    method=RndSeed::OldSeed;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void OldSeed()";
	    meth_desc=" restore current seed to random num generator";
	   };
	  };
	  case_val {
	   expr="OLD_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[1] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: NEW_SEED";
	  pre_compile_code_string="case: NEW_SEED";
	  prog_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    desc="new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->NewSeed()";
	    pre_compile_code_string="rnd_seed->NewSeed()";
	    result_var=NULL;
	    obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$;
	    method=RndSeed::NewSeed;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void NewSeed()";
	    meth_desc=" set the seed to a new random value (based on time and process id)";
	   };
	  };
	  case_val {
	   expr="NEW_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[2] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: BATCH_SEEDS";
	  pre_compile_code_string="case: BATCH_SEEDS";
	  prog_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
	    pre_compile_code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
	    result_var=NULL;
	    obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seeds"]$$;
	    method=RndSeed_List::UseSeed;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=int;
	      type="int";
	      name="idx";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network.batch % rnd_seeds.seeds.size";
	      };
	     };
	    };
	    meth_sig="void UseSeed(int idx)";
	    meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
	   };
	  };
	  case_val {
	   expr="BATCH_SEEDS";
	  };
	  is_default=0;
	 };
	};
       };
      };
     };
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="no_prompts = false";
      pre_compile_code_string="no_prompts = false";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["no_prompts"]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->CheckConfig(false)";
      pre_compile_code_string="network->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      pre_compile_code_string="train_timer = network.train_time";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$$;
      expr {
       expr="network.train_time";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      pre_compile_code_string="n_under_cnt = 0";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$$;
      expr {
       expr="0";
      };
     };
     FunctionCall @[4] {
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      pre_compile_code_string="GetRandomSeed()";
      result_var=NULL;
      fun=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].functions["GetRandomSeed"]$$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WtInitPrompt @[5] {
      desc="don't initialize weights without checking";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gui && \"Do you want to Initialize Network Weights\")";
      pre_compile_code_string="if (gui && \"Do you want to Initialize Network Weights\")";
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="need to have built network by now in any case, so do it here to make double sure -- prevents errs when loading project with startup program";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	pre_compile_code_string="network->Build()";
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Build;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
       MethodCall @[1] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	pre_compile_code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[2] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	pre_compile_code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      pre_compile_code_string="epoch = network.epoch";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$$;
      expr {
       expr="network.epoch";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      pre_compile_code_string="train_timer = network.train_time";
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->StartTimer(true)";
      pre_compile_code_string="train_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      pre_compile_code_string="n_under_cnt = 0";
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
      expr {
       expr="0";
      };
     };
     MemberAssign @[3] {
      desc="set network's training mode to our local value";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.train_mode = train_mode";
      pre_compile_code_string="network.train_mode = train_mode";
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     FunctionCall @[4] {
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      pre_compile_code_string="GetRandomSeed()";
      result_var=NULL;
      fun=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].functions["GetRandomSeed"]$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (no_prompts)";
      pre_compile_code_string="if (no_prompts)";
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	pre_compile_code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	pre_compile_code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      pre_compile_code_string="epoch = network.epoch";
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[7] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="while (epoch < max_epoch)";
      pre_compile_code_string="while (epoch < max_epoch)";
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraEpoch(network, input_data)";
	pre_compile_code_string="LeabraEpoch(network, input_data)";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: epoch";
	pre_compile_code_string="Net Counter Incr: epoch";
	network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
	counter=Network::epoch;
	update_after=0;
       };
       If @[2] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (network.cnt_err <= err_stopcrit)";
	pre_compile_code_string="if (network.cnt_err <= err_stopcrit)";
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 VarIncr @[0] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt += 1";
	  pre_compile_code_string="n_under_cnt += 1";
	  var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
	  expr {
	   expr="1";
	  };
	 };
	 IfBreak @[1] {
	  desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if(n_under_cnt >=  n_under_thr) break";
	  pre_compile_code_string="if(n_under_cnt >=  n_under_thr) break";
	  cond {
	   expr="n_under_cnt >=  n_under_thr";
	  };
	 };
	};
       };
       Else @[3] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	pre_compile_code_string="else";
	else_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt = 0";
	  pre_compile_code_string="n_under_cnt = 0";
	  result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       If @[4] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (save_wts_interval >= 1)";
	pre_compile_code_string="if (save_wts_interval >= 1)";
	cond {
	 expr="save_wts_interval >= 1";
	};
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (epoch % save_wts_interval == 0)";
	  pre_compile_code_string="if (epoch % save_wts_interval == 0)";
	  cond {
	   expr="epoch % save_wts_interval == 0";
	  };
	  true_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   ProgramCall @[0] {
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="SaveWeights(network)";
	    pre_compile_code_string="SaveWeights(network)";
	    prog_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=Network;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network";
	      };
	     };
	    };
	    target=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	    targ_ld_init="*SaveWeights*";
	   };
	  };
	 };
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     If @[8] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (save_final_wts)";
      pre_compile_code_string="if (save_final_wts)";
      cond {
       expr="save_final_wts";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="SaveWeights(network)";
	pre_compile_code_string="SaveWeights(network)";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	targ_ld_init="*SaveWeights*";
       };
      };
     };
     MethodCall @[9] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->EndTimer()";
      pre_compile_code_string="train_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
    };
    step_prog=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"]$$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrain";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrain";
     text_size=1;
     text=;
     html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>LeabraTrain - emergent</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"LeabraTrain\",\"wgTitle\":\"LeabraTrain\",\"wgCurRevisionId\":11266,\"wgRevisionId\":11266,\"wgArticleId\":2767,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"bureaucrat\",\"svnadmins\",\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"LeabraTrain\",\"wgRelevantArticleId\":2767,\"wgUserId\":3,\"wgUserEditCount\":2418,\"wgUserRegistration\":1178051527000,\"wgUserNewMsgRevisionId\":null,\"wgIsProbablyEditable\":!0,
\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/emergent/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"ccmeonemails\":\"1\",\"enotifminoredits\":\"1\",\"imagesize\":\"0\",\"previewontop\":\"\",\"rows\":\"30\",\"thumbsize\":\"0\",\"underline\":\"0\",\"watchmoves\":\"1\",\"editsection\":\"1\",\"rememberpassword\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"14fd6c804d78e99930123181974c128b983adb9e\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"3b26cf5f182fe7fb29af6a6ca01dd6cb57342b95+\\\\\",\"patrolToken\":\"6f879f5a78cf8bf62c088b26f37a826a57342b95+\\\\\",\"watchToken\":\"0f5971aae38fcb23ba50cc900260a01757342b95+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/emergent/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a{text-decoration:none}</style>
<script async=\"\" src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.2\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"LeabraTrain\" href=\"/emergent/index.php?title=Special:ExportRDF/LeabraTrain&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/emergent/opensearch_desc.php\" title=\"emergent (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/emergent/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"emergent Atom feed\" href=\"/emergent/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/emergent/skins/Vector/csshover.min.htc\")}</style><![endif]-->
<script src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=EaPOpX%2FG\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-LeabraTrain skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">LeabraTrain</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From emergent</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><p>LeabraTrain is the standard <a href=\"/emergent/index.php/Program\" title=\"Program\">Program</a> for training <a href=\"/emergent/index.php/Leabra\" title=\"Leabra\">Leabra</a> networks.  It iterates over <a href=\"/emergent/index.php?title=LeabraEpoch&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"LeabraEpoch (page does not exist)\">LeabraEpoch</a> epochs, optionally until a training criterion has been met, or for a specified maximum number of epochs.
</p><p>You can easily customize this program to do different things at different points in the training process, for example by examining the network.epoch value (or the local copy of that value, epoch).
</p>
<!-- 
NewPP limit report
Cached time: 20160512070701
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.011 seconds
Real time usage: 0.014 seconds
Preprocessor visited node count: 1/1000000
Preprocessor generated node count: 4/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 1/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 - -total
-->

<!-- Saved in parser cache with key pdpwiki:pcache:idhash:2767-0!*!0!*!*!*!* and timestamp 20160512070701 and revision id 11266
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266\">https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/emergent/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/emergent/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/emergent/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/emergent/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/emergent/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/emergent/index.php?title=Special:UserLogout&amp;returnto=LeabraTrain\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/emergent/index.php?title=Talk:LeabraTrain&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=unwatch&amp;token=c6d7363e22d4c0d44ac7ca2a8c59165157342b95%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/emergent/index.php/Special:MovePage/LeabraTrain\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/emergent/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search emergent [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-recentchanges\"><a href=\"/emergent/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-Documentation\"><a href=\"/emergent/index.php/User_hub\">Documentation</a></li><li id=\"n-Submit-a-bug\"><a href=\"/emergent/index.php/How_to_submit_a_bug_report\">Submit a bug</a></li><li id=\"n-Bug-tracker\"><a href=\"//grey.colorado.edu/cgi-bin/bugzilla/index.cgi\" rel=\"nofollow\">Bug tracker</a></li><li id=\"n-Mailing-list\"><a href=\"//grey.colorado.edu/cgi-bin/mailman/listinfo/emergent-users\" rel=\"nofollow\">Mailing list</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/emergent/index.php/Special:WhatLinksHere/LeabraTrain\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/emergent/index.php/Special:RecentChangesLinked/LeabraTrain\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/emergent/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/emergent/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;oldid=11266\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/emergent/index.php/Special:Browse/LeabraTrain\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=LeabraTrain\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=LeabraTrain&amp;oldid=11266&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 12 May 2016, at 01:07.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-about\"><a href=\"/emergent/index.php/emergent:About\" title=\"emergent:About\">About emergent</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/emergent/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/emergent/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /emergent/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/emergent/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":155});
} );</script>
	

</body></html>";
    };
   };
   Program @["LeabraEpoch"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].doc$$;
     };
    };
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=2;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["data_loop_order"] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["step_on_err"] {
      name="step_on_err";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["ve_arm"].networks["FwdModelNet"].epoch_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=18;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      pre_compile_code_string="Net Counter Init: trial";
      network_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$$;
      local_ctr_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      pre_compile_code_string="epoch_timer = network.epoch_time";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      pre_compile_code_string="Net Counter Init: trial";
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      pre_compile_code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      pre_compile_code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[3] {
      desc="added in 8.0: essential for param_seqs";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network->Init_Epoch()";
      pre_compile_code_string="network->Init_Epoch()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=Network::Init_Epoch;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Epoch()";
      meth_desc=" Initializes network state at the start of a new epoch -- updates parameters according to param_seq for example";
     };
     MethodCall @[4] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      pre_compile_code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      pre_compile_code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrial(network, input_data)";
	pre_compile_code_string="LeabraTrial(network, input_data)";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"]$$;
	targ_ld_init="*LeabraTrial*";
       };
       If @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (step_on_err && network.sse > 0.0)";
	pre_compile_code_string="if (step_on_err && network.sse > 0.0)";
	cond {
	 expr="step_on_err && network.sse > 0.0";
	};
	true_code {
	 name="ProgEl_List_100";
	 el_typ=ProgCode;
	 el_def=0;
	 StopStepPoint @[0] {
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Stop_Step Point";
	  pre_compile_code_string="Stop_Step Point";
	  cond {
	   expr=;
	  };
	 };
	};
       };
      };
      data_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["input_data"]$$;
      index_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_index"]$$;
      order_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_order"]$$;
      order=PERMUTED;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      pre_compile_code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	pre_compile_code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      pre_compile_code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[8] {
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      pre_compile_code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      pre_compile_code_string="LeabraEpochMonitor(network)";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrial"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].doc$$;
     };
    };
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      pre_compile_code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["qtr"] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      pre_compile_code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	pre_compile_code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      pre_compile_code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     ProgramCall @[3] {
      desc="arm stuff at start of trial";
      flags=NON_STD|CAN_REVERT_TO_CODE;
      code_string="RobotTrialInit(network, input_data)";
      pre_compile_code_string="RobotTrialInit(network, input_data)";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotTrialInit"]$$;
      targ_ld_init="*RobotTrialInit*";
     };
     Comment @[4] {
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      pre_compile_code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[5] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      pre_compile_code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[6] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      pre_compile_code_string="ApplyInputs(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[7] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      pre_compile_code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarter(network, input_data)";
	pre_compile_code_string="LeabraQuarter(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"]$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[8] {
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      pre_compile_code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[9] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      pre_compile_code_string="LeabraTrialMonitor(network)";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"]$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[10] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      pre_compile_code_string="Net Update View";
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      update_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraQuarter"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].doc$$;
     };
    };
    name="LeabraQuarter";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      pre_compile_code_string="Net Counter Init: cycle";
      network_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$$;
      local_ctr_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      pre_compile_code_string="LocalVars (2 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["cycle_max"] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cyc"] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      pre_compile_code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      pre_compile_code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      pre_compile_code_string="ApplyInputs(network, input_data)";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$;
      targ_ld_init="*ApplyInputs*";
     };
     ProgramCall @[4] {
      desc=;
      flags=NON_STD|CAN_REVERT_TO_CODE;
      code_string="RobotSettleInit(network, input_data)";
      pre_compile_code_string="RobotSettleInit(network, input_data)";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects["ve_arm"].programs.gp["RobotProgs"]["RobotSettleInit"]$$;
      targ_ld_init="*RobotSettleInit*";
     };
     MethodCall @[5] {
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      pre_compile_code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[6] {
      desc="will be 25 if network times.cycle_qtr is true, else 1";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      pre_compile_code_string="cycle_max = network->CycleRunMax()";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].prog_code[0].local_vars["cycle_max"]$$;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[7] {
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      pre_compile_code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycle(network)";
	pre_compile_code_string="LeabraCycle(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraCycle"]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	pre_compile_code_string="cycle = network.cycle";
	result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["cycle"]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[8] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      pre_compile_code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[9] {
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      pre_compile_code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[10] {
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      pre_compile_code_string="Net Update View";
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      update_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraCycle"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraCycle"].doc$$;
     };
    };
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing of activation updating -- either 1 cycle (1 msec) or 25 cycles if times.cycle_qtr is TRUE (default)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      pre_compile_code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      pre_compile_code_string="Net Update View";
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$;
      update_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["ApplyInputs"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
    };
    name="ApplyInputs";
    short_nm="Inputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      name="LayerWriter_0";
      data=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      network=$.projects["ve_arm"].networks["FwdModelNet"]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	col_name="VisTarget_Cur";
	net_target=LAYER;
	layer_name="VisTarget_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	col_name="VisHand_Cur";
	net_target=LAYER;
	layer_name="VisHand_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	col_name="SomaShoulderAngle_Cur";
	net_target=LAYER;
	layer_name="SomaShoulderAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	col_name="SomaElbowAngle_Cur";
	net_target=LAYER;
	layer_name="SomaElbowAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[4] {
	col_name="MotorShoulderForce";
	net_target=LAYER;
	layer_name="MotorShoulderForce";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[5] {
	col_name="MotorElbowForce";
	net_target=LAYER;
	layer_name="MotorElbowForce";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[6] {
	col_name="VisHand_Pred";
	net_target=LAYER;
	layer_name="VisHand_Pred";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[7] {
	col_name="SomaShoulderAngle_Pred";
	net_target=LAYER;
	layer_name="SomaShoulderAngle_Pred";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[8] {
	col_name="SomaElbowAngle_Pred";
	net_target=LAYER;
	layer_name="SomaElbowAngle_Pred";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[9] {
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
     ProgVar @["LayerWriter_0"] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      pre_compile_code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=0;
      code_string="LayerWriter_0->CheckConfig(false)";
      pre_compile_code_string="LayerWriter_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      pre_compile_code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->ApplyInputData()";
      pre_compile_code_string="LayerWriter_0->ApplyInputData()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["ApplyInputs_RLModel"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
    };
    name="ApplyInputs_RLModel";
    short_nm="pplRLM";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      name="LayerWriter_0";
      data=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      network=$.projects["ve_arm"].networks["RLNet"]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	col_name="PVe";
	net_target=LAYER;
	layer_name="PVe";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	col_name="MotorElbowForce";
	net_target=LAYER;
	layer_name="MotorElbowForce";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=COMP;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	col_name="SomaElbowAngle_Cur";
	net_target=LAYER;
	layer_name="SomaElbowAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	col_name="SomaShoulderAngle_Cur";
	net_target=LAYER;
	layer_name="SomaShoulderAngle_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[4] {
	col_name="VisHand_Cur";
	net_target=LAYER;
	layer_name="VisHand_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[5] {
	col_name="VisTarget_Cur";
	net_target=LAYER;
	layer_name="VisTarget_Cur";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[6] {
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["RLNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["RLModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
     ProgVar @["LayerWriter_0"] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_RLModel"].objs["LayerWriter_0"]$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      pre_compile_code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_RLModel"].vars["LayerWriter_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=0;
      code_string="LayerWriter_0->CheckConfig(false)";
      pre_compile_code_string="LayerWriter_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_RLModel"].vars["LayerWriter_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      pre_compile_code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_RLModel"].vars["LayerWriter_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=0;
      code_string="LayerWriter_0->ApplyInputData()";
      pre_compile_code_string="LayerWriter_0->ApplyInputData()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["ApplyInputs_RLModel"].vars["LayerWriter_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrialMonitor"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
    };
    name="LeabraTrialMonitor";
    short_nm="TrialMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["phase_no"] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["minus_cycles"] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pvlv_pvi"] {
	name="pvlv_pvi";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="pvlv_pvi";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trg_dist"] {
	name="trg_dist";
	computed=0;
	object_type=ProgVar;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["trg_dist"]$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["ve_arm"].networks["FwdModelNet"]$;
      data=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=0;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      pre_compile_code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=0;
      code_string="trial_netmon->CheckConfig(false)";
      pre_compile_code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=0;
      code_string="trial_netmon->UpdateMonitors(true)";
      pre_compile_code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      pre_compile_code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      pre_compile_code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      pre_compile_code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      pre_compile_code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraEpochMonitor"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
    };
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_trg_dist"] {
	name="avg_trg_dist";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
	agg_col {
	 col_name="trg_dist";
	};
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["rew_dist_thr"] {
	name="rew_dist_thr";
	computed=0;
	object_type=ProgVar;
	object=$.projects["ve_arm"].programs.gp["RobotProgs"]["RLModelRew"].vars["rew_dist_thr"]$;
	variable="real_val";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="pvlv_pvi";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["RLNet"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["ve_arm"].networks["FwdModelNet"]$;
      data=$.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      pre_compile_code_string="epoch_timer = network.epoch_time";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=0;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      pre_compile_code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=0;
      code_string="epoch_netmon->CheckConfig(false)";
      pre_compile_code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=0;
      code_string="epoch_netmon->UpdateMonitors(true)";
      pre_compile_code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      pre_compile_code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      pre_compile_code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      pre_compile_code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      pre_compile_code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      pre_compile_code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      pre_compile_code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["SaveWeights"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].doc$$;
     };
    };
    name="SaveWeights";
    short_nm="SvWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["tag"] {
      name="tag";
      var_type=T_String;
      string_val=;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @["wts_subdir"] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @["fname"] {
      name="fname";
      var_type=T_String;
      string_val=;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @["epoch_str"] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["batch_str"] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["final_tag"] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=CAN_REVERT_TO_CODE;
      code_string="if(taMisc::dmem_proc > 0) return";
      pre_compile_code_string="if(taMisc::dmem_proc > 0) return";
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch_str = taMisc::LeadingZeros(network.batch, 2)";
      pre_compile_code_string="batch_str = taMisc::LeadingZeros(network.batch, 2)";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["batch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_str = taMisc::LeadingZeros(network.epoch, 4)";
      pre_compile_code_string="epoch_str = taMisc::LeadingZeros(network.epoch, 4)";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["epoch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="final_tag = tag + \".\" + batch_str + \"_\" + epoch_str";
      pre_compile_code_string="final_tag = tag + \".\" + batch_str + \"_\" + epoch_str";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["final_tag"]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="fname = network->GetFileNameFmProject(\".wts.gz\", final_tag, wts_subdir, false)";
      pre_compile_code_string="fname = network->GetFileNameFmProject(\".wts.gz\", final_tag, wts_subdir, false)";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["fname"]$$;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->SaveWeights(fname, Network::NET_FMT)";
      pre_compile_code_string="network->SaveWeights(fname, Network::NET_FMT)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp["LeabraAll_Test"] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   debug_mode=0;
   Program @["LeabraEpochTest"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].doc$$;
     };
    };
    name="LeabraEpochTest";
    short_nm="EpcTest";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @["data_loop_order"] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["ve_arm"].data.gp["OutputData"]["TestTrialOutputData"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=6;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      pre_compile_code_string="Net Counter Init: trial";
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      local_ctr_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      pre_compile_code_string="epoch_timer = network.epoch_time";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      pre_compile_code_string="Net Counter Init: trial";
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      local_ctr_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[1] {
      desc="set to testing mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TEST";
      pre_compile_code_string="network.train_mode = Network::TEST";
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[2] {
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      pre_compile_code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      pre_compile_code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[4] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      pre_compile_code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (SEQUENTIAL):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      pre_compile_code_string="Net Data Loop (SEQUENTIAL):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrialTest(network, input_data)";
	pre_compile_code_string="LeabraTrialTest(network, input_data)";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["input_data"]$;
      index_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_index"]$$;
      order_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_order"]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      pre_compile_code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	pre_compile_code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      pre_compile_code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[8] {
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      pre_compile_code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitorTest(network)";
      pre_compile_code_string="LeabraEpochMonitorTest(network)";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[10] {
      desc="set back to training mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TRAIN";
      pre_compile_code_string="network.train_mode = Network::TRAIN";
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrialTest"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].doc$$;
     };
    };
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      pre_compile_code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["qtr"] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      pre_compile_code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	pre_compile_code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      pre_compile_code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      pre_compile_code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      pre_compile_code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputsTest(network, input_data)";
      pre_compile_code_string="ApplyInputsTest(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      pre_compile_code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarterTest(network, input_data)";
	pre_compile_code_string="LeabraQuarterTest(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      pre_compile_code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitorTest(network)";
      pre_compile_code_string="LeabraTrialMonitorTest(network)";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      pre_compile_code_string="Net Update View";
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      update_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraQuarterTest"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].doc$$;
     };
    };
    name="LeabraQuarterTest";
    short_nm="QrtTst";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      pre_compile_code_string="Net Counter Init: cycle";
      network_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$$;
      local_ctr_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      pre_compile_code_string="LocalVars (2 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["cycle_max"] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cyc"] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      pre_compile_code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      pre_compile_code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="program_name()";
      pre_compile_code_string="program_name()";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="grab_camera_img";
	required=1;
	def_val=;
	prev_expr="input_data";
	expr {
	 expr=;
	};
       };
      };
      target=NULL;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      pre_compile_code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      pre_compile_code_string="cycle_max = network->CycleRunMax()";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].prog_code[0].local_vars["cycle_max"]$$;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      pre_compile_code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycleTest(network)";
	pre_compile_code_string="LeabraCycleTest(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	pre_compile_code_string="cycle = network.cycle";
	result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["cycle"]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      pre_compile_code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      pre_compile_code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      pre_compile_code_string="Net Update View";
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      update_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraCycleTest"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].doc$$;
     };
    };
    name="LeabraCycleTest";
    short_nm="CycTest";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      pre_compile_code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      pre_compile_code_string="Net Update View";
      network_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$;
      update_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["ApplyInputsTest"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].doc$$;
     };
    };
    name="ApplyInputsTest";
    short_nm="InTest";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      name="LayerWriter_0";
      data=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      network=$.projects["ve_arm"].networks["FwdModelNet"]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	col_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["InputData"]["FwdModelInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["LayerWriter_0"] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      pre_compile_code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->AutoConfig(true)";
      pre_compile_code_string="LayerWriter_0->AutoConfig(true)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr="true";
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->CheckConfig(false)";
      pre_compile_code_string="LayerWriter_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      pre_compile_code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->ApplyInputData()";
      pre_compile_code_string="LayerWriter_0->ApplyInputData()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrialMonitorTest"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].doc$$;
     };
    };
    name="LeabraTrialMonitorTest";
    short_nm="TrlMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["train_mode"] {
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group"] {
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["tick"] {
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["time"] {
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["output_name"] {
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["rt_cycles"] {
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["norm_err"] {
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_err"] {
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_sse"] {
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_norm_err"] {
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cos_err"] {
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_net_sd"] {
	name="lay_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["ve_arm"].networks["FwdModelNet"]$;
      data=$.projects["ve_arm"].data.gp["OutputData"]["TestTrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["OutputData"]["TestTrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      pre_compile_code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      pre_compile_code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      pre_compile_code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      pre_compile_code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      pre_compile_code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      pre_compile_code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      pre_compile_code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraEpochMonitorTest"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      name="DocLink";
      doc=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].doc$$;
     };
    };
    name="LeabraEpochMonitorTest";
    short_nm="EpcMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_cor"] {
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_err"] {
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_norm_err"] {
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_err"] {
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_sse"] {
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cnt_err"] {
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_cor"] {
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_err"] {
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_norm_err"] {
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_cos_err"] {
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_net_sd"] {
	name="avg_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["ve_arm"].networks["FwdModelNet"]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["ve_arm"].networks["FwdModelNet"]$;
      data=.projects["ve_arm"].data.gp["OutputData"]["TestEpochOutputData"]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["ve_arm"].data.gp["OutputData"]["TestEpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["ve_arm"].networks["FwdModelNet"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      pre_compile_code_string="epoch_timer = network.epoch_time";
      result_var=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      pre_compile_code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      pre_compile_code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      pre_compile_code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      pre_compile_code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      pre_compile_code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      pre_compile_code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      pre_compile_code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      pre_compile_code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      pre_compile_code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["ve_arm"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser3"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_147";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     name="view_win_lft";
     value 8 0=0.001352265;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     name="view_win_top";
     value 8 0=0.0617136;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     name="view_win_wd";
     value 8 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     name="view_win_ht";
     value 8 0=0.7998802;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAAB5wAAAfwAAAKMAf////8BAAAAAQA=";
     val_type_fixed=0;
    };
   };
   name="Browser3";
   m_data=.projects["ve_arm"]$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"ve_arm\"] - ve_arm.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_148";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["ve_arm"]$;
    };
    PanelViewer @["Editor"] {
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @["T3Frames"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_149";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="T3Frames";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["VEArmWorld"] {
       name="VEArmWorld";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=VEWorldView;
	 el_def=0;
	 VEWorldView @["VEEmerWorld_View"] {
	  name="VEEmerWorld_View";
	  m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"]$;
	  cur_font_size=12;
	  m_transform=NULL;
	  children {
	   name="children";
	   el_typ=VESpaceView;
	   el_def=0;
	   VESpaceView @["RoomSpace"] {
	    name="RoomSpace";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].spaces["RoomSpace"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    children {
	     name="T3DataView_List_1";
	     el_typ=T3DataView;
	     el_def=0;
	     VEStaticView @["Ground"] {
	      name="Ground";
	      m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].spaces["RoomSpace"].static_els["Ground"]$$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEStaticView @["BackWall"] {
	      name="BackWall";
	      m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].spaces["RoomSpace"].static_els["BackWall"]$$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	    };
	   };
	   VEObjectView @["Emer"] {
	    name="Emer";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    children {
	     name="T3DataView_List_1";
	     el_typ=T3DataView;
	     el_def=0;
	     VEBodyView @["Torso"] {
	      name="Torso";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Torso"]$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEBodyView @["Humerus"] {
	      name="Humerus";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Humerus"]$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEBodyView @["Ulna"] {
	      name="Ulna";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Ulna"]$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEBodyView @["Hand"] {
	      name="Hand";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Hand"]$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEBodyView @["Head"] {
	      name="Head";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Head"]$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEBodyView @["LeftEye"] {
	      name="LeftEye";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["LeftEye"]$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEBodyView @["RightEye"] {
	      name="RightEye";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["RightEye"]$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEBodyView @["Pectoralis"] {
	      name="Pectoralis";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Pectoralis"]$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEBodyView @["Deltoid"] {
	      name="Deltoid";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].bodies["Deltoid"]$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEJointView @["Shoulder"] {
	      name="Shoulder";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Shoulder"]$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEJointView @["Elbow"] {
	      name="Elbow";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Elbow"]$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEJointView @["Wrist"] {
	      name="Wrist";
	      m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["Wrist"]$$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEJointView @["LeftEyeJoint"] {
	      name="LeftEyeJoint";
	      m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["LeftEyeJoint"]$$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	     VEJointView @["RightEyeJoint"] {
	      name="RightEyeJoint";
	      m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Emer"].joints["RightEyeJoint"]$$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	    };
	   };
	   VEObjectView @["Target"] {
	    name="Target";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    children {
	     name="T3DataView_List_1";
	     el_typ=T3DataView;
	     el_def=0;
	     VEBodyView @["TargetBody"] {
	      name="TargetBody";
	      m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["VEEmerWorld"].objects["Target"].bodies["TargetBody"]$;
	      cur_font_size=12;
	      m_transform=NULL;
	     };
	    };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display_on=1;
	  drag_objs=0;
	  drag_size=0.1;
	  show_joints=0;
	 };
	 GraphTableView @["ArmOutputData_Graph"] {
	  name="ArmOutputData_Graph";
	  m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1: y=0.2: z=-1.2: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["Reach_Name"] {
	    name="Reach_Name";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Reach_Name"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Reach_No"] {
	    name="Reach_No";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Reach_No"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=28: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_x"] {
	    name="Hand_cur_pos_x";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_x"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-0.454538: fix_max=0: max=0.953167: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_y"] {
	    name="Hand_cur_pos_y";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_y"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_z"] {
	    name="Hand_cur_pos_z";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_z"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_x"] {
	    name="Target_cur_pos_x";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_x"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_y"] {
	    name="Target_cur_pos_y";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_y"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_z"] {
	    name="Target_cur_pos_z";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_z"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_x"] {
	    name="Hand_cur_lin_vel_x";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_x"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_y"] {
	    name="Hand_cur_lin_vel_y";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_y"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_z"] {
	    name="Hand_cur_lin_vel_z";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_z"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_pos"] {
	    name="Should_pos";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_pos"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_vel"] {
	    name="Should_vel";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_vel"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_force_in"] {
	    name="Should_force_in";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_force_in"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_pos"] {
	    name="Elbow_pos";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_pos"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_vel"] {
	    name="Elbow_vel";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_vel"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_force_in"] {
	    name="Elbow_force_in";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_force_in"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["n_steps"] {
	    name="n_steps";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["n_steps"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["angle_err"] {
	    name="angle_err";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["angle_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["trg_dist"] {
	    name="trg_dist";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["trg_dist"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1: y=0.2: z=-1.2: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=2019893349;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Target_cur_pos_x";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  tot_plots=6;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["ArmOutputData_Graph_plot_1"] {
	    name="ArmOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Target_cur_pos_y";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_plot_2"] {
	    name="ArmOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.2: fix_max=0: max=0.2: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_plot_3"] {
	    name="ArmOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_plot_4"] {
	    name="ArmOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_plot_5"] {
	    name="ArmOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_plot_6"] {
	    name="ArmOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["ArmOutputData_Graph_err_1"] {
	    name="ArmOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_err_2"] {
	    name="ArmOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_err_3"] {
	    name="ArmOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_err_4"] {
	    name="ArmOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_err_5"] {
	    name="ArmOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_err_6"] {
	    name="ArmOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Reach_No";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=1: fix_max=0: max=28: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @["ArmOutputData_Graph_2"] {
	  name="ArmOutputData_Graph_2";
	  m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-0.25: y=0.2: z=-1.2: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["Reach_Name"] {
	    name="Reach_Name";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Reach_Name"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Reach_No"] {
	    name="Reach_No";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Reach_No"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=28: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_x"] {
	    name="Hand_cur_pos_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_x"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_y"] {
	    name="Hand_cur_pos_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_y"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_z"] {
	    name="Hand_cur_pos_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_z"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_x"] {
	    name="Target_cur_pos_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_x"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_y"] {
	    name="Target_cur_pos_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_y"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_z"] {
	    name="Target_cur_pos_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_z"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_x"] {
	    name="Hand_cur_lin_vel_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_x"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_y"] {
	    name="Hand_cur_lin_vel_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_y"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_z"] {
	    name="Hand_cur_lin_vel_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_z"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_pos"] {
	    name="Should_pos";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_pos"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_vel"] {
	    name="Should_vel";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_vel"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_force_in"] {
	    name="Should_force_in";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_force_in"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_pos"] {
	    name="Elbow_pos";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_pos"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_vel"] {
	    name="Elbow_vel";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_vel"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_force_in"] {
	    name="Elbow_force_in";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_force_in"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["n_steps"] {
	    name="n_steps";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["n_steps"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["angle_err"] {
	    name="angle_err";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["angle_err"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["trg_dist"] {
	    name="trg_dist";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["trg_dist"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-0.25: y=0.2: z=-1.2: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=1701539700;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Hand_cur_pos_x";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=1: min=-0.5: fix_max=1: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  tot_plots=6;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["ArmOutputData_Graph_2_plot_1"] {
	    name="ArmOutputData_Graph_2_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hand_cur_pos_y";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_2_plot_2"] {
	    name="ArmOutputData_Graph_2_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_2_plot_3"] {
	    name="ArmOutputData_Graph_2_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_2_plot_4"] {
	    name="ArmOutputData_Graph_2_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_2_plot_5"] {
	    name="ArmOutputData_Graph_2_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_2_plot_6"] {
	    name="ArmOutputData_Graph_2_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["ArmOutputData_Graph_2_err_1"] {
	    name="ArmOutputData_Graph_2_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_2_err_2"] {
	    name="ArmOutputData_Graph_2_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_2_err_3"] {
	    name="ArmOutputData_Graph_2_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_2_err_4"] {
	    name="ArmOutputData_Graph_2_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_2_err_5"] {
	    name="ArmOutputData_Graph_2_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_2_err_6"] {
	    name="ArmOutputData_Graph_2_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Reach_No";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=1: fix_max=0: max=28: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @["ArmOutputData_Graph_3"] {
	  name="ArmOutputData_Graph_3";
	  m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1.00579: y=0.952894: z=-1.2: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["Reach_Name"] {
	    name="Reach_Name";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Reach_Name"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Reach_No"] {
	    name="Reach_No";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Reach_No"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=2: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_x"] {
	    name="Hand_cur_pos_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_x"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_y"] {
	    name="Hand_cur_pos_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_y"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_z"] {
	    name="Hand_cur_pos_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_pos_z"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_x"] {
	    name="Target_cur_pos_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_x"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_y"] {
	    name="Target_cur_pos_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_y"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_z"] {
	    name="Target_cur_pos_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Target_cur_pos_z"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_x"] {
	    name="Hand_cur_lin_vel_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_x"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=57: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_y"] {
	    name="Hand_cur_lin_vel_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_y"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_z"] {
	    name="Hand_cur_lin_vel_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Hand_cur_lin_vel_z"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_pos"] {
	    name="Should_pos";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_pos"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_vel"] {
	    name="Should_vel";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_vel"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_force_in"] {
	    name="Should_force_in";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Should_force_in"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_pos"] {
	    name="Elbow_pos";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_pos"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_vel"] {
	    name="Elbow_vel";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_vel"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_force_in"] {
	    name="Elbow_force_in";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["Elbow_force_in"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["n_steps"] {
	    name="n_steps";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["n_steps"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["angle_err"] {
	    name="angle_err";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["angle_err"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["trg_dist"] {
	    name="trg_dist";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ArmOutputData"].data["trg_dist"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-1.00579: y=0.952894: z=-1.2: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=1635149161;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Hand_cur_lin_vel_x";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=-1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=1;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  tot_plots=6;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["ArmOutputData_Graph_3_plot_1"] {
	    name="ArmOutputData_Graph_3_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hand_cur_lin_vel_y";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_3_plot_2"] {
	    name="ArmOutputData_Graph_3_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_3_plot_3"] {
	    name="ArmOutputData_Graph_3_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_3_plot_4"] {
	    name="ArmOutputData_Graph_3_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_3_plot_5"] {
	    name="ArmOutputData_Graph_3_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_3_plot_6"] {
	    name="ArmOutputData_Graph_3_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["ArmOutputData_Graph_3_err_1"] {
	    name="ArmOutputData_Graph_3_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_3_err_2"] {
	    name="ArmOutputData_Graph_3_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_3_err_3"] {
	    name="ArmOutputData_Graph_3_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_3_err_4"] {
	    name="ArmOutputData_Graph_3_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_3_err_5"] {
	    name="ArmOutputData_Graph_3_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ArmOutputData_Graph_3_err_6"] {
	    name="ArmOutputData_Graph_3_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Reach_No";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=1: fix_max=0: max=2: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @["ReachOutputData_Graph"] {
	  name="ReachOutputData_Graph";
	  m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.5: y=0.2: z=-1.2: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["time"] {
	    name="time";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["time"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_x"] {
	    name="Hand_cur_pos_x";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_pos_x"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_y"] {
	    name="Hand_cur_pos_y";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_pos_y"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_z"] {
	    name="Hand_cur_pos_z";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_pos_z"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_x"] {
	    name="Target_cur_pos_x";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Target_cur_pos_x"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_y"] {
	    name="Target_cur_pos_y";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Target_cur_pos_y"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_z"] {
	    name="Target_cur_pos_z";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Target_cur_pos_z"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_x"] {
	    name="Hand_cur_lin_vel_x";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_lin_vel_x"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_y"] {
	    name="Hand_cur_lin_vel_y";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_lin_vel_y"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_z"] {
	    name="Hand_cur_lin_vel_z";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_lin_vel_z"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_pos"] {
	    name="Should_pos";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_pos"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_vel"] {
	    name="Should_vel";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_vel"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_len"] {
	    name="Should_flexor_len";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_len"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_dlen"] {
	    name="Should_flexor_dlen";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_dlen"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_act"] {
	    name="Should_flexor_act";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_act"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_m_act_force"] {
	    name="Should_flexor_m_act_force";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_m_act_force"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_m_force"] {
	    name="Should_flexor_m_force";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_m_force"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_force"] {
	    name="Should_flexor_force";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_force"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_len"] {
	    name="Should_extensor_len";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_len"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_dlen"] {
	    name="Should_extensor_dlen";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_dlen"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_act"] {
	    name="Should_extensor_act";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_act"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_m_act_force"] {
	    name="Should_extensor_m_act_force";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_m_act_force"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_m_force"] {
	    name="Should_extensor_m_force";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_m_force"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_force"] {
	    name="Should_extensor_force";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_force"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["should_cur_trg"] {
	    name="should_cur_trg";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["should_cur_trg"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_pos"] {
	    name="Elbow_pos";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Elbow_pos"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_vel"] {
	    name="Elbow_vel";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Elbow_vel"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_force_in"] {
	    name="Elbow_force_in";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Elbow_force_in"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["elbow_cur_trg"] {
	    name="elbow_cur_trg";
	    m_data=.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["elbow_cur_trg"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.5: y=0.2: z=-1.2: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=1869488211;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=10;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="time";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  tot_plots=6;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["ReachOutputData_Graph_plot_1"] {
	    name="ReachOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Elbow_vel";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_plot_2"] {
	    name="ReachOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_plot_3"] {
	    name="ReachOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_plot_4"] {
	    name="ReachOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_plot_5"] {
	    name="ReachOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_plot_6"] {
	    name="ReachOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["ReachOutputData_Graph_err_1"] {
	    name="ReachOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_err_2"] {
	    name="ReachOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_err_3"] {
	    name="ReachOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_err_4"] {
	    name="ReachOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_err_5"] {
	    name="ReachOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_err_6"] {
	    name="ReachOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @["ReachOutputData_Graph_5"] {
	  name="ReachOutputData_Graph_5";
	  m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.4984179: y=0.9474853: z=-1.2: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["time"] {
	    name="time";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["time"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_x"] {
	    name="Hand_cur_pos_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_pos_x"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_y"] {
	    name="Hand_cur_pos_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_pos_y"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_pos_z"] {
	    name="Hand_cur_pos_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_pos_z"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_x"] {
	    name="Target_cur_pos_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Target_cur_pos_x"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_y"] {
	    name="Target_cur_pos_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Target_cur_pos_y"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Target_cur_pos_z"] {
	    name="Target_cur_pos_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Target_cur_pos_z"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_x"] {
	    name="Hand_cur_lin_vel_x";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_lin_vel_x"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_y"] {
	    name="Hand_cur_lin_vel_y";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_lin_vel_y"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hand_cur_lin_vel_z"] {
	    name="Hand_cur_lin_vel_z";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Hand_cur_lin_vel_z"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_pos"] {
	    name="Should_pos";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_pos"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_vel"] {
	    name="Should_vel";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_vel"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_len"] {
	    name="Should_flexor_len";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_len"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_dlen"] {
	    name="Should_flexor_dlen";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_dlen"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_act"] {
	    name="Should_flexor_act";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_act"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_m_act_force"] {
	    name="Should_flexor_m_act_force";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_m_act_force"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_m_force"] {
	    name="Should_flexor_m_force";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_m_force"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_flexor_force"] {
	    name="Should_flexor_force";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_flexor_force"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_len"] {
	    name="Should_extensor_len";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_len"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_dlen"] {
	    name="Should_extensor_dlen";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_dlen"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_act"] {
	    name="Should_extensor_act";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_act"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_m_act_force"] {
	    name="Should_extensor_m_act_force";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_m_act_force"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_m_force"] {
	    name="Should_extensor_m_force";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_m_force"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Should_extensor_force"] {
	    name="Should_extensor_force";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Should_extensor_force"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["should_cur_trg"] {
	    name="should_cur_trg";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["should_cur_trg"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_pos"] {
	    name="Elbow_pos";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Elbow_pos"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_vel"] {
	    name="Elbow_vel";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Elbow_vel"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Elbow_force_in"] {
	    name="Elbow_force_in";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["Elbow_force_in"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["elbow_cur_trg"] {
	    name="elbow_cur_trg";
	    m_data=$.projects["ve_arm"].programs.gp["RobotProgs"]["EmerRobot"].objs["ReachOutputData"].data["elbow_cur_trg"]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.4984179: y=0.9474853: z=-1.2: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=1847618933;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=1;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=10;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Hand_cur_pos_x";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  tot_plots=6;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["ReachOutputData_Graph_5_plot_1"] {
	    name="ReachOutputData_Graph_5_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hand_cur_pos_z";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_5_plot_2"] {
	    name="ReachOutputData_Graph_5_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_5_plot_3"] {
	    name="ReachOutputData_Graph_5_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_5_plot_4"] {
	    name="ReachOutputData_Graph_5_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_5_plot_5"] {
	    name="ReachOutputData_Graph_5_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_5_plot_6"] {
	    name="ReachOutputData_Graph_5_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["ReachOutputData_Graph_5_err_1"] {
	    name="ReachOutputData_Graph_5_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_5_err_2"] {
	    name="ReachOutputData_Graph_5_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_5_err_3"] {
	    name="ReachOutputData_Graph_5_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_5_err_4"] {
	    name="ReachOutputData_Graph_5_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_5_err_5"] {
	    name="ReachOutputData_Graph_5_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["ReachOutputData_Graph_5_err_6"] {
	    name="ReachOutputData_Graph_5_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="time";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.07999998: y=1.3774: z=2.003552: };
	 orient {x=-1.000001: y=0: z=0: rot=0.3819996: };
	 focal_dist=2.161878;
	};
	T3SavedView @["TopDown"] {
	 name="TopDown";
	 view_saved=1;
	 pos {x=0.2114639: y=2.290442: z=0.2542374: };
	 orient {x=-1: y=0: z=0: rot=1.524: };
	 focal_dist=1.611198;
	};
	T3SavedView @["Side"] {
	 name="Side";
	 view_saved=1;
	 pos {x=2.191079: y=0.830333: z=0.3848871: };
	 orient {x=-0.03250458: y=0.993804: z=0.1062884: rot=1.400158: };
	 focal_dist=2.161878;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["FwdModelNet"] {
       name="FwdModelNet";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_FwdModelNet_root_view_children_0"] {
	  name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_FwdModelNet_root_view_children_0";
	  m_data=$.projects["ve_arm"].networks["FwdModelNet"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ act;	  };
	  hot_vars{ targ;ext;act;net;bias_wt;bias_dwt;act_eq;act_m;act_p;act_dif;avg_m;avg_l;act_avg;r.wt;r.wt*act;s.wt;r.dwt;s.dwt;	  };
	  unit_src_path=".layers[10].units[0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=52: y=10: z=2.333333: };
	  max_size2d {x=30: y=52: z=1: };
	  eff_max_size {x=52: y=10: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.4;
	   unit_trans=0.4;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    var_name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    var_name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    var_name="act_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[6] {
	    var_name="bias_wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ VisTarget_Cur=0;VisHand_Cur=0;SomaShoulderAngle_Cur=0;SomaElbowAngle_Cur=0;MotorShoulderForce=0;MotorElbowForce=0;VisFwdHidden=0;SomaFwdHidden=0;VisHand_Pred=0;SomaShoulderAngle_Pred=0;SomaElbowAngle_Pred=0;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.3359568: z=1.734998: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.138079;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["EpochOutputData"] {
       name="EpochOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0"] {
	  name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0";
	  m_data=$.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["batch"] {
	    name="batch";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["batch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["epoch"] {
	    name="epoch";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["epoch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_sse"] {
	    name="avg_sse";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["avg_sse"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["cnt_err"] {
	    name="cnt_err";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["cnt_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_trg_dist"] {
	    name="avg_trg_dist";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["avg_trg_dist"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_ext_rew"] {
	    name="avg_ext_rew";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["avg_ext_rew"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["rew_dist_thr"] {
	    name="rew_dist_thr";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["rew_dist_thr"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_cycles"] {
	    name="avg_cycles";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["avg_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["epoch_time_tot"] {
	    name="epoch_time_tot";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_tot"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["epoch_time_usr"] {
	    name="epoch_time_usr";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_usr"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=500;
	  view_range {min=0: max=8: };
	  page_rows=1229869633;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=8: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  tot_plots=6;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_1"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_2"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_3"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_4"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_5"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_6"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_1"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_2"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_3"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_4"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_5"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_6"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_EpochOutputData_root_view_children_0_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.516175: y=0.4449999: z=1.729345: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.741845;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["RLNet"] {
       name="RLNet";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_RLNet_root_view_children_0"] {
	  name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_RLNet_root_view_children_0";
	  m_data=$.projects["ve_arm"].networks["RLNet"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.7: y=0.7000002: z=0.7000002: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=0.4590484: y=-0.5233579: z=-0.4999987: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ 	  };
	  hot_vars{ 	  };
	  unit_src_path=;
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=38: y=10: z=2.333333: };
	  max_size2d {x=12: y=85: z=1: };
	  eff_max_size {x=38: y=10: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.001;
	   prjn_trans=0.5;
	   lay_trans=0.4;
	   unit_trans=0.4;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="dav";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="act_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ RewTarg=0;PVe=0;PVr=0;PVi=0;LVe=0;LVi=0;NV=0;DA=0;MotorElbowForce=0;MotorShoulderForce=0;RLHidden=0;SomaElbowAngle_Cur=0;SomaElbowAngle_Pred=0;SomaShoulderAngle_Cur=0;SomaShoulderAngle_Pred=0;VisHand_Cur=0;VisHand_Pred=0;VisTarget_Cur=0;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.4897743: y=0.6755549: z=1.577252: };
	 orient {x=-1.00002: y=0: z=0: rot=0.1299974: };
	 focal_dist=2.016901;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["TrialOutputData"] {
       name="TrialOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0"] {
	  name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0";
	  m_data=$.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["batch"] {
	    name="batch";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["batch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["epoch"] {
	    name="epoch";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["epoch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["trial"] {
	    name="trial";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["trial"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["trial_name"] {
	    name="trial_name";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["trial_name"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["group_name"] {
	    name="group_name";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["group_name"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["VisFwd_phase_no"] {
	    name="VisFwd_phase_no";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["VisFwd_phase_no"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["SomaFw_phase_no"] {
	    name="SomaFw_phase_no";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["SomaFw_phase_no"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["VisHan_phase_no"] {
	    name="VisHan_phase_no";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["VisHan_phase_no"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["SomaSh_phase_no"] {
	    name="SomaSh_phase_no";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["SomaSh_phase_no"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["SomaEl_phase_no"] {
	    name="SomaEl_phase_no";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["SomaEl_phase_no"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["VisFwd_minus_cycles"] {
	    name="VisFwd_minus_cycles";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["VisFwd_minus_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["SomaFw_minus_cycles"] {
	    name="SomaFw_minus_cycles";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["SomaFw_minus_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["VisHan_minus_cycles"] {
	    name="VisHan_minus_cycles";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["VisHan_minus_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["SomaSh_minus_cycles"] {
	    name="SomaSh_minus_cycles";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["SomaSh_minus_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["SomaEl_minus_cycles"] {
	    name="SomaEl_minus_cycles";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["SomaEl_minus_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["sse"] {
	    name="sse";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["sse"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["ext_rew"] {
	    name="ext_rew";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["ext_rew"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["VisFwd_pvlv_pvi"] {
	    name="VisFwd_pvlv_pvi";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["VisFwd_pvlv_pvi"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["SomaFw_pvlv_pvi"] {
	    name="SomaFw_pvlv_pvi";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["SomaFw_pvlv_pvi"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["VisHan_pvlv_pvi"] {
	    name="VisHan_pvlv_pvi";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["VisHan_pvlv_pvi"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["SomaSh_pvlv_pvi"] {
	    name="SomaSh_pvlv_pvi";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["SomaSh_pvlv_pvi"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["SomaEl_pvlv_pvi"] {
	    name="SomaEl_pvlv_pvi";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["SomaEl_pvlv_pvi"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["trg_dist"] {
	    name="trg_dist";
	    m_data=.projects["ve_arm"].data.gp["OutputData"]["TrialOutputData"].data["trg_dist"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="trial";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="trial";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=5: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  tot_plots=6;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_1"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_2"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_3"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_4"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_5"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_6"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_1"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_2"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_3"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_4"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_5"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_6"] {
	    name="projects_EmerRobot_Arm_viewers_Browser3_frames_T3Frames_frames_TrialOutputData_root_view_children_0_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.4275: y=0.4449999: z=1.624621: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.637121;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_150";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       name="view_win_lft";
       value 8 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       name="view_win_top";
       value 8 0=0.005991612;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       name="view_win_wd";
       value 8 0=0.02772143;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       name="view_win_ht";
       value 8 0=0.7549431;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc="Project updated on wiki: emergent changes: docs";
 tree_state{ .;.docs;.wizards;.ctrl_panels;.param_sets;.data;.data.gp[0];.data.gp[1];.data.gp[2];.programs;.programs.gp[0];.programs.gp[1];.programs.gp[2];.viewers[0];.viewers[0].frames[2];.networks;.networks[0];.networks[0].specs;.networks[0].specs[1];.networks[0].layers;.networks[0].layers[8];.networks[0].layers[8].projections;.networks[1];.networks[1].specs;.networks[1].specs.gp[0];.networks[1].specs.gp[1];.networks[1].specs.gp[2];.networks[1].specs.gp[3];.networks[1].layers; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @["FwdModelNet"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="FwdModelNet";
   desc=;
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_spec {type=LeabraBiasSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"].children["LeabraBiasSpec_4"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.5: gain=100: nvar=0.005: };
     act_misc {rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0.3;
      t_r=3;
      clamp_max_p=0.12;
      clamp_type=REGULAR;
      eff_spk_thr=0.5;
     };
     opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=2: range=2: scale=0.5: };
     init {v_m=0.4: act=0: netin=0: };
     dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
     avg_l {init=0.4: max=1.5: min=0.2: tau=10: lrn_max=0.05: lrn_min=0.005: dt=0.1: lrn_fact=0.03461539: };
     avg_l_2 {err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: };
     adapt_leak {
      on=0;
      tau=100;
      hi_thr=1.2;
      lo_thr=0.4;
      min_bwt=0;
      max_bwt=0.2;
      dt=0.01;
      mid_thr=0.8;
     };
     g_bar {e=1: l=0.1: i=1: };
     e_rev {e=1: l=0.3: i=0.25: };
     adapt {
      on=0;
      tau=144;
      vm_gain=0.04;
      spike_gain=0.00805;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {
      on=0;
      delay=4;
     };
     deep_raw_qtr=Q4;
     deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_trace=0: mod_range=0.2: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
     noise_sched {
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraLayerSpec @["HiddenLayer"] {
     name="HiddenLayer";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @["Input_Output"] {
       name="Input_Output";
       is_used=0;
       desc=;
       unique{ lay_inhib;kwta;       };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
       lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       lay_lrate=1;
       cos_diff {
	avg_tau=100;
	lrate_mod=0;
	lrmod_fm_trc=0;
	lrmod_z_thr=-1.5;
	set_net_unlrn=0;
	avg_dt=0.01;
	avg_dt_c=0.99;
       };
       lstats {
	hog_thr=0.3;
	dead_thr=0.01;
       };
      };
     };
     lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lay_lrate=1;
     cos_diff {
      avg_tau=100;
      lrate_mod=0;
      lrmod_fm_trc=0;
      lrmod_z_thr=-1.5;
      set_net_unlrn=0;
      avg_dt=0.01;
      avg_dt_c=0.99;
     };
     lstats {
      hog_thr=0.3;
      dead_thr=0.01;
     };
    };
    FullPrjnSpec @["FullPrjnSpec_2"] {
     name="FullPrjnSpec_2";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
    };
    LeabraConSpec @["LeabraConSpec_4"] {
     name="LeabraConSpec_4";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @["LeabraBiasSpec_4"] {
       name="LeabraBiasSpec_4";
       is_used=1;
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.02;
       use_lrate_sched=1;
       cur_lrate=0.02;
       lrs_mult=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1.25: };
       wt_bal {
	on=0;
	trg=0.3;
	thr=0.1;
	gain=2;
	avg_updt=10;
	hi_thr=0.4;
	lo_thr=0.2;
       };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       dwt_thresh=0.1;
      };
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.02;
     use_lrate_sched=1;
     cur_lrate=0.02;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     use_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: };
     wt_bal {
      on=0;
      trg=0.3;
      thr=0.1;
      gain=2;
      avg_updt=10;
      hi_thr=0.4;
      lo_thr=0.2;
     };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
    };
    ScalarValLayerSpec @["NormScalarVal"] {
     name="NormScalarVal";
     is_used=1;
     desc=;
     unique{ kwta;inhib_group;lay_inhib;     };
     children {
      name="children";
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=2.2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2.2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lay_lrate=1;
     cos_diff {
      avg_tau=100;
      lrate_mod=0;
      lrmod_fm_trc=0;
      lrmod_z_thr=-1.5;
      set_net_unlrn=0;
      avg_dt=0.01;
      avg_dt_c=0.99;
     };
     lstats {
      hog_thr=0.3;
      dead_thr=0.01;
     };
     scalar {rep=GAUSSIAN: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     avg_act_range {min=0.1: max=0.9: range=0.8: scale=1.25: };
     val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    ScalarValLayerSpec @["ForceScalarVal"] {
     name="ForceScalarVal";
     is_used=0;
     desc=;
     unique{ kwta;inhib_group;lay_inhib;     };
     children {
      name="children";
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=2.2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2.2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lay_lrate=1;
     cos_diff {
      avg_tau=100;
      lrate_mod=0;
      lrmod_fm_trc=0;
      lrmod_z_thr=-1.5;
      set_net_unlrn=0;
      avg_dt=0.01;
      avg_dt_c=0.99;
     };
     lstats {
      hog_thr=0.3;
      dead_thr=0.01;
     };
     scalar {rep=GAUSSIAN: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     avg_act_range {min=0.1: max=0.9: range=0.8: scale=1.25: };
     val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    TwoDValLayerSpec @["VisTwoDVal"] {
     name="VisTwoDVal";
     is_used=1;
     desc=;
     unique{ kwta;inhib_group;lay_inhib;     };
     children {
      name="children";
      el_typ=TwoDValLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lay_lrate=1;
     cos_diff {
      avg_tau=100;
      lrate_mod=0;
      lrmod_fm_trc=0;
      lrmod_z_thr=-1.5;
      set_net_unlrn=0;
      avg_dt=0.01;
      avg_dt_c=0.99;
     };
     lstats {
      hog_thr=0.3;
      dead_thr=0.01;
     };
     twod {rep=GAUSSIAN: n_vals=1: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: mn_dst=0.5: clip_val=1: };
     x_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     y_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_gain=1: wt=NO_WT: wt_gain=1: x_val=0: y_val=0: };
     x_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
     y_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
   };
   param_seqs {
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=52: y=10: z=3: };
    max_disp_size2d {x=30: y=52: };
    TwoDValLeabraLayer @["VisTarget_Cur"] {
     name="VisTarget_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=11: y=10: n_not_xy=0: n=110: };
     disp_geom {x=11: y=10: n_not_xy=0: n=110: };
     scaled_disp_geom {x=11: y=10: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$$: };
     dist {
      fm_input=0;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=TwoDValLayerSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["VisTwoDVal"]$$: };
     adapt_gi=1;
     twod_vals {
      name="twod_vals";
     [2 11 1 1 1] 0.63481128;0.91167396;0;0;0.6293574;0.91346627;0.6293574;0.91346627;0.6293574;0.91346627;
0;0;0;0;0;0;0;0;0;0;
0;0;     };
    };
    TwoDValLeabraLayer @["VisHand_Cur"] {
     name="VisHand_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=13: y=0: z=0: };
     pos_abs {x=13: y=0: z=0: };
     pos2d {x=0: y=12: };
     pos2d_abs {x=0: y=12: };
     disp_scale=1;
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=11: y=10: n_not_xy=0: n=110: };
     disp_geom {x=11: y=10: n_not_xy=0: n=110: };
     scaled_disp_geom {x=11: y=10: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=0;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=TwoDValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["VisTwoDVal"]$: };
     adapt_gi=1;
     twod_vals {
      name="twod_vals";
     [2 11 1 1 1] 0.97379756;0.19044572;0;0;0.98123085;0.19955169;0.98123085;0.19955169;0.98123085;0.19955169;
0;0;0;0;0;0;0;0;0;0;
0;0;     };
    };
    LeabraLayer @["SomaShoulderAngle_Cur"] {
     name="SomaShoulderAngle_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=26: y=0: z=0: };
     pos_abs {x=26: y=0: z=0: };
     pos2d {x=0: y=24: };
     pos2d_abs {x=0: y=24: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"].projections["Fm_SomaShoulderAngle_Cur"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=0;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";
"1.3";"1.5";     };
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=ScalarValLayerSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["NormScalarVal"]$$: };
     adapt_gi=1;
    };
    LeabraLayer @["SomaElbowAngle_Cur"] {
     name="SomaElbowAngle_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=26: y=3: z=0: };
     pos_abs {x=26: y=3: z=0: };
     pos2d {x=0: y=27: };
     pos2d_abs {x=0: y=27: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"].projections["Fm_SomaElbowAngle_Cur"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=0;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";
"1.3";"1.5";     };
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["NormScalarVal"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["MotorShoulderForce"] {
     name="MotorShoulderForce";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=40: y=0: z=0: };
     pos_abs {x=40: y=0: z=0: };
     pos2d {x=0: y=30: };
     pos2d_abs {x=0: y=30: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=2;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["VisFwdHidden"].projections["Fm_MotorShoulderForce"];
      Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"].projections["Fm_MotorShoulderForce"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=0;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [12 1] "val";"-1.5";"-1.3";"-1.1";"-0.9";"-0.7";"-0.5";"-0.3";"-0.1";"0.1";
"0.3";"0.5";     };
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["NormScalarVal"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["MotorElbowForce"] {
     name="MotorElbowForce";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=40: y=3: z=0: };
     pos_abs {x=40: y=3: z=0: };
     pos2d {x=0: y=33: };
     pos2d_abs {x=0: y=33: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=2;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["VisFwdHidden"].projections["Fm_MotorElbowForce"];
      Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"].projections["Fm_MotorElbowForce"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=0;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [12 1] "val";"-1.5";"-1.3";"-1.1";"-0.9";"-0.7";"-0.5";"-0.3";"-0.1";"0.1";
"0.3";"0.5";     };
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["NormScalarVal"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["VisFwdHidden"] {
     name="VisFwdHidden";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=15: y=2: z=1: };
     pos_abs {x=15: y=2: z=1: };
     pos2d {x=0: y=36: };
     pos2d_abs {x=0: y=36: };
     disp_scale=1;
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=7: y=7: n_not_xy=0: n=49: };
     disp_geom {x=7: y=7: n_not_xy=0: n=49: };
     scaled_disp_geom {x=7: y=7: n_not_xy=0: n=1: };
     n_recv_prjns=2;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_MotorShoulderForce"] {
       name="Fm_MotorShoulderForce";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["MotorShoulderForce"]$$;
       spec {type=FullPrjnSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_MotorElbowForce"] {
       name="Fm_MotorElbowForce";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["MotorElbowForce"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["VisHand_Pred"].projections["Fm_VisFwdHidden"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=1;
      fm_output=1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [7 7] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;     };
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=LeabraLayerSpec: spec=.projects["ve_arm"].networks["FwdModelNet"].specs["HiddenLayer"]$$: };
     adapt_gi=1;
    };
    LeabraLayer @["SomaFwdHidden"] {
     name="SomaFwdHidden";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=26: y=2: z=1: };
     pos_abs {x=26: y=2: z=1: };
     pos2d {x=9: y=36: };
     pos2d_abs {x=9: y=36: };
     disp_scale=1;
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=7: y=7: n_not_xy=0: n=49: };
     disp_geom {x=7: y=7: n_not_xy=0: n=49: };
     scaled_disp_geom {x=7: y=7: n_not_xy=0: n=1: };
     n_recv_prjns=6;
     n_send_prjns=2;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["SomaShoulderAngle_Cur"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["SomaElbowAngle_Cur"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_MotorShoulderForce"] {
       name="Fm_MotorShoulderForce";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["FwdModelNet"].layers["MotorShoulderForce"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=2;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_MotorElbowForce"] {
       name="Fm_MotorElbowForce";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["FwdModelNet"].layers["MotorElbowForce"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=3;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Pred"] {
       name="Fm_SomaShoulderAngle_Pred";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["SomaShoulderAngle_Pred"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Pred"] {
       name="Fm_SomaElbowAngle_Pred";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["SomaElbowAngle_Pred"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=5;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaShoulderAngle_Pred"].projections["Fm_SomaFwdHidden"];
      Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaElbowAngle_Pred"].projections["Fm_SomaFwdHidden"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=1;
      fm_output=1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [7 7] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;     };
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=LeabraLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["HiddenLayer"]$: };
     adapt_gi=1;
    };
    TwoDValLeabraLayer @["VisHand_Pred"] {
     name="VisHand_Pred";
     desc=;
     flags=0;
     layer_type=TARGET;
     pos {x=12: y=0: z=2: };
     pos_abs {x=12: y=0: z=2: };
     pos2d {x=18: y=36: };
     pos2d_abs {x=18: y=36: };
     disp_scale=1;
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=11: y=10: n_not_xy=0: n=110: };
     disp_geom {x=11: y=10: n_not_xy=0: n=110: };
     scaled_disp_geom {x=11: y=10: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_VisFwdHidden"] {
       name="Fm_VisFwdHidden";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["VisFwdHidden"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=2;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=TwoDValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["VisTwoDVal"]$: };
     adapt_gi=1;
     twod_vals {
      name="twod_vals";
     [2 11 1 1 1] 0.85874432;0.49126884;0.85874432;0.49126884;0.85952514;0.49131632;0.58449471;0.46173188;0.85952514;0.49131632;
0.27503043;0.029584438;0;0;0;0;0;0;0;0;
0;0;     };
    };
    LeabraLayer @["SomaShoulderAngle_Pred"] {
     name="SomaShoulderAngle_Pred";
     desc=;
     flags=0;
     layer_type=TARGET;
     pos {x=25: y=0: z=2: };
     pos_abs {x=25: y=0: z=2: };
     pos2d {x=18: y=48: };
     pos2d_abs {x=18: y=48: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_SomaFwdHidden"] {
       name="Fm_SomaFwdHidden";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"].projections["Fm_SomaShoulderAngle_Pred"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=2;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";
"1.3";"1.5";     };
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["NormScalarVal"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["SomaElbowAngle_Pred"] {
     name="SomaElbowAngle_Pred";
     desc=;
     flags=0;
     layer_type=TARGET;
     pos {x=25: y=3: z=2: };
     pos_abs {x=25: y=3: z=2: };
     pos2d {x=18: y=51: };
     pos2d_abs {x=18: y=51: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_SomaFwdHidden"] {
       name="Fm_SomaFwdHidden";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["FwdModelNet"].layers["SomaFwdHidden"].projections["Fm_SomaElbowAngle_Pred"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=2;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [12 1] "val";"-0.5";"-0.3";"-0.1";"0.1";"0.3";"0.5";"0.7";"0.9";"1.1";
"1.3";"1.5";     };
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["FwdModelNet"].specs["NormScalarVal"]$: };
     adapt_gi=1;
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    run_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    sync_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    total_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=0;
   };
   cuda {
    sync_units=0;
    sync_cons=0;
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
    n_threads=32;
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=501;
   n_cons=11270;
   max_prjns=6;
   max_disp_size {x=52: y=10: z=3: };
   max_disp_size2d {x=30: y=52: };
   times {
    quarter=25;
    gate_cyc=18;
    deep_cyc=5;
    time_inc=0.001;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    agg_unlearnable=0;
   };
   net_misc {
    spike=0;
    deep=1;
    bias_learn=1;
    trial_decay=1;
    diff_scale_p=0;
    diff_scale_q1=0;
    wt_bal=0;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   deep {
    on=0;
    ctxt=0;
    raw_net=0;
    mod_net=0;
    raw_qtr=0;
   };
   rel_netin {
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
  LeabraNetwork @["RLNet"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="RLNet";
   desc="Model that learns from reinforcement learning (PVLV)";
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
      LeabraUnitSpec @["MotorUnits"] {
       name="MotorUnits";
       is_used=1;
       desc=;
       unique{        };
       children {
	name="children";
	el_typ=LeabraUnitSpec;
	el_def=0;
       };
       act_range {min=0: max=1: range=1: scale=1: };
       bias_spec {type=LeabraBiasSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"].children["LeabraBiasSpec_4"]$$: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {thr=0.25: gain=600: nvar=0.005: };
       act_misc {rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
       spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_tau=50: eq_dt=0.02: };
       spike_misc {
	ex=0;
	exp_slope=0.02;
	spk_thr=1.2;
	vm_r=0;
	t_r=6;
	clamp_max_p=0.11;
	clamp_type=REGULAR;
	eff_spk_thr=0.25;
       };
       opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=1: range=1: scale=1: };
       init {v_m=0.4: act=0: netin=0: };
       dt {integ=1: vm_tau=5: net_tau=1.428571: fast_cyc=0: vm_dt=0.2: net_dt=0.7000002: };
       act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
       avg_l {init=0.4: max=1.5: min=0.2: tau=10: lrn_max=0.05: lrn_min=0.005: dt=0.1: lrn_fact=0.03461539: };
       avg_l_2 {err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: };
       adapt_leak {
	on=0;
	tau=100;
	hi_thr=1.2;
	lo_thr=0.4;
	min_bwt=0;
	max_bwt=0.2;
	dt=0.01;
	mid_thr=0.8;
       };
       g_bar {e=1: l=0.1: i=1: };
       e_rev {e=1: l=0.15: i=0.15: };
       adapt {
	on=0;
	tau=144;
	vm_gain=0.1;
	spike_gain=0.01;
	Ei_dyn=1;
	Ei_gain=0.001;
	Ei_tau=50;
	dt=0.006944444;
	Ei_dt=0.02;
       };
       stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
       syn_delay {
	on=0;
	delay=4;
       };
       deep_raw_qtr=Q4;
       deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_trace=0: mod_range=0.2: };
       da_mod {on=1: minus=0: plus=1: };
       noise_type=NETIN_NOISE;
       noise {name="noise": type=GAUSSIAN: mean=0: var=0.01: par=1: };
       noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
       noise_sched {
	name="noise_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=1;
       };
      };
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_spec {type=LeabraBiasSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"].children["LeabraBiasSpec_4"]$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: };
     act_misc {rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0;
      t_r=6;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      eff_spk_thr=0.25;
     };
     opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     init {v_m=0.4: act=0: netin=0: };
     dt {integ=1: vm_tau=5: net_tau=1.428571: fast_cyc=0: vm_dt=0.2: net_dt=0.7000002: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
     avg_l {init=0.4: max=1.5: min=0.2: tau=10: lrn_max=0.05: lrn_min=0.005: dt=0.1: lrn_fact=0.03461539: };
     avg_l_2 {err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: };
     adapt_leak {
      on=0;
      tau=100;
      hi_thr=1.2;
      lo_thr=0.4;
      min_bwt=0;
      max_bwt=0.2;
      dt=0.01;
      mid_thr=0.8;
     };
     g_bar {e=1: l=0.1: i=1: };
     e_rev {e=1: l=0.15: i=0.15: };
     adapt {
      on=0;
      tau=144;
      vm_gain=0.1;
      spike_gain=0.01;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {
      on=0;
      delay=4;
     };
     deep_raw_qtr=Q4;
     deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_trace=0: mod_range=0.2: };
     da_mod {on=1: minus=0: plus=1: };
     noise_type=NETIN_NOISE;
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.01: par=1: };
     noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
     noise_sched {
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraLayerSpec @["HiddenLayer"] {
     name="HiddenLayer";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @["Input_Output"] {
       name="Input_Output";
       is_used=0;
       desc=;
       unique{ lay_inhib;kwta;       };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
       lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       lay_lrate=1;
       cos_diff {
	avg_tau=100;
	lrate_mod=0;
	lrmod_fm_trc=0;
	lrmod_z_thr=-1.5;
	set_net_unlrn=0;
	avg_dt=0.01;
	avg_dt_c=0.99;
       };
       lstats {
	hog_thr=0.3;
	dead_thr=0.01;
       };
      };
     };
     lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lay_lrate=1;
     cos_diff {
      avg_tau=100;
      lrate_mod=0;
      lrmod_fm_trc=0;
      lrmod_z_thr=-1.5;
      set_net_unlrn=0;
      avg_dt=0.01;
      avg_dt_c=0.99;
     };
     lstats {
      hog_thr=0.3;
      dead_thr=0.01;
     };
    };
    FullPrjnSpec @["FullPrjnSpec_2"] {
     name="FullPrjnSpec_2";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
     renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
    };
    LeabraConSpec @["LeabraConSpec_4"] {
     name="LeabraConSpec_4";
     is_used=1;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @["LeabraBiasSpec_4"] {
       name="LeabraBiasSpec_4";
       is_used=1;
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       use_lrate_sched=1;
       cur_lrate=2;
       lrs_mult=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=70;
	 step=-0.01285714;
	};
	SchedItem @[1] {
	 start_ctr=70;
	 start_val=0.1;
	 duration=1;
	 step=1;
	};
       };
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: };
       wt_bal {
	on=0;
	trg=0.3;
	thr=0.1;
	gain=2;
	avg_updt=10;
	hi_thr=0.4;
	lo_thr=0.2;
       };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       dwt_thresh=0.1;
      };
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.04;
     use_lrate_sched=1;
     cur_lrate=2;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
      SchedItem @[0] {
       start_ctr=0;
       start_val=1;
       duration=70;
       step=-0.01285714;
      };
      SchedItem @[1] {
       start_ctr=70;
       start_val=0.1;
       duration=1;
       step=1;
      };
     };
     use_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1: };
     wt_bal {
      on=0;
      trg=0.3;
      thr=0.1;
      gain=2;
      avg_updt=10;
      hi_thr=0.4;
      lo_thr=0.2;
     };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
    };
    ScalarValLayerSpec @["NormScalarVal"] {
     name="NormScalarVal";
     is_used=1;
     desc=;
     unique{ kwta;inhib_group;lay_inhib;     };
     children {
      name="children";
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=2.2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2.2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lay_lrate=1;
     cos_diff {
      avg_tau=100;
      lrate_mod=0;
      lrmod_fm_trc=0;
      lrmod_z_thr=-1.5;
      set_net_unlrn=0;
      avg_dt=0.01;
      avg_dt_c=0.99;
     };
     lstats {
      hog_thr=0.3;
      dead_thr=0.01;
     };
     scalar {rep=GAUSSIAN: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     avg_act_range {min=0.1: max=0.9: range=0.8: scale=1.25: };
     val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    ScalarValLayerSpec @["ForceScalarVal"] {
     name="ForceScalarVal";
     is_used=1;
     desc=;
     unique{ kwta;inhib_group;lay_inhib;     };
     children {
      name="children";
      el_typ=ScalarValLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=2.2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2.2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lay_lrate=1;
     cos_diff {
      avg_tau=100;
      lrate_mod=0;
      lrmod_fm_trc=0;
      lrmod_z_thr=-1.5;
      set_net_unlrn=0;
      avg_dt=0.01;
      avg_dt_c=0.99;
     };
     lstats {
      hog_thr=0.3;
      dead_thr=0.01;
     };
     scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
     unit_range {min=0: max=1: range=1: scale=1: };
     bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
     avg_act_range {min=0.1: max=0.9: range=0.8: scale=1.25: };
     val_range {min=0: max=1: range=1: scale=1: };
    };
    TwoDValLayerSpec @["VisTwoDVal"] {
     name="VisTwoDVal";
     is_used=1;
     desc=;
     unique{ kwta;inhib_group;lay_inhib;     };
     children {
      name="children";
      el_typ=TwoDValLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lay_lrate=1;
     cos_diff {
      avg_tau=100;
      lrate_mod=0;
      lrmod_fm_trc=0;
      lrmod_z_thr=-1.5;
      set_net_unlrn=0;
      avg_dt=0.01;
      avg_dt_c=0.99;
     };
     lstats {
      hog_thr=0.3;
      dead_thr=0.01;
     };
     twod {rep=GAUSSIAN: n_vals=1: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: mn_dst=0.5: clip_val=1: };
     x_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     y_range {min=-0.5: max=1.5: range=2: scale=0.5: };
     bias_val {un=NO_UN: un_gain=1: wt=NO_WT: wt_gain=1: x_val=0: y_val=0: };
     x_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
     y_val_range {min=-0.35: max=1.35: range=1.7: scale=0.5882353: };
    };
    BaseSpec_Group @.gp["PFC_BG_Units"] {
     name="PFC_BG_Units";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @["PVUnits"] {
      name="PVUnits";
      is_used=1;
      desc=;
      unique{ g_bar;act;act_fun;dt;opt_thresh;maxda;      };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
       LeabraUnitSpec @["LVUnits"] {
	name="LVUnits";
	is_used=1;
	desc=;
	unique{ maxda;	};
	children {
	 name="children";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["BgBias"]$$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.17: gain=220: nvar=0.01: };
	act_misc {rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_tau=50: eq_dt=0.02: };
	spike_misc {
	 ex=0;
	 exp_slope=0.02;
	 spk_thr=1.2;
	 vm_r=0;
	 t_r=6;
	 clamp_max_p=0.11;
	 clamp_type=REGULAR;
	 eff_spk_thr=0.17;
	};
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=1: range=1: scale=1: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=20: net_tau=1.428571: fast_cyc=100: vm_dt=0.05: net_dt=0.7000002: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
	avg_l {init=0.4: max=1.5: min=0.2: tau=10: lrn_max=0.05: lrn_min=0.005: dt=0.1: lrn_fact=0.03461539: };
	avg_l_2 {err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: };
	adapt_leak {
	 on=0;
	 tau=100;
	 hi_thr=1.2;
	 lo_thr=0.4;
	 min_bwt=0;
	 max_bwt=0.2;
	 dt=0.01;
	 mid_thr=0.8;
	};
	g_bar {e=1: l=0.1: i=1: };
	e_rev {e=1: l=0.15: i=0.15: };
	adapt {
	 on=0;
	 tau=144;
	 vm_gain=0.1;
	 spike_gain=0.01;
	 Ei_dyn=1;
	 Ei_gain=0.001;
	 Ei_tau=50;
	 dt=0.006944444;
	 Ei_dt=0.02;
	};
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {
	 on=0;
	 delay=4;
	};
	deep_raw_qtr=Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_trace=0: mod_range=0.2: };
	da_mod {on=0: minus=0: plus=0.1: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=0: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
       };
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_spec {type=LeabraBiasSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["BgBias"]$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.17: gain=220: nvar=0.01: };
      act_misc {rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
      spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_tau=50: eq_dt=0.02: };
      spike_misc {
       ex=0;
       exp_slope=0.02;
       spk_thr=1.2;
       vm_r=0;
       t_r=6;
       clamp_max_p=0.11;
       clamp_type=REGULAR;
       eff_spk_thr=0.17;
      };
      opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=1: range=1: scale=1: };
      init {v_m=0.4: act=0: netin=0: };
      dt {integ=1: vm_tau=20: net_tau=1.428571: fast_cyc=100: vm_dt=0.05: net_dt=0.7000002: };
      act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
      avg_l {init=0.4: max=1.5: min=0.2: tau=10: lrn_max=0.05: lrn_min=0.005: dt=0.1: lrn_fact=0.03461539: };
      avg_l_2 {err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: };
      adapt_leak {
       on=0;
       tau=100;
       hi_thr=1.2;
       lo_thr=0.4;
       min_bwt=0;
       max_bwt=0.2;
       dt=0.01;
       mid_thr=0.8;
      };
      g_bar {e=1: l=0.1: i=1: };
      e_rev {e=1: l=0.15: i=0.15: };
      adapt {
       on=0;
       tau=144;
       vm_gain=0.1;
       spike_gain=0.01;
       Ei_dyn=1;
       Ei_gain=0.001;
       Ei_tau=50;
       dt=0.006944444;
       Ei_dt=0.02;
      };
      stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
      syn_delay {
       on=0;
       delay=4;
      };
      deep_raw_qtr=Q4;
      deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_trace=0: mod_range=0.2: };
      da_mod {on=0: minus=0: plus=0.1: };
      noise_type=NO_NOISE;
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=0: mode=FIXED_NOISE: };
      noise_sched {
       name="noise_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
     LeabraUnitSpec @["DaUnits"] {
      name="DaUnits";
      is_used=1;
      desc=;
      unique{ act_range;clamp_range;act;maxda;      };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      act_range {min=-2: max=2: range=4: scale=0.25: };
      bias_spec {type=LeabraBiasSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["LearnCons"].children["BgBias"].children["FixedBias"]$$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.25: gain=600: nvar=0.005: };
      act_misc {rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
      spike {rise=0: decay=5: g_gain=5: window=3: eq_gain=10: eq_tau=50: eq_dt=0.02: };
      spike_misc {
       ex=0;
       exp_slope=0.02;
       spk_thr=1.2;
       vm_r=0;
       t_r=6;
       clamp_max_p=0.11;
       clamp_type=REGULAR;
       eff_spk_thr=0.25;
      };
      opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
      clamp_range {min=-2: max=2: range=4: scale=0.25: };
      vm_range {min=0: max=1: range=1: scale=1: };
      init {v_m=0.4: act=0: netin=0: };
      dt {integ=1: vm_tau=4: net_tau=1.428571: fast_cyc=0: vm_dt=0.25: net_dt=0.7000002: };
      act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
      avg_l {init=0.4: max=1.5: min=0.2: tau=10: lrn_max=0.05: lrn_min=0.005: dt=0.1: lrn_fact=0.03461539: };
      avg_l_2 {err_mod=1: err_min=0.01: act_thr=0.2: lay_act_thr=0.01: };
      adapt_leak {
       on=0;
       tau=100;
       hi_thr=1.2;
       lo_thr=0.4;
       min_bwt=0;
       max_bwt=0.2;
       dt=0.01;
       mid_thr=0.8;
      };
      g_bar {e=1: l=0.1: i=1: };
      e_rev {e=1: l=0.15: i=0.15: };
      adapt {
       on=0;
       tau=144;
       vm_gain=0.1;
       spike_gain=0.01;
       Ei_dyn=1;
       Ei_gain=0.001;
       Ei_tau=50;
       dt=0.006944444;
       Ei_dt=0.02;
      };
      stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
      syn_delay {
       on=0;
       delay=4;
      };
      deep_raw_qtr=Q4;
      deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_trace=0: mod_range=0.2: };
      da_mod {on=0: minus=0: plus=0.1: };
      noise_type=NO_NOISE;
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
      noise_sched {
       name="noise_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
    };
    BaseSpec_Group @.gp["PFC_BG_Cons"] {
     name="PFC_BG_Cons";
     el_typ=LeabraConSpec;
     el_def=0;
     LeabraConSpec @["LearnCons"] {
      name="LearnCons";
      is_used=0;
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=LeabraBiasSpec;
       el_def=0;
       LeabraBiasSpec @["BgBias"] {
	name="BgBias";
	is_used=1;
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;lrate;	};
	children {
	 name="children";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	 LeabraBiasSpec @["FixedBias"] {
	  name="FixedBias";
	  is_used=1;
	  desc=;
	  unique{ rnd;wt_limits;wt_scale;wt_scale_init;lrate;	  };
	  children {
	   name="children";
	   el_typ=LeabraBiasSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	  wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0;
	  use_lrate_sched=1;
	  cur_lrate=0;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: };
	  wt_bal {
	   on=0;
	   trg=0.3;
	   thr=0.1;
	   gain=2;
	   avg_updt=10;
	   hi_thr=0.4;
	   lo_thr=0.2;
	  };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  dwt_thresh=0.1;
	 };
	};
	rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: };
	wt_bal {
	 on=0;
	 trg=0.3;
	 thr=0.1;
	 gain=2;
	 avg_updt=10;
	 hi_thr=0.4;
	 lo_thr=0.2;
	};
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	dwt_thresh=0.1;
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=1: no_plus_net=0: };
      learn=1;
      learn_qtr=Q4;
      lrate=0.04;
      use_lrate_sched=1;
      cur_lrate=0.02;
      lrs_mult=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1: };
      wt_bal {
       on=0;
       trg=0.3;
       thr=0.1;
       gain=2;
       avg_updt=10;
       hi_thr=0.4;
       lo_thr=0.2;
      };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
     };
     MarkerConSpec @["MarkerCons"] {
      name="MarkerCons";
      is_used=1;
      desc=;
      unique{ rnd;wt_limits;wt_scale;lrate;learn;      };
      children {
       name="children";
       el_typ=MarkerConSpec;
       el_def=0;
      };
      rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=0: no_plus_net=0: };
      learn=0;
      learn_qtr=Q4;
      lrate=0;
      use_lrate_sched=1;
      cur_lrate=0;
      lrs_mult=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1: };
      wt_bal {
       on=0;
       trg=0.3;
       thr=0.1;
       gain=2;
       avg_updt=10;
       hi_thr=0.4;
       lo_thr=0.2;
      };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
     };
    };
    BaseSpec_Group @.gp["PFC_BG_Layers"] {
     name="PFC_BG_Layers";
     el_typ=ExtRewLayerSpec;
     el_def=0;
     ExtRewLayerSpec @["PVeLayer"] {
      name="PVeLayer";
      is_used=1;
      desc=;
      unique{ kwta;inhib_group;lay_inhib;decay;ct_inhib_mod;      };
      children {
       name="children";
       el_typ=ExtRewLayerSpec;
       el_def=0;
      };
      lay_inhib {on=1: gi=1: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      unit_gp_inhib {on=0: gi=2.2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
      lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      avg_act {targ_init=0.25: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
      inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
      inhib_misc {net_thr=0: thr_rel=1: self_fb=0.3: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
      clamp {hard=1: gain=0.2: };
      decay {trial=1: };
      del_inhib {on=0: prv_trl=0: prv_q=0: };
      lay_lrate=1;
      cos_diff {
       avg_tau=100;
       lrate_mod=0;
       lrmod_fm_trc=0;
       lrmod_z_thr=-1.5;
       set_net_unlrn=0;
       avg_dt=0.01;
       avg_dt_c=0.99;
      };
      lstats {
       hog_thr=0.3;
       dead_thr=0.01;
      };
      scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
      unit_range {min=0: max=1: range=1: scale=1: };
      bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
      avg_act_range {min=0.1: max=0.9: range=0.8: scale=1.25: };
      val_range {min=0: max=1: range=1: scale=1: };
      rew_type=EXT_REW;
      out_err {err_tol=0.5: graded=0: no_off_err=0: scalar_val_max=1: };
      rew {err_val=0: norew_val=0.5: rew_val=1: };
     };
    };
    BaseSpec_Group @.gp["PFC_BG_Prjns"] {
     name="PFC_BG_Prjns";
     el_typ=FullPrjnSpec;
     el_def=0;
     FullPrjnSpec @["FullPrjn"] {
      name="FullPrjn";
      is_used=1;
      desc=;
      unique{       };
      children {
       name="children";
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
     };
     OneToOnePrjnSpec @["OneToOne"] {
      name="OneToOne";
      is_used=1;
      desc=;
      unique{ self_con;      };
      children {
       name="children";
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      set_scale=0;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      n_conns=-1;
      recv_start=0;
      send_start=0;
      use_gp=0;
     };
    };
   };
   param_seqs {
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=38: y=10: z=3: };
    max_disp_size2d {x=12: y=85: };
    LeabraLayer @["RewTarg"] {
     name="RewTarg";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=12: y=4: z=0: };
     pos_abs {x=12: y=4: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=1: y=1: n_not_xy=0: n=1: };
     disp_geom {x=1: y=1: n_not_xy=0: n=1: };
     scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVe"].projections["Marker_Fm_RewTarg"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=0;
      fm_output=1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=LeabraLayerSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["HiddenLayer"]$$: };
     adapt_gi=1;
    };
    LeabraLayer @["PVe"] {
     name="PVe";
     desc=;
     flags=NO_ADD_SSE|NO_ADD_COMP_SSE;
     layer_type=TARGET;
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=3: };
     pos2d_abs {x=0: y=3: };
     disp_scale=1;
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=1: n_not_xy=0: n=4: };
     disp_geom {x=4: y=1: n_not_xy=0: n=4: };
     scaled_disp_geom {x=4: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=3;
     n_send_prjns=2;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Marker_Fm_RewTarg"] {
       name="Marker_Fm_RewTarg";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["RewTarg"]$$;
       spec {type=OneToOnePrjnSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Marker_Fm_MotorElbowForce"] {
       name="Marker_Fm_MotorElbowForce";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["MotorElbowForce"]$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Marker_Fm_MotorShoulderForce"] {
       name="Marker_Fm_MotorShoulderForce";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["MotorShoulderForce"]$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=2;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Marker_Fm_SomaElbowAngle_Pred"] {
       name="Marker_Fm_SomaElbowAngle_Pred";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Pred"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=-1;
       send_idx=-1;
       recv_n=1;
       send_n=1;
       projected=0;
       dir_fixed=0;
       direction=DIR_UNKNOWN;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Marker_Fm_SomaShoulderAngle_Pred"] {
       name="Marker_Fm_SomaShoulderAngle_Pred";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Pred"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=-1;
       send_idx=-1;
       recv_n=1;
       send_n=1;
       projected=0;
       dir_fixed=0;
       direction=DIR_UNKNOWN;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVr"].projections["Marker_Fm_PVe"];
      Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVi"].projections["Marker_Fm_PVe"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["PVUnits"]$$: };
     dist {
      fm_input=1;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.25;
     acts_p_avg=0.25;
     acts_p_avg_eff=0.25;
     spec {type=ExtRewLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Layers"]["PVeLayer"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["PVr"] {
     name="PVr";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=4: z=0: };
     pos_abs {x=0: y=4: z=0: };
     pos2d {x=0: y=6: };
     pos2d_abs {x=0: y=6: };
     disp_scale=1;
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=1: n_not_xy=0: n=4: };
     disp_geom {x=4: y=1: n_not_xy=0: n=4: };
     scaled_disp_geom {x=4: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=3;
     n_send_prjns=3;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Marker_Fm_PVe"] {
       name="Marker_Fm_PVe";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["PVe"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Cur"]$$;
       spec {type=FullPrjnSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Cur"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=2;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["LVe"].projections["Marker_Fm_PVr"];
      Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["LVi"].projections["Marker_Fm_PVr"];
      Projection_Group @. = [2] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["DA"].projections["Marker_Fm_PVr"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["PVUnits"]$: };
     dist {
      fm_input=1;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=LeabraLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["HiddenLayer"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["PVi"] {
     name="PVi";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=2: z=0: };
     pos_abs {x=0: y=2: z=0: };
     pos2d {x=0: y=9: };
     pos2d_abs {x=0: y=9: };
     disp_scale=1;
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=1: n_not_xy=0: n=4: };
     disp_geom {x=4: y=1: n_not_xy=0: n=4: };
     scaled_disp_geom {x=4: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=3;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Marker_Fm_PVe"] {
       name="Marker_Fm_PVe";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["PVe"]$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=1;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=2;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["DA"].projections["Marker_Fm_PVi"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["PVUnits"]$: };
     dist {
      fm_input=1;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=LeabraLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["HiddenLayer"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["LVe"] {
     name="LVe";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=6: y=0: z=0: };
     pos_abs {x=6: y=0: z=0: };
     pos2d {x=0: y=12: };
     pos2d_abs {x=0: y=12: };
     disp_scale=1;
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=1: n_not_xy=0: n=4: };
     disp_geom {x=4: y=1: n_not_xy=0: n=4: };
     scaled_disp_geom {x=4: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=3;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Marker_Fm_PVr"] {
       name="Marker_Fm_PVr";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["PVr"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=1;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=2;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["DA"].projections["Marker_Fm_LVe"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["PVUnits"].children["LVUnits"]$$: };
     dist {
      fm_input=1;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=LeabraLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["HiddenLayer"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["LVi"] {
     name="LVi";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=6: y=2: z=0: };
     pos_abs {x=6: y=2: z=0: };
     pos2d {x=0: y=15: };
     pos2d_abs {x=0: y=15: };
     disp_scale=1;
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=1: n_not_xy=0: n=4: };
     disp_geom {x=4: y=1: n_not_xy=0: n=4: };
     scaled_disp_geom {x=4: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=3;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Marker_Fm_PVr"] {
       name="Marker_Fm_PVr";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["PVr"]$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=1;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=2;
       send_idx=4;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["DA"].projections["Marker_Fm_LVi"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["PVUnits"].children["LVUnits"]$: };
     dist {
      fm_input=1;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=LeabraLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["HiddenLayer"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["NV"] {
     name="NV";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=6: y=4: z=0: };
     pos_abs {x=6: y=4: z=0: };
     pos2d {x=0: y=18: };
     pos2d_abs {x=0: y=18: };
     disp_scale=1;
     un_geom {x=4: y=1: n_not_xy=0: n=4: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=4: y=1: n_not_xy=0: n=4: };
     disp_geom {x=4: y=1: n_not_xy=0: n=4: };
     scaled_disp_geom {x=4: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=2;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=1;
       send_idx=5;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["DA"].projections["Marker_Fm_NV"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["PVUnits"]$: };
     dist {
      fm_input=1;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=LeabraLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["HiddenLayer"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["DA"] {
     name="DA";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=12: y=0: z=0: };
     pos_abs {x=12: y=0: z=0: };
     pos2d {x=0: y=21: };
     pos2d_abs {x=0: y=21: };
     disp_scale=1;
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=1: y=1: n_not_xy=0: n=1: };
     disp_geom {x=1: y=1: n_not_xy=0: n=1: };
     scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=5;
     n_send_prjns=3;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Marker_Fm_PVi"] {
       name="Marker_Fm_PVi";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["PVi"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Marker_Fm_LVe"] {
       name="Marker_Fm_LVe";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["LVe"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Marker_Fm_LVi"] {
       name="Marker_Fm_LVi";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["LVi"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Marker_Fm_PVr"] {
       name="Marker_Fm_PVr";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["PVr"]$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=3;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Marker_Fm_NV"] {
       name="Marker_Fm_NV";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["NV"]$$;
       spec {type=OneToOnePrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["OneToOne"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=4;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["MotorElbowForce"].projections["Marker_Fm_DA"];
      Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["MotorShoulderForce"].projections["Marker_Fm_DA"];
      Projection_Group @. = [2] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["RLHidden"].projections["Marker_Fm_DA"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Units"]["DaUnits"]$$: };
     dist {
      fm_input=2;
      fm_output=1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=LeabraLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["HiddenLayer"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["MotorElbowForce"] {
     name="MotorElbowForce";
     desc=;
     flags=0;
     layer_type=OUTPUT;
     pos {x=26: y=9: z=2: };
     pos_abs {x=26: y=9: z=2: };
     pos2d {x=0: y=24: };
     pos2d_abs {x=0: y=24: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=2;
     n_send_prjns=2;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_RLHidden"] {
       name="Fm_RLHidden";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["RLHidden"]$$;
       spec {type=FullPrjnSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["FullPrjnSpec_2"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Marker_Fm_DA"] {
       name="Marker_Fm_DA";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["ve_arm"].networks["RLNet"].layers["DA"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["RLHidden"].projections["Fm_MotorElbowForce"];
      Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVe"].projections["Marker_Fm_MotorElbowForce"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"].children["MotorUnits"]$$: };
     dist {
      fm_input=2;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [12 1] "val";"0";"0.1";"0.2";"0.3";"0.4";"0.5";"0.6";"0.7";"0.8";
"0.9";"1";     };
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["ForceScalarVal"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["MotorShoulderForce"] {
     name="MotorShoulderForce";
     desc=;
     flags=0;
     layer_type=OUTPUT;
     pos {x=26: y=6: z=2: };
     pos_abs {x=26: y=6: z=2: };
     pos2d {x=0: y=27: };
     pos2d_abs {x=0: y=27: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=2;
     n_send_prjns=2;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_RLHidden"] {
       name="Fm_RLHidden";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["RLHidden"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Marker_Fm_DA"] {
       name="Marker_Fm_DA";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["DA"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["RLHidden"].projections["Fm_MotorShoulderForce"];
      Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVe"].projections["Marker_Fm_MotorShoulderForce"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"].children["MotorUnits"]$: };
     dist {
      fm_input=2;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [12 1] "val";"0";"0.1";"0.2";"0.3";"0.4";"0.5";"0.6";"0.7";"0.8";
"0.9";"1";     };
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["ForceScalarVal"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["RLHidden"] {
     name="RLHidden";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=8: y=0: z=1: };
     pos_abs {x=8: y=0: z=1: };
     pos2d {x=0: y=30: };
     pos2d_abs {x=0: y=30: };
     disp_scale=1;
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=7: y=7: n_not_xy=0: n=49: };
     disp_geom {x=7: y=7: n_not_xy=0: n=49: };
     scaled_disp_geom {x=7: y=7: n_not_xy=0: n=1: };
     n_recv_prjns=5;
     n_send_prjns=2;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_SomaShoulderAngle_Cur"] {
       name="Fm_SomaShoulderAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaShoulderAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_SomaElbowAngle_Cur"] {
       name="Fm_SomaElbowAngle_Cur";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["SomaElbowAngle_Cur"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_MotorShoulderForce"] {
       name="Fm_MotorShoulderForce";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["MotorShoulderForce"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_MotorElbowForce"] {
       name="Fm_MotorElbowForce";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["MotorElbowForce"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["FullPrjnSpec_2"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraConSpec_4"]$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Marker_Fm_DA"] {
       name="Marker_Fm_DA";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["ve_arm"].networks["RLNet"].layers["DA"]$;
       spec {type=FullPrjnSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Prjns"]["FullPrjn"]$: };
       con_type=LeabraCon;
       con_spec {type=MarkerConSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs.gp["PFC_BG_Cons"]["MarkerCons"]$: };
       recv_idx=4;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["MotorShoulderForce"].projections["Fm_RLHidden"];
      Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["MotorElbowForce"].projections["Fm_RLHidden"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=1;
      fm_output=1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=LeabraLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["HiddenLayer"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["SomaElbowAngle_Cur"] {
     name="SomaElbowAngle_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=26: y=3: z=2: };
     pos_abs {x=26: y=3: z=2: };
     pos2d {x=0: y=39: };
     pos2d_abs {x=0: y=39: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=6;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["RLHidden"].projections["Fm_SomaElbowAngle_Cur"];
      Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVr"].projections["Fm_SomaElbowAngle_Cur"];
      Projection_Group @. = [2] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVi"].projections["Fm_SomaElbowAngle_Cur"];
      Projection_Group @. = [3] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["LVe"].projections["Fm_SomaElbowAngle_Cur"];
      Projection_Group @. = [4] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["LVi"].projections["Fm_SomaElbowAngle_Cur"];
      Projection_Group @. = [5] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["NV"].projections["Fm_SomaElbowAngle_Cur"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=0;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=ScalarValLayerSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["NormScalarVal"]$$: };
     adapt_gi=1;
    };
    LeabraLayer @["SomaElbowAngle_Pred"] {
     name="SomaElbowAngle_Pred";
     desc=;
     flags=LESIONED|ICONIFIED;
     layer_type=TARGET;
     pos {x=33: y=6: z=1: };
     pos_abs {x=33: y=6: z=1: };
     pos2d {x=0: y=42: };
     pos2d_abs {x=0: y=42: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVe"].projections["Marker_Fm_SomaElbowAngle_Pred"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.1;
     acts_p_avg=0.1;
     acts_p_avg_eff=1;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["NormScalarVal"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["SomaShoulderAngle_Cur"] {
     name="SomaShoulderAngle_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=26: y=0: z=2: };
     pos_abs {x=26: y=0: z=2: };
     pos2d {x=0: y=45: };
     pos2d_abs {x=0: y=45: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=6;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["RLHidden"].projections["Fm_SomaShoulderAngle_Cur"];
      Projection_Group @. = [1] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVr"].projections["Fm_SomaShoulderAngle_Cur"];
      Projection_Group @. = [2] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVi"].projections["Fm_SomaShoulderAngle_Cur"];
      Projection_Group @. = [3] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["LVe"].projections["Fm_SomaShoulderAngle_Cur"];
      Projection_Group @. = [4] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["LVi"].projections["Fm_SomaShoulderAngle_Cur"];
      Projection_Group @. = [5] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["NV"].projections["Fm_SomaShoulderAngle_Cur"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=0;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["NormScalarVal"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["SomaShoulderAngle_Pred"] {
     name="SomaShoulderAngle_Pred";
     desc=;
     flags=LESIONED|ICONIFIED;
     layer_type=TARGET;
     pos {x=33: y=9: z=1: };
     pos_abs {x=33: y=9: z=1: };
     pos2d {x=0: y=48: };
     pos2d_abs {x=0: y=48: };
     disp_scale=1;
     un_geom {x=12: y=1: n_not_xy=0: n=12: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=12: y=1: n_not_xy=0: n=12: };
     disp_geom {x=12: y=1: n_not_xy=0: n=12: };
     scaled_disp_geom {x=12: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["ve_arm"].networks["RLNet"].layers["PVe"].projections["Marker_Fm_SomaShoulderAngle_Pred"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.1;
     acts_p_avg=0.1;
     acts_p_avg_eff=1;
     spec {type=ScalarValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["NormScalarVal"]$: };
     adapt_gi=1;
    };
    TwoDValLeabraLayer @["VisHand_Cur"] {
     name="VisHand_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=13: y=0: z=2: };
     pos_abs {x=13: y=0: z=2: };
     pos2d {x=0: y=51: };
     pos2d_abs {x=0: y=51: };
     disp_scale=1;
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=11: y=10: n_not_xy=0: n=110: };
     disp_geom {x=11: y=10: n_not_xy=0: n=110: };
     scaled_disp_geom {x=11: y=10: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=0;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=TwoDValLayerSpec: spec=.projects["ve_arm"].networks["RLNet"].specs["VisTwoDVal"]$$: };
     adapt_gi=1;
     twod_vals {
      name="twod_vals";
     [2 11 1 1 1] 1.4119124;0.46986288;0;0;1.3248316;0.47522646;1.3248316;0.47522646;1.3194612;0.79662973;
0;0;0;0;0;0;0;0;0;0;
0;0;     };
    };
    TwoDValLeabraLayer @["VisHand_Pred"] {
     name="VisHand_Pred";
     desc=;
     flags=LESIONED|ICONIFIED;
     layer_type=TARGET;
     pos {x=20: y=6: z=1: };
     pos_abs {x=20: y=6: z=1: };
     pos2d {x=0: y=63: };
     pos2d_abs {x=0: y=63: };
     disp_scale=1;
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=11: y=10: n_not_xy=0: n=110: };
     disp_geom {x=11: y=10: n_not_xy=0: n=110: };
     scaled_disp_geom {x=11: y=10: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.1;
     acts_p_avg=0.1;
     acts_p_avg_eff=1;
     spec {type=TwoDValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["VisTwoDVal"]$: };
     adapt_gi=1;
     twod_vals {
      name="twod_vals";
     [2 11 1 1 1] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;     };
    };
    TwoDValLeabraLayer @["VisTarget_Cur"] {
     name="VisTarget_Cur";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=0: y=0: z=2: };
     pos_abs {x=0: y=0: z=2: };
     pos2d {x=0: y=75: };
     pos2d_abs {x=0: y=75: };
     disp_scale=1;
     un_geom {x=11: y=10: n_not_xy=0: n=110: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=11: y=10: n_not_xy=0: n=110: };
     disp_geom {x=11: y=10: n_not_xy=0: n=110: };
     scaled_disp_geom {x=11: y=10: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=0;
      fm_output=-1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {type=TwoDValLayerSpec: spec=$.projects["ve_arm"].networks["RLNet"].specs["VisTwoDVal"]$: };
     adapt_gi=1;
     twod_vals {
      name="twod_vals";
     [2 11 1 1 1] 0.68105024;0.61593002;0;0;0.67148918;0.61461592;0.67148918;0.61461592;0.10563678;0.52459538;
0;0;0;0;0;0;0;0;0;0;
0;0;     };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    run_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    sync_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    total_time {name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=0;
   };
   cuda {
    sync_units=0;
    sync_cons=0;
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
    n_threads=32;
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=344;
   n_cons=4111;
   max_prjns=5;
   max_disp_size {x=38: y=10: z=3: };
   max_disp_size2d {x=12: y=85: };
   times {
    quarter=25;
    gate_cyc=18;
    deep_cyc=5;
    time_inc=0.001;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    agg_unlearnable=0;
   };
   net_misc {
    spike=0;
    deep=0;
    bias_learn=0;
    trial_decay=0;
    diff_scale_p=0;
    diff_scale_q1=0;
    wt_bal=0;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   deep {
    on=0;
    ctxt=0;
    raw_net=0;
    mod_net=0;
    raw_qtr=0;
   };
   rel_netin {
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
 };
};

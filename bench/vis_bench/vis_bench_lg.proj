// ta_Dump File v3.0 -- code v8.3.0.0 rev11216
LeabraProject .projects[0] { 
 Doc_Group @.docs = [1] {
  taDoc @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };
  };
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [8] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
   };

   ControlPanelMethod_Group @.mths = [13] {
    ControlPanelMethod @[0] { };
    ControlPanelMethod @[1] { };
    ControlPanelMethod @[2] { };
    ControlPanelMethod @[3] { };
    ControlPanelMethod @[4] { };
    ControlPanelMethod @[5] { };
    ControlPanelMethod @[6] { };
    ControlPanelMethod @[7] { };
    ControlPanelMethod @[8] { };
    ControlPanelMethod @[9] { };
    ControlPanelMethod @[10] { };
    ControlPanelMethod @[11] { };
    ControlPanelMethod @[12] { };
   };
  };
  ClusterRun @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [0] {
   };

   ControlPanelMethod_Group @.mths = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.active_params = [0] {
 };

 ArchivedParams_Group @.archived_params = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp[0] = [1] { 
   DataTable @[0] { 
    DataTableCols @.data = [6] {
     String_Data @[0] { };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     double_Data @[2] { };
     double_Data @[3] { };
     double_Data @[4] { };
     double_Data @[5] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[1] = [6] { 
   DataTable @[0] { 
    DataTableCols @.data = [9] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     String_Data @[3] { };
     String_Data @[4] { };
     int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[1] { 
    DataTableCols @.data = [8] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[2] { 
    DataTableCols @.data = [8] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[3] { 
    DataTableCols @.data = [9] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     String_Data @[3] { };
     String_Data @[4] { };
     int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[4] { 
    DataTableCols @.data = [8] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[5] { 
    DataTableCols @.data = [3] {
     float_Data @[0] { };
     float_Data @[1] { };
     String_Data @[2] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[2] = [3] { 
   DataTable @[0] { 
    DataTableCols @.data = [4] {
     String_Data @[0] { };
     float_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[1] { 
    DataTableCols @.data = [6] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     String_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[2] { 
    DataTableCols @.data = [4] {
     String_Data @[0] { };
     String_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
 };

 Program_TopGroup @.programs = [11] {
  Program @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgVar_List @.vars = [16] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
    ProgVar @[12] { };
    ProgVar @[13] { };
    ProgVar @[14] { };
    ProgVar @[15] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [26] {
    If @[0] { 
     ProgEl_List @.true_code = [1] {
      ReturnExpr @[0] { };
     };
    };
    Comment @[1] { };
    MiscCall @[2] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MiscCall @[3] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    RegisterArgs @[4] { };
    Comment @[5] { };
    ControlPanelsFmArgs @[6] { };
    PrintExpr @[7] { };
    MethodCall @[8] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MiscCall @[9] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MiscCall @[10] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    ProgVarFmArg @[11] { };
    ProgVarFmArg @[12] { };
    ProgVarFmArg @[13] { };
    ProgVarFmArg @[14] { };
    Comment @[15] { };
    AssignExpr @[16] { };
    AssignExpr @[17] { };
    Comment @[18] { };
    MethodCall @[19] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    OtherProgramVar @[20] { };
    If @[21] { 
     ProgEl_List @.true_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
     };
    };
    If @[22] { 
     ProgEl_List @.true_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
     };
    };
    OtherProgramVar @[23] { };
    PrintExpr @[24] { };
    ProgramCall @[25] { 
     ProgArg_List @.prog_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
   };
  };
  Program @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [6] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [8] {
    DataGroupProg @[0] { 
     DataOpList @.group_spec.ops = [2] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
     };
    };
    MiscCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[6] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[7] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Program @[2] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [3] {
    DataTable @[0] { 
     DataTableCols @.data = [5] {
      String_Data @[0] { };
      float_Data @[1] { };
      float_Data @[2] { };
      float_Data @[3] { };
      float_Data @[4] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[1] { 
     DataTableCols @.data = [5] {
      String_Data @[0] { };
      float_Data @[1] { };
      float_Data @[2] { };
      float_Data @[3] { };
      float_Data @[4] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[2] { 
     DataTableCols @.data = [4] {
      float_Data @[0] { };
      float_Data @[1] { };
      float_Data @[2] { };
      float_Data @[3] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [4] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [6] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [1] {
      ProgVar @[0] { };
     };
    };
    DataGroupProg @[1] { 
     DataOpList @.group_spec.ops = [5] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
      DataGroupEl @[2] { };
      DataGroupEl @[3] { };
      DataGroupEl @[4] { };
     };
    };
    DataGroupProg @[2] { 
     DataOpList @.group_spec.ops = [4] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
      DataGroupEl @[2] { };
      DataGroupEl @[3] { };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    ForLoop @[4] { 
     ProgEl_List @.loop_code = [2] {
      CssExpr @[0] { };
      CssExpr @[1] { };
     };
    };
    BlankLineEl @[5] { };
   };
  };
  Program @[3] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [3] {
    DynEnumType @[0] { 
     DynEnumItem_List @.enums = [3] {
      DynEnumItem @[0] { };
      DynEnumItem @[1] { };
      DynEnumItem @[2] { };
     };
    };
    DynEnumType @[1] { 
     DynEnumItem_List @.enums = [3] {
      DynEnumItem @[0] { };
      DynEnumItem @[1] { };
      DynEnumItem @[2] { };
     };
    };
    DynEnumType @[2] { 
     DynEnumItem_List @.enums = [20] {
      DynEnumItem @[0] { };
      DynEnumItem @[1] { };
      DynEnumItem @[2] { };
      DynEnumItem @[3] { };
      DynEnumItem @[4] { };
      DynEnumItem @[5] { };
      DynEnumItem @[6] { };
      DynEnumItem @[7] { };
      DynEnumItem @[8] { };
      DynEnumItem @[9] { };
      DynEnumItem @[10] { };
      DynEnumItem @[11] { };
      DynEnumItem @[12] { };
      DynEnumItem @[13] { };
      DynEnumItem @[14] { };
      DynEnumItem @[15] { };
      DynEnumItem @[16] { };
      DynEnumItem @[17] { };
      DynEnumItem @[18] { };
      DynEnumItem @[19] { };
     };
    };
   };

   ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgVar_List @.vars = [17] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
    ProgVar @[12] { };
    ProgVar @[13] { };
    ProgVar @[14] { };
    ProgVar @[15] { };
    ProgVar @[16] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [5] {
    AssignExpr @[0] { };
    AssignExpr @[1] { };
    ResetDataRows @[2] { };
    Switch @[3] { 
     ProgEl_List @.cases = [3] {
      CaseBlock @[0] { 
       ProgEl_List @.prog_code = [2] {
	ForLoop @[0] { 
	 ProgEl_List @.loop_code = [10] {
	  RandomCall @[0] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[1] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[2] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[3] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[4] { 
	   ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	   };
	  };
	  AssignExpr @[5] { };
	  AssignExpr @[6] { };
	  AddNewDataRow @[7] { };
	  DataVarProg @[8] { };
	  DataVarProg @[9] { };
	 };
	};
	DoneWritingDataRow @[1] { };
       };
      };
      CaseBlock @[1] { 
       ProgEl_List @.prog_code = [2] {
	ForLoop @[0] { 
	 ProgEl_List @.loop_code = [7] {
	  If @[0] { 
	   ProgEl_List @.true_code = [5] {
	    RandomCall @[0] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[1] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[2] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[3] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[4] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	   };
	  };
	  Else @[1] { 
	   ProgEl_List @.true_code = [5] {
	    RandomCall @[0] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[1] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[2] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[3] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[4] { 
	     ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	     };
	    };
	   };
	  };
	  AssignExpr @[2] { };
	  AssignExpr @[3] { };
	  AddNewDataRow @[4] { };
	  DataVarProg @[5] { };
	  DataVarProg @[6] { };
	 };
	};
	DoneWritingDataRow @[1] { };
       };
      };
      CaseBlock @[2] { 
       ProgEl_List @.prog_code = [2] {
	ForLoop @[0] { 
	 ProgEl_List @.loop_code = [10] {
	  RandomCall @[0] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[1] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[2] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[3] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[4] { 
	   ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	   };
	  };
	  AssignExpr @[5] { };
	  AssignExpr @[6] { };
	  AddNewDataRow @[7] { };
	  DataVarProg @[8] { };
	  DataVarProg @[9] { };
	 };
	};
	DoneWritingDataRow @[1] { };
       };
      };
     };
    };
    ForLoop @[4] { 
     ProgEl_List @.loop_code = [4] {
      RandomCall @[0] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      RandomCall @[1] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      RandomCall @[2] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      RandomCall @[3] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
     };
    };
   };
  };
  Program @[4] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [2] {
    taCanvas @[0] { };
    DataTable @[1] { 
     DataTableCols @.data = [1] {
      float_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgVar_List @.objs_vars = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgType_List @.types = [1] {
    DynEnumType @[0] { 
     DynEnumItem_List @.enums = [20] {
      DynEnumItem @[0] { };
      DynEnumItem @[1] { };
      DynEnumItem @[2] { };
      DynEnumItem @[3] { };
      DynEnumItem @[4] { };
      DynEnumItem @[5] { };
      DynEnumItem @[6] { };
      DynEnumItem @[7] { };
      DynEnumItem @[8] { };
      DynEnumItem @[9] { };
      DynEnumItem @[10] { };
      DynEnumItem @[11] { };
      DynEnumItem @[12] { };
      DynEnumItem @[13] { };
      DynEnumItem @[14] { };
      DynEnumItem @[15] { };
      DynEnumItem @[16] { };
      DynEnumItem @[17] { };
      DynEnumItem @[18] { };
      DynEnumItem @[19] { };
     };
    };
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [16] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
    ProgVar @[12] { };
    ProgVar @[13] { };
    ProgVar @[14] { };
    ProgVar @[15] { };
   };

   Function_List @.functions = [1] {
    Function @[0] { 
     ProgVar_List @.args = [1] {
      ProgVar @[0] { };
     };

     ProgEl_List @.fun_code = [2] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [4] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
       };
      };
      Switch @[1] { 
       ProgEl_List @.cases = [6] {
	CaseBlock @[0] { 
	 ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[1] { 
	 ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[2] { 
	 ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[3] { 
	 ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[4] { 
	 ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[5] { 
	 ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
       };
      };
     };
    };
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [16] {
    ResetDataRows @[0] { };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    AddNewDataRow @[3] { };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[6] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[7] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    AssignExpr @[8] { };
    AssignExpr @[9] { };
    AssignExpr @[10] { };
    AssignExpr @[11] { };
    ForLoop @[12] { 
     ProgEl_List @.loop_code = [2] {
      AssignExpr @[0] { };
      FunctionCall @[1] { 
       ProgArg_List @.fun_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    Comment @[13] { };
    MethodCall @[14] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    DoneWritingDataRow @[15] { };
   };
  };
  Program @[5] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [3] {
    V1RetinaProc @[0] { 
     VisRegionSpecBaseList @.regions = [2] {
      V1RegionSpec @[0] { };
      V1RegionSpec @[1] { };
     };
    };
    DataTable @[1] { 
     DataTableCols @.data = [12] {
      float_Data @[0] { };
      String_Data @[1] { };
      float_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[3] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[4] { };
      float_Data @[5] { };
      float_Data @[6] { };
      float_Data @[7] { };
      float_Data @[8] { };
      float_Data @[9] { };
      float_Data @[10] { };
      float_Data @[11] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    LayerWriter @[2] { 
     LayerDataEl_List @.layer_data = [7] {
      LayerWriterEl @[0] { };
      LayerWriterEl @[1] { };
      LayerWriterEl @[2] { };
      LayerWriterEl @[3] { };
      LayerWriterEl @[4] { };
      LayerWriterEl @[5] { };
      LayerWriterEl @[6] { };
     };
    };
   };

   ProgVar_List @.objs_vars = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [9] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [4] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MemberAssign @[2] { };
    MemberAssign @[3] { };
   };

   ProgEl_List @.prog_code = [4] {
    If @[0] { 
     ProgEl_List @.true_code = [12] {
      MemberAssign @[0] { };
      MemberAssign @[1] { };
      DataVarProg @[2] { };
      DataVarProg @[3] { };
      ProgramCall @[4] { 
       ProgArg_List @.prog_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[5] { 
       ProgArg_List @.meth_args = [11] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
	ProgArg @[7] { };
	ProgArg @[8] { };
	ProgArg @[9] { };
	ProgArg @[10] { };
       };
      };
      MethodCall @[6] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      Comment @[7] { };
      MethodCall @[8] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MethodCall @[9] { 
       ProgArg_List @.meth_args = [5] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
       };
      };
      AssignExpr @[10] { };
      DataVarProg @[11] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    DoneWritingDataRow @[3] { };
   };
  };
  Program @[6] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [0] {
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [1] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program @[7] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [0] {
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [2] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [5] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program @[8] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [0] {
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [1] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [5] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
     };
    };
   };
  };
  Program @[9] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [5] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MemberAssign @[1] { };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MemberAssign @[4] { };
   };
  };
  Program @[10] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [3] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MemberAssign @[1] { };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program_Group @.gp[0] = [9] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [2] {
     NetCounterInit @[0] { };
     WhileLoop @[1] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [4] {
     RndSeed @[0] { };
     TimeUsedHR @[1] { };
     TimeUsed @[2] { };
     TimeUsed @[3] { };
    };

    ProgVar_List @.objs_vars = [4] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
    };

    ProgType_List @.types = [1] {
     DynEnumType @[0] { 
      DynEnumItem_List @.enums = [2] {
       DynEnumItem @[0] { };
       DynEnumItem @[1] { };
      };
     };
    };

    ProgVar_List @.args = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    ProgVar_List @.vars = [7] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
     ProgVar @[6] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [6] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     If @[3] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     Else @[4] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     IfGuiPrompt @[5] { 
      ProgEl_List @.yes_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[1] { };
      };
     };
    };

    ProgEl_List @.prog_code = [27] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     AssignExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MemberAssign @[3] { };
     PrintExpr @[4] { };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[6] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     PrintExpr @[8] { };
     PrintExpr @[9] { };
     MethodCall @[10] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[11] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[12] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     PrintExpr @[13] { };
     If @[14] { 
      ProgEl_List @.true_code = [1] {
       PrintExpr @[0] { };
      };
     };
     AssignExpr @[15] { };
     CssExpr @[16] { };
     MethodCall @[17] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[18] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     WhileLoop @[19] { 
      ProgEl_List @.loop_code = [3] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       IfBreak @[2] { };
      };
     };
     MethodCall @[20] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[21] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     CssExpr @[22] { };
     PrintExpr @[23] { };
     MethodCall @[24] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[25] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ProgramCall @[26] { 
      ProgArg_List @.prog_args = [0] {
      };
     };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [1] {
     DynEnumType @[0] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @[0] { };
       DynEnumItem @[1] { };
       DynEnumItem @[2] { };
      };
     };
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [10] {
     ProgramCall @[0] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     NetCounterInit @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @[3] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[4] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @[0] { };
       ProgVar @[1] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[5] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @[6] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [9] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @[7] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [8] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[8] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       ReturnExpr @[0] { };
      };
     };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
  Program_Group @.gp[1] = [8] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [1] {
     DynEnumType @[0] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @[0] { };
       DynEnumItem @[1] { };
       DynEnumItem @[2] { };
      };
     };
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [8] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
     ProgVar @[6] { };
     ProgVar @[7] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [14] {
     ProgramCall @[0] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     NetCounterInit @[1] { };
     MemberAssign @[2] { };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     If @[7] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[10] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MemberAssign @[11] { };
     ProgramCall @[12] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ProgramCall @[13] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [8] {
     NetCounterInit @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     WhileLoop @[2] { 
      ProgEl_List @.loop_code = [3] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       MethodCall @[2] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[4] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ProgramCall @[6] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[7] { };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @[0] { };
       ProgVar @[1] { };
      };
     };
     NetCounterInit @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[3] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @[4] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [9] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @[5] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [8] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[6] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     DataGroupProg @[1] { 
      DataOpList @.group_spec.ops = [3] {
       DataGroupEl @[0] { };
       DataGroupEl @[1] { };
       DataGroupEl @[2] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     UserScript @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @[7] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [2] {
     ActBasedRF @[0] { };
     DataTable @[1] { 
      DataTableCols @.data = [5] {
       float_Data @[0] { };
       float_Data @[1] { };
       float_Data @[2] { };
       float_Data @[3] { };
       float_Data @[4] { };
      };

      DataOpList @.last_sort_spec.ops = [0] {
      };
     };
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [4] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     Else @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @[0] { };
    PanelViewer @[1] { };
    T3PanelViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };

     T3Panel_List @.panels = [7] {
      T3Panel @[0] { 
       T3DataView_List @.root_view.children = [2] {
	NetView @[0] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [20] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	  ScaleRange @[5] { };
	  ScaleRange @[6] { };
	  ScaleRange @[7] { };
	  ScaleRange @[8] { };
	  ScaleRange @[9] { };
	  ScaleRange @[10] { };
	  ScaleRange @[11] { };
	  ScaleRange @[12] { };
	  ScaleRange @[13] { };
	  ScaleRange @[14] { };
	  ScaleRange @[15] { };
	  ScaleRange @[16] { };
	  ScaleRange @[17] { };
	  ScaleRange @[18] { };
	  ScaleRange @[19] { };
	 };
	};
	GridTableView @[1] { 
	 T3DataView_List @.children = [12] {
	  GridColView @[0] { };
	  GridColView @[1] { };
	  GridColView @[2] { };
	  GridColView @[3] { };
	  GridColView @[4] { };
	  GridColView @[5] { };
	  GridColView @[6] { };
	  GridColView @[7] { };
	  GridColView @[8] { };
	  GridColView @[9] { };
	  GridColView @[10] { };
	  GridColView @[11] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[1] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @[0] { 
	 T3DataView_List @.children = [1] {
	  GridColView @[0] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[2] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [8] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	  GraphColView @[5] { };
	  GraphColView @[6] { };
	  GraphColView @[7] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[3] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [4] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[4] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @[0] { 
	 T3DataView_List @.children = [5] {
	  GridColView @[0] { };
	  GridColView @[1] { };
	  GridColView @[2] { };
	  GridColView @[3] { };
	  GridColView @[4] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[5] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [6] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	  GraphColView @[5] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[6] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [5] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
      UserDataItem @[2] { };
      UserDataItem @[3] { };
      UserDataItem @[4] { };
      UserDataItem @[5] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
    UserDataItem @[6] { };
    UserDataItem @[7] { };
    UserDataItem @[8] { };
    UserDataItem @[9] { };
    UserDataItem @[10] { };
    UserDataItem @[11] { };
    UserDataItem @[12] { };
    UserDataItem @[13] { };
    UserDataItem @[14] { };
    UserDataItem @[15] { };
    UserDataItem @[16] { };
    UserDataItem @[17] { };
    UserDataItem @[18] { };
    UserDataItem @[19] { };
    UserDataItem @[20] { };
    UserDataItem @[21] { };
    UserDataItem @[22] { };
    UserDataItem @[23] { };
    UserDataItem @[24] { };
    UserDataItem @[25] { };
    UserDataItem @[26] { };
    UserDataItem @[27] { };
    UserDataItem @[28] { };
    UserDataItem @[29] { };
   };

   BaseSpec_Group @.specs = [3] {
    LeabraConSpec @[0] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraUnitSpec @[1] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    FullPrjnSpec @[2] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    BaseSpec_Group @.gp[0] = [23] { 
     LeabraUnitSpec @[0] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     LeabraUnitSpec @[1] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     LeabraUnitSpec @[2] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     LeabraLayerSpec @[3] { 
      BaseSpec_Group @.children = [4] {
       LeabraLayerSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @[2] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @[3] { 
	BaseSpec_Group @.children = [1] {
	 LeabraLayerSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
      };
     };
     LeabraLayerSpec @[4] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     LeabraConSpec @[5] { 
      BaseSpec_Group @.children = [4] {
       LeabraConSpec @[0] { 
	BaseSpec_Group @.children = [7] {
	 LeabraConSpec @[0] { 
	  BaseSpec_Group @.children = [1] {
	   LeabraConSpec @[0] { 
	    BaseSpec_Group @.children = [0] {
	    };

	    Schedule @.lrate_sched = [7] {
	     SchedItem @[0] { };
	     SchedItem @[1] { };
	     SchedItem @[2] { };
	     SchedItem @[3] { };
	     SchedItem @[4] { };
	     SchedItem @[5] { };
	     SchedItem @[6] { };
	    };
	   };
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 DeepCtxtConSpec @[2] { 
	  BaseSpec_Group @.children = [1] {
	   DeepCtxtConSpec @[0] { 
	    BaseSpec_Group @.children = [0] {
	    };

	    Schedule @.lrate_sched = [7] {
	     SchedItem @[0] { };
	     SchedItem @[1] { };
	     SchedItem @[2] { };
	     SchedItem @[3] { };
	     SchedItem @[4] { };
	     SchedItem @[5] { };
	     SchedItem @[6] { };
	    };
	   };
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 DeepCtxtConSpec @[3] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[4] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[5] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[6] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	};

	Schedule @.lrate_sched = [7] {
	 SchedItem @[0] { };
	 SchedItem @[1] { };
	 SchedItem @[2] { };
	 SchedItem @[3] { };
	 SchedItem @[4] { };
	 SchedItem @[5] { };
	 SchedItem @[6] { };
	};
       };
       LeabraConSpec @[1] { 
	BaseSpec_Group @.children = [5] {
	 LeabraConSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 DeepCtxtConSpec @[3] { 
	  BaseSpec_Group @.children = [1] {
	   DeepCtxtConSpec @[0] { 
	    BaseSpec_Group @.children = [0] {
	    };

	    Schedule @.lrate_sched = [7] {
	     SchedItem @[0] { };
	     SchedItem @[1] { };
	     SchedItem @[2] { };
	     SchedItem @[3] { };
	     SchedItem @[4] { };
	     SchedItem @[5] { };
	     SchedItem @[6] { };
	    };
	   };
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[4] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	};

	Schedule @.lrate_sched = [7] {
	 SchedItem @[0] { };
	 SchedItem @[1] { };
	 SchedItem @[2] { };
	 SchedItem @[3] { };
	 SchedItem @[4] { };
	 SchedItem @[5] { };
	 SchedItem @[6] { };
	};
       };
       LeabraConSpec @[2] { 
	BaseSpec_Group @.children = [6] {
	 LeabraConSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 DeepCtxtConSpec @[2] { 
	  BaseSpec_Group @.children = [1] {
	   DeepCtxtConSpec @[0] { 
	    BaseSpec_Group @.children = [0] {
	    };

	    Schedule @.lrate_sched = [7] {
	     SchedItem @[0] { };
	     SchedItem @[1] { };
	     SchedItem @[2] { };
	     SchedItem @[3] { };
	     SchedItem @[4] { };
	     SchedItem @[5] { };
	     SchedItem @[6] { };
	    };
	   };
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[3] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[4] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[5] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	};

	Schedule @.lrate_sched = [7] {
	 SchedItem @[0] { };
	 SchedItem @[1] { };
	 SchedItem @[2] { };
	 SchedItem @[3] { };
	 SchedItem @[4] { };
	 SchedItem @[5] { };
	 SchedItem @[6] { };
	};
       };
       LeabraConSpec @[3] { 
	BaseSpec_Group @.children = [5] {
	 LeabraConSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[3] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 DeepCtxtConSpec @[4] { 
	  BaseSpec_Group @.children = [1] {
	   DeepCtxtConSpec @[0] { 
	    BaseSpec_Group @.children = [0] {
	    };

	    Schedule @.lrate_sched = [7] {
	     SchedItem @[0] { };
	     SchedItem @[1] { };
	     SchedItem @[2] { };
	     SchedItem @[3] { };
	     SchedItem @[4] { };
	     SchedItem @[5] { };
	     SchedItem @[6] { };
	    };
	   };
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	};

	Schedule @.lrate_sched = [7] {
	 SchedItem @[0] { };
	 SchedItem @[1] { };
	 SchedItem @[2] { };
	 SchedItem @[3] { };
	 SchedItem @[4] { };
	 SchedItem @[5] { };
	 SchedItem @[6] { };
	};
       };
      };

      Schedule @.lrate_sched = [7] {
       SchedItem @[0] { };
       SchedItem @[1] { };
       SchedItem @[2] { };
       SchedItem @[3] { };
       SchedItem @[4] { };
       SchedItem @[5] { };
       SchedItem @[6] { };
      };
     };
     LeabraBiasSpec @[6] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.lrate_sched = [7] {
       SchedItem @[0] { };
       SchedItem @[1] { };
       SchedItem @[2] { };
       SchedItem @[3] { };
       SchedItem @[4] { };
       SchedItem @[5] { };
       SchedItem @[6] { };
      };
     };
     GpTesselPrjnSpec @[7] { 
      BaseSpec_Group @.children = [0] {
      };

      GpTessEl_List @.send_gp_offs = [9] {
       GpTessEl @[0] { };
       GpTessEl @[1] { };
       GpTessEl @[2] { };
       GpTessEl @[3] { };
       GpTessEl @[4] { };
       GpTessEl @[5] { };
       GpTessEl @[6] { };
       GpTessEl @[7] { };
       GpTessEl @[8] { };
      };
     };
     GpTesselPrjnSpec @[8] { 
      BaseSpec_Group @.children = [0] {
      };

      GpTessEl_List @.send_gp_offs = [25] {
       GpTessEl @[0] { };
       GpTessEl @[1] { };
       GpTessEl @[2] { };
       GpTessEl @[3] { };
       GpTessEl @[4] { };
       GpTessEl @[5] { };
       GpTessEl @[6] { };
       GpTessEl @[7] { };
       GpTessEl @[8] { };
       GpTessEl @[9] { };
       GpTessEl @[10] { };
       GpTessEl @[11] { };
       GpTessEl @[12] { };
       GpTessEl @[13] { };
       GpTessEl @[14] { };
       GpTessEl @[15] { };
       GpTessEl @[16] { };
       GpTessEl @[17] { };
       GpTessEl @[18] { };
       GpTessEl @[19] { };
       GpTessEl @[20] { };
       GpTessEl @[21] { };
       GpTessEl @[22] { };
       GpTessEl @[23] { };
       GpTessEl @[24] { };
      };
     };
     TiledGpRFPrjnSpec @[9] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     TiledGpRFPrjnSpec @[10] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     TiledGpRFPrjnSpec @[11] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     TiledGpRFPrjnSpec @[12] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     TiledGpRFPrjnSpec @[13] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     TiledGpRFPrjnSpec @[14] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     TiledGpRFPrjnSpec @[15] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     TiledGpRFPrjnSpec @[16] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     TiledGpRFPrjnSpec @[17] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     OneToOnePrjnSpec @[18] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     GpOneToOnePrjnSpec @[19] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     TesselPrjnSpec @[20] { 
      BaseSpec_Group @.children = [0] {
      };

      TessEl_List @.send_offs = [1] {
       TessEl @[0] { };
      };
     };
     TesselPrjnSpec @[21] { 
      BaseSpec_Group @.children = [0] {
      };

      TessEl_List @.send_offs = [4] {
       TessEl @[0] { };
       TessEl @[1] { };
       TessEl @[2] { };
       TessEl @[3] { };
      };
     };
     TiledNovlpPrjnSpec @[22] { 
      BaseSpec_Group @.children = [0] {
      };
     };
    };
    BaseSpec_Group @.gp[1] = [11] { 
     LeabraUnitSpec @[0] { 
      BaseSpec_Group @.children = [3] {
       LeabraUnitSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraUnitSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraUnitSpec @[2] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     LeabraLayerSpec @[1] { 
      BaseSpec_Group @.children = [5] {
       LeabraLayerSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @[2] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @[3] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @[4] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     LeabraConSpec @[2] { 
      BaseSpec_Group @.children = [5] {
       LeabraBiasSpec @[0] { 
	BaseSpec_Group @.children = [1] {
	 LeabraBiasSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	};

	Schedule @.lrate_sched = [7] {
	 SchedItem @[0] { };
	 SchedItem @[1] { };
	 SchedItem @[2] { };
	 SchedItem @[3] { };
	 SchedItem @[4] { };
	 SchedItem @[5] { };
	 SchedItem @[6] { };
	};
       };
       LeabraBiasSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [7] {
	 SchedItem @[0] { };
	 SchedItem @[1] { };
	 SchedItem @[2] { };
	 SchedItem @[3] { };
	 SchedItem @[4] { };
	 SchedItem @[5] { };
	 SchedItem @[6] { };
	};
       };
       LeabraConSpec @[2] { 
	BaseSpec_Group @.children = [3] {
	 LeabraConSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	};

	Schedule @.lrate_sched = [7] {
	 SchedItem @[0] { };
	 SchedItem @[1] { };
	 SchedItem @[2] { };
	 SchedItem @[3] { };
	 SchedItem @[4] { };
	 SchedItem @[5] { };
	 SchedItem @[6] { };
	};
       };
       LeabraConSpec @[3] { 
	BaseSpec_Group @.children = [10] {
	 LeabraConSpec @[0] { 
	  BaseSpec_Group @.children = [1] {
	   LeabraConSpec @[0] { 
	    BaseSpec_Group @.children = [0] {
	    };

	    Schedule @.lrate_sched = [7] {
	     SchedItem @[0] { };
	     SchedItem @[1] { };
	     SchedItem @[2] { };
	     SchedItem @[3] { };
	     SchedItem @[4] { };
	     SchedItem @[5] { };
	     SchedItem @[6] { };
	    };
	   };
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[3] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[4] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[5] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[6] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[7] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[8] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	 LeabraConSpec @[9] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [7] {
	   SchedItem @[0] { };
	   SchedItem @[1] { };
	   SchedItem @[2] { };
	   SchedItem @[3] { };
	   SchedItem @[4] { };
	   SchedItem @[5] { };
	   SchedItem @[6] { };
	  };
	 };
	};

	Schedule @.lrate_sched = [7] {
	 SchedItem @[0] { };
	 SchedItem @[1] { };
	 SchedItem @[2] { };
	 SchedItem @[3] { };
	 SchedItem @[4] { };
	 SchedItem @[5] { };
	 SchedItem @[6] { };
	};
       };
       DeepCtxtConSpec @[4] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [7] {
	 SchedItem @[0] { };
	 SchedItem @[1] { };
	 SchedItem @[2] { };
	 SchedItem @[3] { };
	 SchedItem @[4] { };
	 SchedItem @[5] { };
	 SchedItem @[6] { };
	};
       };
      };

      Schedule @.lrate_sched = [7] {
       SchedItem @[0] { };
       SchedItem @[1] { };
       SchedItem @[2] { };
       SchedItem @[3] { };
       SchedItem @[4] { };
       SchedItem @[5] { };
       SchedItem @[6] { };
      };
     };
     LeabraConSpec @[3] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.lrate_sched = [7] {
       SchedItem @[0] { };
       SchedItem @[1] { };
       SchedItem @[2] { };
       SchedItem @[3] { };
       SchedItem @[4] { };
       SchedItem @[5] { };
       SchedItem @[6] { };
      };
     };
     FullPrjnSpec @[4] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     OneToOnePrjnSpec @[5] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     TiledGpRFPrjnSpec @[6] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     TiledGpRFPrjnSpec @[7] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     TiledGpRFPrjnSpec @[8] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     TiledGpRFPrjnSpec @[9] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     LeabraConSpec @[10] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.lrate_sched = [7] {
       SchedItem @[0] { };
       SchedItem @[1] { };
       SchedItem @[2] { };
       SchedItem @[3] { };
       SchedItem @[4] { };
       SchedItem @[5] { };
       SchedItem @[6] { };
      };
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   Layer_Group @.layers = [0] {
    Layer_Group @.gp[0] = [1] { 
     LeabraLayer @[0] { 
      Projection_List @.projections = [0] {
      };
     };
    };
    Layer_Group @.gp[1] = [4] { 
     LeabraLayer @[0] { 
      Projection_List @.projections = [2] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
      };
     };
     LeabraLayer @[1] { 
      Projection_List @.projections = [2] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
      };
     };
     LeabraLayer @[2] { 
      Projection_List @.projections = [2] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
      };
     };
     LeabraLayer @[3] { 
      Projection_List @.projections = [2] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
      };
     };
    };
    Layer_Group @.gp[2] = [4] { 
     LeabraLayer @[0] { 
      Projection_List @.projections = [5] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
       LeabraPrjn @[4] { };
      };
     };
     LeabraLayer @[1] { 
      Projection_List @.projections = [5] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
       LeabraPrjn @[4] { };
      };
     };
     LeabraLayer @[2] { 
      Projection_List @.projections = [1] {
       LeabraPrjn @[0] { };
      };
     };
     LeabraLayer @[3] { 
      Projection_List @.projections = [1] {
       LeabraPrjn @[0] { };
      };
     };
    };
    Layer_Group @.gp[3] = [1] { 
     LeabraLayer @[0] { 
      Projection_List @.projections = [6] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
       LeabraPrjn @[4] { };
       LeabraPrjn @[5] { };
      };
     };
    };
    Layer_Group @.gp[4] = [1] { 
     LeabraLayer @[0] { 
      Projection_List @.projections = [4] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
      };
     };
    };
    Layer_Group @.gp[5] = [1] { 
     LeabraLayer @[0] { 
      Projection_List @.projections = [2] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
      };
     };
    };
    Layer_Group @.gp[6] = [1] { 
     LeabraLayer @[0] { 
      Projection_List @.projections = [1] {
       LeabraPrjn @[0] { };
      };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects[0] {
 name="vis_bench_lg";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 license {
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2017";
  custom=;
 };
 pub_cite=;
 wiki {wiki="": page_name="": };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ProjectDocs";
   desc=;
   web_doc=1;
   wiki="CCN";
   url="CCNBook/Sims/Perception/Objrec";
   full_url="https://grey.colorado.edu/CompCogNeuro/index.php/CCNBook/Sims/Perception/Objrec";
   text_size=1;
   text="<html>
<head></head>
<body>
= Object Recognition =

* To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can always return by clicking on the <code>ProjectDocs</code> tab at the top of this middle panel.

== Network Structure ==

We begin by looking at the network structure.  This model uses an updated visual processing front end, which results in significantly better performance in this model and other larger-scale models.  It goes straight from the visual input image through oriented edge detectors in the V1 layer, so there is no separate LGN structure in the model (in contrast to model described in the textbook).  The V1 layer has a 10x10 large-scale grid structure, where each of these grid elements represents one hypercolumn of units. Each hypercolumn contains a group of 8 (4x2) units, which process a localized patch of the input image.  Neighboring groups process half-overlapping regions of the image.  In addition to connectivity, these groups organize the inhibition within the layer.  The kWTA level is set to 1 unit within a V1 column, and there is a special more flexible inhibition scheme that spreads this inhibition across different columns: each column gets the maximum of its own inhibition or .6 times the inhibition of the column in the layer that has the highest inhibition level.  This ensures that columns not receiving a significantly strong input will not be active (because they would require less than the .6 * max inhibition), while those that do receive a strong input compute their own standard kwta value.  This dynamic could be achieved through diffuse lateral excitatory connections between columns synapsing onto inhibitory interneurons, and a nonlinear integration of this excitation. 

The V2 layer is also organized into a grid of hypercolumns, this time 4x4 in size, with each hypercolumn having 36 units (6x6).  As with V1, inhibition operates at both the hypercolumn and entire layer scales here, with 10%  activity per hypercolumn.  Each hypercolumn of V2 units receives from 4x4 V1 hypercolumns, with neighboring columns again having half-overlapping receptive fields.  Next, the V4_IT layer represents just a single hypercolumn of units (10x10 or 100 units) within a single inhibitory group, and receives from the entire V2 layer.  Finally, the Output layer has 20 units, one for each of the different objects.

* You can view the patterns of connectivity described above by clicking on r.wt, and then on units in the various layers.

== Training ==

Now, let's see how the network is trained.  

* First, go back to viewing act in the networks display.  Then, do <code>Train: Init</code> and <code>Step Settle</code> in the control panel.

You will see the minus phase of settling for the input image, which is one of the shapes shown in Figure 8.12 in the textbook, at a random location, size and slight rotation in the plane.  The full bitmap image is shown in the display on the upper right of the network, and the patterns on the V1 input layer are the result of processing with oriented edge detctor filters, like those that developed in the v1rf model.  ''Note that this differs from the original model described in the text.''

* Press Step Settle again to see the plus phase.  You can then continue to Step Trial through a series of inputs to get a feel for what some of the different input patterns look like.

Because it takes a while for this network to be trained, we will just load the weights from a trained network.  The network was trained for 100 epochs of 100 object inputs per epoch, or 10,000 object presentations. However, it took only roughly 50 epochs (5,000 object presentations) for performance to approach asymptote. With all of the variation in the way a given input can be presented, this does not represent all that much sampling of the space of variability.

* Load the weights using <code>LoadWeights</code> on the control panel, and select <code>objrec_train1.wts.gz</code>.  Then, Step Settle a couple of times to see the minus and plus phases of the trained network as it performs the object recognition task.

You should see that the plus and minus phase output states are usually the same, meaning that the network is correctly recognizing most of the objects being presented. 

To provide a more comprehensive test of its performance, you can run the testing program, which runs through 1000 presentations of the objects and records the overall level of error.  Because this may take a while, you can also just load the resulting log file.

* To run the test, do Test: Init and Run.  To load the log file, do <code>LoadTestData</code> and select <code>objrec_test1.tst.dat</code>, and then click on the [[.T3Tab.TestErrorData]] to see the resulting graph.

You will see that error rates are generally below 5% (and often zero) except for the two final objects which the network was never trained on (which it always gets wrong).  Thus, the network shows quite good performance at this challenging task of recognizing objects in a location-invariant and size-invariant manner.

== Receptive Field Analysis ==

Having seen that the network is solving this difficult problem, the obvious next question is, \"how?\".  To answer this, we need to examine how input patterns are transformed over the successive layers of the network.  We do this by computing the ''receptive fields'' of units in the V2 and V4_IT layers.  The receptive field essentially means the range of different stimuli that a given unit in the network responds to -- what it is tuned to detect.  During the Test process, the system computes an activation-based receptive field for the layer listed in the control panel (ActBasedRField trg_lay_name), which should be V2 to start with.

The activation-based receptive field computes the patterns of activity across all the layers in the network, weighted by the activity of the units in the target layer.  If a target unit (e.g., a unit in V2) is not active, then the current activity pattern across all the other layers doesn't count toward that unit's overall receptive field.  When the unit is active, the activity patterns do count, and do so in proportion to the unit's activity.  This weighted-average computation ends up producing a useful aggregate picture of what tends to activate that unit.  Of particular interest is activity in the Image layer, which is just a copy of the input image, not directly connected to anything, and used only for this statistic.

* Click on the [[.T3Tab.ActRFData]] tab -- if you ran the test above, then the results for V2 should be there.  Otherwise, in the ActRFData middle panel tab, at the bottom, click on <code>Load Any Data</code> and select <code>objrec_actrf_v2.dat</code>, which should then populate the display with lots of colorful data.  You can also use the Load ActRFData button in the control panel to do the same thing.

The columns show the different layers of the network, with the right-most one being the input Image column, which we will focus on first.  Change to the red arrow (interactive) mode (can also just press the ESC key after clicking in the right panel), and scroll the right scroll bar down, while noting the kinds of patterns you observe in the Image column.  Each row of the table corresponds to a different V2 unit -- you can see which one by noting the brightest yellow unit in the V2 layer -- it starts in the lower left and goes within hypercolumn first, to the upper right.

As shown schematically in Figure 8.10 in the textbook, you should see that these V2 units are encoding simple conjunctions of line elements, in a small range of locations within the retinal input.  The fact that the respond across multiple locations makes the weight patterns seem somewhat smeared out, but that is a good indication that they are performing a critical invariance role.

<hr>

'''Question 8.4''' <em> Explain the significance of the level of conjunctive representations and spatial invariance observed in the V2 receptive fields, in terms of the overall computation performed by the network.</em>

<hr>

* Continue to scroll through the V2 units, but now notice the activation based receptive field for the Output units.

You should see that there are typically a handfull of output units (i.e., objects) that each V2 unit is strongly co-activated with. This indicates a distributed representation, where each V2 unit participates in encoding multiple different objects.

<hr>

'''Question 8.5''' <em> Using the images of the objects shown in Figure 8.12 in the textbook, (which are in the same configuration as the output units), explain one V2 unit's participation in a particular output representation based on the features shown in its input receptive fields.  (Hint: Pick a unit that is particularly selective for specific input patterns and specific output units, because this makes things easier to see.)</em>

<hr>

* Next, do LoadActRFData to load the <code>objrec_actrf_v4it.dat</code> data for the V4_IT layer.  Scroll through to observe the activation based receptive fields for the Image inputs and the Output layer.

You should observe much more complex patterns of line orientations, distributed over more of the input, and fewer, more strongly-defined Output receptive fields.  

<hr>

'''Question 8.6''' <em> Based on your probing of the V4 units, do they appear to code for entire objects, or just parts of different objects?  Explain.</em>

<hr>

One can also compare the relative selectivity of these V4 units for particular output units (objects) as compared to the V2 units.  By focusing specifically on the number of objects a given unit clearly ''doesn't'' participate in, it should be clear that the V4 units are more selective than the V2 units, which substantiates the idea that the V4 units are encoding more complex combinations of features that are shared by fewer objects (thus making them more selective to particular subsets of objects.  Thus, we see evidence here of the hierarchical increase in featural complexity required to encode featural relationships while also producing spatial invariance.

<hr>

'''Question 8.7''' <em> This question is no longer applicable, as the associated form of analysis is not used for this model anymore.  </em>

<hr>

== Summary and Discussion of Receptive Field Analyses ==

Using the activation-based receptive field technique, we have obtained some insight into the way this network performs spatially invariant object recognition, gradually over multiple levels of processing.  Similarly, the complexity of the featural representations increases with increasing levels in the hierarchy.  By doing both of these simultaneously and in stages over multiple levels, the network is able to recognize objects in an environment that depends critically on the detailed spatial arrangement of the constituent features, thereby apparently avoiding the binding problem described previously.

You may be wondering why the V2 and V4 representations have their respective properties -- why did the network develop in this way?  In terms of the degree of spatial invariance, it should be clear that the patterns of connectivity restrict the degree of invariance possible in V2, whereas the V4 neurons receive from the entire visual field (in this small-scale model), and so are in a position to have fully invariant representations.  Also, the V4 representations can be more invariant, and more complex because they build off of limited invariance and featural complexity in the V2 layer.  This ability for subsequent layers to build off of the transformations performed in earlier layers is a central general principle of cognition (see Chapter 7 in the textbook).

The representational properties you observed here can have important functional implications.  For example, in the next section, we will see that the nature of the V4 representations can play an important role in enabling the network to generalize effectively.  To the extent that V4 representations encode complex object features, and not objects themselves, these representations can be reused for novel objects.  Because the network can already form relatively invariant versions of these V4 representations, their reuse for novel objects will mean that the invariance transformation itself will generalize to novel objects.

== Generalization Test ==

In addition to all of the above receptive field measures of the network's performance, we can perform a behavioral test of its ability to generalize in a spatially invariant manner, using the two objects (numbers 18 and 19 in Figure 8.12) that were not presented to the network during training.  We can now train on these two objects in a restricted set of spatial locations and sizes, and assess the network's ability to respond to these items in novel locations and sizes.  Presumably, the bulk of what the network needs to do is learn an association between the V4_IT representations and the appropriate output units, and good generalization should result to all other spatial locations.

In addition to presenting the novel objects during training, we also need to present familiar objects; otherwise the network will suffer from ''catastrophic interference'' (see textbook Chapters 7 and 9 for more discussion of this issue).  The following procedure was used.  On each trial, there was a 1 in 4 chance that a novel object would be presented, and 3 in 4 chance that a familiar one was presented.  If a novel object was presented, its location, scaling and rotation parameters were chosen using .5 of the maximum range of these values in the original training.  Given that these 4 factors (translation in x, translation in y, size, and rotation) are combinatorial, that means that roughly .5^4  or .0625 of the total combinatorial space was explored.  If a familiar object was presented, then its size and position was chosen completely at random from all the possibilities.  This procedure was repeated for 60 epochs of 100 objects per epoch, with a learning rate of .01 for 10 epochs followed by .001 for 50.  Importantly, the learning rate in everything but the V4_IT to Output connections was set to zero, to restrict learning to that pathway and minimize interference to these deeper pathways.  In the brain, it is very likely that these earlier areas of the visual system experience less plasticity than higher areas as the system matures.

* To setup the system for this form of generalization training, click the GenTrain button in the Control Panel.  This loads the objrec_train1.wts.gz weights, sets the epoch counter to 90 to get a learning rate of .01 for 10 epochs, and sets the environment generation to be of the form described above.  Once you do this, you can just do Train: Init and '''NOT''' initialize the weights, followed by Run.  This could take 10s of minutes to several hours, depending on your computer.  Thus, you can bypass this step by doing LoadWeights and selecting the objrec_train2.wts.gz file

* After the network is trained, you can then run the testing (Test: Init, Run) as before, or just load the test data from objrec_test2.tst.dat.

The results show that the network got around 80% correct (roughly 20% error) on the new 18 and 19 patterns.  This is given training on only 6% of the space, suggesting that the network has learned generalized invariance transforms that can be applied to novel objects.  Given the restriction of learning to the V4_IT to Output pathway, we can be certain that no additional learning in lower pathways had to be done to encode these novel objects.

To summarize, these generalization results demonstrate that the hierarchical series of representations can operate effectively on novel stimuli, as long as these stimuli possess structural features in common with other familiar objects.  The network has learned to represent combinations of these features in terms of increasingly complex combinations that are also increasingly spatially invariant.  In the present case, we have facilitated generalization by ensuring that the novel objects are built out of the same line features as the other objects.  Although we expect that natural objects also share a vocabulary of complex features, and that learning would discover and exploit them to achieve a similarly generalizable invariance mapping, this remains to be demonstrated for more realistic kinds of objects. One prediction that this model makes is that the generalization of the invariance mapping will likely be a function of featural similarity with known objects, so one might expect a continuum of generalization performance in people (and in a more elaborate model).

</body>
</html>
";
   html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\"><title>CCNBook/Sims/Perception/Objrec - Computational Cognitive Neuroscience Wiki</title>
<meta name=\"generator\" content=\"MediaWiki 1.22.14\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/CompCogNeuro/opensearch_desc.php\" title=\"Computational Cognitive Neuroscience Wiki (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/CompCogNeuro/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"Computational Cognitive Neuroscience Wiki Atom feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=atom\">
<link rel=\"stylesheet\" href=\"https://grey.colorado.edu/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=ext.rtlcite%7Cmediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*\">
<link rel=\"stylesheet\" href=\"/CompCogNeuro/extensions/HeaderTabs/skins-jquery/ext.headertabs.jquery-large.css\"><meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"https://grey.colorado.edu/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*\">
<style>a:lang(ar),a:lang(ckb),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}.mw-editsection{display:none}
/* cache key: compcogneuro:resourceloader:filter:minify-css:7:e574a44ae23fd78ac104b2dd7100973a */</style>

<script src=\"https://grey.colorado.edu/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*\"></script><script src=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=20141215T005424Z\"></script>
<script>if(window.mw){
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":false,\"wgNamespaceNumber\":0,\"wgPageName\":\"CCNBook/Sims/Perception/Objrec\",\"wgTitle\":\"CCNBook/Sims/Perception/Objrec\",\"wgCurRevisionId\":4616,\"wgRevisionId\":4616,\"wgArticleId\":653,\"wgIsArticle\":true,\"wgIsRedirect\":false,\"wgAction\":\"view\",\"wgUserName\":null,\"wgUserGroups\":[\"*\"],\"wgCategories\":[],\"wgBreakFrames\":false,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"CCNBook/Sims/Perception/Objrec\",\"wgIsProbablyEditable\":false,\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"htTabIndexes\":[],\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgWikiEditorEnabledModules\":{\"toolbar\":true,\"dialogs\":true,\"hidesig\":true,\"templateEditor\":false,\"templates\":false,\"preview\":true,\"previewDialog\":false,\"publish\":false,\"toc\":false}});
}</script><script>if(window.mw){
mw.loader.implement(\"user.options\",function(){mw.user.options.set({\"ccmeonemails\":0,\"cols\":80,\"date\":\"default\",\"diffonly\":0,\"disablemail\":0,\"disablesuggest\":0,\"editfont\":\"default\",\"editondblclick\":0,\"editsection\":false,\"editsectiononrightclick\":0,\"enotifminoredits\":0,\"enotifrevealaddr\":0,\"enotifusertalkpages\":1,\"enotifwatchlistpages\":0,\"extendwatchlist\":0,\"fancysig\":0,\"forceeditsummary\":0,\"gender\":\"unknown\",\"hideminor\":0,\"hidepatrolled\":0,\"imagesize\":2,\"justify\":0,\"math\":0,\"minordefault\":0,\"newpageshidepatrolled\":0,\"nocache\":0,\"noconvertlink\":0,\"norollbackdiff\":0,\"numberheadings\":0,\"previewonfirst\":0,\"previewontop\":1,\"rcdays\":7,\"rclimit\":50,\"rememberpassword\":0,\"rows\":25,\"searchlimit\":20,\"showhiddencats\":0,\"shownumberswatching\":1,\"showtoc\":1,\"showtoolbar\":1,\"skin\":\"vector\",\"stubthreshold\":0,\"thumbsize\":2,\"underline\":2,\"uselivepreview\":0,\"usenewrc\":0,\"vector-simplesearch\":1,\"watchcreations\":0,\"watchdefault\":0,\"watchdeletion\":0,\"watchlistdays\":3,\"watchlisthideanons\":0,\"watchlisthidebots\"
:0,\"watchlisthideliu\":0,\"watchlisthideminor\":0,\"watchlisthideown\":0,\"watchlisthidepatrolled\":0,\"watchmoves\":0,\"wllimit\":250,\"useeditwarning\":1,\"prefershttps\":1,\"vector-collapsiblenav\":1,\"vector-collapsibletabs\":1,\"vector-editwarning\":1,\"vector-expandablesearch\":1,\"vector-footercleanup\":1,\"usebetatoolbar\":1,\"usebetatoolbar-cgd\":1,\"wikieditor-preview\":1,\"upwiz_deflicense\":\"default\",\"upwiz_def3rdparty\":\"default\",\"upwiz_deflicensetype\":\"default\",\"language\":\"en\",\"variant-gan\":\"gan\",\"variant-iu\":\"iu\",\"variant-kk\":\"kk\",\"variant-ku\":\"ku\",\"variant-shi\":\"shi\",\"variant-sr\":\"sr\",\"variant-tg\":\"tg\",\"variant-uz\":\"uz\",\"variant-zh\":\"zh\",\"searchNs0\":true,\"searchNs1\":false,\"searchNs2\":false,\"searchNs3\":false,\"searchNs4\":false,\"searchNs5\":false,\"searchNs6\":false,\"searchNs7\":false,\"searchNs8\":false,\"searchNs9\":false,\"searchNs10\":false,\"searchNs11\":false,\"searchNs12\":false,\"searchNs13\":false,\"searchNs14\":false,\"searchNs15\":false,\"searchNs100\":false,\"extensionDrafts_enable\":true,\"variant\":\"en\"});},{},{});mw.
loader.implement(\"user.tokens\",function(){mw.user.tokens.set({\"editToken\":\"+\\\\\",\"patrolToken\":false,\"watchToken\":false});},{},{});
/* cache key: compcogneuro:resourceloader:filter:minify-js:7:373a684c2f44f4aba59ed1a79b242767 */
}</script>
<script>if(window.mw){
mw.loader.load([\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"mediawiki.legacy.ajax\",\"skins.vector.js\"]);
}</script><script src=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=jquery.client%2Ccookie%2CdelayedBind%2CmwExtension%7Cmediawiki.legacy.ajax%2Cwikibits%7Cmediawiki.notify%2Cutil%7Cmediawiki.page.startup%7Cskins.vector.js&amp;skin=vector&amp;version=20141215T020710Z&amp;*\"></script>
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/CompCogNeuro/skins/vector/csshover.min.htc\")}</style><![endif]--><script async=\"\" src=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=ext.Drafts%2Ccite%2Cheadertabs%7Cjquery.autoEllipsis%2CcheckboxShiftClick%2Chidpi%2ChighlightText%2CmakeCollapsible%2Cmw-jump%2Cplaceholder%2Csuggestions%2CtabIndex%7Cmediawiki.action.view.postEdit%7Cmediawiki.api%2Ccldr%2Chidpi%2CjqueryMsg%2Clanguage%2CsearchSuggest%2Cuser%7Cmediawiki.language.data%2Cinit%7Cmediawiki.libs.pluralruleparser%7Cmediawiki.page.ready%7Cskins.vector.collapsibleNav&amp;skin=vector&amp;version=20141215T020710Z&amp;*\"></script><script async=\"\" src=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=jquery.ui.core%2Ctabs%2Cwidget&amp;skin=vector&amp;version=20141215T020644Z&amp;*\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-CCNBook_Sims_Perception_Objrec skin-vector action-view vector-animateLayout\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>
			<div id=\"mw-js-message\" style=\"display:none;\"></div>
						<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\"><span dir=\"auto\">CCNBook/Sims/Perception/Objrec</span></h1>
			<div id=\"bodyContent\">
								<div id=\"siteSub\">From Computational Cognitive Neuroscience Wiki</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-navigation\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><div id=\"toc\" class=\"toc\"><div id=\"toctitle\"><h2>Contents</h2><span class=\"toctoggle\">&nbsp;[<a href=\"#\" class=\"internal\" id=\"togglelink\">hide</a>]&nbsp;</span></div>
<ul>
<li class=\"toclevel-1 tocsection-1\"><a href=\"#Object_Recognition_.28Spatially_Invariant.29\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Object Recognition (Spatially Invariant)</span></a></li>
<li class=\"toclevel-1 tocsection-2\"><a href=\"#Project_Documentation\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Project Documentation</span></a>
<ul>
<li class=\"toclevel-2 tocsection-3\"><a href=\"#Network_Structure\"><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Network Structure</span></a></li>
<li class=\"toclevel-2 tocsection-4\"><a href=\"#Training\"><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Training</span></a></li>
<li class=\"toclevel-2 tocsection-5\"><a href=\"#Receptive_Field_Analysis\"><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">Receptive Field Analysis</span></a></li>
<li class=\"toclevel-2 tocsection-6\"><a href=\"#Summary_and_Discussion_of_Receptive_Field_Analyses\"><span class=\"tocnumber\">2.4</span> <span class=\"toctext\">Summary and Discussion of Receptive Field Analyses</span></a></li>
<li class=\"toclevel-2 tocsection-7\"><a href=\"#Generalization_Test\"><span class=\"tocnumber\">2.5</span> <span class=\"toctext\">Generalization Test</span></a></li>
</ul>
</li>
</ul>
</div>

<h1><span class=\"mw-headline\" id=\"Object_Recognition_.28Spatially_Invariant.29\">Object Recognition (Spatially Invariant)</span></h1>
<ul>
<li> The project file: <a href=\"/mediawiki/sites/CompCogNeuro/images/a/a0/objrec.proj\" class=\"internal\" title=\"objrec.proj\">objrec.proj</a> (click and Save As to download, then open in <a href=\"/CompCogNeuro/index.php/Emergent\" title=\"Emergent\" class=\"mw-redirect\">Emergent</a>
</li>
<li> Additional files for training log files and pretrained weights (recommended):
<ul>
<li> <a href=\"/mediawiki/sites/CompCogNeuro/images/8/85/objrec_train1.wts.gz\" class=\"internal\" title=\"objrec train1.wts.gz\">objrec_train1.wts.gz</a>
</li>
<li> <a href=\"/mediawiki/sites/CompCogNeuro/images/5/51/objrec_test1.tst.dat\" class=\"internal\" title=\"objrec test1.tst.dat\">objrec_test1.tst.dat</a>
</li>
<li> <a href=\"/mediawiki/sites/CompCogNeuro/images/7/74/objrec_train2.wts.gz\" class=\"internal\" title=\"objrec train2.wts.gz\">objrec_train2.wts.gz</a>
</li>
<li> <a href=\"/mediawiki/sites/CompCogNeuro/images/b/b3/objrec_test2.tst.dat\" class=\"internal\" title=\"objrec test2.tst.dat\">objrec_test2.tst.dat</a>
</li>
<li> <a href=\"/mediawiki/sites/CompCogNeuro/images/b/b5/objrec_actrf_v4.dat\" class=\"internal\" title=\"objrec actrf v4.dat\">objrec_actrf_v4.dat</a>
</li>
<li> <a href=\"/mediawiki/sites/CompCogNeuro/images/2/2c/objrec_actrf_it.dat\" class=\"internal\" title=\"objrec actrf it.dat\">objrec_actrf_it.dat</a>
</li>
</ul>
</li>
<li> Optional additional files
<ul>
<li> <a href=\"/mediawiki/sites/CompCogNeuro/images/8/8d/objrec_train1.epc.dat\" class=\"internal\" title=\"objrec train1.epc.dat\">objrec_train1.epc.dat</a>
</li>
<li> <a href=\"/mediawiki/sites/CompCogNeuro/images/4/46/objrec_train2.epc.dat\" class=\"internal\" title=\"objrec train2.epc.dat\">objrec_train2.epc.dat</a>
</li>
</ul>
</li>
</ul>
<p>Back to <a href=\"/CompCogNeuro/index.php/CCNBook/Sims/All\" title=\"CCNBook/Sims/All\">CCNBook/Sims/All</a> or <a href=\"/CompCogNeuro/index.php/CCNBook/Perception\" title=\"CCNBook/Perception\">Perception</a>.
</p>
<h1><span class=\"mw-headline\" id=\"Project_Documentation\">Project Documentation</span></h1>
<p>This simulation explores how a hierarchy of areas in the ventral stream of visual processing (up to inferotemporal (IT) cortex) can produce robust object recognition that is invariant to changes in position, size, etc of retinal input images.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> It is recommended that you <a href=\"/CompCogNeuro/index.php?title=.docs.ProjectDocs.EditDialog()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".docs.ProjectDocs.EditDialog() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">click here to undock</span></a> this document from the main project window. Use the Window menu to find this window if you lose it, and you can always return to this document by browsing to this document from the <span style=\"background:#FFFFD0\"><tt><b>docs</b></tt></span> section in the left browser panel of the project's main window. <br>
</td></tr>
</tbody></table>
<h2><span class=\"mw-headline\" id=\"Network_Structure\">Network Structure</span></h2>
<p>We begin by looking at the network structure, which goes from V1 to V4 to IT and then Output, where the name of the object is represented (area V2 is not represented in this model, because it is though to be important for depth and figure-ground encoding which is not relevant here).  The V1 layer has a 10x10 large-scale grid structure, where each of these grid elements represents one hypercolumn of units. Each hypercolumn contains a group of 8 (4x2) units, which process a localized patch of the input image.  Neighboring groups process half-overlapping regions of the image.  In addition to connectivity, these groups organize the inhibition within the layer.  This means that there is both inhibitory competition across the whole V1 layer, but there is a greater degree of competition within a single hypercolumn, reflecting the fact that inhibitory neurons within a local region of cortex are more likely to receive input from neighboring excitatory neurons. This effect is approximated by having the FFFB inhibition operate at two scales at the same time: a stronger level of inhibition within the unit group (hypercolumn), and a lower level of inhibition across all units in the layer. This ensures that columns not receiving a significantly strong input will not be active at all (because they would get squashed from the layer-level inhibition generated by other columns with much more excitation), while there is also a higher level of competition to select the most appropriate features within the hypercolumn.  
</p><p>The V4 layer is also organized into a grid of hypercolumns, this time 4x4 in size, with each hypercolumn having 36 units (6x6).  As with V1, inhibition operates at both the hypercolumn and entire layer scales here.  Each hypercolumn of V4 units receives from 4x4 V1 hypercolumns, with neighboring columns again having half-overlapping receptive fields.  Next, the IT layer represents just a single hypercolumn of units (10x10 or 100 units) within a single inhibitory group, and receives from the entire V4 layer.  Finally, the Output layer has 20 units, one for each of the different objects.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> You can view the patterns of connectivity described above by clicking on <span style=\"background:#FFFFD0\"><tt><b>r.wt</b></tt></span>, and then on units in the various layers. <br>
</td></tr>
</tbody></table>
<h2><span class=\"mw-headline\" id=\"Training\">Training</span></h2>
<div class=\"thumb tright\"><div class=\"thumbinner\" style=\"width:202px;\"><a href=\"/CompCogNeuro/index.php/File:fig_objrec_objs.png\" class=\"image\"><img alt=\"\" src=\"/mediawiki/sites/CompCogNeuro/images/thumb/d/d3/fig_objrec_objs.png/200px-fig_objrec_objs.png\" width=\"200\" height=\"201\" class=\"thumbimage\" srcset=\"/mediawiki/sites/CompCogNeuro/images/thumb/d/d3/fig_objrec_objs.png/300px-fig_objrec_objs.png 1.5x, /mediawiki/sites/CompCogNeuro/images/thumb/d/d3/fig_objrec_objs.png/400px-fig_objrec_objs.png 2x\"></a>  <div class=\"thumbcaption\"><div class=\"magnify\"><a href=\"/CompCogNeuro/index.php/File:fig_objrec_objs.png\" class=\"internal\" title=\"Enlarge\"><img src=\"/CompCogNeuro/skins/common/images/magnify-clip.png\" width=\"15\" height=\"11\" alt=\"\"></a></div>Set of 20 objects composed from horizontal and vertical line elements used for the object recognition simulation.  By using a restricted set of visual feature elements, we can more easily understand how the model works, and also test for generalization to novel objects (object 18 and 19 are not trained initially, and then subsequently trained only in a relatively few locations -- learning there generalizes well to other locations).</div></div></div>
<p>Now, let's see how the network is trained.  
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> First, go back to viewing act in the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.ObjrecNet&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.ObjrecNet (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Network</span></a> display.  Then, do <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraTrain.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraTrain.Init() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Init</span></a> and <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Step Settle</tt></span> in the <a href=\"/CompCogNeuro/index.php?title=.ctrl_panels.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".ctrl panels.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a>. <br>
</td></tr>
</tbody></table>
<p>You will see the <i>minus phase</i> of settling for the input image, which is one of the shapes shown in the figure at the right, at a random location, size and slight rotation in the plane.  The full bitmap image is shown in the display on the upper right of the network, and the patterns on the V1 input layer are the result of processing with oriented edge detctor filters, like those that developed in the v1rf model.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Press <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Step Settle</tt></span> again to see the <i>plus phase</i>.  You can then continue to <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Step Trial</tt></span> through a series of inputs to get a feel for what some of the different input patterns look like. <br>
</td></tr>
</tbody></table>
<p>Because it takes a while for this network to be trained, we will just load the weights from a trained network.  The network was trained for 50 epochs of 100 object inputs per epoch, or 5,000 object presentations. However, it took only roughly 25 epochs (2,500 object presentations) for performance to approach asymptote. With all of the variation in the way a given input can be presented, this does not represent all that much sampling of the space of variability.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Load the weights using <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>LoadWeights</tt></span> on the <a href=\"/CompCogNeuro/index.php?title=.ctrl_panels.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".ctrl panels.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a>, and select <span style=\"background:#FFFFD0\"><tt><b>objrec_train1.wts.gz</b></tt></span>.  Then, <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Step Settle</tt></span> a couple of times to see the minus and plus phases of the trained network as it performs the object recognition task. <br>
</td></tr>
</tbody></table>
<p>You should see that the plus and minus phase output states are usually the same, meaning that the network is correctly recognizing most of the objects being presented. 
</p><p>To provide a more comprehensive test of its performance, you can run the testing program, which runs through 1000 presentations of the objects and records the overall level of error.  Because this may take a while, you can also just load the resulting log file.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> To run the test, do: <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Init() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Test Init</span></a> and <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Run() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Test Run</span></a>.  To load the log file, do <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>LoadTestData</tt></span> and select <span style=\"background:#FFFFD0\"><tt><b>objrec_test1.tst.dat</b></tt></span>, and then click on the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.TestErrorData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.TestErrorData (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">TestErrorData</span></a> to see the resulting graph. <br>
</td></tr>
</tbody></table>
<p>You will see that error rates are generally below 5% (and often zero) except for the two final objects which the network was never trained on (which it always gets wrong).  Thus, the network shows quite good performance at this challenging task of recognizing objects in a location-invariant and size-invariant manner.
</p>
<h2><span class=\"mw-headline\" id=\"Receptive_Field_Analysis\">Receptive Field Analysis</span></h2>
<p>Having seen that the network is solving this difficult problem, the obvious next question is, \"how?\".  To answer this, we need to examine how input patterns are transformed over the successive layers of the network.  We do this by computing the <i>receptive fields</i> of units in the V4 and IT layers.  The receptive field essentially means the range of different stimuli that a given unit in the network responds to -- what it is tuned to detect.  During the Test process, the system computes an activation-based receptive field for the layer listed in the control panel (<span style=\"background:#FFFFD0\"><tt><b>ActBasedRField</b></tt></span> <span style=\"background:#FFFFD0\"><tt><b>trg_lay_name</b></tt></span>), which should be V4 to start with.
</p><p>In this procedure, we present all the input patterns to the network and record how units respond to them. If we are interested in which patterns activate, e.g., a given V4 unit, then we aggregate activity over other layers every time that V4 unit is active (and weighted by how much it is active). If for a given input pattern the target V4 unit is not active, then the current activity pattern across all the other layers doesn't count toward that unit's overall receptive field.  When the unit is active, the activity patterns do count, and do so in proportion to the unit's activity.  This weighted-average computation ends up producing a useful aggregate picture of what tends to activate that unit.  Of particular interest is activity in the Image layer, which is just a copy of the input image, not directly connected to anything, and used only for this statistic.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Click on the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.ActRFData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.ActRFData (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ActRFData</span></a> tab -- if you ran the test above, then the results for V4 should be there.  Otherwise, in the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.ActRFData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.ActRFData (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ActRFData</span></a> middle panel tab, at the bottom, click on <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Load Any Data</tt></span> and select <span style=\"background:#FFFFD0\"><tt><b>objrec_actrf_v4.dat</b></tt></span>, which should then populate the display with lots of colorful data.  You can also use the Load <a href=\"/CompCogNeuro/index.php?title=.T3Tab.ActRFData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.ActRFData (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ActRFData</span></a> button in the <a href=\"/CompCogNeuro/index.php?title=.ctrl_panels.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".ctrl panels.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a> to do the same thing. <br>
</td></tr>
</tbody></table>
<p>The columns show the different layers of the network, with the right-most one being the input Image column, which we will focus on first.  Change to the red arrow (interactive) mode (can also just press the ESC key after clicking in the right panel), and scroll the right scroll bar down, while noting the kinds of patterns you observe in the Image column.  Each row of the table corresponds to a different V4 unit, starting with the lower left unit and goes within hypercolumn first, to the upper right. (It will often be the brightest yellow unit in the V4 layer in the same row, because every time that unit is active, it is active! But not always: sometimes when a V4 unit is active, it might be part of an attractor whereby another unit is always active with it, and maybe even more so). 
</p><p>You should see that these V4 units are encoding simple conjunctions of line elements, in a relatively small range of locations within the retinal input.  The fact that the respond across multiple locations makes the weight patterns seem somewhat smeared out, but that is a good indication that they are performing a critical invariance role.
</p>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#90FF90;font-size:small\"><b>6.3:</b> Explain the significance of the level of conjunctive representations and spatial invariance observed in the V4 receptive fields, in terms of the overall computation performed by the network.<br>
</td></tr>
</tbody></table>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Continue to scroll through the V4 units, but now notice the activation based receptive field for the Output units. <br>
</td></tr>
</tbody></table>
<p>You should see that there are typically a handfull of output units (i.e., objects) that each V4 unit is strongly co-activated with. This indicates a distributed representation, where each V4 unit participates in encoding multiple different objects.
</p>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#90FF90;font-size:small\"><b>6.4:</b> Using the images of the objects shown above (which are in the same configuration as the output units), explain one V4 unit's participation in a particular output representation based on the features shown in its input receptive fields.  (Hint: Pick a unit that is particularly selective for specific input patterns and specific output units, because this makes things easier to see.)<br>
</td></tr>
</tbody></table>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Next, do <a href=\"/CompCogNeuro/index.php?title=.T3Tab.ActRFData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.ActRFData (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ActRFData</span></a> to load the <span style=\"background:#FFFFD0\"><tt><b>objrec_actrf_it.dat</b></tt></span> data for the IT layer.  Scroll through to observe the activation based receptive fields for the Image inputs and the Output layer. <br>
</td></tr>
</tbody></table>
<p>You should observe much more complex patterns of line orientations, distributed over more of the input, and fewer, more strongly-defined Output receptive fields.  
</p>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#90FF90;font-size:small\"><b>6.5:</b> Based on your probing of the IT units, do they appear to code for entire objects, or just parts of different objects?  Explain.<br>
</td></tr>
</tbody></table>
<hr>
<p>One can also compare the relative selectivity of these IT units for particular output units (objects) as compared to the V4 units.  By focusing specifically on the number of objects a given unit clearly <i>doesn't</i> participate in, it should be clear that the IT units are more selective than the V4 units, which substantiates the idea that the IT units are encoding more complex combinations of features that are shared by fewer objects (thus making them more selective to particular subsets of objects).  Thus, we see evidence here of the hierarchical increase in featural complexity required to encode featural relationships while also producing spatial invariance.
</p>
<h2><span class=\"mw-headline\" id=\"Summary_and_Discussion_of_Receptive_Field_Analyses\">Summary and Discussion of Receptive Field Analyses</span></h2>
<p>Using the activation-based receptive field technique, we have obtained some insight into the way this network performs spatially invariant object recognition, gradually over multiple levels of processing.  Similarly, the complexity of the featural representations increases with increasing levels in the hierarchy.  By doing both of these simultaneously and in stages over multiple levels, the network is able to recognize objects in an environment that depends critically on the detailed spatial arrangement of the constituent features, thereby apparently avoiding the binding problem described previously.
</p><p>You may be wondering why the V4 and IT representations have their respective properties -- why did the network develop in this way?  In terms of the degree of spatial invariance, it should be clear that the patterns of connectivity restrict the degree of invariance possible in V4, whereas the IT neurons receive from the entire visual field (in this small-scale model), and so are in a position to have fully invariant representations.  Also, the IT representations can be more invariant, and more complex because they build off of limited invariance and featural complexity in the V4 layer.  This ability for subsequent layers to build off of the transformations performed in earlier layers is a central general principle of cognition.
</p><p>The representational properties you observed here can have important functional implications.  For example, in the next section, we will see that the nature of the IT representations can play an important role in enabling the network to generalize effectively.  To the extent that IT representations encode complex object features, and not objects themselves, these representations can be reused for novel objects.  Because the network can already form relatively invariant versions of these IT representations, their reuse for novel objects will mean that the invariance transformation itself will generalize to novel objects.
</p>
<h2><span class=\"mw-headline\" id=\"Generalization_Test\">Generalization Test</span></h2>
<p>In addition to all of the above receptive field measures of the network's performance, we can perform a behavioral test of its ability to generalize in a spatially invariant manner, using the two objects (numbers 18 and 19 in above Figure) that were not presented to the network during training.  We can now train on these two objects in a restricted set of spatial locations and sizes, and assess the network's ability to respond to these items in novel locations and sizes.  Presumably, the bulk of what the network needs to do is learn an association between the IT representations and the appropriate output units, and good generalization should result to all other spatial locations.
</p><p>In addition to presenting the novel objects during training, we also need to present familiar objects; otherwise the network will suffer from <i>catastrophic interference</i>.  The following procedure was used.  On each trial, there was a 1 in 4 chance that a novel object would be presented, and 3 in 4 chance that a familiar one was presented.  If a novel object was presented, its location, scaling and rotation parameters were chosen using .5 of the maximum range of these values in the original training.  Given that these 4 factors (translation in x, translation in y, size, and rotation) are combinatorial, that means that roughly .5^4  or .0625 of the total combinatorial space was explored.  If a familiar object was presented, then its size and position was chosen completely at random from all the possibilities.  This procedure was repeated for just 20 epochs of 100 objects per epoch.  Importantly, the learning rate in everything but the IT &lt;-&gt; Output connections was set to zero, to restrict learning to that pathway and minimize interference to these deeper pathways.  In the brain, it is very likely that these earlier areas of the visual system experience less plasticity than higher areas as the system matures.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> To setup the system for this form of generalization training, click the <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>GenTrain</tt></span> button in the <a href=\"/CompCogNeuro/index.php?title=.ctrl_panels.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".ctrl panels.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a>.  This loads the <span style=\"background:#FFFFD0\"><tt><b>objrec_train1.wts.gz</b></tt></span> weights, sets the epoch counter to 30 to get it to train for 20 epochs up to the 50 epoch stopping point, and sets the environment generation to be of the form described above.  Once you do this, you can just do <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraTrain.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraTrain.Init() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Train Init</span></a> and <b>NOT</b> initialize the weights, followed by <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraTrain.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraTrain.Run() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Train Run</span></a>.  This should just take a few minutes, depending on your computer, but you can bypass this step by doing <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>LoadWeights</tt></span> and selecting the <span style=\"background:#FFFFD0\"><tt><b>objrec_train2.wts.gz</b></tt></span> file. <br>
</td></tr>
</tbody></table>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> After the network is trained, you can then run the testing (<a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Init() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Test Init</span></a>, <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Run() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Test Run</span></a>) as before, or just load the test data from <span style=\"background:#FFFFD0\"><tt><b>objrec_test2.tst.dat</b></tt></span>. <br>
</td></tr>
</tbody></table>
<p>The results show that the network got around 85% correct (15% error) on average across the new 18 and 19 patterns (with some interesting interference on pattern 13).  This is given training on only 6% of the space, suggesting that the network has learned generalized invariance transforms that can be applied to novel objects.  Given the restriction of learning to the IT to Output pathway, we can be certain that no additional learning in lower pathways had to be done to encode these novel objects.
</p><p>To summarize, these generalization results demonstrate that the hierarchical series of representations can operate effectively on novel stimuli, as long as these stimuli possess structural features in common with other familiar objects.  The network has learned to represent combinations of these features in terms of increasingly complex combinations that are also increasingly spatially invariant.  In the present case, we have facilitated generalization by ensuring that the novel objects are built out of the same line features as the other objects.  Although we expect that natural objects also share a vocabulary of complex features, and that learning would discover and exploit them to achieve a similarly generalizable invariance mapping, this remains to be demonstrated for more realistic kinds of objects. One prediction that this model makes is that the generalization of the invariance mapping will likely be a function of featural similarity with known objects, so one might expect a continuum of generalization performance in people (and in a more elaborate model).
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> You may now close the project (use the window manager close button on the project window or <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>File/Close Project</tt></span> menu item) and then open a new one, or just quit emergent entirely by doing <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Quit emergent</tt></span> menu option or clicking the close button on the root window. <br>
</td></tr>
</tbody></table>

<!-- 
NewPP limit report
CPU time usage: 0.228 seconds
Real time usage: 0.246 seconds
Preprocessor visited node count: 390/1000000
Preprocessor generated node count: 1371/1000000
Post?expand include size: 14912/2097152 bytes
Template argument size: 8431/2097152 bytes
Highest expansion depth: 5/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key compcogneuro:pcache:idhash:653-0!*!0!!en!2!* and timestamp 20141229052300
 -->
</div>								<div class=\"printfooter\">
				Retrieved from \"<a href=\"https://grey.colorado.edu/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;oldid=4616\">https://grey.colorado.edu/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;oldid=4616</a>\"				</div>
												<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>												<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>
			<div id=\"mw-head\">
				<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
	<h3 id=\"p-personal-label\">Personal tools</h3>
	<ul>
<li id=\"pt-createaccount\"><a href=\"/CompCogNeuro/index.php?title=Special:UserLogin&amp;returnto=CCNBook%2FSims%2FPerception%2FObjrec&amp;type=signup\">Create account</a></li><li id=\"pt-login\"><a href=\"/CompCogNeuro/index.php?title=Special:UserLogin&amp;returnto=CCNBook%2FSims%2FPerception%2FObjrec\" title=\"You are encouraged to log in; however, it is not mandatory [o]\" accesskey=\"o\">Log in</a></li>	<li><a href=\"/CompCogNeuro/index.php/CCNBook/Main\">CCN Book</a></li><li><a href=\"/CompCogNeuro/index.php/Special:RecentChanges\">Recent Changes</a></li><li><a href=\"/CompCogNeuro/index.php/Special:Upload\">Upload File</a></li><li><a href=\"/CompCogNeuro/index.php/Special:SpecialPages\">Special Pages</a></li><li><a href=\"/CompCogNeuro/index.php/Main_Page\">Main Page</a></li></ul>
</div>
				<div id=\"left-navigation\">
					<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
	<h3 id=\"p-namespaces-label\">Namespaces</h3>
	<ul>
					<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/CompCogNeuro/index.php/CCNBook/Sims/Perception/Objrec\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
					<li id=\"ca-talk\" class=\"new\"><span><a href=\"/CompCogNeuro/index.php?title=Talk:CCNBook/Sims/Perception/Objrec&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\">Discussion</a></span></li>
			</ul>
</div>
<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
	<h3 id=\"mw-vector-current-variant\">
		</h3>
	<h3 id=\"p-variants-label\" tabindex=\"0\"><span>Variants</span><a href=\"#\" tabindex=\"-1\"></a></h3>
	<div class=\"menu\">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id=\"right-navigation\">
					<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
	<h3 id=\"p-views-label\">Views</h3>
	<ul>
					<li id=\"ca-view\" class=\"selected\"><span><a href=\"/CompCogNeuro/index.php/CCNBook/Sims/Perception/Objrec\">Read</a></span></li>
					<li id=\"ca-viewsource\"><span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=edit\" title=\"This page is protected.
You can view its source [e]\" accesskey=\"e\">View source</a></span></li>
					<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
			</ul>
</div>
<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-cactions-label\">
	<h3 id=\"p-cactions-label\" tabindex=\"0\"><span>Actions</span><a href=\"#\" tabindex=\"-1\"></a></h3>
	<div class=\"menu\">
		<ul>
					</ul>
	</div>
</div>
<div id=\"p-search\" role=\"search\">
	<h3><label for=\"searchInput\">Search</label></h3>
	<form action=\"/CompCogNeuro/index.php\" id=\"searchform\">
				<div id=\"simpleSearch\">
						<input name=\"search\" placeholder=\"Search\" title=\"Search Computational Cognitive Neuroscience Wiki [f]\" accesskey=\"f\" id=\"searchInput\" tabindex=\"1\">						<button type=\"submit\" name=\"button\" title=\"Search the pages for this text\" id=\"searchButton\"><img src=\"/CompCogNeuro/skins/vector/images/search-ltr.png?303\" alt=\"Search\" width=\"12\" height=\"13\"></button>								<input type=\"hidden\" name=\"title\" value=\"Special:Search\">
		</div>
	</form>
</div>
				</div>
			</div>
			<div id=\"mw-panel\" class=\"collapsible-nav\">
					<div id=\"p-logo\" role=\"banner\"><a style=\"background-image: url(/mediawiki/sites//CompCogNeuro/logo.png);\" href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
				<div class=\"portal first persistent\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
	<h3 id=\"p-navigation-label\">Navigation</h3>
	<div class=\"body\">
		<ul>
			<li id=\"n-mainpage-description\"><a href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li>
			<li id=\"n-CCN-Book\"><a href=\"/CompCogNeuro/index.php/CCNBook/Main\">CCN Book</a></li>
			<li id=\"n-recentchanges\"><a href=\"/CompCogNeuro/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li>
			<li id=\"n-randompage\"><a href=\"/CompCogNeuro/index.php/Special:Random\" title=\"Load a random page [x]\" accesskey=\"x\">Random page</a></li>
			<li id=\"n-help\"><a href=\"https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents\" rel=\"nofollow\" title=\"The place to find out\">Help</a></li>
		</ul>
	</div>
</div>
<div class=\"portal expanded\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
	<h3 id=\"p-tb-label\" tabindex=\"2\"><a href=\"#\">Tools</a></h3>
	<div class=\"body\" style=\"display: block;\">
		<ul>
			<li id=\"t-whatlinkshere\"><a href=\"/CompCogNeuro/index.php/Special:WhatLinksHere/CCNBook/Sims/Perception/Objrec\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li>
			<li id=\"t-recentchangeslinked\"><a href=\"/CompCogNeuro/index.php/Special:RecentChangesLinked/CCNBook/Sims/Perception/Objrec\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li>
			<li id=\"t-specialpages\"><a href=\"/CompCogNeuro/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li>
			<li id=\"t-permalink\"><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;oldid=4616\" title=\"Permanent link to this revision of the page\">Permanent link</a></li>
			<li id=\"t-info\"><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=info\">Page information</a></li>
		</ul>
	</div>
</div>
<div class=\"portal collapsed\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
	<h3 id=\"p-coll-print_export-label\" tabindex=\"3\"><a href=\"#\">Print/export</a></h3>
	<div class=\"body\">
		<ul>
			<li id=\"coll-create_a_book\"><a href=\"/CompCogNeuro/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=CCNBook%2FSims%2FPerception%2FObjrec\">Create a book</a></li>
			<li id=\"coll-download-as-rl\"><a href=\"/CompCogNeuro/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=CCNBook%2FSims%2FPerception%2FObjrec&amp;oldid=4616&amp;writer=rl\">Download as PDF</a></li>
			<li id=\"t-print\"><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 24 August 2014, at 20:58.</li>
											<li id=\"footer-info-viewcount\">This page has been accessed 7,530 times.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-privacy\"><a href=\"/CompCogNeuro/index.php/Project:Privacy_policy\" title=\"Project:Privacy policy\">Privacy policy</a></li>
											<li id=\"footer-places-about\"><a href=\"/CompCogNeuro/index.php/Project:About\" title=\"Project:About\">About Computational Cognitive Neuroscience Wiki</a></li>
											<li id=\"footer-places-disclaimer\"><a href=\"/CompCogNeuro/index.php/Project:General_disclaimer\" title=\"Project:General disclaimer\">Disclaimers</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
					<li id=\"footer-copyrightico\">
						<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/3.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"http://i.creativecommons.org/l/by-sa/3.0/88x31.png\"></a><br>This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/3.0/\">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.
					</li>
					<li id=\"footer-poweredbyico\">
						<a href=\"//www.mediawiki.org/\"><img src=\"/CompCogNeuro/skins/common/images/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" width=\"88\" height=\"31\"></a>
					</li>
				</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({\"site\":\"loading\",\"user\":\"ready\",\"user.groups\":\"ready\"});
}</script>
<script>if(window.mw){
mw.loader.load([\"mediawiki.action.view.postEdit\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"ext.headertabs\",\"ext.Drafts\",\"ext.cite\",\"skins.vector.collapsibleNav\"],null,true);
}</script>
<script src=\"https://grey.colorado.edu/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*\"></script>
<!-- Served in 0.664 secs. -->
	

</body></html>";
  };
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {name="NO_CLIP": value=1: val_type_fixed=0: };
   };
   name="LeabraWizard_1";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  master_and_clones=0;
  ControlPanel @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ControlPanel";
   cp_state=REGULAR;
   updt_while_running=0;
   desc="overall control panel for object recognition model";
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="cycle_update_net_view";
     short_label=0;
     cust_label=1;
     desc=" boolean value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.programs.gp[0][5].vars[0]$$;
     mbr=ProgVar::bool_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[1] {
     label="input_type";
     short_label=1;
     cust_label=0;
     desc="testing input type -- type of patterns to test on";
     cust_desc=1;
     base=.programs.gp[1][0].vars[6].dyn_enum_val$$;
     mbr=DynEnum::value;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[2] {
     label="ActBasedRField_trg_layer_name";
     short_label=0;
     cust_label=1;
     desc=" string value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.programs.gp[1][7].vars[2]$$;
     mbr=ProgVar::string_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[3] {
     label="lowvis_sym";
     short_label=0;
     cust_label=1;
     desc=" if true, also symmetrize weights with those in reciprocal connections, during weight initialization process -- this is automatically turned off if the random variance (rnd.var) in the weights is set to 0 (e.g., for fixed weight patterns)";
     cust_desc=0;
     base=.networks[0].specs.gp[0][5].wt_limits$$;
     mbr=WeightLimits::sym;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[4] {
     label="highvis_sym";
     short_label=0;
     cust_label=1;
     desc=" if true, also symmetrize weights with those in reciprocal connections, during weight initialization process -- this is automatically turned off if the random variance (rnd.var) in the weights is set to 0 (e.g., for fixed weight patterns)";
     cust_desc=0;
     base=.networks[0].specs.gp[1][2].wt_limits$$;
     mbr=WeightLimits::sym;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[5] {
     label="lo_lrate";
     short_label=0;
     cust_label=1;
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     cust_desc=0;
     base=.networks[0].specs.gp[0][5]$$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[6] {
     label="hi_lrate";
     short_label=0;
     cust_label=1;
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     cust_desc=0;
     base=.networks[0].specs.gp[1][2]$$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[7] {
     label="rel_netin_on";
     short_label=0;
     cust_label=1;
     desc="[Default: true]  whether to compute relative netinput at all";
     cust_desc=0;
     base=.networks[0].rel_netin$$;
     mbr=RelNetinSched::on;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
    ControlPanelMethod @[0] {
     label="Train_Init";
     short_label=0;
     cust_label=1;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.programs.gp[0][1]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[1] {
     label="Run";
     short_label=0;
     cust_label=0;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.programs.gp[0][1]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[2] {
     label="Step";
     short_label=0;
     cust_label=0;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.programs.gp[0][1]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[3] {
     label="Stop";
     short_label=0;
     cust_label=0;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.programs.gp[0][1]$;
     mth=Program::Stop;
    };
    ControlPanelMethod @[4] {
     label="LoadWeights";
     short_label=0;
     cust_label=1;
     desc="Load pre-trained weights";
     cust_desc=1;
     base=.programs[6]$$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[5] {
     label="Test_Init";
     short_label=0;
     cust_label=1;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.programs.gp[1][0]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[6] {
     label="Run";
     short_label=0;
     cust_label=0;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.programs.gp[1][0]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[7] {
     label="Step";
     short_label=0;
     cust_label=0;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.programs.gp[1][0]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[8] {
     label="Stop";
     short_label=0;
     cust_label=0;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.programs.gp[1][0]$;
     mth=Program::Stop;
    };
    ControlPanelMethod @[9] {
     label="LoadTestData";
     short_label=0;
     cust_label=1;
     desc="Load summary data from Testing the network -- test1 is after initial training, and test2 is after generalization training";
     cust_desc=1;
     base=.programs[7]$$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[10] {
     label="LoadActRFData";
     short_label=0;
     cust_label=1;
     desc="Load activation-based receptive field data that was generated by running Test";
     cust_desc=1;
     base=.programs[8]$$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[11] {
     label="GenTrain";
     short_label=0;
     cust_label=1;
     desc="setup for generalization training";
     cust_desc=1;
     base=.programs[9]$$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[12] {
     label="RegTrain";
     short_label=0;
     cust_label=1;
     desc="reset back to regular training mode";
     cust_desc=1;
     base=.programs[10]$$;
     mth=Program::Run_Gui;
    };
   };
  };
  ClusterRun @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=0: val_type_fixed=0: };
   };
   name="ClusterRun";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=1;
   use_cuda=0;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 active_params {
  name="active_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 archived_params {
  name="archived_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="InputItemList";
    desc="list of items to present to the network -- actual images are rendered by LEDStimGen";
    data {
     name="data";
     el_typ=double_Data;
     el_def=0;
     String_Data @[0] {
      name="ObjectName";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [50] "LED3_18_245";"LED3_13_134";"LED3_9_045";"LED3_13_134";"LED3_10_123";"LED3_10_123";"LED3_5_024";"LED3_7_034";"LED3_9_045";"LED3_5_024";
"LED3_12_125";"LED3_17_235";"LED3_15_145";"LED3_13_134";"LED3_16_234";"LED3_7_034";"LED3_1_013";"LED3_2_014";"LED3_6_025";"LED3_11_124";
"LED3_18_245";"LED3_17_235";"LED3_5_024";"LED3_1_013";"LED3_9_045";"LED3_11_124";"LED3_15_145";"LED3_4_023";"LED3_13_134";"LED3_4_023";
"LED3_5_024";"LED3_17_235";"LED3_5_024";"LED3_2_014";"LED3_11_124";"LED3_9_045";"LED3_9_045";"LED3_15_145";"LED3_11_124";"LED3_9_045";
"LED3_7_034";"LED3_8_035";"LED3_16_234";"LED3_13_134";"LED3_18_245";"LED3_18_245";"LED3_5_024";"LED3_17_235";"LED3_13_134";"LED3_2_014";
      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="ObjectNo";
      desc="object number";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [50] 0;8;11;8;14;14;12;13;11;12;
6;10;5;8;15;13;17;9;3;4;
0;10;12;17;11;4;5;2;8;2;
12;10;12;9;4;11;11;5;4;11;
13;1;15;8;0;0;12;10;8;9;
      };
     };
     double_Data @[2] {
      name="translate_x";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [50] 0.1890510115141721;0.240472235878475;-0.03759478482719947;-0.001978060882549371;0.1373297320558138;-0.1106341234386408;0.1468348385645456;0.06411850204307301;0.2292592980660264;0.1140319459693464;
0.1147780815366956;0.1310158830093456;-0.0516455620063499;0.2358251826787097;0.2354276762452202;-0.06059656636706867;0.05124811319902972;0.0486519476433217;-0.03574332772654104;-0.0828161145692306;
0.2395034321158825;-0.1728821028907323;0.01986039348436602;0.005894023346673105;-0.06497664944501463;0.1088184948053076;-0.1935457655895566;-0.1050083388291188;-0.02005419760111493;0.2326404172836365;
0.1232194495868542;-0.248820310581911;0.1753022789495298;0.2091895272658649;0.02947910178627322;0.2225922676363186;-0.030098258550877;0.2058717884226978;-0.04433386482016838;-0.214130066007072;
0.1708958721967583;0.2251174365543906;0.1511244491469201;0.1254753204079407;-0.03406446680444525;-0.1396947448150221;0.2229628474727284;-0.1759015710004561;-0.114807401927398;-0.06630138719742035;
      };
     };
     double_Data @[3] {
      name="translate_y";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [50] 0.05364276045916194;-0.2477621654755119;0.1985557461412366;-0.2343052690897336;-0.05049048340765494;0.1905533745994488;0.1277916219451266;0.201574679083062;0.08326628918196255;0.1935773350677351;
-0.2448837299502985;0.143061693972677;-0.0941505767960068;-0.1089935167559906;-0.000695503301859357;-0.1115336426260316;-0.2421433417304124;-0.1767716681885159;0.1378426544165526;0.0002543444942888495;
0.01337073313325327;0.1602713034140718;0.2142412490924162;-0.2088152754108559;0.1887751239015151;-0.171541479383498;-0.04217989792695087;-0.04812499882946791;-0.1930960782370959;0.05997941897790754;
-0.01711607991180525;-0.1417669215448775;-0.1395741575009456;-0.1129540623742146;-0.1168488470530606;0.07471207483324827;-0.01023347360639187;-0.2141425767470436;0.07131301472396429;-0.1463474358546351;
-0.1597655337032594;-0.1132496006043616;0.07006891262757914;0.188764236939729;0.08409278882689653;0.146407324224474;0.072947231891002;0.2492449623866795;-0.00588981741390765;-0.06690453564315885;
      };
     };
     double_Data @[4] {
      name="rotate";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [50] -0.007658614220269513;0.005451857347340581;0.009871237756218546;0.008991293003112131;-0.003248933508773449;-0.005568873907701179;0.003650187857507597;-0.0001774850085115784;0.0005323476460330264;-0.005454247737978872;
-0.009103556949916854;0.005897546137708818;-0.004942374278569877;-0.002768645109558605;-0.002712435863021947;0.001184621336805487;0.008952600803797542;0.0069812015816771;0.002147189379361134;0.001726544315611618;
-0.009769081845574814;0.00927087291062882;-0.004915274762853856;0.001829927097455443;-0.004609186123279119;-0.006445499694172021;0.00239523302106439;-0.0006007299828874931;-0.005535578339707623;-0.001832169560801926;
0.005852064152438873;-0.008875476916903133;-0.007280771714245493;0.005845373178802798;-0.002100022358873417;0.009215587683231266;0.009217187757590889;-0.003765059288236034;-0.0001314856527273537;-0.0030100353025375;
0.008440133922947764;-0.0007880308704560756;-0.008709757519395494;-0.009106065525195647;0.004170676147865241;0.001016596135669933;-0.005419468198646804;0.001236374008228172;-0.004794261414220691;0.003827737727225214;
      };
     };
     double_Data @[5] {
      name="scale";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [50] 0.7994609067403015;0.9991574504098677;0.7419784443917551;0.9675708648912273;0.9313539166491729;0.981977988036557;0.8112132836405359;0.7526098124839898;0.8703648905394668;0.8400791224216364;
0.8429765398030128;0.9803701199041728;0.7936618133617234;0.9473328313279631;0.8094181038268244;0.7203600110655236;0.9617271871139941;0.7826411139880587;0.9141785380875345;0.9333271203756908;
0.7103288671909067;0.7171356352435676;0.7957037119085432;0.7624142227568971;0.9458585817893721;0.7458145093532778;0.7486320031216094;0.8856156759297301;0.9475563141530071;0.8936581067761689;
0.8931547217824489;0.9920786349963566;0.9578693526801492;0.8482614092057708;0.7043418674329186;0.8194519210485764;0.7547126711039587;0.9367299888942142;0.9571054200249076;0.8299626829367809;
0.9479487096981668;0.8284681000828898;0.7401427945670658;0.7458570044336839;0.9768667397575029;0.7780063817093995;0.998710797907004;0.8422993876946212;0.8367105144561463;0.7352029041556164;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [50] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_70";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_71";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_72";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_1";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="quarter";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[6] {
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[7] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_72";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_73";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[2] {
    name="CompareData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[3] {
    name="TrialTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_22";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_23";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_24";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_1";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="quarter";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[6] {
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[7] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[4] {
    name="EpochTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_24";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_25";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[5] {
    name="BenchTimeOut";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      name="epoch_time_tot";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [1] 77.220001;      };
     };
     float_Data @[1] {
      name="epoch_time_usr";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [1] 172.77;      };
     };
     String_Data @[2] {
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [1] "bench_times.dat";      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [1] 0;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="TestErrorData";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="trial_name_group";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [20] "00";"01";"02";"03";"04";"05";"06";"07";"08";"09";
"10";"11";"12";"13";"14";"15";"16";"17";"18";"19";
      };
     };
     float_Data @[1] {
      name="N";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [20] 51;44;51;53;53;40;47;40;53;54;
47;53;56;51;46;49;55;67;45;45;
      };
     };
     float_Data @[2] {
      name="sse_count";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
      ar {
       name="ar";
      [20] 2;1;2;1;0;1;0;0;1;2;
1;4;2;0;1;0;1;1;45;45;
      };
     };
     float_Data @[3] {
      name="pct_err";
      col_flags=SAVE_DATA|CALC|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr="(float)sse_count / (float)N";
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [20] 0.039215699;0.022727299;0.039215699;0.018867901;0;0.025;0;0;0.018867901;0.037037;
0.021276601;0.075471699;0.035714298;0;0.021739099;0;0.018181801;0.0149254;1;1;
      };
     };
    };
    data_flags=SAVE_ROWS|HAS_CALCS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [20] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[1] {
    name="ThreadReportData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_110";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="thread";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @[1] {
      name="stat";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[2] {
      name="run_avg";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[3] {
      name="run_sum";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[4] {
      name="wait_avg";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[5] {
      name="wait_sum";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[2] {
    name="ObjrecNet_LayerAvgAct";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="layer";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [12] "V1h_l";"V1h_r";"V1m_l";"V1m_r";"V2h";"V2m";"V2m_sum";"V2h_sum";"V3";"V4";
"IT";"Output";      };
     };
     String_Data @[1] {
      name="layer_spec";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [12] "V1h";"V1h";"V1m";"V1m";"V2h";"V2m";"V2m_sum";"V2h_sum";"V3";"V4";
"IT";"Output";      };
     };
     float_Data @[2] {
      name="acts_m_avg";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [12] 0.019845126;0.019845126;0.03537472;0.03537472;0.0040792618;0.0061052307;0.077948287;0.033421535;0.010874571;0.023348022;
0.01412911;0.0067808283;      };
     };
     float_Data @[3] {
      name="avg_act_init";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       name="ar";
      [12] 0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.15000001;0.15000001;0.1;0.039999999;
0.1;0.02;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [12] 0;1;2;3;4;5;6;7;8;9;
10;11;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[0].doc$$: };
   };
   name="LeabraStartup";
   short_nm="Start";
   tags="Leabra, Startup";
   desc="run project in the background (replaces leabra_startup.css)
command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batches=xxx] [tag=xxx]";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=STARTUP_RUN;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.networks[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[0][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="train";
     var_type=T_Object;
     object_type=Program;
     object_val=$.programs.gp[0][1]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="set this to point to your batch process";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="tag";
     var_type=T_String;
     string_val=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="extra_tag";
     var_type=T_String;
     string_val=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="extra tag info generated from args";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="log file directory";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="out_fname";
     var_type=T_String;
     string_val=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="log_epc";
     var_type=T_Bool;
     bool_val=0;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="whether to log the epoch data";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="log_trl";
     var_type=T_Bool;
     bool_val=0;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="whether to log the trial data";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="n_patterns";
     var_type=T_Int;
     int_val=10;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="how many training patterns";
     init_from=NULL;
    };
    ProgVar @[9] {
     name="n_units";
     var_type=T_Int;
     int_val=100;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="how many units per layer";
     init_from=NULL;
    };
    ProgVar @[10] {
     name="epochs";
     var_type=T_Int;
     int_val=100;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="how many epochs to run -- local copy";
     init_from=NULL;
    };
    ProgVar @[11] {
     name="thread_netin";
     var_type=T_Bool;
     bool_val=1;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="whether to run threading on the netin computation or not";
     init_from=NULL;
    };
    ProgVar @[12] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[1][1]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[13] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[1][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[14] {
     name="BenchTimeOut";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[1][5]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[15] {
     name="control_panel";
     var_type=T_Object;
     object_type=ControlPanel;
     object_val=.ctrl_panels[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    If @[0] {
     name="If_iftaMiscguiactive";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (taMisc::gui_active)";
     cond {
      expr="taMisc::gui_active";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      ReturnExpr @[0] {
       name="ReturnExpr_return";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="return ";
       expr {
	expr=;
       };
      };
     };
    };
    Comment @[1] {
     name="Comment_addourspecialargsfromcommandline";
     desc="add our special args from command line";
     flags=CAN_REVERT_TO_CODE;
     code_string="// add our special args from command line";
    };
    MiscCall @[2] {
     name="MiscCall_taMiscAddArgNametagFileTag";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="taMisc::AddArgName(\"tag=\", \"FileTag\")";
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="flag";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"tag=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[3] {
     name="MiscCall_taMiscAddArgNamelogdirLogDir";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="taMisc::AddArgName(\"logdir=\", \"LogDir\")";
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="flag";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"logdir=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    RegisterArgs @[4] {
     name="RegisterArgs_RegisterArgs";
     desc="This is KEY!!! actuall processes all args, including those from ProgVarFmArg guys below";
     flags=CAN_REVERT_TO_CODE;
     code_string="Register Args";
    };
    Comment @[5] {
     name="Comment_Initializeandset_riablesfromargs";
     desc="Initialize and set variables from args";
     flags=CAN_REVERT_TO_CODE;
     code_string="// Initialize and set variables from args";
    };
    ControlPanelsFmArgs @[6] {
     name="ControlPanelsFmArgs_CtrlPanelFmArgsvarcontrolpanel";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CtrlPanel Fm Args: var = control_panel ";
     ctrl_panel_var=.programs[0].vars[15]$$;
    };
    PrintExpr @[7] {
     name="PrintExpr_PrintLoadedproje_ojects0filename";
     desc=;
     flags=OFF;
     code_string=;
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
     debug=0;
    };
    MethodCall @[8] {
     name="MethodCall_trainInit";
     desc=;
     flags=OFF;
     code_string=;
     result_var=NULL;
     obj=.programs[0].vars[0]$$;
     method=Program::Init;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Init()";
     meth_desc=" run init_code, global variables retain current values unless reset in the init_code";
    };
    MiscCall @[9] {
     name="MiscCall_tagtaMiscFindArgByNameFileTag";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="tag = taMisc::FindArgByName(\"FileTag\")";
     result_var=.programs[0].vars[1]$$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[10] {
     name="MiscCall_logdirtaMiscFindArgByNameLogDir";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="log_dir = taMisc::FindArgByName(\"LogDir\")";
     result_var=.programs[0].vars[3]$$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    ProgVarFmArg @[11] {
     name="ProgVarFmArg_SetVarmaxepochin_infromArgepochs";
     desc="epochs=<epcs>";
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:max_epoch in Program:LeabraTrain from Arg:epochs";
     prog=$.programs.gp[0][1]$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[12] {
     name="ProgVarFmArg_SetVarepochsinPr_upfromArgepochs";
     desc="epochs=<epcs>";
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:epochs in Program:LeabraStartup from Arg:epochs";
     prog=.programs[0]$$;
     var_name="epochs";
     arg_name="epochs";
    };
    ProgVarFmArg @[13] {
     name="ProgVarFmArg_SetVarlogepcinPr_upfromArglogepc";
     desc="log_epc=true|false";
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:log_epc in Program:LeabraStartup from Arg:log_epc";
     prog=$.programs[0]$;
     var_name="log_epc";
     arg_name="log_epc";
    };
    ProgVarFmArg @[14] {
     name="ProgVarFmArg_SetVarlogtrlinPr_upfromArglogtrl";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:log_trl in Program:LeabraStartup from Arg:log_trl";
     prog=$.programs[0]$;
     var_name="log_trl";
     arg_name="log_trl";
    };
    Comment @[15] {
     name="Comment_extrataginfo";
     desc="extra tag info";
     flags=CAN_REVERT_TO_CODE;
     code_string="// extra tag info";
    };
    AssignExpr @[16] {
     name="AssignExpr_extratagepcepochs";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="extra_tag = \"_epc\" + epochs";
     result_var=.programs[0].vars[2]$$;
     expr {
      expr="\"_epc\" + epochs";
     };
    };
    AssignExpr @[17] {
     name="AssignExpr_tagtagextratag";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="tag = tag + extra_tag";
     result_var=$.programs[0].vars[1]$;
     expr {
      expr="tag + extra_tag";
     };
    };
    Comment @[18] {
     name="Comment_Setlogfiles";
     desc="Set log files";
     flags=CAN_REVERT_TO_CODE;
     code_string="// Set log files";
    };
    MethodCall @[19] {
     name="MethodCall_outfnameBenchTim_ttaglogdirfalse";
     desc="last arg is to include dmem proc number";
     flags=CAN_REVERT_TO_CODE;
     code_string="out_fname = BenchTimeOut->GetFileNameFmProject(\"_time.dat\", tag, log_dir, false)";
     result_var=.programs[0].vars[5]$$;
     obj=.programs[0].vars[14]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"_time.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    OtherProgramVar @[20] {
     name="OtherProgramVar_VarsToprogramSum_amevar2var3var4";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Vars To:  program=SumTimes set=to  var_1=out_fname  var_2=?  var_3=?  var_4=? ";
     other_prog=.programs[1]$$;
     set_other=1;
     var_1=$.programs[0].vars[5]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    If @[21] {
     name="If_iflogepc";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (log_epc)";
     cond {
      expr="log_epc";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       name="MethodCall_logfilenmEpochOu_ttaglogdirfalse";
       desc="last arg is to include dmem proc number";
       flags=CAN_REVERT_TO_CODE;
       code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".epc.dat\", tag, log_dir, false)";
       result_var=.programs[0].vars[4]$$;
       obj=.programs[0].vars[12]$$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\".epc.dat\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="tag";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
       meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
      };
      MethodCall @[1] {
       name="MethodCall_EpochOutputDataS_filenmfalsetrue";
       desc="last arg is to restrict log to dmem_proc = 0";
       flags=CAN_REVERT_TO_CODE;
       code_string="EpochOutputData->SaveDataLog(log_file_nm, false, true)";
       result_var=NULL;
       obj=$.programs[0].vars[12]$;
       method=DataTable::SaveDataLog;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_file_nm";
	 };
	};
	ProgArg @[1] {
	 arg_type=bool;
	 type="bool";
	 name="append";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
	ProgArg @[2] {
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_0";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
       };
       meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
       meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
      };
     };
    };
    If @[22] {
     name="If_iflogtrl";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (log_trl)";
     cond {
      expr="log_trl";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       name="MethodCall_logfilenmTrialOu_attaglogdirtrue";
       desc="last arg is to include dmem proc number";
       flags=CAN_REVERT_TO_CODE;
       code_string="log_file_nm = TrialOutputData->GetFileNameFmProject(\".trl.dat\", tag, log_dir, true)";
       result_var=$.programs[0].vars[4]$;
       obj=.programs[0].vars[13]$$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\".trl.dat\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="tag";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
       };
       meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
       meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
      };
      MethodCall @[1] {
       name="MethodCall_TrialOutputDataS_ilenmfalsefalse";
       desc="last arg is to restrict log to dmem_proc = 0";
       flags=CAN_REVERT_TO_CODE;
       code_string="TrialOutputData->SaveDataLog(log_file_nm, false, false)";
       result_var=NULL;
       obj=$.programs[0].vars[13]$;
       method=DataTable::SaveDataLog;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_file_nm";
	 };
	};
	ProgArg @[1] {
	 arg_type=bool;
	 type="bool";
	 name="append";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
	ProgArg @[2] {
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_0";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
       meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
      };
     };
    };
    OtherProgramVar @[23] {
     name="OtherProgramVar_VarsToprogramSav_tagvar2var3var4";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Vars To:  program=SaveWeights set=to  var_1=tag  var_2=?  var_3=?  var_4=? ";
     other_prog=.programs.gp[0][8]$$;
     set_other=1;
     var_1=$.programs[0].vars[1]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[24] {
     name="PrintExpr_PrintRunningtrainname";
     desc=;
     flags=OFF;
     code_string=;
     expr {
      expr="\"Running: \" << train.name";
     };
     debug=0;
    };
    ProgramCall @[25] {
     name="ProgramCall_LeabraTrainnetworkinputdatafalse";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraTrain(network, input_data, false)";
     prog_args {
      name="prog_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="input_data";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="no_prompts";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     target=$.programs.gp[0][1]$;
     targ_ld_init="*LeabraTrain*";
    };
   };
   step_prog=.programs.gp[0][5]$$;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[1].doc$$: };
   };
   name="SumTimes";
   short_nm="STms";
   tags=;
   desc=;
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="BenchTimeOut";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.data.gp[1][5]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.data.gp[1][1]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="out_fname";
     var_type=T_String;
     string_val="bench_times.dat";
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="just_fname";
     var_type=T_String;
     string_val="bench_times.dat";
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="thread_report_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[2][1]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.networks[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    DataGroupProg @[0] {
     name="DataGroupProg_Groupfromsrctabl_bleBenchTimeOut";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Group from:  src table = EpochOutputData dest table = BenchTimeOut";
     src_table=;
     dest_table=;
     src_data_var=.programs[1].vars[1]$$;
     dest_data_var=.programs[1].vars[0]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="epoch_time_tot";
	name="epoch_time_tot_SUM_0";
	agg {name="Aggregate": op=SUM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="epoch_time_usr";
	name="epoch_time_usr_SUM_1";
	agg {name="Aggregate": op=SUM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=0;
     };
    };
    MiscCall @[1] {
     name="MiscCall_justfnametaMiscG_eFmPathoutfname";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="just_fname = taMisc::GetFileFmPath(out_fname)";
     result_var=.programs[1].vars[3]$$;
     object_type=taMisc;
     method=taMisc::GetFileFmPath;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="path";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="out_fname";
       };
      };
     };
    };
    MethodCall @[2] {
     name="MethodCall_BenchTimeOutFind_etaBaseVTSTRING";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="BenchTimeOut->FindMakeCol(\"Name\", taBase::VT_STRING)";
     result_var=NULL;
     obj=$.programs[1].vars[0]$;
     method=DataTable::FindMakeCol;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"Name\"";
       };
      };
      ProgArg @[1] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="val_type";
       required=1;
       def_val="taBase::VT_FLOAT";
       prev_expr=;
       expr {
	expr="taBase::VT_STRING";
       };
      };
     };
     meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
     meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
    };
    MethodCall @[3] {
     name="MethodCall_BenchTimeOutSetValjustfnameName0";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="BenchTimeOut->SetVal(just_fname, \"Name\", 0)";
     result_var=NULL;
     obj=$.programs[1].vars[0]$;
     method=DataTable::SetVal;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="val";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="just_fname";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"Name\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="0";
       };
      };
     };
     meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
     meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
    };
    MethodCall @[4] {
     name="MethodCall_BenchTimeOutSaveDataoutfname";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="BenchTimeOut->SaveData(out_fname, , , )";
     result_var=NULL;
     obj=$.programs[1].vars[0]$;
     method=DataTable::SaveData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="out_fname";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable::Delimiters;
       type="DataTable::Delimiters";
       name="delim";
       required=0;
       def_val="DataTable::TAB";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quote_str";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="save_headers";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="void SaveData(taString& fname, DataTable::Delimiters delim = TAB, bool quote_str = true, bool save_headers = true)";
     meth_desc=" saves data, one line per rec, with delimiter between columns, and optionally quoting strings; if save_headers then the _H: header line is saved and data lines have _D:, else they are bare";
    };
    MethodCall @[5] {
     name="MethodCall_threadreportdata_foredatthrptdat";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="thread_report_data->SaveData(out_fname.before(\".dat\") + \"_thrpt.dat\", , , )";
     result_var=NULL;
     obj=.programs[1].vars[4]$$;
     method=DataTable::SaveData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="out_fname.before(\".dat\") + \"_thrpt.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable::Delimiters;
       type="DataTable::Delimiters";
       name="delim";
       required=0;
       def_val="DataTable::TAB";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quote_str";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="save_headers";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="void SaveData(taString& fname, DataTable::Delimiters delim = TAB, bool quote_str = true, bool save_headers = true)";
     meth_desc=" saves data, one line per rec, with delimiter between columns, and optionally quoting strings; if save_headers then the _H: header line is saved and data lines have _D:, else they are bare";
    };
    MethodCall @[6] {
     name="MethodCall_networkmethod";
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="network->Cuda_MemoryReport()";
     result_var=NULL;
     obj=.programs[1].vars[5]$$;
     method=NULL;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="print";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="taString Cuda_MemoryReport(bool print = true)";
     meth_desc=" report about memory allocation required on CUDA device (only does something for cuda compiled version)";
    };
    MethodCall @[7] {
     name="MethodCall_networkCudaTimingReporttrue";
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="network->Cuda_TimingReport(true)";
     result_var=NULL;
     obj=$.programs[1].vars[5]$;
     method=Network::Cuda_TimingReport;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="print";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="taString Cuda_TimingReport(bool print = true)";
     meth_desc=" report time used statistics for CUDA operations (only does something for cuda compiled version)";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[2].doc$$: };
   };
   name="AnalyzeThreadData";
   short_nm="nlyThr";
   tags=;
   desc=;
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="max_data";
     desc=;
     data {
      name="data";
      el_typ=DataColT;
      el_def=0;
      String_Data @[0] {
       name="stat_group";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
       ar {
	name="ar";
       [9] "act_time";"cycstats_time";"dwt_norm_time";"dwt_time";"inhib_time";"netin_integ_time";"send_netin_time";"ti_netin_time";"wt_time";       };
      };
      float_Data @[1] {
       name="run_avg_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
       ar {
	name="ar";
       [9] 966.29303;511.392;0;178657;219.90401;933.27002;1437.67;2861.26;616531;       };
      };
      float_Data @[2] {
       name="run_sum_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
       ar {
	name="ar";
       [9] 4.34832;2.30126;0;8.9328499;0.98956698;4.1997199;6.4695401;0.57225198;3.08266;       };
      };
      float_Data @[3] {
       name="wait_avg_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
       ar {
	name="ar";
       [9] 1.02666;493.48099;0;1046.5;215.145;1.2822;5.8615799;2.3900001;437.39999;       };
      };
      float_Data @[4] {
       name="wait_sum_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
       ar {
	name="ar";
       [9] 0.0046199602;2.22067;0;0.052324999;0.96815401;0.0057699098;0.0263771;0.000478;0.0021869999;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [9] 0;1;2;3;4;5;6;7;8;     };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[1] {
     name="pct_data";
     desc=;
     data {
      name="data";
      el_typ=DataColT;
      el_def=0;
      String_Data @[0] {
       name="stat_group";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
       ar {
	name="ar";
       [9] "act_time";"cycstats_time";"dwt_norm_time";"dwt_time";"inhib_time";"netin_integ_time";"send_netin_time";"ti_netin_time";"wt_time";       };
      };
      float_Data @[1] {
       name="run_avg_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
       ar {
	name="ar";
       [9] 0.12046771;0.063755222;0;22.273163;0.027415425;0.11635075;0.17923428;0.35671321;76.8629;       };
      };
      float_Data @[2] {
       name="run_sum_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
       ar {
	name="ar";
       [9] 14.073978;7.4483662;0;28.912485;3.202879;13.593012;20.939619;1.8521776;9.9774818;       };
      };
      float_Data @[3] {
       name="wait_avg_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
       ar {
	name="ar";
       [9] 0.046600983;22.39953;0;47.501541;9.7656183;0.058200169;0.2660622;0.10848418;19.853964;       };
      };
      float_Data @[4] {
       name="wait_sum_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
       ar {
	name="ar";
       [9] 0.14082749;67.691353;0;1.5949918;29.51166;0.17588072;0.80403739;0.014570588;0.066665016;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [9] 0;1;2;3;4;5;6;7;8;     };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[2] {
     name="sum_all";
     desc=;
     data {
      name="data";
      el_typ=DataColT;
      el_def=0;
      float_Data @[0] {
       name="run_avg_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
       ar {
	name="ar";
       [1] 802117.81;       };
      };
      float_Data @[1] {
       name="run_sum_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
       ar {
	name="ar";
       [1] 30.89617;       };
      };
      float_Data @[2] {
       name="wait_avg_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
       ar {
	name="ar";
       [1] 2203.0864;       };
      };
      float_Data @[3] {
       name="wait_sum_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
       ar {
	name="ar";
       [1] 3.2805812;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [1] 0;     };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="thread_report_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.data.gp[2][1]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="max_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[2].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="sum_all";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[2].objs[2]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="pct_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[2].objs[1]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars1vars";
     desc=;
     flags=0;
     code_string=;
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    DataGroupProg @[1] {
     name="DataGroupProg_Groupfromsrctabl_esttablemaxdata";
     desc=;
     flags=0;
     code_string=;
     src_table=;
     dest_table=;
     src_data_var=.programs[2].vars[0]$$;
     dest_data_var=.programs[2].vars[1]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="stat";
	name="stat_GROUP_0";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="run_avg";
	name="run_avg_MAX_1";
	agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="run_sum";
	name="run_sum_MAX_2";
	agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[3] {
	col_name="wait_avg";
	name="wait_avg_MAX_3";
	agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[4] {
	col_name="wait_sum";
	name="wait_sum_MAX_4";
	agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=1;
     };
    };
    DataGroupProg @[2] {
     name="DataGroupProg_Groupfromsrctabl_desttablesumall";
     desc=;
     flags=0;
     code_string=;
     src_table=;
     dest_table=;
     src_data_var=$.programs[2].vars[1]$;
     dest_data_var=.programs[2].vars[2]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="run_avg_max";
	name="run_avg_max_SUM_0";
	agg {name="agg": op=SUM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="run_sum_max";
	name="run_sum_max_SUM_1";
	agg {name="agg": op=SUM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="wait_avg_max";
	name="wait_avg_max_SUM_2";
	agg {name="agg": op=SUM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[3] {
	col_name="wait_sum_max";
	name="wait_sum_max_SUM_3";
	agg {name="agg": op=SUM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=0;
     };
    };
    MethodCall @[3] {
     name="MethodCall_pctdataCopyFrommaxdata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="pct_data.CopyFrom(max_data)";
     result_var=NULL;
     obj=.programs[2].vars[3]$$;
     method=taBase::CopyFrom;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taBase_ptr;
       type="taBase*";
       name="cpy_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="max_data";
       };
      };
     };
     meth_sig="bool CopyFrom(taBase* cpy_from)";
     meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
    };
    ForLoop @[4] {
     name="ForLoop_fori0isumallcolsi";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for(i=0; i<sum_all.cols(); i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      CssExpr @[0] {
       name="CssExpr_sumallimaxsumalli000001";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="sum_all[i] = max(sum_all[i], 0.00001);";
       expr {
	expr="sum_all[i][:] = max(sum_all[i][:], 0.00001);";
       };
      };
      CssExpr @[1] {
       name="CssExpr_pctdatai11000maxdatai1sumalli0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="pct_data[\"run_avg_max\"][:] = max_data[\"run_avg_max\"][:] / sum_all[\"run_avg_max\"][0]";
       expr {
	expr="pct_data[i+1][:] = 100.0 * (max_data[i+1][:] / sum_all[i][0]);";
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<sum_all.cols()";
     };
     iter {
      expr="i++";
     };
    };
    BlankLineEl @[5] {
     name="BlankLineEl_";
     desc=;
     flags=0;
     code_string=;
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[3].doc$$: };
   };
   name="GenerateItemList";
   short_nm="GnrLst";
   tags=;
   desc="generate a list of items to train/test on";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @[0] {
     name="LED_Type";
     desc=;
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="LED1";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="LED2";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="LED3";
       value=2;
       desc=;
      };
     };
     bits=0;
    };
    DynEnumType @[1] {
     name="InputType";
     desc="type of input patterns to generate";
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="TRAIN";
       value=0;
       desc="just training objects with full transforms";
      };
      DynEnumItem @[1] {
       name="TRAIN_NOVEL";
       value=1;
       desc="training the novel testing objects: novel shown in restricted locations";
      };
      DynEnumItem @[2] {
       name="TEST_RANDOM";
       value=2;
       desc="test all objects in random transforms";
      };
     };
     bits=0;
    };
    DynEnumType @[2] {
     name="LED3Objects";
     desc="objects containing 3 LED lines -- last part of name is ID of line elements contained";
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="LED3_18_245";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="LED3_8_035";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="LED3_4_023";
       value=2;
       desc=;
      };
      DynEnumItem @[3] {
       name="LED3_6_025";
       value=3;
       desc=;
      };
      DynEnumItem @[4] {
       name="LED3_11_124";
       value=4;
       desc=;
      };
      DynEnumItem @[5] {
       name="LED3_15_145";
       value=5;
       desc=;
      };
      DynEnumItem @[6] {
       name="LED3_12_125";
       value=6;
       desc=;
      };
      DynEnumItem @[7] {
       name="LED3_3_015";
       value=7;
       desc=;
      };
      DynEnumItem @[8] {
       name="LED3_13_134";
       value=8;
       desc=;
      };
      DynEnumItem @[9] {
       name="LED3_2_014";
       value=9;
       desc=;
      };
      DynEnumItem @[10] {
       name="LED3_17_235";
       value=10;
       desc=;
      };
      DynEnumItem @[11] {
       name="LED3_9_045";
       value=11;
       desc=;
      };
      DynEnumItem @[12] {
       name="LED3_5_024";
       value=12;
       desc=;
      };
      DynEnumItem @[13] {
       name="LED3_7_034";
       value=13;
       desc=;
      };
      DynEnumItem @[14] {
       name="LED3_10_123";
       value=14;
       desc=;
      };
      DynEnumItem @[15] {
       name="LED3_16_234";
       value=15;
       desc=;
      };
      DynEnumItem @[16] {
       name="LED3_14_135";
       value=16;
       desc=;
      };
      DynEnumItem @[17] {
       name="LED3_1_013";
       value=17;
       desc=;
      };
      DynEnumItem @[18] {
       name="LED3_0_012";
       value=18;
       desc=;
      };
      DynEnumItem @[19] {
       name="LED3_19_345";
       value=19;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="InputItemList";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.data.gp[0][0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="input_type";
     var_type=T_DynEnum;
     object_scope=NULL;
     dyn_enum_val {
      user_data_=NULL;
      enum_type=.programs[3].types[1]$$;
      value=0;
     };
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="n_items";
     var_type=T_Int;
     int_val=50;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="number of items to generate";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="translate_max";
     var_type=T_Real;
     real_val=0.25;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="max translation value for training (random translation < this val)";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="scale_min";
     var_type=T_Real;
     real_val=0.7;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="min scale for training";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="scale_max";
     var_type=T_Real;
     real_val=1;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="max scale for training";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="rotate_max";
     var_type=T_Real;
     real_val=0.01;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="max rotation for training";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="novel_train_restrict";
     var_type=T_Real;
     real_val=0.5;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="proportion of full training range to use during training of novel items";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="novel_train_pct";
     var_type=T_Real;
     real_val=0.5;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="proportion of items to be novel items during train_novel";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="translate_x";
     var_type=T_Real;
     real_val=-0.07552747814903454;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[8] {
     name="translate_y";
     var_type=T_Real;
     real_val=0.06301592843334047;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="scale";
     var_type=T_Real;
     real_val=0.7251189713669818;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="scale_half_range";
     var_type=T_Real;
     real_val=0.15;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="scale_mid";
     var_type=T_Real;
     real_val=0.85;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[12] {
     name="rotate";
     var_type=T_Real;
     real_val=0.008441675960935353;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[13] {
     name="ObjectNo";
     var_type=T_Int;
     int_val=9;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[14] {
     name="ObjectEnum";
     var_type=T_DynEnum;
     object_scope=NULL;
     dyn_enum_val {
      user_data_=NULL;
      enum_type=.programs[3].types[2]$$;
      value=9;
     };
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[15] {
     name="ObjectName";
     var_type=T_String;
     string_val="LED3_2_014";
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[16] {
     name="i";
     var_type=T_Int;
     int_val=50;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    AssignExpr @[0] {
     name="AssignExpr_scalehalfrangescalemaxscalemin5";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="scale_half_range = (scale_max- scale_min) * .5";
     result_var=.programs[3].vars[10]$$;
     expr {
      expr="(scale_max- scale_min) * .5";
     };
    };
    AssignExpr @[1] {
     name="AssignExpr_scalemidscalemaxscalemin5";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="scale_mid = (scale_max + scale_min) * .5";
     result_var=.programs[3].vars[11]$$;
     expr {
      expr="(scale_max + scale_min) * .5";
     };
    };
    ResetDataRows @[2] {
     name="ResetDataRows_ResetDataRowstableInputItemList";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ResetDataRows:  table = InputItemList ";
     data_var=.programs[3].args[0]$$;
    };
    Switch @[3] {
     name="Switch_switchinputtype";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="switch(input_type)";
     switch_var=.programs[3].args[1]$$;
     cases {
      name="cases";
      el_typ=CaseBlock;
      el_def=0;
      CaseBlock @[0] {
       name="CaseBlock_caseTRAIN";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="case: TRAIN";
       prog_code {
	name="prog_code";
	el_typ=ProgCode;
	el_def=0;
	ForLoop @[0] {
	 name="ForLoop_fori0initemsi";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="for (i = 0; i < n_items; i++)";
	 loop_code {
	  name="loop_code";
	  el_typ=ProgCode;
	  el_def=0;
	  RandomCall @[0] {
	   name="RandomCall_translatexRandom_maxtranslatemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="translate_x = Random::UniformMinMax(-translate_max, translate_max, )";
	   result_var=.programs[3].vars[7]$$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="-translate_max";
	     expr {
	      expr="-translate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="translate_max";
	     expr {
	      expr="translate_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[1] {
	   name="RandomCall_translateyRandom_maxtranslatemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="translate_y = Random::UniformMinMax(-translate_max, translate_max, )";
	   result_var=.programs[3].vars[8]$$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="-translate_max";
	     expr {
	      expr="-translate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="translate_max";
	     expr {
	      expr="translate_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[2] {
	   name="RandomCall_rotateRandomUnif_atemaxrotatemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="rotate = Random::UniformMinMax(-rotate_max, rotate_max, )";
	   result_var=.programs[3].vars[12]$$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="-rotate_max";
	     expr {
	      expr="-rotate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="rotate_max";
	     expr {
	      expr="rotate_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[3] {
	   name="RandomCall_scaleRandomUnifo_caleminscalemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="scale = Random::UniformMinMax(scale_min, scale_max, )";
	   result_var=.programs[3].vars[9]$$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="scale_min";
	     expr {
	      expr="scale_min";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="scale_max";
	     expr {
	      expr="scale_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[4] {
	   name="RandomCall_ObjectNoRandomIntZeroN18";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectNo = Random::IntZeroN(18, )";
	   result_var=.programs[3].vars[13]$$;
	   object_type=Random;
	   method=Random::IntZeroN;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=int;
	     type="int";
	     name="n";
	     required=1;
	     def_val=;
	     prev_expr="18";
	     expr {
	      expr="18";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  AssignExpr @[5] {
	   name="AssignExpr_ObjectEnumObjectNo";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectEnum = ObjectNo";
	   result_var=.programs[3].vars[14]$$;
	   expr {
	    expr="ObjectNo";
	   };
	  };
	  AssignExpr @[6] {
	   name="AssignExpr_ObjectNameObjectEnum";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectName = ObjectEnum";
	   result_var=.programs[3].vars[15]$$;
	   expr {
	    expr="ObjectEnum";
	   };
	  };
	  AddNewDataRow @[7] {
	   name="AddNewDataRow_AddNewRowtableInputItemList";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Add New Row:  table = InputItemList ";
	   data_var=$.programs[3].args[0]$;
	  };
	  DataVarProg @[8] {
	   name="DataVarProg_DataTotableInput_bjectNovar3var4";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Data To:  table=InputItemList  row_spec=cur_row  set=to  all_matches=false  var_1=ObjectName  var_2=ObjectNo  var_3=?  var_4=? ";
	   data_var=$.programs[3].args[0]$;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   set_data=1;
	   all_matches=0;
	   quiet=0;
	   var_1=$.programs[3].vars[15]$;
	   var_2=$.programs[3].vars[13]$;
	   var_3=NULL;
	   var_4=NULL;
	  };
	  DataVarProg @[9] {
	   name="DataVarProg_DataTotableInput_xvar4translatey";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Data To:  table=InputItemList  row_spec=cur_row  set=to  all_matches=false  var_1=rotate  var_2=scale  var_3=translate_x  var_4=translate_y ";
	   data_var=$.programs[3].args[0]$;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   set_data=1;
	   all_matches=0;
	   quiet=0;
	   var_1=$.programs[3].vars[12]$;
	   var_2=$.programs[3].vars[9]$;
	   var_3=$.programs[3].vars[7]$;
	   var_4=$.programs[3].vars[8]$;
	  };
	 };
	 init {
	  expr="i = 0";
	 };
	 test {
	  expr="i < n_items";
	 };
	 iter {
	  expr="i++";
	 };
	};
	DoneWritingDataRow @[1] {
	 name="DoneWritingDataRow_DoneWritingDataR_leInputItemList";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="DoneWritingDataRow:  table = InputItemList ";
	 data_var=$.programs[3].args[0]$;
	};
       };
       case_val {
	expr="TRAIN";
       };
       is_default=0;
      };
      CaseBlock @[1] {
       name="CaseBlock_caseTRAINNOVEL";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="case: TRAIN_NOVEL";
       prog_code {
	name="prog_code";
	el_typ=ProgCode;
	el_def=0;
	ForLoop @[0] {
	 name="ForLoop_fori0initemsi";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="for (i = 0; i < n_items; i++)";
	 loop_code {
	  name="loop_code";
	  el_typ=ProgCode;
	  el_def=0;
	  If @[0] {
	   name="If_ifRandomZeroOnenoveltrainpct";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="if (Random::ZeroOne() <  novel_train_pct)";
	   cond {
	    expr="Random::ZeroOne() <  novel_train_pct";
	   };
	   true_code {
	    name="true_code";
	    el_typ=ProgCode;
	    el_def=0;
	    RandomCall @[0] {
	     name="RandomCall_translatexRandom_eltrainrestrict";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="translate_x = Random::UniformMinMax(-translate_max* novel_train_restrict, translate_max* novel_train_restrict, )";
	     result_var=$.programs[3].vars[7]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="-translate_max* novel_train_restrict";
	       expr {
		expr="-translate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="translate_max* novel_train_restrict";
	       expr {
		expr="translate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[1] {
	     name="RandomCall_translateyRandom_eltrainrestrict";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="translate_y = Random::UniformMinMax(-translate_max* novel_train_restrict, translate_max* novel_train_restrict, )";
	     result_var=$.programs[3].vars[8]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="-translate_max* novel_train_restrict";
	       expr {
		expr="-translate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="translate_max* novel_train_restrict";
	       expr {
		expr="translate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[2] {
	     name="RandomCall_rotateRandomUnif_eltrainrestrict";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="rotate = Random::UniformMinMax(-rotate_max* novel_train_restrict, rotate_max* novel_train_restrict, )";
	     result_var=$.programs[3].vars[12]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="-rotate_max* novel_train_restrict";
	       expr {
		expr="-rotate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="rotate_max* novel_train_restrict";
	       expr {
		expr="rotate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[3] {
	     name="RandomCall_scaleRandomUnifo_eltrainrestrict";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="scale = Random::UniformMinMax(scale_mid - scale_half_range *  novel_train_restrict, scale_mid +  scale_half_range* novel_train_restrict, )";
	     result_var=$.programs[3].vars[9]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="scale_mid - scale_half_range *  novel_train_restrict";
	       expr {
		expr="scale_mid - scale_half_range *  novel_train_restrict";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="scale_mid +  scale_half_range* novel_train_restrict";
	       expr {
		expr="scale_mid +  scale_half_range* novel_train_restrict";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[4] {
	     name="RandomCall_ObjectNoRandomIntMinMax1820";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="ObjectNo = Random::IntMinMax(18, 20, )";
	     result_var=$.programs[3].vars[13]$;
	     object_type=Random;
	     method=Random::IntMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=int;
	       type="int";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="18";
	       expr {
		expr="18";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=int;
	       type="int";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="20";
	       expr {
		expr="20";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	   };
	  };
	  Else @[1] {
	   name="Else_If_ifRandomZeroOnenoveltrainpct";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="else";
	   cond {
	    expr=;
	   };
	   true_code {
	    name="true_code";
	    el_typ=ProgCode;
	    el_def=0;
	    RandomCall @[0] {
	     name="RandomCall_translatexRandom_maxtranslatemax";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="translate_x = Random::UniformMinMax(-translate_max, translate_max, )";
	     result_var=$.programs[3].vars[7]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="-translate_max";
	       expr {
		expr="-translate_max";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="translate_max";
	       expr {
		expr="translate_max";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[1] {
	     name="RandomCall_translateyRandom_maxtranslatemax";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="translate_y = Random::UniformMinMax(-translate_max, translate_max, )";
	     result_var=$.programs[3].vars[8]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="-translate_max";
	       expr {
		expr="-translate_max";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="translate_max";
	       expr {
		expr="translate_max";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[2] {
	     name="RandomCall_rotateRandomUnif_atemaxrotatemax";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="rotate = Random::UniformMinMax(-rotate_max, rotate_max, )";
	     result_var=$.programs[3].vars[12]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="-rotate_max";
	       expr {
		expr="-rotate_max";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="rotate_max";
	       expr {
		expr="rotate_max";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[3] {
	     name="RandomCall_scaleRandomUnifo_caleminscalemax";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="scale = Random::UniformMinMax(scale_min, scale_max, )";
	     result_var=$.programs[3].vars[9]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="scale_min";
	       expr {
		expr="scale_min";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="scale_max";
	       expr {
		expr="scale_max";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[4] {
	     name="RandomCall_ObjectNoRandomIntZeroN18";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="ObjectNo = Random::IntZeroN(18, )";
	     result_var=$.programs[3].vars[13]$;
	     object_type=Random;
	     method=Random::IntZeroN;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=int;
	       type="int";
	       name="n";
	       required=1;
	       def_val=;
	       prev_expr="18";
	       expr {
		expr="18";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	   };
	  };
	  AssignExpr @[2] {
	   name="AssignExpr_ObjectEnumObjectNo";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectEnum = ObjectNo";
	   result_var=$.programs[3].vars[14]$;
	   expr {
	    expr="ObjectNo";
	   };
	  };
	  AssignExpr @[3] {
	   name="AssignExpr_ObjectNameObjectEnum";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectName = ObjectEnum";
	   result_var=$.programs[3].vars[15]$;
	   expr {
	    expr="ObjectEnum";
	   };
	  };
	  AddNewDataRow @[4] {
	   name="AddNewDataRow_AddNewRowtableInputItemList";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Add New Row:  table = InputItemList ";
	   data_var=$.programs[3].args[0]$;
	  };
	  DataVarProg @[5] {
	   name="DataVarProg_DataTotableInput_bjectNovar3var4";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Data To:  table=InputItemList  row_spec=cur_row  set=to  all_matches=false  var_1=ObjectName  var_2=ObjectNo  var_3=?  var_4=? ";
	   data_var=$.programs[3].args[0]$;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   set_data=1;
	   all_matches=0;
	   quiet=0;
	   var_1=$.programs[3].vars[15]$;
	   var_2=$.programs[3].vars[13]$;
	   var_3=NULL;
	   var_4=NULL;
	  };
	  DataVarProg @[6] {
	   name="DataVarProg_DataTotableInput_xvar4translatey";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Data To:  table=InputItemList  row_spec=cur_row  set=to  all_matches=false  var_1=rotate  var_2=scale  var_3=translate_x  var_4=translate_y ";
	   data_var=$.programs[3].args[0]$;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   set_data=1;
	   all_matches=0;
	   quiet=0;
	   var_1=$.programs[3].vars[12]$;
	   var_2=$.programs[3].vars[9]$;
	   var_3=$.programs[3].vars[7]$;
	   var_4=$.programs[3].vars[8]$;
	  };
	 };
	 init {
	  expr="i = 0";
	 };
	 test {
	  expr="i < n_items";
	 };
	 iter {
	  expr="i++";
	 };
	};
	DoneWritingDataRow @[1] {
	 name="DoneWritingDataRow_DoneWritingDataR_leInputItemList";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="DoneWritingDataRow:  table = InputItemList ";
	 data_var=$.programs[3].args[0]$;
	};
       };
       case_val {
	expr="TRAIN_NOVEL";
       };
       is_default=0;
      };
      CaseBlock @[2] {
       name="CaseBlock_caseTESTRANDOM";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="case: TEST_RANDOM";
       prog_code {
	name="prog_code";
	el_typ=ProgCode;
	el_def=0;
	ForLoop @[0] {
	 name="ForLoop_fori0initemsi";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="for (i = 0; i < n_items; i++)";
	 loop_code {
	  name="loop_code";
	  el_typ=ProgCode;
	  el_def=0;
	  RandomCall @[0] {
	   name="RandomCall_translatexRandom_maxtranslatemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="translate_x = Random::UniformMinMax(-translate_max, translate_max, )";
	   result_var=$.programs[3].vars[7]$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="-translate_max";
	     expr {
	      expr="-translate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="translate_max";
	     expr {
	      expr="translate_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[1] {
	   name="RandomCall_translateyRandom_maxtranslatemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="translate_y = Random::UniformMinMax(-translate_max, translate_max, )";
	   result_var=$.programs[3].vars[8]$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="-translate_max";
	     expr {
	      expr="-translate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="translate_max";
	     expr {
	      expr="translate_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[2] {
	   name="RandomCall_rotateRandomUnif_atemaxrotatemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="rotate = Random::UniformMinMax(-rotate_max, rotate_max, )";
	   result_var=$.programs[3].vars[12]$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="-rotate_max";
	     expr {
	      expr="-rotate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="rotate_max";
	     expr {
	      expr="rotate_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[3] {
	   name="RandomCall_scaleRandomUnifo_caleminscalemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="scale = Random::UniformMinMax(scale_min, scale_max, )";
	   result_var=$.programs[3].vars[9]$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="scale_min";
	     expr {
	      expr="scale_min";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="scale_max";
	     expr {
	      expr="scale_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[4] {
	   name="RandomCall_ObjectNoRandomIntZeroN20";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectNo = Random::IntZeroN(20, )";
	   result_var=$.programs[3].vars[13]$;
	   object_type=Random;
	   method=Random::IntZeroN;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=int;
	     type="int";
	     name="n";
	     required=1;
	     def_val=;
	     prev_expr="20";
	     expr {
	      expr="20";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  AssignExpr @[5] {
	   name="AssignExpr_ObjectEnumObjectNo";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectEnum = ObjectNo";
	   result_var=$.programs[3].vars[14]$;
	   expr {
	    expr="ObjectNo";
	   };
	  };
	  AssignExpr @[6] {
	   name="AssignExpr_ObjectNameObjectEnum";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectName = ObjectEnum";
	   result_var=$.programs[3].vars[15]$;
	   expr {
	    expr="ObjectEnum";
	   };
	  };
	  AddNewDataRow @[7] {
	   name="AddNewDataRow_AddNewRowtableInputItemList";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Add New Row:  table = InputItemList ";
	   data_var=$.programs[3].args[0]$;
	  };
	  DataVarProg @[8] {
	   name="DataVarProg_DataTotableInput_bjectNovar3var4";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Data To:  table=InputItemList  row_spec=cur_row  set=to  all_matches=false  var_1=ObjectName  var_2=ObjectNo  var_3=?  var_4=? ";
	   data_var=$.programs[3].args[0]$;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   set_data=1;
	   all_matches=0;
	   quiet=0;
	   var_1=$.programs[3].vars[15]$;
	   var_2=$.programs[3].vars[13]$;
	   var_3=NULL;
	   var_4=NULL;
	  };
	  DataVarProg @[9] {
	   name="DataVarProg_DataTotableInput_xvar4translatey";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Data To:  table=InputItemList  row_spec=cur_row  set=to  all_matches=false  var_1=rotate  var_2=scale  var_3=translate_x  var_4=translate_y ";
	   data_var=$.programs[3].args[0]$;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   set_data=1;
	   all_matches=0;
	   quiet=0;
	   var_1=$.programs[3].vars[12]$;
	   var_2=$.programs[3].vars[9]$;
	   var_3=$.programs[3].vars[7]$;
	   var_4=$.programs[3].vars[8]$;
	  };
	 };
	 init {
	  expr="i = 0";
	 };
	 test {
	  expr="i < n_items";
	 };
	 iter {
	  expr="i++";
	 };
	};
	DoneWritingDataRow @[1] {
	 name="DoneWritingDataRow_DoneWritingDataR_leInputItemList";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="DoneWritingDataRow:  table = InputItemList ";
	 data_var=$.programs[3].args[0]$;
	};
       };
       case_val {
	expr="TEST_RANDOM";
       };
       is_default=0;
      };
     };
    };
    ForLoop @[4] {
     name="ForLoop_fori0initemsi";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i = 0; i < n_items; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      RandomCall @[0] {
       name="RandomCall_translatexRandom_maxtranslatemax";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="translate_x = Random::UniformMinMax(-translate_max, translate_max, )";
       result_var=$.programs[3].vars[7]$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=1;
	 def_val=;
	 prev_expr="-translate_max";
	 expr {
	  expr="-translate_max";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=1;
	 def_val=;
	 prev_expr="translate_max";
	 expr {
	  expr="translate_max";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="thr_no";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
      };
      RandomCall @[1] {
       name="RandomCall_translateyRandom_maxtranslatemax";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="translate_y = Random::UniformMinMax(-translate_max, translate_max, )";
       result_var=$.programs[3].vars[8]$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=1;
	 def_val=;
	 prev_expr="-translate_max";
	 expr {
	  expr="-translate_max";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=1;
	 def_val=;
	 prev_expr="translate_max";
	 expr {
	  expr="translate_max";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="thr_no";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
      };
      RandomCall @[2] {
       name="RandomCall_rotateRandomUnif_atemaxrotatemax";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="rotate = Random::UniformMinMax(-rotate_max, rotate_max, )";
       result_var=$.programs[3].vars[12]$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=1;
	 def_val=;
	 prev_expr="-rotate_max";
	 expr {
	  expr="-rotate_max";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=1;
	 def_val=;
	 prev_expr="rotate_max";
	 expr {
	  expr="rotate_max";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="thr_no";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
      };
      RandomCall @[3] {
       name="RandomCall_scaleRandomUnifo_caleminscalemax";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="scale = Random::UniformMinMax(scale_min, scale_max, )";
       result_var=$.programs[3].vars[9]$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=1;
	 def_val=;
	 prev_expr="scale_min";
	 expr {
	  expr="scale_min";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=1;
	 def_val=;
	 prev_expr="scale_max";
	 expr {
	  expr="scale_max";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="thr_no";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
      };
     };
     init {
      expr="i = 0";
     };
     test {
      expr="i < n_items";
     };
     iter {
      expr="i++";
     };
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[4] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[4].doc$$: };
   };
   name="LEDStimGen";
   short_nm="LDSGn";
   tags="Canvas, Drawing, DataGen, Image";
   desc="generate LED-like stimulus displays";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taCanvas;
    el_def=0;
    taCanvas @[0] {
     name="Canvas";
     coord_type=NORMALIZED;
    };
    DataTable @[1] {
     name="StimGenData";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="IMAGE": value=1: val_type_fixed=0: };
       };
       name="Canvas";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 120;120;3;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [3] ;;;       };
       width=120;
       matrix_col_width=10;
       ar {
	name="ar";
       [120 120 3 1] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.49019608;0.63529414;0.63529414;0.63529414;0.63529414;0.29019609;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.63921571;1;1;1;1;0.49019608;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.63921571;1;1;1;1;0.49019608;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.63921571;1;1;1;1;0.49019608;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.49019608;0.63529414;0.63529414;0.63529414;0.63529414;0.29019609;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.63921571;1;1;1;1;0.49019608;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.63921571;1;1;1;1;0.49019608;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.63921571;1;1;1;1;0.49019608;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.49019608;0.63529414;0.63529414;0.63529414;0.63529414;0.29019609;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.63921571;1;1;1;1;0.49019608;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.63921571;1;1;1;1;0.49019608;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.63529414;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.63921571;1;1;1;1;0.49019608;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.40000001;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=120;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [1] 0;     };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="canvas";
     var_type=T_Object;
     object_type=taCanvas;
     object_val=.programs[4].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="stim_gen_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[4].objs[1]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @[0] {
     name="LED3Objects";
     desc="objects containing 3 LED lines -- last part of name is ID of line elements contained";
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="LED3_18_245";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="LED3_8_035";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="LED3_4_023";
       value=2;
       desc=;
      };
      DynEnumItem @[3] {
       name="LED3_6_025";
       value=3;
       desc=;
      };
      DynEnumItem @[4] {
       name="LED3_11_124";
       value=4;
       desc=;
      };
      DynEnumItem @[5] {
       name="LED3_15_145";
       value=5;
       desc=;
      };
      DynEnumItem @[6] {
       name="LED3_12_125";
       value=6;
       desc=;
      };
      DynEnumItem @[7] {
       name="LED3_3_015";
       value=7;
       desc=;
      };
      DynEnumItem @[8] {
       name="LED3_13_134";
       value=8;
       desc=;
      };
      DynEnumItem @[9] {
       name="LED3_2_014";
       value=9;
       desc=;
      };
      DynEnumItem @[10] {
       name="LED3_17_235";
       value=10;
       desc=;
      };
      DynEnumItem @[11] {
       name="LED3_9_045";
       value=11;
       desc=;
      };
      DynEnumItem @[12] {
       name="LED3_5_024";
       value=12;
       desc=;
      };
      DynEnumItem @[13] {
       name="LED3_7_034";
       value=13;
       desc=;
      };
      DynEnumItem @[14] {
       name="LED3_10_123";
       value=14;
       desc=;
      };
      DynEnumItem @[15] {
       name="LED3_16_234";
       value=15;
       desc=;
      };
      DynEnumItem @[16] {
       name="LED3_14_135";
       value=16;
       desc=;
      };
      DynEnumItem @[17] {
       name="LED3_1_013";
       value=17;
       desc=;
      };
      DynEnumItem @[18] {
       name="LED3_0_012";
       value=18;
       desc=;
      };
      DynEnumItem @[19] {
       name="LED3_19_345";
       value=19;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ObjectNo";
     var_type=T_Int;
     int_val=12;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="object number to render";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="canvas_width";
     var_type=T_Int;
     int_val=120;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="canvas_height";
     var_type=T_Int;
     int_val=120;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="disp_type";
     var_type=T_DynEnum;
     object_scope=NULL;
     dyn_enum_val {
      user_data_=NULL;
      enum_type=NULL;
      value=-1;
     };
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="disp_size";
     var_type=T_Int;
     int_val=3;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="display size, as number in each dimension of a square grid of oriented lines";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="bg_color";
     var_type=T_String;
     string_val="black";
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="color of background";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="line_color";
     var_type=T_String;
     string_val="white";
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="color to draw lines in";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="ObjectName";
     var_type=T_String;
     string_val="LED3_5_024";
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of object";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="ObjectEnum";
     var_type=T_DynEnum;
     object_scope=NULL;
     dyn_enum_val {
      user_data_=NULL;
      enum_type=.programs[4].types[0]$$;
      value=12;
     };
     flags=CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of object";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="size";
     var_type=T_Real;
     real_val=0.3;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="size of the line segments";
     init_from=NULL;
    };
    ProgVar @[9] {
     name="line_width";
     var_type=T_Real;
     real_val=0.04;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="width of the line segments";
     init_from=NULL;
    };
    ProgVar @[10] {
     name="ctr_x";
     var_type=T_Real;
     real_val=0.5;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="center point to draw from";
     init_from=NULL;
    };
    ProgVar @[11] {
     name="ctr_y";
     var_type=T_Real;
     real_val=0.5;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="where to start drawing";
     init_from=NULL;
    };
    ProgVar @[12] {
     name="LED_n";
     var_type=T_Int;
     int_val=3;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="number of led elements in object";
     init_from=NULL;
    };
    ProgVar @[13] {
     name="LED_segs";
     var_type=T_String;
     string_val="024";
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="string of LED segments to render (from ENUM)";
     init_from=NULL;
    };
    ProgVar @[14] {
     name="cur_led";
     var_type=T_Int;
     int_val=4;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="current led segment to draw";
     init_from=NULL;
    };
    ProgVar @[15] {
     name="i";
     var_type=T_Int;
     int_val=3;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
    Function @[0] {
     name="DrawLED";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="DrawLED(int led_number) returns: int";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="led_number";
       var_type=T_Int;
       int_val=0;
       object_scope=NULL;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars4vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (4 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @[0] {
	 name="st_x";
	 var_type=T_Real;
	 real_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[1] {
	 name="st_y";
	 var_type=T_Real;
	 real_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[2] {
	 name="ed_x";
	 var_type=T_Real;
	 real_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[3] {
	 name="ed_y";
	 var_type=T_Real;
	 real_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      Switch @[1] {
       name="Switch_switchlednumber";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="switch(led_number)";
       switch_var=.programs[4].functions[0].args[0]$$;
       cases {
	name="cases";
	el_typ=CaseBlock;
	el_def=0;
	CaseBlock @[0] {
	 name="CaseBlock_case0";
	 desc="bottom horiz";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: 0";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_canvasLinectrxsi_trxsizectrysize";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="canvas->Line(ctr_x - size, ctr_y - size, ctr_x + size, ctr_y - size)";
	   result_var=NULL;
	   obj=.programs[4].objs_vars[0]$$;
	   method=taCanvas::Line;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	   };
	   meth_sig="void Line(float x1, float y1, float x2, float y2)";
	   meth_desc=" ";
	  };
	 };
	 case_val {
	  expr="0";
	 };
	 is_default=0;
	};
	CaseBlock @[1] {
	 name="CaseBlock_case1";
	 desc="left vert";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: 1";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_canvasLinectrxsi_trxsizectrysize";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="canvas->Line(ctr_x - size, ctr_y - size, ctr_x - size, ctr_y + size)";
	   result_var=NULL;
	   obj=$.programs[4].objs_vars[0]$;
	   method=taCanvas::Line;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	   };
	   meth_sig="void Line(float x1, float y1, float x2, float y2)";
	   meth_desc=" ";
	  };
	 };
	 case_val {
	  expr="1";
	 };
	 is_default=0;
	};
	CaseBlock @[2] {
	 name="CaseBlock_case2";
	 desc="right vert";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: 2";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_canvasLinectrxsi_trxsizectrysize";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="canvas->Line(ctr_x + size, ctr_y - size, ctr_x + size, ctr_y + size)";
	   result_var=NULL;
	   obj=$.programs[4].objs_vars[0]$;
	   method=taCanvas::Line;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	   };
	   meth_sig="void Line(float x1, float y1, float x2, float y2)";
	   meth_desc=" ";
	  };
	 };
	 case_val {
	  expr="2";
	 };
	 is_default=0;
	};
	CaseBlock @[3] {
	 name="CaseBlock_case3";
	 desc="top horiz";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: 3";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_canvasLinectrxsi_trxsizectrysize";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="canvas->Line(ctr_x - size, ctr_y + size, ctr_x + size, ctr_y + size)";
	   result_var=NULL;
	   obj=$.programs[4].objs_vars[0]$;
	   method=taCanvas::Line;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	   };
	   meth_sig="void Line(float x1, float y1, float x2, float y2)";
	   meth_desc=" ";
	  };
	 };
	 case_val {
	  expr="3";
	 };
	 is_default=0;
	};
	CaseBlock @[4] {
	 name="CaseBlock_case4";
	 desc="horiz middle";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: 4";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_canvasLinectrxsi_tryctrxsizectry";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="canvas->Line(ctr_x - size, ctr_y, ctr_x + size, ctr_y)";
	   result_var=NULL;
	   obj=$.programs[4].objs_vars[0]$;
	   method=taCanvas::Line;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y";
	     };
	    };
	   };
	   meth_sig="void Line(float x1, float y1, float x2, float y2)";
	   meth_desc=" ";
	  };
	 };
	 case_val {
	  expr="4";
	 };
	 is_default=0;
	};
	CaseBlock @[5] {
	 name="CaseBlock_case5";
	 desc="vert middle";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: 5";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_canvasLinectrxct_izectrxctrysize";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="canvas->Line(ctr_x, ctr_y - size, ctr_x, ctr_y + size)";
	   result_var=NULL;
	   obj=$.programs[4].objs_vars[0]$;
	   method=taCanvas::Line;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	   };
	   meth_sig="void Line(float x1, float y1, float x2, float y2)";
	   meth_desc=" ";
	  };
	 };
	 case_val {
	  expr="5";
	 };
	 is_default=0;
	};
       };
      };
     };
    };
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    ResetDataRows @[0] {
     name="ResetDataRows_ResetDataRowstablestimgendata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ResetDataRows:  table = stim_gen_data ";
     data_var=.programs[4].objs_vars[1]$$;
    };
    MethodCall @[1] {
     name="MethodCall_canvasSetImageSi_dthcanvasheight";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->SetImageSize(canvas_width, canvas_height)";
     result_var=NULL;
     obj=$.programs[4].objs_vars[0]$;
     method=taImage::SetImageSize;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="width";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="canvas_width";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="height";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="canvas_height";
       };
      };
     };
     meth_sig="bool SetImageSize(int width, int height)";
     meth_desc=" set size of current image -- if currently same size, then returns false and nothing happens; otherwise, a new image data structure of given size is created, using ARGB32 format";
    };
    MethodCall @[2] {
     name="MethodCall_canvasConfigData_BaseVTFLOATtrue";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->ConfigDataColName(stim_gen_data, \"Canvas\", taBase::VT_FLOAT, true)";
     result_var=NULL;
     obj=$.programs[4].objs_vars[0]$;
     method=taImage::ConfigDataColName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dt";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="stim_gen_data";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"Canvas\"";
       };
      };
      ProgArg @[2] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="val_type";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="taBase::VT_FLOAT";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="rgb";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="bool ConfigDataColName(DataTable* dt, taString& col_nm, taBase::ValType val_type, bool rgb = true)";
     meth_desc=" configure data column with given name (if it doesn't exist, it is created) to represent current image -- if rgb is false, then a greyscale image is configured (2d)";
    };
    AddNewDataRow @[3] {
     name="AddNewDataRow_AddNewRowtablestimgendata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Add New Row:  table = stim_gen_data ";
     data_var=$.programs[4].objs_vars[1]$;
    };
    MethodCall @[4] {
     name="MethodCall_canvasInitCanvas";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->InitCanvas()";
     result_var=NULL;
     obj=$.programs[4].objs_vars[0]$;
     method=taCanvas::InitCanvas;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void InitCanvas()";
     meth_desc=" initialize the canvas -- MUST be called prior to drawing!";
    };
    MethodCall @[5] {
     name="MethodCall_canvasEraseNamebgcolor";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->EraseName(bg_color)";
     result_var=NULL;
     obj=$.programs[4].objs_vars[0]$;
     method=taCanvas::EraseName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="bg_color";
       };
      };
     };
     meth_sig="void EraseName(taString& name)";
     meth_desc=" erase image to given color name";
    };
    MethodCall @[6] {
     name="MethodCall_canvasPenWidthlinewidth";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->PenWidth(line_width)";
     result_var=NULL;
     obj=$.programs[4].objs_vars[0]$;
     method=taCanvas::PenWidth;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=float;
       type="float";
       name="width";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="line_width";
       };
      };
     };
     meth_sig="void PenWidth(float width)";
     meth_desc=" ";
    };
    MethodCall @[7] {
     name="MethodCall_canvasPenColorNamelinecolor";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->PenColorName(line_color)";
     result_var=NULL;
     obj=$.programs[4].objs_vars[0]$;
     method=taCanvas::PenColorName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="line_color";
       };
      };
     };
     meth_sig="void PenColorName(taString& name)";
     meth_desc=" ";
    };
    AssignExpr @[8] {
     name="AssignExpr_ObjectEnumObjectNo";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ObjectEnum = ObjectNo";
     result_var=.programs[4].vars[7]$$;
     expr {
      expr="ObjectNo";
     };
    };
    AssignExpr @[9] {
     name="AssignExpr_ObjectNameObjectEnum";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ObjectName = ObjectEnum";
     result_var=.programs[4].vars[6]$$;
     expr {
      expr="ObjectEnum";
     };
    };
    AssignExpr @[10] {
     name="AssignExpr_LEDnObjectNamebeforeafterLED";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LED_n = ObjectName.before(\"_\").after(\"LED\")";
     result_var=.programs[4].vars[12]$$;
     expr {
      expr="ObjectName.before(\"_\").after(\"LED\")";
     };
    };
    AssignExpr @[11] {
     name="AssignExpr_LEDsegsObjectNameafter1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LED_segs = ObjectName.after(\"_\",-1)";
     result_var=.programs[4].vars[13]$$;
     expr {
      expr="ObjectName.after(\"_\",-1)";
     };
    };
    ForLoop @[12] {
     name="ForLoop_fori0iLEDni";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i = 0; i < LED_n; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       name="AssignExpr_curledLEDsegsati1";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cur_led = LED_segs.at(i,1)";
       result_var=.programs[4].vars[14]$$;
       expr {
	expr="LED_segs.at(i,1)";
       };
      };
      FunctionCall @[1] {
       name="FunctionCall_DrawLEDcurled";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="DrawLED(cur_led)";
       result_var=NULL;
       fun=.programs[4].functions[0]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="led_number";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="cur_led";
	 };
	};
       };
      };
     };
     init {
      expr="i = 0";
     };
     test {
      expr="i < LED_n";
     };
     iter {
      expr="i++";
     };
    };
    Comment @[13] {
     name="Comment_updatethedatatab_thecurrentimage";
     desc="update the datatable with the current image";
     flags=CAN_REVERT_TO_CODE;
     code_string="// update the datatable with the current image";
    };
    MethodCall @[14] {
     name="MethodCall_canvasImageToDat_mgendataCanvas1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->ImageToDataCellName(stim_gen_data, \"Canvas\", -1)";
     result_var=NULL;
     obj=$.programs[4].objs_vars[0]$;
     method=taImage::ImageToDataCellName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dt";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="stim_gen_data";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"Canvas\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-1";
       };
      };
     };
     meth_sig="bool ImageToDataCellName(DataTable* dt, taString& col_nm, int row)";
     meth_desc=" set image to datatable cell indexed by col name and row number -- uses cell dimensionality and type -- only amount that fits in cell is copied. row = -1 = last row";
    };
    DoneWritingDataRow @[15] {
     name="DoneWritingDataRow_DoneWritingDataR_ablestimgendata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="DoneWritingDataRow:  table = stim_gen_data ";
     data_var=$.programs[4].objs_vars[1]$;
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[5] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[5].doc$$: };
   };
   name="ApplyInputsImage";
   short_nm="AplyIn";
   tags=;
   desc="apply input data to the network, using a RetinaSpec to process a bitmap image.  epoch should iterate over a datatable with names of images to load, and the current value of that is used here to load the image and process into a second datatable (image_data) which is actually presented to the network.";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=LayerWriter;
    el_def=0;
    V1RetinaProc @[0] {
     name="V1RetinaProc_0";
     edge_mode=WRAP;
     fade_width=-1;
     regions {
      name="regions";
      el_typ=V1RegionSpec;
      el_def=0;
      V1RegionSpec @[0] {
       name="V1h";
       threads {};
       data_table=.programs[5].objs[1]$$;
       save_mode=FIRST_ROW;
       image_save=SAVE_DATA;
       region {ocularity=BINOCULAR: region=FOVEA: res=HI_RES: color=MONOCHROME: edge_mode=WRAP: renorm_thr=1e-5: };
       input_size {retina_size={x=48: y=48: }: border={x=0: y=0: }: input_size={x=48: y=48: }: };
       input_adapt {on=0: up_dt=0.3: dn_dt=0.1: };
       motion_frames=1;
       v1s_specs {on=1: wt=1: gain=2: size=6: spacing=1: wvlen=6: sig_len=0.3: sig_wd=0.2: phase_off=0: circle_edge=1: n_angles=4: };
       v1s_specs_2 {on=0: wt=1: gain=2: size=8: spacing=1: wvlen=6: sig_len=0.3: sig_wd=0.2: phase_off=0: circle_edge=1: n_angles=4: };
       v1s_specs_3 {on=0: wt=1: gain=2: size=8: spacing=1: wvlen=6: sig_len=0.3: sig_wd=0.2: phase_off=0: circle_edge=1: n_angles=4: };
       v1s_renorm=NO_RENORM;
       v1s_kwta {on=1: gi=2: lay_gi=1.5: gain=40: nvar=0.01: g_bar_l=0.1: };
       v1s_neigh_inhib {on=1: inhib_d=1: inhib_g=0.6: tot_ni_len=3: };
       v1s_adapt {on=1: up_dt=0.25: dn_dt=0.3: };
       v1s_save=SAVE_DATA;
       v1s_img_geom {x=48: y=48: n_not_xy=0: n=2304: };
       v1s_feat_geom {x=4: y=2: n_not_xy=0: n=8: };
       v1s_motion {on=0: wt=1: gain=3: size=10: spacing=1: wvlen=6: sig_len=2: sig_wd=0.3: phase_off=1.570796: circle_edge=0: n_angles=2: r_only=1: };
       v1m_renorm=NO_RENORM;
       v1m_kwta {on=1: gi=3: lay_gi=10: gain=10: nvar=0.01: g_bar_l=0.1: };
       v1m_feat_geom {x=4: y=4: n_not_xy=0: n=16: };
       square_group {on=1: sg_rf=2: sg_spc=2: v1s_color=0: sg_half=1: sg_border=0: };
       sg_save=0;
       v1sg_img_geom {x=24: y=24: n_not_xy=0: n=576: };
       v1sg_feat_geom {x=4: y=2: n_not_xy=0: n=8: };
       v1c_specs {on=1: end_stop=1: add_v1s=1: len_sum_len=1: es_thr=0.2: len_sum_width=3: len_sum_norm=0.3333333: };
       v1c_kwta {on=0: gi=2: lay_gi=1.5: gain=80: nvar=0.01: g_bar_l=0.1: };
       v1c_save=0;
       v1c_img_geom {x=24: y=24: n_not_xy=0: n=576: };
       v1c_feat_geom {x=4: y=5: n_not_xy=0: n=20: };
       si_specs {on=0: v1s=0: v1pi=0: v1c=1: spat_rf={x=12: y=12: }: sig=0.8: sum_rf=0: spat_half={x=6: y=6: }: spat_spacing={x=6: y=6: }: spat_border={x=0: y=0: }: };
       si_renorm=NO_RENORM;
       si_kwta {on=1: gi=2: lay_gi=1.5: gain=40: nvar=0.01: g_bar_l=0.1: };
       si_save=0;
       si_v1s_geom {x=8: y=8: n_not_xy=0: n=64: };
       si_v1c_geom {x=8: y=8: n_not_xy=0: n=64: };
       opt_filters=0;
       opt_save=SAVE_DATA;
       n_colors=1;
       n_polarities=2;
       n_polclr=2;
       v1m_out_polarities=1;
      };
      V1RegionSpec @[1] {
       name="V1m";
       threads {};
       data_table=$.programs[5].objs[1]$;
       save_mode=FIRST_ROW;
       image_save=0;
       region {ocularity=BINOCULAR: region=FOVEA: res=MED_RES: color=MONOCHROME: edge_mode=WRAP: renorm_thr=1e-5: };
       input_size {retina_size={x=48: y=48: }: border={x=0: y=0: }: input_size={x=48: y=48: }: };
       input_adapt {on=0: up_dt=0.3: dn_dt=0.1: };
       motion_frames=1;
       v1s_specs {on=1: wt=1: gain=2: size=12: spacing=2: wvlen=12: sig_len=0.3: sig_wd=0.2: phase_off=0: circle_edge=1: n_angles=4: };
       v1s_specs_2 {on=0: wt=1: gain=2: size=8: spacing=1: wvlen=6: sig_len=0.3: sig_wd=0.2: phase_off=0: circle_edge=1: n_angles=4: };
       v1s_specs_3 {on=0: wt=1: gain=2: size=8: spacing=1: wvlen=6: sig_len=0.3: sig_wd=0.2: phase_off=0: circle_edge=1: n_angles=4: };
       v1s_renorm=NO_RENORM;
       v1s_kwta {on=1: gi=2: lay_gi=1.5: gain=40: nvar=0.01: g_bar_l=0.1: };
       v1s_neigh_inhib {on=1: inhib_d=1: inhib_g=0.6: tot_ni_len=3: };
       v1s_adapt {on=1: up_dt=0.25: dn_dt=0.3: };
       v1s_save=SAVE_DATA;
       v1s_img_geom {x=24: y=24: n_not_xy=0: n=576: };
       v1s_feat_geom {x=4: y=2: n_not_xy=0: n=8: };
       v1s_motion {on=0: wt=1: gain=3: size=10: spacing=1: wvlen=6: sig_len=2: sig_wd=0.3: phase_off=1.570796: circle_edge=0: n_angles=2: r_only=1: };
       v1m_renorm=NO_RENORM;
       v1m_kwta {on=1: gi=3: lay_gi=10: gain=10: nvar=0.01: g_bar_l=0.1: };
       v1m_feat_geom {x=4: y=4: n_not_xy=0: n=16: };
       square_group {on=1: sg_rf=2: sg_spc=2: v1s_color=0: sg_half=1: sg_border=0: };
       sg_save=0;
       v1sg_img_geom {x=12: y=12: n_not_xy=0: n=144: };
       v1sg_feat_geom {x=4: y=2: n_not_xy=0: n=8: };
       v1c_specs {on=1: end_stop=1: add_v1s=1: len_sum_len=1: es_thr=0.2: len_sum_width=3: len_sum_norm=0.3333333: };
       v1c_kwta {on=0: gi=2: lay_gi=1.5: gain=80: nvar=0.01: g_bar_l=0.1: };
       v1c_save=0;
       v1c_img_geom {x=12: y=12: n_not_xy=0: n=144: };
       v1c_feat_geom {x=4: y=5: n_not_xy=0: n=20: };
       si_specs {on=0: v1s=0: v1pi=0: v1c=1: spat_rf={x=12: y=12: }: sig=0.8: sum_rf=0: spat_half={x=6: y=6: }: spat_spacing={x=6: y=6: }: spat_border={x=0: y=0: }: };
       si_renorm=NO_RENORM;
       si_kwta {on=1: gi=2: lay_gi=1.5: gain=40: nvar=0.01: g_bar_l=0.1: };
       si_save=0;
       si_v1s_geom {x=4: y=4: n_not_xy=0: n=16: };
       si_v1c_geom {x=4: y=4: n_not_xy=0: n=16: };
       opt_filters=0;
       opt_save=SAVE_DATA;
       n_colors=1;
       n_polarities=2;
       n_polclr=2;
       v1m_out_polarities=1;
      };
     };
    };
    DataTable @[1] {
     name="V1FilterInputData";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="Output";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 5;4;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=6;
       matrix_col_width=10;
      };
      String_Data @[1] {
       name="Name";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_509";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="IMAGE": value=1: val_type_fixed=0: };
       };
       name="V1h_image_r";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 48;48;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=48;
       matrix_col_width=10;
      };
      float_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_510";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="IMAGE": value=1: val_type_fixed=0: };
       };
       name="V1h_image_l";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 48;48;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=48;
       matrix_col_width=10;
      };
      float_Data @[4] {
       name="V1h_v1s_r";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;2;48;48;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[5] {
       name="V1h_v1s_l";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;2;48;48;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[6] {
       name="V1h_v1pi_r";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;1;48;48;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[7] {
       name="V1h_v1pi_l";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;1;48;48;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[8] {
       name="V1m_v1s_r";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;2;24;24;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[9] {
       name="V1m_v1s_l";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;2;24;24;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[10] {
       name="V1m_v1pi_r";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;1;24;24;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[11] {
       name="V1m_v1pi_l";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;1;24;24;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=10;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    LayerWriter @[2] {
     name="V1LayerWriter";
     data=$.programs[5].objs[1]$;
     network=$.networks[0]$;
     layer_data {
      name="layer_data";
      el_typ=LayerWriterEl;
      el_def=0;
      LayerWriterEl @[0] {
       off=0;
       col_name="V1h_v1s_r";
       net_target=LAYER;
       layer_name="V1h_r";
       offset {x=0: y=0: };
       use_layer_type=1;
       quiet=0;
       na_by_range=0;
       ext_flags=EXT;
       noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
      };
      LayerWriterEl @[1] {
       off=0;
       col_name="V1h_v1s_l";
       net_target=LAYER;
       layer_name="V1h_l";
       offset {x=0: y=0: };
       use_layer_type=1;
       quiet=0;
       na_by_range=0;
       ext_flags=EXT;
       noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
      };
      LayerWriterEl @[2] {
       off=0;
       col_name="V1m_v1s_r";
       net_target=LAYER;
       layer_name="V1m_r";
       offset {x=0: y=0: };
       use_layer_type=1;
       quiet=0;
       na_by_range=0;
       ext_flags=EXT;
       noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
      };
      LayerWriterEl @[3] {
       off=0;
       col_name="V1m_v1s_l";
       net_target=LAYER;
       layer_name="V1m_l";
       offset {x=0: y=0: };
       use_layer_type=1;
       quiet=0;
       na_by_range=0;
       ext_flags=EXT;
       noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
      };
      LayerWriterEl @[4] {
       off=0;
       col_name="V1h_image_r";
       net_target=LAYER;
       layer_name="Image";
       offset {x=0: y=0: };
       use_layer_type=1;
       quiet=0;
       na_by_range=0;
       ext_flags=EXT;
       noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
      };
      LayerWriterEl @[5] {
       off=0;
       col_name="Output";
       net_target=LAYER;
       layer_name="Output";
       offset {x=0: y=0: };
       use_layer_type=1;
       quiet=0;
       na_by_range=0;
       ext_flags=TARG;
       noise {name="RandomSpec_23": type=NONE: mean=0: var=0.5: par=1: };
      };
      LayerWriterEl @[6] {
       off=0;
       col_name="Name";
       net_target=TRIAL_NAME;
       layer_name="Name";
       offset {x=0: y=0: };
       use_layer_type=1;
       quiet=0;
       na_by_range=0;
       ext_flags=0;
       noise {name="RandomSpec_24": type=NONE: mean=0: var=0.5: par=1: };
      };
     };
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="v1_retina_proc_0";
     var_type=T_Object;
     object_type=V1RetinaProc;
     object_val=.programs[5].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="v1_filter_input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.programs[5].objs[1]$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="v1_layer_writer";
     var_type=T_Object;
     object_type=LayerWriter;
     object_val=.programs[5].objs[2]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="Moves data into the network";
     init_from=NULL;
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.data.gp[0][0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="Source data for input process";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.networks[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="Network to which to apply inputs";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="ObjectName";
     var_type=T_String;
     string_val="LED3_5_024";
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of object to render";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="Name";
     var_type=T_String;
     string_val="12";
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of object to render";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="ObjectNo";
     var_type=T_Int;
     int_val=12;
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="object number (for output layer)";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="translate_x";
     var_type=T_Real;
     real_val=0.01986039348436602;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="Horizontal translation in image coordinates for current input (0.0 - 1.0, 0.3 is generally maximum)";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="translate_y";
     var_type=T_Real;
     real_val=0.2142412490924162;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="Vertical translation for current input (image coords)";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="scale";
     var_type=T_Real;
     real_val=0.7957037119085432;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="Scaling factor for current input - fraction of size of one dimension (50% = 0.5)";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="rotate";
     var_type=T_Real;
     real_val=-0.004915274762853856;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="Rotation for current input - 0.5 is 180 degrees";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="Canvas";
     var_type=T_Object;
     object_type=taCanvas;
     object_val=$.programs[4].objs[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_v1layerwriterSet_nputdatanetwork";
     desc="Connect the image data table to the layerwriter";
     flags=CAN_REVERT_TO_CODE;
     code_string="v1_layer_writer->SetDataNetwork(v1_filter_input_data, network)";
     result_var=NULL;
     obj=.programs[5].objs_vars[2]$$;
     method=LayerWriter::SetDataNetwork;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="db";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="v1_filter_input_data";
       };
      };
      ProgArg @[1] {
       arg_type=Network_ptr;
       type="Network*";
       name="net";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
     };
     meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
     meth_desc=" set the data table and network pointers -- convenience function for programs ";
    };
    MethodCall @[1] {
     name="MethodCall_v1layerwriterCheckConfigfalse";
     desc="Confirm that all is well with the layerwriter";
     flags=CAN_REVERT_TO_CODE;
     code_string="v1_layer_writer->CheckConfig(false)";
     result_var=NULL;
     obj=$.programs[5].objs_vars[2]$;
     method=taList_impl::CheckConfig;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="bool CheckConfig(bool quiet = false)";
     meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
    };
    MemberAssign @[2] {
     name="MemberAssign_v1retinaproc0V1hthreadsonfalse";
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="v1_retina_proc_0.V1h.threads.on = false";
     obj=.programs[5].objs_vars[0]$$;
     path="V1h.threads.on";
     expr {
      expr="false";
     };
     update_after=0;
    };
    MemberAssign @[3] {
     name="MemberAssign_v1retinaproc0V1mthreadsonfalse";
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="v1_retina_proc_0.V1m.threads.on = false";
     obj=$.programs[5].objs_vars[0]$;
     path="V1m.threads.on";
     expr {
      expr="false";
     };
     update_after=0;
    };
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    If @[0] {
     name="If_ifnetworkquarter0";
     desc="For minus phase";
     flags=CAN_REVERT_TO_CODE;
     code_string="if (network.quarter == 0)";
     cond {
      expr="network.quarter == 0";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MemberAssign @[0] {
       name="MemberAssign_v1retinaproc0V1hthreadsonfalse";
       desc=;
       flags=OFF|PROG_ERROR|CAN_REVERT_TO_CODE;
       code_string="v1_retina_proc_0.V1h.threads.on = false";
       obj=$.programs[5].objs_vars[0]$;
       path="V1h.threads.on";
       expr {
	expr="false";
       };
       update_after=0;
      };
      MemberAssign @[1] {
       name="MemberAssign_v1retinaproc0V1mthreadsonfalse";
       desc=;
       flags=OFF|CAN_REVERT_TO_CODE;
       code_string="v1_retina_proc_0.V1m.threads.on = false";
       obj=$.programs[5].objs_vars[0]$;
       path="V1m.threads.on";
       expr {
	expr="false";
       };
       update_after=0;
      };
      DataVarProg @[2] {
       name="DataVarProg_DataFromtableinp_bjectNovar3var4";
       desc="get object name, number";
       flags=CAN_REVERT_TO_CODE;
       code_string="Data From:  table=input_data  row_spec=cur_row  set=from  all_matches=false  var_1=ObjectName  var_2=ObjectNo  var_3=?  var_4=? ";
       data_var=.programs[5].args[0]$$;
       row_spec=CUR_ROW;
       row_var=NULL;
       set_data=0;
       all_matches=0;
       quiet=0;
       var_1=.programs[5].vars[1]$$;
       var_2=.programs[5].vars[3]$$;
       var_3=NULL;
       var_4=NULL;
      };
      DataVarProg @[3] {
       name="DataVarProg_DataFromtableinp_rotatevar4scale";
       desc="get display transformations (translation, rotation, scale)";
       flags=CAN_REVERT_TO_CODE;
       code_string="Data From:  table=input_data  row_spec=cur_row  set=from  all_matches=false  var_1=translate_x  var_2=translate_y  var_3=rotate  var_4=scale ";
       data_var=$.programs[5].args[0]$;
       row_spec=CUR_ROW;
       row_var=NULL;
       set_data=0;
       all_matches=0;
       quiet=0;
       var_1=.programs[5].vars[4]$$;
       var_2=.programs[5].vars[5]$$;
       var_3=.programs[5].vars[7]$$;
       var_4=.programs[5].vars[6]$$;
      };
      ProgramCall @[4] {
       name="ProgramCall_LEDStimGenObjectNo";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LEDStimGen(ObjectNo)";
       prog_args {
	name="prog_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="ObjectNo";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="ObjectNo";
	 };
	};
       };
       target=.programs[4]$$;
       targ_ld_init="*LEDStimGen*";
      };
      MethodCall @[5] {
       name="MethodCall_v1retinaproc0Loo_ateyscalerotate";
       desc="Key operation: Read and filter the image into the image data table ";
       flags=CAN_REVERT_TO_CODE;
       code_string="v1_retina_proc_0->LookAtImage(Canvas, Canvas, VisRegionParams::FOVEA, 0.0, 0.0, 1.0, 1.0, translate_x, translate_y, scale, rotate)";
       result_var=NULL;
       obj=$.programs[5].objs_vars[0]$;
       method=RetinaProc::LookAtImage;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taImage_ptr;
	 type="taImage*";
	 name="right_eye_image";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Canvas";
	 };
	};
	ProgArg @[1] {
	 arg_type=taImage_ptr;
	 type="taImage*";
	 name="left_eye_image";
	 required=0;
	 def_val="__null";
	 prev_expr=;
	 expr {
	  expr="Canvas";
	 };
	};
	ProgArg @[2] {
	 arg_type=VisRegionParams::Region;
	 type="VisRegionParams::Region";
	 name="region";
	 required=0;
	 def_val="VisRegionParams::FOVEA";
	 prev_expr=;
	 expr {
	  expr="VisRegionParams::FOVEA";
	 };
	};
	ProgArg @[3] {
	 arg_type=float;
	 type="float";
	 name="box_ll_x";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr="0.0";
	 };
	};
	ProgArg @[4] {
	 arg_type=float;
	 type="float";
	 name="box_ll_y";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr="0.0";
	 };
	};
	ProgArg @[5] {
	 arg_type=float;
	 type="float";
	 name="box_ur_x";
	 required=0;
	 def_val="1.0f";
	 prev_expr=;
	 expr {
	  expr="1.0";
	 };
	};
	ProgArg @[6] {
	 arg_type=float;
	 type="float";
	 name="box_ur_y";
	 required=0;
	 def_val="1.0f";
	 prev_expr=;
	 expr {
	  expr="1.0";
	 };
	};
	ProgArg @[7] {
	 arg_type=float;
	 type="float";
	 name="move_x";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr="translate_x";
	 };
	};
	ProgArg @[8] {
	 arg_type=float;
	 type="float";
	 name="move_y";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr="translate_y";
	 };
	};
	ProgArg @[9] {
	 arg_type=float;
	 type="float";
	 name="scale";
	 required=0;
	 def_val="1.0f";
	 prev_expr=;
	 expr {
	  expr="scale";
	 };
	};
	ProgArg @[10] {
	 arg_type=float;
	 type="float";
	 name="rotate";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr="rotate";
	 };
	};
       };
       meth_sig="bool LookAtImage(taImage* right_eye_image, taImage* left_eye_image = __null, VisRegionParams::Region region = VisRegionParams::FOVEA, float box_ll_x = 0.0f, float box_ll_y = 0.0f, float box_ur_x = 1.0f, float box_ur_y = 1.0f, float move_x = 0.0f, float move_y = 0.0f, float scale = 1.0f, float rotate = 0.0f)";
       meth_desc=" transform image/s in image format, with region of retina centered and scaled to fit the box coordinates given in 0-1 normalized units (ll=lower-left, ur=upper-right); additional scale, rotate, and move params applied after foveation scaling and offsets";
      };
      MethodCall @[6] {
       name="MethodCall_v1retinaproc0FilterImageData";
       desc="Key operation: Read and filter the image into the image data table ";
       flags=CAN_REVERT_TO_CODE;
       code_string="v1_retina_proc_0->FilterImageData()";
       result_var=NULL;
       obj=$.programs[5].objs_vars[0]$;
       method=RetinaProc::FilterImageData;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=bool;
	 type="bool";
	 name="motion_only";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="bool FilterImageData(bool motion_only = false)";
       meth_desc=" filter retinal image data -- operates on images that were generated from prior Transform or LookAt calls -- must call one of those first -- if motion_only = true, then only process up to level of motion, for faster processing of initial frames of motion sequence";
      };
      Comment @[7] {
       name="Comment_setOutputtargetvalue";
       desc="set Output target value";
       flags=CAN_REVERT_TO_CODE;
       code_string="// set Output target value";
      };
      MethodCall @[8] {
       name="MethodCall_v1filterinputdat_nitVals00Output";
       desc="set output unit";
       flags=CAN_REVERT_TO_CODE;
       code_string="v1_filter_input_data->InitVals(0.0, \"Output\", , )";
       result_var=NULL;
       obj=.programs[5].objs_vars[1]$$;
       method=DataTable::InitVals;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="init_val";
	 required=1;
	 def_val=;
	 prev_expr="0.0";
	 expr {
	  expr="0.0";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr="\"Output\"";
	 expr {
	  expr="\"Output\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[3] {
	 arg_type=int;
	 type="int";
	 name="n_rows";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="bool InitVals(Variant& init_val, Variant& col, int st_row = 0, int n_rows = -1)";
       meth_desc=" initialize all values in given column to given value -- column can be specified as either integer index or a string that is then used to find the given column name -- for rows as specified by starting row, and n_rows = -1 means to the end";
      };
      MethodCall @[9] {
       name="MethodCall_v1filterinputdat_Output1ObjectNo";
       desc="set output unit";
       flags=CAN_REVERT_TO_CODE;
       code_string="v1_filter_input_data->SetMatrixFlatValColName(1.0, \"Output\", -1, ObjectNo, )";
       result_var=NULL;
       obj=$.programs[5].objs_vars[1]$;
       method=DataTable::SetMatrixFlatValColName;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="1.0";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_name";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="\"Output\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="-1";
	 };
	};
	ProgArg @[3] {
	 arg_type=int;
	 type="int";
	 name="cell";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="ObjectNo";
	 };
	};
	ProgArg @[4] {
	 arg_type=bool;
	 type="bool";
	 name="quiet";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="bool SetMatrixFlatValColName(Variant& val, taString& col_name, int row, int cell, bool quiet = false)";
       meth_desc=" set data of matrix type, in Variant form (any data type, use for Programs), for given column, row, and flat matrix cell index (flat index into elements of the matrix, regardless of dimensionality); returns 'true' if valid access and set is successful -- quiet = fail quietly";
      };
      AssignExpr @[10] {
       name="AssignExpr_NametaMiscLeadingZerosObjectNo2";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Name = taMisc::LeadingZeros(ObjectNo,2)";
       result_var=.programs[5].vars[2]$$;
       expr {
	expr="taMisc::LeadingZeros(ObjectNo,2)";
       };
      };
      DataVarProg @[11] {
       name="DataVarProg_DataTotablev1fil_amevar2var3var4";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Data To:  table=v1_filter_input_data  row_spec=cur_row  set=to  all_matches=false  var_1=Name  var_2=?  var_3=?  var_4=? ";
       data_var=$.programs[5].objs_vars[1]$;
       row_spec=CUR_ROW;
       row_var=NULL;
       set_data=1;
       all_matches=0;
       quiet=0;
       var_1=$.programs[5].vars[2]$;
       var_2=NULL;
       var_3=NULL;
       var_4=NULL;
      };
     };
    };
    MethodCall @[1] {
     name="MethodCall_v1filterinputdataReadItem1";
     desc="Final read of image data before applying to network";
     flags=CAN_REVERT_TO_CODE;
     code_string="v1_filter_input_data->ReadItem(-1)";
     result_var=NULL;
     obj=$.programs[5].objs_vars[1]$;
     method=DataTable::ReadItem;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="idx";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-1";
       };
      };
     };
     meth_sig="bool ReadItem(int idx)";
     meth_desc=" goes directly (random access) to row idx (- = count back from last row available, otherwise must be in range 0 <= idx < rows) so that it is now available for GetData routines (which use read_idx for their row number), returns true if row exists and was read";
    };
    MethodCall @[2] {
     name="MethodCall_v1layerwriterApplyInputData";
     desc="write the data to the network!";
     flags=CAN_REVERT_TO_CODE;
     code_string="v1_layer_writer->ApplyInputData()";
     result_var=NULL;
     obj=$.programs[5].objs_vars[2]$;
     method=LayerWriter::ApplyInputData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="bool ApplyInputData()";
     meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
    };
    DoneWritingDataRow @[3] {
     name="DoneWritingDataRow_DoneWritingDataR_filterinputdata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="DoneWritingDataRow:  table = v1_filter_input_data ";
     data_var=$.programs[5].objs_vars[1]$;
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[6] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[6].doc$$: };
   };
   name="LoadWeights";
   short_nm="LWghts";
   tags=;
   desc="load weights from trained networks";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=0;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.networks[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to train";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_networkLoadWeights";
     desc=;
     flags=0;
     code_string=;
     result_var=NULL;
     obj=.programs[6].args[0]$$;
     method=Network::LoadWeights;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="bool LoadWeights(taString& fname, bool quiet = false)";
     meth_desc=" read weight values in from a simple ordered list of weights (fmt is read from file) (leave fname empty to pull up file chooser)";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[7] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[7].doc$$: };
   };
   name="LoadTestData";
   short_nm="LTsDt";
   tags=;
   desc="load pre-run testing data";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=0;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="TestErrorData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[2][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_TestErrorDataLoa_bleTABtrue1true";
     desc=;
     flags=0;
     code_string=;
     result_var=NULL;
     obj=.programs[7].args[0]$$;
     method=DataTable::LoadData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"\"";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable::Delimiters;
       type="DataTable::Delimiters";
       name="delim";
       required=0;
       def_val="DataTable::TAB";
       prev_expr=;
       expr {
	expr="DataTable::TAB";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quote_str";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
      ProgArg @[3] {
       arg_type=int;
       type="int";
       name="max_recs";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr="-1";
       };
      };
      ProgArg @[4] {
       arg_type=bool;
       type="bool";
       name="reset_first";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void LoadData(taString& fname, DataTable::Delimiters delim = TAB, bool quote_str = true, int max_recs = -1, bool reset_first = true)";
     meth_desc=" load Emergent native format data (ONLY) - has a special header to define columns, up to max num of recs (-1 for all), with delimiter between columns and optionally quoting strings, reset_first = remove any existing data prior to loading -- this is much faster than LoadAnyData, especially noticible for very large data files";
    };
    MethodCall @[1] {
     name="MethodCall_TestErrorDataFindMakeGraphView";
     desc="this is not good because it resets the view axes";
     flags=OFF;
     code_string=;
     result_var=NULL;
     obj=$.programs[7].args[0]$;
     method=DataTable::FindMakeGraphView;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=T3Panel_ptr;
       type="T3Panel*";
       name="fr";
       required=0;
       def_val="__null";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="select_view";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="GraphTableView_ptr FindMakeGraphView(T3Panel* fr = __null, bool select_view = true)";
     meth_desc=" find existing or make a new graph view of this table (NULL=use existing empty frame if any, else make new frame) -- if select_view then existing view tab is selected";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[8] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[8].doc$$: };
   };
   name="LoadActRFData";
   short_nm="LdcRFD";
   tags=;
   desc="load pre-run activation-based receptive field data";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=0;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ActRFData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs.gp[1][7].objs[1]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_ActRFDataLoadDat_bleTABtrue1true";
     desc=;
     flags=0;
     code_string=;
     result_var=NULL;
     obj=.programs[8].args[0]$$;
     method=DataTable::LoadData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"\"";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable::Delimiters;
       type="DataTable::Delimiters";
       name="delim";
       required=0;
       def_val="DataTable::TAB";
       prev_expr=;
       expr {
	expr="DataTable::TAB";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quote_str";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
      ProgArg @[3] {
       arg_type=int;
       type="int";
       name="max_recs";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr="-1";
       };
      };
      ProgArg @[4] {
       arg_type=bool;
       type="bool";
       name="reset_first";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void LoadData(taString& fname, DataTable::Delimiters delim = TAB, bool quote_str = true, int max_recs = -1, bool reset_first = true)";
     meth_desc=" load Emergent native format data (ONLY) - has a special header to define columns, up to max num of recs (-1 for all), with delimiter between columns and optionally quoting strings, reset_first = remove any existing data prior to loading -- this is much faster than LoadAnyData, especially noticible for very large data files";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[9] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[9].doc$$: };
   };
   name="GenTrain";
   short_nm="GTrn";
   tags=;
   desc="generalization training preparation: load weights, set lrate to 0, epoch to 90, train mode to TRAIN_NOVEL";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.networks[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="LeabraEpoch";
     var_type=T_Object;
     object_type=Program;
     object_val=.programs.gp[0][2]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="LeabraConSpec_0";
     var_type=T_Object;
     object_type=LeabraConSpec;
     object_val=NULL;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="GenerateItemList";
     var_type=T_Object;
     object_type=Program;
     object_val=.programs[3]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_networkLoadWeigh_jrectrain1wtsgz";
     desc=;
     flags=0;
     code_string=;
     result_var=NULL;
     obj=.programs[9].args[0]$$;
     method=Network::LoadWeights;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"objrec_train1.wts.gz\"";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="bool LoadWeights(taString& fname, bool quiet = false)";
     meth_desc=" read weight values in from a simple ordered list of weights (fmt is read from file) (leave fname empty to pull up file chooser)";
    };
    MemberAssign @[1] {
     name="MemberAssign_networkepoch40";
     desc="reset epoch to 90 so learning rate schedule goes back to .01 for 10 epochs, then .001 for remainder";
     flags=0;
     code_string=;
     obj=$.programs[9].args[0]$;
     path="epoch";
     expr {
      expr="40";
     };
     update_after=0;
    };
    MethodCall @[2] {
     name="MethodCall_LeabraEpochSetVa_ttypeTRAINNOVEL";
     desc=;
     flags=0;
     code_string=;
     result_var=NULL;
     obj=.programs[9].vars[0]$$;
     method=Program::SetVar;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"input_type\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="value";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"TRAIN_NOVEL\"";
       };
      };
     };
     meth_sig="bool SetVar(taString& var_nm, Variant& value)";
     meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
    };
    MethodCall @[3] {
     name="MethodCall_GenerateItemList_ttypeTRAINNOVEL";
     desc=;
     flags=0;
     code_string=;
     result_var=NULL;
     obj=.programs[9].vars[2]$$;
     method=Program::SetVar;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"input_type\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="value";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"TRAIN_NOVEL\"";
       };
      };
     };
     meth_sig="bool SetVar(taString& var_nm, Variant& value)";
     meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
    };
    MemberAssign @[4] {
     name="MemberAssign_LeabraConSpec0lrate00";
     desc="set lrate to 0 for all but output <-> V4_IT pathways";
     flags=0;
     code_string=;
     obj=.programs[9].vars[1]$$;
     path="lrate";
     expr {
      expr="0.0";
     };
     update_after=1;
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[10] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[10].doc$$: };
   };
   name="RegTrain";
   short_nm="RTrn";
   tags=;
   desc="go back to regular training mode";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.networks[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="LeabraEpoch";
     var_type=T_Object;
     object_type=Program;
     object_val=$.programs.gp[0][2]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="LeabraConSpec_0";
     var_type=T_Object;
     object_type=LeabraConSpec;
     object_val=NULL;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="GenerateItemList";
     var_type=T_Object;
     object_type=Program;
     object_val=$.programs[3]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_LeabraEpochSetVarinputtypeTRAIN";
     desc=;
     flags=0;
     code_string=;
     result_var=NULL;
     obj=.programs[10].vars[0]$$;
     method=Program::SetVar;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"input_type\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="value";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"TRAIN\"";
       };
      };
     };
     meth_sig="bool SetVar(taString& var_nm, Variant& value)";
     meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
    };
    MemberAssign @[1] {
     name="MemberAssign_LeabraConSpec0lrate002";
     desc=;
     flags=0;
     code_string=;
     obj=.programs[10].vars[1]$$;
     path="lrate";
     expr {
      expr="0.02";
     };
     update_after=1;
    };
    MethodCall @[2] {
     name="MethodCall_GenerateItemList_rinputtypeTRAIN";
     desc=;
     flags=0;
     code_string=;
     result_var=NULL;
     obj=.programs[10].vars[2]$$;
     method=Program::SetVar;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"input_type\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="value";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"TRAIN\"";
       };
      };
     };
     meth_sig="bool SetVar(taString& var_nm, Variant& value)";
     meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][0].doc$$: };
    };
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of batch runs to perform";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitbatch";
      desc="initializes local batch counter and batch field on network";
      flags=0;
      code_string=;
      network_var=.programs.gp[0][0].args[0]$$;
      local_ctr_var=.programs.gp[0][0].vars[0]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitbatch";
      desc="initializes local batch counter and batch field on network";
      flags=0;
      code_string=;
      network_var=$.programs.gp[0][0].args[0]$;
      local_ctr_var=$.programs.gp[0][0].vars[0]$;
      counter=Network::batch;
      update_after=0;
     };
     WhileLoop @[1] {
      name="WhileLoop_whilebatchmaxbatch";
      desc="the main loop over training runs";
      flags=0;
      code_string=;
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrainnetworkinputdatatrue";
	desc="run the training program -- sets the network and input_data args";
	flags=0;
	code_string=;
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="true";
	  };
	 };
	};
	target=$.programs.gp[0][1]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrbatch";
	desc="increment the local batch counter and copy to network";
	flags=0;
	code_string=;
	network_var=$.programs.gp[0][0].args[0]$;
	local_ctr_var=$.programs.gp[0][0].vars[0]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][1].doc$$: };
    };
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      rnd_seed=1645458914;
     };
     TimeUsedHR @[1] {name="batch_TimeUsedHR": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     TimeUsed @[2] {name="build_time_used": start={usr=10713: sys=1118: tot=151176477666: }: end={usr=12973: sys=1701: tot=151176479762: }: used={usr=2260: sys=583: tot=2096: }: s_used=20.96: n_used=1: };
     TimeUsed @[3] {name="init_wts_time_used": start={usr=13013: sys=1715: tot=151176480413: }: end={usr=15593: sys=2251: tot=151176481403: }: used={usr=2580: sys=536: tot=990: }: s_used=9.9: n_used=1: };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.programs.gp[0][1].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="batch_time_used_hr";
      var_type=T_Object;
      object_type=TimeUsedHR;
      object_val=.programs.gp[0][1].objs[1]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[2] {
      name="build_time_used";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.programs.gp[0][1].objs[2]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="init_wts_time_used";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.programs.gp[0][1].objs[3]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to train";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of epochs to run";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      object_scope=NULL;
      hard_enum_type=Network::TrainMode;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.programs.gp[0][1].types[0]$$;
       value=0;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=-1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.networks[0].train_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="thread_report_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[2][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_nopromptsfalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="no_prompts = false";
      result_var=.programs.gp[0][1].args[2]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      name="MethodCall_networkCheckConfigfalse";
      desc="check network to make sure it is ready to be run";
      flags=OFF;
      code_string=;
      result_var=NULL;
      obj=.programs.gp[0][1].args[0]$$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     AssignExpr @[2] {
      name="AssignExpr_traintimernetworktraintime";
      desc="get our pointer to the network training time object";
      flags=OFF;
      code_string=;
      result_var=.programs.gp[0][1].vars[5]$$;
      expr {
       expr="network.train_time";
      };
     };
     If @[3] {
      name="If_ifrndinitOLDSEED";
      desc="initialize random seed (either old or new)";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (rnd_init == OLD_SEED)";
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_rndseedOldSeed";
	desc="restore previous random seed (all runs produce same results)";
	flags=CAN_REVERT_TO_CODE;
	code_string="rnd_seed->OldSeed()";
	result_var=NULL;
	obj=.programs.gp[0][1].objs_vars[0]$$;
	method=RndSeed::OldSeed;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void OldSeed()";
	meth_desc=" restore current seed to random num generator";
       };
      };
     };
     Else @[4] {
      name="Else_If_ifrndinitOLDSEED";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else";
      cond {
       expr=;
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_rndseedNewSeed";
	desc="new random numbers each time";
	flags=CAN_REVERT_TO_CODE;
	code_string="rnd_seed->NewSeed()";
	result_var=NULL;
	obj=$.programs.gp[0][1].objs_vars[0]$;
	method=RndSeed::NewSeed;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void NewSeed()";
	meth_desc=" set the seed to a new random value (based on time and process id)";
       };
      };
     };
     IfGuiPrompt @[5] {
      name="IfGuiPrompt_ifguiDoyouwantto_eNetworkWeights";
      desc="don't initialize weights without checking";
      flags=OFF;
      code_string=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name="yes_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkInitWeights";
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=0;
	code_string=;
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[1] {
	name="PrintExpr_Printnetworkname_ghtsInitialized";
	desc=;
	flags=0;
	code_string=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="report";
	var_type=T_String;
	string_val=;
	object_scope=NULL;
	flags=LOCAL_VAR|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      name="AssignExpr_traintimernetworktraintime";
      desc="get our pointer to the network training time object";
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=$.programs.gp[0][1].vars[5]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[2] {
      name="MethodCall_traintimerStartTimertrue";
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[0][1].vars[5]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MemberAssign @[3] {
      name="MemberAssign_networktrainmodetrainmode";
      desc="set network's training mode to our local value";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.train_mode = train_mode";
      obj=$.programs.gp[0][1].args[0]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     PrintExpr @[4] {
      name="PrintExpr_PrintStartingNetworkBuild";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print \"Starting Network Build...\"";
      expr {
       expr="\"Starting Network Build...\"";
      };
      debug=0;
     };
     MethodCall @[5] {
      name="MethodCall_buildtimeusedStartTimertrue";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="build_time_used->StartTimer(true)";
      result_var=NULL;
      obj=.programs.gp[0][1].objs_vars[2]$$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[6] {
      name="MethodCall_networkBuild";
      desc="initialize network weights: could also load pre-set weights or something else here";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Build()";
      result_var=NULL;
      obj=$.programs.gp[0][1].args[0]$;
      method=Network::Build;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Build()";
      meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
     };
     MethodCall @[7] {
      name="MethodCall_buildtimeusedEndTimer";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="build_time_used->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][1].objs_vars[2]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     PrintExpr @[8] {
      name="PrintExpr_PrintBuildtotalt_dusedGetTotSecs";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print \"Build total time: \" << build_time_used.used.GetTotSecs()";
      expr {
       expr="\"Build total time: \" << build_time_used.used.GetTotSecs()";
      };
      debug=0;
     };
     PrintExpr @[9] {
      name="PrintExpr_PrintStartingInitWeights";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print \"Starting Init Weights...\"";
      expr {
       expr="\"Starting Init Weights...\"";
      };
      debug=0;
     };
     MethodCall @[10] {
      name="MethodCall_initwtstimeusedStartTimertrue";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="init_wts_time_used->StartTimer(true)";
      result_var=NULL;
      obj=.programs.gp[0][1].objs_vars[3]$$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[11] {
      name="MethodCall_networkInitWeights";
      desc="initialize network weights: could also load pre-set weights or something else here";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_Weights()";
      result_var=NULL;
      obj=$.programs.gp[0][1].args[0]$;
      method=Network::Init_Weights;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Weights()";
      meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
     };
     MethodCall @[12] {
      name="MethodCall_initwtstimeusedEndTimer";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="init_wts_time_used->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][1].objs_vars[3]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     PrintExpr @[13] {
      name="PrintExpr_PrintInitWeights_dusedGetTotSecs";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print \"Init Weights total time: \" << init_wts_time_used.used.GetTotSecs()";
      expr {
       expr="\"Init Weights total time: \" << init_wts_time_used.used.GetTotSecs()";
      };
      debug=0;
     };
     If @[14] {
      name="If_ifnoprompts";
      desc=;
      flags=OFF;
      code_string=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       PrintExpr @[0] {
	name="PrintExpr_Printnetworkname_ghtsInitialized";
	desc=;
	flags=0;
	code_string=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[15] {
      name="AssignExpr_epochnetworkepoch";
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=.programs.gp[0][1].vars[1]$$;
      expr {
       expr="network.epoch";
      };
     };
     CssExpr @[16] {
      name="CssExpr_rootMonControltrue";
      desc="turn on profile monitoring";
      flags=CAN_REVERT_TO_CODE;
      code_string="root.MonControl(true);";
      expr {
       expr="root.MonControl(true);";
      };
     };
     MethodCall @[17] {
      name="MethodCall_networkStartTiming";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->StartTiming()";
      result_var=NULL;
      obj=$.programs.gp[0][1].args[0]$;
      method=Network::StartTiming;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void StartTiming()";
      meth_desc=" start recording timing information -- turns on the TIMING flag and starts recording timing from parallel threading mechanisms";
     };
     MethodCall @[18] {
      name="MethodCall_batchtimeusedhrStartTimertrue";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="batch_time_used_hr->StartTimer(true)";
      result_var=NULL;
      obj=.programs.gp[0][1].objs_vars[1]$$;
      method=TimeUsedHR::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     WhileLoop @[19] {
      name="WhileLoop_whileepochmaxepoch";
      desc="main loop over epochs of training";
      flags=CAN_REVERT_TO_CODE;
      code_string="while (epoch < max_epoch)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraEpochnetworkinputdata";
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraEpoch(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=$.programs.gp[0][2]$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrepoch";
	desc="increment the epoch counter (locally and on network)";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: epoch";
	network_var=$.programs.gp[0][1].args[0]$;
	local_ctr_var=$.programs.gp[0][1].vars[1]$;
	counter=Network::epoch;
	update_after=1;
       };
       IfBreak @[2] {
	name="IfBreak_ifnetworkcnterrerrstopcritbreak";
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=CAN_REVERT_TO_CODE;
	code_string="if(network.cnt_err <= err_stopcrit) break";
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[20] {
      name="MethodCall_networkStopTiming";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->StopTiming()";
      result_var=NULL;
      obj=$.programs.gp[0][1].args[0]$;
      method=Network::StopTiming;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void StopTiming()";
      meth_desc=" stop recording timing information -- turns off the TIMING flag and stops recording timing from parallel threading mechanisms";
     };
     MethodCall @[21] {
      name="MethodCall_batchtimeusedhrEndTimer";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="batch_time_used_hr->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][1].objs_vars[1]$;
      method=TimeUsedHR::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     CssExpr @[22] {
      name="CssExpr_rootMonControlfalse";
      desc="turn on profile monitoring";
      flags=CAN_REVERT_TO_CODE;
      code_string="root.MonControl(false);";
      expr {
       expr="root.MonControl(false);";
      };
     };
     PrintExpr @[23] {
      name="PrintExpr_Printhrtotaltime_usedhrsusedendl";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print \"hr total time: \" << batch_time_used_hr.s_used << endl";
      expr {
       expr="\"hr total time: \" << batch_time_used_hr.s_used << endl";
      };
      debug=0;
     };
     MethodCall @[24] {
      name="MethodCall_traintimerEndTimer";
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][1].vars[5]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     MethodCall @[25] {
      name="MethodCall_networkTimingRep_dreportdatatrue";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->TimingReport(thread_report_data, true)";
      result_var=NULL;
      obj=$.programs.gp[0][1].args[0]$;
      method=Network::TimingReport;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="table";
	required=1;
	def_val=;
	prev_expr="thread_report_data";
	expr {
	 expr="thread_report_data";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="print";
	required=0;
	def_val="true";
	prev_expr="true";
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="taString TimingReport(DataTable* table, bool print = true)";
      meth_desc=" report about timing of various steps of computation -- used for optimizing code etc -- table has detailed info per thread -- calls StopTiming to finalize data";
     };
     ProgramCall @[26] {
      name="ProgramCall_SumTimes";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="SumTimes()";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
      };
      target=$.programs[1]$;
      targ_ld_init="*SumTimes*";
     };
    };
    step_prog=.programs.gp[0][3]$$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][2].doc$$: };
    };
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="InputType";
      desc="type of input patterns to generate";
      enums {
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="TRAIN";
	value=0;
	desc="just training objects with full transforms";
       };
       DynEnumItem @[1] {
	name="TRAIN_NOVEL";
	value=1;
	desc="training the novel testing objects: novel shown in restricted locations";
       };
       DynEnumItem @[2] {
	name="TEST_RANDOM";
	value=2;
	desc="test all objects in random transforms";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.networks[0].epoch_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=6;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="input_type";
      var_type=T_DynEnum;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.programs.gp[0][2].types[0]$$;
       value=0;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.programs.gp[0][2].args[0]$$;
      local_ctr_var=.programs.gp[0][2].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[0][2].vars[3]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     ProgramCall @[0] {
      name="ProgramCall_GenerateItemList_utdatainputtype";
      desc=;
      flags=NON_STD|CAN_REVERT_TO_CODE;
      code_string="GenerateItemList(input_data, input_type)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="InputItemList";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=DynEnum;
	type="InputType";
	name="input_type";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_type";
	};
       };
      };
      target=$.programs[3]$;
      targ_ld_init="*GenerateItemList*";
     };
     NetCounterInit @[1] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[0][2].args[0]$;
      local_ctr_var=$.programs.gp[0][2].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[0][2].vars[3]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochtimerStartTimertrue";
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[3]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[4] {
      name="MethodCall_trialmondataResetData";
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.programs.gp[0][2].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      name="NetDataLoop_NetDataLoopPERMU_ardatalooporder";
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrialnetworkinputdata";
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrial(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=$.programs.gp[0][3]$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.programs.gp[0][2].args[1]$$;
      index_var=.programs.gp[0][2].vars[4]$$;
      order_var=.programs.gp[0][2].vars[0]$$;
      order=PERMUTED;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      name="If_ifnetworkwtupdateNetworkBATCH";
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][2].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkComputeEpochStats";
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=Network::Compute_EpochStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more";
     };
     MethodCall @[8] {
      name="MethodCall_epochtimerEndTimer";
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[3]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      name="ProgramCall_LeabraEpochMonitornetwork";
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][7]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[3] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][3].doc$$: };
    };
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      name="If_ifnetworkCompute_stnetworktrial1";
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.programs.gp[0][3].args[0]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      name="MethodCall_networkTrialInit";
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      name="ProgramCall_ApplyInputsImageinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputsImage(input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="input_data";
	};
       };
      };
      target=.programs[5]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      name="ForLoop_forqtr0qtr4qtr";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraQuarternetworkinputdata";
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarter(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][4]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkTrialFinal";
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      name="ProgramCall_LeabraTrialMonitornetwork";
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][6]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][3].args[0]$;
      update_var=.programs.gp[0][3].vars[0]$$;
     };
    };
    step_prog=$.programs.gp[0][5]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[4] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][4].doc$$: };
    };
    name="LeabraQuarter";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[0][4].args[0]$$;
      local_ctr_var=.programs.gp[0][4].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars2vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @[1] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      name="ProgramCall_LeabraTrialMonitornetwork";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF;
      code_string=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="input_data";
	expr {
	 expr="network";
	};
       };
      };
      target=$.programs.gp[0][6]$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      name="MethodCall_networkQuarterInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      name="MethodCall_cyclemaxnetworkCycleRunMax";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.programs.gp[0][4].prog_code[0].local_vars[0]$$;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      name="ForLoop_forcyc0cyccyclemaxcyc";
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCyclenetwork";
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycle(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.programs.gp[0][5]$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	name="AssignExpr_cyclenetworkcycle";
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.programs.gp[0][4].vars[0]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkQuarterFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      name="MethodCall_networkComputePhaseStats";
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][4].args[0]$;
      update_var=.programs.gp[0][4].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[5] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][5].doc$$: };
    };
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.programs.gp[0][5].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][5].args[0]$;
      update_var=$.programs.gp[0][5].vars[0]$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[6] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][6].doc$$: };
    };
    name="LeabraTrialMonitor";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="quarter";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][0]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[0][6].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][6].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][6].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][6].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[0][6].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[7] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][7].doc$$: };
    };
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][1]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[0][7].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[0][7].vars[1]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonSetDa_hmondatanetwork";
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][7].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      name="MethodCall_epochnetmonCheckConfigfalse";
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][7].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      name="MethodCall_epochnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][7].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_epochmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][7].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonGetMonVals";
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][7].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[0][7].vars[1]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochmondataSetV_csepochtimetot1";
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      name="MethodCall_epochmondataSetV_csepochtimeusr1";
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      name="MethodCall_epochmondataWriteClose";
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[8] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][8].doc$$: };
    };
    name="SaveWeights";
    short_nm="SvWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/svn_sims/cecn/ccn_ed2/chapter_6/objrec.00_0050.wts.gz";
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0050";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="00";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".00_0050";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      name="If_iftaMiscdmemproc0";
      desc=;
      flags=0;
      code_string=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ReturnExpr @[0] {
	name="ReturnExpr_return";
	desc=;
	flags=0;
	code_string=;
	expr {
	 expr=;
	};
       };
      };
     };
     MiscCall @[1] {
      name="MiscCall_batchstrtaMiscLe_osnetworkbatch2";
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=0;
      code_string=;
      result_var=.programs.gp[0][8].vars[4]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      name="MiscCall_epochstrtaMiscLe_osnetworkepoch4";
      desc="get current epoch counter with leading zeros to length 4";
      flags=0;
      code_string=;
      result_var=.programs.gp[0][8].vars[3]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_finaltagtagbatchstrepochstr";
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=0;
      code_string=;
      result_var=.programs.gp[0][8].vars[5]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      name="MethodCall_fnamenetworkGetF_gwtssubdirfalse";
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=0;
      code_string=;
      result_var=.programs.gp[0][8].vars[2]$$;
      obj=.programs.gp[0][8].args[0]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      name="MethodCall_networkSaveWeigh_meNetworkNETFMT";
      desc="save the weights to that file name";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[0][8].args[0]$;
      method=Network::SaveWeights;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp[1] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][0].doc$$: };
    };
    name="LeabraEpochTest";
    short_nm="pchTst";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="InputType";
      desc="type of input patterns to generate";
      enums {
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="TRAIN";
	value=0;
	desc="just training objects with full transforms";
       };
       DynEnumItem @[1] {
	name="TRAIN_NOVEL";
	value=1;
	desc="training the novel testing objects: novel shown in restricted locations";
       };
       DynEnumItem @[2] {
	name="TEST_RANDOM";
	value=2;
	desc="test all objects in random transforms";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.data.gp[1][3]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=1000;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="input_type";
      var_type=T_DynEnum;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.programs.gp[1][0].types[0]$$;
       value=2;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[7] {
      name="n_test_items";
      var_type=T_Int;
      int_val=1000;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      code_string=;
      network_var=.programs.gp[1][0].args[0]$$;
      local_ctr_var=.programs.gp[1][0].vars[2]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=0;
      code_string=;
      result_var=.programs.gp[1][0].vars[4]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     ProgramCall @[0] {
      name="ProgramCall_GenerateItemList_utdatainputtype";
      desc=;
      flags=NON_STD;
      code_string=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="InputItemList";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=DynEnum;
	type="InputType";
	name="input_type";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_type";
	};
       };
      };
      target=$.programs[3]$;
      targ_ld_init="*GenerateItemList*";
     };
     NetCounterInit @[1] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      code_string=;
      network_var=$.programs.gp[1][0].args[0]$;
      local_ctr_var=$.programs.gp[1][0].vars[2]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[2] {
      name="MemberAssign_networktrainmodeNetworkTEST";
      desc="set to testing mode";
      flags=NEW_EL;
      code_string=;
      obj=$.programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[3] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=0;
      code_string=;
      result_var=$.programs.gp[1][0].vars[4]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      name="MethodCall_epochtimerStartTimertrue";
      desc="start the epoch timer to record computation time per epoch";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][0].vars[4]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[5] {
      name="MethodCall_trialmondataResetData";
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=.programs.gp[1][0].vars[3]$$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[6] {
      name="NetDataLoop_NetDataLoopSEQUE_ardatalooporder";
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=0;
      code_string=;
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrialTestnetworkinputdata";
	desc="run the trial program, passing network and input_data";
	flags=0;
	code_string=;
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[1][1]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.programs.gp[1][0].vars[0]$$;
      index_var=.programs.gp[1][0].vars[5]$$;
      order_var=.programs.gp[1][0].vars[1]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[7] {
      name="If_ifnetworkwtupdateNetworkBATCH";
      desc="if full batch mode, update only at end of epoch";
      flags=0;
      code_string=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="final update of weights based on accumulated changes";
	flags=0;
	code_string=;
	result_var=NULL;
	obj=$.programs.gp[1][0].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[8] {
      name="MethodCall_networkComputeEpochStats";
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][0].args[0]$;
      method=Network::Compute_EpochStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more";
     };
     MethodCall @[9] {
      name="MethodCall_epochtimerEndTimer";
      desc="done with the computation in the epoch -- record time it took";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][0].vars[4]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[10] {
      name="ProgramCall_LeabraEpochMonitorTestnetwork";
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=0;
      code_string=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[1][5]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[11] {
      name="MemberAssign_networktrainmodeNetworkTRAIN";
      desc="set back to training mode";
      flags=NEW_EL;
      code_string=;
      obj=$.programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
     ProgramCall @[12] {
      name="ProgramCall_ActBasedRFieldnetworktrue";
      desc=;
      flags=0;
      code_string=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="final_rf";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      target=.programs.gp[1][7]$$;
      targ_ld_init="*ActBasedRField*";
     };
     ProgramCall @[13] {
      name="ProgramCall_TestErrorByObjecttrialmondata";
      desc=;
      flags=0;
      code_string=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="trial_mon_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
      };
      target=.programs.gp[1][6]$$;
      targ_ld_init="*TestErrorByObject*";
     };
    };
    step_prog=$.programs.gp[1][1]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][1].doc$$: };
    };
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInit";
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=0;
      code_string=;
      network_var=.programs.gp[1][1].args[0]$$;
      local_ctr_var=.programs.gp[1][1].vars[0]$$;
      counter=NULL;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInit";
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=0;
      code_string=;
      network_var=$.programs.gp[1][1].args[0]$;
      local_ctr_var=$.programs.gp[1][1].vars[0]$;
      counter=NULL;
      update_after=1;
     };
     MethodCall @[1] {
      name="MethodCall_networkTrialInit";
      desc="initializes various counters at start of trial";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     WhileLoop @[2] {
      name="WhileLoop_whilephasenonetworkphasemax";
      desc="loop over phases of settling in the network";
      flags=0;
      code_string=;
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraSettleTestnetworkinputdata";
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=0;
	code_string=;
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[1][2]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncr";
	desc="increment the phase number (also on network)";
	flags=0;
	code_string=;
	network_var=$.programs.gp[1][1].args[0]$;
	local_ctr_var=$.programs.gp[1][1].vars[0]$;
	counter=NULL;
	update_after=1;
       };
       MethodCall @[2] {
	name="MethodCall_networkmethod";
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=0;
	code_string=;
	result_var=NULL;
	obj=$.programs.gp[1][1].args[0]$;
	method=NULL;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig=;
	meth_desc=;
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      name="MethodCall_networkTrialFinal";
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     If @[4] {
      name="If_ifnetworkCompute_stnetworktrial1";
      desc=;
      flags=0;
      code_string=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="update the weight values based on changes computed by trial program";
	flags=0;
	code_string=;
	result_var=NULL;
	obj=$.programs.gp[1][1].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     ProgramCall @[5] {
      name="ProgramCall_ActBasedRFieldnetworkfalse";
      desc=;
      flags=0;
      code_string=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="final_rf";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      target=$.programs.gp[1][7]$;
      targ_ld_init="*ActBasedRField*";
     };
     ProgramCall @[6] {
      name="ProgramCall_LeabraTrialMonitorTestnetwork";
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=0;
      code_string=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[1][4]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[7] {
      name="NetUpdateView_NetUpdateView";
      desc="update the network view(s) (only if update_net_view is true)";
      flags=0;
      code_string=;
      network_var=$.programs.gp[1][1].args[0]$;
      update_var=.programs.gp[1][1].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][2].doc$$: };
    };
    name="LeabraSettleTest";
    short_nm="SttTst";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=0;
      code_string=;
      network_var=.programs.gp[1][2].args[0]$$;
      local_ctr_var=.programs.gp[1][2].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars2vars";
      desc=;
      flags=0;
      code_string=;
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @[1] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     NetCounterInit @[1] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=0;
      code_string=;
      network_var=$.programs.gp[1][2].args[0]$;
      local_ctr_var=$.programs.gp[1][2].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[2] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      name="ProgramCall_ApplyInputsImageinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=0;
      code_string=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.programs[5]$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      name="MethodCall_networkmethod";
      desc="initializes various counters at start of settling";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=NULL;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig=;
      meth_desc=;
     };
     MethodCall @[5] {
      name="MethodCall_cyclemaxnetworkCycleRunMax";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network.CycleRunMax()";
      result_var=.programs.gp[1][2].prog_code[0].local_vars[0]$$;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      name="ForLoop_forcyc0cyccyclemaxcyc";
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for(cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCycleTestnetwork";
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=0;
	code_string=;
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.programs.gp[1][3]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	name="AssignExpr_cyclenetworkcycle";
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.programs.gp[1][2].vars[0]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkmethod";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=NULL;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig=;
      meth_desc=;
     };
     MethodCall @[8] {
      name="MethodCall_networkComputePhaseStats";
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=0;
      code_string=;
      network_var=$.programs.gp[1][2].args[0]$;
      update_var=.programs.gp[1][2].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[3] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][3].doc$$: };
    };
    name="LeabraCycleTest";
    short_nm="CycTst";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=.programs.gp[1][3].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=0;
      code_string=;
      network_var=$.programs.gp[1][3].args[0]$;
      update_var=.programs.gp[1][3].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[4] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][4].doc$$: };
    };
    name="LeabraTrialMonitorTest";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="quarter";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][3]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][3]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[1][4].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=.programs.gp[1][4].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][4].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][4].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=.programs.gp[1][4].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][4].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][4].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=.programs.gp[1][4].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[5] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][5].doc$$: };
    };
    name="LeabraEpochMonitorTest";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=.data.gp[1][4]$$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][4]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[1][5].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=0;
      code_string=;
      result_var=.programs.gp[1][5].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonSetDa_hmondatanetwork";
      desc="set data and network on NetMonitor object";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=.programs.gp[1][5].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      name="MethodCall_epochnetmonCheckConfigfalse";
      desc="check configuration and emit errors/warnings for problems";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      name="MethodCall_epochnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_epochmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=.programs.gp[1][5].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonGetMonVals";
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=0;
      code_string=;
      result_var=$.programs.gp[1][5].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochmondataSetV_csepochtimetot1";
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      name="MethodCall_epochmondataSetV_csepochtimeusr1";
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      name="MethodCall_epochmondataWriteClose";
      desc="update after writing new data to monitor data table";
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[6] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][6].doc$$: };
    };
    name="TestErrorByObject";
    short_nm="TstByb";
    tags=;
    desc=;
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][3]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="err_output_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[2][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_erroutputdataStructUpdatetrue";
      desc=;
      flags=0;
      code_string=;
      result_var=NULL;
      obj=.programs.gp[1][6].vars[0]$$;
      method=taBase::StructUpdate;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="begin";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StructUpdate(bool begin)";
      meth_desc=" bracket structural changes with (nestable) true/false calls;";
     };
     DataGroupProg @[1] {
      name="DataGroupProg_Groupfromsrctabl_leerroutputdata";
      desc=;
      flags=0;
      code_string=;
      src_table=;
      dest_table=;
      src_data_var=.programs.gp[1][6].args[0]$$;
      dest_data_var=$.programs.gp[1][6].vars[0]$;
      group_spec {
       name="group_spec";
       ops {
	name="ops";
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="trial_name";
	 name="trial_name_GROUP_0";
	 agg {name="Aggregate": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	};
	DataGroupEl @[1] {
	 col_name="sse";
	 name="sse_N_1";
	 agg {name="Aggregate": op=N: rel={name="rel": rel=GREATERTHAN: val=0: val_string="": use_var=0: var=NULL: }: };
	};
	DataGroupEl @[2] {
	 col_name="sse";
	 name="sse_COUNT_2";
	 agg {name="Aggregate": op=COUNT: rel={name="rel": rel=GREATERTHAN: val=0: val_string="": use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=1;
      };
     };
     MethodCall @[2] {
      name="MethodCall_erroutputdataFin_rrtaBaseVTFLOAT";
      desc=;
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=DataTable::FindMakeCol;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_nm";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\"pct_err\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=1;
	def_val="taBase::VT_FLOAT";
	prev_expr=;
	expr {
	 expr="taBase::VT_FLOAT";
	};
       };
      };
      meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
      meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
     };
     UserScript @[3] {
      name="UserScript_erroutputdatadat_UpdateAfterEdit";
      desc=;
      flags=0;
      code_string=;
      script {
       expr="err_output_data.data.pct_err.SetColFlag(DataCol::CALC);
err_output_data.data.pct_err.calc_expr.SetExpr(\"(float)sse_count / (float)N\");
err_output_data.data.pct_err.UpdateAfterEdit();";
      };
     };
     MethodCall @[4] {
      name="MethodCall_erroutputdataCalcAllRows";
      desc=;
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=DataTable::CalcAllRows;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool CalcAllRows()";
      meth_desc=" perform calculations for all rows of data (updates after)";
     };
     MethodCall @[5] {
      name="MethodCall_erroutputdataStructUpdatefalse";
      desc=;
      flags=0;
      code_string=;
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=taBase::StructUpdate;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="begin";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="void StructUpdate(bool begin)";
      meth_desc=" bracket structural changes with (nestable) true/false calls;";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[7] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][7].doc$$: };
    };
    name="ActBasedRField";
    short_nm="cBsRFl";
    tags="Statistic, Receptive Field";
    desc="computes an activation based receptive field using ActBasedRF object type -- allows you to see how units in a selected target layer relate to activations of units throughout the network";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP|OBJS_UPDT_GUI;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=ActBasedRF;
     el_def=0;
     ActBasedRF @[0] {
      name="ActBasedRF_0";
      rf_data=$.programs.gp[1][7].objs[1]$;
      network=$.networks[0]$;
      trg_layer=NULL;
      exclude_lays=;
      norm_mode=NORM_TRG_UNIT_RF_LAY;
      var="act";
      threshold=0.1;
     };
     DataTable @[1] {
      name="ActRFData";
      desc="receptive field data -- could move this into AnalysisData if you want..";
      data {
       name="data";
       el_typ=float_Data;
       el_def=0;
       float_Data @[0] {
	name="V1";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=1;
	cell_geom{ 4;2;10;10;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[4] ;;;;	};
	width=4;
	matrix_col_width=10;
       };
       float_Data @[1] {
	name="V4";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=1;
	cell_geom{ 6;6;4;4;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[4] ;;;;	};
	width=6;
	matrix_col_width=10;
       };
       float_Data @[2] {
	name="IT";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=1;
	cell_geom{ 10;10;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[2] ;;	};
	width=10;
	matrix_col_width=10;
       };
       float_Data @[3] {
	name="Output";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=1;
	cell_geom{ 5;4;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[2] ;;	};
	width=6;
	matrix_col_width=10;
       };
       float_Data @[4] {
	name="Image";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=1;
	cell_geom{ 40;40;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[2] ;;	};
	width=40;
	matrix_col_width=10;
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      row_height=1;
      max_col_width=50;
      keygen 4 0=0;
      last_sort_spec {
       name="last_sort_spec";
       ops {
	name="ops";
	el_typ=DataSortEl;
	el_def=0;
       };
      };
      row_with_hilite=-1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="final_rf";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="whether to compute the final receptive field or just increment the sums -- call with false to accumulate, and true at end to get final values";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="ActBasedRF_0";
      var_type=T_Object;
      object_type=ActBasedRF;
      object_val=.programs.gp[1][7].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="ActRFData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.programs.gp[1][7].objs[1]$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record activation based receptive field information into";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trg_layer_name";
      var_type=T_String;
      string_val="V4";
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="trg_layer";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=NULL;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="target layer to get receptive field data for";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trglayernetworkF_yertrglayername";
      desc=;
      flags=0;
      code_string=;
      result_var=.programs.gp[1][7].vars[3]$$;
      obj=.programs.gp[1][7].args[0]$$;
      method=Network::FindLayer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="nm";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trg_layer_name";
	};
       };
      };
      meth_sig="Layer_ptr FindLayer(taString& nm)";
      meth_desc=" find layer by name";
     };
     MethodCall @[1] {
      name="MethodCall_ActBasedRF0InitA_networktrglayer";
      desc=;
      flags=0;
      code_string=;
      result_var=NULL;
      obj=.programs.gp[1][7].vars[0]$$;
      method=ActBasedRF::InitAll;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="ActRFData";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[2] {
	arg_type=Layer_ptr;
	type="Layer*";
	name="tlay";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trg_layer";
	};
       };
      };
      meth_sig="void InitAll(DataTable* dt, Network* net, Layer* tlay)";
      meth_desc=" set the data table, network, trg_lay pointers and initialize everything -- convenience function for init_code of programs -- resets all data first and then calls InitData after setting";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      name="If_iffinalrf";
      desc=;
      flags=0;
      code_string=;
      cond {
       expr="final_rf";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_ActBasedRF0ComputeRF";
	desc=;
	flags=0;
	code_string=;
	result_var=NULL;
	obj=$.programs.gp[1][7].vars[0]$;
	method=ActBasedRF::ComputeRF;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="bool ComputeRF()";
	meth_desc=" compute the rf_data based on currently accumulated sum_data and wt_data from multiple previous calls to IncrementSums function";
       };
      };
     };
     Else @[1] {
      name="Else_If_iffinalrf";
      desc=;
      flags=0;
      code_string=;
      cond {
       expr=;
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_ActBasedRF0IncrementSums";
	desc=;
	flags=0;
	code_string=;
	result_var=NULL;
	obj=$.programs.gp[1][7].vars[0]$;
	method=ActBasedRF::IncrementSums;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="bool IncrementSums()";
	meth_desc=" update the receptive field data based on current network activations (computes sum_data and wt_data, does NOT compute rf_data based on those: see ComputeRF)";
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
    UserDataItem @[1] {name="view_win_top": value=0.0234055: val_type_fixed=0: };
    UserDataItem @[2] {name="view_win_wd": value=0.9933993: val_type_fixed=0: };
    UserDataItem @[3] {name="view_win_ht": value=0.7992978: val_type_fixed=0: };
    UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
    UserDataItem @[5] {name="view_splitter_state": value=AAAA/wAAAAEAAAADAAABDQAAAqoAAAOLAQAAAAcBAAAAAQE=: val_type_fixed=0: };
   };
   name="DefaultProjectBrowser";
   m_data=.$$;
   cur_font_size=14;
   visible=1;
   win_name=".projects[\"vis_bench_lg\"] - vis_bench_lg.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_visible": value=1: val_type_fixed=0: };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=14;
     visible=1;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @[0] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=14;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.$;
    };
    PanelViewer @[1] {
     name="Editor";
     m_data=NULL;
     cur_font_size=14;
     visible=1;
    };
    T3PanelViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_65";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_panel_selected": value=1: val_type_fixed=0: };
     };
     name="DefaultViewer";
     m_data=NULL;
     cur_font_size=14;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @[0] {
       name="ObjrecNet";
       m_data=NULL;
       cur_font_size=14;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=14;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @[0] {
	  name="ObjrecNet_View";
	  m_data=$.networks[0]$;
	  cur_font_size=14;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=0;
	  show_iconified=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ act;	  };
	  hot_vars{ targ;ext;act;net;bias_wt;bias_dwt;act_eq;act_m;act_p;act_dif;act_avg;r.wt;r.wt*act;s.wt;r.dwt;s.dwt;	  };
	  unit_src_path=".layers.gp[6][0][0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  movie_size {x=720: y=720: };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=98: y=74: z=2.333333: };
	  max_size2d {x=98: y=76: z=1: };
	  eff_max_size {x=98: y=74: z=2.333333: };
	  font_sizes {net_name=0.05: net_vals=0.05: layer=0.03: layer_min=0.01: layer_vals=0.03: prjn=0.005: unit=0.015: un_nm_len=12: };
	  view_params {xy_square=0: unit_spacing=0.05: prjn_disp=L_R_B: prjn_name=0: prjn_width=0.0001: prjn_trans=0.5: lay_trans=0.5: unit_trans=0.6: laygp_width=1: show_laygp=0: };
	  wt_line_disp=0;
	  wt_line_width=0;
	  wt_line_thr=0.9;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="targ";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    var_name="dav";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    var_name="net";
	    auto_scale=0;
	    min=-0.59;
	    max=0.59;
	   };
	   ScaleRange @[5] {
	    var_name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[6] {
	    var_name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    var_name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    var_name="gc.h";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[9] {
	    var_name="r.pdw";
	    auto_scale=1;
	    min=-0.004769471;
	    max=0.004769471;
	   };
	   ScaleRange @[10] {
	    var_name="gc.i";
	    auto_scale=0;
	    min=-1.724444;
	    max=1.724444;
	   };
	   ScaleRange @[11] {
	    var_name="ext";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[12] {
	    var_name="gc.a";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[13] {
	    var_name="act_dif";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[14] {
	    var_name="da";
	    auto_scale=1;
	    min=-0.2958892;
	    max=0.2958892;
	   };
	   ScaleRange @[15] {
	    var_name="wt_prjn";
	    auto_scale=1;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[16] {
	    var_name="bias.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[17] {
	    var_name="act_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[18] {
	    var_name="avg_l_nrm";
	    auto_scale=1;
	    min=-4.027796;
	    max=4.027796;
	   };
	   ScaleRange @[19] {
	    var_name="avg_l";
	    auto_scale=0;
	    min=-1.590033;
	    max=1.590033;
	   };
	  };
	  lay_disp_modes{ Image=-1;V1h_l=-1;V1h_r=-1;V1m_l=-1;V1m_r=-1;V2h=-1;V2m=-1;V2m_sum=-1;V2h_sum=-1;V3=-1;V4=-1;IT=-1;Output=-1;	  };
	 };
	 GridTableView @[1] {
	  name="V1FilterInputData_Grid";
	  m_data=$.programs[5].objs[1]$;
	  cur_font_size=14;
taTransform @*(.m_transform) {scale={x=0.1413966: y=0.1413964: z=0.1413965: }: rotate={x=-1: y=-1.192092e-7: z=3.329529e-14: rot=0.2978167: }: translate={x=0.6111973: y=0.6986051: z=0.04817251: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Output";
	    m_data=.programs[5].objs[1].data[0]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="Name";
	    m_data=.programs[5].objs[1].data[1]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="V1h_image_r";
	    m_data=.programs[5].objs[1].data[2]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="V1h_image_l";
	    m_data=.programs[5].objs[1].data[3]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="V1h_v1s_r";
	    m_data=.programs[5].objs[1].data[4]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    name="V1h_v1s_l";
	    m_data=.programs[5].objs[1].data[5]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    name="V1h_v1pi_r";
	    m_data=.programs[5].objs[1].data[6]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    name="V1h_v1pi_l";
	    m_data=.programs[5].objs[1].data[7]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[8] {
	    name="V1m_v1s_r";
	    m_data=.programs[5].objs[1].data[8]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[9] {
	    name="V1m_v1s_l";
	    m_data=.programs[5].objs[1].data[9]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[10] {
	    name="V1m_v1pi_r";
	    m_data=.programs[5].objs[1].data[10]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[11] {
	    name="V1m_v1pi_l";
	    m_data=.programs[5].objs[1].data[11]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=0.1413966: y=0.1413964: z=0.1413965: }: rotate={x=-1: y=-1.192092e-7: z=3.329529e-14: rot=0.2978167: }: translate={x=0.6111973: y=0.6986051: z=0.04817251: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=0: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=1;
	  page_cols=5;
	  col_range {min=3: max=3: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.4876113: y=1.059026: z=1.000003: };
	 orient {x=-1: y=0: z=0: rot=0.5019996: };
	 focal_dist=1.540526;
	};
	T3SavedView @[1] {
	 name="Image";
	 view_saved=1;
	 pos {x=1.037612: y=1.112202: z=-0.3174799: };
	 orient {x=-1.000001: y=0: z=0: rot=0.5099996: };
	 focal_dist=0.0377838;
	};
	T3SavedView @[2] {
	 name="input";
	 view_saved=1;
	 pos {x=0.7056115: y=0.92394: z=0.375701: };
	 orient {x=-1: y=0: z=0: rot=0.5099996: };
	 focal_dist=0.8320385;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[1] {
       name="StimGenData";
       m_data=NULL;
       cur_font_size=14;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=14;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GridTableView;
	 el_def=0;
	 GridTableView @[0] {
	  name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_StimGenData_root_view_children_0";
	  m_data=$.programs[4].objs[1]$;
	  cur_font_size=14;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Canvas";
	    m_data=.programs[4].objs[1].data[0]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=256;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=0: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=1;
	  page_cols=5;
	  col_range {min=0: max=0: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5174999: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[2] {
       name="EpochOutputData";
       m_data=NULL;
       cur_font_size=14;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=14;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @[0] {
	  name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0";
	  m_data=$.data.gp[1][1]$;
	  cur_font_size=14;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=.data.gp[1][1].data[0]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=.data.gp[1][1].data[1]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="avg_sse";
	    m_data=.data.gp[1][1].data[2]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="cnt_err";
	    m_data=.data.gp[1][1].data[3]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="avg_ext_rew";
	    m_data=.data.gp[1][1].data[4]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="avg_cycles";
	    m_data=.data.gp[1][1].data[5]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="epoch_time_tot";
	    m_data=.data.gp[1][1].data[6]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="epoch_time_usr";
	    m_data=.data.gp[1][1].data[7]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=1952796260;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE_AND_POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="cnt_err";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=100: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_7";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_8";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_9";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_10";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_11";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_12";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_13";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_14";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_15";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_16";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_7";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_8";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_9";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_10";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_11";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_12";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_13";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_14";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_15";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_16";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.4595: y=0.477: z=1.624621: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.637121;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[3] {
       name="TestErrorData";
       m_data=NULL;
       cur_font_size=14;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=14;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @[0] {
	  name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0";
	  m_data=$.data.gp[2][0]$;
	  cur_font_size=14;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="trial_name_group";
	    m_data=.data.gp[2][0].data[0]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="N";
	    m_data=.data.gp[2][0].data[1]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="sse_count";
	    m_data=.data.gp[2][0].data[2]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="pct_err";
	    m_data=.data.gp[2][0].data[3]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=19: };
	  page_rows=1634757985;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=BAR;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="sse_n";
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=1: min=-1: fix_max=1: max=20: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=1;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=19: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=1;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="pct_err";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_7";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_8";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_9";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_10";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_11";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_12";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_13";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_14";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_15";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_16";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_7";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_8";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_9";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_10";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_11";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_12";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_13";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_14";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_15";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_16";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.427578: y=0.445: z=1.62471: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.63721;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[4] {
       name="ActRFData";
       m_data=NULL;
       cur_font_size=14;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=14;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GridTableView;
	 el_def=0;
	 GridTableView @[0] {
	  name="ActRFData_Grid";
	  m_data=$.programs.gp[1][7].objs[1]$;
	  cur_font_size=14;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="V1";
	    m_data=.programs.gp[1][7].objs[1].data[0]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="V4";
	    m_data=.programs.gp[1][7].objs[1].data[1]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=6;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="IT";
	    m_data=.programs.gp[1][7].objs[1].data[2]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=10;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="Output";
	    m_data=.programs.gp[1][7].objs[1].data[3]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="Image";
	    m_data=.programs.gp[1][7].objs[1].data[4]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=40;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=5;
	  view_range {min=0: max=-1: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=4: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5175: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[5] {
       name="ThreadReportData";
       m_data=NULL;
       cur_font_size=14;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=14;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  name="ThreadReportData_Graph";
	  m_data=$.data.gp[2][1]$;
	  cur_font_size=14;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="thread";
	    m_data=.data.gp[2][1].data[0]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="stat";
	    m_data=.data.gp[2][1].data[1]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="run_avg";
	    m_data=.data.gp[2][1].data[2]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="run_sum";
	    m_data=.data.gp[2][1].data[3]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="wait_avg";
	    m_data=.data.gp[2][1].data[4]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="wait_sum";
	    m_data=.data.gp[2][1].data[5]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=1802661751;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="cycle";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=-1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=1;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="ThreadReportData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="send_net_run";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=666.42: fix_max=0: max=5561.26: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="ThreadReportData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="send_net_wait";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=77.96: fix_max=0: max=1251.28: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="ThreadReportData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="net_int_run";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=1082.96: fix_max=0: max=1675.76: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="ThreadReportData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="net_int_wait";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=114.76: fix_max=0: max=381.48: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="ThreadReportData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="act_run";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=1423.22: fix_max=0: max=1817.82: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="ThreadReportData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="act_wait";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=34.06: fix_max=0: max=278.44: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="ThreadReportData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="inhib_run";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=5.32: fix_max=0: max=319.96: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="ThreadReportData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="inhib_wait";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=55.83: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="ThreadReportData_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="dwt_run";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=372741: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="ThreadReportData_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="dwt_wait";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=31644.9: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="ThreadReportData_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="wt_run";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="ThreadReportData_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="wt_wait";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=96942.6: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="ThreadReportData_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="ThreadReportData_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="ThreadReportData_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="ThreadReportData_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="ThreadReportData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="ThreadReportData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="ThreadReportData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="ThreadReportData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="ThreadReportData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="ThreadReportData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="ThreadReportData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="ThreadReportData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="ThreadReportData_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="ThreadReportData_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="ThreadReportData_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="ThreadReportData_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="ThreadReportData_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="ThreadReportData_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="ThreadReportData_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="ThreadReportData_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="thread";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.745: g=0.745: b=0.745: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.425: y=0.4475: z=1.590236: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.580236;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[6] {
       name="pct_data";
       m_data=NULL;
       cur_font_size=14;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=14;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  name="pct_data_Graph";
	  m_data=$.programs[2].objs[1]$;
	  cur_font_size=14;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="stat_group";
	    m_data=.programs[2].objs[1].data[0]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="run_avg_max";
	    m_data=.programs[2].objs[1].data[1]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="run_sum_max";
	    m_data=.programs[2].objs[1].data[2]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=1: max=50: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="wait_avg_max";
	    m_data=.programs[2].objs[1].data[3]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="wait_sum_max";
	    m_data=.programs[2].objs[1].data[4]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=8: };
	  page_rows=67202;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=BAR;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=1: min=-1: fix_max=1: max=9: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=1;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="pct_data_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="run_sum_max";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=1: max=50: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="pct_data_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="stat_group";
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="pct_data_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="pct_data_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="pct_data_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="pct_data_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="pct_data_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="pct_data_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="pct_data_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="pct_data_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="pct_data_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="pct_data_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="pct_data_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="pct_data_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="pct_data_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="pct_data_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="pct_data_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="pct_data_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="pct_data_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="pct_data_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="pct_data_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="pct_data_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="pct_data_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="pct_data_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="pct_data_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="pct_data_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="pct_data_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="pct_data_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="pct_data_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="pct_data_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="pct_data_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="pct_data_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.425: y=0.5804796: z=1.588261: };
	 orient {x=-0.9999672: y=0: z=0: rot=0.05000187: };
	 focal_dist=1.580236;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
      UserDataItem @[1] {name="view_win_top": value=0.008191925: val_type_fixed=0: };
      UserDataItem @[2] {name="view_win_wd": value=0.02706271: val_type_fixed=0: };
      UserDataItem @[3] {name="view_win_ht": value=0.7524868: val_type_fixed=0: };
      UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
      UserDataItem @[5] {name="view_visible": value=1: val_type_fixed=0: };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=14;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc="exact control model for ct leabra network


";
 tree_state{ .;.patches;.docs;.wizards;.ctrl_panels;.active_params;.data;.data.gp[0];.data.gp[1];.data.gp[2];.programs;.programs.break_points;.programs.gp[0];.programs.gp[1];.networks;.networks[0];.networks[0].spec_tables;.networks[0].specs;.networks[0].specs.gp[0];.networks[0].specs.gp[0][3];.networks[0].specs.gp[0][3].children[3];.networks[0].specs.gp[0][5];.networks[0].specs.gp[0][5].children[0];.networks[0].specs.gp[0][5].children[0].children[0];.networks[0].specs.gp[0][5].children[0].children[2];.networks[0].specs.gp[0][5].children[1];.networks[0].specs.gp[0][5].children[1].children[3];.networks[0].specs.gp[0][5].children[2];.networks[0].specs.gp[0][5].children[2].children[2];.networks[0].specs.gp[0][5].children[3];.networks[0].specs.gp[0][5].children[3].children[4];.networks[0].specs.gp[0][9];.networks[0].specs.gp[0][10];.networks[0].specs.gp[0][11];.networks[0].specs.gp[0][12];.networks[0].specs.gp[0][13];.networks[0].specs.gp[0][14];.networks[0].specs.gp[0][15];.networks[0].specs.gp[0][16];.networks[0].specs.gp[1];.networks[0].specs.gp[1][0];.networks[0].specs.gp[1][1];.networks[0].specs.gp[1][2];.networks[0].specs.gp[1][2].children[0];.networks[0].specs.gp[1][2].children[2];.networks[0].specs.gp[1][2].children[3];.networks[0].specs.gp[1][2].children[3].children[0];.networks[0].specs.gp[1][6];.networks[0].specs.gp[1][7];.networks[0].specs.gp[1][8];.networks[0].specs.gp[1][9];.networks[0].param_seqs;.networks[0].layers;.networks[0].layers.gp[0];.networks[0].layers.gp[1];.networks[0].layers.gp[2];.networks[0].layers.gp[3];.networks[0].layers.gp[4];.networks[0].layers.gp[5];.networks[0].layers.gp[6];.networks[0].weights; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="minus_output_name": value=1: val_type_fixed=1: };
    UserDataItem @[1] {name="cos_err": value=1: val_type_fixed=1: };
    UserDataItem @[2] {name="norm_err": value=1: val_type_fixed=1: };
    UserDataItem @[3] {name="ext_rew": value=1: val_type_fixed=1: };
    UserDataItem @[4] {name="rt_cycles": value=1: val_type_fixed=1: };
    UserDataItem @[5] {name="tot_cycle": value=1: val_type_fixed=1: };
    UserDataItem @[6] {name="phase": value=1: val_type_fixed=1: };
    UserDataItem @[7] {name="quarter": value=1: val_type_fixed=1: };
    UserDataItem @[8] {name="output_name": value=1: val_type_fixed=1: };
    UserDataItem @[9] {name="trial_name": value=1: val_type_fixed=1: };
    UserDataItem @[10] {name="group_name": value=1: val_type_fixed=1: };
    UserDataItem @[11] {name="sse": value=1: val_type_fixed=1: };
    UserDataItem @[12] {name="total_trials": value=1: val_type_fixed=1: };
    UserDataItem @[13] {name="time": value=1: val_type_fixed=1: };
    UserDataItem @[14] {name="cycle": value=1: val_type_fixed=1: };
    UserDataItem @[15] {name="tick": value=1: val_type_fixed=1: };
    UserDataItem @[16] {name="trial": value=1: val_type_fixed=1: };
    UserDataItem @[17] {name="group": value=1: val_type_fixed=1: };
    UserDataItem @[18] {name="epoch": value=1: val_type_fixed=0: };
    UserDataItem @[19] {name="batch": value=1: val_type_fixed=0: };
    UserDataItem @[20] {name="trial_cos_diff": value=1: val_type_fixed=1: };
    UserDataItem @[21] {name="avg_act_diff": value=1: val_type_fixed=1: };
    UserDataItem @[22] {name="cos_diff": value=1: val_type_fixed=1: };
    UserDataItem @[23] {name="minus_cycles": value=1: val_type_fixed=1: };
    UserDataItem @[24] {name="ct_cycle": value=1: val_type_fixed=1: };
    UserDataItem @[25] {name="phase_no": value=1: val_type_fixed=1: };
    UserDataItem @[26] {name="maxda": value=1: val_type_fixed=1: };
    UserDataItem @[27] {name="avg_act_diff_sm": value=1: val_type_fixed=1: };
    UserDataItem @[28] {name="pvlv_lve": value=1: val_type_fixed=1: };
    UserDataItem @[29] {name="pvlv_pvi": value=1: val_type_fixed=1: };
   };
   name="ObjrecNet";
   desc="high=12x12, med=6x6, no V2";
   flags=12304;
   train_mode=TRAIN;
   wt_update=SMALL_BATCH;
   small_batch_n=10;
   stats {sse_unit_avg=0: sse_sqrt=0: cnt_err_tol=0: prerr=0: };
   n_units=69629;
   n_cons=153856736;
   max_prjns=6;
   specs {
    name="specs";
    el_typ=LeabraConSpec;
    el_def=0;
    LeabraConSpec @[0] {
     name="LeabraConSpec_0";
     is_used=0;
     used_status=UNUSED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.04;
     cur_lrate=0.02;
     lrs_mult=1;
     use_unlearnable=0;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1: soft_bound=1: };
     momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
     wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     use_lrate_sched=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
    };
    LeabraUnitSpec @[1] {
     name="LeabraUnitSpec_0";
     is_used=0;
     used_status=UNUSED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs.gp[0][6]$$: };
     act_range {min=0: max=1: range=1: scale=1: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.5: gain=100: nvar=0.005: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
     act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
     spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=6: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
     opt_thresh {send=0.1: delta=0.005: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=2: range=2: scale=0.5: };
     init {v_m=0.4: act=0: netin=0: };
     dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
     avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
     avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
     g_bar {e=1: l=0.1: i=1: };
     e_rev {e=1: l=0.3: i=0.25: };
     adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
     stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
     syn_delay {on=0: delay=4: };
     deep_raw_qtr=Q4;
     deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
     trc {p_only_m=0: thal_gate=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type {type=NO_NOISE: trial_fixed=1: };
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
    };
    FullPrjnSpec @[2] {
     name="FullPrjnSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=1;
     init_wts=0;
     set_scale=0;
     init_wt_val=1;
     add_rnd_var=0;
     renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
    };
    BaseSpec_Group @.gp[0] {
     name="LowVisSpecs";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @[0] {
      name="V1Units";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ bias_spec;da_mod;dt;      };
      saved{       };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][6]$: };
      act_range {min=0: max=1: range=1: scale=1: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.5: gain=100: nvar=0.005: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
      act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
      spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
      opt_thresh {send=0.1: delta=0.005: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      init {v_m=0.4: act=0: netin=0: };
      dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
      act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
      avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
      avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
      g_bar {e=1: l=0.1: i=1: };
      e_rev {e=1: l=0.3: i=0.25: };
      adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
      stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
      syn_delay {on=0: delay=4: };
      deep_raw_qtr=Q4;
      deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
      trc {p_only_m=0: thal_gate=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
      da_mod {on=0: minus=0: plus=0.1: };
      noise_type {type=NO_NOISE: trial_fixed=1: };
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     };
     LeabraUnitSpec @[1] {
      name="V2Units";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ bias_spec;da_mod;dt;      };
      saved{       };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][6]$: };
      act_range {min=0: max=1: range=1: scale=1: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.5: gain=100: nvar=0.005: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
      act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
      spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
      opt_thresh {send=0.1: delta=0.005: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      init {v_m=0.4: act=0: netin=0: };
      dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
      act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
      avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
      avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
      g_bar {e=1: l=0.1: i=1: };
      e_rev {e=1: l=0.3: i=0.25: };
      adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
      stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
      syn_delay {on=0: delay=4: };
      deep_raw_qtr=Q4;
      deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
      trc {p_only_m=0: thal_gate=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
      da_mod {on=0: minus=0: plus=0.1: };
      noise_type {type=NO_NOISE: trial_fixed=1: };
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     };
     LeabraUnitSpec @[2] {
      name="V3Units";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ bias_spec;da_mod;dt;      };
      saved{       };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
      };
      bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][6]$: };
      act_range {min=0: max=1: range=1: scale=1: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.5: gain=100: nvar=0.005: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
      act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
      spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
      opt_thresh {send=0.1: delta=0.005: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      init {v_m=0.4: act=0: netin=0: };
      dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
      act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
      avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
      avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
      g_bar {e=1: l=0.1: i=1: };
      e_rev {e=1: l=0.3: i=0.25: };
      adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
      stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
      syn_delay {on=0: delay=4: };
      deep_raw_qtr=Q4;
      deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
      trc {p_only_m=0: thal_gate=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
      da_mod {on=0: minus=0: plus=0.1: };
      noise_type {type=NO_NOISE: trial_fixed=1: };
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     };
     LeabraLayerSpec @[3] {
      name="V1toV3Layers";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=LeabraLayerSpec;
       el_def=0;
       LeabraLayerSpec @[0] {
	name="V2m";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ gp_kwta;unit_gp_inhib;inhib_group;lay_inhib;kwta;lay_gp_inhib;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=2.2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.05: fixed=0: use_ext_act=0: use_first=1: tau=10: adjust=1: dt=0.1: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=0: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[1] {
	name="V2h";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ gp_kwta;unit_gp_inhib;inhib_group;lay_inhib;lay_gp_inhib;kwta;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=2.2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.05: fixed=0: use_ext_act=0: use_first=1: tau=10: adjust=1: dt=0.1: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=0: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[2] {
	name="V3";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ kwta;gp_kwta;inhib_group;lay_inhib;lay_gp_inhib;unit_gp_inhib;avg_act;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=2.2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=1: gi=0.01: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.1: fixed=0: use_ext_act=0: use_first=1: tau=10: adjust=1: dt=0.1: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=0: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[3] {
	name="V2h_sum";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ kwta;gp_kwta;inhib_group;lay_inhib;lay_gp_inhib;unit_gp_inhib;avg_act;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	 LeabraLayerSpec @[0] {
	  name="V2m_sum";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ kwta;gp_kwta;inhib_group;lay_gp_inhib;unit_gp_inhib;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraLayerSpec;
	   el_def=0;
	  };
	  lay_inhib {on=1: gi=2.4: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  unit_gp_inhib {on=1: gi=0.01: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  avg_act {targ_init=0.15: fixed=0: use_ext_act=0: use_first=1: tau=10: adjust=1: dt=0.1: };
	  inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	  inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	  clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	  decay {trial=0: };
	  del_inhib {on=0: prv_trl=0: prv_q=0: };
	  margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	  lay_lrate=1;
	  cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	  lstats {hog_thr=0.3: dead_thr=0.01: };
	 };
	};
	lay_inhib {on=1: gi=2.4: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=1: gi=0.01: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.15: fixed=0: use_ext_act=0: use_first=1: tau=10: adjust=1: dt=0.1: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=0: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
      };
      lay_inhib {on=1: gi=1.9: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      avg_act {targ_init=0.05: fixed=0: use_ext_act=0: use_first=1: tau=10: adjust=1: dt=0.1: };
      inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
      inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
      clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
      decay {trial=0: };
      del_inhib {on=0: prv_trl=0: prv_q=0: };
      margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
      lay_lrate=1;
      cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
      lstats {hog_thr=0.3: dead_thr=0.01: };
     };
     LeabraLayerSpec @[4] {
      name="V1_high_retina_r";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ kwta;gp_kwta;inhib_group;lay_inhib;      };
      saved{       };
      children {
       name="children";
       el_typ=LeabraLayerSpec;
       el_def=0;
      };
      lay_inhib {on=1: gi=2.3: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      unit_gp_inhib {on=1: gi=0.01: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      lay_gp_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      avg_act {targ_init=0.1: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
      inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
      inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
      clamp {hard=1: gain=0.5: avg=0: avg_gain=0.2: };
      decay {trial=0: };
      del_inhib {on=0: prv_trl=0: prv_q=0: };
      margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
      lay_lrate=1;
      cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
      lstats {hog_thr=0.3: dead_thr=0.01: };
     };
     LeabraConSpec @[5] {
      name="LowVisCons";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=LeabraConSpec;
       el_def=0;
       LeabraConSpec @[0] {
	name="V1V2Cons";
	is_used=0;
	used_status=CHILD_USED;
	desc=;
	unique{ cos_diff_mod;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	 LeabraConSpec @[0] {
	  name="V1_V2";
	  is_used=1;
	  used_status=PARENT_USED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;cos_diff_mod;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	   LeabraConSpec @[0] {
	    name="V1b_V2";
	    is_used=0;
	    used_status=UNUSED;
	    desc=;
	    unique{ 	    };
	    saved{ 	    };
	    children {
	     name="children";
	     el_typ=LeabraConSpec;
	     el_def=0;
	    };
	    rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	    wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	    inhib=0;
	    wt_scale {abs=1: rel=1: no_plus_net=0: };
	    learn=1;
	    learn_qtr=Q4;
	    lrate=0.02;
	    cur_lrate=0.02;
	    lrs_mult=1;
	    use_unlearnable=1;
	    xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	    wt_sig {gain=6: off=1: soft_bound=1: };
	    momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	    wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	    adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	    slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	    deep {on=0: bg_lrate=1: fg_lrate=0: };
	    margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	    use_lrate_sched=1;
	    lrate_sched {
	     name="lrate_sched";
	     el_typ=SchedItem;
	     el_def=0;
	     default_val=1;
	     interpolate=0;
	     SchedItem @[0] {
	      start_ctr=0;
	      start_val=1;
	      duration=50;
	      step=-0.01;
	     };
	     SchedItem @[1] {
	      start_ctr=50;
	      start_val=0.5;
	      duration=50;
	      step=-0.006;
	     };
	     SchedItem @[2] {
	      start_ctr=100;
	      start_val=0.2;
	      duration=50;
	      step=-0.002;
	     };
	     SchedItem @[3] {
	      start_ctr=150;
	      start_val=0.1;
	      duration=50;
	      step=-0.001;
	     };
	     SchedItem @[4] {
	      start_ctr=200;
	      start_val=0.05;
	      duration=50;
	      step=-0.0006;
	     };
	     SchedItem @[5] {
	      start_ctr=250;
	      start_val=0.02;
	      duration=50;
	      step=-0.0002;
	     };
	     SchedItem @[6] {
	      start_ctr=300;
	      start_val=0.01;
	      duration=1;
	      step=1;
	     };
	    };
	   };
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[1] {
	  name="V2_V1";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;cos_diff_mod;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.04;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 DeepCtxtConSpec @[2] {
	  name="V1Ctxt";
	  is_used=1;
	  used_status=PARENT_USED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=DeepCtxtConSpec;
	   el_def=0;
	   DeepCtxtConSpec @[0] {
	    name="V1Ctxt_b";
	    is_used=0;
	    used_status=UNUSED;
	    desc="from blob layers";
	    unique{ wt_scale;	    };
	    saved{ 	    };
	    children {
	     name="children";
	     el_typ=DeepCtxtConSpec;
	     el_def=0;
	    };
	    rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	    wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	    inhib=0;
	    wt_scale {abs=1: rel=0.5: no_plus_net=0: };
	    learn=1;
	    learn_qtr=Q4;
	    lrate=0.02;
	    cur_lrate=0.02;
	    lrs_mult=1;
	    use_unlearnable=1;
	    xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	    wt_sig {gain=6: off=1: soft_bound=1: };
	    momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	    wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	    adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	    slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	    deep {on=0: bg_lrate=1: fg_lrate=0: };
	    margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	    use_lrate_sched=1;
	    lrate_sched {
	     name="lrate_sched";
	     el_typ=SchedItem;
	     el_def=0;
	     default_val=1;
	     interpolate=0;
	     SchedItem @[0] {
	      start_ctr=0;
	      start_val=1;
	      duration=50;
	      step=-0.01;
	     };
	     SchedItem @[1] {
	      start_ctr=50;
	      start_val=0.5;
	      duration=50;
	      step=-0.006;
	     };
	     SchedItem @[2] {
	      start_ctr=100;
	      start_val=0.2;
	      duration=50;
	      step=-0.002;
	     };
	     SchedItem @[3] {
	      start_ctr=150;
	      start_val=0.1;
	      duration=50;
	      step=-0.001;
	     };
	     SchedItem @[4] {
	      start_ctr=200;
	      start_val=0.05;
	      duration=50;
	      step=-0.0006;
	     };
	     SchedItem @[5] {
	      start_ctr=250;
	      start_val=0.02;
	      duration=50;
	      step=-0.0002;
	     };
	     SchedItem @[6] {
	      start_ctr=300;
	      start_val=0.01;
	      duration=1;
	      step=1;
	     };
	    };
	    delta_dwt=0;
	   };
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.5: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.04;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	  delta_dwt=0;
	 };
	 DeepCtxtConSpec @[3] {
	  name="V2Ctxt";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=DeepCtxtConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.5: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	  delta_dwt=0;
	 };
	 LeabraConSpec @[4] {
	  name="Eye_V2";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[5] {
	  name="ToSum";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ rnd;learn;wt_limits;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.8: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=0;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[6] {
	  name="V2sum_V2";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ rnd;learn;wt_scale;wt_limits;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.9: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0: no_plus_net=0: };
	  learn=0;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.02;
	cur_lrate=0.04;
	lrs_mult=1;
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	use_lrate_sched=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	 SchedItem @[0] {
	  start_ctr=0;
	  start_val=1;
	  duration=50;
	  step=-0.01;
	 };
	 SchedItem @[1] {
	  start_ctr=50;
	  start_val=0.5;
	  duration=50;
	  step=-0.006;
	 };
	 SchedItem @[2] {
	  start_ctr=100;
	  start_val=0.2;
	  duration=50;
	  step=-0.002;
	 };
	 SchedItem @[3] {
	  start_ctr=150;
	  start_val=0.1;
	  duration=50;
	  step=-0.001;
	 };
	 SchedItem @[4] {
	  start_ctr=200;
	  start_val=0.05;
	  duration=50;
	  step=-0.0006;
	 };
	 SchedItem @[5] {
	  start_ctr=250;
	  start_val=0.02;
	  duration=50;
	  step=-0.0002;
	 };
	 SchedItem @[6] {
	  start_ctr=300;
	  start_val=0.01;
	  duration=1;
	  step=1;
	 };
	};
       };
       LeabraConSpec @[1] {
	name="V2V3Cons";
	is_used=0;
	used_status=CHILD_USED;
	desc=;
	unique{ wt_sig;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	 LeabraConSpec @[0] {
	  name="V2_V3";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;rnd;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.4: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[1] {
	  name="V3_V2";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[2] {
	  name="V4_V3";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 DeepCtxtConSpec @[3] {
	  name="V3Ctxt";
	  is_used=1;
	  used_status=PARENT_USED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_init;wt_scale_p;wt_sig;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=DeepCtxtConSpec;
	   el_def=0;
	   DeepCtxtConSpec @[0] {
	    name="V3V2Ctxt";
	    is_used=0;
	    used_status=UNUSED;
	    desc=;
	    unique{ wt_scale;diff_scale_p;wt_scale_init;wt_scale_p;	    };
	    saved{ 	    };
	    children {
	     name="children";
	     el_typ=DeepCtxtConSpec;
	     el_def=0;
	    };
	    rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	    wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	    inhib=0;
	    wt_scale {abs=1: rel=1: no_plus_net=0: };
	    learn=1;
	    learn_qtr=Q4;
	    lrate=0.02;
	    cur_lrate=0.02;
	    lrs_mult=1;
	    use_unlearnable=1;
	    xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	    wt_sig {gain=6: off=1: soft_bound=1: };
	    momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	    wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	    adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	    slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	    deep {on=0: bg_lrate=1: fg_lrate=0: };
	    margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	    use_lrate_sched=1;
	    lrate_sched {
	     name="lrate_sched";
	     el_typ=SchedItem;
	     el_def=0;
	     default_val=1;
	     interpolate=0;
	     SchedItem @[0] {
	      start_ctr=0;
	      start_val=1;
	      duration=50;
	      step=-0.01;
	     };
	     SchedItem @[1] {
	      start_ctr=50;
	      start_val=0.5;
	      duration=50;
	      step=-0.006;
	     };
	     SchedItem @[2] {
	      start_ctr=100;
	      start_val=0.2;
	      duration=50;
	      step=-0.002;
	     };
	     SchedItem @[3] {
	      start_ctr=150;
	      start_val=0.1;
	      duration=50;
	      step=-0.001;
	     };
	     SchedItem @[4] {
	      start_ctr=200;
	      start_val=0.05;
	      duration=50;
	      step=-0.0006;
	     };
	     SchedItem @[5] {
	      start_ctr=250;
	      start_val=0.02;
	      duration=50;
	      step=-0.0002;
	     };
	     SchedItem @[6] {
	      start_ctr=300;
	      start_val=0.01;
	      duration=1;
	      step=1;
	     };
	    };
	    delta_dwt=0;
	   };
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.5: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	  delta_dwt=0;
	 };
	 LeabraConSpec @[4] {
	  name="V2sum_V3";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ rnd;wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.02;
	cur_lrate=0.04;
	lrs_mult=1;
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	use_lrate_sched=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	 SchedItem @[0] {
	  start_ctr=0;
	  start_val=1;
	  duration=50;
	  step=-0.01;
	 };
	 SchedItem @[1] {
	  start_ctr=50;
	  start_val=0.5;
	  duration=50;
	  step=-0.006;
	 };
	 SchedItem @[2] {
	  start_ctr=100;
	  start_val=0.2;
	  duration=50;
	  step=-0.002;
	 };
	 SchedItem @[3] {
	  start_ctr=150;
	  start_val=0.1;
	  duration=50;
	  step=-0.001;
	 };
	 SchedItem @[4] {
	  start_ctr=200;
	  start_val=0.05;
	  duration=50;
	  step=-0.0006;
	 };
	 SchedItem @[5] {
	  start_ctr=250;
	  start_val=0.02;
	  duration=50;
	  step=-0.0002;
	 };
	 SchedItem @[6] {
	  start_ctr=300;
	  start_val=0.01;
	  duration=1;
	  step=1;
	 };
	};
       };
       LeabraConSpec @[2] {
	name="V2V3pCons";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ 	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	 LeabraConSpec @[0] {
	  name="V2_V3p";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=2: rel=0: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[1] {
	  name="V3p_V2";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 DeepCtxtConSpec @[2] {
	  name="V3pCtxt";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_init;wt_scale_p;wt_sig;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=DeepCtxtConSpec;
	   el_def=0;
	   DeepCtxtConSpec @[0] {
	    name="V3pV2Ctxt";
	    is_used=0;
	    used_status=UNUSED;
	    desc=;
	    unique{ wt_scale;diff_scale_p;wt_scale_init;wt_scale_p;	    };
	    saved{ 	    };
	    children {
	     name="children";
	     el_typ=DeepCtxtConSpec;
	     el_def=0;
	    };
	    rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	    wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	    inhib=0;
	    wt_scale {abs=1: rel=1: no_plus_net=0: };
	    learn=1;
	    learn_qtr=Q4;
	    lrate=0.02;
	    cur_lrate=0.02;
	    lrs_mult=1;
	    use_unlearnable=1;
	    xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	    wt_sig {gain=6: off=1: soft_bound=1: };
	    momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	    wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	    adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	    slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	    deep {on=0: bg_lrate=1: fg_lrate=0: };
	    margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	    use_lrate_sched=1;
	    lrate_sched {
	     name="lrate_sched";
	     el_typ=SchedItem;
	     el_def=0;
	     default_val=1;
	     interpolate=0;
	     SchedItem @[0] {
	      start_ctr=0;
	      start_val=1;
	      duration=50;
	      step=-0.01;
	     };
	     SchedItem @[1] {
	      start_ctr=50;
	      start_val=0.5;
	      duration=50;
	      step=-0.006;
	     };
	     SchedItem @[2] {
	      start_ctr=100;
	      start_val=0.2;
	      duration=50;
	      step=-0.002;
	     };
	     SchedItem @[3] {
	      start_ctr=150;
	      start_val=0.1;
	      duration=50;
	      step=-0.001;
	     };
	     SchedItem @[4] {
	      start_ctr=200;
	      start_val=0.05;
	      duration=50;
	      step=-0.0006;
	     };
	     SchedItem @[5] {
	      start_ctr=250;
	      start_val=0.02;
	      duration=50;
	      step=-0.0002;
	     };
	     SchedItem @[6] {
	      start_ctr=300;
	      start_val=0.01;
	      duration=1;
	      step=1;
	     };
	    };
	    delta_dwt=0;
	   };
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.5: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	  delta_dwt=0;
	 };
	 LeabraConSpec @[3] {
	  name="V2sum_V3p";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ rnd;learn;wt_scale;diff_scale_p;wt_scale_p;wt_limits;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.9: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0: no_plus_net=0: };
	  learn=0;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[4] {
	  name="V3p_LIP";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[5] {
	  name="Eye_V3p";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.02;
	cur_lrate=0.04;
	lrs_mult=1;
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	use_lrate_sched=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	 SchedItem @[0] {
	  start_ctr=0;
	  start_val=1;
	  duration=50;
	  step=-0.01;
	 };
	 SchedItem @[1] {
	  start_ctr=50;
	  start_val=0.5;
	  duration=50;
	  step=-0.006;
	 };
	 SchedItem @[2] {
	  start_ctr=100;
	  start_val=0.2;
	  duration=50;
	  step=-0.002;
	 };
	 SchedItem @[3] {
	  start_ctr=150;
	  start_val=0.1;
	  duration=50;
	  step=-0.001;
	 };
	 SchedItem @[4] {
	  start_ctr=200;
	  start_val=0.05;
	  duration=50;
	  step=-0.0006;
	 };
	 SchedItem @[5] {
	  start_ctr=250;
	  start_val=0.02;
	  duration=50;
	  step=-0.0002;
	 };
	 SchedItem @[6] {
	  start_ctr=300;
	  start_val=0.01;
	  duration=1;
	  step=1;
	 };
	};
       };
       LeabraConSpec @[3] {
	name="LIPCons";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ 	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	 LeabraConSpec @[0] {
	  name="V2_LIP";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;rnd;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=3: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[1] {
	  name="Eye_LIP";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.2: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[2] {
	  name="LIP_V2";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;rnd;lrate;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.005: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[3] {
	  name="V3_LIP";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 DeepCtxtConSpec @[4] {
	  name="LIPCtxt";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_init;wt_scale_p;wt_sig;rnd;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=DeepCtxtConSpec;
	   el_def=0;
	   DeepCtxtConSpec @[0] {
	    name="LIPV2Ctxt";
	    is_used=0;
	    used_status=UNUSED;
	    desc=;
	    unique{ wt_scale;diff_scale_p;wt_scale_init;wt_scale_p;xcal;	    };
	    saved{ 	    };
	    children {
	     name="children";
	     el_typ=DeepCtxtConSpec;
	     el_def=0;
	    };
	    rnd {name="rnd": type=UNIFORM: mean=0: var=0.25: par=1: };
	    wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	    inhib=0;
	    wt_scale {abs=1: rel=1: no_plus_net=0: };
	    learn=1;
	    learn_qtr=Q4;
	    lrate=0.02;
	    cur_lrate=0.02;
	    lrs_mult=1;
	    use_unlearnable=1;
	    xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	    wt_sig {gain=6: off=1: soft_bound=1: };
	    momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	    wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	    adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	    slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	    deep {on=0: bg_lrate=1: fg_lrate=0: };
	    margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	    use_lrate_sched=1;
	    lrate_sched {
	     name="lrate_sched";
	     el_typ=SchedItem;
	     el_def=0;
	     default_val=1;
	     interpolate=0;
	     SchedItem @[0] {
	      start_ctr=0;
	      start_val=1;
	      duration=50;
	      step=-0.01;
	     };
	     SchedItem @[1] {
	      start_ctr=50;
	      start_val=0.5;
	      duration=50;
	      step=-0.006;
	     };
	     SchedItem @[2] {
	      start_ctr=100;
	      start_val=0.2;
	      duration=50;
	      step=-0.002;
	     };
	     SchedItem @[3] {
	      start_ctr=150;
	      start_val=0.1;
	      duration=50;
	      step=-0.001;
	     };
	     SchedItem @[4] {
	      start_ctr=200;
	      start_val=0.05;
	      duration=50;
	      step=-0.0006;
	     };
	     SchedItem @[5] {
	      start_ctr=250;
	      start_val=0.02;
	      duration=50;
	      step=-0.0002;
	     };
	     SchedItem @[6] {
	      start_ctr=300;
	      start_val=0.01;
	      duration=1;
	      step=1;
	     };
	    };
	    delta_dwt=0;
	   };
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.5: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	  delta_dwt=0;
	 };
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.02;
	cur_lrate=0.04;
	lrs_mult=1;
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	use_lrate_sched=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	 SchedItem @[0] {
	  start_ctr=0;
	  start_val=1;
	  duration=50;
	  step=-0.01;
	 };
	 SchedItem @[1] {
	  start_ctr=50;
	  start_val=0.5;
	  duration=50;
	  step=-0.006;
	 };
	 SchedItem @[2] {
	  start_ctr=100;
	  start_val=0.2;
	  duration=50;
	  step=-0.002;
	 };
	 SchedItem @[3] {
	  start_ctr=150;
	  start_val=0.1;
	  duration=50;
	  step=-0.001;
	 };
	 SchedItem @[4] {
	  start_ctr=200;
	  start_val=0.05;
	  duration=50;
	  step=-0.0006;
	 };
	 SchedItem @[5] {
	  start_ctr=250;
	  start_val=0.02;
	  duration=50;
	  step=-0.0002;
	 };
	 SchedItem @[6] {
	  start_ctr=300;
	  start_val=0.01;
	  duration=1;
	  step=1;
	 };
	};
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=1: no_plus_net=0: };
      learn=1;
      learn_qtr=Q4;
      lrate=0.02;
      cur_lrate=0.02;
      lrs_mult=1;
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1: soft_bound=1: };
      momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
      wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
      margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
      use_lrate_sched=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
       SchedItem @[0] {
	start_ctr=0;
	start_val=1;
	duration=50;
	step=-0.01;
       };
       SchedItem @[1] {
	start_ctr=50;
	start_val=0.5;
	duration=50;
	step=-0.006;
       };
       SchedItem @[2] {
	start_ctr=100;
	start_val=0.2;
	duration=50;
	step=-0.002;
       };
       SchedItem @[3] {
	start_ctr=150;
	start_val=0.1;
	duration=50;
	step=-0.001;
       };
       SchedItem @[4] {
	start_ctr=200;
	start_val=0.05;
	duration=50;
	step=-0.0006;
       };
       SchedItem @[5] {
	start_ctr=250;
	start_val=0.02;
	duration=50;
	step=-0.0002;
       };
       SchedItem @[6] {
	start_ctr=300;
	start_val=0.01;
	duration=1;
	step=1;
       };
      };
     };
     LeabraBiasSpec @[6] {
      name="V1Bias";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ rnd;wt_limits;wt_scale;wt_scale_init;      };
      saved{       };
      children {
       name="children";
       el_typ=LeabraBiasSpec;
       el_def=0;
      };
      rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
      wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=1: no_plus_net=0: };
      learn=0;
      learn_qtr=Q4;
      lrate=0.04;
      cur_lrate=0.04;
      lrs_mult=1;
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1: soft_bound=1: };
      momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
      wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
      margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
      use_lrate_sched=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
       SchedItem @[0] {
	start_ctr=0;
	start_val=1;
	duration=50;
	step=-0.01;
       };
       SchedItem @[1] {
	start_ctr=50;
	start_val=0.5;
	duration=50;
	step=-0.006;
       };
       SchedItem @[2] {
	start_ctr=100;
	start_val=0.2;
	duration=50;
	step=-0.002;
       };
       SchedItem @[3] {
	start_ctr=150;
	start_val=0.1;
	duration=50;
	step=-0.001;
       };
       SchedItem @[4] {
	start_ctr=200;
	start_val=0.05;
	duration=50;
	step=-0.0006;
       };
       SchedItem @[5] {
	start_ctr=250;
	start_val=0.02;
	duration=50;
	step=-0.0002;
       };
       SchedItem @[6] {
	start_ctr=300;
	start_val=0.01;
	duration=1;
	step=1;
       };
      };
      dwt_thresh=0.1;
     };
     GpTesselPrjnSpec @[7] {
      name="Ctxt_3x3";
      is_used=1;
      used_status=USED;
      desc="context, 3x3 surrounding groups";
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=GpTesselPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      recv_gp_off {x=0: y=0: };
      recv_gp_n {x=-1: y=-1: };
      recv_gp_skip {x=1: y=1: };
      recv_gp_group {x=1: y=1: };
      send_gp_scale {x=1: y=1: };
      send_gp_border {x=0: y=0: };
      wrap=1;
      def_p_con=1;
      sym_self=1;
      same_seed=0;
      rndm_seed {
       name="rndm_seed";
       rnd_seed=506847952;
      };
      last_make_cmd=;
      send_gp_offs {
       name="send_gp_offs";
       el_typ=GpTessEl;
       el_def=0;
       GpTessEl @[0] {
	send_gp_off {x=-1: y=-1: };
	p_con=1;
       };
       GpTessEl @[1] {
	send_gp_off {x=0: y=-1: };
	p_con=1;
       };
       GpTessEl @[2] {
	send_gp_off {x=1: y=-1: };
	p_con=1;
       };
       GpTessEl @[3] {
	send_gp_off {x=-1: y=0: };
	p_con=1;
       };
       GpTessEl @[4] {
	send_gp_off {x=0: y=0: };
	p_con=1;
       };
       GpTessEl @[5] {
	send_gp_off {x=1: y=0: };
	p_con=1;
       };
       GpTessEl @[6] {
	send_gp_off {x=-1: y=1: };
	p_con=1;
       };
       GpTessEl @[7] {
	send_gp_off {x=0: y=1: };
	p_con=1;
       };
       GpTessEl @[8] {
	send_gp_off {x=1: y=1: };
	p_con=1;
       };
      };
     };
     GpTesselPrjnSpec @[8] {
      name="Ctxt_5x5";
      is_used=0;
      used_status=UNUSED;
      desc="context, 5x5 surrounding groups";
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=GpTesselPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      recv_gp_off {x=0: y=0: };
      recv_gp_n {x=-1: y=-1: };
      recv_gp_skip {x=1: y=1: };
      recv_gp_group {x=1: y=1: };
      send_gp_scale {x=1: y=1: };
      send_gp_border {x=0: y=0: };
      wrap=1;
      def_p_con=1;
      sym_self=1;
      same_seed=0;
      rndm_seed {
       name="rndm_seed";
       rnd_seed=528325387;
      };
      last_make_cmd=;
      send_gp_offs {
       name="send_gp_offs";
       el_typ=GpTessEl;
       el_def=0;
       GpTessEl @[0] {
	send_gp_off {x=-2: y=-2: };
	p_con=1;
       };
       GpTessEl @[1] {
	send_gp_off {x=-1: y=-2: };
	p_con=1;
       };
       GpTessEl @[2] {
	send_gp_off {x=0: y=-2: };
	p_con=1;
       };
       GpTessEl @[3] {
	send_gp_off {x=1: y=-2: };
	p_con=1;
       };
       GpTessEl @[4] {
	send_gp_off {x=2: y=-2: };
	p_con=1;
       };
       GpTessEl @[5] {
	send_gp_off {x=-2: y=-1: };
	p_con=1;
       };
       GpTessEl @[6] {
	send_gp_off {x=-1: y=-1: };
	p_con=1;
       };
       GpTessEl @[7] {
	send_gp_off {x=0: y=-1: };
	p_con=1;
       };
       GpTessEl @[8] {
	send_gp_off {x=1: y=-1: };
	p_con=1;
       };
       GpTessEl @[9] {
	send_gp_off {x=2: y=-1: };
	p_con=1;
       };
       GpTessEl @[10] {
	send_gp_off {x=-2: y=0: };
	p_con=1;
       };
       GpTessEl @[11] {
	send_gp_off {x=-1: y=0: };
	p_con=1;
       };
       GpTessEl @[12] {
	send_gp_off {x=0: y=0: };
	p_con=1;
       };
       GpTessEl @[13] {
	send_gp_off {x=1: y=0: };
	p_con=1;
       };
       GpTessEl @[14] {
	send_gp_off {x=2: y=0: };
	p_con=1;
       };
       GpTessEl @[15] {
	send_gp_off {x=-2: y=1: };
	p_con=1;
       };
       GpTessEl @[16] {
	send_gp_off {x=-1: y=1: };
	p_con=1;
       };
       GpTessEl @[17] {
	send_gp_off {x=0: y=1: };
	p_con=1;
       };
       GpTessEl @[18] {
	send_gp_off {x=1: y=1: };
	p_con=1;
       };
       GpTessEl @[19] {
	send_gp_off {x=2: y=1: };
	p_con=1;
       };
       GpTessEl @[20] {
	send_gp_off {x=-2: y=2: };
	p_con=1;
       };
       GpTessEl @[21] {
	send_gp_off {x=-1: y=2: };
	p_con=1;
       };
       GpTessEl @[22] {
	send_gp_off {x=0: y=2: };
	p_con=1;
       };
       GpTessEl @[23] {
	send_gp_off {x=1: y=2: };
	p_con=1;
       };
       GpTessEl @[24] {
	send_gp_off {x=2: y=2: };
	p_con=1;
       };
      };
     };
     TiledGpRFPrjnSpec @[9] {
      name="V1h_V2m";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V2m_V1h";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=8: y=8: };
	send_gp_skip {x=4: y=4: };
	send_gp_start {x=-4: y=-4: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0: max=0: range=0: scale=0: };
	trg_recv_geom {x=12: y=12: };
	trg_send_geom {x=48: y=48: };
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=8: y=8: };
      send_gp_skip {x=4: y=4: };
      send_gp_start {x=-4: y=-4: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=12: y=12: };
      trg_send_geom {x=48: y=48: };
     };
     TiledGpRFPrjnSpec @[10] {
      name="V1m_V2m";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V2m_V1m";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=4: y=4: };
	send_gp_skip {x=2: y=2: };
	send_gp_start {x=-2: y=-2: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0: max=0: range=0: scale=0: };
	trg_recv_geom {x=6: y=6: };
	trg_send_geom {x=18: y=18: };
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=4: y=4: };
      send_gp_skip {x=2: y=2: };
      send_gp_start {x=-2: y=-2: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=6: y=6: };
      trg_send_geom {x=18: y=18: };
     };
     TiledGpRFPrjnSpec @[11] {
      name="V1h_V2h";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V2h_V1h";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=4: y=4: };
	send_gp_skip {x=2: y=2: };
	send_gp_start {x=-2: y=-2: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0: max=0: range=0: scale=0: };
	trg_recv_geom {x=12: y=12: };
	trg_send_geom {x=48: y=48: };
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=4: y=4: };
      send_gp_skip {x=2: y=2: };
      send_gp_start {x=-2: y=-2: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=12: y=12: };
      trg_send_geom {x=48: y=48: };
     };
     TiledGpRFPrjnSpec @[12] {
      name="V1m_V2h";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V2h_V1m";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=2: y=2: };
	send_gp_skip {x=1: y=1: };
	send_gp_start {x=-1: y=-1: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0: max=0: range=0: scale=0: };
	trg_recv_geom {x=12: y=12: };
	trg_send_geom {x=48: y=48: };
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=2: y=2: };
      send_gp_skip {x=1: y=1: };
      send_gp_start {x=-1: y=-1: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=12: y=12: };
      trg_send_geom {x=48: y=48: };
     };
     TiledGpRFPrjnSpec @[13] {
      name="V2m_V3h";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V3h_V2m";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=4: y=4: };
	send_gp_skip {x=2: y=2: };
	send_gp_start {x=-2: y=-2: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0: max=0: range=0: scale=0: };
	trg_recv_geom {x=6: y=6: };
	trg_send_geom {x=12: y=12: };
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=4: y=4: };
      send_gp_skip {x=2: y=2: };
      send_gp_start {x=-2: y=-2: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=6: y=6: };
      trg_send_geom {x=12: y=12: };
     };
     TiledGpRFPrjnSpec @[14] {
      name="V2m_V3m";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V3m_V2m";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=4: y=4: };
	send_gp_skip {x=2: y=2: };
	send_gp_start {x=-2: y=-2: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0: max=0: range=0: scale=0: };
	trg_recv_geom {x=3: y=3: };
	trg_send_geom {x=12: y=12: };
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=4: y=4: };
      send_gp_skip {x=2: y=2: };
      send_gp_start {x=-2: y=-2: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=3: y=3: };
      trg_send_geom {x=12: y=12: };
     };
     TiledGpRFPrjnSpec @[15] {
      name="V2h_V3h";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V3h_V2h";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=4: y=4: };
	send_gp_skip {x=2: y=2: };
	send_gp_start {x=-2: y=-2: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0: max=0: range=0: scale=0: };
	trg_recv_geom {x=6: y=6: };
	trg_send_geom {x=12: y=12: };
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=4: y=4: };
      send_gp_skip {x=2: y=2: };
      send_gp_start {x=-2: y=-2: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=6: y=6: };
      trg_send_geom {x=12: y=12: };
     };
     TiledGpRFPrjnSpec @[16] {
      name="V2h_V3m";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V3m_V2h";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=16: y=16: };
	send_gp_skip {x=8: y=8: };
	send_gp_start {x=-8: y=-8: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0: max=0: range=0: scale=0: };
	trg_recv_geom {x=3: y=3: };
	trg_send_geom {x=12: y=12: };
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=16: y=16: };
      send_gp_skip {x=8: y=8: };
      send_gp_start {x=-8: y=-8: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=3: y=3: };
      trg_send_geom {x=12: y=12: };
     };
     TiledGpRFPrjnSpec @[17] {
      name="V1sum_V2";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=2: y=2: };
      send_gp_skip {x=2: y=2: };
      send_gp_start {x=-2: y=-2: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=3: y=3: };
      trg_send_geom {x=12: y=12: };
     };
     OneToOnePrjnSpec @[18] {
      name="OneToOnePrjn";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{ self_con;      };
      saved{       };
      children {
       name="children";
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      n_conns=-1;
      recv_start=0;
      send_start=0;
      use_gp=0;
     };
     GpOneToOnePrjnSpec @[19] {
      name="GpOneToOnePrjn";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ self_con;      };
      saved{       };
      children {
       name="children";
       el_typ=GpOneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      n_conns=-1;
      recv_start=0;
      send_start=0;
      use_gp=0;
      p_con=1;
      sym_self=1;
      same_seed=0;
      rndm_seed {
       name="rndm_seed";
       rnd_seed=873191629;
      };
     };
     TesselPrjnSpec @[20] {
      name="Sum_V3_2x2";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TesselPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      recv_off {x=0: y=0: };
      recv_n {x=-1: y=-1: };
      recv_skip {x=1: y=1: };
      recv_group {x=1: y=1: };
      wrap=1;
      send_scale {x=0.5: y=0.5: };
      send_off {x=0: y=0: };
      last_make_cmd="MakeRectangle(width=1, height=1, left=0, bottom=0)";
      last_weights_cmd=;
      send_offs {
       name="send_offs";
       el_typ=TessEl;
       el_def=0;
       TessEl @[0] {
	send_off {x=0: y=0: };
	wt_val=1;
       };
      };
     };
     TesselPrjnSpec @[21] {
      name="Sum_V2_2x2";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TesselPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      recv_off {x=0: y=0: };
      recv_n {x=-1: y=-1: };
      recv_skip {x=1: y=1: };
      recv_group {x=1: y=1: };
      wrap=1;
      send_scale {x=2: y=2: };
      send_off {x=0: y=0: };
      last_make_cmd="MakeRectangle(width=2, height=2, left=0, bottom=0)";
      last_weights_cmd=;
      send_offs {
       name="send_offs";
       el_typ=TessEl;
       el_def=0;
       TessEl @[0] {
	send_off {x=0: y=0: };
	wt_val=1;
       };
       TessEl @[1] {
	send_off {x=1: y=0: };
	wt_val=1;
       };
       TessEl @[2] {
	send_off {x=0: y=1: };
	wt_val=1;
       };
       TessEl @[3] {
	send_off {x=1: y=1: };
	wt_val=1;
       };
      };
     };
     TiledNovlpPrjnSpec @[22] {
      name="V1sum_V2_tile";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledNovlpPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      reciprocal=0;
      ru_geo {x=12: y=12: };
      su_act_geom {x=24: y=24: };
      rf_width {x=2: y=2: };
     };
    };
    BaseSpec_Group @.gp[1] {
     name="V4ITSpecs";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @[0] {
      name="V4ITUnits";
      is_used=0;
      used_status=CHILD_USED;
      desc=;
      unique{ da_mod;act_reg;      };
      saved{       };
      children {
       name="children";
       el_typ=LeabraUnitSpec;
       el_def=0;
       LeabraUnitSpec @[0] {
	name="OutputUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ bias_spec;depress;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs.gp[1][2].children[0].children[0]$$: };
	act_range {min=0: max=1: range=1: scale=1: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=6: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.1: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
	trc {p_only_m=0: thal_gate=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.1: };
	noise_type {type=NO_NOISE: trial_fixed=1: };
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.0005: par=1: };
       };
       LeabraUnitSpec @[1] {
	name="ITUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ depress;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs.gp[1][2].children[0]$$: };
	act_range {min=0: max=1: range=1: scale=1: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=6: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.1: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
	trc {p_only_m=0: thal_gate=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.1: };
	noise_type {type=NO_NOISE: trial_fixed=1: };
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.0005: par=1: };
       };
       LeabraUnitSpec @[2] {
	name="V4Units";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ 	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][2].children[0]$: };
	act_range {min=0: max=1: range=1: scale=1: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=6: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.1: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
	trc {p_only_m=0: thal_gate=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.1: };
	noise_type {type=NO_NOISE: trial_fixed=1: };
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.0005: par=1: };
       };
      };
      bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][2].children[0]$: };
      act_range {min=0: max=1: range=1: scale=1: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.5: gain=100: nvar=0.005: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
      act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
      spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=6: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
      opt_thresh {send=0.1: delta=0.005: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      init {v_m=0.4: act=0: netin=0: };
      dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
      act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
      avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
      avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
      g_bar {e=1: l=0.1: i=1: };
      e_rev {e=1: l=0.3: i=0.25: };
      adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
      stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
      syn_delay {on=0: delay=4: };
      deep_raw_qtr=Q4;
      deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
      trc {p_only_m=0: thal_gate=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
      da_mod {on=0: minus=0: plus=0.1: };
      noise_type {type=NO_NOISE: trial_fixed=1: };
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.0005: par=1: };
     };
     LeabraLayerSpec @[1] {
      name="LvisLayerSpec";
      is_used=0;
      used_status=CHILD_USED;
      desc=;
      unique{ decay;      };
      saved{       };
      children {
       name="children";
       el_typ=LeabraLayerSpec;
       el_def=0;
       LeabraLayerSpec @[0] {
	name="V4";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ kwta;gp_kwta;inhib_group;unit_gp_inhib;lay_inhib;	};
	saved{ avg_act={targ_init=0.04: fixed=0: use_ext_act=0: use_first=1: tau=10: adjust=1: dt=0.1: };	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.1: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[1] {
	name="IT";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ kwta;gp_kwta;inhib_group;lay_inhib;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.1: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[2] {
	name="Semantics";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ kwta;gp_kwta;inhib_group;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.1: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[3] {
	name="FFA";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ kwta;inhib_group;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.1: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[4] {
	name="Output";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ kwta;inhib_group;compute_i;i_kwta_pt;lay_inhib;gp_kwta;decay;	};
	saved{ avg_act={targ_init=0.02: fixed=0: use_ext_act=0: use_first=0: tau=10: adjust=1: dt=0.1: };	};
	children {
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=2.4: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.1: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
      };
      lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      avg_act {targ_init=0.1: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
      inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
      inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
      clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
      decay {trial=1: };
      del_inhib {on=0: prv_trl=0: prv_q=0: };
      margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
      lay_lrate=1;
      cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
      lstats {hog_thr=0.3: dead_thr=0.01: };
     };
     LeabraConSpec @[2] {
      name="V4ITCons";
      is_used=0;
      used_status=CHILD_USED;
      desc=;
      unique{ rel_net_adapt;savg_cor;      };
      saved{       };
      children {
       name="children";
       el_typ=LeabraConSpec;
       el_def=0;
       LeabraBiasSpec @[0] {
	name="V4ITBias";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;ct_lrate;learn;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	 LeabraBiasSpec @[0] {
	  name="OutputBias";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ rnd;wt_limits;wt_scale;wt_scale_init;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraBiasSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	  wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	  dwt_thresh=0.1;
	 };
	};
	rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_mult=1;
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	use_lrate_sched=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	 SchedItem @[0] {
	  start_ctr=0;
	  start_val=1;
	  duration=50;
	  step=-0.01;
	 };
	 SchedItem @[1] {
	  start_ctr=50;
	  start_val=0.5;
	  duration=50;
	  step=-0.006;
	 };
	 SchedItem @[2] {
	  start_ctr=100;
	  start_val=0.2;
	  duration=50;
	  step=-0.002;
	 };
	 SchedItem @[3] {
	  start_ctr=150;
	  start_val=0.1;
	  duration=50;
	  step=-0.001;
	 };
	 SchedItem @[4] {
	  start_ctr=200;
	  start_val=0.05;
	  duration=50;
	  step=-0.0006;
	 };
	 SchedItem @[5] {
	  start_ctr=250;
	  start_val=0.02;
	  duration=50;
	  step=-0.0002;
	 };
	 SchedItem @[6] {
	  start_ctr=300;
	  start_val=0.01;
	  duration=1;
	  step=1;
	 };
	};
	dwt_thresh=0.1;
       };
       LeabraBiasSpec @[1] {
	name="V4ITFixedBias";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ rnd;wt_limits;wt_scale;wt_scale_init;ct_lrate;learn;lrate;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	cur_lrate=0;
	lrs_mult=1;
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	use_lrate_sched=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	 SchedItem @[0] {
	  start_ctr=0;
	  start_val=1;
	  duration=50;
	  step=-0.01;
	 };
	 SchedItem @[1] {
	  start_ctr=50;
	  start_val=0.5;
	  duration=50;
	  step=-0.006;
	 };
	 SchedItem @[2] {
	  start_ctr=100;
	  start_val=0.2;
	  duration=50;
	  step=-0.002;
	 };
	 SchedItem @[3] {
	  start_ctr=150;
	  start_val=0.1;
	  duration=50;
	  step=-0.001;
	 };
	 SchedItem @[4] {
	  start_ctr=200;
	  start_val=0.05;
	  duration=50;
	  step=-0.0006;
	 };
	 SchedItem @[5] {
	  start_ctr=250;
	  start_val=0.02;
	  duration=50;
	  step=-0.0002;
	 };
	 SchedItem @[6] {
	  start_ctr=300;
	  start_val=0.01;
	  duration=1;
	  step=1;
	 };
	};
	dwt_thresh=0.1;
       };
       LeabraConSpec @[2] {
	name="V4Cons";
	is_used=0;
	used_status=CHILD_USED;
	desc=;
	unique{ wt_scale;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	 LeabraConSpec @[0] {
	  name="V2_V4";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1.2: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[1] {
	  name="V3_V4";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=2: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[2] {
	  name="V4_V2";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_scale;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.5: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.02;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_mult=1;
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	use_lrate_sched=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	 SchedItem @[0] {
	  start_ctr=0;
	  start_val=1;
	  duration=50;
	  step=-0.01;
	 };
	 SchedItem @[1] {
	  start_ctr=50;
	  start_val=0.5;
	  duration=50;
	  step=-0.006;
	 };
	 SchedItem @[2] {
	  start_ctr=100;
	  start_val=0.2;
	  duration=50;
	  step=-0.002;
	 };
	 SchedItem @[3] {
	  start_ctr=150;
	  start_val=0.1;
	  duration=50;
	  step=-0.001;
	 };
	 SchedItem @[4] {
	  start_ctr=200;
	  start_val=0.05;
	  duration=50;
	  step=-0.0006;
	 };
	 SchedItem @[5] {
	  start_ctr=250;
	  start_val=0.02;
	  duration=50;
	  step=-0.0002;
	 };
	 SchedItem @[6] {
	  start_ctr=300;
	  start_val=0.01;
	  duration=1;
	  step=1;
	 };
	};
       };
       LeabraConSpec @[3] {
	name="ITOutCons";
	is_used=0;
	used_status=CHILD_USED;
	desc=;
	unique{ lrate;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	 LeabraConSpec @[0] {
	  name="V4_IT";
	  is_used=1;
	  used_status=PARENT_USED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	   LeabraConSpec @[0] {
	    name="V4_med_IT";
	    is_used=0;
	    used_status=UNUSED;
	    desc=;
	    unique{ wt_scale;	    };
	    saved{ 	    };
	    children {
	     name="children";
	     el_typ=LeabraConSpec;
	     el_def=0;
	    };
	    rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	    wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	    inhib=0;
	    wt_scale {abs=1.4: rel=0.9: no_plus_net=0: };
	    learn=1;
	    learn_qtr=Q4;
	    lrate=0.002;
	    cur_lrate=0.0008;
	    lrs_mult=1;
	    use_unlearnable=1;
	    xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	    wt_sig {gain=6: off=1: soft_bound=1: };
	    momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	    wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	    adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	    slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	    deep {on=0: bg_lrate=1: fg_lrate=0: };
	    margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	    use_lrate_sched=1;
	    lrate_sched {
	     name="lrate_sched";
	     el_typ=SchedItem;
	     el_def=0;
	     default_val=1;
	     interpolate=0;
	     SchedItem @[0] {
	      start_ctr=0;
	      start_val=1;
	      duration=50;
	      step=-0.01;
	     };
	     SchedItem @[1] {
	      start_ctr=50;
	      start_val=0.5;
	      duration=50;
	      step=-0.006;
	     };
	     SchedItem @[2] {
	      start_ctr=100;
	      start_val=0.2;
	      duration=50;
	      step=-0.002;
	     };
	     SchedItem @[3] {
	      start_ctr=150;
	      start_val=0.1;
	      duration=50;
	      step=-0.001;
	     };
	     SchedItem @[4] {
	      start_ctr=200;
	      start_val=0.05;
	      duration=50;
	      step=-0.0006;
	     };
	     SchedItem @[5] {
	      start_ctr=250;
	      start_val=0.02;
	      duration=50;
	      step=-0.0002;
	     };
	     SchedItem @[6] {
	      start_ctr=300;
	      start_val=0.01;
	      duration=1;
	      step=1;
	     };
	    };
	   };
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1.5: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.002;
	  cur_lrate=0.002;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[1] {
	  name="IT_FFA";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.002;
	  cur_lrate=0.04;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[2] {
	  name="IT_Out";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_scale;xcal;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.002;
	  cur_lrate=0.002;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[3] {
	  name="FFA_Out";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.002;
	  cur_lrate=0.002;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[4] {
	  name="IT_Sem";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.002;
	  cur_lrate=0.0008;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[5] {
	  name="IT_V4";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_scale;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.5: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.002;
	  cur_lrate=0.002;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[6] {
	  name="FFA_IT";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.2: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.002;
	  cur_lrate=0.002;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[7] {
	  name="Out_IT";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_scale;diff_scale_p;wt_scale_p;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.2: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.002;
	  cur_lrate=0.002;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[8] {
	  name="Sem_IT";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.2: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.002;
	  cur_lrate=0.002;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	 LeabraConSpec @[9] {
	  name="Out_FFA";
	  is_used=0;
	  used_status=UNUSED;
	  desc=;
	  unique{ wt_scale;savg_cor;	  };
	  saved{ 	  };
	  children {
	   name="children";
	   el_typ=LeabraConSpec;
	   el_def=0;
	  };
	  rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.2: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.002;
	  cur_lrate=0.04;
	  lrs_mult=1;
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  use_lrate_sched=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	   SchedItem @[0] {
	    start_ctr=0;
	    start_val=1;
	    duration=50;
	    step=-0.01;
	   };
	   SchedItem @[1] {
	    start_ctr=50;
	    start_val=0.5;
	    duration=50;
	    step=-0.006;
	   };
	   SchedItem @[2] {
	    start_ctr=100;
	    start_val=0.2;
	    duration=50;
	    step=-0.002;
	   };
	   SchedItem @[3] {
	    start_ctr=150;
	    start_val=0.1;
	    duration=50;
	    step=-0.001;
	   };
	   SchedItem @[4] {
	    start_ctr=200;
	    start_val=0.05;
	    duration=50;
	    step=-0.0006;
	   };
	   SchedItem @[5] {
	    start_ctr=250;
	    start_val=0.02;
	    duration=50;
	    step=-0.0002;
	   };
	   SchedItem @[6] {
	    start_ctr=300;
	    start_val=0.01;
	    duration=1;
	    step=1;
	   };
	  };
	 };
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.002;
	cur_lrate=0.04;
	lrs_mult=1;
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	use_lrate_sched=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	 SchedItem @[0] {
	  start_ctr=0;
	  start_val=1;
	  duration=50;
	  step=-0.01;
	 };
	 SchedItem @[1] {
	  start_ctr=50;
	  start_val=0.5;
	  duration=50;
	  step=-0.006;
	 };
	 SchedItem @[2] {
	  start_ctr=100;
	  start_val=0.2;
	  duration=50;
	  step=-0.002;
	 };
	 SchedItem @[3] {
	  start_ctr=150;
	  start_val=0.1;
	  duration=50;
	  step=-0.001;
	 };
	 SchedItem @[4] {
	  start_ctr=200;
	  start_val=0.05;
	  duration=50;
	  step=-0.0006;
	 };
	 SchedItem @[5] {
	  start_ctr=250;
	  start_val=0.02;
	  duration=50;
	  step=-0.0002;
	 };
	 SchedItem @[6] {
	  start_ctr=300;
	  start_val=0.01;
	  duration=1;
	  step=1;
	 };
	};
       };
       DeepCtxtConSpec @[4] {
	name="V4ITCtxt";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ wt_scale;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=DeepCtxtConSpec;
	 el_def=0;
	};
	rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.02;
	cur_lrate=0.02;
	lrs_mult=1;
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	use_lrate_sched=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	 SchedItem @[0] {
	  start_ctr=0;
	  start_val=1;
	  duration=50;
	  step=-0.01;
	 };
	 SchedItem @[1] {
	  start_ctr=50;
	  start_val=0.5;
	  duration=50;
	  step=-0.006;
	 };
	 SchedItem @[2] {
	  start_ctr=100;
	  start_val=0.2;
	  duration=50;
	  step=-0.002;
	 };
	 SchedItem @[3] {
	  start_ctr=150;
	  start_val=0.1;
	  duration=50;
	  step=-0.001;
	 };
	 SchedItem @[4] {
	  start_ctr=200;
	  start_val=0.05;
	  duration=50;
	  step=-0.0006;
	 };
	 SchedItem @[5] {
	  start_ctr=250;
	  start_val=0.02;
	  duration=50;
	  step=-0.0002;
	 };
	 SchedItem @[6] {
	  start_ctr=300;
	  start_val=0.01;
	  duration=1;
	  step=1;
	 };
	};
	delta_dwt=0;
       };
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=1: no_plus_net=0: };
      learn=1;
      learn_qtr=Q4;
      lrate=0.02;
      cur_lrate=0.04;
      lrs_mult=1;
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1: soft_bound=1: };
      momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
      wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
      margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
      use_lrate_sched=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
       SchedItem @[0] {
	start_ctr=0;
	start_val=1;
	duration=50;
	step=-0.01;
       };
       SchedItem @[1] {
	start_ctr=50;
	start_val=0.5;
	duration=50;
	step=-0.006;
       };
       SchedItem @[2] {
	start_ctr=100;
	start_val=0.2;
	duration=50;
	step=-0.002;
       };
       SchedItem @[3] {
	start_ctr=150;
	start_val=0.1;
	duration=50;
	step=-0.001;
       };
       SchedItem @[4] {
	start_ctr=200;
	start_val=0.05;
	duration=50;
	step=-0.0006;
       };
       SchedItem @[5] {
	start_ctr=250;
	start_val=0.02;
	duration=50;
	step=-0.0002;
       };
       SchedItem @[6] {
	start_ctr=300;
	start_val=0.01;
	duration=1;
	step=1;
       };
      };
     };
     LeabraConSpec @[3] {
      name="FmTarget";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{ wt_scale;wt_scale_init;      };
      saved{       };
      children {
       name="children";
       el_typ=LeabraConSpec;
       el_def=0;
      };
      rnd {name="rnd": type=UNIFORM: mean=0.95: var=0: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=0: no_plus_net=0: };
      learn=1;
      learn_qtr=Q4;
      lrate=0;
      cur_lrate=0;
      lrs_mult=1;
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0: lrn_thr=0.01: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1.1: soft_bound=1: };
      momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
      wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
      margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
      use_lrate_sched=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
       SchedItem @[0] {
	start_ctr=0;
	start_val=1;
	duration=50;
	step=-0.01;
       };
       SchedItem @[1] {
	start_ctr=50;
	start_val=0.5;
	duration=50;
	step=-0.006;
       };
       SchedItem @[2] {
	start_ctr=100;
	start_val=0.2;
	duration=50;
	step=-0.002;
       };
       SchedItem @[3] {
	start_ctr=150;
	start_val=0.1;
	duration=50;
	step=-0.001;
       };
       SchedItem @[4] {
	start_ctr=200;
	start_val=0.05;
	duration=50;
	step=-0.0006;
       };
       SchedItem @[5] {
	start_ctr=250;
	start_val=0.02;
	duration=50;
	step=-0.0002;
       };
       SchedItem @[6] {
	start_ctr=300;
	start_val=0.01;
	duration=1;
	step=1;
       };
      };
     };
     FullPrjnSpec @[4] {
      name="V4ITFullPrjn";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
     };
     OneToOnePrjnSpec @[5] {
      name="V4ITOneToOne";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{ self_con;      };
      saved{       };
      children {
       name="children";
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      n_conns=-1;
      recv_start=0;
      send_start=0;
      use_gp=0;
     };
     TiledGpRFPrjnSpec @[6] {
      name="V2m_V4h";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V4h_V2m";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=4: y=4: };
	send_gp_skip {x=2: y=2: };
	send_gp_start {x=-2: y=-2: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0: max=0: range=0: scale=0: };
	trg_recv_geom {x=6: y=6: };
	trg_send_geom {x=12: y=12: };
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=4: y=4: };
      send_gp_skip {x=2: y=2: };
      send_gp_start {x=-2: y=-2: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=6: y=6: };
      trg_send_geom {x=12: y=12: };
     };
     TiledGpRFPrjnSpec @[7] {
      name="V2m_V4m";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V4m_V2m";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=4: y=4: };
	send_gp_skip {x=2: y=2: };
	send_gp_start {x=-2: y=-2: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0: max=0: range=0: scale=0: };
	trg_recv_geom {x=3: y=3: };
	trg_send_geom {x=12: y=12: };
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=4: y=4: };
      send_gp_skip {x=2: y=2: };
      send_gp_start {x=-2: y=-2: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=3: y=3: };
      trg_send_geom {x=12: y=12: };
     };
     TiledGpRFPrjnSpec @[8] {
      name="V2h_V4h";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V4h_V2h";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=8: y=8: };
	send_gp_skip {x=4: y=4: };
	send_gp_start {x=-4: y=-4: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0: max=0: range=0: scale=0: };
	trg_recv_geom {x=6: y=6: };
	trg_send_geom {x=12: y=12: };
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=8: y=8: };
      send_gp_skip {x=4: y=4: };
      send_gp_start {x=-4: y=-4: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=6: y=6: };
      trg_send_geom {x=12: y=12: };
     };
     TiledGpRFPrjnSpec @[9] {
      name="V2h_V4m";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V4m_V2h";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=8: y=8: };
	send_gp_skip {x=4: y=4: };
	send_gp_start {x=-4: y=-4: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0: max=0: range=0: scale=0: };
	trg_recv_geom {x=3: y=3: };
	trg_send_geom {x=12: y=12: };
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=8: y=8: };
      send_gp_skip {x=4: y=4: };
      send_gp_start {x=-4: y=-4: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0: max=0: range=0: scale=0: };
      trg_recv_geom {x=3: y=3: };
      trg_send_geom {x=12: y=12: };
     };
     LeabraConSpec @[10] {
      name="FmRespSet";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{ wt_scale;wt_scale_init;      };
      saved{       };
      children {
       name="children";
       el_typ=LeabraConSpec;
       el_def=0;
      };
      rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=0.1: no_plus_net=0: };
      learn=0;
      learn_qtr=Q4;
      lrate=0.04;
      cur_lrate=0.04;
      lrs_mult=1;
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1: soft_bound=1: };
      momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
      wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
      margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
      use_lrate_sched=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
       SchedItem @[0] {
	start_ctr=0;
	start_val=1;
	duration=50;
	step=-0.01;
       };
       SchedItem @[1] {
	start_ctr=50;
	start_val=0.5;
	duration=50;
	step=-0.006;
       };
       SchedItem @[2] {
	start_ctr=100;
	start_val=0.2;
	duration=50;
	step=-0.002;
       };
       SchedItem @[3] {
	start_ctr=150;
	start_val=0.1;
	duration=50;
	step=-0.001;
       };
       SchedItem @[4] {
	start_ctr=200;
	start_val=0.05;
	duration=50;
	step=-0.0006;
       };
       SchedItem @[5] {
	start_ctr=250;
	start_val=0.02;
	duration=50;
	step=-0.0002;
       };
       SchedItem @[6] {
	start_ctr=300;
	start_val=0.01;
	duration=1;
	step=1;
       };
      };
     };
    };
   };
   param_seqs {
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=98: y=74: z=3: };
    max_disp_size2d {x=98: y=76: };
    Layer_Group @.gp[0] {
     name="Image";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     max_disp_size {x=1: y=1: z=1: };
     max_disp_size2d {x=1: y=1: };
     LeabraLayer @[0] {
      name="Image";
      n_recv_prjns=0;
      n_send_prjns=0;
      un_geom_x=24;
      un_geom_y=24;
      un_geom_n=576;
      gp_geom_x=1;
      gp_geom_y=1;
      gp_geom_n=1;
      flat_geom_x=24;
      flat_geom_y=24;
      flat_geom_n=576;
      gp_spc_x=1;
      gp_spc_y=1;
      flags=LESIONED|ICONIFIED;
      layer_type=INPUT;
      desc=;
      pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=0: y=0: z=0: };
      pos_abs {x=0: y=0: z=0: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=0: y=0: };
      disp_scale=0.7;
      un_geom {x=24: y=24: n_not_xy=0: n=576: };
      unit_groups=0;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=24: y=24: n_not_xy=0: n=576: };
      disp_geom {x=24: y=24: n_not_xy=0: n=576: };
      scaled_disp_geom {x=17: y=17: n_not_xy=0: n=289: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[0][0]$$: };
      dist {fm_input=-1: fm_output=-1: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][4]$$: };
      adapt_gi=1;
      acts_m_avg=0;
      acts_p_avg=0;
      acts_p_avg_eff=1;
     };
    };
    Layer_Group @.gp[1] {
     name="V1fov";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     max_disp_size {x=98: y=49: z=1: };
     max_disp_size2d {x=98: y=49: };
     LeabraLayer @[0] {
      name="V1h_l";
      n_recv_prjns=0;
      n_send_prjns=1;
      un_geom_x=4;
      un_geom_y=2;
      un_geom_n=8;
      gp_geom_x=48;
      gp_geom_y=48;
      gp_geom_n=2304;
      flat_geom_x=192;
      flat_geom_y=96;
      flat_geom_n=18432;
      gp_spc_x=1;
      gp_spc_y=1;
      flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
      layer_type=INPUT;
      desc=;
      pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=0: y=0: z=0: };
      pos_abs {x=0: y=0: z=0: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=0: y=0: };
      disp_scale=0.2;
      un_geom {x=4: y=2: n_not_xy=0: n=8: };
      unit_groups=1;
      gp_geom {x=48: y=48: n_not_xy=0: n=2304: };
      gp_spc {x=1: y=1: };
      flat_geom {x=192: y=96: n_not_xy=0: n=18432: };
      disp_geom {x=239: y=143: n_not_xy=0: n=34560: };
      scaled_disp_geom {x=48: y=29: n_not_xy=0: n=1392: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_V2h";
	off=1;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[2][0]$$;
	spec {type=TiledGpRFPrjnSpec: spec=.networks[0].specs.gp[0][11].children[0]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[0][5].children[0].children[1]$$: };
	dir_fixed=0;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Ctxt_Fm_V1h_l";
	off=1;
	disp=1;
	notes=;
	from_type=SELF;
	from=.networks[0].layers.gp[1][0]$$;
	spec {type=GpTesselPrjnSpec: spec=.networks[0].specs.gp[0][7]$$: };
	con_type=LeabraCon;
	con_spec {type=DeepCtxtConSpec: spec=.networks[0].specs.gp[0][5].children[0].children[2]$$: };
	dir_fixed=0;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_List @. = [0] = LeabraPrjn .networks[0].layers.gp[1][0].projections[1];
       Projection_List @. = [1] = LeabraPrjn .networks[0].layers.gp[2][0].projections[0];
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0]$: };
      dist {fm_input=0: fm_output=4: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][3]$$: };
      adapt_gi=1;
      acts_m_avg=0.02947672;
      acts_p_avg=0.02947672;
      acts_p_avg_eff=0.02947672;
     };
     LeabraLayer @[1] {
      name="V1h_r";
      n_recv_prjns=0;
      n_send_prjns=1;
      un_geom_x=4;
      un_geom_y=2;
      un_geom_n=8;
      gp_geom_x=48;
      gp_geom_y=48;
      gp_geom_n=2304;
      flat_geom_x=192;
      flat_geom_y=96;
      flat_geom_n=18432;
      gp_spc_x=1;
      gp_spc_y=1;
      flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
      layer_type=INPUT;
      desc=;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[1][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=50: y=0: z=0: };
      pos_abs {x=50: y=0: z=0: };
      pos2d {x=50: y=0: };
      pos2d_abs {x=50: y=0: };
      disp_scale=0.2;
      un_geom {x=4: y=2: n_not_xy=0: n=8: };
      unit_groups=1;
      gp_geom {x=48: y=48: n_not_xy=0: n=2304: };
      gp_spc {x=1: y=1: };
      flat_geom {x=192: y=96: n_not_xy=0: n=18432: };
      disp_geom {x=239: y=143: n_not_xy=0: n=34560: };
      scaled_disp_geom {x=48: y=29: n_not_xy=0: n=1392: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_V2h";
	off=1;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][0]$;
	spec {type=TiledGpRFPrjnSpec: spec=$.networks[0].specs.gp[0][11].children[0]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][5].children[0].children[1]$: };
	dir_fixed=0;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Ctxt_Fm_V1h_r";
	off=1;
	disp=1;
	notes=;
	from_type=SELF;
	from=.networks[0].layers.gp[1][1]$$;
	spec {type=GpTesselPrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=DeepCtxtConSpec: spec=$.networks[0].specs.gp[0][5].children[0].children[2]$: };
	dir_fixed=0;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_List @. = [0] = LeabraPrjn .networks[0].layers.gp[1][1].projections[1];
       Projection_List @. = [1] = LeabraPrjn .networks[0].layers.gp[2][0].projections[1];
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0]$: };
      dist {fm_input=0: fm_output=4: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][3]$: };
      adapt_gi=1;
      acts_m_avg=0.02947672;
      acts_p_avg=0.02947672;
      acts_p_avg_eff=0.02947672;
     };
     LeabraLayer @[2] {
      name="V1m_l";
      n_recv_prjns=0;
      n_send_prjns=1;
      un_geom_x=4;
      un_geom_y=2;
      un_geom_n=8;
      gp_geom_x=24;
      gp_geom_y=24;
      gp_geom_n=576;
      flat_geom_x=96;
      flat_geom_y=48;
      flat_geom_n=4608;
      gp_spc_x=1;
      gp_spc_y=1;
      flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
      layer_type=INPUT;
      desc=;
      pos_rel {rel=BEHIND: other=$.networks[0].layers.gp[1][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=0: y=31: z=0: };
      pos_abs {x=0: y=31: z=0: };
      pos2d {x=0: y=31: };
      pos2d_abs {x=0: y=31: };
      disp_scale=0.25;
      un_geom {x=4: y=2: n_not_xy=0: n=8: };
      unit_groups=1;
      gp_geom {x=24: y=24: n_not_xy=0: n=576: };
      gp_spc {x=1: y=1: };
      flat_geom {x=96: y=48: n_not_xy=0: n=4608: };
      disp_geom {x=119: y=71: n_not_xy=0: n=8640: };
      scaled_disp_geom {x=30: y=18: n_not_xy=0: n=540: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_V2m";
	off=1;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[2][1]$$;
	spec {type=TiledGpRFPrjnSpec: spec=.networks[0].specs.gp[0][10].children[0]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][5].children[0].children[1]$: };
	dir_fixed=0;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Ctxt_Fm_V1m_l";
	off=1;
	disp=1;
	notes=;
	from_type=SELF;
	from=.networks[0].layers.gp[1][2]$$;
	spec {type=GpTesselPrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=DeepCtxtConSpec: spec=$.networks[0].specs.gp[0][5].children[0].children[2]$: };
	dir_fixed=0;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_List @. = [0] = LeabraPrjn .networks[0].layers.gp[1][2].projections[1];
       Projection_List @. = [1] = LeabraPrjn .networks[0].layers.gp[2][1].projections[0];
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0]$: };
      dist {fm_input=0: fm_output=4: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][3]$: };
      adapt_gi=1;
      acts_m_avg=0.04202886;
      acts_p_avg=0.04202886;
      acts_p_avg_eff=0.04202886;
     };
     LeabraLayer @[3] {
      name="V1m_r";
      n_recv_prjns=0;
      n_send_prjns=1;
      un_geom_x=4;
      un_geom_y=2;
      un_geom_n=8;
      gp_geom_x=24;
      gp_geom_y=24;
      gp_geom_n=576;
      flat_geom_x=96;
      flat_geom_y=48;
      flat_geom_n=4608;
      gp_spc_x=1;
      gp_spc_y=1;
      flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
      layer_type=INPUT;
      desc=;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[1][2]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=32: y=31: z=0: };
      pos_abs {x=32: y=31: z=0: };
      pos2d {x=32: y=31: };
      pos2d_abs {x=32: y=31: };
      disp_scale=0.25;
      un_geom {x=4: y=2: n_not_xy=0: n=8: };
      unit_groups=1;
      gp_geom {x=24: y=24: n_not_xy=0: n=576: };
      gp_spc {x=1: y=1: };
      flat_geom {x=96: y=48: n_not_xy=0: n=4608: };
      disp_geom {x=119: y=71: n_not_xy=0: n=8640: };
      scaled_disp_geom {x=30: y=18: n_not_xy=0: n=540: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_V2m";
	off=1;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][1]$;
	spec {type=TiledGpRFPrjnSpec: spec=$.networks[0].specs.gp[0][10].children[0]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][5].children[0].children[1]$: };
	dir_fixed=0;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Ctxt_Fm_V1m_r";
	off=1;
	disp=1;
	notes=;
	from_type=SELF;
	from=.networks[0].layers.gp[1][3]$$;
	spec {type=GpTesselPrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=DeepCtxtConSpec: spec=$.networks[0].specs.gp[0][5].children[0].children[2]$: };
	dir_fixed=0;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_List @. = [0] = LeabraPrjn .networks[0].layers.gp[1][3].projections[1];
       Projection_List @. = [1] = LeabraPrjn .networks[0].layers.gp[2][1].projections[1];
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0]$: };
      dist {fm_input=0: fm_output=4: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][3]$: };
      adapt_gi=1;
      acts_m_avg=0.04202886;
      acts_p_avg=0.04202886;
      acts_p_avg_eff=0.04202886;
     };
    };
    Layer_Group @.gp[2] {
     name="V2fov";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=1: };
     pos2d {x=0: y=2: };
     max_disp_size {x=50: y=74: z=1: };
     max_disp_size2d {x=50: y=74: };
     LeabraLayer @[0] {
      name="V2h";
      n_recv_prjns=5;
      n_send_prjns=5;
      un_geom_x=5;
      un_geom_y=5;
      un_geom_n=25;
      gp_geom_x=24;
      gp_geom_y=24;
      gp_geom_n=576;
      flat_geom_x=120;
      flat_geom_y=120;
      flat_geom_n=14400;
      gp_spc_x=1;
      gp_spc_y=1;
      flags=NO_ADD_SSE|NO_ADD_COMP_SSE;
      layer_type=HIDDEN;
      desc=;
      pos_rel {rel=ABOVE: other=$.networks[0].layers.gp[1][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=0: y=0: z=0: };
      pos_abs {x=0: y=0: z=1: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=0: y=2: };
      disp_scale=0.25;
      un_geom {x=5: y=5: n_not_xy=0: n=25: };
      unit_groups=1;
      gp_geom {x=24: y=24: n_not_xy=0: n=576: };
      gp_spc {x=1: y=1: };
      flat_geom {x=120: y=120: n_not_xy=0: n=14400: };
      disp_geom {x=143: y=143: n_not_xy=0: n=20736: };
      scaled_disp_geom {x=36: y=36: n_not_xy=0: n=1296: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_V1h_l";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][0]$;
	spec {type=TiledGpRFPrjnSpec: spec=.networks[0].specs.gp[0][11]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[0][5].children[0].children[0]$$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Fm_V1h_r";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][1]$;
	spec {type=TiledGpRFPrjnSpec: spec=$.networks[0].specs.gp[0][11]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][5].children[0].children[0]$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Ctxt_Fm_V2h";
	off=0;
	disp=1;
	notes=;
	from_type=SELF;
	from=$.networks[0].layers.gp[2][0]$;
	spec {type=GpTesselPrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=DeepCtxtConSpec: spec=.networks[0].specs.gp[0][5].children[0].children[3]$$: };
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Fm_V3";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[3][0]$$;
	spec {type=FullPrjnSpec: spec=.networks[0].specs[2]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[0][5].children[1].children[1]$$: };
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[4] {
	name="Fm_V4";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[4][0]$$;
	spec {type=TiledGpRFPrjnSpec: spec=.networks[0].specs.gp[1][9].children[0]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[1][2].children[2].children[2]$$: };
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_List @. = [0] = LeabraPrjn .networks[0].layers.gp[1][0].projections[0];
       Projection_List @. = [1] = LeabraPrjn .networks[0].layers.gp[1][1].projections[0];
       Projection_List @. = [2] = LeabraPrjn .networks[0].layers.gp[2][0].projections[2];
       Projection_List @. = [3] = LeabraPrjn .networks[0].layers.gp[2][3].projections[0];
       Projection_List @. = [4] = LeabraPrjn .networks[0].layers.gp[3][0].projections[2];
       Projection_List @. = [5] = LeabraPrjn .networks[0].layers.gp[3][0].projections[3];
       Projection_List @. = [6] = LeabraPrjn .networks[0].layers.gp[4][0].projections[1];
      };
      unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[0][1]$$: };
      dist {fm_input=1: fm_output=3: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][3].children[1]$$: };
      adapt_gi=1;
      acts_m_avg=0.04971777;
      acts_p_avg=0.04971563;
      acts_p_avg_eff=0.04971563;
     };
     LeabraLayer @[1] {
      name="V2m";
      n_recv_prjns=5;
      n_send_prjns=5;
      un_geom_x=5;
      un_geom_y=5;
      un_geom_n=25;
      gp_geom_x=12;
      gp_geom_y=12;
      gp_geom_n=144;
      flat_geom_x=60;
      flat_geom_y=60;
      flat_geom_n=3600;
      gp_spc_x=1;
      gp_spc_y=1;
      flags=NO_ADD_SSE|NO_ADD_COMP_SSE;
      layer_type=HIDDEN;
      desc=;
      pos_rel {rel=BEHIND: other=$.networks[0].layers.gp[2][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=0: y=38: z=0: };
      pos_abs {x=0: y=38: z=1: };
      pos2d {x=0: y=38: };
      pos2d_abs {x=0: y=40: };
      disp_scale=0.5;
      un_geom {x=5: y=5: n_not_xy=0: n=25: };
      unit_groups=1;
      gp_geom {x=12: y=12: n_not_xy=0: n=144: };
      gp_spc {x=1: y=1: };
      flat_geom {x=60: y=60: n_not_xy=0: n=3600: };
      disp_geom {x=71: y=71: n_not_xy=0: n=5184: };
      scaled_disp_geom {x=36: y=36: n_not_xy=0: n=1296: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_V1m_l";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][2]$;
	spec {type=TiledGpRFPrjnSpec: spec=.networks[0].specs.gp[0][10]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][5].children[0].children[0]$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Fm_V1m_r";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][3]$;
	spec {type=TiledGpRFPrjnSpec: spec=$.networks[0].specs.gp[0][10]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][5].children[0].children[0]$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Ctxt_Fm_V2m";
	off=0;
	disp=1;
	notes=;
	from_type=SELF;
	from=$.networks[0].layers.gp[2][1]$;
	spec {type=GpTesselPrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=DeepCtxtConSpec: spec=$.networks[0].specs.gp[0][5].children[0].children[3]$: };
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Fm_V3";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs[2]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][5].children[1].children[1]$: };
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[4] {
	name="Fm_V4";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][0]$;
	spec {type=TiledGpRFPrjnSpec: spec=.networks[0].specs.gp[1][7].children[0]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[1][2].children[2].children[2]$: };
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_List @. = [0] = LeabraPrjn .networks[0].layers.gp[1][2].projections[0];
       Projection_List @. = [1] = LeabraPrjn .networks[0].layers.gp[1][3].projections[0];
       Projection_List @. = [2] = LeabraPrjn .networks[0].layers.gp[2][1].projections[2];
       Projection_List @. = [3] = LeabraPrjn .networks[0].layers.gp[2][2].projections[0];
       Projection_List @. = [4] = LeabraPrjn .networks[0].layers.gp[3][0].projections[0];
       Projection_List @. = [5] = LeabraPrjn .networks[0].layers.gp[3][0].projections[1];
       Projection_List @. = [6] = LeabraPrjn .networks[0].layers.gp[4][0].projections[0];
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][1]$: };
      dist {fm_input=1: fm_output=3: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][3].children[0]$$: };
      adapt_gi=1;
      acts_m_avg=0.05809628;
      acts_p_avg=0.05809386;
      acts_p_avg_eff=0.05809386;
     };
     LeabraLayer @[2] {
      name="V2m_sum";
      n_recv_prjns=1;
      n_send_prjns=0;
      un_geom_x=1;
      un_geom_y=1;
      un_geom_n=1;
      gp_geom_x=12;
      gp_geom_y=12;
      gp_geom_n=144;
      flat_geom_x=12;
      flat_geom_y=12;
      flat_geom_n=144;
      gp_spc_x=0;
      gp_spc_y=0;
      flags=0;
      layer_type=HIDDEN;
      desc="summary of detailed V2 layer activation";
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[2][1]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=38: y=38: z=0: };
      pos_abs {x=38: y=38: z=1: };
      pos2d {x=38: y=38: };
      pos2d_abs {x=38: y=40: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      gp_geom {x=12: y=12: n_not_xy=0: n=144: };
      gp_spc {x=0: y=0: };
      flat_geom {x=12: y=12: n_not_xy=0: n=144: };
      disp_geom {x=12: y=12: n_not_xy=0: n=144: };
      scaled_disp_geom {x=12: y=12: n_not_xy=0: n=144: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_V2m";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][1]$;
	spec {type=GpOneToOnePrjnSpec: spec=.networks[0].specs.gp[0][19]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[0][5].children[0].children[5]$$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0]$: };
      dist {fm_input=2: fm_output=-1: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][3].children[3].children[0]$$: };
      adapt_gi=1;
      acts_m_avg=0.3323888;
      acts_p_avg=0.3324023;
      acts_p_avg_eff=0.3324023;
     };
     LeabraLayer @[3] {
      name="V2h_sum";
      n_recv_prjns=1;
      n_send_prjns=1;
      un_geom_x=1;
      un_geom_y=1;
      un_geom_n=1;
      gp_geom_x=24;
      gp_geom_y=24;
      gp_geom_n=576;
      flat_geom_x=24;
      flat_geom_y=24;
      flat_geom_n=576;
      gp_spc_x=0;
      gp_spc_y=0;
      flags=0;
      layer_type=HIDDEN;
      desc=;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[2][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=38: y=0: z=0: };
      pos_abs {x=38: y=0: z=1: };
      pos2d {x=38: y=0: };
      pos2d_abs {x=38: y=2: };
      disp_scale=0.5;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      gp_geom {x=24: y=24: n_not_xy=0: n=576: };
      gp_spc {x=0: y=0: };
      flat_geom {x=24: y=24: n_not_xy=0: n=576: };
      disp_geom {x=24: y=24: n_not_xy=0: n=576: };
      scaled_disp_geom {x=12: y=12: n_not_xy=0: n=144: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_V2h";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][0]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][19]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][5].children[0].children[5]$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_List @. = [0] = LeabraPrjn .networks[0].layers.gp[3][0].projections[5];
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0]$: };
      dist {fm_input=2: fm_output=4: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][3].children[3]$$: };
      adapt_gi=1;
      acts_m_avg=0.2771231;
      acts_p_avg=0.2771325;
      acts_p_avg_eff=0.2771325;
     };
    };
    Layer_Group @.gp[3] {
     name="V3fov";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=52: y=0: z=1: };
     pos2d {x=52: y=2: };
     max_disp_size {x=24: y=24: z=1: };
     max_disp_size2d {x=24: y=24: };
     LeabraLayer @[0] {
      name="V3";
      n_recv_prjns=6;
      n_send_prjns=4;
      un_geom_x=48;
      un_geom_y=48;
      un_geom_n=2304;
      gp_geom_x=1;
      gp_geom_y=1;
      gp_geom_n=1;
      flat_geom_x=48;
      flat_geom_y=48;
      flat_geom_n=2304;
      gp_spc_x=1;
      gp_spc_y=1;
      flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
      layer_type=HIDDEN;
      desc=;
      pos_rel {rel=RIGHT_OF: other=.networks[0].layers.gp[2][3]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=0: y=0: z=0: };
      pos_abs {x=52: y=0: z=1: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=52: y=2: };
      disp_scale=0.5;
      un_geom {x=48: y=48: n_not_xy=0: n=2304: };
      unit_groups=0;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=48: y=48: n_not_xy=0: n=2304: };
      disp_geom {x=48: y=48: n_not_xy=0: n=2304: };
      scaled_disp_geom {x=24: y=24: n_not_xy=0: n=576: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_V2m";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs[2]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[0][5].children[1].children[0]$$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Ctxt_Fm_V2m";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs[2]$: };
	con_type=LeabraCon;
	con_spec {type=DeepCtxtConSpec: spec=.networks[0].specs.gp[0][5].children[1].children[3]$$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_V2h";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs[2]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][5].children[1].children[0]$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Ctxt_Fm_V2h";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs[2]$: };
	con_type=LeabraCon;
	con_spec {type=DeepCtxtConSpec: spec=$.networks[0].specs.gp[0][5].children[1].children[3]$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[4] {
	name="Ctxt_Fm_V3";
	off=0;
	disp=1;
	notes=;
	from_type=SELF;
	from=$.networks[0].layers.gp[3][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs[2]$: };
	con_type=LeabraCon;
	con_spec {type=DeepCtxtConSpec: spec=$.networks[0].specs.gp[0][5].children[1].children[3]$: };
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[5] {
	name="Fm_V2h_sum";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][3]$;
	spec {type=TesselPrjnSpec: spec=.networks[0].specs.gp[0][20]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[0][5].children[1].children[4]$$: };
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_List @. = [0] = LeabraPrjn .networks[0].layers.gp[2][0].projections[3];
       Projection_List @. = [1] = LeabraPrjn .networks[0].layers.gp[2][1].projections[3];
       Projection_List @. = [2] = LeabraPrjn .networks[0].layers.gp[3][0].projections[4];
       Projection_List @. = [3] = LeabraPrjn .networks[0].layers.gp[4][0].projections[2];
      };
      unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[0][2]$$: };
      dist {fm_input=2: fm_output=3: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][3].children[2]$$: };
      adapt_gi=1;
      acts_m_avg=0.09267069;
      acts_p_avg=0.09266668;
      acts_p_avg_eff=0.09266668;
     };
    };
    Layer_Group @.gp[4] {
     name="V4";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=0: y=0: z=2: };
     pos2d {x=0: y=4: };
     max_disp_size {x=16: y=16: z=1: };
     max_disp_size2d {x=16: y=16: };
     LeabraLayer @[0] {
      name="V4";
      n_recv_prjns=4;
      n_send_prjns=3;
      un_geom_x=8;
      un_geom_y=8;
      un_geom_n=64;
      gp_geom_x=6;
      gp_geom_y=6;
      gp_geom_n=36;
      flat_geom_x=48;
      flat_geom_y=48;
      flat_geom_n=2304;
      gp_spc_x=1;
      gp_spc_y=1;
      flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
      layer_type=HIDDEN;
      desc=;
      pos_rel {rel=ABOVE: other=$.networks[0].layers.gp[2][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=0: y=0: z=0: };
      pos_abs {x=0: y=0: z=2: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=0: y=4: };
      disp_scale=0.3;
      un_geom {x=8: y=8: n_not_xy=0: n=64: };
      unit_groups=1;
      gp_geom {x=6: y=6: n_not_xy=0: n=36: };
      gp_spc {x=1: y=1: };
      flat_geom {x=48: y=48: n_not_xy=0: n=2304: };
      disp_geom {x=53: y=53: n_not_xy=0: n=2916: };
      scaled_disp_geom {x=16: y=16: n_not_xy=0: n=256: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_V2m";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][1]$;
	spec {type=TiledGpRFPrjnSpec: spec=.networks[0].specs.gp[1][7]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[1][2].children[2].children[0]$$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Fm_V2h";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][0]$;
	spec {type=TiledGpRFPrjnSpec: spec=.networks[0].specs.gp[1][9]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[1][2].children[2].children[0]$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_V3";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs[2]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[1][2].children[2].children[1]$$: };
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Fm_IT";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[5][0]$$;
	spec {type=FullPrjnSpec: spec=.networks[0].specs.gp[1][4]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[1][2].children[3].children[5]$$: };
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_List @. = [0] = LeabraPrjn .networks[0].layers.gp[2][0].projections[4];
       Projection_List @. = [1] = LeabraPrjn .networks[0].layers.gp[2][1].projections[4];
       Projection_List @. = [2] = LeabraPrjn .networks[0].layers.gp[5][0].projections[0];
      };
      unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[1][0].children[2]$$: };
      dist {fm_input=2: fm_output=2: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[1][1].children[0]$$: };
      adapt_gi=1;
      acts_m_avg=0.1643403;
      acts_p_avg=0.158355;
      acts_p_avg_eff=0.158355;
     };
    };
    Layer_Group @.gp[5] {
     name="IT";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=18: y=0: z=2: };
     pos2d {x=18: y=4: };
     max_disp_size {x=20: y=10: z=1: };
     max_disp_size2d {x=20: y=10: };
     LeabraLayer @[0] {
      name="IT";
      n_recv_prjns=2;
      n_send_prjns=2;
      un_geom_x=20;
      un_geom_y=10;
      un_geom_n=200;
      gp_geom_x=1;
      gp_geom_y=1;
      gp_geom_n=1;
      flat_geom_x=20;
      flat_geom_y=10;
      flat_geom_n=200;
      gp_spc_x=1;
      gp_spc_y=1;
      flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
      layer_type=HIDDEN;
      desc=;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[4][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=0: y=0: z=0: };
      pos_abs {x=18: y=0: z=2: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=18: y=4: };
      disp_scale=1;
      un_geom {x=20: y=10: n_not_xy=0: n=200: };
      unit_groups=0;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=20: y=10: n_not_xy=0: n=200: };
      disp_geom {x=20: y=10: n_not_xy=0: n=200: };
      scaled_disp_geom {x=20: y=10: n_not_xy=0: n=200: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_V4";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][4]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[1][2].children[3].children[0]$$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Fm_Output";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[6][0]$$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][4]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[1][2].children[3].children[7]$$: };
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_List @. = [0] = LeabraPrjn .networks[0].layers.gp[4][0].projections[3];
       Projection_List @. = [1] = LeabraPrjn .networks[0].layers.gp[6][0].projections[0];
      };
      unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[1][0].children[1]$$: };
      dist {fm_input=3: fm_output=1: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[1][1].children[1]$$: };
      adapt_gi=1;
      acts_m_avg=0.04929196;
      acts_p_avg=0.05221016;
      acts_p_avg_eff=0.05221016;
     };
    };
    Layer_Group @.gp[6] {
     name="Output";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=40: y=0: z=2: };
     pos2d {x=40: y=4: };
     max_disp_size {x=5: y=4: z=1: };
     max_disp_size2d {x=5: y=4: };
     LeabraLayer @[0] {
      name="Output";
      n_recv_prjns=1;
      n_send_prjns=1;
      un_geom_x=5;
      un_geom_y=4;
      un_geom_n=20;
      gp_geom_x=1;
      gp_geom_y=1;
      gp_geom_n=1;
      flat_geom_x=5;
      flat_geom_y=4;
      flat_geom_n=20;
      gp_spc_x=1;
      gp_spc_y=1;
      flags=SAVE_UNIT_NAMES|PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
      layer_type=TARGET;
      desc=;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[5][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=0: y=0: z=0: };
      pos_abs {x=40: y=0: z=2: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=40: y=4: };
      disp_scale=1;
      un_geom {x=5: y=4: n_not_xy=0: n=20: };
      unit_groups=0;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=5: y=4: n_not_xy=0: n=20: };
      disp_geom {x=5: y=4: n_not_xy=0: n=20: };
      scaled_disp_geom {x=5: y=4: n_not_xy=0: n=20: };
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_IT";
	off=0;
	disp=1;
	notes=;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[5][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][4]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[1][2].children[3].children[2]$$: };
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_List @. = [0] = LeabraPrjn .networks[0].layers.gp[5][0].projections[1];
      };
      unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[1][0].children[0]$$: };
      dist {fm_input=4: fm_output=0: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      unit_names {
       name="unit_names";
      [5 4] "banana";"car";"donut";"doorknob";"fish";"guitar";"layercake";"person";"piano";"trafficcone";
;;;;;;;;;;
      };
      brain_area=;
      voxel_fill_pct=1;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[1][1].children[4]$$: };
      adapt_gi=1;
      acts_m_avg=0.01136563;
      acts_p_avg=0.03442388;
      acts_p_avg_eff=0.03442388;
     };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   auto_build=NO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   cuda {sync_units=0: sync_cons=0: min_threads=32: max_threads=1024: cons_per_thread=2: timers_on=1: n_threads=32: };
   wt_save_fmt=TEXT;
   max_disp_size {x=98: y=74: z=3: };
   max_disp_size2d {x=98: y=76: };
   times {quarter=25: deep_cyc=5: time_inc=0.001: wt_bal_int=10: minus=75: plus=25: total_cycles=100: thal_gate_cycle=-2: };
   lstats {trg_max_act_crit=0.5: off_errs=1: on_errs=1: agg_unlearnable=0: wt_bal=0: };
   net_misc {spike=0: deep=0: bias_learn=1: trial_decay=1: diff_scale_p=0: diff_scale_q1=0: wt_bal=1: lay_gp_inhib=0: inhib_cons=0: };
   deep {on=0: ctxt=0: raw_net=0: mod_net=0: raw_qtr=0: };
   rel_netin {on=1: trl_skip=10: epc_skip=10: };
  };
 };
};

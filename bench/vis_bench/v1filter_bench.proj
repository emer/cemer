// ta_Dump File v3.0 -- code v7.8.1.0 rev8293
LeabraProject .projects["v1filter_bench"] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
    UserDataItem @["user_pinned"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @["NetControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [2] {
    EditMbrItem @[0] { };
    EditMbrItem @[1] { };
   };

   EditMthItem_Group @.mths = [1] {
    EditMthItem @[0] { };
   };
  };
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [27] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["notes"] { };
    String_Data @["params"] { };
    String_Data @["status"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataTableCols @.jobs_done.data = [27] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["notes"] { };
    String_Data @["params"] { };
    String_Data @["status"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataTableCols @.jobs_archive.data = [27] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["notes"] { };
    String_Data @["params"] { };
    String_Data @["status"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] { 
  };
  DataTable_Group @.gp["OutputData"] { 
  };
  DataTable_Group @.gp["AnalysisData"] = [4] { 
   DataTable @["V1_high_GridFilter"] { 
    UserDataItem_List @*(.user_data_) {
     UserDataItem @["N_ROWS"] { };
     UserDataItem @["SCALE_MIN"] { };
     UserDataItem @["SCALE_MAX"] { };
     UserDataItem @["BLOCK_HEIGHT"] { };
    };

    DataTableCols @.data = [2] {
     String_Data @["Name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Filter"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["V1_high_V1_PlotSpacing"] { 
    UserDataItem_List @*(.user_data_) {
     UserDataItem @["N_ROWS"] { };
     UserDataItem @["BLOCK_HEIGHT"] { };
     UserDataItem @["WIDTH"] { };
     UserDataItem @["BLOCK_SPACE"] { };
    };

    DataTableCols @.data = [2] {
     String_Data @["Name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["WIDTH"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Spacing"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["V1_high_GridV1Stencils"] { 
    UserDataItem_List @*(.user_data_) {
     UserDataItem @["N_ROWS"] { };
     UserDataItem @["BLOCK_HEIGHT"] { };
     UserDataItem @["BLOCK_SPACE"] { };
    };

    DataTableCols @.data = [2] {
     String_Data @["Name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["WIDTH"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Stencil"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
   DataTable @["V1_high_Gabor_GridFilter"] { 
    UserDataItem_List @*(.user_data_) {
     UserDataItem @["N_ROWS"] { };
     UserDataItem @["SCALE_MIN"] { };
     UserDataItem @["SCALE_MAX"] { };
     UserDataItem @["BLOCK_HEIGHT"] { };
    };

    DataTableCols @.data = [2] {
     String_Data @["Name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["WIDTH"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Filter"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };
   };
  };
 };

 Program_TopGroup @.programs = [3] {
  Program @["TestStartup"] { 
   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [1] {
    ProgVar @["n_iters"] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [2] {
    IfReturn @[0] { };
    ProgramCall @[1] { 
     ProgArg_List @.prog_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Program @["VisBench"] { 
   ProgObjList @.objs = [3] {
    V1RetinaProc @["V1RetinaProc_0"] { 
     VisRegionSpecBaseList @.regions = [1] {
      V1RegionSpec @["V1_high"] { };
     };
    };
    DataTable @["V1DataSave2D"] { 
     DataTableCols @.data = [5] {
      float_Data @["V1_high_image_r"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["IMAGE"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["V1_high_v1s_r"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["V1_high_v1pi_r"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["V1_high_v1c"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
      float_Data @["V1_high_v1sg_out"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["view_panel_wd"] { };
       };
      };
     };
    };
    TimeUsedHR @["VisTimer"] { };
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @["n_iters"] { };
   };

   ProgVar_List @.vars = [5] {
    ProgVar @["full_xform"] { };
    ProgVar @["V1DataSave2D"] { };
    ProgVar @["V1RetinaProc_0"] { };
    ProgVar @["Canvas"] { };
    ProgVar @["VisTimer"] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [2] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };

   ProgEl_List @.prog_code = [6] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [1] {
      ProgVar @["i"] { };
     };
    };
    ProgramCall @[1] { 
     ProgArg_List @.prog_args = [0] {
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      ForLoop @[1] { 
       ProgEl_List @.loop_code = [2] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [6] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	  ProgArg @[3] { };
	  ProgArg @[4] { };
	  ProgArg @[5] { };
	 };
	};
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
    Else @[3] { 
     ProgEl_List @.else_code = [3] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [6] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      ForLoop @[2] { 
       ProgEl_List @.loop_code = [1] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    PrintExpr @[5] { };
   };
  };
  Program @["VisStimGen"] { 
   ProgObjList @.objs = [2] {
    taCanvas @["Canvas"] { };
    DataTable @["StimGenData"] { 
     DataTableCols @.data = [1] {
      float_Data @["Canvas"] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @["IMAGE"] { };
	UserDataItem @["view_panel_wd"] { };
       };
      };
     };
    };
   };

   ProgType_List @.types = [2] {
    DynEnumType @["Shape"] { 
     DynEnumItem_List @.enums = [4] {
      DynEnumItem @["LINE"] { };
      DynEnumItem @["TEE"] { };
      DynEnumItem @["PLUS"] { };
      DynEnumItem @["CIRCLE"] { };
     };
    };
    DynEnumType @["DisplayType"] { 
     DynEnumItem_List @.enums = [2] {
      DynEnumItem @["COLOR"] { };
      DynEnumItem @["ORIENTATION"] { };
     };
    };
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [33] {
    ProgVar @["canvas_width"] { };
    ProgVar @["canvas_height"] { };
    ProgVar @["Canvas"] { };
    ProgVar @["StimGenData"] { };
    ProgVar @["disp_type"] { };
    ProgVar @["disp_size"] { };
    ProgVar @["bg_color"] { };
    ProgVar @["non_targ_color"] { };
    ProgVar @["targ_color"] { };
    ProgVar @["trg_shape"] { };
    ProgVar @["non_trg_shape"] { };
    ProgVar @["cur_shape"] { };
    ProgVar @["trg_ctr"] { };
    ProgVar @["line_len"] { };
    ProgVar @["line_width"] { };
    ProgVar @["spacing"] { };
    ProgVar @["bg_line_angle"] { };
    ProgVar @["fg_line_angle"] { };
    ProgVar @["orientation_jitter"] { };
    ProgVar @["total_size"] { };
    ProgVar @["start_coord"] { };
    ProgVar @["incr"] { };
    ProgVar @["cur_x"] { };
    ProgVar @["cur_y"] { };
    ProgVar @["y"] { };
    ProgVar @["x"] { };
    ProgVar @["trg_idx"] { };
    ProgVar @["trg_x"] { };
    ProgVar @["trg_y"] { };
    ProgVar @["idx"] { };
    ProgVar @["cur_angle"] { };
    ProgVar @["cur_jitter"] { };
    ProgVar @["cur_color"] { };
   };

   Function_List @.functions = [2] {
    Function @["DrawLine"] { 
     ProgVar_List @.args = [4] {
      ProgVar @["ctr_x"] { };
      ProgVar @["ctr_y"] { };
      ProgVar @["Myangle"] { };
      ProgVar @["color"] { };
     };

     ProgEl_List @.fun_code = [11] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [4] {
	ProgVar @["st_x"] { };
	ProgVar @["st_y"] { };
	ProgVar @["ed_x"] { };
	ProgVar @["ed_y"] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MathCall @[2] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MathCall @[3] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MathCall @[4] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MathCall @[5] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      AssignExpr @[6] { };
      AssignExpr @[7] { };
      AssignExpr @[8] { };
      AssignExpr @[9] { };
      MethodCall @[10] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
     };
    };
    Function @["DrawShape"] { 
     ProgVar_List @.args = [5] {
      ProgVar @["Myshape"] { };
      ProgVar @["ctr_x"] { };
      ProgVar @["ctr_y"] { };
      ProgVar @["Myangle"] { };
      ProgVar @["color"] { };
     };

     ProgEl_List @.fun_code = [5] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [5] {
	ProgVar @["st_x"] { };
	ProgVar @["st_y"] { };
	ProgVar @["ed_x"] { };
	ProgVar @["ed_y"] { };
	ProgVar @["other_color"] { };
       };
      };
      MathCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MathCall @[2] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      AssignExpr @[3] { };
      Switch @[4] { 
       ProgEl_List @.cases = [4] {
	CaseBlock @[0] { 
	 ProgEl_List @.prog_code = [1] {
	  FunctionCall @[0] { 
	   ProgArg_List @.fun_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[1] { 
	 ProgEl_List @.prog_code = [2] {
	  FunctionCall @[0] { 
	   ProgArg_List @.fun_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	  FunctionCall @[1] { 
	   ProgArg_List @.fun_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[2] { 
	 ProgEl_List @.prog_code = [2] {
	  FunctionCall @[0] { 
	   ProgArg_List @.fun_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	  FunctionCall @[1] { 
	   ProgArg_List @.fun_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[3] { 
	 ProgEl_List @.prog_code = [0] {
	 };
	};
       };
      };
     };
    };
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [18] {
    ResetDataRows @[0] { };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    AddNewDataRow @[3] { };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[6] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    AssignExpr @[7] { };
    AssignExpr @[8] { };
    AssignExpr @[9] { };
    RandomCall @[10] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    RandomCall @[11] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    AssignExpr @[12] { };
    If @[13] { 
     ProgEl_List @.true_code = [1] {
      AssignExpr @[0] { };
     };
    };
    ForLoop @[14] { 
     ProgEl_List @.loop_code = [2] {
      AssignExpr @[0] { };
      ForLoop @[1] { 
       ProgEl_List @.loop_code = [7] {
	AssignExpr @[0] { };
	AssignExpr @[1] { };
	AssignExpr @[2] { };
	AssignExpr @[3] { };
	RandomCall @[4] { 
	 ProgArg_List @.meth_args = [3] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	 };
	};
	If @[5] { 
	 ProgEl_List @.true_code = [3] {
	  If @[0] { 
	   ProgEl_List @.true_code = [1] {
	    AssignExpr @[0] { };
	   };
	  };
	  Else @[1] { 
	   ProgEl_List @.else_code = [1] {
	    AssignExpr @[0] { };
	   };
	  };
	  AssignExpr @[2] { };
	 };
	};
	FunctionCall @[6] { 
	 ProgArg_List @.fun_args = [5] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	  ProgArg @[3] { };
	  ProgArg @[4] { };
	 };
	};
       };
      };
     };
    };
    Comment @[15] { };
    MethodCall @[16] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    DoneWritingDataRow @[17] { };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser2"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["Visualizer"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_frame_selected"] { };
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [4] {
      T3Panel @["StimGenData"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["StimGenData_Grid"] { 
	 T3DataView_List @.children = [1] {
	  GridColView @["Canvas"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["V1DataSave2D"] { 
       T3DataView_List @.root_view.children = [4] {
	GridTableView @["V1DataSave2D_Grid"] { 
	 T3DataView_List @.children = [5] {
	  GridColView @["V1_high_image_r"] { };
	  GridColView @["V1_high_v1s_r"] { };
	  GridColView @["V1_high_v1pi_r"] { };
	  GridColView @["V1_high_v1c"] { };
	  GridColView @["V1_high_v1sg_out"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
	GridTableView @["V1DataSave2D_Grid_1"] { 
	 T3DataView_List @.children = [5] {
	  GridColView @["V1_high_image_r"] { };
	  GridColView @["V1_high_v1s_r"] { };
	  GridColView @["V1_high_v1pi_r"] { };
	  GridColView @["V1_high_v1c"] { };
	  GridColView @["V1_high_v1sg_out"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
	GridTableView @["V1DataSave2D_Grid_2"] { 
	 T3DataView_List @.children = [5] {
	  GridColView @["V1_high_image_r"] { };
	  GridColView @["V1_high_v1s_r"] { };
	  GridColView @["V1_high_v1pi_r"] { };
	  GridColView @["V1_high_v1c"] { };
	  GridColView @["V1_high_v1sg_out"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
	GridTableView @["V1DataSave2D_Grid_3"] { 
	 T3DataView_List @.children = [5] {
	  GridColView @["V1_high_image_r"] { };
	  GridColView @["V1_high_v1s_r"] { };
	  GridColView @["V1_high_v1pi_r"] { };
	  GridColView @["V1_high_v1c"] { };
	  GridColView @["V1_high_v1sg_out"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["V1_high_GridV1Stencils"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["V1_high_GridV1Stencils_Grid"] { 
	 T3DataView_List @.children = [2] {
	  GridColView @["Name"] { };
	  GridColView @["Stencil"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Zoom"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["V1_high_Gabor_GridFilter"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["GridTableView_6"] { 
	 T3DataView_List @.children = [2] {
	  GridColView @["Name"] { };
	  GridColView @["Filter"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [0] {
 };
};
LeabraProject .projects["v1filter_bench"] {
 name="v1filter_bench";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 author=;
 email=;
 license {
  owner="Regents of the University of Colorado";
  license=GPLv2;
  org="CCNLab at University of Colorado Boulder";
  year="2010";
  custom=;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_0"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ControlPanel @["NetControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="NetControlPanel";
   running_updt=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="VisStimGen_bg_line_angle";
     desc="angle of background lines";
     cust_desc=1;
     base=.projects["v1filter_bench"].programs["VisStimGen"].vars["bg_line_angle"]$$;
     mbr=ProgVar::real_val;
     is_numeric=1;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
    EditMbrItem @[1] {
     label="VisStimGen_line_width";
     desc=" real value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["v1filter_bench"].programs["VisStimGen"].vars["line_width"]$$;
     mbr=ProgVar::real_val;
     is_numeric=1;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="VisTest2D_Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=.projects["v1filter_bench"].programs["VisBench"]$$;
     mth=Program::Run_Gui;
    };
   };
  };
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=0;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   running_updt=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    name="jobs_running";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
   };
   jobs_done {
    name="jobs_done";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
   };
   jobs_archive {
    name="jobs_archive";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
   };
   file_list {
    name="file_list";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_name"] {
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["size"] {
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["kind"] {
      name="kind";
      desc="type of file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_modified"] {
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_created"] {
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["svn_file_path"] {
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["proj_file_path"] {
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_path"] {
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
   };
   cluster_info {
    name="cluster_info";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["state"] {
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["procs"] {
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   extra_files=;
   svn_repo=;
   repo_url=;
   cluster=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=1;
   use_mpi=0;
   mpi_nodes=10;
   parallel_batch=0;
   pb_batches=10;
   pb_nodes=0;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 param_sets {
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["OutputData"] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["AnalysisData"] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["V1_high_GridFilter"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserDataItem;
     el_def=0;
     UserDataItem @["N_ROWS"] {
      name="N_ROWS";
      value 2 0=3;
      val_type_fixed=0;
     };
     UserDataItem @["SCALE_MIN"] {
      name="SCALE_MIN";
      value 6 0=-0.1592195481061935;
      val_type_fixed=0;
     };
     UserDataItem @["SCALE_MAX"] {
      name="SCALE_MAX";
      value 6 0=0.1592195481061935;
      val_type_fixed=0;
     };
     UserDataItem @["BLOCK_HEIGHT"] {
      name="BLOCK_HEIGHT";
      value 6 0=0;
      val_type_fixed=0;
     };
    };
    name="V1_high_GridFilter";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_81";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1851851791143417;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [3] "On";"Off";"Net";      };
     };
     float_Data @["Filter"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_82";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1851851791143417;
	val_type_fixed=0;
       };
      };
      name="Filter";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 9;9;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [9 9 3] 0;0;0;0;5.3412205e-05;0;0;0;0;0;
0;0.00023937688;0.0010728128;0.0017687693;0.0010728128;0.00023937688;0;0;0;0.00023937688;
0.0029162085;0.013069536;0.021548022;0.013069536;0.0029162085;0.00023937688;0;0;0.0010728128;0.013069536;
0.0585736;0.096571535;0.0585736;0.013069536;0.0010728128;0;5.3412205e-05;0.0017687693;0.021548022;0.096571535;
0.15921955;0.096571535;0.021548022;0.0017687693;5.3412205e-05;0;0.0010728128;0.013069536;0.0585736;0.096571535;
0.0585736;0.013069536;0.0010728128;0;0;0.00023937688;0.0029162085;0.013069536;0.021548022;0.013069536;
0.0029162085;0.00023937688;0;0;0;0.00023937688;0.0010728128;0.0017687693;0.0010728128;0.00023937688;
0;0;0;0;0;0;5.3412205e-05;0;0;0;
0;0;0;0;0;0.0062852483;0;0;0;0;
0;0;0.0091449823;0.013305871;0.015077528;0.013305871;0.0091449823;0;0;0;
0.0091449823;0.017085077;0.024858641;0.028168529;0.024858641;0.017085077;0.0091449823;0;0;0.013305871;
0.024858641;0.036169108;0.040984966;0.036169108;0.024858641;0.013305871;0;0.0062852483;0.015077528;0.028168529;
0.040984966;0.046442054;0.040984966;0.028168529;0.015077528;0.0062852483;0;0.013305871;0.024858641;0.036169108;
0.040984966;0.036169108;0.024858641;0.013305871;0;0;0.0091449823;0.017085077;0.024858641;0.028168529;
0.024858641;0.017085077;0.0091449823;0;0;0;0.0091449823;0.013305871;0.015077528;0.013305871;
0.0091449823;0;0;0;0;0;0;0.0062852483;0;0;
0;0;0;0;0;0;-0.006231836;0;0;0;
0;0;0;-0.0089056054;-0.012233058;-0.013308758;-0.012233058;-0.0089056054;0;0;
0;-0.0089056054;-0.014168869;-0.011789105;-0.0066205077;-0.011789105;-0.014168869;-0.0089056054;0;0;
-0.012233058;-0.011789105;0.022404492;0.055586569;0.022404492;-0.011789105;-0.012233058;0;-0.006231836;-0.013308758;
-0.0066205077;0.055586569;0.11277749;0.055586569;-0.0066205077;-0.013308758;-0.006231836;0;-0.012233058;-0.011789105;
0.022404492;0.055586569;0.022404492;-0.011789105;-0.012233058;0;0;-0.0089056054;-0.014168869;-0.011789105;
-0.0066205077;-0.011789105;-0.014168869;-0.0089056054;0;0;0;-0.0089056054;-0.012233058;-0.013308758;
-0.012233058;-0.0089056054;0;0;0;0;0;0;-0.006231836;0;
0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [3] 0;1;2;    };
   };
   DataTable @["V1_high_V1_PlotSpacing"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserDataItem;
     el_def=0;
     UserDataItem @["N_ROWS"] {
      name="N_ROWS";
      value 2 0=1;
      val_type_fixed=0;
     };
     UserDataItem @["BLOCK_HEIGHT"] {
      name="BLOCK_HEIGHT";
      value 6 0=0;
      val_type_fixed=0;
     };
     UserDataItem @["WIDTH"] {
      name="WIDTH";
      value 6 0=1.5;
      val_type_fixed=0;
     };
     UserDataItem @["BLOCK_SPACE"] {
      name="BLOCK_SPACE";
      value 6 0=20;
      val_type_fixed=0;
     };
    };
    name="V1_high_V1_PlotSpacing";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["WIDTH"] {
	name="WIDTH";
	value 2 0=8;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1851851791143417;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [3] "DoG";"V1_Simple";"V1_Complex";      };
     };
     float_Data @["Spacing"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_83";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1851851791143417;
	val_type_fixed=0;
       };
      };
      name="Spacing";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 144;144;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [144 144 3] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
0;0.2;0;0;0;0;0.2;0;0;0.2;
0;0;0;0;0.2;0;0;0.2;0;0;
0;0;0.2;0;0;0.2;0;0;0;0;
0.2;0;0;0.2;0;0;0;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0;1;0.2;0;0;1;0;
0.2;0;1;0.2;0;0;1;0;0.2;0;
1;0.2;0;0;1;0;0.2;0;1;0.2;
0;0;1;0;0.2;0;1;0.2;0;0;
1;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0.2;0.2;0.2;0.2;
0;0;0;0;0.2;0.2;0.2;0.2;0;0;
0;0;0.2;0.2;0.2;0.2;0;0;0;0;
0.2;0.2;0.2;0.2;0;0;0;0;0.2;0.2;
0.2;0.2;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0.2;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0.2;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0.2;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0.2;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0.2;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0.2;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0.2;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0.2;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0.2;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0.2;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0.2;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0.2;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0.2;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0.2;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0.2;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0.2;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0.2;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0.2;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0.2;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0.2;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0.2;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0.2;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0.2;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0.2;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0.2;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0.2;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0.2;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0.2;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0.2;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0.2;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0.2;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0.2;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0.2;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0.2;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0.2;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0.2;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0.2;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;1;0;0;0;0.2;0;
0;0;0.2;0;0;0;1;0;0;0;
0.2;0;0;0;0.2;0;0;0;1;0;
0;0;0.2;0;0;0;0.2;0;0;0;
1;0;0;0;0.2;0;0;0;0.2;0;
0;0;1;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.2;0;0;0;0.2;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.2;0;
0;0;0.2;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.2;0;0;0;0.2;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.2;0;0;0;
0.2;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.2;0;0;0;0.2;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [3] 0;1;2;    };
   };
   DataTable @["V1_high_GridV1Stencils"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserDataItem;
     el_def=0;
     UserDataItem @["N_ROWS"] {
      name="N_ROWS";
      value 2 0=4;
      val_type_fixed=0;
     };
     UserDataItem @["BLOCK_HEIGHT"] {
      name="BLOCK_HEIGHT";
      value 6 0=0;
      val_type_fixed=0;
     };
     UserDataItem @["BLOCK_SPACE"] {
      name="BLOCK_SPACE";
      value 6 0=4;
      val_type_fixed=0;
     };
    };
    name="V1_high_GridV1Stencils";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_20";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["WIDTH"] {
	name="WIDTH";
	value 2 0=24;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1851851791143417;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [16] "V1C PreGp 4x4 Ctrs: 0";"V1C PreGp 4x4 Ctrs: 45";"V1C PreGp 4x4 Ctrs: 90";"V1C PreGp 4x4 Ctrs: 135";"V1C Len Sum Ang: 0";"V1C Len Sum Ang: 45";"V1C Len Sum Ang: 90";"V1C Len Sum Ang: 135";"V1C End Stop Ang: 0 Dir: 0";"V1C End Stop Ang: 0 Dir: 1";
"V1C End Stop Ang: 45 Dir: 0";"V1C End Stop Ang: 45 Dir: 1";"V1C End Stop Ang: 90 Dir: 0";"V1C End Stop Ang: 90 Dir: 1";"V1C End Stop Ang: 135 Dir: 0";"V1C End Stop Ang: 135 Dir: 1";      };
     };
     float_Data @["Stencil"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_84";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1851851791143417;
	val_type_fixed=0;
       };
      };
      name="Stencil";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 16;16;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [16 16 16] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;-0.5;-0.5;
-0.5;-0.5;-0.5;-0.5;0;0;0;0;0;0;
0;0;0;0;-0.5;0;1;1;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
-0.5;0;-1;-1;0;-0.5;0;0;0;0;
0;0;0;0;0;0;-0.5;0;1;1;
0;-0.5;0;0;0;0;0;0;0;0;
0;0;-0.5;0;-1;-1;0;-0.5;0;0;
0;0;0;0;0;0;0;0;-0.5;-0.5;
-0.5;-0.5;-0.5;-0.5;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;
0;0;0;0;0;0;0;0;0;0;
-0.5;0;0;1;0;-0.5;0;0;0;0;
0;0;0;0;0;0;-0.5;0;1;-1;
-1;-0.5;0;0;0;0;0;0;0;0;
0;0;-0.5;1;-1;-1;1;-0.5;0;0;
0;0;0;0;0;0;0;0;-0.5;0;
-1;1;0;-0.5;0;0;0;0;0;0;
0;0;0;0;-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;0;0;0;0;
0;0;0;0;0;0;-0.5;0;0;0;
0;-0.5;0;0;0;0;0;0;0;0;
0;0;-0.5;1;-1;1;-1;-0.5;0;0;
0;0;0;0;0;0;0;0;-0.5;1;
-1;1;-1;-0.5;0;0;0;0;0;0;
0;0;0;0;-0.5;0;0;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;-0.5;-0.5;-0.5;-0.5;
-0.5;-0.5;0;0;0;0;0;0;0;0;
0;0;-0.5;0;-1;0;0;-0.5;0;0;
0;0;0;0;0;0;0;0;-0.5;1;
1;-1;0;-0.5;0;0;0;0;0;0;
0;0;0;0;-0.5;-1;1;1;-1;-0.5;
0;0;0;0;0;0;0;0;0;0;
-0.5;0;-1;1;0;-0.5;0;0;0;0;
0;0;0;0;0;0;-0.5;-0.5;-0.5;-0.5;
-0.5;-0.5;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;-1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0.5;-1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;-1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;-1;0.5;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.5;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;-1;-1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;-1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-1;0.5;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.5;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;-1;-1;-1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;-1;-1;-1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.5;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;-1;0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;-1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;-1;
-1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.5;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [16] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;    };
   };
   DataTable @["V1_high_Gabor_GridFilter"] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserDataItem;
     el_def=0;
     UserDataItem @["N_ROWS"] {
      name="N_ROWS";
      value 2 0=4;
      val_type_fixed=0;
     };
     UserDataItem @["SCALE_MIN"] {
      name="SCALE_MIN";
      value 6 0=-0.1584121733903885;
      val_type_fixed=0;
     };
     UserDataItem @["SCALE_MAX"] {
      name="SCALE_MAX";
      value 6 0=0.1584121733903885;
      val_type_fixed=0;
     };
     UserDataItem @["BLOCK_HEIGHT"] {
      name="BLOCK_HEIGHT";
      value 6 0=0;
      val_type_fixed=0;
     };
    };
    name="V1_high_Gabor_GridFilter";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     String_Data @["Name"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["WIDTH"] {
	name="WIDTH";
	value 2 0=10;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1851851791143417;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [4] "Angle: 0";"Angle: 45";"Angle: 90";"Angle: 135";      };
     };
     float_Data @["Filter"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_85";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1851851791143417;
	val_type_fixed=0;
       };
      };
      name="Filter";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;6;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [6 6 4] 0;-0.010219083;-0.013914045;-0.013914045;-0.010219083;0;-0.04421255;-0.081965022;-0.11160151;-0.11160151;
-0.081965022;-0.04421255;-0.044269949;-0.082071424;-0.11174638;-0.11174638;-0.082071424;-0.044269949;0.044269953;0.082071431;
0.11174639;0.11174639;0.082071431;0.044269953;0.044212554;0.081965037;0.11160152;0.11160152;0.081965037;0.044212554;
0;0.010219084;0.013914047;0.013914047;0.010219084;0;0;-0.046091687;-0.069369979;-0.034216233;
-0.0028732102;0;0.046091687;0;-0.11634482;-0.12860401;-0.046587955;-0.0028732102;0.069369979;0.11634482;
0;-0.15841217;-0.12860401;-0.034216233;0.034216233;0.12860401;0.15841217;0;-0.11634482;-0.069369979;
0.0028732102;0.046587955;0.12860401;0.11634482;0;-0.046091687;0;0.0028732102;0.034216233;0.069369979;
0.046091687;0;0;0.04421255;0.044269953;-0.044269942;-0.044212561;0;0.010219083;0.081965014;
0.082071431;-0.082071424;-0.081965029;-0.010219079;0.013914045;0.11160151;0.11174638;-0.11174637;-0.11160151;-0.013914045;
0.013914045;0.11160151;0.11174637;-0.11174638;-0.11160151;-0.013914045;0.010219079;0.081965029;0.082071424;-0.082071431;
-0.081965014;-0.010219083;0;0.044212561;0.044269942;-0.044269953;-0.04421255;0;0;0.0028732102;
0.034216233;0.069369979;0.046091687;0;0.0028732102;0.046587955;0.12860401;0.11634482;0;-0.046091687;
0.034216233;0.12860401;0.15841217;0;-0.11634482;-0.069369979;0.069369979;0.11634482;0;-0.15841217;
-0.12860401;-0.034216233;0.046091687;0;-0.11634482;-0.12860401;-0.046587955;-0.0028732102;0;-0.046091687;
-0.069369979;-0.034216233;-0.0028732102;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [4] 0;1;2;3;    };
   };
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  Program @["TestStartup"] {
   name="TestStartup";
   short_nm="TsStrt";
   tags=;
   desc=;
   flags=STARTUP_RUN;
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["n_iters"] {
     name="n_iters";
     var_type=T_Int;
     int_val=100;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    IfReturn @[0] {
     desc=;
     flags=OFF;
     orig_prog_code=;
     cond {
      expr="!taMisc::gui_active";
     };
    };
    ProgramCall @[1] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="n_iters";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="100";
       };
      };
     };
     target=$.projects["v1filter_bench"].programs["VisBench"]$;
     targ_ld_init="*VisBench*";
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @["VisBench"] {
   name="VisBench";
   short_nm="VBnch";
   tags=;
   desc="Test of the vision filters";
   flags=0;
   objs {
    name="objs";
    el_typ=RetinaProc;
    el_def=0;
    V1RetinaProc @["V1RetinaProc_0"] {
     name="V1RetinaProc_0";
     edge_mode=WRAP;
     fade_width=-1;
     regions {
      name="regions";
      el_typ=V1RegionSpec;
      el_def=0;
      V1RegionSpec @["V1_high"] {
       name="V1_high";
       threads {
	run_time {name="TimeUsedHR_3": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
	sync_time {name="TimeUsedHR_4": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
	total_time {name="TimeUsedHR_5": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
	n_wake_in_sync=0;
	run_time_pct=0;
	sync_time_pct=0;
	wake_in_sync_pct=5.262549999998086e-312;
       };
       data_table=.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"]$$;
       save_mode=FIRST_ROW;
       image_save=SAVE_DATA;
       region {ocularity=MONOCULAR: region=FOVEA: res=HI_RES: color=MONOCHROME: edge_mode=WRAP: renorm_thr=1e-5: };
       input_size {retina_size={x=512: y=512: }: border={x=0: y=0: }: input_size={x=512: y=512: }: };
       input_adapt {on=0: up_dt=0.3: dn_dt=0.1: };
       motion_frames=0;
       v1s_specs {gain=2: n_angles=4: filter_size=12: spacing=2: wvlen=12: gauss_sig_len=0.3: gauss_sig_wd=0.2: phase_off=0: circle_edge=1: };
       v1s_renorm=NO_RENORM;
       v1s_kwta {mode=FFFB: gp_k=1: gi=2: lay_gi=1.5: gp_g=0.02: kwta_pt=0.5: gain=40: nvar=0.01: g_bar_l=0.1: };
       v1s_neigh_inhib {on=1: inhib_d=1: inhib_g=0.6: tot_ni_len=3: };
       v1s_adapt {on=0: up_dt=0.3: dn_dt=0.1: };
       v1s_save=SAVE_DATA;
       v1s_img_geom {x=256: y=256: n_not_xy=0: n=65536: };
       v1s_feat_geom {x=4: y=2: n_not_xy=0: n=8: };
       v1s_motion {r_only=1: n_speeds=1: speed_inc=1: tuning_width=1: gauss_sig=0.8: opt_thr=0.001: tot_width=3: };
       v1m_renorm=NO_RENORM;
       v1m_feat_geom {x=4: y=2: n_not_xy=0: n=8: };
       v1c_filters=0;
       v1c_specs {sg4=1: spc4=0: len_sum_len=1: es_thr=0.2: sg_rf=4: sg_half=2: sg_spacing=2: sg_border=0: len_sum_width=3: len_sum_norm=0.3333333: };
       v1c_renorm=NO_RENORM;
       v1c_save=SAVE_DATA|SAVE_DEBUG;
       v1sg_img_geom {x=128: y=128: n_not_xy=0: n=16384: };
       v1c_img_geom {x=128: y=128: n_not_xy=0: n=16384: };
       v1c_feat_geom {x=4: y=1: n_not_xy=0: n=4: };
       spat_integ=0;
       si_specs {spat_rf={x=6: y=6: }: gauss_sig=0.8: sum_rf=0: spat_half={x=3: y=3: }: spat_spacing={x=3: y=3: }: spat_border={x=0: y=0: }: };
       si_renorm=NO_RENORM;
       si_kwta {mode=FFFB: gp_k=2: gi=1.5: lay_gi=1.5: gp_g=0.1: kwta_pt=0.5: gain=40: nvar=0.01: g_bar_l=0.1: };
       si_save=SAVE_DATA;
       si_v1c_geom {x=42: y=42: n_not_xy=0: n=1764: };
       opt_filters=0;
       opt_save=SAVE_DATA;
       n_colors=1;
       n_polarities=2;
       n_polclr=2;
       v1m_in_polarities=1;
       si_v1s_geom {x=85: y=85: n_not_xy=0: n=7225: };
       si_v1sg_geom {x=42: y=42: n_not_xy=0: n=1764: };
      };
     };
    };
    DataTable @["V1DataSave2D"] {
     name="V1DataSave2D";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @["V1_high_image_r"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_78";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["IMAGE"] {
	 name="IMAGE";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 6 0=0.1851851791143417;
	 val_type_fixed=0;
	};
       };
       name="V1_high_image_r";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 512;512;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=0;
      };
      float_Data @["V1_high_v1s_r"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1015";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 6 0=0.1851851791143417;
	 val_type_fixed=0;
	};
       };
       name="V1_high_v1s_r";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;256;256;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1_high_v1pi_r"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1016";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 6 0=0.1851851791143417;
	 val_type_fixed=0;
	};
       };
       name="V1_high_v1pi_r";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;1;256;256;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1_high_v1c"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1017";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 6 0=0.1851851791143417;
	 val_type_fixed=0;
	};
       };
       name="V1_high_v1c";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;5;128;128;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
      float_Data @["V1_high_v1sg_out"] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1018";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 6 0=0.1851851791143417;
	 val_type_fixed=0;
	};
       };
       name="V1_high_v1sg_out";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;1;128;128;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=0;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [0]      };
    };
    TimeUsedHR @["VisTimer"] {name="VisTimer": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["n_iters"] {
     name="n_iters";
     var_type=T_Int;
     int_val=100;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["full_xform"] {
     name="full_xform";
     var_type=T_Bool;
     bool_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="include full transformimage call in timing";
     init_from=NULL;
    };
    ProgVar @["V1DataSave2D"] {
     name="V1DataSave2D";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"]$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["V1RetinaProc_0"] {
     name="V1RetinaProc_0";
     var_type=T_Object;
     object_type=V1RetinaProc;
     object_val=.projects["v1filter_bench"].programs["VisBench"].objs["V1RetinaProc_0"]$$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["Canvas"] {
     name="Canvas";
     var_type=T_Object;
     object_type=taCanvas;
     object_val=.projects["v1filter_bench"].programs["VisStimGen"].objs["Canvas"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["VisTimer"] {
     name="VisTimer";
     var_type=T_Object;
     object_type=TimeUsedHR;
     object_val=.projects["v1filter_bench"].programs["VisBench"].objs["VisTimer"]$$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     obj=.projects["v1filter_bench"].programs["VisBench"].vars["V1RetinaProc_0"]$$;
     method=RetinaProc::Init;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="bool Init()";
     meth_desc=" initialize the filters, data table, etc -- call this in the init_code of any Program that is using this object";
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     orig_prog_code="VisTimer.ResetUsed()";
     result_var=NULL;
     obj=.projects["v1filter_bench"].programs["VisBench"].vars["VisTimer"]$$;
     method=TimeUsedHR::ResetUsed;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void ResetUsed()";
     meth_desc=" reset time used information -- does NOT reset the avg_used accumulator";
    };
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=0;
     orig_prog_code=;
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["i"] {
       name="i";
       var_type=T_Int;
       int_val=0;
       objs_ptr=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    ProgramCall @[1] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
     target=.projects["v1filter_bench"].programs["VisStimGen"]$$;
     targ_ld_init="*VisStimGen*";
    };
    If @[2] {
     desc=;
     flags=0;
     orig_prog_code="if(full_xform)";
     cond {
      expr="full_xform";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       orig_prog_code="VisTimer.StartTimer()";
       result_var=NULL;
       obj=$.projects["v1filter_bench"].programs["VisBench"].vars["VisTimer"]$;
       method=TimeUsedHR::StartTimer;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=bool;
	 type="bool";
	 name="reset_used";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
       };
       meth_sig="void StartTimer(bool reset_used = true)";
       meth_desc=" record the current time as the starting time, and optionally reset the time used information";
      };
      ForLoop @[1] {
       desc=;
       flags=0;
       orig_prog_code="for(i=0;i<n_iters; i++)";
       loop_code {
	name="loop_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 result_var=NULL;
	 obj=$.projects["v1filter_bench"].programs["VisBench"].vars["V1RetinaProc_0"]$;
	 method=RetinaProc::TransformImage;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=taImage_ptr;
	   type="taImage*";
	   name="right_eye_image";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="Canvas";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=taImage_ptr;
	   type="taImage*";
	   name="left_eye_image";
	   required=0;
	   def_val="__null";
	   prev_expr=;
	   expr {
	    expr="NULL";
	   };
	  };
	  ProgArg @[2] {
	   arg_type=float;
	   type="float";
	   name="move_x";
	   required=0;
	   def_val="0";
	   prev_expr=;
	   expr {
	    expr="0";
	   };
	  };
	  ProgArg @[3] {
	   arg_type=float;
	   type="float";
	   name="move_y";
	   required=0;
	   def_val="0";
	   prev_expr=;
	   expr {
	    expr="0";
	   };
	  };
	  ProgArg @[4] {
	   arg_type=float;
	   type="float";
	   name="scale";
	   required=0;
	   def_val="1.0f";
	   prev_expr=;
	   expr {
	    expr="1.0";
	   };
	  };
	  ProgArg @[5] {
	   arg_type=float;
	   type="float";
	   name="rotate";
	   required=0;
	   def_val="0.0f";
	   prev_expr=;
	   expr {
	    expr="0";
	   };
	  };
	 };
	 meth_sig="bool TransformImage(taImage* right_eye_image, taImage* left_eye_image = __null, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f)";
	 meth_desc=" transform image/s in image format, with retina centered at given normalized offsets from center of image (move -1=far left edge, 0=ctr, 1=far right edge), scaled by given factor (1=same size, .5 = half size, 2 = double size), rotated by normalized units (1=360deg)";
	};
	MethodCall @[1] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 result_var=NULL;
	 obj=$.projects["v1filter_bench"].programs["VisBench"].vars["V1RetinaProc_0"]$;
	 method=RetinaProc::FilterImageData;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=bool;
	   type="bool";
	   name="motion_only";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    expr="false";
	   };
	  };
	 };
	 meth_sig="bool FilterImageData(bool motion_only = false)";
	 meth_desc=" filter retinal image data -- operates on images that were generated from prior Transform or LookAt calls -- must call one of those first -- if motion_only = true, then only process up to level of motion, for faster processing of initial frames of motion sequence";
	};
       };
       init {
	expr="i=0";
       };
       test {
	expr="i<n_iters";
       };
       iter {
	expr="i++";
       };
      };
     };
    };
    Else @[3] {
     desc=;
     flags=0;
     orig_prog_code="else";
     else_code {
      name="else_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=NULL;
       obj=$.projects["v1filter_bench"].programs["VisBench"].vars["V1RetinaProc_0"]$;
       method=RetinaProc::TransformImage;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taImage_ptr;
	 type="taImage*";
	 name="right_eye_image";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Canvas";
	 };
	};
	ProgArg @[1] {
	 arg_type=taImage_ptr;
	 type="taImage*";
	 name="left_eye_image";
	 required=0;
	 def_val="__null";
	 prev_expr=;
	 expr {
	  expr="NULL";
	 };
	};
	ProgArg @[2] {
	 arg_type=float;
	 type="float";
	 name="move_x";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
	ProgArg @[3] {
	 arg_type=float;
	 type="float";
	 name="move_y";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
	ProgArg @[4] {
	 arg_type=float;
	 type="float";
	 name="scale";
	 required=0;
	 def_val="1.0f";
	 prev_expr=;
	 expr {
	  expr="1.0";
	 };
	};
	ProgArg @[5] {
	 arg_type=float;
	 type="float";
	 name="rotate";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
       };
       meth_sig="bool TransformImage(taImage* right_eye_image, taImage* left_eye_image = __null, float move_x = 0, float move_y = 0, float scale = 1.0f, float rotate = 0.0f)";
       meth_desc=" transform image/s in image format, with retina centered at given normalized offsets from center of image (move -1=far left edge, 0=ctr, 1=far right edge), scaled by given factor (1=same size, .5 = half size, 2 = double size), rotated by normalized units (1=360deg)";
      };
      MethodCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       orig_prog_code="VisTimer.StartTimer()";
       result_var=NULL;
       obj=$.projects["v1filter_bench"].programs["VisBench"].vars["VisTimer"]$;
       method=TimeUsedHR::StartTimer;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=bool;
	 type="bool";
	 name="reset_used";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
       };
       meth_sig="void StartTimer(bool reset_used = true)";
       meth_desc=" record the current time as the starting time, and optionally reset the time used information";
      };
      ForLoop @[2] {
       desc=;
       flags=0;
       orig_prog_code="for(i=0;i<n_iters; i++)";
       loop_code {
	name="loop_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 result_var=NULL;
	 obj=$.projects["v1filter_bench"].programs["VisBench"].vars["V1RetinaProc_0"]$;
	 method=RetinaProc::FilterImageData;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=bool;
	   type="bool";
	   name="motion_only";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    expr="false";
	   };
	  };
	 };
	 meth_sig="bool FilterImageData(bool motion_only = false)";
	 meth_desc=" filter retinal image data -- operates on images that were generated from prior Transform or LookAt calls -- must call one of those first -- if motion_only = true, then only process up to level of motion, for faster processing of initial frames of motion sequence";
	};
       };
       init {
	expr="i=0";
       };
       test {
	expr="i<n_iters";
       };
       iter {
	expr="i++";
       };
      };
     };
    };
    MethodCall @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     orig_prog_code="VisTimer.StartTimer()";
     result_var=NULL;
     obj=$.projects["v1filter_bench"].programs["VisBench"].vars["VisTimer"]$;
     method=TimeUsedHR::EndTimer;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void EndTimer()";
     meth_desc=" record the current time as the ending time, and compute difference as the time used";
    };
    PrintExpr @[5] {
     desc=;
     flags=0;
     orig_prog_code=;
     expr {
      expr="\"hr total time: \" << VisTimer.s_used << \" per itr: \" << VisTimer.s_used / n_iters << endl";
     };
     my_mask=NULL;
     debug_level=NULL;
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @["VisStimGen"] {
   name="VisStimGen";
   short_nm="StimGen";
   tags="Canvas, Drawing, DataGen, Image";
   desc="generate test stimulus displays -- grids of stimuli as in popout displays";
   flags=NO_STOP_STEP;
   objs {
    name="objs";
    el_typ=taCanvas;
    el_def=0;
    taCanvas @["Canvas"] {
     name="Canvas";
     coord_type=NORMALIZED;
    };
    DataTable @["StimGenData"] {
     name="StimGenData";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @["Canvas"] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @["IMAGE"] {
	 name="IMAGE";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @["view_panel_wd"] {
	 name="view_panel_wd";
	 value 6 0=0.1851851791143417;
	 val_type_fixed=0;
	};
       };
       name="Canvas";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 512;512;3;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [3] ;;;       };
       width=0;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [0]      };
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @["Shape"] {
     name="Shape";
     desc="shape to draw";
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @["LINE"] {
       name="LINE";
       value=0;
       desc=;
      };
      DynEnumItem @["TEE"] {
       name="TEE";
       value=1;
       desc=;
      };
      DynEnumItem @["PLUS"] {
       name="PLUS";
       value=2;
       desc=;
      };
      DynEnumItem @["CIRCLE"] {
       name="CIRCLE";
       value=3;
       desc=;
      };
     };
     bits=0;
    };
    DynEnumType @["DisplayType"] {
     name="DisplayType";
     desc="type of display to create";
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @["COLOR"] {
       name="COLOR";
       value=0;
       desc=;
      };
      DynEnumItem @["ORIENTATION"] {
       name="ORIENTATION";
       value=1;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["canvas_width"] {
     name="canvas_width";
     var_type=T_Int;
     int_val=512;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["canvas_height"] {
     name="canvas_height";
     var_type=T_Int;
     int_val=512;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["Canvas"] {
     name="Canvas";
     var_type=T_Object;
     object_type=taCanvas;
     object_val=$.projects["v1filter_bench"].programs["VisStimGen"].objs["Canvas"]$;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["StimGenData"] {
     name="StimGenData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["v1filter_bench"].programs["VisStimGen"].objs["StimGenData"]$$;
     objs_ptr=1;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["disp_type"] {
     name="disp_type";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects["v1filter_bench"].programs["VisStimGen"].types["DisplayType"]$$;
      value=0;
     };
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["disp_size"] {
     name="disp_size";
     var_type=T_Int;
     int_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="display size, as number in each dimension of a square grid of oriented lines";
     init_from=NULL;
    };
    ProgVar @["bg_color"] {
     name="bg_color";
     var_type=T_String;
     string_val="grey";
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="color of background";
     init_from=NULL;
    };
    ProgVar @["non_targ_color"] {
     name="non_targ_color";
     var_type=T_String;
     string_val="white";
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="color of non-target stimulus";
     init_from=NULL;
    };
    ProgVar @["targ_color"] {
     name="targ_color";
     var_type=T_String;
     string_val="black";
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="color of target stimulus";
     init_from=NULL;
    };
    ProgVar @["trg_shape"] {
     name="trg_shape";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects["v1filter_bench"].programs["VisStimGen"].types["Shape"]$$;
      value=1;
     };
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["non_trg_shape"] {
     name="non_trg_shape";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=$.projects["v1filter_bench"].programs["VisStimGen"].types["Shape"]$;
      value=2;
     };
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["cur_shape"] {
     name="cur_shape";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=$.projects["v1filter_bench"].programs["VisStimGen"].types["Shape"]$;
      value=1;
     };
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["trg_ctr"] {
     name="trg_ctr";
     var_type=T_Bool;
     bool_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="always put the target in the center";
     init_from=NULL;
    };
    ProgVar @["line_len"] {
     name="line_len";
     var_type=T_Real;
     real_val=0.5;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="line length, as proportion of entire display";
     init_from=NULL;
    };
    ProgVar @["line_width"] {
     name="line_width";
     var_type=T_Real;
     real_val=0.15;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["spacing"] {
     name="spacing";
     var_type=T_Real;
     real_val=0.01;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="space between lines (normalized units)";
     init_from=NULL;
    };
    ProgVar @["bg_line_angle"] {
     name="bg_line_angle";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="angle of background lines";
     init_from=NULL;
    };
    ProgVar @["fg_line_angle"] {
     name="fg_line_angle";
     var_type=T_Real;
     real_val=45;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="angle of target line";
     init_from=NULL;
    };
    ProgVar @["orientation_jitter"] {
     name="orientation_jitter";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="jitter in orientation of lines";
     init_from=NULL;
    };
    ProgVar @["total_size"] {
     name="total_size";
     var_type=T_Real;
     real_val=0.5;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="total size of display = disp_size * line_len + (disp_size-1) * spacing";
     init_from=NULL;
    };
    ProgVar @["start_coord"] {
     name="start_coord";
     var_type=T_Real;
     real_val=0.505;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="where to start drawing";
     init_from=NULL;
    };
    ProgVar @["incr"] {
     name="incr";
     var_type=T_Real;
     real_val=0.51;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="increment per line";
     init_from=NULL;
    };
    ProgVar @["cur_x"] {
     name="cur_x";
     var_type=T_Real;
     real_val=0.505;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["cur_y"] {
     name="cur_y";
     var_type=T_Real;
     real_val=0.505;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["y"] {
     name="y";
     var_type=T_Int;
     int_val=1;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["x"] {
     name="x";
     var_type=T_Int;
     int_val=1;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["trg_idx"] {
     name="trg_idx";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="index of target item";
     init_from=NULL;
    };
    ProgVar @["trg_x"] {
     name="trg_x";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="index of target item";
     init_from=NULL;
    };
    ProgVar @["trg_y"] {
     name="trg_y";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="index of target item";
     init_from=NULL;
    };
    ProgVar @["idx"] {
     name="idx";
     var_type=T_Int;
     int_val=1;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="index of line";
     init_from=NULL;
    };
    ProgVar @["cur_angle"] {
     name="cur_angle";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["cur_jitter"] {
     name="cur_jitter";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["cur_color"] {
     name="cur_color";
     var_type=T_String;
     string_val="black";
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
    Function @["DrawLine"] {
     desc=;
     flags=0;
     orig_prog_code=;
     name="DrawLine";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name=;
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["ctr_x"] {
       name="ctr_x";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc="line center - x";
       init_from=NULL;
      };
      ProgVar @["ctr_y"] {
       name="ctr_y";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @["Myangle"] {
       name="Myangle";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @["color"] {
       name="color";
       var_type=T_String;
       string_val=;
       objs_ptr=0;
       flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name=;
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       desc=;
       flags=0;
       orig_prog_code=;
       local_vars {
	name=;
	el_typ=ProgVar;
	el_def=0;
	ProgVar @["st_x"] {
	 name="st_x";
	 var_type=T_Real;
	 real_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["st_y"] {
	 name="st_y";
	 var_type=T_Real;
	 real_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["ed_x"] {
	 name="ed_x";
	 var_type=T_Real;
	 real_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["ed_y"] {
	 name="ed_y";
	 var_type=T_Real;
	 real_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      MethodCall @[1] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=NULL;
       obj=.projects["v1filter_bench"].programs["VisStimGen"].vars["Canvas"]$$;
       method=taCanvas::PenColorName;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="name";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="color";
	 };
	};
       };
       meth_sig="void PenColorName(taString& name)";
       meth_desc=" ";
      };
      MathCall @[2] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"].fun_code[0].local_vars["st_x"]$$;
       object_type=taMath_float;
       method=taMath_float::cos_deg;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float;
	 type="float";
	 name="angle";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Myangle-180.0";
	 };
	};
       };
      };
      MathCall @[3] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"].fun_code[0].local_vars["st_y"]$$;
       object_type=taMath_float;
       method=taMath_float::sin_deg;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float;
	 type="float";
	 name="angle";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Myangle-180.0";
	 };
	};
       };
      };
      MathCall @[4] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"].fun_code[0].local_vars["ed_x"]$$;
       object_type=taMath_float;
       method=taMath_float::cos_deg;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float;
	 type="float";
	 name="angle";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Myangle";
	 };
	};
       };
      };
      MathCall @[5] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"].fun_code[0].local_vars["ed_y"]$$;
       object_type=taMath_float;
       method=taMath_float::sin_deg;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float;
	 type="float";
	 name="angle";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Myangle";
	 };
	};
       };
      };
      AssignExpr @[6] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=$.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"].fun_code[0].local_vars["st_x"]$;
       expr {
	expr="ctr_x + .5 * line_len * st_x";
       };
      };
      AssignExpr @[7] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=$.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"].fun_code[0].local_vars["st_y"]$;
       expr {
	expr="ctr_y + .5 * line_len * st_y";
       };
      };
      AssignExpr @[8] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=$.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"].fun_code[0].local_vars["ed_x"]$;
       expr {
	expr="ctr_x + .5 * line_len * ed_x";
       };
      };
      AssignExpr @[9] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=$.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"].fun_code[0].local_vars["ed_y"]$;
       expr {
	expr="ctr_y + .5 * line_len * ed_y";
       };
      };
      MethodCall @[10] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=NULL;
       obj=$.projects["v1filter_bench"].programs["VisStimGen"].vars["Canvas"]$;
       method=taCanvas::Line;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float;
	 type="float";
	 name="x1";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="st_x";
	 };
	};
	ProgArg @[1] {
	 arg_type=float;
	 type="float";
	 name="y1";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="st_y";
	 };
	};
	ProgArg @[2] {
	 arg_type=float;
	 type="float";
	 name="x2";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="ed_x";
	 };
	};
	ProgArg @[3] {
	 arg_type=float;
	 type="float";
	 name="y2";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="ed_y";
	 };
	};
       };
       meth_sig="void Line(float x1, float y1, float x2, float y2)";
       meth_desc=" ";
      };
     };
    };
    Function @["DrawShape"] {
     desc=;
     flags=0;
     orig_prog_code=;
     name="DrawShape";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name=;
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["Myshape"] {
       name="Myshape";
       var_type=T_DynEnum;
       dyn_enum_val {
	enum_type=$.projects["v1filter_bench"].programs["VisStimGen"].types["Shape"]$;
	value=0;
       };
       objs_ptr=0;
       flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @["ctr_x"] {
       name="ctr_x";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @["ctr_y"] {
       name="ctr_y";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @["Myangle"] {
       name="Myangle";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @["color"] {
       name="color";
       var_type=T_String;
       string_val=;
       objs_ptr=0;
       flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name=;
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       desc=;
       flags=0;
       orig_prog_code=;
       local_vars {
	name=;
	el_typ=ProgVar;
	el_def=0;
	ProgVar @["st_x"] {
	 name="st_x";
	 var_type=T_Real;
	 real_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["st_y"] {
	 name="st_y";
	 var_type=T_Real;
	 real_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["ed_x"] {
	 name="ed_x";
	 var_type=T_Real;
	 real_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["ed_y"] {
	 name="ed_y";
	 var_type=T_Real;
	 real_val=0;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @["other_color"] {
	 name="other_color";
	 var_type=T_String;
	 string_val=;
	 objs_ptr=0;
	 flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      MathCall @[1] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawShape"].fun_code[0].local_vars["st_x"]$$;
       object_type=taMath_float;
       method=taMath_float::cos_deg;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float;
	 type="float";
	 name="angle";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Myangle-180.0";
	 };
	};
       };
      };
      MathCall @[2] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawShape"].fun_code[0].local_vars["st_y"]$$;
       object_type=taMath_float;
       method=taMath_float::sin_deg;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float;
	 type="float";
	 name="angle";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Myangle-180.0";
	 };
	};
       };
      };
      AssignExpr @[3] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawShape"].fun_code[0].local_vars["other_color"]$$;
       expr {
	expr="color == targ_color ? non_targ_color : targ_color";
       };
      };
      Switch @[4] {
       desc=;
       flags=0;
       orig_prog_code=;
       switch_var=.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawShape"].args["Myshape"]$$;
       cases {
	name=;
	el_typ=CaseBlock;
	el_def=0;
	CaseBlock @[0] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 prog_code {
	  name=;
	  el_typ=ProgCode;
	  el_def=0;
	  FunctionCall @[0] {
	   desc=;
	   flags=0;
	   orig_prog_code=;
	   result_var=NULL;
	   fun=.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"]$$;
	   fun_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="ctr_x";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="ctr_y";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=double;
	     type="double";
	     name="Myangle";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="Myangle";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=taString;
	     type="String";
	     name="color";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="color";
	     };
	    };
	   };
	  };
	 };
	 case_val {
	  expr="LINE";
	 };
	};
	CaseBlock @[1] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 prog_code {
	  name=;
	  el_typ=ProgCode;
	  el_def=0;
	  FunctionCall @[0] {
	   desc=;
	   flags=0;
	   orig_prog_code=;
	   result_var=NULL;
	   fun=$.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"]$;
	   fun_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="ctr_x";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="ctr_y";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=double;
	     type="double";
	     name="Myangle";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="Myangle";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=taString;
	     type="String";
	     name="color";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="color";
	     };
	    };
	   };
	  };
	  FunctionCall @[1] {
	   desc=;
	   flags=0;
	   orig_prog_code=;
	   result_var=NULL;
	   fun=$.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"]$;
	   fun_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="ctr_x";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x + .5 * line_len * st_x";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="ctr_y";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y + .5 * line_len * st_y";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=double;
	     type="double";
	     name="Myangle";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="90.0 + Myangle";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=taString;
	     type="String";
	     name="color";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="other_color";
	     };
	    };
	   };
	  };
	 };
	 case_val {
	  expr="TEE";
	 };
	};
	CaseBlock @[2] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 prog_code {
	  name=;
	  el_typ=ProgCode;
	  el_def=0;
	  FunctionCall @[0] {
	   desc=;
	   flags=0;
	   orig_prog_code=;
	   result_var=NULL;
	   fun=$.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"]$;
	   fun_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="ctr_x";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="ctr_y";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=double;
	     type="double";
	     name="Myangle";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="Myangle";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=taString;
	     type="String";
	     name="color";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="color";
	     };
	    };
	   };
	  };
	  FunctionCall @[1] {
	   desc=;
	   flags=0;
	   orig_prog_code=;
	   result_var=NULL;
	   fun=$.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawLine"]$;
	   fun_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="ctr_x";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="ctr_y";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=double;
	     type="double";
	     name="Myangle";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="90.0 + Myangle";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=taString;
	     type="String";
	     name="color";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="other_color";
	     };
	    };
	   };
	  };
	 };
	 case_val {
	  expr="PLUS";
	 };
	};
	CaseBlock @[3] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 prog_code {
	  name=;
	  el_typ=ProgCode;
	  el_def=0;
	 };
	 case_val {
	  expr="CIRCLE";
	 };
	};
       };
      };
     };
    };
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    ResetDataRows @[0] {
     desc=;
     flags=0;
     orig_prog_code=;
     data_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["StimGenData"]$$;
    };
    MethodCall @[1] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     obj=$.projects["v1filter_bench"].programs["VisStimGen"].vars["Canvas"]$;
     method=taImage::SetImageSize;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="width";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="canvas_width";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="height";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="canvas_height";
       };
      };
     };
     meth_sig="bool SetImageSize(int width, int height)";
     meth_desc=" set size of current image -- if currently same size, then returns false and nothing happens; otherwise, a new image data structure of given size is created, using ARGB32 format";
    };
    MethodCall @[2] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     obj=$.projects["v1filter_bench"].programs["VisStimGen"].vars["Canvas"]$;
     method=taImage::ConfigDataColName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dt";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="StimGenData";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"Canvas\"";
       };
      };
      ProgArg @[2] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="val_type";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="taBase::VT_FLOAT";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="rgb";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="bool ConfigDataColName(DataTable* dt, taString& col_nm, taBase::ValType val_type, bool rgb = true)";
     meth_desc=" configure data column with given name (if it doesn't exist, it is created) to represent current image -- if rgb is false, then a greyscale image is configured (2d)";
    };
    AddNewDataRow @[3] {
     desc=;
     flags=0;
     orig_prog_code=;
     data_var=$.projects["v1filter_bench"].programs["VisStimGen"].vars["StimGenData"]$;
    };
    MethodCall @[4] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     obj=$.projects["v1filter_bench"].programs["VisStimGen"].vars["Canvas"]$;
     method=taCanvas::InitCanvas;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void InitCanvas()";
     meth_desc=" initialize the canvas -- MUST be called prior to drawing!";
    };
    MethodCall @[5] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     obj=$.projects["v1filter_bench"].programs["VisStimGen"].vars["Canvas"]$;
     method=taCanvas::EraseName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="bg_color";
       };
      };
     };
     meth_sig="void EraseName(taString& name)";
     meth_desc=" erase image to given color name";
    };
    MethodCall @[6] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     obj=$.projects["v1filter_bench"].programs["VisStimGen"].vars["Canvas"]$;
     method=taCanvas::PenWidth;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=float;
       type="float";
       name="width";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="line_width";
       };
      };
     };
     meth_sig="void PenWidth(float width)";
     meth_desc=" ";
    };
    AssignExpr @[7] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["total_size"]$$;
     expr {
      expr="line_len* disp_size +  spacing*(disp_size-1)";
     };
    };
    AssignExpr @[8] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["incr"]$$;
     expr {
      expr="line_len+ spacing";
     };
    };
    AssignExpr @[9] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["start_coord"]$$;
     expr {
      expr=".5 - total_size * .5 + .5 * incr";
     };
    };
    RandomCall @[10] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["trg_x"]$$;
     object_type=Random;
     method=Random::IntZeroN;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="n";
       required=1;
       def_val=;
       prev_expr="disp_size";
       expr {
	expr="disp_size";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="thr_no";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
    };
    RandomCall @[11] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["trg_y"]$$;
     object_type=Random;
     method=Random::IntZeroN;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="n";
       required=1;
       def_val=;
       prev_expr="disp_size";
       expr {
	expr="disp_size";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="thr_no";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
    };
    AssignExpr @[12] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["trg_idx"]$$;
     expr {
      expr="trg_y * disp_size + trg_x";
     };
    };
    If @[13] {
     desc=;
     flags=0;
     orig_prog_code=;
     cond {
      expr="trg_ctr";
     };
     true_code {
      name=;
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=$.projects["v1filter_bench"].programs["VisStimGen"].vars["trg_idx"]$;
       expr {
	expr=".5 * (disp_size * disp_size)";
       };
      };
     };
    };
    ForLoop @[14] {
     desc=;
     flags=0;
     orig_prog_code=;
     loop_code {
      name=;
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["cur_y"]$$;
       expr {
	expr="start_coord + incr * y";
       };
      };
      ForLoop @[1] {
       desc=;
       flags=0;
       orig_prog_code=;
       loop_code {
	name=;
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 result_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["cur_x"]$$;
	 expr {
	  expr="start_coord + incr * x";
	 };
	};
	AssignExpr @[1] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 result_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["cur_angle"]$$;
	 expr {
	  expr="bg_line_angle";
	 };
	};
	AssignExpr @[2] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 result_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["cur_color"]$$;
	 expr {
	  expr="non_targ_color";
	 };
	};
	AssignExpr @[3] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 result_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["cur_shape"]$$;
	 expr {
	  expr="non_trg_shape";
	 };
	};
	RandomCall @[4] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 result_var=.projects["v1filter_bench"].programs["VisStimGen"].vars["cur_jitter"]$$;
	 object_type=Random;
	 method=Random::UniformMinMax;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=double;
	   type="double";
	   name="min";
	   required=1;
	   def_val=;
	   prev_expr="-  orientation_jitter";
	   expr {
	    expr="-  orientation_jitter";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=double;
	   type="double";
	   name="max";
	   required=1;
	   def_val=;
	   prev_expr="orientation_jitter";
	   expr {
	    expr="orientation_jitter";
	   };
	  };
	  ProgArg @[2] {
	   arg_type=int;
	   type="int";
	   name="thr_no";
	   required=0;
	   def_val="0";
	   prev_expr=;
	   expr {
	    expr=;
	   };
	  };
	 };
	};
	If @[5] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 cond {
	  expr="idx ==  trg_idx";
	 };
	 true_code {
	  name=;
	  el_typ=ProgCode;
	  el_def=0;
	  If @[0] {
	   desc=;
	   flags=0;
	   orig_prog_code=;
	   cond {
	    expr="disp_type ==  COLOR";
	   };
	   true_code {
	    name=;
	    el_typ=ProgCode;
	    el_def=0;
	    AssignExpr @[0] {
	     desc=;
	     flags=0;
	     orig_prog_code=;
	     result_var=$.projects["v1filter_bench"].programs["VisStimGen"].vars["cur_color"]$;
	     expr {
	      expr="targ_color";
	     };
	    };
	   };
	  };
	  Else @[1] {
	   desc=;
	   flags=0;
	   orig_prog_code=;
	   else_code {
	    name=;
	    el_typ=ProgCode;
	    el_def=0;
	    AssignExpr @[0] {
	     desc=;
	     flags=0;
	     orig_prog_code=;
	     result_var=$.projects["v1filter_bench"].programs["VisStimGen"].vars["cur_angle"]$;
	     expr {
	      expr="fg_line_angle";
	     };
	    };
	   };
	  };
	  AssignExpr @[2] {
	   desc=;
	   flags=0;
	   orig_prog_code=;
	   result_var=$.projects["v1filter_bench"].programs["VisStimGen"].vars["cur_shape"]$;
	   expr {
	    expr="trg_shape";
	   };
	  };
	 };
	};
	FunctionCall @[6] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 result_var=NULL;
	 fun=.projects["v1filter_bench"].programs["VisStimGen"].functions["DrawShape"]$$;
	 fun_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=DynEnum;
	   type="Shape";
	   name="Myshape";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="cur_shape";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=double;
	   type="double";
	   name="ctr_x";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="cur_x";
	   };
	  };
	  ProgArg @[2] {
	   arg_type=double;
	   type="double";
	   name="ctr_y";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="cur_y";
	   };
	  };
	  ProgArg @[3] {
	   arg_type=double;
	   type="double";
	   name="Myangle";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="cur_angle + cur_jitter";
	   };
	  };
	  ProgArg @[4] {
	   arg_type=taString;
	   type="String";
	   name="color";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="cur_color";
	   };
	  };
	 };
	};
       };
       init {
	expr="x = 0";
       };
       test {
	expr="x < disp_size";
       };
       iter {
	expr="x++, idx++";
       };
      };
     };
     init {
      expr="y = 0, idx=0";
     };
     test {
      expr="y < disp_size";
     };
     iter {
      expr="y++";
     };
    };
    Comment @[15] {
     desc="update the datatable with the current image";
     flags=0;
     orig_prog_code=;
    };
    MethodCall @[16] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     obj=$.projects["v1filter_bench"].programs["VisStimGen"].vars["Canvas"]$;
     method=taImage::ImageToDataCellName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dt";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="StimGenData";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"Canvas\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-1";
       };
      };
     };
     meth_sig="bool ImageToDataCellName(DataTable* dt, taString& col_nm, int row)";
     meth_desc=" set image to datatable cell indexed by col name and row number -- uses cell dimensionality and type -- only amount that fits in cell is copied. row = -1 = last row";
    };
    DoneWritingDataRow @[17] {
     desc=;
     flags=0;
     orig_prog_code=;
     data_var=$.projects["v1filter_bench"].programs["VisStimGen"].vars["StimGenData"]$;
    };
   };
   step_prog=NULL;
   step_n=1;
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser2"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     name="view_win_lft";
     value 6 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     name="view_win_top";
     value 6 0=0.05182667821645737;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     name="view_win_wd";
     value 6 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     name="view_win_ht";
     value 6 0=0.799490213394165;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAABDAAAAh0AAAPRAQAAAAcBAAAAAQE=";
     val_type_fixed=0;
    };
   };
   name="Browser2";
   m_data=.projects["v1filter_bench"]$$;
   visible=1;
   win_name=".projects[\"v1filter_bench\"] - v1filter_bench.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     name="Navigator";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["v1filter_bench"]$;
    };
    PanelViewer @["Editor"] {
     name="Editor";
     m_data=NULL;
     visible=1;
    };
    T3PanelViewer @["Visualizer"] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_frame_selected"] {
       name="view_frame_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @["view_panel_selected"] {
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Visualizer";
     m_data=NULL;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["StimGenData"] {
       name="StimGenData";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GridTableView;
	 el_def=0;
	 GridTableView @["StimGenData_Grid"] {
	  name="StimGenData_Grid";
	  m_data=$.projects["v1filter_bench"].programs["VisStimGen"].objs["StimGenData"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["Canvas"] {
	    name="Canvas";
	    m_data=.projects["v1filter_bench"].programs["VisStimGen"].objs["StimGenData"].data["Canvas"]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=144;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=-1: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=0: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5174999: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["V1DataSave2D"] {
       name="V1DataSave2D";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GridTableView;
	 el_def=0;
	 GridTableView @["V1DataSave2D_Grid"] {
	  name="V1DataSave2D_Grid";
	  m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["V1_high_image_r"] {
	    name="V1_high_image_r";
	    m_data=.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_image_r"]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1s_r"] {
	    name="V1_high_v1s_r";
	    m_data=.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1s_r"]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1pi_r"] {
	    name="V1_high_v1pi_r";
	    m_data=.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1pi_r"]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1c"] {
	    name="V1_high_v1c";
	    m_data=.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1c"]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1sg_out"] {
	    name="V1_high_v1sg_out";
	    m_data=.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1sg_out"]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=-1: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=0;
	  view_cols=1;
	  page_cols=5;
	  col_range {min=0: max=0: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.8;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	 GridTableView @["V1DataSave2D_Grid_1"] {
	  name="V1DataSave2D_Grid_1";
	  m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=2.146328: y=0.001749218: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["V1_high_image_r"] {
	    name="V1_high_image_r";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_image_r"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1s_r"] {
	    name="V1_high_v1s_r";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1s_r"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1pi_r"] {
	    name="V1_high_v1pi_r";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1pi_r"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1c"] {
	    name="V1_high_v1c";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1c"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1sg_out"] {
	    name="V1_high_v1sg_out";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1sg_out"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=2.146328: y=0.001749218: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=-1: };
	  page_rows=1;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=1;
	  page_cols=1;
	  col_range {min=1: max=1: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.8;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	 GridTableView @["V1DataSave2D_Grid_2"] {
	  name="V1DataSave2D_Grid_2";
	  m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=1.122204: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["V1_high_image_r"] {
	    name="V1_high_image_r";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_image_r"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1s_r"] {
	    name="V1_high_v1s_r";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1s_r"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1pi_r"] {
	    name="V1_high_v1pi_r";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1pi_r"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1c"] {
	    name="V1_high_v1c";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1c"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1sg_out"] {
	    name="V1_high_v1sg_out";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1sg_out"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=1.122204: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=-1: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=0;
	  view_cols=1;
	  page_cols=5;
	  col_range {min=3: max=3: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.8;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	 GridTableView @["V1DataSave2D_Grid_3"] {
	  name="V1DataSave2D_Grid_3";
	  m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=2.146327: y=1.123953: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["V1_high_image_r"] {
	    name="V1_high_image_r";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_image_r"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1s_r"] {
	    name="V1_high_v1s_r";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1s_r"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1pi_r"] {
	    name="V1_high_v1pi_r";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1pi_r"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1c"] {
	    name="V1_high_v1c";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1c"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["V1_high_v1sg_out"] {
	    name="V1_high_v1sg_out";
	    m_data=$.projects["v1filter_bench"].programs["VisBench"].objs["V1DataSave2D"].data["V1_high_v1sg_out"]$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=2.146327: y=1.123953: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=-1: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=0;
	  view_cols=1;
	  page_cols=5;
	  col_range {min=3: max=3: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.8;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=0: g=0: b=0: a=1: };
       text_color {r=1: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=2.065664: y=1.072851: z=2.809202: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.809202;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=1;
	 pos {x=1.523664: y=0.5448512: z=1.249697: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.249697;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=1;
	 pos {x=2.665664: y=0.5508513: z=1.277495: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.277495;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=1;
	 pos {x=1.523664: y=1.658851: z=1.277495: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.277495;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=1;
	 pos {x=2.669664: y=1.658851: z=1.277495: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.277495;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["V1_high_GridV1Stencils"] {
       name="V1_high_GridV1Stencils";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GridTableView;
	 el_def=0;
	 GridTableView @["V1_high_GridV1Stencils_Grid"] {
	  name="V1_high_GridV1Stencils_Grid";
	  m_data=.projects["v1filter_bench"].data.gp["AnalysisData"]["V1_high_GridV1Stencils"]$$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["Name"] {
	    name="Name";
	    m_data=.projects["v1filter_bench"].data.gp["AnalysisData"]["V1_high_GridV1Stencils"].data["Name"]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=24;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Stencil"] {
	    name="Stencil";
	    m_data=.projects["v1filter_bench"].data.gp["AnalysisData"]["V1_high_GridV1Stencils"].data["Stencil"]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=4;
	  view_range {min=12: max=15: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=1: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=4;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5174999: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @["Zoom"] {
	 name="Zoom";
	 view_saved=1;
	 pos {x=1.8185: y=0.4854999: z=0.5432999: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0.5532998;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["V1_high_Gabor_GridFilter"] {
       name="V1_high_Gabor_GridFilter";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GridTableView;
	 el_def=0;
	 GridTableView @["GridTableView_6"] {
	  name="GridTableView_6";
	  m_data=.projects["v1filter_bench"].data.gp["AnalysisData"]["V1_high_Gabor_GridFilter"]$$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["Name"] {
	    name="Name";
	    m_data=.projects["v1filter_bench"].data.gp["AnalysisData"]["V1_high_Gabor_GridFilter"].data["Name"]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=23;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Filter"] {
	    name="Filter";
	    m_data=.projects["v1filter_bench"].data.gp["AnalysisData"]["V1_high_Gabor_GridFilter"].data["Filter"]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=6;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=4;
	  view_range {min=0: max=3: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=1: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-0.1584122;
	   max=0.1584122;
	   last_min=-1;
	   last_max=1;
	   range=0.1584122;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5174999: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       name="view_win_lft";
       value 6 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       name="view_win_top";
       value 6 0=0.008496176451444626;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       name="view_win_wd";
       value 6 0=0.04031830281019211;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       name="view_win_ht";
       value 6 0=0.7357689142227173;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
 };
};

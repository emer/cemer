// ta_Dump File v2.0 -- code v4.0.21.0
LeabraProject .projects[0] { 
Wizard_Group @.wizards = [1] {
LeabraWizard @[0] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @[0] { };
};

LayerWizElList @.layer_cfg = [5] {
LayerWizEl @[0] { };
LayerWizEl @[1] { };
LayerWizEl @[2] { };
LayerWizEl @[3] { };
LayerWizEl @[4] { };
};
};
};

DataTable_Group @.data = [0] {
DataTable_Group @.gp[0] = [1] { 
DataTable @[0] { 
DataTableCols @.data = [3] {
String_Data @[0] { };
float_Data @[1] { };
float_Data @[2] { };
};
};
};
DataTable_Group @.gp[1] = [2] { 
DataTable @[0] { 
DataTableCols @.data = [9] {
int_Data @[0] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @[0] { };
};
};
int_Data @[1] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @[0] { };
};
};
int_Data @[2] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @[0] { };
};
};
String_Data @[3] { };
String_Data @[4] { };
int_Data @[5] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @[0] { };
};
};
float_Data @[6] { };
float_Data @[7] { };
float_Data @[8] { };
};
};
DataTable @[1] { 
DataTableCols @.data = [8] {
float_Data @[0] { };
float_Data @[1] { };
int_Data @[2] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @[0] { };
};
};
int_Data @[3] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @[0] { };
};
};
float_Data @[4] { };
float_Data @[5] { };
float_Data @[6] { };
float_Data @[7] { };
};
};
};
DataTable_Group @.gp[2] { };
};

taBase_Group @.data_proc = [4] {
taDataProc @[0] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @[0] { };
};
};
taDataAnal @[1] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @[0] { };
};
};
taDataGen @[2] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @[0] { };
};
};
taImageProc @[3] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @[0] { };
};
};
};

Program_Group @.programs = [2] {
Program @[0] { 
ProgVar_List @.args = [3] {
ProgVar @[0] { };
ProgVar @[1] { };
ProgVar @[2] { };
};

ProgVar_List @.vars = [3] {
ProgVar @[0] { };
ProgVar @[1] { };
ProgVar @[2] { };
};

ProgEl_List @.prog_code = [4] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
AssignExpr @[2] { };
DataGenCall @[3] { 
ProgArg_List @.meth_args = [5] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
ProgArg @[3] { };
ProgArg @[4] { };
};
};
};
};
Program @[1] { 
ProgVar_List @.args = [2] {
ProgVar @[0] { };
ProgVar @[1] { };
};

ProgVar_List @.vars = [6] {
ProgVar @[0] { };
ProgVar @[1] { };
ProgVar @[2] { };
ProgVar @[3] { };
ProgVar @[4] { };
ProgVar @[5] { };
};

ProgEl_List @.prog_code = [22] {
IfReturn @[0] { };
Comment @[1] { };
MiscCall @[2] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MiscCall @[3] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
RegisterArgs @[4] { };
Comment @[5] { };
PrintExpr @[6] { };
MethodCall @[7] { };
MiscCall @[8] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MiscCall @[9] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
ProgVarFmArg @[10] { };
ProgVarFmArg @[11] { };
Comment @[12] { };
MethodCall @[13] { 
ProgArg_List @.meth_args = [4] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
ProgArg @[3] { };
};
};
MiscCall @[14] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MethodCall @[15] { 
ProgArg_List @.meth_args = [4] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
ProgArg @[3] { };
};
};
MethodCall @[16] { 
ProgArg_List @.meth_args = [3] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
};
};
MethodCall @[17] { 
ProgArg_List @.meth_args = [4] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
ProgArg @[3] { };
};
};
MethodCall @[18] { 
ProgArg_List @.meth_args = [3] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
};
};
OtherProgramVar @[19] { };
PrintExpr @[20] { };
ProgramCall @[21] { 
ProgArg_List @.prog_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
};
};
Program_Group @.gp[0] = [10] { 
Program @[0] { 
ProgVar_List @.args = [2] {
ProgVar @[0] { };
ProgVar @[1] { };
};

ProgVar_List @.vars = [2] {
ProgVar @[0] { };
ProgVar @[1] { };
};

ProgEl_List @.init_code = [2] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [3] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
};
};
NetCounterInit @[1] { };
};

ProgEl_List @.prog_code = [2] {
NetCounterInit @[0] { };
WhileLoop @[1] { 
ProgEl_List @.loop_code = [2] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [3] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
};
};
NetCounterIncr @[1] { };
};
};
};
};
Program @[1] { 
ProgObjList @.objs = [1] {
RndSeed @[0] { };
};

ProgType_List @.types = [1] {
DynEnumType @[0] { 
DynEnumItem_List @.enums = [2] {
DynEnumItem @[0] { };
DynEnumItem @[1] { };
};
};
};

ProgVar_List @.args = [3] {
ProgVar @[0] { };
ProgVar @[1] { };
ProgVar @[2] { };
};

ProgVar_List @.vars = [8] {
ProgVar @[0] { };
ProgVar @[1] { };
ProgVar @[2] { };
ProgVar @[3] { };
ProgVar @[4] { };
ProgVar @[5] { };
ProgVar @[6] { };
ProgVar @[7] { };
};

ProgEl_List @.init_code = [5] {
AssignExpr @[0] { };
MethodCall @[1] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
AssignExpr @[2] { };
IfElse @[3] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { };
};

ProgEl_List @.false_code = [1] {
MethodCall @[0] { };
};
};
IfGuiPrompt @[4] { 
ProgEl_List @.yes_code = [2] {
MethodCall @[0] { };
PrintExpr @[1] { };
};
};
};

ProgEl_List @.prog_code = [8] {
AssignExpr @[0] { };
MethodCall @[1] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MemberAssign @[2] { };
If @[3] { 
ProgEl_List @.true_code = [2] {
MethodCall @[0] { };
PrintExpr @[1] { };
};
};
AssignExpr @[4] { };
WhileLoop @[5] { 
ProgEl_List @.loop_code = [3] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
NetCounterIncr @[1] { };
IfBreak @[2] { };
};
};
MethodCall @[6] { };
If @[7] { 
ProgEl_List @.true_code = [1] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [1] {
ProgArg @[0] { };
};
};
};
};
};
};
Program @[2] { 
ProgVar_List @.args = [2] {
ProgVar @[0] { };
ProgVar @[1] { };
};

ProgVar_List @.vars = [7] {
ProgVar @[0] { };
ProgVar @[1] { };
ProgVar @[2] { };
ProgVar @[3] { };
ProgVar @[4] { };
ProgVar @[5] { };
ProgVar @[6] { };
};

ProgEl_List @.init_code = [2] {
NetCounterInit @[0] { };
AssignExpr @[1] { };
};

ProgEl_List @.prog_code = [10] {
NetCounterInit @[0] { };
AssignExpr @[1] { };
MethodCall @[2] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MethodCall @[3] { };
NetDataLoop @[4] { 
ProgEl_List @.loop_code = [1] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
};
};
IfElse @[5] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { };
};
};
MethodCall @[6] { };
If @[7] { 
ProgEl_List @.true_code = [2] {
MethodCall @[0] { };
If @[1] { 
ProgEl_List @.true_code = [2] {
MethodCall @[0] { };
MethodCall @[1] { };
};
};
};
};
MethodCall @[8] { };
ProgramCall @[9] { 
ProgArg_List @.prog_args = [1] {
ProgArg @[0] { };
};
};
};
};
Program @[3] { 
ProgVar_List @.args = [2] {
ProgVar @[0] { };
ProgVar @[1] { };
};

ProgVar_List @.vars = [4] {
ProgVar @[0] { };
ProgVar @[1] { };
ProgVar @[2] { };
ProgVar @[3] { };
};

ProgEl_List @.init_code = [1] {
NetCounterInit @[0] { };
};

ProgEl_List @.prog_code = [8] {
NetCounterInit @[0] { };
MethodCall @[1] { };
WhileLoop @[2] { 
ProgEl_List @.loop_code = [3] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
NetCounterIncr @[1] { };
MethodCall @[2] { };
};
};
MethodCall @[3] { };
If @[4] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { };
};
};
If @[5] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { };
};
};
ProgramCall @[6] { 
ProgArg_List @.prog_args = [1] {
ProgArg @[0] { };
};
};
NetUpdateView @[7] { };
};
};
Program @[4] { 
ProgVar_List @.args = [2] {
ProgVar @[0] { };
ProgVar @[1] { };
};

ProgVar_List @.vars = [3] {
ProgVar @[0] { };
ProgVar @[1] { };
ProgVar @[2] { };
};

ProgEl_List @.init_code = [1] {
NetCounterInit @[0] { };
};

ProgEl_List @.prog_code = [10] {
NetCounterInit @[0] { };
MethodCall @[1] { };
ProgramCall @[2] { 
ProgArg_List @.prog_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[3] { };
IfElse @[4] { 
ProgEl_List @.true_code = [1] {
AssignExpr @[0] { };
};

ProgEl_List @.false_code = [1] {
AssignExpr @[0] { };
};
};
WhileLoop @[5] { 
ProgEl_List @.loop_code = [4] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [1] {
ProgArg @[0] { };
};
};
NetCounterIncr @[1] { };
IfContinue @[2] { };
IfBreak @[3] { };
};
};
MethodCall @[6] { };
If @[7] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { };
};
};
If @[8] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { };
};
};
NetUpdateView @[9] { };
};
};
Program @[5] { 
ProgVar_List @.args = [1] {
ProgVar @[0] { };
};

ProgVar_List @.vars = [1] {
ProgVar @[0] { };
};

ProgEl_List @.prog_code = [2] {
MethodCall @[0] { };
NetUpdateView @[1] { };
};
};
Program @[6] { 
ProgObjList @.objs = [1] {
LayerWriter @[0] { 
LayerDataEl_List @.layer_data = [3] {
LayerWriterEl @[0] { };
LayerWriterEl @[1] { };
LayerWriterEl @[2] { };
};
};
};

ProgVar_List @.args = [2] {
ProgVar @[0] { };
ProgVar @[1] { };
};

ProgVar_List @.vars = [1] {
ProgVar @[0] { };
};

ProgEl_List @.init_code = [2] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
};

ProgEl_List @.prog_code = [2] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[1] { };
};
};
Program @[7] { 
ProgObjList @.objs = [1] {
NetMonitor @[0] { 
NetMonItem_List @.items = [9] {
NetMonItem @[0] { };
NetMonItem @[1] { };
NetMonItem @[2] { };
NetMonItem @[3] { };
NetMonItem @[4] { };
NetMonItem @[5] { };
NetMonItem @[6] { };
NetMonItem @[7] { };
NetMonItem @[8] { };
};
};
};

ProgVar_List @.args = [1] {
ProgVar @[0] { };
};

ProgVar_List @.vars = [2] {
ProgVar @[0] { };
ProgVar @[1] { };
};

ProgEl_List @.init_code = [3] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MethodCall @[2] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
};

ProgEl_List @.prog_code = [4] {
MethodCall @[0] { };
MethodCall @[1] { };
MethodCall @[2] { };
MethodCall @[3] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
};
};
Program @[8] { 
ProgObjList @.objs = [1] {
NetMonitor @[0] { 
NetMonItem_List @.items = [8] {
NetMonItem @[0] { };
NetMonItem @[1] { };
NetMonItem @[2] { };
NetMonItem @[3] { };
NetMonItem @[4] { };
NetMonItem @[5] { };
NetMonItem @[6] { };
NetMonItem @[7] { };
};
};
};

ProgVar_List @.args = [1] {
ProgVar @[0] { };
};

ProgVar_List @.vars = [3] {
ProgVar @[0] { };
ProgVar @[1] { };
ProgVar @[2] { };
};

ProgEl_List @.init_code = [4] {
AssignExpr @[0] { };
MethodCall @[1] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[2] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MethodCall @[3] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
};

ProgEl_List @.prog_code = [6] {
MethodCall @[0] { };
MethodCall @[1] { };
AssignExpr @[2] { };
MethodCall @[3] { 
ProgArg_List @.meth_args = [3] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
};
};
MethodCall @[4] { 
ProgArg_List @.meth_args = [3] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
};
};
MethodCall @[5] { };
};
};
Program @[9] { 
ProgVar_List @.args = [1] {
ProgVar @[0] { };
};

ProgVar_List @.vars = [6] {
ProgVar @[0] { };
ProgVar @[1] { };
ProgVar @[2] { };
ProgVar @[3] { };
ProgVar @[4] { };
ProgVar @[5] { };
};

ProgEl_List @.prog_code = [6] {
IfReturn @[0] { };
MiscCall @[1] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MiscCall @[2] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
AssignExpr @[3] { };
MethodCall @[4] { 
ProgArg_List @.meth_args = [4] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
ProgArg @[3] { };
};
};
MethodCall @[5] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
};
};
};
};

DataViewer_List @.viewers = [1] {
MainWindowViewer @[0] { 
ToolBar_List @.toolbars = [1] {
ToolBar @[0] { };
};

FrameViewer_List @.frames = [3] {
tabBrowseViewer @[0] { };
PanelViewer @[1] { };
T3DataViewer @[2] { 
T3DataViewFrame_List @.frames = [1] {
T3DataViewFrame @[0] { 
T3DataView_List @.children = [1] {
NetView @[0] { 
ScaleRange_List @.scale_ranges = [1] {
ScaleRange @[0] { };
};
};
};
};
};
};
};

DockViewer_List @.docks = [1] {
ToolBoxDockViewer @[0] { };
};
};
};

Network_Group @.networks = [1] {
LeabraNetwork @[0] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @[0] { };
UserDataItem @[1] { };
UserDataItem @[2] { };
UserDataItem @[3] { };
UserDataItem @[4] { };
UserDataItem @[5] { };
UserDataItem @[6] { };
UserDataItem @[7] { };
UserDataItem @[8] { };
UserDataItem @[9] { };
UserDataItem @[10] { };
UserDataItem @[11] { };
UserDataItem @[12] { };
UserDataItem @[13] { };
UserDataItem @[14] { };
UserDataItem @[15] { };
UserDataItem @[16] { };
UserDataItem @[17] { };
UserDataItem @[18] { };
};

BaseSpec_Group @.specs = [4] {
LeabraUnitSpec @[0] { };
LeabraLayerSpec @[1] { 
BaseSpec_Group @.children = [1] {
LeabraLayerSpec @[0] { };
};
};
FullPrjnSpec @[2] { };
LeabraConSpec @[3] { 
BaseSpec_Group @.children = [1] {
LeabraBiasSpec @[0] { };
};
};
};

Layer_Group @.layers = [5] {
LeabraLayer @[0] { 
Unit_Group @.units = [100] {
};
};
LeabraLayer @[1] { 
Projection_Group @.projections = [2] {
LeabraPrjn @[0] { };
LeabraPrjn @[1] { };
};

Unit_Group @.units = [100] {
};
};
LeabraLayer @[2] { 
Projection_Group @.projections = [2] {
LeabraPrjn @[0] { };
LeabraPrjn @[1] { };
};

Unit_Group @.units = [100] {
};
};
LeabraLayer @[3] { 
Projection_Group @.projections = [2] {
LeabraPrjn @[0] { };
LeabraPrjn @[1] { };
};

Unit_Group @.units = [100] {
};
};
LeabraLayer @[4] { 
Projection_Group @.projections = [1] {
LeabraPrjn @[0] { };
};

Unit_Group @.units = [100] {
};
};
};
};
};
};
LeabraProject .projects[0] {
name="Project_0";
desc=;
tags=;
version {
major=0;
minor=0;
step=0;
};
wiki_url {
sync=0;
wiki=;
url=;
};
templates {
name=;
el_typ=taBase;
el_def=0;
};
docs {
name=;
el_typ=taDoc;
el_def=0;
};
wizards {
name=;
el_typ=LeabraWizard;
el_def=0;
LeabraWizard @[0] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @[0] {
name="NO_CLIP";
value 1 0=1;
};
};
name="LeabraWizard_0";
auto_open=1;
n_layers=5;
layer_cfg {
name=;
el_typ=LayerWizEl;
el_def=0;
LayerWizEl @[0] {
name="Input";
n_units=25;
io_type=INPUT;
};
LayerWizEl @[1] {
name="Hidden_0";
n_units=25;
io_type=HIDDEN;
};
LayerWizEl @[2] {
name="Hidden_1";
n_units=25;
io_type=HIDDEN;
};
LayerWizEl @[3] {
name="Hidden_2";
n_units=25;
io_type=HIDDEN;
};
LayerWizEl @[4] {
name="Output";
n_units=25;
io_type=OUTPUT;
};
};
connectivity=BIDIRECTIONAL;
default_net_type=LeabraNetwork;
};
};
edits {
name=;
el_typ=SelectEdit;
el_def=0;
};
data {
name=;
el_typ=DataTable;
el_def=0;
DataTable_Group @.gp[0] {
name="InputData";
el_typ=DataTable;
el_def=0;
DataTable @[0] {
name="StdInputData";
desc=;
data {
name="data";
el_typ=String_Data;
el_def=0;
String_Data @[0] {
name="Name";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[10] ;;;;;;;;;;
};
};
float_Data @[1] {
name="Input";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=1;
cell_geom{ 10;10;};
calc_expr {
expr=;
};
ar {
name=;
[10 10 10] 1;1;0;0;0;1;1;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;1;
0;1;0;1;0;0;0;0;0;1;
0;0;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
1;0;0;0;1;1;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;1;1;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;1;0;1;0;1;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;0;1;0;0;1;0;0;
0;0;1;0;1;0;1;1;0;1;
0;0;0;1;0;1;0;0;0;0;
0;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
1;1;0;1;1;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;0;0;1;1;0;1;0;
0;1;1;0;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;1;
1;1;0;0;0;1;1;1;0;0;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;1;0;0;0;0;0;1;1;
1;0;0;0;1;0;0;0;1;0;
0;0;0;0;0;1;0;0;1;1;
0;1;1;0;0;0;0;0;1;1;
0;0;1;0;0;1;0;0;0;0;
0;0;1;0;1;0;0;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;1;
0;1;1;0;1;0;0;1;0;0;
1;1;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;1;1;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;1;
1;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;1;1;0;0;
1;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;1;0;0;1;0;1;0;0;0;
1;0;0;0;1;1;1;0;0;0;
0;0;0;0;1;0;0;1;0;0;
1;0;1;0;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;0;0;0;1;1;1;0;1;
0;0;0;0;1;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;1;1;1;0;0;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;0;1;0;1;
0;0;0;1;1;0;0;0;1;0;
0;0;1;0;0;0;0;0;1;1;
0;1;0;1;0;1;0;1;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
0;0;0;1;0;1;1;1;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;1;0;0;1;0;
0;0;1;1;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;1;0;1;
0;0;0;1;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;0;
0;1;0;1;0;1;0;0;0;0;
1;0;0;0;0;0;0;1;1;0;
1;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;1;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;1;0;1;0;0;0;0;0;1;
0;1;0;0;0;0;1;1;0;0;
0;1;0;1;0;1;0;1;0;1;
0;0;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;0;1;0;0;1;1;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
1;1;0;0;1;0;0;1;1;0;
1;0;1;0;0;1;1;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;0;1;0;0;0;1;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
};
};
float_Data @[2] {
name="Output";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=1;
cell_geom{ 10;10;};
calc_expr {
expr=;
};
ar {
name=;
[10 10 10] 0;0;0;0;1;0;0;1;1;0;
1;1;0;1;1;0;1;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;1;
0;0;0;0;0;0;1;0;0;0;
1;0;0;0;0;1;1;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;1;0;1;0;0;
0;0;0;0;0;1;0;1;0;0;
0;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;0;0;1;0;
0;1;0;1;0;1;1;0;0;0;
0;0;0;0;0;0;0;1;1;1;
0;1;1;0;0;0;0;0;1;1;
1;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;1;1;0;0;0;1;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;1;0;1;1;
0;1;0;0;1;0;0;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;1;0;0;0;
0;1;0;1;0;0;0;0;1;1;
1;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;0;0;1;
1;0;1;0;1;0;0;0;0;1;
0;1;0;0;0;0;0;0;1;0;
0;0;0;1;0;0;0;0;0;0;
1;0;0;0;1;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;1;0;0;0;0;0;1;
1;0;1;1;0;0;0;0;1;1;
0;0;0;0;0;1;0;1;1;0;
1;0;1;0;0;0;0;0;0;0;
1;0;0;1;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;1;0;0;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;1;0;0;
0;1;1;1;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;1;1;
0;0;1;0;0;1;0;1;0;1;
0;1;0;0;0;1;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;1;
0;1;1;1;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;1;0;1;0;1;1;1;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;1;0;1;0;
1;1;0;0;0;1;0;0;0;0;
0;1;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;1;0;0;0;1;1;1;0;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;1;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;1;0;1;0;
1;0;0;0;0;1;0;0;1;0;
1;0;0;1;0;0;0;0;0;1;
1;0;0;0;0;0;1;0;1;1;
0;0;1;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;1;
0;1;0;0;0;1;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
0;0;0;1;0;1;1;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;1;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;1;1;0;1;0;
0;1;1;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;1;
0;1;0;0;0;0;0;0;0;0;
0;1;1;1;0;1;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;1;0;0;
1;1;1;0;0;1;0;1;0;0;
0;0;0;1;1;1;0;1;0;0;
1;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;1;
};
};
};
data_flags=SAVE_ROWS|AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
};
};
DataTable_Group @.gp[1] {
name="OutputData";
el_typ=DataTable;
el_def=0;
DataTable @[0] {
name="TrialOutputData";
desc=;
data {
name="data";
el_typ=int_Data;
el_def=0;
int_Data @[0] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @[0] {
name="NARROW";
value 1 0=1;
};
};
name="batch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[10] 9;9;9;9;9;9;9;9;9;9;
};
};
int_Data @[1] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @[0] {
name="NARROW";
value 1 0=1;
};
};
name="epoch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[10] 9;9;9;9;9;9;9;9;9;9;
};
};
int_Data @[2] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @[0] {
name="NARROW";
value 1 0=1;
};
};
name="trial";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[10] 0;1;2;3;4;5;6;7;8;9;
};
};
String_Data @[3] {
name="trial_name";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[10] ;;;;;;;;;;
};
};
String_Data @[4] {
name="group_name";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[10] ;;;;;;;;;;
};
};
int_Data @[5] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @[0] {
name="NARROW";
value 1 0=1;
};
};
name="phase_no";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[10] 2;2;2;2;2;2;2;2;2;2;
};
};
float_Data @[6] {
name="minus_cycles";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[10] 54;54;53;60;57;52;55;60;60;58;
};
};
float_Data @[7] {
name="sse";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[10] 2.1934171;0;2.0287814;1.4540359;1.0213962;0.61404145;0;2.1024613;0;0.9278807;
};
};
float_Data @[8] {
name="ext_rew";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[10] 0;0;0;0;0;0;0;0;0;0;
};
};
};
data_flags=SAVE_ROWS|AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
};
DataTable @[1] {
name="EpochOutputData";
desc=;
data {
name="data";
el_typ=int_Data;
el_def=0;
float_Data @[0] {
name="epoch_time_tot";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[140] 0.47999999;0.50999999;0.60000002;0.47999999;0.98000002;0.54000002;0.46000001;0.46000001;0.46000001;0.44999999;
0.52999997;0.49000001;0.55000001;0.50999999;0.5;0.49000001;0.49000001;0.47;0.49000001;0.47999999;
0.47999999;0.5;0.49000001;0.50999999;0.47999999;0.47999999;0.46000001;0.47999999;0.47999999;0.44999999;
0.52999997;0.47;0.47;0.47999999;0.47;0.47;0.51999998;0.47;0.46000001;0.44999999;
0.5;0.47999999;0.47999999;0.54000002;0.50999999;0.47999999;0.60000002;2.1600001;0.5;0.5;
0.49000001;0.49000001;0.47999999;0.47999999;0.47999999;0.47;0.47;0.5;0.60000002;0.49000001;
0.49000001;0.54000002;0.50999999;0.51999998;0.5;0.47;0.47;0.47999999;0.55000001;0.46000001;
0.51999998;0.47999999;0.5;0.50999999;0.47999999;0.50999999;0.56999999;0.58999997;0.52999997;0.49000001;
0.51999998;0.49000001;0.47999999;0.5;0.47999999;0.47999999;0.47;0.47;0.46000001;0.46000001;
0.47999999;0.47999999;0.47999999;0.47999999;0.47;0.47;0.47;0.47;0.5;0.47;
0.49000001;0.49000001;0.47999999;0.63999999;0.60000002;0.47999999;0.47;0.47;0.50999999;0.50999999;
0.49000001;0.49000001;0.47999999;0.54000002;0.47999999;0.47999999;0.47;0.49000001;0.47;0.47;
0.47999999;0.47999999;0.47;0.49000001;0.47999999;0.47;0.49000001;0.47999999;0.47999999;0.47;
0.49000001;0.49000001;0.54000002;0.47999999;0.47999999;0.47;0.47999999;0.47;0.5;0.46000001;
};
};
float_Data @[1] {
name="epoch_time_usr";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[140] 0.41;0.46000001;0.54000002;0.44;0.91000003;0.47999999;0.44;0.40000001;0.41999999;0.40000001;
0.44999999;0.44999999;0.46000001;0.46000001;0.44999999;0.44;0.43000001;0.44999999;0.44999999;0.44;
0.43000001;0.47999999;0.44;0.46000001;0.43000001;0.44999999;0.44;0.44;0.41999999;0.41;
0.46000001;0.44999999;0.43000001;0.44;0.43000001;0.41999999;0.46000001;0.41999999;0.41999999;0.41999999;
0.46000001;0.44;0.43000001;0.47;0.46000001;0.43000001;0.51999998;0.63999999;0.47;0.44999999;
0.44999999;0.44999999;0.44;0.41999999;0.44;0.44999999;0.43000001;0.46000001;0.55000001;0.38999999;
0.44999999;0.47999999;0.47;0.47999999;0.43000001;0.43000001;0.41999999;0.41999999;0.47;0.41999999;
0.49000001;0.44;0.43000001;0.47;0.41999999;0.46000001;0.47;0.43000001;0.46000001;0.41999999;
0.47999999;0.41999999;0.41999999;0.44;0.43000001;0.43000001;0.41999999;0.44;0.43000001;0.41;
0.44;0.44999999;0.43000001;0.41;0.43000001;0.41999999;0.43000001;0.41999999;0.46000001;0.41;
0.44;0.44999999;0.44999999;0.50999999;0.5;0.44;0.41999999;0.43000001;0.43000001;0.41999999;
0.44;0.44999999;0.44999999;0.46000001;0.44;0.43000001;0.41999999;0.44999999;0.44;0.41999999;
0.43000001;0.44;0.43000001;0.41999999;0.44;0.41999999;0.41999999;0.44999999;0.44;0.44;
0.44999999;0.46000001;0.47;0.44;0.44;0.44999999;0.44999999;0.41999999;0.46000001;0.41999999;
};
};
int_Data @[2] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @[0] {
name="NARROW";
value 1 0=1;
};
};
name="batch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[140] 0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;1;1;1;1;1;
2;2;2;2;2;2;2;2;2;2;
3;3;3;3;3;3;3;3;3;3;
4;4;4;4;4;4;4;0;0;0;
1;1;1;1;1;1;1;1;1;1;
2;2;2;2;2;2;2;2;2;2;
3;3;3;3;3;3;3;3;3;3;
4;4;4;4;4;4;4;4;4;4;
5;5;5;5;5;5;5;5;5;5;
6;6;6;6;6;6;6;6;6;6;
7;7;7;7;7;7;7;7;7;7;
8;8;8;8;8;8;8;8;8;8;
9;9;9;9;9;9;9;9;9;9;
};
};
int_Data @[3] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @[0] {
name="NARROW";
value 1 0=1;
};
};
name="epoch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[140] 0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
};
};
float_Data @[4] {
name="avg_sse";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[140] 24.081814;19.819408;18.032669;14.907992;13.794078;10.176245;9.1064272;3.3237138;1.7865232;1.1613957;
23.461897;20.067919;20.648685;17.720463;14.613347;12.734204;8.4003077;4.0409799;2.2130821;0.81431007;
22.917881;21.936661;20.515478;17.143227;16.844213;11.526081;7.3359466;2.7771959;1.8548715;0.76316667;
25.431883;20.914371;18.559303;16.116182;11.986032;8.9533491;7.6866212;6.4909492;2.0184066;1.2534828;
23.647635;21.847435;18.022299;16.658825;13.805182;10.413716;5.9420247;4.4553118;2.2771261;1.3542712;
22.838652;21.887802;19.197809;19.871288;16.061808;13.086191;8.9686604;5.8964152;2.8842852;2.2577462;
23.397615;20.69244;18.080135;14.715207;11.147596;7.6938224;5.1896448;2.8019519;1.3556933;0.8465578;
24.531317;21.561428;17.983351;18.515614;13.004519;9.8349094;8.2267008;2.3755467;1.5726649;0.94675618;
22.941301;19.730005;20.160954;13.634165;8.580246;7.0773516;4.1802697;3.1287773;1.1321418;0.4294948;
24.871704;20.5215;21.637794;14.792383;15.033806;8.5540152;5.8674073;3.7937934;1.8499378;1.3605913;
24.352085;20.341221;19.958652;13.918195;12.357799;7.7666183;2.4553409;1.3654443;0.7263099;0.32617253;
23.059624;21.815334;18.634912;17.025625;13.438738;11.749847;8.830328;3.7266903;1.6624987;0.71378201;
23.773388;21.287979;18.631329;18.617043;16.064747;12.85467;5.8079653;8.8472958;4.3010855;1.1707104;
23.559052;21.106766;18.482174;17.45632;13.460257;11.649578;5.5347056;4.2328095;2.1145289;1.0342014;
};
};
float_Data @[5] {
name="cnt_err";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[140] 10;10;10;10;10;10;10;10;9;8;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;9;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;8;
10;10;10;10;10;10;10;10;9;8;
10;10;10;10;10;10;10;10;9;7;
10;10;10;10;10;10;10;10;8;5;
10;10;10;10;10;10;10;10;9;8;
10;10;10;10;10;10;10;10;9;3;
10;10;10;10;10;10;10;10;10;6;
10;10;10;10;10;10;10;10;10;8;
10;10;10;10;10;10;10;10;9;7;
};
};
float_Data @[6] {
name="avg_ext_rew";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[140] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
};
};
float_Data @[7] {
name="avg_cycles";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
ar {
name=;
[140] 60;60;59.799999;60;60;58.599998;59.599998;57.099998;55.5;56.099998;
60;60;60;59.900002;59.900002;58.299999;59.099998;57.700001;57.599998;56.5;
60;60;60;60;60;60;58.599998;57.599998;56.200001;54.599998;
60;60;60;60;60;59.799999;60;58;57.900002;56.599998;
60;60;59.700001;59.700001;60;59;59.5;59.099998;58.200001;58;
60;58.799999;60;59.5;59.900002;59.299999;58.5;58.200001;56.900002;55.400002;
60;60;60;60;60;58.900002;58.200001;56.099998;55;54.200001;
60;60;60;59.799999;59.299999;60;59.700001;58.200001;55.799999;54.5;
60;60;60;60;59.700001;59.099998;59.900002;59;57.200001;56;
59.700001;60;60;60;60;59.099998;59.299999;57;56.400002;57.400002;
59.799999;60;60;59.599998;59.799999;59.799999;58.099998;58;56.900002;55.700001;
59.900002;60;60;59.5;59.700001;60;59;56.5;55.400002;56;
59.5;60;59.5;60;59.599998;59.799999;58.299999;58.599998;57.599998;55.299999;
60;60;60;59.599998;59.299999;59.099998;59.5;57.599998;55.799999;56.299999;
};
};
};
data_flags=SAVE_ROWS|AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
};
};
DataTable_Group @.gp[2] {
name="AnalysisData";
el_typ=DataTable;
el_def=0;
};
};
data_proc {
name=;
el_typ=taDataProc;
el_def=0;
taDataProc @[0] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @[0] {
name="NO_CLIP";
value 1 0=1;
};
};
name="data_base";
};
taDataAnal @[1] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @[0] {
name="NO_CLIP";
value 1 0=1;
};
};
name="data_anal";
};
taDataGen @[2] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @[0] {
name="NO_CLIP";
value 1 0=1;
};
};
name="data_gen";
};
taImageProc @[3] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @[0] {
name="NO_CLIP";
value 1 0=1;
};
};
name="image_proc";
};
};
programs {
name=;
el_typ=Program;
el_def=0;
step_prog=NULL;
tags=;
desc=;
Program @[0] {
name="MakeRndInputData";
tags=;
desc="configure input data table for given network, and initialize with random patterns";
flags=;
objs {
name=;
el_typ=taNBase;
el_def=0;
};
types {
name=;
el_typ=ProgType;
el_def=0;
};
args {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=.projects[0].networks[0]$0$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="network to train";
};
ProgVar @[1] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=.projects[0].data.gp[0][0]$1$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="datatable with training patterns";
};
ProgVar @[2] {
name="n_rows";
var_type=T_Int;
int_val=10;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="number of rows to create in datatable";
};
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="input_size";
var_type=T_Int;
int_val=100;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
reference=0;
desc=;
};
ProgVar @[1] {
name="ApplyInputs";
var_type=T_Object;
object_type=Program;
object_val=.projects[0].programs.gp[0][6]$2$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc=;
};
ProgVar @[2] {
name="LeabraWizard_0";
var_type=T_Object;
object_type=LeabraWizard;
object_val=.projects[0].wizards[0]$3$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc=;
};
};
functions {
name=;
el_typ=Function;
el_def=0;
};
load_code {
name=;
el_typ=ProgEl;
el_def=0;
};
init_code {
name=;
el_typ=ProgEl;
el_def=0;
};
prog_code {
name=;
el_typ=ProgEl;
el_def=0;
MethodCall @[0] {
desc=;
flags=;
result_var=NULL;
obj=.projects[0].programs[0].vars[2]$4$;
method=Wizard::UpdateInputDataFmNet;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=0;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable_ptr;
type="DataTable*";
name="data_table";
required=0;
def_val=;
expr {
expr="input_data";
};
};
};
};
MethodCall @[1] {
desc=;
flags=;
result_var=NULL;
obj=.projects[0].programs[0].args[1]$5$;
method=DataTable::EnforceRows;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=int;
type="int";
name="n_rows";
required=0;
def_val=;
expr {
expr="n_rows";
};
};
};
};
AssignExpr @[2] {
desc=;
flags=;
result_var=.projects[0].programs[0].vars[0]$6$;
expr {
expr="network.layers[0].un_geom.n";
};
};
DataGenCall @[3] {
desc=;
flags=;
result_var=NULL;
object_type=taDataGen;
method=taDataGen::PermutedBinary;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
ProgArg @[1] {
arg_type=const_taString_ref;
type="const taString&";
name="col_nm";
required=1;
def_val=;
expr {
expr="\"\"";
};
};
ProgArg @[2] {
arg_type=int;
type="int";
name="n_on";
required=1;
def_val=;
expr {
expr="input_size / 4";
};
};
ProgArg @[3] {
arg_type=float;
type="float";
name="on_val";
required=0;
def_val="1.0f";
expr {
expr="1.0";
};
};
ProgArg @[4] {
arg_type=float;
type="float";
name="off_val";
required=0;
def_val="0.0f";
expr {
expr="0.0";
};
};
};
};
};
};
Program @[1] {
name="LeabraStartup";
tags="Leabra, Startup";
desc="run project in the background (replaces leabra_startup.css)
command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batches=xxx] [tag=xxx]";
flags=STARTUP_RUN;
objs {
name=;
el_typ=taNBase;
el_def=0;
};
types {
name=;
el_typ=ProgType;
el_def=0;
};
args {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$0$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK;
reference=0;
desc="network to operate on -- updates batch counter on network and passes it to train program";
};
ProgVar @[1] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$1$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK;
reference=0;
desc="datatable with training patterns -- not used by this program, but passed to train program";
};
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="batch";
var_type=T_Object;
object_type=Program;
object_val=.projects[0].programs.gp[0][0]$7$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="set this to point to your batch process";
};
ProgVar @[1] {
name="tag";
var_type=T_String;
string_val=;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc=;
};
ProgVar @[2] {
name="log_dir";
var_type=T_String;
string_val=;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="log file directory";
};
ProgVar @[3] {
name="log_file_nm";
var_type=T_String;
string_val=;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="name of log file";
};
ProgVar @[4] {
name="EpochOutputData";
var_type=T_Object;
object_type=DataTable;
object_val=.projects[0].data.gp[1][1]$8$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc=;
};
ProgVar @[5] {
name="TrialOutputData";
var_type=T_Object;
object_type=DataTable;
object_val=.projects[0].data.gp[1][0]$9$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc=;
};
};
functions {
name=;
el_typ=Function;
el_def=0;
};
load_code {
name=;
el_typ=ProgEl;
el_def=0;
};
init_code {
name=;
el_typ=ProgEl;
el_def=0;
};
prog_code {
name=;
el_typ=ProgEl;
el_def=0;
IfReturn @[0] {
desc="don't run if running in the gui!";
flags=;
cond {
expr="taMisc::gui_active";
};
};
Comment @[1] {
desc="add our special args from command line";
flags=;
};
MiscCall @[2] {
desc=;
flags=;
result_var=NULL;
object_type=taMisc;
method=taMisc::AddArgName;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="const taString&";
name="flag";
required=0;
def_val="\"\"";
expr {
expr="\"tag=\"";
};
};
ProgArg @[1] {
arg_type=const_taString_ref;
type="const taString&";
name="name";
required=0;
def_val="\"\"";
expr {
expr="\"FileTag\"";
};
};
};
};
MiscCall @[3] {
desc=;
flags=;
result_var=NULL;
object_type=taMisc;
method=taMisc::AddArgName;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="const taString&";
name="flag";
required=0;
def_val="\"\"";
expr {
expr="\"logdir=\"";
};
};
ProgArg @[1] {
arg_type=const_taString_ref;
type="const taString&";
name="name";
required=0;
def_val="\"\"";
expr {
expr="\"LogDir\"";
};
};
};
};
RegisterArgs @[4] {
desc="This is KEY!!! actuall processes all args, including those from ProgVarFmArg guys below";
flags=;
};
Comment @[5] {
desc="Initialize and set variables from args";
flags=;
};
PrintExpr @[6] {
desc=;
flags=;
expr {
expr="\"Loaded project: \" << .projects[0].file_name";
};
};
MethodCall @[7] {
desc=;
flags=;
result_var=NULL;
obj=.projects[0].programs[1].vars[0]$10$;
method=Program::Init;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MiscCall @[8] {
desc=;
flags=;
result_var=.projects[0].programs[1].vars[1]$11$;
object_type=taMisc;
method=taMisc::FindArgByName;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="const taString&";
name="nm";
required=0;
def_val="\"\"";
expr {
expr="\"FileTag\"";
};
};
};
};
MiscCall @[9] {
desc=;
flags=;
result_var=.projects[0].programs[1].vars[2]$12$;
object_type=taMisc;
method=taMisc::FindArgByName;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="const taString&";
name="nm";
required=0;
def_val="\"\"";
expr {
expr="\"LogDir\"";
};
};
};
};
ProgVarFmArg @[10] {
desc=;
flags=;
prog=.projects[0].programs.gp[0][1]$13$;
var_name="max_epoch";
arg_name="epochs";
};
ProgVarFmArg @[11] {
desc=;
flags=;
prog=$7$;
var_name="max_batch";
arg_name="batches";
};
Comment @[12] {
desc="Set log files";
flags=;
};
MethodCall @[13] {
desc="save args to file: last arg is to include dmem proc number";
flags=;
result_var=.projects[0].programs[1].vars[3]$14$;
obj=.projects[0].programs[1].vars[4]$15$;
method=taBase::GetFileNameFmProject;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="const taString&";
name="ext";
required=1;
def_val=;
expr {
expr="\".args\"";
};
};
ProgArg @[1] {
arg_type=const_taString_ref;
type="const taString&";
name="tag";
required=0;
def_val="\"\"";
expr {
expr="tag";
};
};
ProgArg @[2] {
arg_type=const_taString_ref;
type="const taString&";
name="subdir";
required=0;
def_val="\"\"";
expr {
expr="log_dir";
};
};
ProgArg @[3] {
arg_type=bool;
type="bool";
name="dmem_proc_no";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
MiscCall @[14] {
desc=;
flags=;
result_var=NULL;
object_type=taMisc;
method=taMisc::FullArgStringToFile;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="const taString&";
name="fname";
required=0;
def_val="\"\"";
expr {
expr="log_file_nm";
};
};
};
};
MethodCall @[15] {
desc="last arg is to include dmem proc number";
flags=;
result_var=$14$;
obj=$15$;
method=taBase::GetFileNameFmProject;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="const taString&";
name="ext";
required=1;
def_val=;
expr {
expr="\".epc.dat\"";
};
};
ProgArg @[1] {
arg_type=const_taString_ref;
type="const taString&";
name="tag";
required=0;
def_val="\"\"";
expr {
expr="tag";
};
};
ProgArg @[2] {
arg_type=const_taString_ref;
type="const taString&";
name="subdir";
required=0;
def_val="\"\"";
expr {
expr="log_dir";
};
};
ProgArg @[3] {
arg_type=bool;
type="bool";
name="dmem_proc_no";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
MethodCall @[16] {
desc="last arg is to restrict log to dmem_proc = 0";
flags=;
result_var=NULL;
obj=$15$;
method=DataTable::SaveDataLog;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="const taString&";
name="fname";
required=0;
def_val="\"\"";
expr {
expr="log_file_nm";
};
};
ProgArg @[1] {
arg_type=bool;
type="bool";
name="append";
required=0;
def_val="false";
expr {
expr="false";
};
};
ProgArg @[2] {
arg_type=bool;
type="bool";
name="dmem_proc_0";
required=0;
def_val="true";
expr {
expr="true";
};
};
};
};
MethodCall @[17] {
desc="last arg is to include dmem proc number";
flags=OFF;
result_var=$14$;
obj=.projects[0].programs[1].vars[5]$16$;
method=taBase::GetFileNameFmProject;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="const taString&";
name="ext";
required=1;
def_val=;
expr {
expr="\".trl.dat\"";
};
};
ProgArg @[1] {
arg_type=const_taString_ref;
type="const taString&";
name="tag";
required=0;
def_val="\"\"";
expr {
expr="tag";
};
};
ProgArg @[2] {
arg_type=const_taString_ref;
type="const taString&";
name="subdir";
required=0;
def_val="\"\"";
expr {
expr="log_dir";
};
};
ProgArg @[3] {
arg_type=bool;
type="bool";
name="dmem_proc_no";
required=0;
def_val="false";
expr {
expr="true";
};
};
};
};
MethodCall @[18] {
desc="last arg is to restrict log to dmem_proc = 0";
flags=OFF;
result_var=NULL;
obj=$16$;
method=DataTable::SaveDataLog;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="const taString&";
name="fname";
required=0;
def_val="\"\"";
expr {
expr="log_file_nm";
};
};
ProgArg @[1] {
arg_type=bool;
type="bool";
name="append";
required=0;
def_val="false";
expr {
expr="false";
};
};
ProgArg @[2] {
arg_type=bool;
type="bool";
name="dmem_proc_0";
required=0;
def_val="true";
expr {
expr="false";
};
};
};
};
OtherProgramVar @[19] {
desc=;
flags=;
other_prog=.projects[0].programs.gp[0][9]$17$;
set_other=1;
var_1=$11$;
var_2=NULL;
var_3=NULL;
var_4=NULL;
};
PrintExpr @[20] {
desc=;
flags=;
expr {
expr="\"Running: \" << batch.name";
};
};
ProgramCall @[21] {
desc=;
flags=;
target=$7$;
targ_ld_init="*LeabraBatch*";
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
};
};
};
};
Program_Group @.gp[0] {
name="LeabraAll_Std";
el_typ=Program;
el_def=0;
step_prog=.projects[0].programs.gp[0][4]$18$;
tags="Leabra, Std, All";
desc="The full set of programs for training a standard Leabra network";
Program @[0] {
name="LeabraBatch";
tags="Leabra, Std";
desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
flags=SHOW_STEP;
objs {
name=;
el_typ=taOBase;
el_def=0;
};
types {
name=;
el_typ=ProgType;
el_def=0;
};
args {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$0$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="network to operate on -- updates batch counter on network and passes it to train program";
};
ProgVar @[1] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$1$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="datatable with training patterns -- not used by this program, but passed to train program";
};
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="batch";
var_type=T_Int;
int_val=10;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
reference=0;
desc="batch counter";
};
ProgVar @[1] {
name="max_batch";
var_type=T_Int;
int_val=10;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="maximum number of batch runs to perform";
};
};
functions {
name=;
el_typ=Function;
el_def=0;
};
load_code {
name=;
el_typ=ProgEl;
el_def=0;
};
init_code {
name=;
el_typ=NetCounterInit;
el_def=0;
ProgramCall @[0] {
desc=;
flags=;
target=.projects[0].programs[0]$19$;
targ_ld_init="*MakeRndInputData*";
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
ProgArg @[2] {
arg_type=int;
type="int";
name="n_rows";
required=1;
def_val=;
expr {
expr="10";
};
};
};
};
NetCounterInit @[1] {
desc="initializes local batch counter and batch field on network";
flags=;
network_var=.projects[0].programs.gp[0][0].args[0]$20$;
local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$21$;
counter=Network::batch;
update_after=0;
};
};
prog_code {
name=;
el_typ=ProgEl;
el_def=0;
NetCounterInit @[0] {
desc="initializes local batch counter and batch field on network";
flags=;
network_var=$20$;
local_ctr_var=$21$;
counter=Network::batch;
update_after=0;
};
WhileLoop @[1] {
desc="the main loop over training runs";
flags=;
loop_code {
name=;
el_typ=ProgEl;
el_def=0;
ProgramCall @[0] {
desc="run the training program -- sets the network and input_data args";
flags=;
target=$13$;
targ_ld_init="*LeabraTrain*";
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
ProgArg @[2] {
arg_type=bool;
type="bool";
name="no_prompts";
required=1;
def_val=;
expr {
expr="true";
};
};
};
};
NetCounterIncr @[1] {
desc="increment the local batch counter and copy to network";
flags=;
network_var=$20$;
local_ctr_var=$21$;
counter=Network::batch;
update_after=0;
};
};
test {
expr="batch < max_batch";
};
};
};
};
Program @[1] {
name="LeabraTrain";
tags="Leabra, Std";
desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
flags=SHOW_STEP;
objs {
name=;
el_typ=RndSeed;
el_def=0;
RndSeed @[0] {
name="rnd_seed";
seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;};
mti=156;
};
};
types {
name=;
el_typ=DynEnumType;
el_def=0;
DynEnumType @[0] {
name="RndInitType";
desc=;
enums {
name=;
el_typ=DynEnumItem;
el_def=0;
DynEnumItem @[0] {
name="OLD_SEED";
value=0;
desc="use stored random seed value (recreates same sequence every time)";
};
DynEnumItem @[1] {
name="NEW_SEED";
value=1;
desc="generate new random seed (new sequence of random numbers)";
};
};
bits=0;
};
};
args {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$0$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="network to train";
};
ProgVar @[1] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$1$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="datatable with training patterns";
};
ProgVar @[2] {
name="no_prompts";
var_type=T_Bool;
bool_val=1;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
};
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="max_epoch";
var_type=T_Int;
int_val=10;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="maximum number of epochs to run";
};
ProgVar @[1] {
name="epoch";
var_type=T_Int;
int_val=10;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
reference=0;
desc="current epoch -- local copy, which is used to update network's epoch counter";
};
ProgVar @[2] {
name="train_mode";
var_type=T_HardEnum;
int_val=1;
hard_enum_type=Network::TrainMode;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
};
ProgVar @[3] {
name="rnd_init";
var_type=T_DynEnum;
dyn_enum_val {
enum_type=.projects[0].programs.gp[0][1].types[0]$22$;
value=0;
};
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="how to initialize the random numbers when the Init button is pressed";
};
ProgVar @[4] {
name="err_stopcrit";
var_type=T_Real;
real_val=0;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
};
ProgVar @[5] {
name="save_final_wts";
var_type=T_Bool;
bool_val=0;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="save the network's weights at the end of training?  Note: you can also just call SaveWeights program inside training loop to save more frequently";
};
ProgVar @[6] {
name="rnd_seed";
var_type=T_Object;
object_type=RndSeed;
object_val=.projects[0].programs.gp[0][1].objs[0]$23$;
objs_ptr=1;
flags=NULL_CHECK|USED;
reference=0;
desc="random seed that is used at start of training -- if OldSeed is called";
};
ProgVar @[7] {
name="train_timer";
var_type=T_Object;
object_type=TimeUsed;
object_val=.projects[0].networks[0].train_time$24$;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="records time used to train network (object lives on network -- this is a pointer to it)";
};
};
functions {
name=;
el_typ=Function;
el_def=0;
};
load_code {
name=;
el_typ=ProgEl;
el_def=0;
};
init_code {
name=;
el_typ=MethodCall;
el_def=0;
AssignExpr @[0] {
desc=;
flags=;
result_var=.projects[0].programs.gp[0][1].args[2]$25$;
expr {
expr="false";
};
};
MethodCall @[1] {
desc="check network to make sure it is ready to be run";
flags=;
result_var=NULL;
obj=.projects[0].programs.gp[0][1].args[0]$26$;
method=taBase::CheckConfig;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
AssignExpr @[2] {
desc="get our pointer to the network training time object";
flags=;
result_var=.projects[0].programs.gp[0][1].vars[7]$27$;
expr {
expr="network.train_time";
};
};
IfElse @[3] {
desc="initialize random seed (either old or new)";
flags=;
cond {
expr="rnd_init == OLD_SEED";
};
true_code {
name=;
el_typ=ProgEl;
el_def=0;
MethodCall @[0] {
desc="restore previous random seed (all runs produce same results)";
flags=;
result_var=NULL;
obj=.projects[0].programs.gp[0][1].vars[6]$28$;
method=RndSeed::OldSeed;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
false_code {
name=;
el_typ=ProgEl;
el_def=0;
MethodCall @[0] {
desc="new random numbers each time";
flags=;
result_var=NULL;
obj=$28$;
method=RndSeed::NewSeed;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
IfGuiPrompt @[4] {
desc="don't initialize weights without checking";
flags=;
prompt="Do you want to Initialize Network Weights";
yes_label="Yes";
no_label="No";
yes_code {
name=;
el_typ=ProgEl;
el_def=0;
MethodCall @[0] {
desc="initialize network weights: could also load pre-set weights or something else here";
flags=;
result_var=NULL;
obj=$26$;
method=Network::Init_Weights;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
PrintExpr @[1] {
desc=;
flags=;
expr {
expr="network.name << \" Weights Initialized\"";
};
};
};
};
};
prog_code {
name=;
el_typ=MethodCall;
el_def=0;
AssignExpr @[0] {
desc="get our pointer to the network training time object";
flags=;
result_var=$27$;
expr {
expr="network.train_time";
};
};
MethodCall @[1] {
desc="start timer to keep track of how long it takes to run entire training run";
flags=;
result_var=NULL;
obj=$27$;
method=TimeUsed::StartTimer;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="reset_used";
required=0;
def_val="true";
expr {
expr="true";
};
};
};
};
MemberAssign @[2] {
desc="set network's training mode to our local value";
flags=;
obj=$26$;
path="train_mode";
expr {
expr="train_mode";
};
update_after=0;
};
If @[3] {
desc=;
flags=;
cond {
expr="no_prompts";
};
true_code {
name=;
el_typ=ProgEl;
el_def=0;
MethodCall @[0] {
desc="initialize network weights: could also load pre-set weights or something else here";
flags=;
result_var=NULL;
obj=$26$;
method=Network::Init_Weights;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
PrintExpr @[1] {
desc=;
flags=;
expr {
expr="network.name << \" Weights Initialized\"";
};
};
};
};
AssignExpr @[4] {
desc="grab the official network epoch counter: will be initialized if needed by now";
flags=;
result_var=.projects[0].programs.gp[0][1].vars[1]$29$;
expr {
expr="network.epoch";
};
};
WhileLoop @[5] {
desc="main loop over epochs of training";
flags=;
loop_code {
name=;
el_typ=ProgramCall;
el_def=0;
ProgramCall @[0] {
desc="run the epoch program (one epoch), passes our network and input_data";
flags=;
target=.projects[0].programs.gp[0][2]$30$;
targ_ld_init="*LeabraEpoch*";
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
};
};
NetCounterIncr @[1] {
desc="increment the epoch counter (locally and on network)";
flags=;
network_var=$26$;
local_ctr_var=$29$;
counter=Network::epoch;
update_after=1;
};
IfBreak @[2] {
desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
flags=;
cond {
expr="network.cnt_err <= err_stopcrit";
};
};
};
test {
expr="epoch < max_epoch";
};
};
MethodCall @[6] {
desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
flags=;
result_var=NULL;
obj=$27$;
method=TimeUsed::EndTimer;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
If @[7] {
desc=;
flags=;
cond {
expr="save_final_wts";
};
true_code {
name=;
el_typ=ProgEl;
el_def=0;
ProgramCall @[0] {
desc=;
flags=;
target=$17$;
targ_ld_init="*SaveWeights*";
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=Network;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
};
};
};
};
};
};
Program @[2] {
name="LeabraEpoch";
tags="Leabra, Std";
desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
flags=SHOW_STEP;
objs {
name=;
el_typ=taOBase;
el_def=0;
};
types {
name=;
el_typ=ProgType;
el_def=0;
};
args {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$0$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="network to operate on";
};
ProgVar @[1] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$1$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="table of patterns to present to the network, one row at a time";
};
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="data_loop_order";
var_type=T_HardEnum;
int_val=1;
hard_enum_type=DataLoop::Order;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
};
ProgVar @[1] {
name="trial";
var_type=T_Int;
int_val=9;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
reference=0;
desc="current trial (event) within the epoch -- increments automatically";
};
ProgVar @[2] {
name="trial_mon_data";
var_type=T_Object;
object_type=DataTable;
object_val=$9$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
};
ProgVar @[3] {
name="epoch_timer";
var_type=T_Object;
object_type=TimeUsed;
object_val=.projects[0].networks[0].epoch_time$31$;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
};
ProgVar @[4] {
name="data_loop_index";
var_type=T_Int;
int_val=10;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
};
ProgVar @[5] {
name="compute_rel_netin";
var_type=T_Bool;
bool_val=0;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="call Compute_AvgAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
};
ProgVar @[6] {
name="adapt_rel_abs_netin";
var_type=T_Bool;
bool_val=0;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="use the computed rel and abs netin values to adapt the wt_scale.abs and wt_scale.rel params of network conspecs to match target values that are set on the projections -- see conspec rel_net_adapt and layerspec abs_net_adapt parmeters and comments for more information";
};
};
functions {
name=;
el_typ=Function;
el_def=0;
};
load_code {
name=;
el_typ=ProgEl;
el_def=0;
};
init_code {
name=;
el_typ=NetCounterInit;
el_def=0;
NetCounterInit @[0] {
desc="initialize trial counter (local variable and in the network)";
flags=;
network_var=.projects[0].programs.gp[0][2].args[0]$32$;
local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$33$;
counter=Network::trial;
update_after=0;
};
AssignExpr @[1] {
desc="get pointer to epoch timer object on network";
flags=;
result_var=.projects[0].programs.gp[0][2].vars[3]$34$;
expr {
expr="network.epoch_time";
};
};
};
prog_code {
name=;
el_typ=NetCounterInit;
el_def=0;
NetCounterInit @[0] {
desc="initialize trial counter (local variable and in the network)";
flags=;
network_var=$32$;
local_ctr_var=$33$;
counter=Network::trial;
update_after=0;
};
AssignExpr @[1] {
desc="get pointer to epoch timer object on network";
flags=;
result_var=$34$;
expr {
expr="network.epoch_time";
};
};
MethodCall @[2] {
desc="start the epoch timer to record computation time per epoch";
flags=;
result_var=NULL;
obj=$34$;
method=TimeUsed::StartTimer;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="reset_used";
required=0;
def_val="true";
expr {
expr="true";
};
};
};
};
MethodCall @[3] {
desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
flags=;
result_var=NULL;
obj=.projects[0].programs.gp[0][2].vars[2]$35$;
method=DataTable::ResetData;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
NetDataLoop @[4] {
desc="iterates over the events/rows of input_data, according to data_loop_order variable";
flags=;
loop_code {
name=;
el_typ=ProgramCall;
el_def=0;
ProgramCall @[0] {
desc="run the trial program, passing network and input_data";
flags=;
target=.projects[0].programs.gp[0][3]$36$;
targ_ld_init="*LeabraTrial*";
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
};
};
};
data_var=.projects[0].programs.gp[0][2].args[1]$37$;
index_var=.projects[0].programs.gp[0][2].vars[4]$38$;
order_var=.projects[0].programs.gp[0][2].vars[0]$39$;
order=PERMUTED;
item_idx_list{ 8;2;6;1;5;0;9;3;7;4;};
update_after=0;
dmem_nprocs=1;
dmem_this_proc=0;
};
IfElse @[5] {
desc="if full batch mode, update only at end of epoch";
flags=;
cond {
expr="network.wt_update == Network::BATCH";
};
true_code {
name=;
el_typ=ProgEl;
el_def=0;
MethodCall @[0] {
desc="final update of weights based on accumulated changes";
flags=;
result_var=NULL;
obj=$32$;
method=Network::Compute_Weights;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
false_code {
name=;
el_typ=ProgEl;
el_def=0;
};
};
MethodCall @[6] {
desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
flags=;
result_var=NULL;
obj=$32$;
method=LeabraNetwork::Compute_EpochStats;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
If @[7] {
desc=;
flags=NEW_EL;
cond {
expr="compute_rel_netin";
};
true_code {
name=;
el_typ=ProgEl;
el_def=0;
MethodCall @[0] {
desc=;
flags=;
result_var=NULL;
obj=$32$;
method=LeabraNetwork::Compute_AvgAbsRelNetin;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
If @[1] {
desc=;
flags=;
cond {
expr="adapt_rel_abs_netin";
};
true_code {
name=;
el_typ=ProgEl;
el_def=0;
MethodCall @[0] {
desc=;
flags=;
result_var=NULL;
obj=$32$;
method=LeabraNetwork::Compute_AdaptRelNetin;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[1] {
desc=;
flags=;
result_var=NULL;
obj=$32$;
method=LeabraNetwork::Compute_AdaptAbsNetin;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
};
};
MethodCall @[8] {
desc="done with the computation in the epoch -- record time it took";
flags=;
result_var=NULL;
obj=$34$;
method=TimeUsed::EndTimer;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
ProgramCall @[9] {
desc="run program that records data from network and possibly other sources about the epoch";
flags=;
target=.projects[0].programs.gp[0][8]$40$;
targ_ld_init="*LeabraEpochMonitor*";
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=Network;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
};
};
};
};
Program @[3] {
name="LeabraTrial";
tags="Leabra, Std";
desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
flags=SHOW_STEP;
objs {
name=;
el_typ=taOBase;
el_def=0;
};
types {
name=;
el_typ=ProgType;
el_def=0;
};
args {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$0$;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="network to operate on -- typically set by higher-level calling programs";
};
ProgVar @[1] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$1$;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="datatable containing training input/output patterns";
};
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="phase_no";
var_type=T_Int;
int_val=2;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
reference=0;
desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
};
ProgVar @[1] {
name="update_net_view";
var_type=T_Bool;
bool_val=0;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="determines whether to update any network view displays after trial is completed";
};
ProgVar @[2] {
name="trial";
var_type=T_Int;
int_val=0;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
reference=0;
desc="current trial (event) within the epoch -- increments automatically";
};
ProgVar @[3] {
name="compute_rel_netin";
var_type=T_Bool;
bool_val=0;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="call ComputeAbsRelNetin() function to collect relative net input information telling how much each layer receives from each of its receiving projections";
};
};
functions {
name=;
el_typ=Function;
el_def=0;
};
load_code {
name=;
el_typ=ProgEl;
el_def=0;
};
init_code {
name=;
el_typ=NetCounterInit;
el_def=0;
NetCounterInit @[0] {
desc="initialize the local phase_no counter, and corresponding network one";
flags=;
network_var=.projects[0].programs.gp[0][3].args[0]$41$;
local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$42$;
counter=LeabraNetwork::phase_no;
update_after=0;
};
};
prog_code {
name=;
el_typ=MethodCall;
el_def=0;
NetCounterInit @[0] {
desc="initialize the local phase_no counter, and corresponding network one";
flags=;
network_var=$41$;
local_ctr_var=$42$;
counter=LeabraNetwork::phase_no;
update_after=0;
};
MethodCall @[1] {
desc="initializes various counters at start of trial";
flags=;
result_var=NULL;
obj=$41$;
method=LeabraNetwork::Trial_Init;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
WhileLoop @[2] {
desc="loop over phases of settling in the network";
flags=;
loop_code {
name=;
el_typ=ProgramCall;
el_def=0;
ProgramCall @[0] {
desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
flags=;
target=$18$;
targ_ld_init="*LeabraSettle*";
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
};
};
NetCounterIncr @[1] {
desc="increment the phase number (also on network)";
flags=;
network_var=$41$;
local_ctr_var=$42$;
counter=LeabraNetwork::phase_no;
update_after=0;
};
MethodCall @[2] {
desc="increments other phase state information to prepare for the next phase of settling";
flags=;
result_var=NULL;
obj=$41$;
method=LeabraNetwork::Trial_UpdatePhase;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
test {
expr="phase_no < network.phase_max";
};
};
MethodCall @[3] {
desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
flags=;
result_var=NULL;
obj=$41$;
method=LeabraNetwork::Trial_Final;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
If @[4] {
desc=;
flags=NEW_EL;
cond {
expr="compute_rel_netin";
};
true_code {
name=;
el_typ=ProgEl;
el_def=0;
MethodCall @[0] {
desc="special for adapting netin";
flags=;
result_var=NULL;
obj=$41$;
method=LeabraNetwork::Compute_AbsRelNetin;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
If @[5] {
desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
flags=;
cond {
expr="network.Compute_Weights_Test(network.trial+1)";
};
true_code {
name=;
el_typ=ProgEl;
el_def=0;
MethodCall @[0] {
desc="update the weight values based on changes computed by trial program";
flags=;
result_var=NULL;
obj=$41$;
method=Network::Compute_Weights;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
ProgramCall @[6] {
desc="records data about the trial-level processing to a datatable for graphing/processing";
flags=;
target=.projects[0].programs.gp[0][7]$43$;
targ_ld_init="*LeabraTrialMonitor*";
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=Network;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
};
};
NetUpdateView @[7] {
desc="update the network view(s) (only if update_net_view is true)";
flags=;
network_var=$41$;
update_var=.projects[0].programs.gp[0][3].vars[1]$44$;
};
};
};
Program @[4] {
name="LeabraSettle";
tags="Leabra, Std";
desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
flags=;
objs {
name=;
el_typ=taOBase;
el_def=0;
};
types {
name=;
el_typ=ProgType;
el_def=0;
};
args {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$0$;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc=;
};
ProgVar @[1] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$1$;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc=;
};
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="cycle";
var_type=T_Int;
int_val=21;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
reference=0;
desc="current cycle of settling (local loop counter)";
};
ProgVar @[1] {
name="min_cycles";
var_type=T_Int;
int_val=15;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
};
ProgVar @[2] {
name="update_net_view";
var_type=T_Bool;
bool_val=1;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="if true, will update network views at end of settling";
};
};
functions {
name=;
el_typ=Function;
el_def=0;
};
load_code {
name=;
el_typ=ProgEl;
el_def=0;
};
init_code {
name=;
el_typ=NetCounterInit;
el_def=0;
NetCounterInit @[0] {
desc="initialize local cycle counter and corresponding counter on network";
flags=;
network_var=.projects[0].programs.gp[0][4].args[0]$45$;
local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$46$;
counter=Network::cycle;
update_after=0;
};
};
prog_code {
name=;
el_typ=NetCounterInit;
el_def=0;
NetCounterInit @[0] {
desc="initialize local cycle counter and corresponding counter on network";
flags=;
network_var=$45$;
local_ctr_var=$46$;
counter=Network::cycle;
update_after=0;
};
MethodCall @[1] {
desc="resets input data, before getting new external inputs data from apply inputs call";
flags=;
result_var=NULL;
obj=$45$;
method=Network::Init_InputData;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
ProgramCall @[2] {
desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
flags=;
target=$2$;
targ_ld_init="*ApplyInputs*";
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=Network;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
};
};
MethodCall @[3] {
desc="initializes various counters at start of settling";
flags=;
result_var=NULL;
obj=$45$;
method=LeabraNetwork::Settle_Init;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
IfElse @[4] {
desc="get appropriate min_cycles value depending on which phase we're in";
flags=;
cond {
expr="network.phase_no <= 1";
};
true_code {
name=;
el_typ=ProgEl;
el_def=0;
AssignExpr @[0] {
desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
flags=;
result_var=.projects[0].programs.gp[0][4].vars[1]$47$;
expr {
expr="network.min_cycles";
};
};
};
false_code {
name=;
el_typ=ProgEl;
el_def=0;
AssignExpr @[0] {
desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
flags=;
result_var=$47$;
expr {
expr="network.min_cycles_phase2";
};
};
};
};
WhileLoop @[5] {
desc="the main loop over cycles of updating";
flags=;
loop_code {
name=;
el_typ=ProgramCall;
el_def=0;
ProgramCall @[0] {
desc="run the cycle program, which computes one cycle of activations";
flags=;
target=.projects[0].programs.gp[0][5]$48$;
targ_ld_init="*LeabraCycle*";
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
};
};
NetCounterIncr @[1] {
desc="increment cycle counter (also on network)";
flags=;
network_var=$45$;
local_ctr_var=$46$;
counter=Network::cycle;
update_after=0;
};
IfContinue @[2] {
desc="avoid subsequent stopping criteria if below min_cycles";
flags=;
cond {
expr="cycle < min_cycles";
};
};
IfBreak @[3] {
desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
flags=;
cond {
expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
};
};
};
test {
expr="cycle < network.cycle_max";
};
};
MethodCall @[6] {
desc="perform final operations at end of settling (storing final activations, etc)";
flags=;
result_var=NULL;
obj=$45$;
method=LeabraNetwork::Settle_Final;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
If @[7] {
desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
flags=;
cond {
expr="network.Compute_TrialStats_Test()";
};
true_code {
name=;
el_typ=ProgEl;
el_def=0;
MethodCall @[0] {
desc="compute trial-level statistics";
flags=;
result_var=NULL;
obj=$45$;
method=LeabraNetwork::Compute_TrialStats;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
If @[8] {
desc="this stat must be called in plus phase when reward information is avail";
flags=;
cond {
expr="network.phase_no == 1";
};
true_code {
name=;
el_typ=ProgEl;
el_def=0;
MethodCall @[0] {
desc="get external reward information";
flags=;
result_var=NULL;
obj=$45$;
method=LeabraNetwork::Compute_ExtRew;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
NetUpdateView @[9] {
desc="update network views, if update_net_view == true";
flags=;
network_var=$45$;
update_var=.projects[0].programs.gp[0][4].vars[2]$49$;
};
};
};
Program @[5] {
name="LeabraCycle";
tags="Leabra, Std";
desc="runs one cycle of leabra processing (updating net inputs and activations)";
flags=;
objs {
name=;
el_typ=taOBase;
el_def=0;
};
types {
name=;
el_typ=ProgType;
el_def=0;
};
args {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$0$;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc=;
};
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="update_net_view";
var_type=T_Bool;
bool_val=0;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
};
};
functions {
name=;
el_typ=Function;
el_def=0;
};
load_code {
name=;
el_typ=ProgEl;
el_def=0;
};
init_code {
name=;
el_typ=ProgEl;
el_def=0;
};
prog_code {
name=;
el_typ=MethodCall;
el_def=0;
MethodCall @[0] {
desc="this does all the standard leabra processing for one cycle of activation updating";
flags=;
result_var=NULL;
obj=.projects[0].programs.gp[0][5].args[0]$50$;
method=LeabraNetwork::Cycle_Run;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
NetUpdateView @[1] {
desc="update network views if update_net_view == true";
flags=;
network_var=$50$;
update_var=.projects[0].programs.gp[0][5].vars[0]$51$;
};
};
};
Program @[6] {
name="ApplyInputs";
tags="Network, InputData, Apply";
desc="apply the current input data to the network as external input and target values";
flags=;
objs {
name=;
el_typ=LayerWriter;
el_def=0;
LayerWriter @[0] {
name="LayerWriter_0";
data=$1$;
network=$0$;
layer_data {
name=;
el_typ=LayerWriterEl;
el_def=0;
LayerWriterEl @[0] {
chan_name="Input";
net_target=LAYER;
layer_name="Input";
offset {x=0: y=0: };
use_layer_type=1;
na_by_range=0;
ext_flags=EXT;
noise {name="": type=NONE: mean=0: var=0.5: par=1: };
};
LayerWriterEl @[1] {
chan_name="Output";
net_target=LAYER;
layer_name="Output";
offset {x=0: y=0: };
use_layer_type=1;
na_by_range=0;
ext_flags=TARG;
noise {name="": type=NONE: mean=0: var=0.5: par=1: };
};
LayerWriterEl @[2] {
chan_name="Name";
net_target=TRIAL_NAME;
layer_name=;
offset {x=0: y=0: };
use_layer_type=1;
na_by_range=0;
ext_flags=;
noise {name="": type=NONE: mean=0: var=0.5: par=1: };
};
};
};
};
types {
name=;
el_typ=ProgType;
el_def=0;
};
args {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="network";
var_type=T_Object;
object_type=Network;
object_val=$0$;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="network to apply inputs to -- typically set by calling program";
};
ProgVar @[1] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$1$;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="input datatable containing input/output patterns";
};
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="LayerWriter_0";
var_type=T_Object;
object_type=LayerWriter;
object_val=.projects[0].programs.gp[0][6].objs[0]$52$;
objs_ptr=1;
flags=NULL_CHECK|USED;
reference=0;
desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
};
};
functions {
name=;
el_typ=Function;
el_def=0;
};
load_code {
name=;
el_typ=ProgEl;
el_def=0;
};
init_code {
name=;
el_typ=MethodCall;
el_def=0;
MethodCall @[0] {
desc="sets the datatable and network for the layer writer, so it knows what to write to";
flags=;
result_var=NULL;
obj=.projects[0].programs.gp[0][6].vars[0]$53$;
method=LayerWriter::SetDataNetwork;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataBlock_ptr;
type="DataBlock*";
name="db";
required=0;
def_val=;
expr {
expr="input_data";
};
};
ProgArg @[1] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=0;
def_val=;
expr {
expr="network";
};
};
};
};
MethodCall @[1] {
desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
flags=;
result_var=NULL;
obj=$53$;
method=taList_impl::CheckConfig;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
};
prog_code {
name=;
el_typ=MethodCall;
el_def=0;
MethodCall @[0] {
desc="sets the datatable and network for the layer writer, so it knows what to write to";
flags=;
result_var=NULL;
obj=$53$;
method=LayerWriter::SetDataNetwork;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataBlock_ptr;
type="DataBlock*";
name="db";
required=0;
def_val=;
expr {
expr="input_data";
};
};
ProgArg @[1] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=0;
def_val=;
expr {
expr="network";
};
};
};
};
MethodCall @[1] {
desc="apply inputs to the network!  layer writer has all the key specs";
flags=;
result_var=NULL;
obj=$53$;
method=LayerWriter::ApplyInputData;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
Program @[7] {
name="LeabraTrialMonitor";
tags="Leabra, Std, Monitor";
desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
flags=;
objs {
name=;
el_typ=NetMonitor;
el_def=0;
NetMonitor @[0] {
name="trial_netmon";
items {
name=;
el_typ=NetMonItem;
el_def=0;
NetMonItem @[0] {
name="batch";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="batch";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[1] {
name="epoch";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="epoch";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[2] {
name="trial";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="trial";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[3] {
name="trial_name";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="trial_name";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[4] {
name="group_name";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="group_name";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[5] {
name="phase_no";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="phase_no";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[6] {
name="cycle";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="minus_cycles";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[7] {
name="sse";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="sse";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[8] {
name="ext_rew";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="ext_rew";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
};
network=$0$;
data=$9$;
rmv_orphan_cols=1;
};
};
types {
name=;
el_typ=ProgType;
el_def=0;
};
args {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="network";
var_type=T_Object;
object_type=Network;
object_val=$0$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="network to record data from";
};
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="trial_mon_data";
var_type=T_Object;
object_type=DataTable;
object_val=$9$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="data table to record trial-level data to (this program writes new data to this table!)";
};
ProgVar @[1] {
name="trial_netmon";
var_type=T_Object;
object_type=NetMonitor;
object_val=.projects[0].programs.gp[0][7].objs[0]$54$;
objs_ptr=1;
flags=NULL_CHECK|USED;
reference=0;
desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
};
};
functions {
name=;
el_typ=Function;
el_def=0;
};
load_code {
name=;
el_typ=ProgEl;
el_def=0;
};
init_code {
name=;
el_typ=MethodCall;
el_def=0;
MethodCall @[0] {
desc="set the network and datatable for the NetMonitor";
flags=;
result_var=NULL;
obj=.projects[0].programs.gp[0][7].vars[1]$55$;
method=NetMonitor::SetDataNetwork;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="dt";
required=0;
def_val=;
expr {
expr="trial_mon_data";
};
};
ProgArg @[1] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=0;
def_val=;
expr {
expr="network";
};
};
};
};
MethodCall @[1] {
desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
flags=;
result_var=NULL;
obj=$55$;
method=taBase::CheckConfig;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
MethodCall @[2] {
desc="update the monitor items and data schema based on current settings of the NetMonitor object";
flags=;
result_var=NULL;
obj=$55$;
method=NetMonitor::UpdateMonitors;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="reset_first";
required=0;
def_val="false";
expr {
expr="true";
};
};
};
};
};
prog_code {
name=;
el_typ=MethodCall;
el_def=0;
MethodCall @[0] {
desc="add a new blank row to the data";
flags=;
result_var=NULL;
obj=.projects[0].programs.gp[0][7].vars[0]$56$;
method=DataTable::AddBlankRow;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[1] {
desc="get the new monitor data from the network and other sources -- this does the main work";
flags=;
result_var=NULL;
obj=$55$;
method=NetMonitor::GetMonVals;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[2] {
desc="update views and other things after writing new data to monitor data table";
flags=;
result_var=NULL;
obj=$56$;
method=DataBlock::WriteClose;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[3] {
desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
flags=;
result_var=NULL;
obj=.projects[0].programs.gp[0][7].args[0]$57$;
method=Network::DMem_ShareTrialData;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="dt";
required=1;
def_val=;
expr {
expr="trial_mon_data";
};
};
ProgArg @[1] {
arg_type=int;
type="int";
name="n_rows";
required=0;
def_val="1";
expr {
expr="1";
};
};
};
};
};
};
Program @[8] {
name="LeabraEpochMonitor";
tags="Leabra, Std, Monitor";
desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
flags=;
objs {
name=;
el_typ=NetMonitor;
el_def=0;
NetMonitor @[0] {
name="epoch_netmon";
items {
name=;
el_typ=NetMonItem;
el_def=0;
NetMonItem @[0] {
name="batch";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="batch";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[1] {
name="epoch";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="epoch";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[2] {
name="avg_sse";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="avg_sse";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[3] {
name="cnt_err";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="cnt_err";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[4] {
name="avg_ext_rew";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="avg_ext_rew";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[5] {
name="avg_cycles";
computed=0;
object_type=LeabraNetwork;
object=$0$;
variable="avg_cycles";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[6] {
name="epoch_time_tot";
computed=1;
object_type=NULL;
object=NULL;
variable="act";
var_label=;
name_style=MY_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @[7] {
name="epoch_time_usr";
computed=1;
object_type=NULL;
object=NULL;
variable="act";
var_label=;
name_style=MY_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
};
pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
};
};
network=$0$;
data=$8$;
rmv_orphan_cols=1;
};
};
types {
name=;
el_typ=ProgType;
el_def=0;
};
args {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="network";
var_type=T_Object;
object_type=Network;
object_val=$0$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="network to get data from";
};
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="epoch_mon_data";
var_type=T_Object;
object_type=DataTable;
object_val=$8$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="data table to write the epoch data to";
};
ProgVar @[1] {
name="epoch_netmon";
var_type=T_Object;
object_type=NetMonitor;
object_val=.projects[0].programs.gp[0][8].objs[0]$58$;
objs_ptr=1;
flags=NULL_CHECK|USED;
reference=0;
desc="network monitor object that contains full specs for what to record and where to get it";
};
ProgVar @[2] {
name="epoch_timer";
var_type=T_Object;
object_type=TimeUsed;
object_val=$31$;
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
};
};
functions {
name=;
el_typ=Function;
el_def=0;
};
load_code {
name=;
el_typ=AssignExpr;
el_def=0;
};
init_code {
name=;
el_typ=MethodCall;
el_def=0;
AssignExpr @[0] {
desc="get the epoch timer from current network";
flags=;
result_var=.projects[0].programs.gp[0][8].vars[2]$59$;
expr {
expr="network.epoch_time";
};
};
MethodCall @[1] {
desc="set data and network on NetMonitor object";
flags=;
result_var=NULL;
obj=.projects[0].programs.gp[0][8].vars[1]$60$;
method=NetMonitor::SetDataNetwork;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="dt";
required=0;
def_val=;
expr {
expr="epoch_mon_data";
};
};
ProgArg @[1] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=0;
def_val=;
expr {
expr="network";
};
};
};
};
MethodCall @[2] {
desc="check configuration and emit errors/warnings for problems";
flags=;
result_var=NULL;
obj=$60$;
method=taBase::CheckConfig;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
MethodCall @[3] {
desc="update the monitor items and data schema based on current settings of NetMonitor";
flags=;
result_var=NULL;
obj=$60$;
method=NetMonitor::UpdateMonitors;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="reset_first";
required=0;
def_val="false";
expr {
expr="true";
};
};
};
};
};
prog_code {
name=;
el_typ=MethodCall;
el_def=0;
MethodCall @[0] {
desc="add a new blank row to the data";
flags=;
result_var=NULL;
obj=.projects[0].programs.gp[0][8].vars[0]$61$;
method=DataTable::AddBlankRow;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[1] {
desc="get the new monitor data and stor it into the data table -- this does the main job here";
flags=;
result_var=NULL;
obj=$60$;
method=NetMonitor::GetMonVals;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
AssignExpr @[2] {
desc="get the epoch timer from current network";
flags=;
result_var=$59$;
expr {
expr="network.epoch_time";
};
};
MethodCall @[3] {
desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
flags=;
result_var=NULL;
obj=$61$;
method=DataTable::SetValColName;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_Variant_ref;
type="const Variant&";
name="val";
required=0;
def_val=;
expr {
expr="epoch_timer.used.GetTotSecs()";
};
};
ProgArg @[1] {
arg_type=const_taString_ref;
type="const taString&";
name="col_name";
required=0;
def_val="\"\"";
expr {
expr="\"epoch_time_tot\"";
};
};
ProgArg @[2] {
arg_type=int;
type="int";
name="row";
required=0;
def_val=;
expr {
expr="-1";
};
};
};
};
MethodCall @[4] {
desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
flags=;
result_var=NULL;
obj=$61$;
method=DataTable::SetValColName;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_Variant_ref;
type="const Variant&";
name="val";
required=0;
def_val=;
expr {
expr="epoch_timer.used.GetUsrSecs()";
};
};
ProgArg @[1] {
arg_type=const_taString_ref;
type="const taString&";
name="col_name";
required=0;
def_val="\"\"";
expr {
expr="\"epoch_time_usr\"";
};
};
ProgArg @[2] {
arg_type=int;
type="int";
name="row";
required=0;
def_val=;
expr {
expr="-1";
};
};
};
};
MethodCall @[5] {
desc="update after writing new data to monitor data table";
flags=;
result_var=NULL;
obj=$61$;
method=DataBlock::WriteClose;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
Program @[9] {
name="SaveWeights";
tags="Network, Weights";
desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
flags=;
objs {
name=;
el_typ=taOBase;
el_def=0;
};
types {
name=;
el_typ=ProgType;
el_def=0;
};
args {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="network";
var_type=T_Object;
object_type=Network;
object_val=$0$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc=;
};
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="tag";
var_type=T_String;
string_val=;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="user-provided tag (startup script will set this!)";
};
ProgVar @[1] {
name="wts_subdir";
var_type=T_String;
string_val=;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|USED;
reference=0;
desc="user-provided subdirectory to save weights in";
};
ProgVar @[2] {
name="fname";
var_type=T_String;
string_val=;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
reference=0;
desc="final generated file name -- do not edit!";
};
ProgVar @[3] {
name="epoch_str";
var_type=T_String;
string_val="0036";
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="string rep of epoch with leading zeros";
};
ProgVar @[4] {
name="batch_str";
var_type=T_String;
string_val="03";
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="string rep of batch with leading zeros";
};
ProgVar @[5] {
name="final_tag";
var_type=T_String;
string_val=".03_0036";
objs_ptr=0;
flags=NULL_CHECK|USED;
reference=0;
desc="batch + epoch";
};
};
functions {
name=;
el_typ=Function;
el_def=0;
};
load_code {
name=;
el_typ=ProgEl;
el_def=0;
};
init_code {
name=;
el_typ=ProgEl;
el_def=0;
};
prog_code {
name=;
el_typ=MethodCall;
el_def=0;
IfReturn @[0] {
desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
flags=;
cond {
expr="taMisc::dmem_proc > 0";
};
};
MiscCall @[1] {
desc="get current batch counter for file name, with leading zeros to length 3";
flags=;
result_var=.projects[0].programs.gp[0][9].vars[4]$62$;
object_type=taMisc;
method=taMisc::LeadingZeros;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=int;
type="int";
name="num";
required=0;
def_val=;
expr {
expr="network.batch";
};
};
ProgArg @[1] {
arg_type=int;
type="int";
name="len";
required=0;
def_val=;
expr {
expr="2";
};
};
};
};
MiscCall @[2] {
desc="get current epoch counter with leading zeros to length 4";
flags=;
result_var=.projects[0].programs.gp[0][9].vars[3]$63$;
object_type=taMisc;
method=taMisc::LeadingZeros;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=int;
type="int";
name="num";
required=0;
def_val=;
expr {
expr="network.epoch";
};
};
ProgArg @[1] {
arg_type=int;
type="int";
name="len";
required=0;
def_val=;
expr {
expr="4";
};
};
};
};
AssignExpr @[3] {
desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
flags=;
result_var=.projects[0].programs.gp[0][9].vars[5]$64$;
expr {
expr="tag + \".\" + batch_str + \"_\" + epoch_str";
};
};
MethodCall @[4] {
desc="get a file name based on the project's current file name, for saving the weights";
flags=;
result_var=.projects[0].programs.gp[0][9].vars[2]$65$;
obj=.projects[0].programs.gp[0][9].args[0]$66$;
method=taBase::GetFileNameFmProject;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="const taString&";
name="ext";
required=1;
def_val=;
expr {
expr="\".wts.gz\"";
};
};
ProgArg @[1] {
arg_type=const_taString_ref;
type="const taString&";
name="tag";
required=0;
def_val="\"\"";
expr {
expr="final_tag";
};
};
ProgArg @[2] {
arg_type=const_taString_ref;
type="const taString&";
name="subdir";
required=0;
def_val="\"\"";
expr {
expr="wts_subdir";
};
};
ProgArg @[3] {
arg_type=bool;
type="bool";
name="dmem_proc_no";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
MethodCall @[5] {
desc="save the weights to that file name";
flags=;
result_var=NULL;
obj=$66$;
method=Network::SaveWeights;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="const taString&";
name="fname";
required=0;
def_val="\"\"";
expr {
expr="fname";
};
};
ProgArg @[1] {
arg_type=Network::WtSaveFormat;
type="Network::WtSaveFormat";
name="fmt";
required=0;
def_val="Network::NET_FMT";
expr {
expr="Network::NET_FMT";
};
};
};
};
};
};
};
};
viewers {
name=;
el_typ=TopLevelViewer;
el_def=0;
MainWindowViewer @[0] {
m_data=.projects[0]$67$;
name="Browser2";
visible=1;
m_is_root=0;
m_is_viewer_xor_browser=0;
m_is_proj_viewer=1;
m_is_dialog=0;
toolbars {
name=;
el_typ=ToolBar;
el_def=0;
ToolBar @[0] {
m_data=NULL;
name="Application";
visible=0;
lft=0;
top=0;
o=Horizontal;
};
};
frames {
name=;
el_typ=FrameViewer;
el_def=0;
tabBrowseViewer @[0] {
m_data=NULL;
name="Tree";
visible=1;
root_typ=LeabraProject;
root_md=NULL;
m_root=$67$;
};
PanelViewer @[1] {
m_data=NULL;
name="Panels";
visible=1;
};
T3DataViewer @[2] {
m_data=NULL;
name="T3Frames";
visible=1;
frames {
name=;
el_typ=T3DataViewFrame;
el_def=0;
T3DataViewFrame @[0] {
m_data=NULL;
name="Network_0";
visible=1;
root_view {
m_data=NULL;
m_transform=NULL;
children {
name=;
el_typ=T3DataViewMain;
el_def=0;
NetView @[0] {
m_data=$0$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
display=1;
lay_mv=1;
net_text=1;
net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
net_text_rot=0;
net_box_offset=0.5;
ordered_uvg_list{ act;};
unit_disp_mode=UDM_BLOCK;
unit_text_disp=UTD_NONE;
max_size {x=10: y=10: z=5: };
font_sizes {
net_name=0.05;
net_vals=0.05;
layer=0.04;
layer_vals=0.03;
prjn=0.01;
unit=0.02;
un_nm_len=3;
};
view_params {
xy_square=0;
unit_spacing=0.05;
prjn_disp=L_R_F;
prjn_name=0;
prjn_width=0.002;
prjn_trans=0.5;
lay_trans=0.5;
unit_trans=0.6;
};
wt_line_disp=0;
wt_line_width=4;
wt_line_thr=0.5;
wt_line_swt=0;
wt_prjn_lay=NULL;
snap_bord_disp=0;
snap_bord_width=4;
scale {
name="ColorScale";
chunks=133;
min=-1;
max=1;
range=1;
zero=0;
spec=.colorspecs[0]$68$;
auto_scale=0;
};
scale_ranges {
name=;
el_typ=ScaleRange;
el_def=0;
ScaleRange @[0] {
name="act";
auto_scale=0;
min=-1;
max=1;
};
};
lay_disp_modes{ Input=0;Hidden_0=0;Hidden_1=0;Hidden_2=0;Output=0;};
};
};
};
camera_pos {x=0.5: y=0.3321191: z=1.979272: };
camera_orient {x=0: y=0: z=1: rot=0: };
camera_focdist=2.386051;
bg_color {r=0.8: g=0.8: b=0.8: a=1: };
headlight_on=1;
fullscreen_on=0;
stereo_view=STEREO_NONE;
};
};
};
};
docks {
name=;
el_typ=DockViewer;
el_def=0;
ToolBoxDockViewer @[0] {
m_data=NULL;
name="Tools";
visible=1;
dock_flags=DV_MOVABLE|DV_FLOATABLE;
dock_area=1;
};
};
};
};
last_change_desc=;
networks {
name=;
el_typ=LeabraNetwork;
el_def=0;
LeabraNetwork @[0] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @[0] {
name="norm_err";
value 1 0=1;
};
UserDataItem @[1] {
name="ext_rew";
value 1 0=1;
};
UserDataItem @[2] {
name="maxda";
value 1 0=1;
};
UserDataItem @[3] {
name="minus_output_name";
value 1 0=1;
};
UserDataItem @[4] {
name="minus_cycles";
value 1 0=1;
};
UserDataItem @[5] {
name="ct_cycle";
value 1 0=1;
};
UserDataItem @[6] {
name="phase_no";
value 1 0=1;
};
UserDataItem @[7] {
name="phase";
value 1 0=1;
};
UserDataItem @[8] {
name="sse";
value 1 0=1;
};
UserDataItem @[9] {
name="output_name";
value 1 0=1;
};
UserDataItem @[10] {
name="trial_name";
value 1 0=1;
};
UserDataItem @[11] {
name="group_name";
value 1 0=1;
};
UserDataItem @[12] {
name="time";
value 1 0=1;
};
UserDataItem @[13] {
name="cycle";
value 1 0=1;
};
UserDataItem @[14] {
name="tick";
value 1 0=1;
};
UserDataItem @[15] {
name="trial";
value 1 0=1;
};
UserDataItem @[16] {
name="group";
value 1 0=1;
};
UserDataItem @[17] {
name="epoch";
value 1 0=1;
};
UserDataItem @[18] {
name="batch";
value 1 0=1;
};
};
name="Network_0";
desc=;
specs {
name=;
el_typ=LeabraUnitSpec;
el_def=0;
LeabraUnitSpec @[0] {
name="LeabraUnitSpec_0";
desc=;
unique{ };
children {
name=;
el_typ=LeabraUnitSpec;
el_def=0;
};
act_range {min=0: max=1: range=1: scale=1: };
bias_con_type=LeabraCon;
bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[3].children[0]$69$: };
sse_tol=0.5;
act_fun=NOISY_XX1;
act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
spike {rise=0: decay=5: g_gain=5: window=3: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.2: };
depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=1: clamp_norm_max_amp=2: };
syn_delay {
on=0;
delay=4;
};
opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
vm_range {min=0: max=1: range=1: scale=1: };
v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
dt {vm=0.25: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
noise_type=NO_NOISE;
noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
noise_adapt {trial_fixed=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
noise_sched {
name=;
el_typ=SchedItem;
el_def=0;
last_ctr=-1;
default_val=1;
interpolate=1;
cur_val=0;
};
};
LeabraLayerSpec @[1] {
name="HiddenLayer";
desc=;
unique{ };
children {
name=;
el_typ=LeabraLayerSpec;
el_def=0;
LeabraLayerSpec @[0] {
name="Input_Output";
desc=;
unique{ inhib;kwta;};
children {
name=;
el_typ=LeabraLayerSpec;
el_def=0;
};
inhib_group=ENTIRE_LAYER;
inhib {
type=KWTA_INHIB;
kwta_pt=0.25;
min_i=0;
comp_thr=0.5;
comp_gain=2;
gp_pt=0.2;
};
kwta {k_from=USE_PAT_K: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
tie_brk {on=0: k_thr=1: diff_thr=0.2: };
adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
clamp {hard=1: gain=0.2: };
decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
ct_inhib_mod {
use_sin=0;
burst_i=0.02;
trough_i=0.02;
use_fin=0;
inhib_i=0;
};
abs_net_adapt {
on=0;
trg_net=0.5;
tol=0.1;
abs_lrate=0.2;
};
};
};
inhib_group=ENTIRE_LAYER;
inhib {
type=KWTA_AVG_INHIB;
kwta_pt=0.6;
min_i=0;
comp_thr=0.5;
comp_gain=2;
gp_pt=0.2;
};
kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
tie_brk {on=0: k_thr=1: diff_thr=0.2: };
adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
clamp {hard=1: gain=0.2: };
decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
ct_inhib_mod {
use_sin=0;
burst_i=0.02;
trough_i=0.02;
use_fin=0;
inhib_i=0;
};
abs_net_adapt {
on=0;
trg_net=0.5;
tol=0.1;
abs_lrate=0.2;
};
};
FullPrjnSpec @[2] {
name="FullPrjnSpec_0";
desc=;
unique{ };
children {
name=;
el_typ=FullPrjnSpec;
el_def=0;
};
self_con=0;
init_wts=0;
};
LeabraConSpec @[3] {
name="LeabraConSpec_0";
desc=;
unique{ };
children {
name=;
el_typ=LeabraConSpec;
el_def=0;
LeabraBiasSpec @[0] {
name="LeabraBiasSpec_0";
desc=;
unique{ rnd;wt_limits;wt_scale;wt_scale_init;};
children {
name=;
el_typ=LeabraBiasSpec;
el_def=0;
};
rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
wt_limits {type=NONE: min=-1: max=5: sym=0: };
learn_rule=LEABRA_CHL;
inhib=0;
wt_scale {abs=1: rel=1: };
wt_scale_init {init=0: abs=1: rel=1: };
lrate=0.01;
cur_lrate=0.01;
lrs_value=EPOCH;
lrate_sched {
name=;
el_typ=SchedItem;
el_def=0;
last_ctr=-1;
default_val=1;
interpolate=0;
cur_val=1;
};
wt_sig {gain=6: off=1.25: };
lmix {hebb=0.001: err=0.999: err_sb=1: };
xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
xcal_c {s_dt=0.2: m_dt=0.1: };
xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
dwt_thresh=0.1;
};
};
rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=LEABRA_CHL;
inhib=0;
wt_scale {abs=1: rel=1: };
wt_scale_init {init=0: abs=1: rel=1: };
lrate=0.01;
cur_lrate=0.01;
lrs_value=EPOCH;
lrate_sched {
name=;
el_typ=SchedItem;
el_def=0;
last_ctr=-1;
default_val=1;
interpolate=0;
cur_val=1;
};
wt_sig {gain=6: off=1.25: };
lmix {hebb=0.001: err=0.999: err_sb=1: };
xcal {lrn_var=XCAL_SR: mvl_mix=0.002: svm_mix=0.998: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
xcal_c {s_dt=0.2: m_dt=0.1: };
xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
};
};
layers {
name=;
el_typ=LeabraLayer;
el_def=0;
pos {x=0: y=0: z=0: };
LeabraLayer @[0] {
name="Input";
desc=;
flags=;
layer_type=INPUT;
pos {x=0: y=0: z=0: };
disp_scale=1;
un_geom {x=10: y=10: n_not_xy=0: n=100: };
unit_groups=0;
gp_geom {x=1: y=1: n_not_xy=0: n=1: };
gp_spc {x=1: y=1: };
act_geom {x=10: y=10: n_not_xy=0: n=100: };
scaled_act_geom {x=10: y=10: n_not_xy=0: n=1: };
projections {
name=;
el_typ=LeabraPrjn;
el_def=0;
};
send_prjns {
name=;
el_typ=LeabraPrjn;
el_def=0;
Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[0];
};
units {
name=;
el_typ=LeabraUnit;
el_def=0;
pos {x=0: y=0: z=0: };
unique_geom=0;
geom {x=10: y=10: n_not_xy=0: n=100: };
units_lesioned=0;
output_name=;
};
unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[0].specs[0]$70$: };
ext_flag=EXT;
dmem_dist=DMEM_DIST_DEFAULT;
dist {
fm_input=-1;
fm_output=-1;
};
output_name=;
sse=0;
icon_value=0;
netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
acts {cmpt=1: avg=0.2375: max=0.95: max_i=7: };
acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=7: };
acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=7: };
phase_dif_ratio=1;
acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
kwta {k=25: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
i_val {kwta=0: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
maxda=0;
spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1].children[0]$71$: };
hard_clamped=1;
ravg_l_avg=0;
dav=0;
avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
avg_netin_n=0;
norm_err=-1;
da_updt=0;
};
LeabraLayer @[1] {
name="Hidden_0";
desc=;
flags=;
layer_type=HIDDEN;
pos {x=0: y=0: z=1: };
disp_scale=1;
un_geom {x=10: y=10: n_not_xy=0: n=100: };
unit_groups=0;
gp_geom {x=1: y=1: n_not_xy=0: n=1: };
gp_spc {x=1: y=1: };
act_geom {x=10: y=10: n_not_xy=0: n=100: };
scaled_act_geom {x=10: y=10: n_not_xy=0: n=1: };
projections {
name=;
el_typ=LeabraPrjn;
el_def=0;
LeabraPrjn @[0] {
name="Fm_Input";
from_type=CUSTOM;
from=.projects[0].networks[0].layers[0]$72$;
spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[2]$73$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[3]$74$: };
recv_idx=0;
send_idx=0;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
netin_avg=0;
netin_rel=0;
avg_netin_avg=0;
avg_netin_avg_sum=0;
avg_netin_rel=0;
avg_netin_rel_sum=0;
avg_netin_n=0;
trg_netin_rel=-1;
};
LeabraPrjn @[1] {
name="Fm_Hidden_1";
from_type=CUSTOM;
from=.projects[0].networks[0].layers[2]$75$;
spec {type=FullPrjnSpec: spec=$73$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=LeabraConSpec: spec=$74$: };
recv_idx=1;
send_idx=1;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
netin_avg=0;
netin_rel=0;
avg_netin_avg=0;
avg_netin_avg_sum=0;
avg_netin_rel=0;
avg_netin_rel_sum=0;
avg_netin_n=0;
trg_netin_rel=-1;
};
};
send_prjns {
name=;
el_typ=LeabraPrjn;
el_def=0;
Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[0];
};
units {
name=;
el_typ=LeabraUnit;
el_def=0;
pos {x=0: y=0: z=0: };
unique_geom=0;
geom {x=10: y=10: n_not_xy=0: n=100: };
units_lesioned=0;
output_name=;
};
unit_spec {type=LeabraUnitSpec: spec=$70$: };
ext_flag=;
dmem_dist=DMEM_DIST_DEFAULT;
dist {
fm_input=-1;
fm_output=-1;
};
output_name=;
sse=0;
icon_value=0;
netin {cmpt=1: avg=0.3856671: max=0.4245442: max_i=65: };
i_thrs {cmpt=1: avg=2.792508: max=3.08414: max_i=65: };
acts {cmpt=1: avg=0.1824858: max=0.7191154: max_i=65: };
acts_p {cmpt=1: avg=0.1824858: max=0.7191154: max_i=65: };
acts_m {cmpt=1: avg=0.1822964: max=0.7168169: max_i=65: };
phase_dif_ratio=0.9989616;
acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
kwta {k=25: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.964444: k1_ithr=2.735196: ithr_r=0.08048622: ithr_diff=0.07733241: tie_brk=0: };
i_val {kwta=2.872745: g_i=2.872745: gp_g_i=0: g_i_orig=2.872745: };
un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
adapt_i {avg_avg=0.2221539: i_kwta_pt=-0.2721871: g_bar_i=1: g_bar_l=0.1: };
maxda=0.001821548;
spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1]$76$: };
hard_clamped=0;
ravg_l_avg=0;
dav=0;
avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
avg_netin_n=0;
norm_err=-1;
da_updt=0;
};
LeabraLayer @[2] {
name="Hidden_1";
desc=;
flags=;
layer_type=HIDDEN;
pos {x=0: y=0: z=2: };
disp_scale=1;
un_geom {x=10: y=10: n_not_xy=0: n=100: };
unit_groups=0;
gp_geom {x=1: y=1: n_not_xy=0: n=1: };
gp_spc {x=1: y=1: };
act_geom {x=10: y=10: n_not_xy=0: n=100: };
scaled_act_geom {x=10: y=10: n_not_xy=0: n=1: };
projections {
name=;
el_typ=LeabraPrjn;
el_def=0;
LeabraPrjn @[0] {
name="Fm_Hidden_0";
from_type=CUSTOM;
from=.projects[0].networks[0].layers[1]$77$;
spec {type=FullPrjnSpec: spec=$73$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=LeabraConSpec: spec=$74$: };
recv_idx=0;
send_idx=0;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
netin_avg=0;
netin_rel=0;
avg_netin_avg=0;
avg_netin_avg_sum=0;
avg_netin_rel=0;
avg_netin_rel_sum=0;
avg_netin_n=0;
trg_netin_rel=-1;
};
LeabraPrjn @[1] {
name="Fm_Hidden_2";
from_type=CUSTOM;
from=.projects[0].networks[0].layers[3]$78$;
spec {type=FullPrjnSpec: spec=$73$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=LeabraConSpec: spec=$74$: };
recv_idx=1;
send_idx=1;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
netin_avg=0;
netin_rel=0;
avg_netin_avg=0;
avg_netin_avg_sum=0;
avg_netin_rel=0;
avg_netin_rel_sum=0;
avg_netin_n=0;
trg_netin_rel=-1;
};
};
send_prjns {
name=;
el_typ=LeabraPrjn;
el_def=0;
Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[1];
Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[3].projections[0];
};
units {
name=;
el_typ=LeabraUnit;
el_def=0;
pos {x=0: y=0: z=0: };
unique_geom=0;
geom {x=10: y=10: n_not_xy=0: n=100: };
units_lesioned=0;
output_name=;
};
unit_spec {type=LeabraUnitSpec: spec=$70$: };
ext_flag=;
dmem_dist=DMEM_DIST_DEFAULT;
dist {
fm_input=-1;
fm_output=-1;
};
output_name=;
sse=0;
icon_value=0;
netin {cmpt=1: avg=0.3219125: max=0.3674176: max_i=56: };
i_thrs {cmpt=1: avg=2.314354: max=2.655938: max_i=56: };
acts {cmpt=1: avg=0.1691836: max=0.8221618: max_i=56: };
acts_p {cmpt=1: avg=0.1691836: max=0.8221618: max_i=56: };
acts_m {cmpt=1: avg=0.1684654: max=0.8233133: max_i=56: };
phase_dif_ratio=0.9957546;
acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
kwta {k=25: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.477779: k1_ithr=2.259879: ithr_r=0.09205135: ithr_diff=0.08794167: tie_brk=0: };
i_val {kwta=2.390619: g_i=2.390619: gp_g_i=0: g_i_orig=2.390619: };
un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
adapt_i {avg_avg=0.2188735: i_kwta_pt=-0.2892247: g_bar_i=1: g_bar_l=0.1: };
maxda=0.003940493;
spec {type=LeabraLayerSpec: spec=$76$: };
hard_clamped=0;
ravg_l_avg=0;
dav=0;
avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
avg_netin_n=0;
norm_err=-1;
da_updt=0;
};
LeabraLayer @[3] {
name="Hidden_2";
desc=;
flags=;
layer_type=HIDDEN;
pos {x=0: y=0: z=3: };
disp_scale=1;
un_geom {x=10: y=10: n_not_xy=0: n=100: };
unit_groups=0;
gp_geom {x=1: y=1: n_not_xy=0: n=1: };
gp_spc {x=1: y=1: };
act_geom {x=10: y=10: n_not_xy=0: n=100: };
scaled_act_geom {x=10: y=10: n_not_xy=0: n=1: };
projections {
name=;
el_typ=LeabraPrjn;
el_def=0;
LeabraPrjn @[0] {
name="Fm_Hidden_1";
from_type=CUSTOM;
from=$75$;
spec {type=FullPrjnSpec: spec=$73$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=LeabraConSpec: spec=$74$: };
recv_idx=0;
send_idx=0;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
netin_avg=0;
netin_rel=0;
avg_netin_avg=0;
avg_netin_avg_sum=0;
avg_netin_rel=0;
avg_netin_rel_sum=0;
avg_netin_n=0;
trg_netin_rel=-1;
};
LeabraPrjn @[1] {
name="Fm_Output";
from_type=CUSTOM;
from=.projects[0].networks[0].layers[4]$79$;
spec {type=FullPrjnSpec: spec=$73$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=LeabraConSpec: spec=$74$: };
recv_idx=1;
send_idx=0;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
netin_avg=0;
netin_rel=0;
avg_netin_avg=0;
avg_netin_avg_sum=0;
avg_netin_rel=0;
avg_netin_rel_sum=0;
avg_netin_n=0;
trg_netin_rel=-1;
};
};
send_prjns {
name=;
el_typ=LeabraPrjn;
el_def=0;
Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[1];
Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[4].projections[0];
};
units {
name=;
el_typ=LeabraUnit;
el_def=0;
pos {x=0: y=0: z=0: };
unique_geom=0;
geom {x=10: y=10: n_not_xy=0: n=100: };
units_lesioned=0;
output_name=;
};
unit_spec {type=LeabraUnitSpec: spec=$70$: };
ext_flag=;
dmem_dist=DMEM_DIST_DEFAULT;
dist {
fm_input=-1;
fm_output=-1;
};
output_name=;
sse=0;
icon_value=0;
netin {cmpt=1: avg=0.396689: max=0.4662202: max_i=34: };
i_thrs {cmpt=1: avg=2.875022: max=3.396596: max_i=34: };
acts {cmpt=1: avg=0.1699138: max=0.8465931: max_i=34: };
acts_p {cmpt=1: avg=0.1699138: max=0.8465931: max_i=34: };
acts_m {cmpt=1: avg=0.1676749: max=0.8199646: max_i=54: };
phase_dif_ratio=0.9868237;
acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
kwta {k=25: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=3.182096: k1_ithr=2.772665: ithr_r=0.1377311: ithr_diff=0.1286671: tie_brk=0: };
i_val {kwta=3.018323: g_i=3.018323: gp_g_i=0: g_i_orig=3.018323: };
un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
adapt_i {avg_avg=0.2162534: i_kwta_pt=-0.2936373: g_bar_i=1: g_bar_l=0.1: };
maxda=0.001578689;
spec {type=LeabraLayerSpec: spec=$76$: };
hard_clamped=0;
ravg_l_avg=7.47605e-27;
dav=0;
avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
avg_netin_n=0;
norm_err=-1;
da_updt=0;
};
LeabraLayer @[4] {
name="Output";
desc=;
flags=;
layer_type=TARGET;
pos {x=0: y=0: z=4: };
disp_scale=1;
un_geom {x=10: y=10: n_not_xy=0: n=100: };
unit_groups=0;
gp_geom {x=1: y=1: n_not_xy=0: n=1: };
gp_spc {x=1: y=1: };
act_geom {x=10: y=10: n_not_xy=0: n=100: };
scaled_act_geom {x=10: y=10: n_not_xy=0: n=1: };
projections {
name=;
el_typ=LeabraPrjn;
el_def=0;
LeabraPrjn @[0] {
name="Fm_Hidden_2";
from_type=CUSTOM;
from=$78$;
spec {type=FullPrjnSpec: spec=$73$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=LeabraConSpec: spec=$74$: };
recv_idx=0;
send_idx=0;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
netin_avg=0;
netin_rel=0;
avg_netin_avg=0;
avg_netin_avg_sum=0;
avg_netin_rel=0;
avg_netin_rel_sum=0;
avg_netin_n=0;
trg_netin_rel=-1;
};
};
send_prjns {
name=;
el_typ=LeabraPrjn;
el_def=0;
Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[3].projections[1];
};
units {
name=;
el_typ=LeabraUnit;
el_def=0;
pos {x=0: y=0: z=0: };
unique_geom=0;
geom {x=10: y=10: n_not_xy=0: n=100: };
units_lesioned=0;
output_name=;
};
unit_spec {type=LeabraUnitSpec: spec=$70$: };
ext_flag=TARG|EXT;
dmem_dist=DMEM_DIST_DEFAULT;
dist {
fm_input=-1;
fm_output=-1;
};
output_name=;
sse=0.9278807;
icon_value=0;
netin {cmpt=1: avg=0.3292687: max=0.3808067: max_i=88: };
i_thrs {cmpt=1: avg=2.364442: max=2.749727: max_i=99: };
acts {cmpt=1: avg=0.2375: max=0.95: max_i=0: };
acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=0: };
acts_m {cmpt=1: avg=0.1775261: max=0.8060349: max_i=88: };
phase_dif_ratio=0.7474781;
acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
kwta {k=25: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.549381: k1_ithr=2.482048: ithr_r=0.02676677: ithr_diff=0.02641169: tie_brk=0: };
i_val {kwta=2.498881: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
adapt_i {avg_avg=0.2228467: i_kwta_pt=-0.6297244: g_bar_i=1: g_bar_l=0.1: };
maxda=0;
spec {type=LeabraLayerSpec: spec=$71$: };
hard_clamped=1;
ravg_l_avg=0;
dav=0;
avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
avg_netin_n=0;
norm_err=0.06;
da_updt=0;
};
};
view_objs {
name=;
el_typ=NetViewObj;
el_def=0;
};
flags=;
auto_build=AUTO_BUILD;
train_mode=TRAIN;
wt_update=ON_LINE;
small_batch_n=10;
batch=10;
epoch=10;
group=0;
trial=9;
tick=0;
cycle=21;
time=8244;
group_name=;
trial_name=;
output_name=;
sse_unit_avg=0;
sse_sqrt=0;
sse=0.9278807;
sum_sse=10.34201;
avg_sse=1.034201;
cnt_err_tol=0;
cnt_err=7;
pct_err=0.7;
pct_cor=0.3;
cur_sum_sse=0;
avg_sse_n=0;
cur_cnt_err=0;
train_time {name="TimeUsed_0": start={usr=16615: sys=2750: tot=1830595832: }: end={usr=17063: sys=2774: tot=1830596324: }: used={usr=448: sys=24: tot=492: }: s_used=4.92: n_used=1: };
epoch_time {name="TimeUsed_1": start={usr=17021: sys=2771: tot=1830596277: }: end={usr=17063: sys=2774: tot=1830596323: }: used={usr=42: sys=3: tot=46: }: s_used=0.46: n_used=1: };
trial_time {name="TimeUsed_3": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
settle_time {name="TimeUsed_4": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
cycle_time {name="TimeUsed_5": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
wt_sync_time {name="TimeUsed_6": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
misc_time {name="TimeUsed_7": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
threads {
run_time {name="TimeUsedHR_3": s_used=0: n_used=0: };
sync_time {name="TimeUsedHR_4": s_used=0: n_used=0: };
total_time {name="TimeUsedHR_5": s_used=0: n_used=0: };
n_wake_in_sync=0;
run_time_pct=0;
sync_time_pct=0;
wake_in_sync_pct=3.961276057449113e-316;
interleave=1;
ignore_lay_sync=0;
};
dmem_sync_level=DMEM_SYNC_NETWORK;
dmem_nprocs=1;
usr1_save_fmt=FULL_NET;
wt_save_fmt=TEXT;
lay_layout=THREE_D;
n_units=500;
n_cons=70000;
max_size {x=10: y=10: z=5: };
font_sizes {
net_name=0.05;
net_vals=0.05;
layer=0.04;
layer_vals=0.03;
prjn=0.01;
unit=0.02;
un_nm_len=3;
};
view_params {
xy_square=0;
unit_spacing=0.05;
prjn_disp=L_R_F;
prjn_name=0;
prjn_width=0.002;
prjn_trans=0.5;
lay_trans=0.5;
unit_trans=0.6;
};
learn_rule=LEABRA_CHL;
phase_order=MINUS_PLUS;
no_plus_test=1;
sequence_init=DO_NOTHING;
phase=PLUS_PHASE;
nothing_phase=0;
phase_no=2;
phase_max=2;
ct_cycle=79;
time_inc=1;
cycle_max=60;
min_cycles=15;
min_cycles_phase2=35;
ct_time {
minus=50;
plus=20;
inhib=1;
n_avg_only_epcs=1;
total_cycles=71;
inhib_start=70;
};
ct_sravg {
start=30;
end=1;
interval=5;
plus_s_st=19;
};
ct_sin_i {
start=30;
duration=20;
n_pi=2;
burst_i=0;
trough_i=0;
};
ct_fin_i {
start=20;
end=25;
inhib_i=0;
};
sravg_vals {
s_sum=0;
s_nrm=1;
m_sum=9;
m_nrm=0.1111111;
do_s=0;
};
minus_cycles=58;
avg_cycles=56.3;
avg_cycles_sum=0;
avg_cycles_n=0;
minus_output_name=;
net_misc {
cyc_syn_dep=0;
syn_dep_int=20;
};
send_pct=0.028;
send_pct_n=14;
send_pct_tot=500;
avg_send_pct=0.1315318;
avg_send_pct_sum=0;
avg_send_pct_n=0;
maxda_stopcrit=0.005;
maxda=0.003940493;
trg_max_act_stopcrit=1;
trg_max_act=0;
ext_rew=0;
ext_rew_avail=0;
norew_val=0.5;
avg_ext_rew=0;
pvlv_pvi=0;
pvlv_lve=0;
pvlv_lvi=0;
pv_detected=0;
avg_ext_rew_sum=0;
avg_ext_rew_n=0;
off_errs=1;
on_errs=1;
norm_err=0.06;
avg_norm_err=0.058;
avg_norm_err_sum=0;
avg_norm_err_n=0;
};
};
};

// ta_Dump File v2.0 -- code v4.0.21.0
LeabraProject .projects[0] { 
  Doc_Group @.docs = [6] {
    taDoc @[0] { };
    taDoc @[1] { };
    taDoc @[2] { };
    taDoc @[3] { };
    taDoc @[4] { };
    taDoc @[5] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  SelectEdit_Group @.edits = [5] {
    SelectEdit @[0] { 
      EditMbrItem_Group @.mbrs = [24] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem @[7] { };
	EditMbrItem @[8] { };
	EditMbrItem @[9] { };
	EditMbrItem @[10] { };
	EditMbrItem @[11] { };
	EditMbrItem @[12] { };
	EditMbrItem @[13] { };
	EditMbrItem @[14] { };
	EditMbrItem @[15] { };
	EditMbrItem @[16] { };
	EditMbrItem @[17] { };
	EditMbrItem @[18] { };
	EditMbrItem @[19] { };
	EditMbrItem @[20] { };
	EditMbrItem @[21] { };
	EditMbrItem @[22] { };
	EditMbrItem @[23] { };
      };

      EditMthItem_Group @.mths = [6] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem @[4] { };
	EditMthItem @[5] { };
      };
    };
    SelectEdit @[1] { 
      EditMbrItem_Group @.mbrs = [13] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem @[7] { };
	EditMbrItem @[8] { };
	EditMbrItem @[9] { };
	EditMbrItem @[10] { };
	EditMbrItem @[11] { };
	EditMbrItem @[12] { };
	EditMbrItem_Group @.gp[0] = [14] { 
	  EditMbrItem @[0] { };
	  EditMbrItem @[1] { };
	  EditMbrItem @[2] { };
	  EditMbrItem @[3] { };
	  EditMbrItem @[4] { };
	  EditMbrItem @[5] { };
	  EditMbrItem @[6] { };
	  EditMbrItem @[7] { };
	  EditMbrItem @[8] { };
	  EditMbrItem @[9] { };
	  EditMbrItem @[10] { };
	  EditMbrItem @[11] { };
	  EditMbrItem @[12] { };
	  EditMbrItem @[13] { };
	};
      };

      EditMthItem_Group @.mths = [6] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem @[4] { };
	EditMthItem @[5] { };
      };
    };
    SelectEdit @[2] { };
    SelectEdit @[3] { 
      EditMbrItem_Group @.mbrs = [8] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem @[7] { };
      };
    };
    SelectEdit @[4] { 
      EditMbrItem_Group @.mbrs = [8] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem @[7] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [6] { 
      DataTable @[0] { 
	DataTableCols @.data = [25] {
	  int_Data @[0] { };
	  String_Data @[1] { };
	  String_Data @[2] { };
	  String_Data @[3] { };
	  String_Data @[4] { };
	  String_Data @[5] { };
	  String_Data @[6] { };
	  String_Data @[7] { };
	  String_Data @[8] { };
	  String_Data @[9] { };
	  String_Data @[10] { };
	  int_Data @[11] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[12] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[13] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[14] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[15] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[16] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[17] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[18] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[19] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[20] { };
	  float_Data @[21] { };
	  float_Data @[22] { };
	  float_Data @[23] { };
	  float_Data @[24] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [14] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[10] { };
	  float_Data @[11] { };
	  float_Data @[12] { };
	  float_Data @[13] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [12] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	  float_Data @[11] { };
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  String_Data @[1] { };
	  String_Data @[2] { };
	};
      };
      DataTable @[4] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  byte_Data @[1] { };
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[5] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  byte_Data @[1] { };
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
    };
    DataTable_Group @.gp[1] = [4] { 
      DataTable @[0] { 
	DataTableCols @.data = [27] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[4] { };
	  String_Data @[5] { };
	  String_Data @[6] { };
	  String_Data @[7] { };
	  String_Data @[8] { };
	  String_Data @[9] { };
	  String_Data @[10] { };
	  String_Data @[11] { };
	  String_Data @[12] { };
	  String_Data @[13] { };
	  String_Data @[14] { };
	  String_Data @[15] { };
	  String_Data @[16] { };
	  String_Data @[17] { };
	  String_Data @[18] { };
	  String_Data @[19] { };
	  float_Data @[20] { };
	  float_Data @[21] { };
	  float_Data @[22] { };
	  int_Data @[23] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[24] { };
	  float_Data @[25] { };
	  float_Data @[26] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [27] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[4] { };
	  String_Data @[5] { };
	  String_Data @[6] { };
	  String_Data @[7] { };
	  float_Data @[8] { };
	  String_Data @[9] { };
	  String_Data @[10] { };
	  float_Data @[11] { };
	  String_Data @[12] { };
	  String_Data @[13] { };
	  float_Data @[14] { };
	  String_Data @[15] { };
	  String_Data @[16] { };
	  float_Data @[17] { };
	  String_Data @[18] { };
	  String_Data @[19] { };
	  float_Data @[20] { };
	  String_Data @[21] { };
	  String_Data @[22] { };
	  float_Data @[23] { };
	  String_Data @[24] { };
	  String_Data @[25] { };
	  float_Data @[26] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [23] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	  float_Data @[11] { };
	  float_Data @[12] { };
	  float_Data @[13] { };
	  float_Data @[14] { };
	  float_Data @[15] { };
	  float_Data @[16] { };
	  float_Data @[17] { };
	  float_Data @[18] { };
	  float_Data @[19] { };
	  float_Data @[20] { };
	  float_Data @[21] { };
	  float_Data @[22] { };
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [16] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[4] { };
	  String_Data @[5] { };
	  String_Data @[6] { };
	  int_Data @[7] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[8] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[9] { };
	  float_Data @[10] { };
	  float_Data @[11] { };
	  float_Data @[12] { };
	  float_Data @[13] { };
	  float_Data @[14] { };
	  float_Data @[15] { };
	};
      };
    };
    DataTable_Group @.gp[2] = [4] { 
      DataTable @[0] { 
	DataTableCols @.data = [2] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { };
	};
      };
      DataTable @[1] { 
    UserDataItem_List @*(.user_data_) {
	  UserDataItem @[0] { };
	  UserDataItem @[1] { };
	  UserDataItem @[2] { };
	  UserDataItem @[3] { };
    };

	DataTableCols @.data = [1] {
	  float_Data @[0] { };
	};
      };
      DataTable @[2] { 
    UserDataItem_List @*(.user_data_) {
	  UserDataItem @[0] { };
	  UserDataItem @[1] { };
    };

	DataTableCols @.data = [1] {
	  float_Data @[0] { };
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [3] {
	  float_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
    };
    DataTable_Group @.gp[3] = [0] { 
      DataTable_Group @.gp[0] = [4] { 
	DataTable @[0] { 
	  DataTableCols @.data = [23] {
	    String_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[3] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    byte_Data @[4] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    byte_Data @[5] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[6] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[7] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[8] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[9] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[10] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    byte_Data @[11] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[12] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[13] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[14] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[15] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[16] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    float_Data @[17] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[18] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    String_Data @[19] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[20] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[21] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[22] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[1] { 
	  DataTableCols @.data = [11] {
	    String_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    double_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    double_Data @[3] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    double_Data @[4] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    double_Data @[5] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    double_Data @[6] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    byte_Data @[7] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[8] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[9] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[10] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	  };
	};
	DataTable @[2] { 
	  DataTableCols @.data = [23] {
	    String_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[3] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    byte_Data @[4] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    byte_Data @[5] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[6] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[7] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[8] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[9] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[10] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    byte_Data @[11] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[12] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[13] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[14] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[15] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[16] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    float_Data @[17] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[18] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    String_Data @[19] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[20] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[21] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[22] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[3] { 
	  DataTableCols @.data = [3] {
	    String_Data @[0] { };
	    float_Data @[1] { };
	    float_Data @[2] { };
	  };
	};
      };
      DataTable_Group @.gp[1] = [12] { 
	DataTable @[0] { 
	  DataTableCols @.data = [21] {
	    String_Data @[0] { };
	    String_Data @[1] { };
	    String_Data @[2] { };
	    String_Data @[3] { };
	    String_Data @[4] { };
	    String_Data @[5] { };
	    String_Data @[6] { };
	    String_Data @[7] { };
	    String_Data @[8] { };
	    String_Data @[9] { };
	    int_Data @[10] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[11] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[12] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[13] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[14] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[15] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[16] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[17] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[18] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[19] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    float_Data @[20] { };
	  };
	};
	DataTable @[1] { 
	  DataTableCols @.data = [2] {
	    String_Data @[0] { };
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[2] { 
	  DataTableCols @.data = [2] {
	    String_Data @[0] { };
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[3] { 
	  DataTableCols @.data = [2] {
	    String_Data @[0] { };
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[4] { 
	  DataTableCols @.data = [2] {
	    String_Data @[0] { };
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[5] { 
	  DataTableCols @.data = [2] {
	    String_Data @[0] { };
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[6] { 
	  DataTableCols @.data = [2] {
	    String_Data @[0] { };
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[7] { 
	  DataTableCols @.data = [2] {
	    String_Data @[0] { };
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[8] { 
	  DataTableCols @.data = [3] {
	    String_Data @[0] { };
	    String_Data @[1] { };
	    int_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[9] { 
	  DataTableCols @.data = [7] {
	    String_Data @[0] { };
	    String_Data @[1] { };
	    String_Data @[2] { };
	    int_Data @[3] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[4] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[5] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[6] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
	DataTable @[10] { 
	  DataTableCols @.data = [1] {
	    int_Data @[0] { };
	  };
	};
	DataTable @[11] { 
	  DataTableCols @.data = [1] {
	    int_Data @[0] { };
	  };
	};
      };
    };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [0] {
    Program_Group @.gp[0] = [13] { 
      Program @[0] { 
	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [2] {
	  RndSeed @[0] { };
	  TimeUsedHR @[1] { };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [49] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	  ProgVar @[16] { };
	  ProgVar @[17] { };
	  ProgVar @[18] { };
	  ProgVar @[19] { };
	  ProgVar @[20] { };
	  ProgVar @[21] { };
	  ProgVar @[22] { };
	  ProgVar @[23] { };
	  ProgVar @[24] { };
	  ProgVar @[25] { };
	  ProgVar @[26] { };
	  ProgVar @[27] { };
	  ProgVar @[28] { };
	  ProgVar @[29] { };
	  ProgVar @[30] { };
	  ProgVar @[31] { };
	  ProgVar @[32] { };
	  ProgVar @[33] { };
	  ProgVar @[34] { };
	  ProgVar @[35] { };
	  ProgVar @[36] { };
	  ProgVar @[37] { };
	  ProgVar @[38] { };
	  ProgVar @[39] { };
	  ProgVar @[40] { };
	  ProgVar @[41] { };
	  ProgVar @[42] { };
	  ProgVar @[43] { };
	  ProgVar @[44] { };
	  ProgVar @[45] { };
	  ProgVar @[46] { };
	  ProgVar @[47] { };
	  ProgVar @[48] { };
	};

	Function_List @.functions = [2] {
	  Function @[0] { 
	    ProgVar_List @.args = [1] {
	      ProgVar @[0] { };
	    };

	    ProgEl_List @.fun_code = [6] {
	      ProgVars @[0] { 
		ProgVar_List @.local_vars = [3] {
		  ProgVar @[0] { };
		  ProgVar @[1] { };
		  ProgVar @[2] { };
		};
	      };
	      AssignExpr @[1] { };
	      AssignExpr @[2] { };
	      If @[3] { 
		ProgEl_List @.true_code = [2] {
		  AssignExpr @[0] { };
		  AssignExpr @[1] { };
		};
	      };
	      MethodCall @[4] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      IfElse @[5] { 
		ProgEl_List @.true_code = [1] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		};

		ProgEl_List @.false_code = [1] {
		  AssignExpr @[0] { };
		};
	      };
	    };
	  };
	  Function @[1] { 
	    ProgVar_List @.args = [1] {
	      ProgVar @[0] { };
	    };

	    ProgEl_List @.fun_code = [4] {
	      ProgVars @[0] { 
		ProgVar_List @.local_vars = [2] {
		  ProgVar @[0] { };
		  ProgVar @[1] { };
		};
	      };
	      AssignExpr @[1] { };
	      AssignExpr @[2] { };
	      IfElse @[3] { 
		ProgEl_List @.true_code = [3] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		  MemberAssign @[1] { };
		  MemberAssign @[2] { };
		};

		ProgEl_List @.false_code = [3] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		  MemberAssign @[1] { };
		  MemberAssign @[2] { };
		};
	      };
	    };
	  };
	};

	ProgEl_List @.init_code = [6] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  NetCounterInit @[3] { };
	  MethodCall @[4] { };
	  IfGuiPrompt @[5] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [48] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetCounterInit @[1] { };
	  AssignExpr @[2] { };
	  CodeBlock @[3] { 
	    ProgEl_List @.prog_code = [4] {
	      ResetDataRows @[0] { };
	      DataSelectRowsProg @[1] { 
		DataOpList @.ops = [1] {
		  DataSelectEl @[0] { };
		};
	      };
	      IfElse @[2] { 
		ProgEl_List @.true_code = [1] {
		  MiscCall @[0] { 
		    ProgArg_List @.meth_args = [9] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		      ProgArg @[3] { };
		      ProgArg @[4] { };
		      ProgArg @[5] { };
		      ProgArg @[6] { };
		      ProgArg @[7] { };
		      ProgArg @[8] { };
		    };
		  };
		};
	      };
	      MethodCall @[3] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };
	  };
	  Comment @[4] { };
	  DataVarProg @[5] { };
	  DataVarProg @[6] { };
	  DataVarProg @[7] { };
	  DataVarProg @[8] { };
	  DataVarProg @[9] { };
	  DataVarProg @[10] { };
	  DataVarProg @[11] { };
	  If @[12] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  OtherProgramVar @[13] { };
	  FunctionCall @[14] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  If @[15] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  IfElse @[16] { 
	    ProgEl_List @.true_code = [1] {
	      IfElse @[0] { 
		ProgEl_List @.true_code = [2] {
		  FunctionCall @[0] { 
		    ProgArg_List @.fun_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		  ProgramCall @[1] { 
		    ProgArg_List @.prog_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		};

		ProgEl_List @.false_code = [1] {
		  ProgramCall @[0] { 
		    ProgArg_List @.prog_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		};
	      };
	    };
	  };
	  ProgramCall @[17] { 
	    ProgArg_List @.prog_args = [5] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	      ProgArg @[4] { };
	    };
	  };
	  ProgramCall @[18] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[19] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  IfElse @[20] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  IfElse @[21] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	  IfElse @[22] { 
	    ProgEl_List @.true_code = [3] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      PrintVar @[1] { };
	      If @[2] { 
		ProgEl_List @.true_code = [1] {
		  UserScript @[0] { };
		};
	      };
	    };
	  };
	  AssignExpr @[23] { };
	  AssignExpr @[24] { };
	  MethodCall @[25] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[26] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[27] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[28] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[29] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  IfElse @[30] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[1] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	    };
	  };
	  MethodCall @[31] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[32] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[33] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[34] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[35] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[36] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[37] { };
	  MethodCall @[38] { };
	  Comment @[39] { };
	  If @[40] { 
	    ProgEl_List @.true_code = [9] {
	      MemberAssign @[0] { };
	      MemberAssign @[1] { };
	      ProgramCall @[2] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[3] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[4] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      ProgramCall @[5] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[6] { };
	      IfElse @[7] { 
		ProgEl_List @.true_code = [4] {
		  ProgramCall @[0] { 
		    ProgArg_List @.prog_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  MethodCall @[1] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  MethodCall @[2] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  ProgramCall @[3] { 
		    ProgArg_List @.prog_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		};
	      };
	      ReturnExpr @[8] { };
	    };
	  };
	  Comment @[41] { };
	  WhileLoop @[42] { 
	    ProgEl_List @.loop_code = [12] {
	      Comment @[0] { };
	      MemberAssign @[1] { };
	      MemberAssign @[2] { };
	      IfElse @[3] { 
		ProgEl_List @.true_code = [1] {
		  FunctionCall @[0] { 
		    ProgArg_List @.fun_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		};

		ProgEl_List @.false_code = [1] {
		  FunctionCall @[0] { 
		    ProgArg_List @.fun_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		};
	      };
	      ProgramCall @[4] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      IfElse @[5] { 
		ProgEl_List @.true_code = [2] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  MethodCall @[1] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		};

		ProgEl_List @.false_code = [2] {
		  MethodCall @[0] { };
		  MethodCall @[1] { };
		};
	      };
	      ProgramCall @[6] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[7] { };
	      IfBreak @[8] { };
	      IfElse @[9] { 
		ProgEl_List @.true_code = [1] {
		  ProgramCall @[0] { 
		    ProgArg_List @.prog_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		};
	      };
	      Comment @[10] { };
	      IfElse @[11] { 
		ProgEl_List @.true_code = [6] {
		  MemberAssign @[0] { };
		  MemberAssign @[1] { };
		  IfElse @[2] { 
		    ProgEl_List @.true_code = [1] {
		      ProgramCall @[0] { 
			ProgArg_List @.prog_args = [3] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			  ProgArg @[2] { };
			};
		      };
		    };

		    ProgEl_List @.false_code = [1] {
		      ProgramCall @[0] { 
			ProgArg_List @.prog_args = [3] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			  ProgArg @[2] { };
			};
		      };
		    };
		  };
		  MethodCall @[3] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  MethodCall @[4] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  ProgramCall @[5] { 
		    ProgArg_List @.prog_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		};
	      };
	    };
	  };
	  MethodCall @[43] { };
	  ProgramCall @[44] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[45] { };
	  PrintExpr @[46] { };
	  IfElse @[47] { 
	    ProgEl_List @.true_code = [6] {
	      MemberAssign @[0] { };
	      MemberAssign @[1] { };
	      IfElse @[2] { 
		ProgEl_List @.true_code = [1] {
		  ProgramCall @[0] { 
		    ProgArg_List @.prog_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		};

		ProgEl_List @.false_code = [1] {
		  ProgramCall @[0] { 
		    ProgArg_List @.prog_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		};
	      };
	      MethodCall @[3] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[4] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      ProgramCall @[5] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	    };
	  };
	};
      };
      Program @[2] { 
	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [10] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	};

	ProgEl_List @.init_code = [3] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	  AssignExpr @[2] { };
	};

	ProgEl_List @.prog_code = [17] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	  AssignExpr @[2] { };
	  ResetDataRows @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[5] { };
	  MethodCall @[6] { };
	  MethodCall @[7] { };
	  MethodCall @[8] { };
	  NetDataLoop @[9] { 
	    ProgEl_List @.loop_code = [1] {
	      Switch @[0] { 
		ProgEl_List @.cases = [2] {
		  CaseBlock @[0] { 
		    ProgEl_List @.prog_code = [1] {
		      ProgramCall @[0] { 
			ProgArg_List @.prog_args = [2] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			};
		      };
		    };
		  };
		  CaseBlock @[1] { 
		    ProgEl_List @.prog_code = [1] {
		      ProgramCall @[0] { 
			ProgArg_List @.prog_args = [2] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			};
		      };
		    };
		  };
		};
	      };
	    };
	  };
	  IfElse @[10] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[11] { };
	  MethodCall @[12] { };
	  MethodCall @[13] { };
	  MethodCall @[14] { };
	  MethodCall @[15] { };
	  ProgramCall @[16] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [28] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	  ProgVar @[16] { };
	  ProgVar @[17] { };
	  ProgVar @[18] { };
	  ProgVar @[19] { };
	  ProgVar @[20] { };
	  ProgVar @[21] { };
	  ProgVar @[22] { };
	  ProgVar @[23] { };
	  ProgVar @[24] { };
	  ProgVar @[25] { };
	  ProgVar @[26] { };
	  ProgVar @[27] { };
	};

	ProgEl_List @.prog_code = [21] {
	  ResetDataRows @[0] { };
	  Comment @[1] { };
	  DataVarProg @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  DataVarProg @[4] { };
	  DataVarProg @[5] { };
	  AssignExpr @[6] { };
	  Comment @[7] { };
	  AssignExpr @[8] { };
	  IfElse @[9] { 
	    ProgEl_List @.true_code = [2] {
	      AssignExpr @[0] { };
	      If @[1] { 
		ProgEl_List @.true_code = [1] {
		  AssignExpr @[0] { };
		};
	      };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  AssignExpr @[10] { };
	  AssignExpr @[11] { };
	  AssignExpr @[12] { };
	  AssignExpr @[13] { };
	  AssignExpr @[14] { };
	  AssignExpr @[15] { };
	  PrintVar @[16] { };
	  IfElse @[17] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  Comment @[18] { };
	  ForLoop @[19] { 
	    ProgEl_List @.loop_code = [7] {
	      RandomCall @[0] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      RandomCall @[1] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      RandomCall @[2] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      RandomCall @[3] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      DataVarProg @[4] { };
	      If @[5] { 
		ProgEl_List @.true_code = [1] {
		  IfElse @[0] { 
		    ProgEl_List @.true_code = [1] {
		      MemberAssign @[0] { };
		    };

		    ProgEl_List @.false_code = [1] {
		      MemberAssign @[0] { };
		    };
		  };
		};
	      };
	      ProgramCall @[6] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  ProgramCall @[20] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[4] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [8] {
	  ResetDataRows @[0] { };
	  NetCounterInit @[1] { };
	  MethodCall @[2] { };
	  WhileLoop @[3] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { };
	    };
	  };
	  MethodCall @[4] { };
	  If @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  ProgramCall @[6] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  NetUpdateView @[7] { };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [2] {
	  TimeUsed @[0] { };
	  TimeUsed @[1] { };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [8] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	};

	ProgEl_List @.init_code = [3] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	};

	ProgEl_List @.prog_code = [15] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  ProgramCall @[3] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[4] { };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[6] { };
	  AssignExpr @[7] { };
	  IfElse @[8] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[9] { 
	    ProgEl_List @.loop_code = [5] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	      If @[4] { 
		ProgEl_List @.true_code = [1] {
		  If @[0] { 
		    ProgEl_List @.true_code = [1] {
		      AssignExpr @[0] { };
		    };
		  };
		};
	      };
	    };
	  };
	  MethodCall @[10] { };
	  MethodCall @[11] { };
	  IfElse @[12] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      MethodCall @[1] { };
	    };
	  };
	  IfElse @[13] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetUpdateView @[14] { };
	};
      };
      Program @[6] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [3] {
	  MethodCall @[0] { };
	  NetUpdateView @[1] { };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [27] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	      NetMonItem @[11] { };
	      NetMonItem @[12] { };
	      NetMonItem @[13] { };
	      NetMonItem @[14] { };
	      NetMonItem @[15] { };
	      NetMonItem @[16] { };
	      NetMonItem @[17] { };
	      NetMonItem @[18] { };
	      NetMonItem @[19] { };
	      NetMonItem @[20] { };
	      NetMonItem @[21] { };
	      NetMonItem @[22] { };
	      NetMonItem @[23] { };
	      NetMonItem @[24] { };
	      NetMonItem @[25] { };
	      NetMonItem @[26] { };
	    };
	  };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [36] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	  ProgVar @[16] { };
	  ProgVar @[17] { };
	  ProgVar @[18] { };
	  ProgVar @[19] { };
	  ProgVar @[20] { };
	  ProgVar @[21] { };
	  ProgVar @[22] { };
	  ProgVar @[23] { };
	  ProgVar @[24] { };
	  ProgVar @[25] { };
	  ProgVar @[26] { };
	  ProgVar @[27] { };
	  ProgVar @[28] { };
	  ProgVar @[29] { };
	  ProgVar @[30] { };
	  ProgVar @[31] { };
	  ProgVar @[32] { };
	  ProgVar @[33] { };
	  ProgVar @[34] { };
	  ProgVar @[35] { };
	};

	Function_List @.functions = [1] {
	  Function @[0] { 
	    ProgVar_List @.args = [3] {
	      ProgVar @[0] { };
	      ProgVar @[1] { };
	      ProgVar @[2] { };
	    };

	    ProgEl_List @.fun_code = [6] {
	      ProgVars @[0] { };
	      If @[1] { };
	      IfElse @[2] { 
		ProgEl_List @.true_code = [2] {
		  AssignExpr @[0] { };
		  AssignExpr @[1] { };
		};

		ProgEl_List @.false_code = [2] {
		  AssignExpr @[0] { };
		  AssignExpr @[1] { };
		};
	      };
	      IfElse @[3] { 
		ProgEl_List @.true_code = [2] {
		  AssignExpr @[0] { };
		  AssignExpr @[1] { };
		};

		ProgEl_List @.false_code = [2] {
		  AssignExpr @[0] { };
		  AssignExpr @[1] { };
		};
	      };
	      VarIncr @[4] { };
	      ReturnExpr @[5] { };
	    };
	  };
	};

	ProgEl_List @.init_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [26] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	  OtherProgramVar @[3] { };
	  MemberAssign @[4] { };
	  AssignExpr @[5] { };
	  AssignExpr @[6] { };
	  AssignExpr @[7] { };
	  AssignExpr @[8] { };
	  AssignExpr @[9] { };
	  AssignExpr @[10] { };
	  DataVarProg @[11] { };
	  FunctionCall @[12] { 
	    ProgArg_List @.fun_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  FunctionCall @[13] { 
	    ProgArg_List @.fun_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  FunctionCall @[14] { 
	    ProgArg_List @.fun_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  FunctionCall @[15] { 
	    ProgArg_List @.fun_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  FunctionCall @[16] { 
	    ProgArg_List @.fun_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  FunctionCall @[17] { 
	    ProgArg_List @.fun_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  FunctionCall @[18] { 
	    ProgArg_List @.fun_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  DataVarProg @[19] { };
	  DataVarProg @[20] { };
	  DataVarProg @[21] { };
	  DataVarProg @[22] { };
	  DataVarProg @[23] { };
	  MethodCall @[24] { };
	  MethodCall @[25] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [5] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [27] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	      NetMonItem @[11] { };
	      NetMonItem @[12] { };
	      NetMonItem @[13] { };
	      NetMonItem @[14] { };
	      NetMonItem @[15] { };
	      NetMonItem @[16] { };
	      NetMonItem @[17] { };
	      NetMonItem @[18] { };
	      NetMonItem @[19] { };
	      NetMonItem @[20] { };
	      NetMonItem @[21] { };
	      NetMonItem @[22] { };
	      NetMonItem @[23] { };
	      NetMonItem @[24] { };
	      NetMonItem @[25] { };
	      NetMonItem @[26] { };
	    };
	  };
	  DataTable @[1] { 
	    DataTableCols @.data = [5] {
	      String_Data @[0] { };
	      int_Data @[1] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[2] { };
	      float_Data @[3] { };
	      float_Data @[4] { };
	    };
	  };
	  DataTable @[2] { 
	    DataTableCols @.data = [5] {
	      String_Data @[0] { };
	      int_Data @[1] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[2] { };
	      float_Data @[3] { };
	      float_Data @[4] { };
	    };
	  };
	  DataTable @[3] { 
	    DataTableCols @.data = [5] {
	      String_Data @[0] { };
	      int_Data @[1] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[2] { };
	      float_Data @[3] { };
	      float_Data @[4] { };
	    };
	  };
	  DataTable @[4] { 
	    DataTableCols @.data = [5] {
	      String_Data @[0] { };
	      int_Data @[1] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[2] { };
	      float_Data @[3] { };
	      float_Data @[4] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	Function_List @.functions = [1] {
	  Function @[0] { 
	    ProgVar_List @.args = [1] {
	      ProgVar @[0] { };
	    };

	    ProgEl_List @.fun_code = [30] {
	      ProgVars @[0] { 
		ProgVar_List @.local_vars = [7] {
		  ProgVar @[0] { };
		  ProgVar @[1] { };
		  ProgVar @[2] { };
		  ProgVar @[3] { };
		  ProgVar @[4] { };
		  ProgVar @[5] { };
		  ProgVar @[6] { };
		};
	      };
	      UserScript @[1] { };
	      DataGroupProg @[2] { 
		DataOpList @.ops = [5] {
		  DataGroupEl @[0] { };
		  DataGroupEl @[1] { };
		  DataGroupEl @[2] { };
		  DataGroupEl @[3] { };
		  DataGroupEl @[4] { };
		};
	      };
	      Comment @[3] { };
	      DataSortProg @[4] { 
		DataOpList @.ops = [1] {
		  DataSortEl @[0] { };
		};
	      };
	      DataSortProg @[5] { 
		DataOpList @.ops = [1] {
		  DataSortEl @[0] { };
		};
	      };
	      DataSortProg @[6] { 
		DataOpList @.ops = [1] {
		  DataSortEl @[0] { };
		};
	      };
	      Comment @[7] { };
	      MethodCall @[8] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      MethodCall @[9] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      Comment @[10] { };
	      MethodCall @[11] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      AssignExpr @[12] { };
	      MethodCall @[13] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[14] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      Comment @[15] { };
	      MethodCall @[16] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      AssignExpr @[17] { };
	      MethodCall @[18] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[19] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      Comment @[20] { };
	      MethodCall @[21] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      AssignExpr @[22] { };
	      MethodCall @[23] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[24] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      Comment @[25] { };
	      IfElse @[26] { 
		ProgEl_List @.true_code = [1] {
		  AssignExpr @[0] { };
		};

		ProgEl_List @.false_code = [1] {
		  IfElse @[0] { 
		    ProgEl_List @.true_code = [1] {
		      AssignExpr @[0] { };
		    };

		    ProgEl_List @.false_code = [1] {
		      AssignExpr @[0] { };
		    };
		  };
		};
	      };
	      AssignExpr @[27] { };
	      MethodCall @[28] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[29] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	    };
	  };
	};

	ProgEl_List @.init_code = [1] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [13] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  Comment @[1] { };
	  AddNewDataRow @[2] { };
	  DataProcCall @[3] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  FunctionCall @[4] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[5] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[6] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[7] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[8] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[9] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[10] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  DoneWritingDataRow @[11] { };
	  MethodCall @[12] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[9] { 
	ProgObjList @.objs = [5] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [68] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	      NetMonItem @[11] { };
	      NetMonItem @[12] { };
	      NetMonItem @[13] { };
	      NetMonItem @[14] { };
	      NetMonItem @[15] { };
	      NetMonItem @[16] { };
	      NetMonItem @[17] { };
	      NetMonItem @[18] { };
	      NetMonItem @[19] { };
	      NetMonItem @[20] { };
	      NetMonItem @[21] { };
	      NetMonItem @[22] { };
	      NetMonItem @[23] { };
	      NetMonItem @[24] { };
	      NetMonItem @[25] { };
	      NetMonItem @[26] { };
	      NetMonItem @[27] { };
	      NetMonItem @[28] { };
	      NetMonItem @[29] { };
	      NetMonItem @[30] { };
	      NetMonItem @[31] { };
	      NetMonItem @[32] { };
	      NetMonItem @[33] { };
	      NetMonItem @[34] { };
	      NetMonItem @[35] { };
	      NetMonItem @[36] { };
	      NetMonItem @[37] { };
	      NetMonItem @[38] { };
	      NetMonItem @[39] { };
	      NetMonItem @[40] { };
	      NetMonItem @[41] { };
	      NetMonItem @[42] { };
	      NetMonItem @[43] { };
	      NetMonItem @[44] { };
	      NetMonItem @[45] { };
	      NetMonItem @[46] { };
	      NetMonItem @[47] { };
	      NetMonItem @[48] { };
	      NetMonItem @[49] { };
	      NetMonItem @[50] { };
	      NetMonItem @[51] { };
	      NetMonItem @[52] { };
	      NetMonItem @[53] { };
	      NetMonItem @[54] { };
	      NetMonItem @[55] { };
	      NetMonItem @[56] { };
	      NetMonItem @[57] { };
	      NetMonItem @[58] { };
	      NetMonItem @[59] { };
	      NetMonItem @[60] { };
	      NetMonItem @[61] { };
	      NetMonItem @[62] { };
	      NetMonItem @[63] { };
	      NetMonItem @[64] { };
	      NetMonItem @[65] { };
	      NetMonItem @[66] { };
	      NetMonItem @[67] { };
	    };
	  };
	  DataTable @[1] { 
	    DataTableCols @.data = [5] {
	      String_Data @[0] { };
	      int_Data @[1] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[2] { };
	      float_Data @[3] { };
	      float_Data @[4] { };
	    };
	  };
	  DataTable @[2] { 
	    DataTableCols @.data = [5] {
	      String_Data @[0] { };
	      int_Data @[1] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[2] { };
	      float_Data @[3] { };
	      float_Data @[4] { };
	    };
	  };
	  DataTable @[3] { 
	    DataTableCols @.data = [5] {
	      String_Data @[0] { };
	      int_Data @[1] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[2] { };
	      float_Data @[3] { };
	      float_Data @[4] { };
	    };
	  };
	  DataTable @[4] { 
	    DataTableCols @.data = [5] {
	      String_Data @[0] { };
	      int_Data @[1] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[2] { };
	      float_Data @[3] { };
	      float_Data @[4] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	Function_List @.functions = [1] {
	  Function @[0] { 
	    ProgVar_List @.args = [1] {
	      ProgVar @[0] { };
	    };

	    ProgEl_List @.fun_code = [30] {
	      ProgVars @[0] { 
		ProgVar_List @.local_vars = [7] {
		  ProgVar @[0] { };
		  ProgVar @[1] { };
		  ProgVar @[2] { };
		  ProgVar @[3] { };
		  ProgVar @[4] { };
		  ProgVar @[5] { };
		  ProgVar @[6] { };
		};
	      };
	      UserScript @[1] { };
	      DataGroupProg @[2] { 
		DataOpList @.ops = [5] {
		  DataGroupEl @[0] { };
		  DataGroupEl @[1] { };
		  DataGroupEl @[2] { };
		  DataGroupEl @[3] { };
		  DataGroupEl @[4] { };
		};
	      };
	      Comment @[3] { };
	      DataSortProg @[4] { 
		DataOpList @.ops = [1] {
		  DataSortEl @[0] { };
		};
	      };
	      DataSortProg @[5] { 
		DataOpList @.ops = [1] {
		  DataSortEl @[0] { };
		};
	      };
	      DataSortProg @[6] { 
		DataOpList @.ops = [1] {
		  DataSortEl @[0] { };
		};
	      };
	      Comment @[7] { };
	      MethodCall @[8] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      MethodCall @[9] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      Comment @[10] { };
	      MethodCall @[11] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      AssignExpr @[12] { };
	      MethodCall @[13] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[14] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      Comment @[15] { };
	      MethodCall @[16] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      AssignExpr @[17] { };
	      MethodCall @[18] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[19] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      Comment @[20] { };
	      MethodCall @[21] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      AssignExpr @[22] { };
	      MethodCall @[23] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[24] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      Comment @[25] { };
	      IfElse @[26] { 
		ProgEl_List @.true_code = [1] {
		  AssignExpr @[0] { };
		};

		ProgEl_List @.false_code = [1] {
		  IfElse @[0] { 
		    ProgEl_List @.true_code = [1] {
		      AssignExpr @[0] { };
		    };

		    ProgEl_List @.false_code = [1] {
		      AssignExpr @[0] { };
		    };
		  };
		};
	      };
	      AssignExpr @[27] { };
	      MethodCall @[28] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[29] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	    };
	  };
	};

	ProgEl_List @.init_code = [1] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [13] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  Comment @[1] { };
	  AddNewDataRow @[2] { };
	  DataProcCall @[3] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  FunctionCall @[4] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[5] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[6] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[7] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[8] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[9] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[10] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  DoneWritingDataRow @[11] { };
	  MethodCall @[12] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[10] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [16] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	      NetMonItem @[11] { };
	      NetMonItem @[12] { };
	      NetMonItem @[13] { };
	      NetMonItem @[14] { };
	      NetMonItem @[15] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [3] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	};
      };
      Program @[11] { 
	ProgObjList @.objs = [2] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [23] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	      NetMonItem @[11] { };
	      NetMonItem @[12] { };
	      NetMonItem @[13] { };
	      NetMonItem @[14] { };
	      NetMonItem @[15] { };
	      NetMonItem @[16] { };
	      NetMonItem @[17] { };
	      NetMonItem @[18] { };
	      NetMonItem @[19] { };
	      NetMonItem @[20] { };
	      NetMonItem @[21] { };
	      NetMonItem @[22] { };
	    };
	  };
	  DataTable @[1] { 
	    DataTableCols @.data = [3] {
	      float_Data @[0] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[1] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[2] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [12] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  AssignExpr @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [15] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { };
	  MethodCall @[4] { };
	  AssignExpr @[5] { };
	  AssignExpr @[6] { };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[9] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[10] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[11] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[12] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[13] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[14] { };
	};
      };
      Program @[12] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.prog_code = [7] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  UserScript @[6] { };
	};
      };
    };
    Program_Group @.gp[1] = [5] { 
      Program @[0] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [16] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	};

	ProgEl_List @.prog_code = [66] {
	  IfElse @[0] { 
	    ProgEl_List @.true_code = [2] {
	      PrintVar @[0] { };
	      ReturnExpr @[1] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  PrintVar @[1] { };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [5] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	      ProgArg @[4] { };
	    };
	  };
	  AssignExpr @[4] { };
	  Comment @[5] { };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [12] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	      ProgArg @[4] { };
	      ProgArg @[5] { };
	      ProgArg @[6] { };
	      ProgArg @[7] { };
	      ProgArg @[8] { };
	      ProgArg @[9] { };
	      ProgArg @[10] { };
	      ProgArg @[11] { };
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[9] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[10] { };
	  DataGroupProg @[11] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[12] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[13] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[14] { };
	  DataGroupProg @[15] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[16] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[17] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[18] { };
	  DataGroupProg @[19] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[20] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[21] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[22] { };
	  DataGroupProg @[23] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[24] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[25] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[26] { };
	  DataGroupProg @[27] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[28] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[29] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[30] { };
	  DataGroupProg @[31] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[32] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[33] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[34] { };
	  DataGroupProg @[35] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[36] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[37] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[38] { };
	  DataGroupProg @[39] { 
	    DataOpList @.ops = [2] {
	      DataGroupEl @[0] { };
	      DataGroupEl @[1] { };
	    };
	  };
	  MethodCall @[40] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[41] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[42] { };
	  DataGroupProg @[43] { 
	    DataOpList @.ops = [3] {
	      DataGroupEl @[0] { };
	      DataGroupEl @[1] { };
	      DataGroupEl @[2] { };
	    };
	  };
	  MethodCall @[44] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[45] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[46] { };
	  MethodCall @[47] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[48] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[49] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[50] { };
	  MethodCall @[51] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[52] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[53] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[54] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[55] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[56] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[57] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[58] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[59] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[60] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[61] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  IfElse @[62] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [2] {
	      AssignExpr @[0] { };
	      MethodCall @[1] { 
		ProgArg_List @.meth_args = [10] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		  ProgArg @[4] { };
		  ProgArg @[5] { };
		  ProgArg @[6] { };
		  ProgArg @[7] { };
		  ProgArg @[8] { };
		  ProgArg @[9] { };
		};
	      };
	    };
	  };
	  AssignExpr @[63] { };
	  AssignExpr @[64] { };
	  DataCalcLoop @[65] { 
	    DataOpList @.src_cols = [21] {
	      DataOpEl @[0] { };
	      DataOpEl @[1] { };
	      DataOpEl @[2] { };
	      DataOpEl @[3] { };
	      DataOpEl @[4] { };
	      DataOpEl @[5] { };
	      DataOpEl @[6] { };
	      DataOpEl @[7] { };
	      DataOpEl @[8] { };
	      DataOpEl @[9] { };
	      DataOpEl @[10] { };
	      DataOpEl @[11] { };
	      DataOpEl @[12] { };
	      DataOpEl @[13] { };
	      DataOpEl @[14] { };
	      DataOpEl @[15] { };
	      DataOpEl @[16] { };
	      DataOpEl @[17] { };
	      DataOpEl @[18] { };
	      DataOpEl @[19] { };
	      DataOpEl @[20] { };
	    };

	    ProgEl_List @.loop_code = [19] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[1] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[3] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[4] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[5] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[6] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      Comment @[7] { };
	      MethodCall @[8] { 
		ProgArg_List @.meth_args = [13] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		  ProgArg @[4] { };
		  ProgArg @[5] { };
		  ProgArg @[6] { };
		  ProgArg @[7] { };
		  ProgArg @[8] { };
		  ProgArg @[9] { };
		  ProgArg @[10] { };
		  ProgArg @[11] { };
		  ProgArg @[12] { };
		};
	      };
	      AssignExpr @[9] { };
	      Comment @[10] { };
	      MethodCall @[11] { 
		ProgArg_List @.meth_args = [13] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		  ProgArg @[4] { };
		  ProgArg @[5] { };
		  ProgArg @[6] { };
		  ProgArg @[7] { };
		  ProgArg @[8] { };
		  ProgArg @[9] { };
		  ProgArg @[10] { };
		  ProgArg @[11] { };
		  ProgArg @[12] { };
		};
	      };
	      AssignExpr @[12] { };
	      If @[13] { 
		ProgEl_List @.true_code = [4] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  MethodCall @[1] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  MethodCall @[2] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  MethodCall @[3] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		};
	      };
	      DataCalcSetSrcRow @[14] { };
	      Comment @[15] { };
	      MethodCall @[16] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[17] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[18] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	    };

	    ProgVar_List @.src_col_vars = [21] {
	      ProgVar @[0] { };
	      ProgVar @[1] { };
	      ProgVar @[2] { };
	      ProgVar @[3] { };
	      ProgVar @[4] { };
	      ProgVar @[5] { };
	      ProgVar @[6] { };
	      ProgVar @[7] { };
	      ProgVar @[8] { };
	      ProgVar @[9] { };
	      ProgVar @[10] { };
	      ProgVar @[11] { };
	      ProgVar @[12] { };
	      ProgVar @[13] { };
	      ProgVar @[14] { };
	      ProgVar @[15] { };
	      ProgVar @[16] { };
	      ProgVar @[17] { };
	      ProgVar @[18] { };
	      ProgVar @[19] { };
	      ProgVar @[20] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [16] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	};

	ProgEl_List @.prog_code = [67] {
	  PrintVar @[0] { };
	  MethodCall @[1] { };
	  DataProcCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  If @[5] { 
	    ProgEl_List @.true_code = [5] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      AssignExpr @[1] { };
	      DataProcCall @[2] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      MethodCall @[3] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      ForLoop @[4] { 
		ProgEl_List @.loop_code = [2] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		  MethodCall @[1] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		};
	      };
	    };
	  };
	  Comment @[6] { };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[9] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[10] { 
	    ProgArg_List @.meth_args = [12] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	      ProgArg @[4] { };
	      ProgArg @[5] { };
	      ProgArg @[6] { };
	      ProgArg @[7] { };
	      ProgArg @[8] { };
	      ProgArg @[9] { };
	      ProgArg @[10] { };
	      ProgArg @[11] { };
	    };
	  };
	  Comment @[11] { };
	  DataGroupProg @[12] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[13] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[14] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[15] { };
	  DataGroupProg @[16] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[17] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[18] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[19] { };
	  DataGroupProg @[20] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[21] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[22] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[23] { };
	  DataGroupProg @[24] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[25] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[26] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[27] { };
	  DataGroupProg @[28] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[29] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[30] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[31] { };
	  DataGroupProg @[32] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[33] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[34] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[35] { };
	  DataGroupProg @[36] { 
	    DataOpList @.ops = [1] {
	      DataGroupEl @[0] { };
	    };
	  };
	  MethodCall @[37] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[38] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[39] { };
	  DataGroupProg @[40] { 
	    DataOpList @.ops = [2] {
	      DataGroupEl @[0] { };
	      DataGroupEl @[1] { };
	    };
	  };
	  MethodCall @[41] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[42] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[43] { };
	  DataGroupProg @[44] { 
	    DataOpList @.ops = [3] {
	      DataGroupEl @[0] { };
	      DataGroupEl @[1] { };
	      DataGroupEl @[2] { };
	    };
	  };
	  MethodCall @[45] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[46] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[47] { };
	  MethodCall @[48] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[49] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[50] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  Comment @[51] { };
	  MethodCall @[52] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[53] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[54] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[55] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[56] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[57] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[58] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[59] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[60] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[61] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[62] { 
	    ProgArg_List @.meth_args = [10] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	      ProgArg @[4] { };
	      ProgArg @[5] { };
	      ProgArg @[6] { };
	      ProgArg @[7] { };
	      ProgArg @[8] { };
	      ProgArg @[9] { };
	    };
	  };
	  AssignExpr @[63] { };
	  AssignExpr @[64] { };
	  AssignExpr @[65] { };
	  DataCalcLoop @[66] { 
	    DataOpList @.src_cols = [21] {
	      DataOpEl @[0] { };
	      DataOpEl @[1] { };
	      DataOpEl @[2] { };
	      DataOpEl @[3] { };
	      DataOpEl @[4] { };
	      DataOpEl @[5] { };
	      DataOpEl @[6] { };
	      DataOpEl @[7] { };
	      DataOpEl @[8] { };
	      DataOpEl @[9] { };
	      DataOpEl @[10] { };
	      DataOpEl @[11] { };
	      DataOpEl @[12] { };
	      DataOpEl @[13] { };
	      DataOpEl @[14] { };
	      DataOpEl @[15] { };
	      DataOpEl @[16] { };
	      DataOpEl @[17] { };
	      DataOpEl @[18] { };
	      DataOpEl @[19] { };
	      DataOpEl @[20] { };
	    };

	    ProgEl_List @.loop_code = [19] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[1] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[3] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[4] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[5] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[6] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      Comment @[7] { };
	      MethodCall @[8] { 
		ProgArg_List @.meth_args = [13] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		  ProgArg @[4] { };
		  ProgArg @[5] { };
		  ProgArg @[6] { };
		  ProgArg @[7] { };
		  ProgArg @[8] { };
		  ProgArg @[9] { };
		  ProgArg @[10] { };
		  ProgArg @[11] { };
		  ProgArg @[12] { };
		};
	      };
	      AssignExpr @[9] { };
	      Comment @[10] { };
	      MethodCall @[11] { 
		ProgArg_List @.meth_args = [13] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		  ProgArg @[4] { };
		  ProgArg @[5] { };
		  ProgArg @[6] { };
		  ProgArg @[7] { };
		  ProgArg @[8] { };
		  ProgArg @[9] { };
		  ProgArg @[10] { };
		  ProgArg @[11] { };
		  ProgArg @[12] { };
		};
	      };
	      AssignExpr @[12] { };
	      If @[13] { 
		ProgEl_List @.true_code = [4] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  MethodCall @[1] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  MethodCall @[2] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  MethodCall @[3] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		};
	      };
	      DataCalcSetSrcRow @[14] { };
	      Comment @[15] { };
	      MethodCall @[16] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[17] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      MethodCall @[18] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	    };

	    ProgVar_List @.src_col_vars = [21] {
	      ProgVar @[0] { };
	      ProgVar @[1] { };
	      ProgVar @[2] { };
	      ProgVar @[3] { };
	      ProgVar @[4] { };
	      ProgVar @[5] { };
	      ProgVar @[6] { };
	      ProgVar @[7] { };
	      ProgVar @[8] { };
	      ProgVar @[9] { };
	      ProgVar @[10] { };
	      ProgVar @[11] { };
	      ProgVar @[12] { };
	      ProgVar @[13] { };
	      ProgVar @[14] { };
	      ProgVar @[15] { };
	      ProgVar @[16] { };
	      ProgVar @[17] { };
	      ProgVar @[18] { };
	      ProgVar @[19] { };
	      ProgVar @[20] { };
	    };
	  };
	};
      };
      Program @[2] { 
	ProgObjList @.objs = [19] {
	  DataTable @[0] { 
	    DataTableCols @.data = [21] {
	      String_Data @[0] { };
	      String_Data @[1] { };
	      String_Data @[2] { };
	      String_Data @[3] { };
	      String_Data @[4] { };
	      String_Data @[5] { };
	      String_Data @[6] { };
	      String_Data @[7] { };
	      String_Data @[8] { };
	      String_Data @[9] { };
	      int_Data @[10] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[11] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[12] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[13] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[14] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[15] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[16] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[17] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[18] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[19] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[20] { };
	    };
	  };
	  DataTable @[1] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  DataTable @[2] { 
	    DataTableCols @.data = [21] {
	      String_Data @[0] { };
	      String_Data @[1] { };
	      String_Data @[2] { };
	      String_Data @[3] { };
	      String_Data @[4] { };
	      String_Data @[5] { };
	      String_Data @[6] { };
	      String_Data @[7] { };
	      String_Data @[8] { };
	      String_Data @[9] { };
	      int_Data @[10] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[11] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[12] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[13] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[14] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[15] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[16] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[17] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[18] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[19] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[20] { };
	    };
	  };
	  DataTable @[3] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  DataTable @[4] { 
	    DataTableCols @.data = [21] {
	      String_Data @[0] { };
	      String_Data @[1] { };
	      String_Data @[2] { };
	      String_Data @[3] { };
	      String_Data @[4] { };
	      String_Data @[5] { };
	      String_Data @[6] { };
	      String_Data @[7] { };
	      String_Data @[8] { };
	      String_Data @[9] { };
	      int_Data @[10] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[11] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[12] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[13] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[14] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[15] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[16] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[17] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[18] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[19] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[20] { };
	    };
	  };
	  DataTable @[5] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  DataTable @[6] { 
	    DataTableCols @.data = [7] {
	      String_Data @[0] { };
	      String_Data @[1] { };
	      String_Data @[2] { };
	      int_Data @[3] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[4] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[5] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[6] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  DataTable @[7] { 
	    DataTableCols @.data = [21] {
	      String_Data @[0] { };
	      String_Data @[1] { };
	      String_Data @[2] { };
	      String_Data @[3] { };
	      String_Data @[4] { };
	      String_Data @[5] { };
	      String_Data @[6] { };
	      String_Data @[7] { };
	      String_Data @[8] { };
	      String_Data @[9] { };
	      int_Data @[10] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[11] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[12] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[13] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[14] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[15] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[16] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[17] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[18] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[19] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[20] { };
	    };
	  };
	  DataTable @[8] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  DataTable @[9] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  DataTable @[10] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  DataTable @[11] { 
	    DataTableCols @.data = [7] {
	      String_Data @[0] { };
	      String_Data @[1] { };
	      String_Data @[2] { };
	      int_Data @[3] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[4] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[5] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[6] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  DataTable @[12] { 
	    DataTableCols @.data = [7] {
	      String_Data @[0] { };
	      String_Data @[1] { };
	      String_Data @[2] { };
	      int_Data @[3] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[4] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[5] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[6] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  DataTable @[13] { 
	    DataTableCols @.data = [7] {
	      String_Data @[0] { };
	      String_Data @[1] { };
	      String_Data @[2] { };
	      int_Data @[3] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[4] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[5] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[6] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  DataTable @[14] { 
	    DataTableCols @.data = [27] {
	      String_Data @[0] { };
	      String_Data @[1] { };
	      String_Data @[2] { };
	      int_Data @[3] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[4] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[5] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[6] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      String_Data @[7] { };
	      String_Data @[8] { };
	      String_Data @[9] { };
	      String_Data @[10] { };
	      String_Data @[11] { };
	      String_Data @[12] { };
	      String_Data @[13] { };
	      String_Data @[14] { };
	      String_Data @[15] { };
	      String_Data @[16] { };
	      int_Data @[17] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[18] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[19] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[20] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[21] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[22] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[23] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[24] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[25] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[26] { };
	    };
	  };
	  DataTable @[15] { 
	    DataTableCols @.data = [27] {
	      String_Data @[0] { };
	      String_Data @[1] { };
	      String_Data @[2] { };
	      int_Data @[3] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[4] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[5] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[6] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      String_Data @[7] { };
	      String_Data @[8] { };
	      String_Data @[9] { };
	      String_Data @[10] { };
	      String_Data @[11] { };
	      String_Data @[12] { };
	      String_Data @[13] { };
	      String_Data @[14] { };
	      String_Data @[15] { };
	      String_Data @[16] { };
	      int_Data @[17] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[18] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[19] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[20] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[21] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[22] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[23] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[24] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      int_Data @[25] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	      float_Data @[26] { };
	    };
	  };
	  DataTable @[16] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  DataTable @[17] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  RndSeed_List @[18] { 
	    taList @.seeds = [25] {
	      RndSeed @[0] { };
	      RndSeed @[1] { };
	      RndSeed @[2] { };
	      RndSeed @[3] { };
	      RndSeed @[4] { };
	      RndSeed @[5] { };
	      RndSeed @[6] { };
	      RndSeed @[7] { };
	      RndSeed @[8] { };
	      RndSeed @[9] { };
	      RndSeed @[10] { };
	      RndSeed @[11] { };
	      RndSeed @[12] { };
	      RndSeed @[13] { };
	      RndSeed @[14] { };
	      RndSeed @[15] { };
	      RndSeed @[16] { };
	      RndSeed @[17] { };
	      RndSeed @[18] { };
	      RndSeed @[19] { };
	      RndSeed @[20] { };
	      RndSeed @[21] { };
	      RndSeed @[22] { };
	      RndSeed @[23] { };
	      RndSeed @[24] { };
	    };
	  };
	};

	ProgVar_List @.args = [5] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	};

	ProgVar_List @.vars = [25] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	  ProgVar @[16] { };
	  ProgVar @[17] { };
	  ProgVar @[18] { };
	  ProgVar @[19] { };
	  ProgVar @[20] { };
	  ProgVar @[21] { };
	  ProgVar @[22] { };
	  ProgVar @[23] { };
	  ProgVar @[24] { };
	};

	ProgEl_List @.prog_code = [12] {
	  PrintExpr @[0] { };
	  If @[1] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };
	  };
	  MethodCall @[2] { };
	  MethodCall @[3] { };
	  DataSelectRowsProg @[4] { 
	    DataOpList @.ops = [1] {
	      DataSelectEl @[0] { };
	    };
	  };
	  DataSelectRowsProg @[5] { 
	    DataOpList @.ops = [1] {
	      DataSelectEl @[0] { };
	    };
	  };
	  DataSelectRowsProg @[6] { 
	    DataOpList @.ops = [2] {
	      DataSelectEl @[0] { };
	      DataSelectEl @[1] { };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [3] {
	      DataGroupProg @[0] { 
		DataOpList @.ops = [1] {
		  DataGroupEl @[0] { };
		};
	      };
	      DataJoinProg @[1] { };
	      DataCalcLoop @[2] { 
		DataOpList @.src_cols = [1] {
		  DataOpEl @[0] { };
		};

		ProgEl_List @.loop_code = [9] {
		  AssignExpr @[0] { };
		  DataSelectRowsProg @[1] { 
		    DataOpList @.ops = [1] {
		      DataSelectEl @[0] { };
		    };
		  };
		  IfElse @[2] { 
		    ProgEl_List @.true_code = [2] {
		      ResetDataRows @[0] { };
		      ResetDataRows @[1] { };
		    };

		    ProgEl_List @.false_code = [1] {
		      DataProcCall @[0] { 
			ProgArg_List @.meth_args = [13] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			  ProgArg @[2] { };
			  ProgArg @[3] { };
			  ProgArg @[4] { };
			  ProgArg @[5] { };
			  ProgArg @[6] { };
			  ProgArg @[7] { };
			  ProgArg @[8] { };
			  ProgArg @[9] { };
			  ProgArg @[10] { };
			  ProgArg @[11] { };
			  ProgArg @[12] { };
			};
		      };
		    };
		  };
		  DataJoinProg @[3] { };
		  DataSelectColsProg @[4] { 
		    DataOpList @.select_spec = [1] {
		      DataOpEl @[0] { };
		    };
		  };
		  DataJoinProg @[5] { };
		  DataSelectColsProg @[6] { 
		    DataOpList @.select_spec = [1] {
		      DataOpEl @[0] { };
		    };
		  };
		  DataProcCall @[7] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  DataProcCall @[8] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		};

		ProgVar_List @.src_col_vars = [1] {
		  ProgVar @[0] { };
		};
	      };
	    };

	    ProgEl_List @.false_code = [1] {
	      DataCalcLoop @[0] { 
		DataOpList @.src_cols = [1] {
		  DataOpEl @[0] { };
		};

		ProgEl_List @.loop_code = [6] {
		  AssignExpr @[0] { };
		  DataSelectRowsProg @[1] { 
		    DataOpList @.ops = [1] {
		      DataSelectEl @[0] { };
		    };
		  };
		  DataSelectColsProg @[2] { 
		    DataOpList @.select_spec = [1] {
		      DataOpEl @[0] { };
		    };
		  };
		  IfElse @[3] { 
		    ProgEl_List @.true_code = [2] {
		      ResetDataRows @[0] { };
		      ResetDataRows @[1] { };
		    };

		    ProgEl_List @.false_code = [1] {
		      DataProcCall @[0] { 
			ProgArg_List @.meth_args = [13] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			  ProgArg @[2] { };
			  ProgArg @[3] { };
			  ProgArg @[4] { };
			  ProgArg @[5] { };
			  ProgArg @[6] { };
			  ProgArg @[7] { };
			  ProgArg @[8] { };
			  ProgArg @[9] { };
			  ProgArg @[10] { };
			  ProgArg @[11] { };
			  ProgArg @[12] { };
			};
		      };
		    };
		  };
		  DataProcCall @[4] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  DataProcCall @[5] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		};

		ProgVar_List @.src_col_vars = [1] {
		  ProgVar @[0] { };
		};
	      };
	    };
	  };
	  DataSelectColsProg @[8] { 
	    DataOpList @.select_spec = [1] {
	      DataOpEl @[0] { };
	    };
	  };
	  DataSelectColsProg @[9] { 
	    DataOpList @.select_spec = [1] {
	      DataOpEl @[0] { };
	    };
	  };
	  DataProcCall @[10] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  DataProcCall @[11] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[3] { 
	ProgObjList @.objs = [5] {
	  DataTable @[0] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { };
	    };
	  };
	  DataTable @[1] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { };
	    };
	  };
	  DataTable @[2] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { };
	    };
	  };
	  DataTable @[3] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { };
	    };
	  };
	  DataTable @[4] { 
	    DataTableCols @.data = [1] {
	      int_Data @[0] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [20] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	  ProgVar @[16] { };
	  ProgVar @[17] { };
	  ProgVar @[18] { };
	  ProgVar @[19] { };
	};

	Function_List @.functions = [1] {
	  Function @[0] { 
	    ProgVar_List @.args = [1] {
	      ProgVar @[0] { };
	    };

	    ProgEl_List @.fun_code = [4] {
	      DataProcCall @[0] { 
		ProgArg_List @.meth_args = [13] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		  ProgArg @[4] { };
		  ProgArg @[5] { };
		  ProgArg @[6] { };
		  ProgArg @[7] { };
		  ProgArg @[8] { };
		  ProgArg @[9] { };
		  ProgArg @[10] { };
		  ProgArg @[11] { };
		  ProgArg @[12] { };
		};
	      };
	      MethodCall @[1] { };
	      DataProcCall @[2] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      MethodCall @[3] { };
	    };
	  };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	};

	ProgEl_List @.prog_code = [3] {
	  IfElse @[0] { 
	    ProgEl_List @.true_code = [4] {
	      MethodCall @[0] { };
	      IfElse @[1] { 
		ProgEl_List @.true_code = [1] {
		  DataProcCall @[0] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		};

		ProgEl_List @.false_code = [1] {
		  DataProcCall @[0] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		};
	      };
	      WhileLoop @[2] { 
		ProgEl_List @.loop_code = [1] {
		  IfElse @[0] { 
		    ProgEl_List @.true_code = [1] {
		      DataProcCall @[0] { 
			ProgArg_List @.meth_args = [2] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			};
		      };
		    };

		    ProgEl_List @.false_code = [1] {
		      DataProcCall @[0] { 
			ProgArg_List @.meth_args = [2] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			};
		      };
		    };
		  };
		};
	      };
	      FunctionCall @[3] { 
		ProgArg_List @.fun_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };

	    ProgEl_List @.false_code = [1] {
	      IfElse @[0] { 
		ProgEl_List @.true_code = [1] {
		  DataSelectColsProg @[0] { 
		    DataOpList @.select_spec = [1] {
		      DataOpEl @[0] { };
		    };
		  };
		};

		ProgEl_List @.false_code = [1] {
		  DataSelectColsProg @[0] { 
		    DataOpList @.select_spec = [1] {
		      DataOpEl @[0] { };
		    };
		  };
		};
	      };
	    };
	  };
	  CodeBlock @[1] { 
	    ProgEl_List @.prog_code = [10] {
	      DataJoinProg @[0] { };
	      Comment @[1] { };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      MethodCall @[3] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      MethodCall @[4] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      MethodCall @[5] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      DataVarProg @[6] { };
	      DataVarProg @[7] { };
	      AssignExpr @[8] { };
	      ForLoop @[9] { 
		ProgEl_List @.loop_code = [5] {
		  RandomCall @[0] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  RandomCall @[1] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  RandomCall @[2] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  RandomCall @[3] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  DataVarProg @[4] { };
		};
	      };
	    };
	  };
	  IfElse @[2] { 
	    ProgEl_List @.true_code = [1] {
	      IfElse @[0] { 
		ProgEl_List @.true_code = [2] {
		  MethodCall @[0] { };
		  DataProcCall @[1] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		};

		ProgEl_List @.false_code = [2] {
		  MethodCall @[0] { };
		  DataProcCall @[1] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		};
	      };
	    };
	  };
	};
      };
      Program @[4] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [13] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	};

	Function_List @.functions = [1] {
	  Function @[0] { 
	    ProgVar_List @.args = [1] {
	      ProgVar @[0] { };
	    };

	    ProgEl_List @.fun_code = [7] {
	      ProgVars @[0] { 
		ProgVar_List @.local_vars = [1] {
		  ProgVar @[0] { };
		};
	      };
	      If @[1] { 
		ProgEl_List @.true_code = [1] {
		  ReturnExpr @[0] { };
		};
	      };
	      If @[2] { 
		ProgEl_List @.true_code = [2] {
		  MiscCall @[0] { 
		    ProgArg_List @.meth_args = [9] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		      ProgArg @[3] { };
		      ProgArg @[4] { };
		      ProgArg @[5] { };
		      ProgArg @[6] { };
		      ProgArg @[7] { };
		      ProgArg @[8] { };
		    };
		  };
		  ReturnExpr @[1] { };
		};
	      };
	      If @[3] { 
		ProgEl_List @.true_code = [2] {
		  MiscCall @[0] { 
		    ProgArg_List @.meth_args = [9] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		      ProgArg @[3] { };
		      ProgArg @[4] { };
		      ProgArg @[5] { };
		      ProgArg @[6] { };
		      ProgArg @[7] { };
		      ProgArg @[8] { };
		    };
		  };
		  ReturnExpr @[1] { };
		};
	      };
	      ForLoop @[4] { 
		ProgEl_List @.loop_code = [1] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [3] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		    };
		  };
		};
	      };
	      VarIncr @[5] { };
	      ReturnExpr @[6] { };
	    };
	  };
	};

	ProgEl_List @.init_code = [1] {
	  InitNamedUnits @[0] { };
	};

	ProgEl_List @.prog_code = [14] {
	  AssignExpr @[0] { };
	  AssignExpr @[1] { };
	  AssignExpr @[2] { };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  FunctionCall @[5] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[6] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[7] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[8] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[9] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[10] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[11] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[12] { 
	    ProgArg_List @.meth_args = [5] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	      ProgArg @[4] { };
	    };
	  };
	  MethodCall @[13] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	};
      };
    };
    Program_Group @.gp[2] = [3] { 
      Program @[0] { 
	ProgObjList @.objs = [7] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [1] {
	      LayerWriterEl @[0] { };
	    };
	  };
	  RetinaSpec @[1] { };
	  V1GaborSpec @[2] { };
	  DataTable @[3] { 
	    DataTableCols @.data = [1] {
	      float_Data @[0] { 
	UserDataItem_List @*(.user_data_) {
		  UserDataItem @[0] { };
	};
};
	    };
	  };
	  TimeUsed @[4] { };
	  TimeUsed @[5] { };
	  TimeUsed @[6] { };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [60] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	  ProgVar @[16] { };
	  ProgVar @[17] { };
	  ProgVar @[18] { };
	  ProgVar @[19] { };
	  ProgVar @[20] { };
	  ProgVar @[21] { };
	  ProgVar @[22] { };
	  ProgVar @[23] { };
	  ProgVar @[24] { };
	  ProgVar @[25] { };
	  ProgVar @[26] { };
	  ProgVar @[27] { };
	  ProgVar @[28] { };
	  ProgVar @[29] { };
	  ProgVar @[30] { };
	  ProgVar @[31] { };
	  ProgVar @[32] { };
	  ProgVar @[33] { };
	  ProgVar @[34] { };
	  ProgVar @[35] { };
	  ProgVar @[36] { };
	  ProgVar @[37] { };
	  ProgVar @[38] { };
	  ProgVar @[39] { };
	  ProgVar @[40] { };
	  ProgVar @[41] { };
	  ProgVar @[42] { };
	  ProgVar @[43] { };
	  ProgVar @[44] { };
	  ProgVar @[45] { };
	  ProgVar @[46] { };
	  ProgVar @[47] { };
	  ProgVar @[48] { };
	  ProgVar @[49] { };
	  ProgVar @[50] { };
	  ProgVar @[51] { };
	  ProgVar @[52] { };
	  ProgVar @[53] { };
	  ProgVar @[54] { };
	  ProgVar @[55] { };
	  ProgVar @[56] { };
	  ProgVar @[57] { };
	  ProgVar @[58] { };
	  ProgVar @[59] { };
	};

	Function_List @.functions = [2] {
	  Function @[0] { 
	    ProgVar_List @.args = [2] {
	      ProgVar @[0] { };
	      ProgVar @[1] { };
	    };

	    ProgEl_List @.fun_code = [6] {
	      ProgVars @[0] { 
		ProgVar_List @.local_vars = [3] {
		  ProgVar @[0] { };
		  ProgVar @[1] { };
		  ProgVar @[2] { };
		};
	      };
	      If @[1] { 
		ProgEl_List @.true_code = [1] {
		  ReturnExpr @[0] { };
		};
	      };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [4] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		};
	      };
	      MethodCall @[3] { 
		ProgArg_List @.meth_args = [4] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		};
	      };
	      VarIncr @[4] { };
	      ReturnExpr @[5] { };
	    };
	  };
	  Function @[1] { 
	    ProgVar_List @.args = [1] {
	      ProgVar @[0] { };
	    };

	    ProgEl_List @.fun_code = [6] {
	      ProgVars @[0] { 
		ProgVar_List @.local_vars = [3] {
		  ProgVar @[0] { };
		  ProgVar @[1] { };
		  ProgVar @[2] { };
		};
	      };
	      AssignExpr @[1] { };
	      AssignExpr @[2] { };
	      If @[3] { 
		ProgEl_List @.true_code = [2] {
		  AssignExpr @[0] { };
		  AssignExpr @[1] { };
		};
	      };
	      MethodCall @[4] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      IfElse @[5] { 
		ProgEl_List @.true_code = [1] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		};

		ProgEl_List @.false_code = [1] {
		  AssignExpr @[0] { };
		};
	      };
	    };
	  };
	};

	ProgEl_List @.init_code = [7] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[4] { };
	  MethodCall @[5] { };
	  MethodCall @[6] { };
	};

	ProgEl_List @.prog_code = [3] {
	  IfElse @[0] { 
	    ProgEl_List @.true_code = [28] {
	      MemberAssign @[0] { };
	      MethodCall @[1] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      OtherProgramVar @[3] { };
	      CodeBlock @[4] { 
		ProgEl_List @.prog_code = [11] {
		  DataVarProgMatrix @[0] { };
		  DataVarProg @[1] { };
		  DataVarProg @[2] { };
		  DataVarProg @[3] { };
		  DataVarProg @[4] { };
		  Comment @[5] { };
		  DataVarProg @[6] { };
		  DataVarProg @[7] { };
		  IfElse @[8] { 
		    ProgEl_List @.true_code = [2] {
		      AssignExpr @[0] { };
		      AssignExpr @[1] { };
		    };

		    ProgEl_List @.false_code = [2] {
		      AssignExpr @[0] { };
		      AssignExpr @[1] { };
		    };
		  };
		  DataVarProg @[9] { };
		  If @[10] { 
		    ProgEl_List @.true_code = [2] {
		      DataVarProgMatrix @[0] { };
		      DataVarProg @[1] { };
		    };
		  };
		};
	      };
	      IfElse @[5] { 
		ProgEl_List @.true_code = [6] {
		  ProgVars @[0] { 
		    ProgVar_List @.local_vars = [1] {
		      ProgVar @[0] { };
		    };
		  };
		  FunctionCall @[1] { 
		    ProgArg_List @.fun_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		  IfElse @[2] { 
		    ProgEl_List @.true_code = [1] {
		      MethodCall @[0] { 
			ProgArg_List @.meth_args = [5] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			  ProgArg @[2] { };
			  ProgArg @[3] { };
			  ProgArg @[4] { };
			};
		      };
		    };

		    ProgEl_List @.false_code = [1] {
		      MethodCall @[0] { 
			ProgArg_List @.meth_args = [5] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			  ProgArg @[2] { };
			  ProgArg @[3] { };
			  ProgArg @[4] { };
			};
		      };
		    };
		  };
		  MethodCall @[3] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  MathCall @[4] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  IfElse @[5] { 
		    ProgEl_List @.true_code = [1] {
		      MethodCall @[0] { 
			ProgArg_List @.meth_args = [12] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			  ProgArg @[2] { };
			  ProgArg @[3] { };
			  ProgArg @[4] { };
			  ProgArg @[5] { };
			  ProgArg @[6] { };
			  ProgArg @[7] { };
			  ProgArg @[8] { };
			  ProgArg @[9] { };
			  ProgArg @[10] { };
			  ProgArg @[11] { };
			};
		      };
		    };

		    ProgEl_List @.false_code = [1] {
		      MethodCall @[0] { 
			ProgArg_List @.meth_args = [7] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			  ProgArg @[2] { };
			  ProgArg @[3] { };
			  ProgArg @[4] { };
			  ProgArg @[5] { };
			  ProgArg @[6] { };
			};
		      };
		    };
		  };
		};

		ProgEl_List @.false_code = [1] {
		  IfElse @[0] { 
		    ProgEl_List @.true_code = [1] {
		      MethodCall @[0] { 
			ProgArg_List @.meth_args = [12] {
			  ProgArg @[0] { };
			  ProgArg @[1] { };
			  ProgArg @[2] { };
			  ProgArg @[3] { };
			  ProgArg @[4] { };
			  ProgArg @[5] { };
			  ProgArg @[6] { };
			  ProgArg @[7] { };
			  ProgArg @[8] { };
			  ProgArg @[9] { };
			  ProgArg @[10] { };
			  ProgArg @[11] { };
			};
		      };
		    };

		    ProgEl_List @.false_code = [1] {
		      IfElse @[0] { 
			ProgEl_List @.true_code = [2] {
			  ProgramCall @[0] { };
			  MethodCall @[1] { 
			    ProgArg_List @.meth_args = [7] {
			      ProgArg @[0] { };
			      ProgArg @[1] { };
			      ProgArg @[2] { };
			      ProgArg @[3] { };
			      ProgArg @[4] { };
			      ProgArg @[5] { };
			      ProgArg @[6] { };
			    };
			  };
			};

			ProgEl_List @.false_code = [1] {
			  MethodCall @[0] { 
			    ProgArg_List @.meth_args = [7] {
			      ProgArg @[0] { };
			      ProgArg @[1] { };
			      ProgArg @[2] { };
			      ProgArg @[3] { };
			      ProgArg @[4] { };
			      ProgArg @[5] { };
			      ProgArg @[6] { };
			    };
			  };
			};
		      };
		    };
		  };
		};
	      };
	      If @[6] { 
		ProgEl_List @.true_code = [1] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [5] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		      ProgArg @[3] { };
		      ProgArg @[4] { };
		    };
		  };
		};
	      };
	      MethodCall @[7] { };
	      MethodCall @[8] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      MethodCall @[9] { 
		ProgArg_List @.meth_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      IfElse @[10] { 
		ProgEl_List @.true_code = [1] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		};
	      };
	      MethodCall @[11] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      Comment @[12] { };
	      AssignExpr @[13] { };
	      AssignExpr @[14] { };
	      AssignExpr @[15] { };
	      MethodCall @[16] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      MethodCall @[17] { 
		ProgArg_List @.meth_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      FunctionCall @[18] { 
		ProgArg_List @.fun_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      FunctionCall @[19] { 
		ProgArg_List @.fun_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      FunctionCall @[20] { 
		ProgArg_List @.fun_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      FunctionCall @[21] { 
		ProgArg_List @.fun_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      FunctionCall @[22] { 
		ProgArg_List @.fun_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      FunctionCall @[23] { 
		ProgArg_List @.fun_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      FunctionCall @[24] { 
		ProgArg_List @.fun_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      DoneWritingDataRow @[25] { };
	      MethodCall @[26] { };
	      MethodCall @[27] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [2] {
	  taCanvas @[0] { };
	  DataTable @[1] { 
	    DataTableCols @.data = [1] {
	      float_Data @[0] { };
	    };
	  };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.vars = [30] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	  ProgVar @[16] { };
	  ProgVar @[17] { };
	  ProgVar @[18] { };
	  ProgVar @[19] { };
	  ProgVar @[20] { };
	  ProgVar @[21] { };
	  ProgVar @[22] { };
	  ProgVar @[23] { };
	  ProgVar @[24] { };
	  ProgVar @[25] { };
	  ProgVar @[26] { };
	  ProgVar @[27] { };
	  ProgVar @[28] { };
	  ProgVar @[29] { };
	};

	Function_List @.functions = [1] {
	  Function @[0] { 
	    ProgVar_List @.args = [4] {
	      ProgVar @[0] { };
	      ProgVar @[1] { };
	      ProgVar @[2] { };
	      ProgVar @[3] { };
	    };

	    ProgEl_List @.fun_code = [11] {
	      ProgVars @[0] { 
		ProgVar_List @.local_vars = [4] {
		  ProgVar @[0] { };
		  ProgVar @[1] { };
		  ProgVar @[2] { };
		  ProgVar @[3] { };
		};
	      };
	      MethodCall @[1] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      MathCall @[2] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      MathCall @[3] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      MathCall @[4] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      MathCall @[5] { 
		ProgArg_List @.meth_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      AssignExpr @[6] { };
	      AssignExpr @[7] { };
	      AssignExpr @[8] { };
	      AssignExpr @[9] { };
	      MethodCall @[10] { 
		ProgArg_List @.meth_args = [4] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		};
	      };
	    };
	  };
	};

	ProgEl_List @.prog_code = [18] {
	  ResetDataRows @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  AddNewDataRow @[3] { };
	  MethodCall @[4] { };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[7] { };
	  AssignExpr @[8] { };
	  AssignExpr @[9] { };
	  RandomCall @[10] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  RandomCall @[11] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[12] { };
	  IfElse @[13] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  ForLoop @[14] { 
	    ProgEl_List @.loop_code = [2] {
	      AssignExpr @[0] { };
	      ForLoop @[1] { 
		ProgEl_List @.loop_code = [6] {
		  AssignExpr @[0] { };
		  AssignExpr @[1] { };
		  AssignExpr @[2] { };
		  RandomCall @[3] { 
		    ProgArg_List @.meth_args = [2] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		    };
		  };
		  IfElse @[4] { 
		    ProgEl_List @.true_code = [1] {
		      IfElse @[0] { 
			ProgEl_List @.true_code = [1] {
			  AssignExpr @[0] { };
			};

			ProgEl_List @.false_code = [1] {
			  AssignExpr @[0] { };
			};
		      };
		    };
		  };
		  FunctionCall @[5] { 
		    ProgArg_List @.fun_args = [4] {
		      ProgArg @[0] { };
		      ProgArg @[1] { };
		      ProgArg @[2] { };
		      ProgArg @[3] { };
		    };
		  };
		};
	      };
	    };
	  };
	  Comment @[15] { };
	  MethodCall @[16] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  DoneWritingDataRow @[17] { };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	Function_List @.functions = [1] {
	  Function @[0] { 
	    ProgVar_List @.args = [1] {
	      ProgVar @[0] { };
	    };

	    ProgEl_List @.fun_code = [3] {
	      ProgVars @[0] { };
	      MethodCall @[1] { 
		ProgArg_List @.meth_args = [4] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		};
	      };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [4] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		  ProgArg @[3] { };
		};
	      };
	    };
	  };
	};

	ProgEl_List @.prog_code = [7] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [10] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	      ProgArg @[4] { };
	      ProgArg @[5] { };
	      ProgArg @[6] { };
	      ProgArg @[7] { };
	      ProgArg @[8] { };
	      ProgArg @[9] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [10] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	      ProgArg @[4] { };
	      ProgArg @[5] { };
	      ProgArg @[6] { };
	      ProgArg @[7] { };
	      ProgArg @[8] { };
	      ProgArg @[9] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [10] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	      ProgArg @[4] { };
	      ProgArg @[5] { };
	      ProgArg @[6] { };
	      ProgArg @[7] { };
	      ProgArg @[8] { };
	      ProgArg @[9] { };
	    };
	  };
	  FunctionCall @[3] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[4] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[5] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  FunctionCall @[6] { 
	    ProgArg_List @.fun_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
    };
    Program_Group @.gp[3] = [2] { 
      Program @[0] { 
	ProgVar_List @.args = [10] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	};

	ProgVar_List @.vars = [8] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	};

	ProgEl_List @.prog_code = [27] {
	  Comment @[0] { };
	  AssignExpr @[1] { };
	  AssignExpr @[2] { };
	  AssignExpr @[3] { };
	  AssignExpr @[4] { };
	  AssignExpr @[5] { };
	  AssignExpr @[6] { };
	  AssignExpr @[7] { };
	  AssignExpr @[8] { };
	  AssignExpr @[9] { };
	  AssignExpr @[10] { };
	  Comment @[11] { };
	  AssignExpr @[12] { };
	  AssignExpr @[13] { };
	  AssignExpr @[14] { };
	  AssignExpr @[15] { };
	  AssignExpr @[16] { };
	  AssignExpr @[17] { };
	  AssignExpr @[18] { };
	  AssignExpr @[19] { };
	  AssignExpr @[20] { };
	  AssignExpr @[21] { };
	  Comment @[22] { };
	  UserScript @[23] { };
	  UserScript @[24] { };
	  UserScript @[25] { };
	  UserScript @[26] { };
	};
      };
      Program @[1] { 
	ProgVar_List @.args = [17] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	  ProgVar @[16] { };
	};

	ProgVar_List @.vars = [16] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	  ProgVar @[11] { };
	  ProgVar @[12] { };
	  ProgVar @[13] { };
	  ProgVar @[14] { };
	  ProgVar @[15] { };
	};

	ProgEl_List @.prog_code = [54] {
	  Comment @[0] { };
	  AssignExpr @[1] { };
	  AssignExpr @[2] { };
	  AssignExpr @[3] { };
	  AssignExpr @[4] { };
	  AssignExpr @[5] { };
	  AssignExpr @[6] { };
	  AssignExpr @[7] { };
	  AssignExpr @[8] { };
	  AssignExpr @[9] { };
	  AssignExpr @[10] { };
	  AssignExpr @[11] { };
	  AssignExpr @[12] { };
	  AssignExpr @[13] { };
	  AssignExpr @[14] { };
	  AssignExpr @[15] { };
	  AssignExpr @[16] { };
	  AssignExpr @[17] { };
	  AssignExpr @[18] { };
	  AssignExpr @[19] { };
	  AssignExpr @[20] { };
	  AssignExpr @[21] { };
	  AssignExpr @[22] { };
	  Comment @[23] { };
	  AssignExpr @[24] { };
	  AssignExpr @[25] { };
	  AssignExpr @[26] { };
	  AssignExpr @[27] { };
	  AssignExpr @[28] { };
	  AssignExpr @[29] { };
	  AssignExpr @[30] { };
	  AssignExpr @[31] { };
	  AssignExpr @[32] { };
	  AssignExpr @[33] { };
	  AssignExpr @[34] { };
	  AssignExpr @[35] { };
	  AssignExpr @[36] { };
	  AssignExpr @[37] { };
	  AssignExpr @[38] { };
	  AssignExpr @[39] { };
	  AssignExpr @[40] { };
	  AssignExpr @[41] { };
	  AssignExpr @[42] { };
	  AssignExpr @[43] { };
	  AssignExpr @[44] { };
	  AssignExpr @[45] { };
	  Comment @[46] { };
	  If @[47] { 
	    ProgEl_List @.true_code = [10] {
	      AssignExpr @[0] { };
	      AssignExpr @[1] { };
	      AssignExpr @[2] { };
	      AssignExpr @[3] { };
	      AssignExpr @[4] { };
	      AssignExpr @[5] { };
	      AssignExpr @[6] { };
	      AssignExpr @[7] { };
	      AssignExpr @[8] { };
	      AssignExpr @[9] { };
	    };
	  };
	  Comment @[48] { };
	  UserScript @[49] { };
	  UserScript @[50] { };
	  UserScript @[51] { };
	  UserScript @[52] { };
	  If @[53] { 
	    ProgEl_List @.true_code = [2] {
	      UserScript @[0] { };
	      UserScript @[1] { };
	    };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
   };

      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
     };
};
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
     };

	  T3DataViewFrame_List @.frames = [3] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [2] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [20] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		    ScaleRange @[3] { };
		    ScaleRange @[4] { };
		    ScaleRange @[5] { };
		    ScaleRange @[6] { };
		    ScaleRange @[7] { };
		    ScaleRange @[8] { };
		    ScaleRange @[9] { };
		    ScaleRange @[10] { };
		    ScaleRange @[11] { };
		    ScaleRange @[12] { };
		    ScaleRange @[13] { };
		    ScaleRange @[14] { };
		    ScaleRange @[15] { };
		    ScaleRange @[16] { };
		    ScaleRange @[17] { };
		    ScaleRange @[18] { };
		    ScaleRange @[19] { };
		  };
		};
		GridTableView @[1] { 
		  T3DataView_List @.children = [14] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		    GridColView @[5] { };
		    GridColView @[6] { };
		    GridColView @[7] { };
		    GridColView @[8] { };
		    GridColView @[9] { };
		    GridColView @[10] { };
		    GridColView @[11] { };
		    GridColView @[12] { };
		    GridColView @[13] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [1] {
		    GridColView @[0] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [3] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		  };
		};
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
	    UserDataItem @[1] { };
	    UserDataItem @[2] { };
	    UserDataItem @[3] { };
	    UserDataItem @[4] { };
	    UserDataItem @[5] { };
     };
};
      };
    };
  };

  Network_Group @.networks = [1] {
    LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
	UserDataItem @[19] { };
	UserDataItem @[20] { };
   };

      BaseSpec_Group @.specs = [3] {
	LeabraUnitSpec @[0] { 
	  BaseSpec_Group @.children = [2] {
	    LeabraUnitSpec @[0] { };
	    LeabraUnitSpec @[1] { 
	      BaseSpec_Group @.children = [1] {
		LeabraUnitSpec @[0] { };
	      };
	    };
	  };
	};
	LeabraLayerSpec @[1] { 
	  BaseSpec_Group @.children = [7] {
	    LeabraLayerSpec @[0] { 
	      BaseSpec_Group @.children = [2] {
		LeabraLayerSpec @[0] { };
		LeabraLayerSpec @[1] { };
	      };
	    };
	    LeabraV1LayerSpec @[1] { 
	      BaseSpec_Group @.children = [2] {
		LeabraV1LayerSpec @[0] { };
		LeabraV1LayerSpec @[1] { };
	      };
	    };
	    LeabraLayerSpec @[2] { 
	      BaseSpec_Group @.children = [3] {
		LeabraLayerSpec @[0] { };
		LeabraLayerSpec @[1] { };
		LeabraLayerSpec @[2] { };
	      };
	    };
	    LeabraLayerSpec @[3] { 
	      BaseSpec_Group @.children = [1] {
		LeabraLayerSpec @[0] { };
	      };
	    };
	    LeabraLayerSpec @[4] { };
	    LeabraLayerSpec @[5] { };
	    LeabraLayerSpec @[6] { };
	  };
	};
	LeabraConSpec @[2] { 
	  BaseSpec_Group @.children = [4] {
	    LeabraBiasSpec @[0] { 
	      BaseSpec_Group @.children = [2] {
		LeabraBiasSpec @[0] { 
		  Schedule @.lrate_sched = [7] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		    SchedItem @[3] { };
		    SchedItem @[4] { };
		    SchedItem @[5] { };
		    SchedItem @[6] { };
		  };
		};
		LeabraBiasSpec @[1] { 
		  Schedule @.lrate_sched = [7] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		    SchedItem @[3] { };
		    SchedItem @[4] { };
		    SchedItem @[5] { };
		    SchedItem @[6] { };
		  };
		};
	      };

	      Schedule @.lrate_sched = [7] {
		SchedItem @[0] { };
		SchedItem @[1] { };
		SchedItem @[2] { };
		SchedItem @[3] { };
		SchedItem @[4] { };
		SchedItem @[5] { };
		SchedItem @[6] { };
	      };
	    };
	    LeabraConSpec @[1] { 
	      BaseSpec_Group @.children = [2] {
		LeabraBiasSpec @[0] { 
		  Schedule @.lrate_sched = [7] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		    SchedItem @[3] { };
		    SchedItem @[4] { };
		    SchedItem @[5] { };
		    SchedItem @[6] { };
		  };
		};
		LeabraConSpec @[1] { 
		  Schedule @.lrate_sched = [7] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		    SchedItem @[3] { };
		    SchedItem @[4] { };
		    SchedItem @[5] { };
		    SchedItem @[6] { };
		  };
		};
	      };

	      Schedule @.lrate_sched = [7] {
		SchedItem @[0] { };
		SchedItem @[1] { };
		SchedItem @[2] { };
		SchedItem @[3] { };
		SchedItem @[4] { };
		SchedItem @[5] { };
		SchedItem @[6] { };
	      };
	    };
	    LeabraConSpec @[2] { 
	      BaseSpec_Group @.children = [3] {
		LeabraConSpec @[0] { 
		  BaseSpec_Group @.children = [3] {
		    LeabraConSpec @[0] { 
		      BaseSpec_Group @.children = [2] {
			LeabraConSpec @[0] { 
			  BaseSpec_Group @.children = [1] {
			    LeabraConSpec @[0] { 
			      Schedule @.lrate_sched = [7] {
				SchedItem @[0] { };
				SchedItem @[1] { };
				SchedItem @[2] { };
				SchedItem @[3] { };
				SchedItem @[4] { };
				SchedItem @[5] { };
				SchedItem @[6] { };
			      };
			    };
			  };

			  Schedule @.lrate_sched = [7] {
			    SchedItem @[0] { };
			    SchedItem @[1] { };
			    SchedItem @[2] { };
			    SchedItem @[3] { };
			    SchedItem @[4] { };
			    SchedItem @[5] { };
			    SchedItem @[6] { };
			  };
			};
			LeabraConSpec @[1] { 
			  Schedule @.lrate_sched = [7] {
			    SchedItem @[0] { };
			    SchedItem @[1] { };
			    SchedItem @[2] { };
			    SchedItem @[3] { };
			    SchedItem @[4] { };
			    SchedItem @[5] { };
			    SchedItem @[6] { };
			  };
			};
		      };

		      Schedule @.lrate_sched = [7] {
			SchedItem @[0] { };
			SchedItem @[1] { };
			SchedItem @[2] { };
			SchedItem @[3] { };
			SchedItem @[4] { };
			SchedItem @[5] { };
			SchedItem @[6] { };
		      };
		    };
		    LeabraConSpec @[1] { 
		      BaseSpec_Group @.children = [1] {
			LeabraConSpec @[0] { 
			  Schedule @.lrate_sched = [7] {
			    SchedItem @[0] { };
			    SchedItem @[1] { };
			    SchedItem @[2] { };
			    SchedItem @[3] { };
			    SchedItem @[4] { };
			    SchedItem @[5] { };
			    SchedItem @[6] { };
			  };
			};
		      };

		      Schedule @.lrate_sched = [7] {
			SchedItem @[0] { };
			SchedItem @[1] { };
			SchedItem @[2] { };
			SchedItem @[3] { };
			SchedItem @[4] { };
			SchedItem @[5] { };
			SchedItem @[6] { };
		      };
		    };
		    LeabraConSpec @[2] { 
		      Schedule @.lrate_sched = [7] {
			SchedItem @[0] { };
			SchedItem @[1] { };
			SchedItem @[2] { };
			SchedItem @[3] { };
			SchedItem @[4] { };
			SchedItem @[5] { };
			SchedItem @[6] { };
		      };
		    };
		  };

		  Schedule @.lrate_sched = [7] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		    SchedItem @[3] { };
		    SchedItem @[4] { };
		    SchedItem @[5] { };
		    SchedItem @[6] { };
		  };
		};
		LeabraConSpec @[1] { 
		  BaseSpec_Group @.children = [5] {
		    LeabraConSpec @[0] { 
		      BaseSpec_Group @.children = [2] {
			LeabraConSpec @[0] { 
			  Schedule @.lrate_sched = [7] {
			    SchedItem @[0] { };
			    SchedItem @[1] { };
			    SchedItem @[2] { };
			    SchedItem @[3] { };
			    SchedItem @[4] { };
			    SchedItem @[5] { };
			    SchedItem @[6] { };
			  };
			};
			LeabraConSpec @[1] { 
			  Schedule @.lrate_sched = [7] {
			    SchedItem @[0] { };
			    SchedItem @[1] { };
			    SchedItem @[2] { };
			    SchedItem @[3] { };
			    SchedItem @[4] { };
			    SchedItem @[5] { };
			    SchedItem @[6] { };
			  };
			};
		      };

		      Schedule @.lrate_sched = [7] {
			SchedItem @[0] { };
			SchedItem @[1] { };
			SchedItem @[2] { };
			SchedItem @[3] { };
			SchedItem @[4] { };
			SchedItem @[5] { };
			SchedItem @[6] { };
		      };
		    };
		    LeabraConSpec @[1] { 
		      BaseSpec_Group @.children = [1] {
			LeabraConSpec @[0] { 
			  Schedule @.lrate_sched = [7] {
			    SchedItem @[0] { };
			    SchedItem @[1] { };
			    SchedItem @[2] { };
			    SchedItem @[3] { };
			    SchedItem @[4] { };
			    SchedItem @[5] { };
			    SchedItem @[6] { };
			  };
			};
		      };

		      Schedule @.lrate_sched = [7] {
			SchedItem @[0] { };
			SchedItem @[1] { };
			SchedItem @[2] { };
			SchedItem @[3] { };
			SchedItem @[4] { };
			SchedItem @[5] { };
			SchedItem @[6] { };
		      };
		    };
		    LeabraConSpec @[2] { 
		      Schedule @.lrate_sched = [7] {
			SchedItem @[0] { };
			SchedItem @[1] { };
			SchedItem @[2] { };
			SchedItem @[3] { };
			SchedItem @[4] { };
			SchedItem @[5] { };
			SchedItem @[6] { };
		      };
		    };
		    LeabraConSpec @[3] { 
		      Schedule @.lrate_sched = [7] {
			SchedItem @[0] { };
			SchedItem @[1] { };
			SchedItem @[2] { };
			SchedItem @[3] { };
			SchedItem @[4] { };
			SchedItem @[5] { };
			SchedItem @[6] { };
		      };
		    };
		    LeabraConSpec @[4] { 
		      Schedule @.lrate_sched = [7] {
			SchedItem @[0] { };
			SchedItem @[1] { };
			SchedItem @[2] { };
			SchedItem @[3] { };
			SchedItem @[4] { };
			SchedItem @[5] { };
			SchedItem @[6] { };
		      };
		    };
		  };

		  Schedule @.lrate_sched = [7] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		    SchedItem @[3] { };
		    SchedItem @[4] { };
		    SchedItem @[5] { };
		    SchedItem @[6] { };
		  };
		};
		LeabraConSpec @[2] { 
		  BaseSpec_Group @.children = [2] {
		    LeabraConSpec @[0] { 
		      Schedule @.lrate_sched = [7] {
			SchedItem @[0] { };
			SchedItem @[1] { };
			SchedItem @[2] { };
			SchedItem @[3] { };
			SchedItem @[4] { };
			SchedItem @[5] { };
			SchedItem @[6] { };
		      };
		    };
		    LeabraConSpec @[1] { 
		      Schedule @.lrate_sched = [7] {
			SchedItem @[0] { };
			SchedItem @[1] { };
			SchedItem @[2] { };
			SchedItem @[3] { };
			SchedItem @[4] { };
			SchedItem @[5] { };
			SchedItem @[6] { };
		      };
		    };
		  };

		  Schedule @.lrate_sched = [7] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		    SchedItem @[3] { };
		    SchedItem @[4] { };
		    SchedItem @[5] { };
		    SchedItem @[6] { };
		  };
		};
	      };

	      Schedule @.lrate_sched = [7] {
		SchedItem @[0] { };
		SchedItem @[1] { };
		SchedItem @[2] { };
		SchedItem @[3] { };
		SchedItem @[4] { };
		SchedItem @[5] { };
		SchedItem @[6] { };
	      };
	    };
	    LeabraConSpec @[3] { 
	      BaseSpec_Group @.children = [2] {
		LeabraConSpec @[0] { 
		  Schedule @.lrate_sched = [7] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		    SchedItem @[3] { };
		    SchedItem @[4] { };
		    SchedItem @[5] { };
		    SchedItem @[6] { };
		  };
		};
		LeabraConSpec @[1] { 
		  Schedule @.lrate_sched = [7] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		    SchedItem @[3] { };
		    SchedItem @[4] { };
		    SchedItem @[5] { };
		    SchedItem @[6] { };
		  };
		};
	      };

	      Schedule @.lrate_sched = [7] {
		SchedItem @[0] { };
		SchedItem @[1] { };
		SchedItem @[2] { };
		SchedItem @[3] { };
		SchedItem @[4] { };
		SchedItem @[5] { };
		SchedItem @[6] { };
	      };
	    };
	  };

	  Schedule @.lrate_sched = [7] {
	    SchedItem @[0] { };
	    SchedItem @[1] { };
	    SchedItem @[2] { };
	    SchedItem @[3] { };
	    SchedItem @[4] { };
	    SchedItem @[5] { };
	    SchedItem @[6] { };
	  };
	};
	BaseSpec_Group @.gp[0] = [8] { 
	  FullPrjnSpec @[0] { };
	  V1RFPrjnSpec @[1] { };
	  V1RFPrjnSpec @[2] { };
	  V1RFPrjnSpec @[3] { };
	  TiledGpRFPrjnSpec @[4] { 
	    BaseSpec_Group @.children = [1] {
	      TiledGpRFPrjnSpec @[0] { };
	    };
	  };
	  TiledGpRFPrjnSpec @[5] { 
	    BaseSpec_Group @.children = [1] {
	      TiledGpRFPrjnSpec @[0] { };
	    };
	  };
	  GpOneToOnePrjnSpec @[6] { };
	  OneToOnePrjnSpec @[7] { };
	};
      };

      Layer_Group @.layers = [2] {
	LeabraLayer @[0] { 
	  Unit_Group @.units = [1] {
	  };
	};
	LeabraLayer @[1] { 
	  Unit_Group @.units = [1] {
	  };
	};
      };
    };
  };
};
LeabraProject .projects[0] {
 name="LeabraProject_0";
 desc="color network:
* high, med color layers, rg and by, project into V1 with same rfields (i.e, no color selective cells in V1 at all)
* separate color blobs in 2 sizes, feed into V2 with .15 vs. .7 strength (tested a range)
* larger high-res fovea: 84 x 52, with all other params the same.
";
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ProjectDocs";
   auto_open=0;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>
== HighVis Model Overall Docs ==

Relative to a standard model, this one has very elaborate programs for managing lists of image files to be presented to the network.  See the VisionCodeDocs for more details. Here are some notes about the overall organization of things.

* Most of the configurable parameters for what images to train on and how to present them are contained with a \"lesson\" which is stored in the data/VisionData/ConfigData/Lesson datatable.  The VisionTrain program contains a \"lesson_id\" that must be listed in that Lesson datatable.  Lesson then refers to the list of Transform's to determine how to scale, move, and rotate images during training.

* The LeabraEpoch program iterates over a datatable that only contains names and other parameters of images to present to the network, not on the images themselves.  The images are read in from file names by the ApplyInputs program, and then filtered and presented one at a time to the network using the RetinaData tables (which only have the current single row of data).

* The Epoch calls a new program called Fixations (or FixationTest for special testing) that can perform multiple fixations of a given image to collect votes across these fixations.  These fixations can be driven by the dorsal attentional model.  See the edit/MasterControl (tab pinned by default above) for flags determining what is run at this level.

* Resize the network at your own peril!  it is complicated.  Some notes are in another one of these docs, and thre are NetLayerCalc programs that do some of the heavy lifting, but still some human intervention and setting of other associated parameters is required.

* The LeabraStartup program will run automatically if started -nogui -- you can add new command args or whatever -- see what it already supports (lesson, dorsal run or not).

* The Dorsal model is currently experimental and not recommended!

</body>
</html>
";
   html_text="<html>
<head></head>
<body>
<h2> HighVis Model Overall Docs </h2>
<P>
Relative to a standard model, this one has very elaborate programs for managing lists of image files to be presented to the network.  See the VisionCodeDocs for more details. Here are some notes about the overall organization of things.
<P>
<ul><li> Most of the configurable parameters for what images to train on and how to present them are contained with a \"lesson\" which is stored in the data/VisionData/ConfigData/Lesson datatable.  The VisionTrain program contains a \"lesson_id\" that must be listed in that Lesson datatable.  Lesson then refers to the list of Transform's to determine how to scale, move, and rotate images during training.
</ul>
<ul><li> The LeabraEpoch program iterates over a datatable that only contains names and other parameters of images to present to the network, not on the images themselves.  The images are read in from file names by the ApplyInputs program, and then filtered and presented one at a time to the network using the RetinaData tables (which only have the current single row of data).
</ul>
<ul><li> The Epoch calls a new program called Fixations (or FixationTest for special testing) that can perform multiple fixations of a given image to collect votes across these fixations.  These fixations can be driven by the dorsal attentional model.  See the edit/MasterControl (tab pinned by default above) for flags determining what is run at this level.
</ul>
<ul><li> Resize the network at your own peril!  it is complicated.  Some notes are in another one of these docs, and thre are NetLayerCalc programs that do some of the heavy lifting, but still some human intervention and setting of other associated parameters is required.
</ul>
<ul><li> The LeabraStartup program will run automatically if started -nogui -- you can add new command args or whatever -- see what it already supports (lesson, dorsal run or not).
</ul>
<ul><li> The Dorsal model is currently experimental and not recommended!
</ul>
</body>
</html>
";
  };
  taDoc @[1] {
   name="VisionCodeDocs";
   auto_open=0;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>
== Vision Code Docs ==

This describes the special code for managing presentation of images to network.  This code was written largely by Dave Jilk, and it uses many of the powerful features of the DataTable processing routines.  It lives in the Vision subgroup under programs.

You generally don't need to mess with this stuff, as the VisionTrain program manages everything.  But, if it doesn't do what you want, you'll need to dig in..

The overall idea is that collections of images live in subdirectories under images, and the software gains access to these images through special files called ''OIA'' files (Object Image Associations??).  The simplest form of such a file contains two columns, the first being the name of an object, and the second being the image file name (relative to the location of the oia file itself).  There can be many image files per object.  Objects get mapped to the output units in the Output layer.

The Import_OIA program obviously does the importing of this OIA file.  There are many other formatting features that are optional having to do with the location of the object in the image, etc.  

Once imported, the full list can be split into training and testing sets (Split_Items).

Each epoch, Build_Presentation is called to organize the specific epoch's worth of images.

DecodeOutput decodes the output layer back into an object name, for recording in a log file.

DecodeDorsal decodes the location of the optional dorsal attentional network to determine where the ventral objrec model foveates.

ObjectVoting integrates over multiple fixations of a given object to give a summary overall output that is typically better than a single trial.

PopoutStimGen generates standard visual popout stimuli for testing the Dorsal attention model.

TODO: more detail on design of OIA files etc?

</body>
</html>
";
   html_text="<html>
<head></head>
<body>
<h2> Vision Code Docs </h2>
<P>
This describes the special code for managing presentation of images to network.  This code was written largely by Dave Jilk, and it uses many of the powerful features of the DataTable processing routines.  It lives in the Vision subgroup under programs.
<P>
You generally don't need to mess with this stuff, as the VisionTrain program manages everything.  But, if it doesn't do what you want, you'll need to dig in..
<P>
The overall idea is that collections of images live in subdirectories under images, and the software gains access to these images through special files called  <i>OIA</i>  files (Object Image Associations??).  The simplest form of such a file contains two columns, the first being the name of an object, and the second being the image file name (relative to the location of the oia file itself).  There can be many image files per object.  Objects get mapped to the output units in the Output layer.
<P>
The Import_OIA program obviously does the importing of this OIA file.  There are many other formatting features that are optional having to do with the location of the object in the image, etc.  
<P>
Once imported, the full list can be split into training and testing sets (Split_Items).
<P>
Each epoch, Build_Presentation is called to organize the specific epoch's worth of images.
<P>
DecodeOutput decodes the output layer back into an object name, for recording in a log file.
<P>
DecodeDorsal decodes the location of the optional dorsal attentional network to determine where the ventral objrec model foveates.
<P>
ObjectVoting integrates over multiple fixations of a given object to give a summary overall output that is typically better than a single trial.
<P>
PopoutStimGen generates standard visual popout stimuli for testing the Dorsal attention model.
<P>
TODO: more detail on design of OIA files etc?
<P>
</body>
</html>
";
  };
  taDoc @[2] {
   name="ToDo";
   auto_open=0;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>

= ToDo List =

== Dorsal, near term ==

* impl salience kwta mech directly in v1 layers: esp important for blob guys!

* generate a test pattern image that has one single point and move that around and check the trans scaling stuff

* multiply v1 guys by attentional blob, gives diff results from bias

== Objrec ==
* objrec: test importance of length params on v1rf??

</body>
</html>";
   html_text="<html>
<head></head>
<body>
<P>
<h1> ToDo List </h1>
<P>
<h2> Dorsal, near term </h2>
<P>
<ul><li> impl salience kwta mech directly in v1 layers: esp important for blob guys!
</ul>
<ul><li> generate a test pattern image that has one single point and move that around and check the trans scaling stuff
</ul>
<ul><li> multiply v1 guys by attentional blob, gives diff results from bias
</ul>
<h2> Objrec </h2>
<ul><li> objrec: test importance of length params on v1rf??
</ul>
</body>
";
  };
  taDoc @[3] {
   name="ChangeLog";
   auto_open=0;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>

<ul>

<li>Thu May 29 01:33:05 2008 oreilly <code>hv.hi52_nwct_v1sal.proj</code><br>
  * new default params: v1sal feat = .015 med /.0075 high, gp_g = .1, v2 lay gp_g = .6 -- maybe even lower?

<li>Wed May 21 03:18:12 2008 oreilly <code>hv.hi52_nwct.proj</code><br>
  * it vs. no it selectable within project at startup
* unique object test: tests for entire object never seen before
* tuning of IT model projections: weaker IT->V4 and Out->IT

<li>Thu Apr 17 00:07:05 2008 oreilly <code>hv.hi52_ct.proj</code><br>
  * high-res fovea input = 52x52 (prev standard before tiny) e.g., v1sal models

<li>Sun Feb 17 00:07:05 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  * LeabraSettle computes minus_cycles based on cycles for output layer max act to exceed threshold (output_thresh, .75 default)
* LeabraTrialMonitor now gets value from settle instead of network value -- uses for computing voting etc





<li>Sat Feb 16 11:56:17 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  dt no midpoint back to std params (.25, .2 max)




<li>Fri Feb 15 00:41:07 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  dt.midpoint and dt.vm .3




<li>Sun Feb  3 12:55:43 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  v1 units back to vmeq100




<li>Fri Feb  1 20:52:47 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  new Contrastive Attractor Learning version




<li>Sun Jan 27 12:41:24 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  updated to current params:  v2=36u, v4=49u, v4->v2 = .2, out->v4 = .1




<li>Sat Jan 26 19:43:51 2008 oreilly <code>hv.tiny_clr_noit_ct_nov2v1_v4fmo10.proj</code><br>
  v4 fm output 10%




<li>Sat Jan 26 13:33:55 2008 oreilly <code>hv.tiny_clr_noit_ct_nov2v1.proj</code><br>
  v2 act_pct = .06 (instead of .1) and out->v4 = .1 istead of .05 -- more v4 netinput and slowed dt to .25 with max = .2 -- more stable




<li>Sat Jan 26 12:39:27 2008 oreilly <code>hv.tiny_clr_noit_ct_nov2v1.proj</code><br>
  no v2->v1 projections




<li>Sat Jan 26 02:53:31 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  savg_cor.thresh = .01 for most cons except those from Output which are .001 because of low act level there.




<li>Sat Jan 26 00:44:09 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  learn diff analysis




<li>Thu Jan 24 03:11:29 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  ct_lrate




<li>Wed Jan 23 23:51:05 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  bias lrate startup arg




<li>Wed Jan 23 16:32:23 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  dwt norm startup args




<li>Mon Jan 21 22:48:47 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  act reg startups and act_avg mon




<li>Sat Jan 19 12:47:46 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  testing on training items if no sep test items




<li>Sat Jan 19 01:19:20 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  per trial cycles in xformobjrnd




<li>Wed Jan 16 02:02:10 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  new trial type options: move obj




<li>Tue Jan  8 21:35:00 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  simple tobj lessons




<li>Tue Jan  8 12:05:59 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  v4 fm out = .05




<li>Sat Jan  5 15:25:49 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  got rid of net rescale -- causing major phase-boundary act changes.




<li>Fri Jan  4 00:48:00 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  Ct Leabra version!




<li>Fri Jan  4 00:44:41 2008 oreilly <code>hv.tiny_clr_noit_nosalv1.proj</code><br>
  no V1 salience




<li>Fri Jan  4 00:05:48 2008 oreilly <code>hv.tiny_clr_noit.proj</code><br>
  no IT layer




<li>Thu Jan  3 23:59:51 2008 oreilly <code>hv.tiny_clr.proj</code><br>
  V4->V2 wt_scale.rel med = 1




<li>Thu Jan  3 23:38:16 2008 oreilly <code>hv.tiny_clr.proj</code><br>
  V4->V2 wt_scale.rel = .5 instead of .2




<li>Thu Jan  3 02:33:48 2008 oreilly <code>hv.tiny_clr.proj</code><br>
  added units startup args



<li>Thu Jan  3 00:52:42 2008 oreilly <code>hv.tiny_clr.proj</code><br>
  smallest possible functional vision model with simplified programs (no dorsal, etc)



<li>Wed Jan  2 23:43:59 2008 oreilly <code>hv.tiny_clr.proj</code><br>
  smallest possible functional vision model with simplified programs (no dorsal, etc)



<li>Wed Nov 14 21:25:01 2007 oreilly <code>hv.v1salnf_dles.proj</code><br>
  tobj36_no_tb, tob36_90rot lessons


<li>Wed Nov 14 20:07:34 2007 oreilly <code>hv.v1salnf_dles.proj</code><br>
  tobj36_no_tb, tob36_90rot lessons


<li>Sun Nov 11 02:25:30 2007 oreilly <code>hv.v1salnf_dles.proj</code><br>
  dorsal pathway lesioned and dorsal maint learning turned off

<li>Sat Nov 10 02:53:56 2007 oreilly <code>hv.v1salnf_dml.proj</code><br>
  added test_dorsal flag in Fixations to optimize speed & skip plus phase if not training!


<li>Wed Nov  7 12:30:00 2007 oreilly <code>hv.v1salnf_dml.proj</code><br>
  added fix0/1 lrates for dors and vent!  critical!!



<li>Mon Nov  5 02:37:11 2007 oreilly <code>hv.v1salnf_dml.proj</code><br>
  * fixed err coming from Dorsal_mnt in no dorsal version
* V1_high feat_gain = .5 of other guys -- explains why high has been so much less active!



<li>Mon Nov  5 00:54:25 2007 oreilly <code>hv.v1salnf_dml.proj</code><br>
  shorter name!  v1salnf = salience layers are not featural,  v1 has featural salience.  dml = dorsal main learn



<li>Mon Nov  5 00:52:59 2007 oreilly <code>hv.v1sal_dormntlrn_nofeatsal.proj</code><br>
  dorsal/v1_sal kwta = 3, all setup for full control over feat_gain, dorsal lrate and dorsal kwta_pt for exploration



<li>Sun Nov  4 21:24:28 2007 oreilly <code>hv.v1sal_dormntlrn_nofeatsal.proj</code><br>
  * no feature competition in dorsal salience layers!  that all happens in V1 now, so salience layers are just overall competition.


<li>Sun Nov  4 01:39:59 2007 oreilly <code>hv.v1sal_dormntlrn.proj</code><br>
  * dorsal maintenance learning

<li>Sat Nov  3 01:36:55 2007 oreilly <code>hv.v1sal_dist.proj</code><br>
  * good dist params for pop-out on pop-out stims and on ctnbgf images = .025 gain and .25 sigma. 
* turned dorsal back on to monitor: set dorsal inhib = AVG pt = .6 and gets key points in image -- result is centroid -- probably pretty good for dorsal!  we'll see..

<li>Fri Nov  2 23:55:59 2007 oreilly <code>hv.v1sal_dist.proj</code><br>
  distance-based v1 salience computation!

<li>Wed Oct 31 00:49:48 2007 oreilly <code>hv.v1sal_blob.proj</code><br>
  just v1 blob salience stuff

<li>Wed Oct 31 00:47:47 2007 oreilly <code>hv.v1sal.proj</code><br>
  turns out it was stuck on ct256 due to move of lesson_id var & bad CheckChildConfig!  tests with ctnbgf were invalid.  ct256_136 is likely intractable as such.  going back to tests on ctnbgf with new salience mechs, then try a new subset of ct256 that is less impossible.


<li>Mon Oct 29 21:51:27 2007 oreilly <code>hv.v1sal.proj</code><br>
  Also UNDO of non-blob V1 guys -- not seeming to work!



<li>Mon Oct 29 21:41:08 2007 oreilly <code>hv.v1sal.proj</code><br>
  * UNDO! V2, V4 gp_g = .4 instead of .5 -- consistent and allows more activation where there is bottom-up; min_i prevents spurious -- didn't work!  also, kv2k not seeming to work very well either.. but overall not working well so backing off..



<li>Mon Oct 29 00:39:22 2007 oreilly <code>hv.v1sal.proj</code><br>
  * salience on all layers, COMP_COST, gain = 1, kwta_pct = .1
* min_i = .8  on all grouped layers (.5 in blob)
* V1 gp_g = .4 instead of .6, with the salience providing a nicer control for too much activation
* V2, V4 gp_g = .4 instead of .5 -- consistent and allows more activation where there is bottom-up; min_i prevents spurious



<li>Sun Oct 28 15:00:05 2007 oreilly <code>hv.v1sal.proj</code><br>
  V1 layers have salience built in directly using new LeabraLayer/Spec


<li>Fri Oct 26 23:59:34 2007 oreilly <code>hv.ct256.proj</code><br>
  fixed train_mode setting/saving in dorsal test..

<li>Fri Oct 26 16:03:35 2007 oreilly <code>hv.ct256.proj</code><br>
  no passing lesson_id around

<li>Fri Oct 26 14:54:19 2007 oreilly <code>hv.ct256.proj</code><br>
  no dorsal

<li>Mon Oct  8 10:38:51 2007 oreilly <code>hv.dors_integ_lrn_fmv1sal05.proj</code><br>
  Da mod only in salience & dorsal units

<li>Mon Oct  8 01:18:33 2007 oreilly <code>hv.dors_integ_lrn_fmv1sal05.proj</code><br>
  DorsFmV1Sal = .5

<li>Sat Oct  6 00:32:51 2007 oreilly <code>hv.dors_integ_lrn.proj</code><br>
  Integrated dorsal pathway that learns!

<li>Fri Oct  5 01:07:18 2007 oreilly <code>hv.v1hmv2.proj</code><br>
  Added docs, forking off a \"stable\" version of the model.

<li>Sun Sep 30 11:45:02 2007 oreilly <code>hv.v1hmv2.proj</code><br>
  * V1_high,med diff_act = .03 instead of .05; blob = .07 instead of .05
* increased rel,abs lrates = .2 instead of .1 (adapt quickly and stay put due to thresholds instead of slow drift!?)
* moved V1blob out of V1 subgroup to not compete with orientation filters
* output unit spec w/ nvar = .002 instead of .005 to prevent diffuse nonselective activation
* IT fm output = .25, V4 fm output = .5 to start off -- should be closer to targets


<li>Sat Sep 29 12:41:00 2007 oreilly <code>hv.v1hmv2.proj</code><br>
  LeabraStartup in program

<li>Sat Sep 29 12:08:00 2007 oreilly <code>hv.v1hmv2_dors.proj</code><br>
  V1 blobs are pass-through spatial integrators only, not center-surround.  gp_i gpg = .6 in v1

<li>Fri Sep 28 23:53:54 2007 oreilly <code>hv.v1hmv2_sal.proj</code><br>
  New kwta_comp_cost working beautifully!!

<li>Fri Sep 28 00:45:16 2007 oreilly <code>hv.v1hmv2_sal.proj</code><br>
  Salience test working, but demonstrably fragile for various stim parameters.. bother.


<li>Thu Sep 27 11:40:21 2007 oreilly <code>hv.v1hmv2.proj</code><br>
  Fixed all the wt_scale_init flags in hv_clr_fov_sm -- all were off!!

<li>Wed Sep 26 20:02:23 2007 oreilly <code>hv.v1hmv2.proj</code><br>
  * v1 high rf_mv = 2 to fill in missing gaps in filter coverage; rf size changed to 6x6 to have smaller features too.
* previously: got rid of hblob and all the high freq color input filters, because objrec should be ok with lowres color. 
* all orientation filters are now based strictly off of bw, not color (correcting earlier misconception about cones in fovea
meaning that everything in fovea had to be color selective: instead, colors are averaged over..)

<li>Wed Jul 25 03:21:33 2007 oreilly <code>hv.dorsal_clr_lgv1_tobj_dors_k16.proj</code><br>
  dorsal self-con strength = 0!  This is key for making it work -- makes it senstive to bottom-up influences only -- otherwise the recurrence just takes over and makes nonsense!  significant improvement in the tarr objs 100 case..

<li>Thu Jul 19 00:15:01 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  fixed DorsalDecode prjn offset bug! set_offs.y = -1 so it offsets for 1st layer of decode units! decode layer now very accurately tracking a red cross.. ;)

<li>Wed Jul 18 19:46:43 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  test_target added -- doh!  tests for simple case of tracking a single dot around..

<li>Wed Jul 18 15:26:17 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  set ret_trans gain to .5 .5 instead of 1 1 - also added tarr_objects

<li>Wed Jul 18 03:21:15 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  IT max_acts (topkacts) and voting test!

<li>Tue Jul 17 01:39:22 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  dorsal bias weight gauss_sigma = 2

<li>Tue Jul 17 01:38:23 2007 oreilly <code>hv.dorsal_clr_lgv1_ctrsig3.proj</code><br>
  dorsal bias weight gauss_sigma = 3 (instead of 2)

<li>Tue Jul 17 01:16:11 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  dorsal v1 gpg = .2 (edge), blob = .6, blob rel_wt = 1, dorsal gauss_bias = 1000

<li>Mon Jul 16 13:42:27 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  dorsal v1 gpg = .8 (both edge and blob), blob rel_wt = 1, 1 fixation objrec train

<li>Mon Jul 16 00:11:26 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  blobs in dorsal

<li>Sun Jul 15 21:47:15 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  fixation test: how consistent is the location when the image moves?

<li>Sun Jul 15 13:38:11 2007 oreilly <code>hv.dorsal_clr_lgv1_fov.proj</code><br>
  fovea scaling .8 - 1.2

<li>Sun Jul 15 13:30:01 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  dorsal kwta = 4

<li>Sun Jul 15 13:14:10 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  no pos bias (only negative around edges, width = 5), no noise

<li>Sun Jul 15 03:10:59 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  set i_thr computation to ALL (including bias weights), set gains to 100 -- seems to be having an effect now..

<li>Sat Jul 14 02:21:15 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  fixed norm_con_n on wts into dorsal v1 -- was causing strange edge artifacts!!!

<li>Sat Jul 14 01:34:48 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  clr_dorsal using same rfields as objrec network: high and med res

<li>Sat Jul 14 00:16:27 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  clr_dorsal using same rfields as objrec network: high and med res

<li>Sat Jul 14 00:00:12 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  clr_dorsal

<li>Fri Jul 13 23:15:15 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  1fix with faded edges

<li>Mon Jul  9 01:52:57 2007 oreilly <code>hv.dorsal_bw_lgv1.proj</code><br>
  low_v1 rf_width = 4x4, freq = 2, len, width = 2

<li>Mon Jul  9 01:42:45 2007 oreilly <code>hv.dorsal_bw_lgv1.proj</code><br>
  switched to simpler rf_move & rf_width spec for V1 receptive field --rf_move is what you set from the layercalc, rf_width can be wider if you want..


<li>Sun Jul  8 19:51:09 2007 oreilly <code>hv.dorsal_bw_lgv1.proj</code>
  <ul>
<li> high_v1 = 8x8, freq = 1, width,len =4
<li> med, low_v1 = 6x6 freq 1.5, width,len = 3, low rf_mult = 3, med rf_mult = 1.5 (more than 1/2 overlap, needed to get 12x12 V1 to match high; values in layer calc are 4,2,1 (h,m,l).
<li> retina sizes: hi = 52, med = 26, low = 13, w/ on_sig & spacing = 2,4,8
</ul>


<li>Sun Jul  8 14:14:21 2007 oreilly <code>hv.dorsal_bw_lgv1.proj</code><br>
  larger V1 layer with smaller high-freq receptive field: current performance is worse than before, and 12x12 hi rf may be to blame -- provides a relatively low-res sample of image.

<li> 7/4/07 ROR -- lrate = .002 to compensate for 5x repetition of same item

<li> 7/3/07 ROR -- many simplifications to programs using new DataVarProg and other such goodies
</ul>

</body>
</html>";
   html_text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<P>
<ul>
<P>
<li>Thu May 29 01:33:05 2008 oreilly <code>hv.hi52_nwct_v1sal.proj</code><br>
  * new default params: v1sal feat = .015 med /.0075 high, gp_g = .1, v2 lay gp_g = .6 -- maybe even lower?
<P>
<li>Wed May 21 03:18:12 2008 oreilly <code>hv.hi52_nwct.proj</code><br>
  * it vs. no it selectable within project at startup
<ul><li> unique object test: tests for entire object never seen before
<li> tuning of IT model projections: weaker IT->V4 and Out->IT
</ul>
<li>Thu Apr 17 00:07:05 2008 oreilly <code>hv.hi52_ct.proj</code><br>
  * high-res fovea input = 52x52 (prev standard before tiny) e.g., v1sal models
<P>
<li>Sun Feb 17 00:07:05 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  * LeabraSettle computes minus_cycles based on cycles for output layer max act to exceed threshold (output_thresh, .75 default)
<ul><li> LeabraTrialMonitor now gets value from settle instead of network value -- uses for computing voting etc
</ul>
<P>
<P>
<P>
<P>
<li>Sat Feb 16 11:56:17 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  dt no midpoint back to std params (.25, .2 max)
<P>
<P>
<P>
<P>
<li>Fri Feb 15 00:41:07 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  dt.midpoint and dt.vm .3
<P>
<P>
<P>
<P>
<li>Sun Feb  3 12:55:43 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  v1 units back to vmeq100
<P>
<P>
<P>
<P>
<li>Fri Feb  1 20:52:47 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  new Contrastive Attractor Learning version
<P>
<P>
<P>
<P>
<li>Sun Jan 27 12:41:24 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  updated to current params:  v2=36u, v4=49u, v4->v2 = .2, out->v4 = .1
<P>
<P>
<P>
<P>
<li>Sat Jan 26 19:43:51 2008 oreilly <code>hv.tiny_clr_noit_ct_nov2v1_v4fmo10.proj</code><br>
  v4 fm output 10%
<P>
<P>
<P>
<P>
<li>Sat Jan 26 13:33:55 2008 oreilly <code>hv.tiny_clr_noit_ct_nov2v1.proj</code><br>
  v2 act_pct = .06 (instead of .1) and out->v4 = .1 istead of .05 -- more v4 netinput and slowed dt to .25 with max = .2 -- more stable
<P>
<P>
<P>
<P>
<li>Sat Jan 26 12:39:27 2008 oreilly <code>hv.tiny_clr_noit_ct_nov2v1.proj</code><br>
  no v2->v1 projections
<P>
<P>
<P>
<P>
<li>Sat Jan 26 02:53:31 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  savg_cor.thresh = .01 for most cons except those from Output which are .001 because of low act level there.
<P>
<P>
<P>
<P>
<li>Sat Jan 26 00:44:09 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  learn diff analysis
<P>
<P>
<P>
<P>
<li>Thu Jan 24 03:11:29 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  ct_lrate
<P>
<P>
<P>
<P>
<li>Wed Jan 23 23:51:05 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  bias lrate startup arg
<P>
<P>
<P>
<P>
<li>Wed Jan 23 16:32:23 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  dwt norm startup args
<P>
<P>
<P>
<P>
<li>Mon Jan 21 22:48:47 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  act reg startups and act_avg mon
<P>
<P>
<P>
<P>
<li>Sat Jan 19 12:47:46 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  testing on training items if no sep test items
<P>
<P>
<P>
<P>
<li>Sat Jan 19 01:19:20 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  per trial cycles in xformobjrnd
<P>
<P>
<P>
<P>
<li>Wed Jan 16 02:02:10 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  new trial type options: move obj
<P>
<P>
<P>
<P>
<li>Tue Jan  8 21:35:00 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  simple tobj lessons
<P>
<P>
<P>
<P>
<li>Tue Jan  8 12:05:59 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  v4 fm out = .05
<P>
<P>
<P>
<P>
<li>Sat Jan  5 15:25:49 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  got rid of net rescale -- causing major phase-boundary act changes.
<P>
<P>
<P>
<P>
<li>Fri Jan  4 00:48:00 2008 oreilly <code>hv.tiny_clr_noit_ct.proj</code><br>
  Ct Leabra version!
<P>
<P>
<P>
<P>
<li>Fri Jan  4 00:44:41 2008 oreilly <code>hv.tiny_clr_noit_nosalv1.proj</code><br>
  no V1 salience
<P>
<P>
<P>
<P>
<li>Fri Jan  4 00:05:48 2008 oreilly <code>hv.tiny_clr_noit.proj</code><br>
  no IT layer
<P>
<P>
<P>
<P>
<li>Thu Jan  3 23:59:51 2008 oreilly <code>hv.tiny_clr.proj</code><br>
  V4->V2 wt_scale.rel med = 1
<P>
<P>
<P>
<P>
<li>Thu Jan  3 23:38:16 2008 oreilly <code>hv.tiny_clr.proj</code><br>
  V4->V2 wt_scale.rel = .5 instead of .2
<P>
<P>
<P>
<P>
<li>Thu Jan  3 02:33:48 2008 oreilly <code>hv.tiny_clr.proj</code><br>
  added units startup args
<P>
<P>
<P>
<li>Thu Jan  3 00:52:42 2008 oreilly <code>hv.tiny_clr.proj</code><br>
  smallest possible functional vision model with simplified programs (no dorsal, etc)
<P>
<P>
<P>
<li>Wed Jan  2 23:43:59 2008 oreilly <code>hv.tiny_clr.proj</code><br>
  smallest possible functional vision model with simplified programs (no dorsal, etc)
<P>
<P>
<P>
<li>Wed Nov 14 21:25:01 2007 oreilly <code>hv.v1salnf_dles.proj</code><br>
  tobj36_no_tb, tob36_90rot lessons
<P>
<P>
<li>Wed Nov 14 20:07:34 2007 oreilly <code>hv.v1salnf_dles.proj</code><br>
  tobj36_no_tb, tob36_90rot lessons
<P>
<P>
<li>Sun Nov 11 02:25:30 2007 oreilly <code>hv.v1salnf_dles.proj</code><br>
  dorsal pathway lesioned and dorsal maint learning turned off
<P>
<li>Sat Nov 10 02:53:56 2007 oreilly <code>hv.v1salnf_dml.proj</code><br>
  added test_dorsal flag in Fixations to optimize speed & skip plus phase if not training!
<P>
<P>
<li>Wed Nov  7 12:30:00 2007 oreilly <code>hv.v1salnf_dml.proj</code><br>
  added fix0/1 lrates for dors and vent!  critical!!
<P>
<P>
<P>
<li>Mon Nov  5 02:37:11 2007 oreilly <code>hv.v1salnf_dml.proj</code><br>
  * fixed err coming from Dorsal_mnt in no dorsal version
<ul><li> V1_high feat_gain = .5 of other guys -- explains why high has been so much less active!
</ul>
<P>
<P>
<li>Mon Nov  5 00:54:25 2007 oreilly <code>hv.v1salnf_dml.proj</code><br>
  shorter name!  v1salnf = salience layers are not featural,  v1 has featural salience.  dml = dorsal main learn
<P>
<P>
<P>
<li>Mon Nov  5 00:52:59 2007 oreilly <code>hv.v1sal_dormntlrn_nofeatsal.proj</code><br>
  dorsal/v1_sal kwta = 3, all setup for full control over feat_gain, dorsal lrate and dorsal kwta_pt for exploration
<P>
<P>
<P>
<li>Sun Nov  4 21:24:28 2007 oreilly <code>hv.v1sal_dormntlrn_nofeatsal.proj</code><br>
  * no feature competition in dorsal salience layers!  that all happens in V1 now, so salience layers are just overall competition.
<P>
<P>
<li>Sun Nov  4 01:39:59 2007 oreilly <code>hv.v1sal_dormntlrn.proj</code><br>
  * dorsal maintenance learning
<P>
<li>Sat Nov  3 01:36:55 2007 oreilly <code>hv.v1sal_dist.proj</code><br>
  * good dist params for pop-out on pop-out stims and on ctnbgf images = .025 gain and .25 sigma. 
<ul><li> turned dorsal back on to monitor: set dorsal inhib = AVG pt = .6 and gets key points in image -- result is centroid -- probably pretty good for dorsal!  we'll see..
</ul>
<li>Fri Nov  2 23:55:59 2007 oreilly <code>hv.v1sal_dist.proj</code><br>
  distance-based v1 salience computation!
<P>
<li>Wed Oct 31 00:49:48 2007 oreilly <code>hv.v1sal_blob.proj</code><br>
  just v1 blob salience stuff
<P>
<li>Wed Oct 31 00:47:47 2007 oreilly <code>hv.v1sal.proj</code><br>
  turns out it was stuck on ct256 due to move of lesson_id var & bad CheckChildConfig!  tests with ctnbgf were invalid.  ct256_136 is likely intractable as such.  going back to tests on ctnbgf with new salience mechs, then try a new subset of ct256 that is less impossible.
<P>
<P>
<li>Mon Oct 29 21:51:27 2007 oreilly <code>hv.v1sal.proj</code><br>
  Also UNDO of non-blob V1 guys -- not seeming to work!
<P>
<P>
<P>
<li>Mon Oct 29 21:41:08 2007 oreilly <code>hv.v1sal.proj</code><br>
  * UNDO! V2, V4 gp_g = .4 instead of .5 -- consistent and allows more activation where there is bottom-up; min_i prevents spurious -- didn't work!  also, kv2k not seeming to work very well either.. but overall not working well so backing off..
<P>
<P>
<P>
<li>Mon Oct 29 00:39:22 2007 oreilly <code>hv.v1sal.proj</code><br>
  * salience on all layers, COMP_COST, gain = 1, kwta_pct = .1
<ul><li> min_i = .8  on all grouped layers (.5 in blob)
<li> V1 gp_g = .4 instead of .6, with the salience providing a nicer control for too much activation
<li> V2, V4 gp_g = .4 instead of .5 -- consistent and allows more activation where there is bottom-up; min_i prevents spurious
</ul>
<P>
<P>
<li>Sun Oct 28 15:00:05 2007 oreilly <code>hv.v1sal.proj</code><br>
  V1 layers have salience built in directly using new LeabraLayer/Spec
<P>
<P>
<li>Fri Oct 26 23:59:34 2007 oreilly <code>hv.ct256.proj</code><br>
  fixed train_mode setting/saving in dorsal test..
<P>
<li>Fri Oct 26 16:03:35 2007 oreilly <code>hv.ct256.proj</code><br>
  no passing lesson_id around
<P>
<li>Fri Oct 26 14:54:19 2007 oreilly <code>hv.ct256.proj</code><br>
  no dorsal
<P>
<li>Mon Oct  8 10:38:51 2007 oreilly <code>hv.dors_integ_lrn_fmv1sal05.proj</code><br>
  Da mod only in salience & dorsal units
<P>
<li>Mon Oct  8 01:18:33 2007 oreilly <code>hv.dors_integ_lrn_fmv1sal05.proj</code><br>
  DorsFmV1Sal = .5
<P>
<li>Sat Oct  6 00:32:51 2007 oreilly <code>hv.dors_integ_lrn.proj</code><br>
  Integrated dorsal pathway that learns!
<P>
<li>Fri Oct  5 01:07:18 2007 oreilly <code>hv.v1hmv2.proj</code><br>
  Added docs, forking off a \"stable\" version of the model.
<P>
<li>Sun Sep 30 11:45:02 2007 oreilly <code>hv.v1hmv2.proj</code><br>
  * V1_high,med diff_act = .03 instead of .05; blob = .07 instead of .05
<ul><li> increased rel,abs lrates = .2 instead of .1 (adapt quickly and stay put due to thresholds instead of slow drift!?)
<li> moved V1blob out of V1 subgroup to not compete with orientation filters
<li> output unit spec w/ nvar = .002 instead of .005 to prevent diffuse nonselective activation
<li> IT fm output = .25, V4 fm output = .5 to start off -- should be closer to targets
</ul>
<P>
<li>Sat Sep 29 12:41:00 2007 oreilly <code>hv.v1hmv2.proj</code><br>
  LeabraStartup in program
<P>
<li>Sat Sep 29 12:08:00 2007 oreilly <code>hv.v1hmv2_dors.proj</code><br>
  V1 blobs are pass-through spatial integrators only, not center-surround.  gp_i gpg = .6 in v1
<P>
<li>Fri Sep 28 23:53:54 2007 oreilly <code>hv.v1hmv2_sal.proj</code><br>
  New kwta_comp_cost working beautifully!!
<P>
<li>Fri Sep 28 00:45:16 2007 oreilly <code>hv.v1hmv2_sal.proj</code><br>
  Salience test working, but demonstrably fragile for various stim parameters.. bother.
<P>
<P>
<li>Thu Sep 27 11:40:21 2007 oreilly <code>hv.v1hmv2.proj</code><br>
  Fixed all the wt_scale_init flags in hv_clr_fov_sm -- all were off!!
<P>
<li>Wed Sep 26 20:02:23 2007 oreilly <code>hv.v1hmv2.proj</code><br>
  * v1 high rf_mv = 2 to fill in missing gaps in filter coverage; rf size changed to 6x6 to have smaller features too.
<ul><li> previously: got rid of hblob and all the high freq color input filters, because objrec should be ok with lowres color. 
<li> all orientation filters are now based strictly off of bw, not color (correcting earlier misconception about cones in fovea
meaning that everything in fovea had to be color selective: instead, colors are averaged over..)</ul>
<P>
<li>Wed Jul 25 03:21:33 2007 oreilly <code>hv.dorsal_clr_lgv1_tobj_dors_k16.proj</code><br>
  dorsal self-con strength = 0!  This is key for making it work -- makes it senstive to bottom-up influences only -- otherwise the recurrence just takes over and makes nonsense!  significant improvement in the tarr objs 100 case..
<P>
<li>Thu Jul 19 00:15:01 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  fixed DorsalDecode prjn offset bug! set_offs.y = -1 so it offsets for 1st layer of decode units! decode layer now very accurately tracking a red cross.. ;)
<P>
<li>Wed Jul 18 19:46:43 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  test_target added -- doh!  tests for simple case of tracking a single dot around..
<P>
<li>Wed Jul 18 15:26:17 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  set ret_trans gain to .5 .5 instead of 1 1 - also added tarr_objects
<P>
<li>Wed Jul 18 03:21:15 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  IT max_acts (topkacts) and voting test!
<P>
<li>Tue Jul 17 01:39:22 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  dorsal bias weight gauss_sigma = 2
<P>
<li>Tue Jul 17 01:38:23 2007 oreilly <code>hv.dorsal_clr_lgv1_ctrsig3.proj</code><br>
  dorsal bias weight gauss_sigma = 3 (instead of 2)
<P>
<li>Tue Jul 17 01:16:11 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  dorsal v1 gpg = .2 (edge), blob = .6, blob rel_wt = 1, dorsal gauss_bias = 1000
<P>
<li>Mon Jul 16 13:42:27 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  dorsal v1 gpg = .8 (both edge and blob), blob rel_wt = 1, 1 fixation objrec train
<P>
<li>Mon Jul 16 00:11:26 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  blobs in dorsal
<P>
<li>Sun Jul 15 21:47:15 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  fixation test: how consistent is the location when the image moves?
<P>
<li>Sun Jul 15 13:38:11 2007 oreilly <code>hv.dorsal_clr_lgv1_fov.proj</code><br>
  fovea scaling .8 - 1.2
<P>
<li>Sun Jul 15 13:30:01 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  dorsal kwta = 4
<P>
<li>Sun Jul 15 13:14:10 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  no pos bias (only negative around edges, width = 5), no noise
<P>
<li>Sun Jul 15 03:10:59 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  set i_thr computation to ALL (including bias weights), set gains to 100 -- seems to be having an effect now..
<P>
<li>Sat Jul 14 02:21:15 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  fixed norm_con_n on wts into dorsal v1 -- was causing strange edge artifacts!!!
<P>
<li>Sat Jul 14 01:34:48 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  clr_dorsal using same rfields as objrec network: high and med res
<P>
<li>Sat Jul 14 00:16:27 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  clr_dorsal using same rfields as objrec network: high and med res
<P>
<li>Sat Jul 14 00:00:12 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  clr_dorsal
<P>
<li>Fri Jul 13 23:15:15 2007 oreilly <code>hv.dorsal_clr_lgv1.proj</code><br>
  1fix with faded edges
<P>
<li>Mon Jul  9 01:52:57 2007 oreilly <code>hv.dorsal_bw_lgv1.proj</code><br>
  low_v1 rf_width = 4x4, freq = 2, len, width = 2
<P>
<li>Mon Jul  9 01:42:45 2007 oreilly <code>hv.dorsal_bw_lgv1.proj</code><br>
  switched to simpler rf_move & rf_width spec for V1 receptive field --rf_move is what you set from the layercalc, rf_width can be wider if you want..
<P>
<P>
<li>Sun Jul  8 19:51:09 2007 oreilly <code>hv.dorsal_bw_lgv1.proj</code>
  <ul>
<li> high_v1 = 8x8, freq = 1, width,len =4
<li> med, low_v1 = 6x6 freq 1.5, width,len = 3, low rf_mult = 3, med rf_mult = 1.5 (more than 1/2 overlap, needed to get 12x12 V1 to match high; values in layer calc are 4,2,1 (h,m,l).
<li> retina sizes: hi = 52, med = 26, low = 13, w/ on_sig & spacing = 2,4,8
</ul>
<P>
<P>
<li>Sun Jul  8 14:14:21 2007 oreilly <code>hv.dorsal_bw_lgv1.proj</code><br>
  larger V1 layer with smaller high-freq receptive field: current performance is worse than before, and 12x12 hi rf may be to blame -- provides a relatively low-res sample of image.
<P>
<li> 7/4/07 ROR -- lrate = .002 to compensate for 5x repetition of same item
<P>
<li> 7/3/07 ROR -- many simplifications to programs using new DataVarProg and other such goodies
</ul>
<P>
</body>
";
  };
  taDoc @[4] {
   name="ChangeLayerSizes";
   auto_open=0;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head>ChangeLayerSizes</head>
<body>
<h1>How to Change Layer Sizes</h1>

<ul>
<li> VisionLayerCalc -- sets layer sizes directly based on params
<li> prjn specs in specs/LeabraPrjns/high_v1, med_v1, low_v1 -- rf_width_mult and check rf_spec params -- do GridFilter to check freq etc params.  Here are some good vals:
  <ul>
  <li> rf width = 8, freq = 1, width, len = 4
  <li> rf width = 6, freq = 1.5, width, len = 3
  </ul>
<li> ApplyInputs program: change RetinaSpec border (etc) so that the output_size is same as computed input layer size (for each), and then click <b>Config Data Table</b>

</ul>

</body>
</html>
";
   html_text="<html>
<head>ChangeLayerSizes</head>
<body>
<h1>How to Change Layer Sizes</h1>
<P>
<ul>
<li> VisionLayerCalc -- sets layer sizes directly based on params
<li> prjn specs in specs/LeabraPrjns/high_v1, med_v1, low_v1 -- rf_width_mult and check rf_spec params -- do GridFilter to check freq etc params.  Here are some good vals:
  <ul>
  <li> rf width = 8, freq = 1, width, len = 4
  <li> rf width = 6, freq = 1.5, width, len = 3
  </ul>
<li> ApplyInputs program: change RetinaSpec border (etc) so that the output_size is same as computed input layer size (for each), and then click <b>Config Data Table</b>
<P>
</ul>
<P>
</body>
</html>
";
  };
  taDoc @[5] {
   name="DorsalTestResults";
   auto_open=0;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>
= Results of Dorsal Testing =

== 7/16/07 ==

Summary: more competition (gpg = group gain across V1 layers) and blob input lead to more consistent fixation (smaller stdev of distance across fixations) and more central fixation (smaller mean distance)

* hv.dorsal_clr_lgv1_fmb1_gpg6_dorstst_ctnbgf_35_5_dm5.trn.obj.dat
** stdev: n=9104; min=0.004568; max=0.661501; mean=0.109846; median=0.0826601; stdev=0.0868485; sem=0.000910219;
** mean: n=9104; min=0.0407021; max=1.33794; mean=0.797047; median=0.836809; stdev=0.245573; sem=0.00257374;

* hv.dorsal_clr_lgv1_fmb0_gpg6_dorstst_ctnbgf_35_5_dm5.trn.obj.dat
** stdev: n=9000; min=0.00415695; max=0.513664; mean=0.110596; median=0.0853558; stdev=0.0818673; sem=0.000862957;
** mean: n=9000; min=0.0569646; max=1.34399; mean=0.810001; median=0.841156; stdev=0.229364; sem=0.00241771;

* hv.dorsal_clr_lgv1_fmb0_gpg8_dorstst_ctnbgf_35_5_dm5.trn.obj.dat
** stdev:  n=9145; min=0.00338724; max=0.652698; mean=0.104913; median=0.0762086; stdev=0.0861231; sem=0.000900591;
** mean:  n=9145; min=0.0196031; max=1.35834; mean=0.757906; median=0.803574; stdev=0.27022; sem=0.0028257

* hv.dorsal_clr_lgv1_fmb0_gpg4_dorstst_ctnbgf_35_5_dm5.trn.obj.dat
** stdev: n=8935; min=0.00564771; max=0.569958; mean=0.112204; median=0.0912683; stdev=0.0738828; sem=0.000781621;
** mean: n=8935; min=0.065262; max=1.28771; mean=0.858531; median=0.873529; stdev=0.175664; sem=0.00185838;

* hv.dorsal_clr_lgv1_fmb0_gpg2_dorstst_ctnbgf_35_5_dm5.trn.obj.dat
** stdev: n=8930; min=0.0062827; max=0.530205; mean=0.112213; median=0.094744; stdev=0.0684582; sem=0.000724436;
** mean: n=8930; min=0.137718; max=1.31185; mean=0.891732; median=0.900284; stdev=0.146999; sem=0.00155557;

* hv.dorsal_clr_lgv1_fmb1_gpg8_dorstst_ctnbgf_35_5_dm5.trn.obj.dat
** stdev: n=1648; min=0.00322215; max=0.566422; mean=0.112068; median=0.077913; stdev=0.0955948; sem=0.00235481;
** mean: n=1648; min=0.0479752; max=1.32479; mean=0.733474; median=0.779826; stdev=0.281432; sem=0.00693259;


</body>
</html>
";
   html_text="<html>
<head></head>
<body>
<h1> Results of Dorsal Testing </h1>
<P>
<h2> 7/16/07 </h2>
<P>
Summary: more competition (gpg = group gain across V1 layers) and blob input lead to more consistent fixation (smaller stdev of distance across fixations) and more central fixation (smaller mean distance)
<P>
<ul><li> hv.dorsal_clr_lgv1_fmb1_gpg6_dorstst_ctnbgf_35_5_dm5.trn.obj.dat
<ul><li> stdev: n=9104; min=0.004568; max=0.661501; mean=0.109846; median=0.0826601; stdev=0.0868485; sem=0.000910219;
<li> mean: n=9104; min=0.0407021; max=1.33794; mean=0.797047; median=0.836809; stdev=0.245573; sem=0.00257374;
</ul></ul>
<ul><li> hv.dorsal_clr_lgv1_fmb0_gpg6_dorstst_ctnbgf_35_5_dm5.trn.obj.dat
<ul><li> stdev: n=9000; min=0.00415695; max=0.513664; mean=0.110596; median=0.0853558; stdev=0.0818673; sem=0.000862957;
<li> mean: n=9000; min=0.0569646; max=1.34399; mean=0.810001; median=0.841156; stdev=0.229364; sem=0.00241771;
</ul></ul>
<ul><li> hv.dorsal_clr_lgv1_fmb0_gpg8_dorstst_ctnbgf_35_5_dm5.trn.obj.dat
<ul><li> stdev:  n=9145; min=0.00338724; max=0.652698; mean=0.104913; median=0.0762086; stdev=0.0861231; sem=0.000900591;
<li> mean:  n=9145; min=0.0196031; max=1.35834; mean=0.757906; median=0.803574; stdev=0.27022; sem=0.0028257
</ul></ul>
<ul><li> hv.dorsal_clr_lgv1_fmb0_gpg4_dorstst_ctnbgf_35_5_dm5.trn.obj.dat
<ul><li> stdev: n=8935; min=0.00564771; max=0.569958; mean=0.112204; median=0.0912683; stdev=0.0738828; sem=0.000781621;
<li> mean: n=8935; min=0.065262; max=1.28771; mean=0.858531; median=0.873529; stdev=0.175664; sem=0.00185838;
</ul></ul>
<ul><li> hv.dorsal_clr_lgv1_fmb0_gpg2_dorstst_ctnbgf_35_5_dm5.trn.obj.dat
<ul><li> stdev: n=8930; min=0.0062827; max=0.530205; mean=0.112213; median=0.094744; stdev=0.0684582; sem=0.000724436;
<li> mean: n=8930; min=0.137718; max=1.31185; mean=0.891732; median=0.900284; stdev=0.146999; sem=0.00155557;
</ul></ul>
<ul><li> hv.dorsal_clr_lgv1_fmb1_gpg8_dorstst_ctnbgf_35_5_dm5.trn.obj.dat
<ul><li> stdev: n=1648; min=0.00322215; max=0.566422; mean=0.112068; median=0.077913; stdev=0.0955948; sem=0.00235481;
<li> mean: n=1648; min=0.0479752; max=1.32479; mean=0.733474; median=0.779826; stdev=0.281432; sem=0.00693259;
</ul></ul>
<P>
</body>
</html>
";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="LeabraWizard_1";
   auto_open=0;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="Input";
     n_units=25;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="Hidden";
     n_units=25;
     io_type=HIDDEN;
    };
    LayerWizEl @[2] {
     name="Output";
     n_units=25;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   name="MasterControl";
   auto_edit=1;
   desc="overall control of processing etc";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="VisionTrain network";
     desc=" object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program's .objs, then the name will be automatically set";
     base=.projects[0].programs.gp[0][1].args[0]$0$;
     mbr=ProgVar::object_val;
    };
    EditMbrItem @[1] {
     label="trial_type";
     desc=" current value, which for normal mutually-exclusive options is index into list of enums (-1 = not set), and for bits is the bit values";
     base=.projects[0].programs.gp[0][2].vars[9].dyn_enum_val$1$;
     mbr=DynEnum::value;
    };
    EditMbrItem @[2] {
     label="lesson_id";
     desc=" string value";
     base=.projects[0].programs.gp[0][1].vars[0]$2$;
     mbr=ProgVar::string_val;
    };
    EditMbrItem @[3] {
     label="step_prog";
     desc=" the program that will be stepped when the Step button is pressed";
     base=.projects[0].programs.gp[0]$3$;
     mbr=Program_Group::step_prog;
    };
    EditMbrItem @[4] {
     label="LeabraCycle update_net_view";
     desc=" boolean value";
     base=.projects[0].programs.gp[0][6].vars[0]$4$;
     mbr=ProgVar::bool_val;
    };
    EditMbrItem @[5] {
     label="hv_v1gp3_bw_noit norm err";
     desc=" normalized binary (Hamming) error on this trial: number of units that were incorrectly activated or incorrectly inactivated (see off_errs to exclude latter)";
     base=.projects[0].networks[0]$5$;
     mbr=LeabraNetwork::norm_err;
    };
    EditMbrItem @[6] {
     label="hv_v1gp3_bw_noit ext rew";
     desc=" external reward value (on this trial) -- only computed if ExtRewLayerSpec or similar exists in network -- equals PVe value in PVLV framework";
     base=$5$;
     mbr=LeabraNetwork::ext_rew;
    };
    EditMbrItem @[7] {
     label="hv_v1gp3_bw_noit maxda";
     desc=" maximum change in activation (delta-activation) over network; used in stopping settling";
     base=$5$;
     mbr=LeabraNetwork::maxda;
    };
    EditMbrItem @[8] {
     label="hv_v1gp3_bw_noit minus output name";
     desc=" output_name in the minus phase -- for recording in logs as network's response (output_name in plus phase is clamped target value)";
     base=$5$;
     mbr=LeabraNetwork::minus_output_name;
    };
    EditMbrItem @[9] {
     label="hv_v1gp3_bw_noit minus cycles";
     desc=" cycles to settle in the minus phase -- this is the typical settling time statistic to record";
     base=$5$;
     mbr=LeabraNetwork::minus_cycles;
    };
    EditMbrItem @[10] {
     label="hv_v1gp3_bw_noit ct cycle";
     desc=" continuous time cycle counter: counts up from start of trial ";
     base=$5$;
     mbr=LeabraNetwork::ct_cycle;
    };
    EditMbrItem @[11] {
     label="hv_v1gp3_bw_noit phase no";
     desc=" phase as an ordinal number (regular phase is Phase enum)";
     base=$5$;
     mbr=LeabraNetwork::phase_no;
    };
    EditMbrItem @[12] {
     label="hv_v1gp3_bw_noit phase";
     desc=" type of settling phase<br>  MINUS PHASE:  minus phase<br>  PLUS PHASE:  plus phase";
     base=$5$;
     mbr=LeabraNetwork::phase;
    };
    EditMbrItem @[13] {
     label="hv_v1gp3_bw_noit sse";
     desc=" sum squared error over the network, for the current external input pattern";
     base=$5$;
     mbr=Network::sse;
    };
    EditMbrItem @[14] {
     label="hv_v1gp3_bw_noit output name";
     desc=" name for the output produced by the network (must be computed by a program)";
     base=$5$;
     mbr=Network::output_name;
    };
    EditMbrItem @[15] {
     label="hv_v1gp3_bw_noit trial name";
     desc=" name associated with the current trial (e.g., name of input pattern, typically set by a LayerWriter)";
     base=$5$;
     mbr=Network::trial_name;
    };
    EditMbrItem @[16] {
     label="hv_v1gp3_bw_noit group name";
     desc=" name associated with the current group of trials, if such a grouping is applicable (typically set by a LayerWriter)";
     base=$5$;
     mbr=Network::group_name;
    };
    EditMbrItem @[17] {
     label="hv_v1gp3_bw_noit time";
     desc=" the current time, relative to some established starting point, in algorithm-specific units (often miliseconds)";
     base=$5$;
     mbr=Network::time;
    };
    EditMbrItem @[18] {
     label="hv_v1gp3_bw_noit cycle";
     desc=" cycle counter: number of iterations of activation updating (settling) on the current external input pattern (updated by program)	";
     base=$5$;
     mbr=Network::cycle;
    };
    EditMbrItem @[19] {
     label="hv_v1gp3_bw_noit tick";
     desc=" tick counter: optional extra counter to record a level of organization below the trial level (for cases where trials have multiple component elements)";
     base=$5$;
     mbr=Network::tick;
    };
    EditMbrItem @[20] {
     label="hv_v1gp3_bw_noit trial";
     desc=" trial counter: number of external input patterns that have been presented in the current epoch (updated by program)";
     base=$5$;
     mbr=Network::trial;
    };
    EditMbrItem @[21] {
     label="hv_v1gp3_bw_noit group";
     desc=" group counter: optional extra counter to record sequence-level information (sequence = group of trials)";
     base=$5$;
     mbr=Network::group;
    };
    EditMbrItem @[22] {
     label="hv_v1gp3_bw_noit epoch";
     desc=" epoch counter: number of times a complete set of training patterns has been presented (updated by program)";
     base=$5$;
     mbr=Network::epoch;
    };
    EditMbrItem @[23] {
     label="hv_v1gp3_bw_noit batch";
     desc=" batch counter: number of times network has been trained over a full sequence of epochs (updated by program)";
     base=$5$;
     mbr=Network::batch;
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Train Init";
     desc=" set the program state back to the beginning";
     base=.projects[0].programs.gp[0][1]$6$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Train Run";
     desc=" run the program";
     base=$6$;
     mth=Program::Run;
    };
    EditMthItem @[2] {
     label="Train Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$6$;
     mth=Program::Step;
    };
    EditMthItem @[3] {
     label="Train Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     base=$6$;
     mth=Program::Stop;
    };
    EditMthItem @[4] {
     label="Trial Init";
     desc=" set the program state back to the beginning";
     base=.projects[0].programs.gp[0][4]$7$;
     mth=Program::Init;
    };
    EditMthItem @[5] {
     label="Trial Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$7$;
     mth=Program::Step;
    };
   };
  };
  SelectEdit @[1] {
   name="NoIT";
   auto_edit=1;
   desc="overall control of processing etc";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="phase_order";
     desc=" [Default: MINUS_PLUS] number and order of phases to present<br>  MINUS PLUS:  standard minus-plus (err and assoc)<br>  PLUS MINUS:  reverse order: plus phase first<br>  PLUS ONLY:  only present the plus phase (hebbian-only)<br>  MINUS PLUS NOTHING:  auto-encoder version with final 'nothing' minus phase<br>  MINUS PLUS MINUS:  special for ct leabra where you can't clear out the input entirely -- system needs to modulate wt scale strength in 2nd minus phase -- this 2nd minus is also marked as a nothing_phase <br>  PLUS NOTHING:  just the auto-encoder (no initial minus phase)<br>  MINUS PLUS PLUS:  two plus phases for gated context layer updating<br>  MINUS PLUS 2:  two minus-plus phases (for pfc/bg system)";
     base=$5$;
     mbr=LeabraNetwork::phase_order;
    };
    EditMbrItem @[1] {
     label="lmix";
     desc=" mixture of hebbian & err-driven learning<br>  hebb:  [Default: .01] amount of hebbian learning (should be relatively small, can be effective at .0001)<br>  err:  [Default: .99] amount of error driven learning, automatically computed to be 1-hebb<br>  err sb: [Default: true]  apply exponential soft-bounding to the error learning component";
     base=.projects[0].networks[0].specs[2]$8$;
     mbr=LeabraConSpec::lmix;
    };
    EditMbrItem @[2] {
     label="lrate";
     desc="[Default: 0.01]  learning rate -- how fast do the weights change per experience";
     base=$8$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[3] {
     label="HigherCons savg cor";
     desc=" for Hebbian and netinput computation: correction for sending average act levels (i.e., renormalization); also norm_con_n for normalizing netinput computation<br>  cor: [Default: 0.4]  proportion of correction to apply (0=none, 1=all, .5=half, etc)<br>  thresh: [Default: 0.001]  threshold of sending average activation below which learning does not occur (prevents learning when there is no input)<br>  norm con n: [Default: false]  in normalizing netinput, divide by the actual number of connections (recv group n), not the overall number of units in the sending layer; this is good when units only receive from a small fraction of sending layer units";
     base=.projects[0].networks[0].specs[2].children[2]$9$;
     mbr=LeabraConSpec::savg_cor;
    };
    EditMbrItem @[4] {
     label="hv_tiny_clr_ct ct time";
     desc=" timing parameters for ct leabra trial<br>  minus:  number of cycles to run in the minus phase with only inputs and no targets (used by LeabraSettle program), sets cycle_max -- can be 0<br>  plus:  number of cycles to run in the plus phase with input and target activations (used by LeabraSettle program), sets cycle_max -- must be > 0<br>  inhib:  number of cycles to run in the final inhibitory phase -- network can do MINUS_PLUS_PLUS, MINUS_PLUS_MINUS, or MINUS_PLUS_NOTHING for inputs on this phase<br>  inhib max:  number of cycles into inhib phase for inhibition to reach its maximum level (on a linear ramp) -- 0 means do not apply this function<br>  burst:  number of cycles at start of trial to reduce inhibition levels as a result of residual refractoriness from prior trial, allowing incoming activation to over-activate relative to stable values -- ramps down linearly from start of trial to 0 reduction after burst cycles -- <=1 means do not apply<br>  sravg end:  number of cycles from the start of the final inhibitory phase to continue recording sravg<br>  syndep int: [Default: 20]  interval for doing synaptic depression and associated Ca_i integration calcuations -- numbers > 1 result in faster processing and actually work better too -- need to adjust the conspec ca/syndep rate constants in step with this (multiply by this number)";
     base=$5$;
     mbr=LeabraNetwork::ct_time;
    };
    EditMbrItem @[5] {
     label="hv_tiny_clr_ct ct sravg";
     desc=" parameters controlling computation of sravg value as a function of layer-level delta-activation <br>  min da thr: [Default: 0.005]  minimum threshold value of accumulated layer-level delta activation (da_sum) for computing sravg value<br>  max da thr: [Default: 0.5]  maximum value of layer-level max da (max delta-activation), above which sravg is not computed (prevents learning when too far out of the attractor state)";
     base=$5$;
     mbr=LeabraNetwork::ct_sravg;
    };
    EditMbrItem @[6] {
     label="hv_tiny_clr_ct ct sin i";
     desc=" sinusoidal inhibition parameters for inhibitory modulations during trial, simulating oscillations resulting from imperfect inhibtory set point behavior<br>  start:  [20] number of cycles from onset of new input to start applying sinusoidal inhibitory modulation<br>  duration:  [20] number of cycles from start to apply modulation -- either a full sine wave (burst and trough) or half sine wave (burst only) is applied during this time<br>  burst only:  if true, only does positive portion (bursting) of sine wave<br>  burst i:  [.02] maximum reduction in inhibition as a proportion of computed kwta value to subtract for positive activation (burst) phase of wave -- value should be a positive number<br>  trough i:  [.02] maximum extra inhibition as proportion of computed kwta value to add for negative activation (trough) phase of wave -- value shoudl be a positive number";
     base=$5$;
     mbr=LeabraNetwork::ct_sin_i;
    };
    EditMbrItem @[7] {
     label="hv_tiny_clr_ct ct fin i";
     desc=" final inhibition parameters for extra inhibition to apply during final inhib phase, simulating slow-onset GABA currents<br>  start:  number of cycles into inhib phase for inhibition ramp to start<br>  end:  number of cycles into inhib phase for inhibition ramp to end -- remains at full inhibition level from end to end of inhib phase<br>  inhib i:  [.05 when in use] maximum extra inhibition as proportion of computed kwta value to add during final inhib phase";
     base=$5$;
     mbr=LeabraNetwork::ct_fin_i;
    };
    EditMbrItem @[8] {
     label="Leabra ~ rSpec_0 decay";
     desc=" decay of activity state vars between events, -/+ phase, and 2nd set of phases (if appl)<br>  event: [Default: 1]  proportion decay of state vars between events<br>  phase: [Default: 1]  proportion decay of state vars between minus and plus phases <br>  phase2: [Default: 0]  proportion decay of state vars between 2nd set of phases (if appl, 0 std)<br>  clamp phase2: [Default: false]  if true, hard-clamp second plus phase activations to prev plus phase (only special layers will then update -- optimizes speed)";
     base=.projects[0].networks[0].specs[1]$10$;
     mbr=LeabraLayerSpec::decay;
    };
    EditMbrItem @[9] {
     label="StdCtLea ~ nitSpec dt";
     desc=" time constants (rate of updating): membrane potential (vm) and net input (net)<br>  vm: [Default: 0.3]  membrane potential time constant -- if units oscillate too much, then this is too high (but see d_vm_max for another solution)<br>  net: [Default: 0.7]  net input time constant -- how fast to update net input (damps oscillations)<br>  midpoint: [Default: true]  use the midpoint method in computing the vm value -- better avoids oscillations and allows a larger dt.vm parameter to be used<br>  d vm max: [Default: 0.025]  maximum change in vm at any timestep (limits blowup)<br>  vm eq cyc: [Default: 0]  number of cycles to compute the vm as equilibirium potential given current inputs: set to 1 to quickly activate input layers; set to 100 to always use this computation<br>  vm eq dt: [Default: 1]  time constant for integrating the vm_eq values: how quickly to move toward the current eq value from previous vm value";
     base=.projects[0].networks[0].specs[0]$11$;
     mbr=LeabraUnitSpec::dt;
    };
    EditMbrItem @[10] {
     label="LeabraConSpec_0 xcal";
     desc=" XCAL (eXtended Contrastive Attractor Learning) learning parameters<br>  lrn var: [Default: XCAL]  learning rule variant -- non-XCAL options are primarily for testing and specialized applications -- bias weights always use CAL or CHL if CHL is selected<br>    XCAL:  use XCAL default learning rule: product of separate sending and receiving unit averages (from bias weight) for short and medium time scale, relative to medium and long term averages, passed through the XCAL dwt function (see conspec for option to plot this)<br>    XCAL SR:  XCAL with synapse-level sravg for short and medium time scales (as in cal) -- svm term still goes through XCAL function though<br>    CAL:  XCAL with synapse-level sravg for short and medium time scales (as in CAL) -- svm term (err-driven) does NOT go through XCAL function (main diff from _SR version)<br>    CHL:  XCAL with CHL as the svm (err-driven) term (not going through XCAL function) -- basically CHL with XCAL homeostasis mechanism (BCM-like rule)<br>  mvl mix: [Default: 0.001:1.0]  amount that medium (trial) versus long (epoch) time scale learning contributes -- this is the self-organizing BCM-like homeostatic component of learning -- remainder is svm: short (plus phase) versus medium (trial) time scale which reflects pure error-driven learning<br>  s mix: [Default: 0.7:0.9]  how much the short (plus phase) versus medium (trial) time-scale factor contributes to the synaptic activation term for learning -- s_mix just makes sure that plus-phase states are sufficiently long/important (e.g., dopamine) to drive strong positive learning to these states -- if 0 then svm term is also negated -- but vals < 1 are needed to ensure that when unit is off in plus phase (short time scale) that enough medium-phase trace remains to drive appropriate learning<br>  l dt: [Default: 0.001:0.01]  time constant for updating the long time-scale ravg_l value -- note this is ONLY applicable on the unit bias con spec, where it updates the unit-level ravg_l variable!!<br>  l gain: [Default: 1.8]  gain for long time-scale ravg term -- needed to put into same terms as the s*r avg values used in the s and m components of learning<br>  ml dt: [Default: 0.4]  time constant for updating the medium-to-long time-scale ravg_ml value -- note this is ONLY applicable on the unit bias con spec, where it updates the unit-level ravg_ml variable!!<br>  d rev: [Default: 0.1]  proportional point within LTD range where magnitude reverses to go back down to zero at zero sravg <br>  d gain: [Default: 1]  multiplier on LTD values relative to LTP values -- generally do not change from 1.0 default unless using only BCM-style learning";
     base=$8$;
     mbr=LeabraConSpec::xcal;
    };
    EditMbrItem @[11] {
     label="LeabraCycle update_net_view";
     desc=" boolean value";
     base=$4$;
     mbr=ProgVar::bool_val;
    };
    EditMbrItem @[12] {
     label="LeabraAll_Vision step prog";
     desc=" the program that will be stepped when the Step button is pressed";
     base=$3$;
     mbr=Program_Group::step_prog;
    };
    EditMbrItem_Group @.gp[0] {
     name="NoIT Net Control";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="hv_hi52_ ~ ct_noit epoch";
      desc=" epoch counter: number of times a complete set of training patterns has been presented (updated by program)";
      base=$5$;
      mbr=Network::epoch;
     };
     EditMbrItem @[1] {
      label="hv_hi52_ ~ ct_noit trial";
      desc=" trial counter: number of external input patterns that have been presented in the current epoch (updated by program)";
      base=$5$;
      mbr=Network::trial;
     };
     EditMbrItem @[2] {
      label="hv_hi52_ ~ ct_noit tick";
      desc=" tick counter: optional extra counter to record a level of organization below the trial level (for cases where trials have multiple component elements)";
      base=$5$;
      mbr=Network::tick;
     };
     EditMbrItem @[3] {
      label="hv_hi52_ ~ ct_noit cycle";
      desc=" cycle counter: number of iterations of activation updating (settling) on the current external input pattern (updated by program)	";
      base=$5$;
      mbr=Network::cycle;
     };
     EditMbrItem @[4] {
      label="hv_hi52_ ~ ct_noit trial name";
      desc=" name associated with the current trial (e.g., name of input pattern, typically set by a LayerWriter)";
      base=$5$;
      mbr=Network::trial_name;
     };
     EditMbrItem @[5] {
      label="hv_hi52_ ~ ct_noit output name";
      desc=" name for the output produced by the network (must be computed by a program)";
      base=$5$;
      mbr=Network::output_name;
     };
     EditMbrItem @[6] {
      label="hv_hi52_ ~ ct_noit sse";
      desc=" sum squared error over the network, for the current external input pattern";
      base=$5$;
      mbr=Network::sse;
     };
     EditMbrItem @[7] {
      label="hv_hi52_ ~ ct_noit phase";
      desc=" type of settling phase<br>  MINUS PHASE:  minus phase<br>  PLUS PHASE:  plus phase";
      base=$5$;
      mbr=LeabraNetwork::phase;
     };
     EditMbrItem @[8] {
      label="hv_hi52_ ~ ct_noit phase no";
      desc=" phase as an ordinal number (regular phase is Phase enum)";
      base=$5$;
      mbr=LeabraNetwork::phase_no;
     };
     EditMbrItem @[9] {
      label="hv_hi52_ ~ ct_noit ct cycle";
      desc=" continuous time cycle counter: counts up from start of trial ";
      base=$5$;
      mbr=LeabraNetwork::ct_cycle;
     };
     EditMbrItem @[10] {
      label="hv_hi52_ ~ ct_noit minus cycles";
      desc=" cycles to settle in the minus phase -- this is the typical settling time statistic to record";
      base=$5$;
      mbr=LeabraNetwork::minus_cycles;
     };
     EditMbrItem @[11] {
      label="hv_hi52_ ~ ct_noit minus output name";
      desc=" output_name in the minus phase -- for recording in logs as network's response (output_name in plus phase is clamped target value)";
      base=$5$;
      mbr=LeabraNetwork::minus_output_name;
     };
     EditMbrItem @[12] {
      label="hv_hi52_ ~ ct_noit maxda";
      desc=" maximum change in activation (delta-activation) over network; used in stopping settling";
      base=$5$;
      mbr=LeabraNetwork::maxda;
     };
     EditMbrItem @[13] {
      label="hv_hi52_ ~ ct_noit norm err";
      desc=" normalized binary (Hamming) error on this trial: number of units that were incorrectly activated or incorrectly inactivated (see off_errs to exclude latter)";
      base=$5$;
      mbr=LeabraNetwork::norm_err;
     };
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Train Init";
     desc=" set the program state back to the beginning";
     base=$6$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Train Run";
     desc=" run the program";
     base=$6$;
     mth=Program::Run;
    };
    EditMthItem @[2] {
     label="Train Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$6$;
     mth=Program::Step;
    };
    EditMthItem @[3] {
     label="Train Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     base=$6$;
     mth=Program::Stop;
    };
    EditMthItem @[4] {
     label="Trial Init";
     desc=" set the program state back to the beginning";
     base=$7$;
     mth=Program::Init;
    };
    EditMthItem @[5] {
     label="Trial Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$7$;
     mth=Program::Step;
    };
   };
  };
  SelectEdit @[2] {
   name="IT";
   auto_edit=1;
   desc="params for the model with an IT";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
  SelectEdit @[3] {
   name="NoIT_VentralV1";
   auto_edit=0;
   desc="parameters for ventral what network";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="V1_high_sal gp_kwta";
     desc=" desired activity level for units within unit groups (not for ENTIRE_LAYER) (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from!:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct!: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i!:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=.projects[0].networks[0].specs[1].children[0].children[1]$12$;
     mbr=LeabraLayerSpec::gp_kwta;
    };
    EditMbrItem @[1] {
     label="V1_med_sal gp_kwta";
     desc=" desired activity level for units within unit groups (not for ENTIRE_LAYER) (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from!:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct!: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i!:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=.projects[0].networks[0].specs[1].children[0]$13$;
     mbr=LeabraLayerSpec::gp_kwta;
    };
    EditMbrItem @[2] {
     label="V1_blob_sal gp_kwta";
     desc=" desired activity level for units within unit groups (not for ENTIRE_LAYER) (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from!:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct!: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i!:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=.projects[0].networks[0].specs[1].children[0].children[0]$14$;
     mbr=LeabraLayerSpec::gp_kwta;
    };
    EditMbrItem @[3] {
     label="V1_med_sal inhib";
     desc=" how to compute inhibition -- for kwta modes, a single global inhibition value is computed for the entire layer<br>  type!:  how to compute inhibition (g_i)<br>    KWTA INHIB:  between thresholds of k and k+1th most activated units (sets precise k value, should use i_kwta_pt = .25 std)<br>    KWTA AVG INHIB:  average of top k vs avg of rest (provides more flexibility in actual k value, should use i_kwta_pt = .6 std)<br>    KWTA KV2K:  average of top k vs avg of next k (2k) -- avoids long 'tail' of distribution of weakly active units, while providing similar flexibility as KWTA_AVG_INHIB, and also is equivalent to KWTA_INHIB for k=1 -- i_kwta_pt = .25 is std. In general, this is now preferred to KWTA_AVG_INHIB<br>    KWTA COMP COST:  competitor cost kwta function: inhibition is i_kwta_pt below the k'th unit's threshold inhibition value if there are no strong competitors (>comp_thr proportion of kth inhib val), and each competitor increases inhibition linearly (normalized by total possible = n-k) with gain comp_gain -- produces cleaner competitive dynamics and considerable kwta flexibility<br>    AVG MAX PT INHIB:  put inhib value at i_kwta_pt between avg and max values for layer<br>    MAX INHIB:  put inhib value at i_kwta_pt below max guy in layer<br>    UNIT INHIB:  unit-based inhibition (g_i from netinput -- requires connections with inhib flag set to provide inhibition)<br>  kwta pt:  [Default: .25 for KWTA_INHIB, .6 for KWTA_AVG, .2 for AVG_MAX_PT_INHIB] point to place inhibition between k and k+1 (or avg and max for AVG_MAX_PT_INHIB)<br>  min i:  minimum inhibition value -- set this higher than zero to prevent units from getting active even if there is not much overall excitation<br>  comp thr:  [0-1] Threshold for competitors in KWTA_COMP_COST -- competitor threshold inhibition is normalized by k'th inhibition and those above this threshold are counted as competitors <br>  comp gain:  Gain for competitors in KWTA_COMP_COST -- how much to multiply contribution of competitors to increase inhibition level<br>  gp pt:  [Default: .2] for unit groups: point to place inhibition between avg and max for AVG_MAX_PT_INHIB";
     base=$13$;
     mbr=LeabraLayerSpec::inhib;
    };
    EditMbrItem @[4] {
     label="high kwta";
     desc=" desired activity level over entire layer (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from!:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct!: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i!:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=.projects[0].networks[0].specs[1].children[2].children[0]$15$;
     mbr=LeabraLayerSpec::kwta;
    };
    EditMbrItem @[5] {
     label="med kwta";
     desc=" desired activity level over entire layer (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from!:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct!: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i!:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=.projects[0].networks[0].specs[1].children[2].children[1]$16$;
     mbr=LeabraLayerSpec::kwta;
    };
    EditMbrItem @[6] {
     label="mclr kwta";
     desc=" desired activity level over entire layer (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from!:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct!: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i!:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=.projects[0].networks[0].specs[1].children[2].children[2]$17$;
     mbr=LeabraLayerSpec::kwta;
    };
    EditMbrItem @[7] {
     label="V1Units dt";
     desc=" time constants (rate of updating): membrane potential (vm) and net input (net)<br>  vm: [Default: 0.3]  membrane potential time constant -- if units oscillate too much, then this is too high (but see d_vm_max for another solution)<br>  net: [Default: 0.7]  net input time constant -- how fast to update net input (damps oscillations)<br>  d vm max: [Default: 0.025]  maximum change in vm at any timestep (limits blowup)<br>  vm eq cyc: [Default: 0]  number of cycles to compute the vm as equilibirium potential given current inputs: set to 1 to quickly activate input layers; set to 100 to always use this computation<br>  vm eq dt: [Default: 1]  time constant for integrating the vm_eq values: how quickly to move toward the current eq value from previous vm value";
     base=.projects[0].networks[0].specs[0].children[0]$18$;
     mbr=LeabraUnitSpec::dt;
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
  SelectEdit @[4] {
   name="NoIT_VentralHigh";
   auto_edit=0;
   desc="V2 and up in Ventral net";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="LeabraLa ~ rSpec_0 inhib";
     desc=" how to compute inhibition -- for kwta modes, a single global inhibition value is computed for the entire layer<br>  type!:  how to compute inhibition (g_i)<br>    KWTA INHIB:  between thresholds of k and k+1th most activated units (sets precise k value, should use i_kwta_pt = .25 std)<br>    KWTA AVG INHIB:  average of top k vs avg of rest (provides more flexibility in actual k value, should use i_kwta_pt = .6 std)<br>    KWTA KV2K:  average of top k vs avg of next k (2k) -- avoids long 'tail' of distribution of weakly active units, while providing similar flexibility as KWTA_AVG_INHIB, and also is equivalent to KWTA_INHIB for k=1 -- i_kwta_pt = .25 is std. In general, this is now preferred to KWTA_AVG_INHIB<br>    KWTA COMP COST:  competitor cost kwta function: inhibition is i_kwta_pt below the k'th unit's threshold inhibition value if there are no strong competitors (>comp_thr proportion of kth inhib val), and each competitor increases inhibition linearly (normalized by total possible = n-k) with gain comp_gain -- produces cleaner competitive dynamics and considerable kwta flexibility<br>    AVG MAX PT INHIB:  put inhib value at i_kwta_pt between avg and max values for layer<br>    MAX INHIB:  put inhib value at i_kwta_pt below max guy in layer<br>    UNIT INHIB:  unit-based inhibition (g_i from netinput -- requires connections with inhib flag set to provide inhibition)<br>  kwta pt:  [Default: .25 for KWTA_INHIB, .6 for KWTA_AVG, .2 for AVG_MAX_PT_INHIB] point to place inhibition between k and k+1 (or avg and max for AVG_MAX_PT_INHIB)<br>  min i:  minimum inhibition value -- set this higher than zero to prevent units from getting active even if there is not much overall excitation<br>  comp thr:  [0-1] Threshold for competitors in KWTA_COMP_COST -- competitor threshold inhibition is normalized by k'th inhibition and those above this threshold are counted as competitors <br>  comp gain:  Gain for competitors in KWTA_COMP_COST -- how much to multiply contribution of competitors to increase inhibition level<br>  gp pt:  [Default: .2] for unit groups: point to place inhibition between avg and max for AVG_MAX_PT_INHIB";
     base=$10$;
     mbr=LeabraLayerSpec::inhib;
    };
    EditMbrItem @[1] {
     label="V2_high inhib";
     desc=" how to compute inhibition -- for kwta modes, a single global inhibition value is computed for the entire layer<br>  type!:  how to compute inhibition (g_i)<br>    KWTA INHIB:  between thresholds of k and k+1th most activated units (sets precise k value, should use i_kwta_pt = .25 std)<br>    KWTA AVG INHIB:  average of top k vs avg of rest (provides more flexibility in actual k value, should use i_kwta_pt = .6 std)<br>    KWTA KV2K:  average of top k vs avg of next k (2k) -- avoids long 'tail' of distribution of weakly active units, while providing similar flexibility as KWTA_AVG_INHIB, and also is equivalent to KWTA_INHIB for k=1 -- i_kwta_pt = .25 is std. In general, this is now preferred to KWTA_AVG_INHIB<br>    KWTA COMP COST:  competitor cost kwta function: inhibition is i_kwta_pt below the k'th unit's threshold inhibition value if there are no strong competitors (>comp_thr proportion of kth inhib val), and each competitor increases inhibition linearly (normalized by total possible = n-k) with gain comp_gain -- produces cleaner competitive dynamics and considerable kwta flexibility<br>    AVG MAX PT INHIB:  put inhib value at i_kwta_pt between avg and max values for layer<br>    MAX INHIB:  put inhib value at i_kwta_pt below max guy in layer<br>    UNIT INHIB:  unit-based inhibition (g_i from netinput -- requires connections with inhib flag set to provide inhibition)<br>  kwta pt:  [Default: .25 for KWTA_INHIB, .6 for KWTA_AVG, .2 for AVG_MAX_PT_INHIB] point to place inhibition between k and k+1 (or avg and max for AVG_MAX_PT_INHIB)<br>  min i:  minimum inhibition value -- set this higher than zero to prevent units from getting active even if there is not much overall excitation<br>  comp thr:  [0-1] Threshold for competitors in KWTA_COMP_COST -- competitor threshold inhibition is normalized by k'th inhibition and those above this threshold are counted as competitors <br>  comp gain:  Gain for competitors in KWTA_COMP_COST -- how much to multiply contribution of competitors to increase inhibition level<br>  gp pt:  [Default: .2] for unit groups: point to place inhibition between avg and max for AVG_MAX_PT_INHIB";
     base=.projects[0].networks[0].specs[1].children[3]$19$;
     mbr=LeabraLayerSpec::inhib;
    };
    EditMbrItem @[2] {
     label="V2_high kwta";
     desc=" desired activity level over entire layer (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from!:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct!: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i!:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=$19$;
     mbr=LeabraLayerSpec::kwta;
    };
    EditMbrItem @[3] {
     label="V2_high gp_kwta";
     desc=" desired activity level for units within unit groups (not for ENTIRE_LAYER) (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from!:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct!: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i!:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=$19$;
     mbr=LeabraLayerSpec::gp_kwta;
    };
    EditMbrItem @[4] {
     label="V2_med gp_kwta";
     desc=" desired activity level for units within unit groups (not for ENTIRE_LAYER) (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from!:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct!: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i!:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=.projects[0].networks[0].specs[1].children[3].children[0]$20$;
     mbr=LeabraLayerSpec::gp_kwta;
    };
    EditMbrItem @[5] {
     label="V4 gp_kwta";
     desc=" desired activity level for units within unit groups (not for ENTIRE_LAYER) (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from!:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct!: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i!:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=.projects[0].networks[0].specs[1].children[4]$21$;
     mbr=LeabraLayerSpec::gp_kwta;
    };
    EditMbrItem @[6] {
     label="V4 kwta";
     desc=" desired activity level over entire layer (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from!:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct!: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i!:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=$21$;
     mbr=LeabraLayerSpec::kwta;
    };
    EditMbrItem @[7] {
     label="IT kwta";
     desc=" desired activity level over entire layer (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from!:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct!: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i!:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=.projects[0].networks[0].specs[1].children[5]$22$;
     mbr=LeabraLayerSpec::kwta;
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="Presentation";
    desc="Specification of input for one trial";
    data {
     name="data";
     el_typ=double_Data;
     el_def=0;
     int_Data @[0] {
      name="oid_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[1] {
      name="supercat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[2] {
      name="category";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[3] {
      name="subcat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[4] {
      name="feature1";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[5] {
      name="feature2";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[6] {
      name="feature3";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[7] {
      name="feature4";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[8] {
      name="individual";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[9] {
      name="ctrlflags";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[10] {
      name="filename";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[11] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="supercat_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[12] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="category_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[13] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="subcat_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[14] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="feature1_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[15] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="feature2_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[16] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="feature3_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[17] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="feature4_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[18] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="catsubcat_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[19] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="individual_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[20] {
      name="foveate_box";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;2;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[21] {
      name="translate_x";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[22] {
      name="translate_y";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[23] {
      name="rotate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[24] {
      name="scale";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="RetinaData_v1in_bw";
    desc="Image and retinal data ready to be presented to the network's input layers";
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[1] {
      name="LookBox";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[2] {
      name="ImageSize";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[3] {
      name="Move";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[4] {
      name="Scale";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[5] {
      name="Rotate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[6] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 7;7;3;1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[7] {
      name="Target";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 7;7;3;1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[8] {
      name="RewTarg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[9] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="IMAGE";
	value 1 0=1;
       };
      };
      name="RetinaImage";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 144;144;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[10] {
      name="high_freq_bw_on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 144;144;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[11] {
      name="high_freq_bw_off";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 144;144;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[12] {
      name="med_freq_bw_on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 72;72;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[13] {
      name="med_freq_bw_off";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 72;72;      };
      calc_expr {
       expr=;
      };
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="V1Data_v1in_bw";
    desc="Image and retinal data ready to be presented to the network's input layers";
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[1] {
      name="LookBox";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[2] {
      name="ImageSize";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[3] {
      name="Move";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 2;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[4] {
      name="Scale";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[5] {
      name="Rotate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[6] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="IMAGE";
	value 1 0=1;
       };
      };
      name="RetinaImage";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 193;193;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[7] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 7;7;3;1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[8] {
      name="Target";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 7;7;3;1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[9] {
      name="RewTarg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[10] {
      name="V1_high";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;12;12;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[11] {
      name="V1_med";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;6;6;      };
      calc_expr {
       expr=;
      };
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="UnitNames";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 7;7;3;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7 7 3 1 1] "airplane";"helicopter";"motorcycle";"sedan";"suvanagon";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"rotor";
"wheel";"wing";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";      };
     };
     String_Data @[1] {
      name="Target";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 7;7;3;1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7 7 3 1 1] "airplane";"helicopter";"motorcycle";"sedan";"suvanagon";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"rotor";
"wheel";"wing";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";"-";"-";"-";
"-";"-";"-";"-";"-";"-";"-";      };
     };
     String_Data @[2] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1] ;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[4] {
    name="MNIST_Digits_Train";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="category";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     byte_Data @[1] {
      name="Image";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 28;28;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="oid_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file="images/digits_mnist/mnist_train_60k.dat.gz";
    keygen 4 0=0;
   };
   DataTable @[5] {
    name="MNIST_Digits_Test";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="category";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     byte_Data @[1] {
      name="Image";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 28;28;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="oid_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file="images/digits_mnist/mnist_test_10k.dat.gz";
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="train_mode";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[4] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[5] {
      name="individual";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[6] {
      name="supercat_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[7] {
      name="supercat_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[8] {
      name="category_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[9] {
      name="category_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[10] {
      name="subcat_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[11] {
      name="subcat_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[12] {
      name="feature1_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[13] {
      name="feature1_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[14] {
      name="feature2_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[15] {
      name="feature2_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[16] {
      name="feature3_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[17] {
      name="feature3_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[18] {
      name="feature4_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[19] {
      name="feature4_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[20] {
      name="max_netin";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[21] {
      name="max_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[22] {
      name="cycles_norm";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[23] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[24] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[25] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[26] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="ObjectOutputData";
    desc="results of voting procedure across fixations";
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="train_mode";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;      };
     };
     int_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;      };
     };
     String_Data @[4] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     String_Data @[5] {
      name="individual";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] "0091";"0060";"0052";"0060";"0107";"0040";"0007";"0041";"0083";"0035";
"0009";"0010";"0067";"0022";"0022";"0009";"0087";"0106";"0130";"0092";
"0068";"0077";"0079";"0064";"0045";"0038";"0056";"0031";"0049";"0087";
"0034";"0056";"0110";"0083";"0065";"0045";"0027";"0032";"0017";"0026";
"0063";"0094";"0010";"0018";"0007";"0117";"0038";"0041";"0108";"0080";
"0115";"0018";"0006";"0098";"0117";"0045";"0070";"0035";"0084";"0006";
"0017";"0009";"0091";"0075";"0053";"0030";"0083";"0034";"0100";"0107";
"0104";"0060";"0079";"0110";"0121";"0003";"0124";"0052";"0035";"0074";
"0116";"0047";"0049";"0090";"0089";"0035";"0035";"0070";"0034";"0005";
"0003";"0056";"0065";"0027";"0069";"0032";"0064";"0000";"0129";"0067";
"0110";"0129";"0068";"0034";"0036";"0052";"0038";"0056";"0058";"0052";
"0043";"0116";"0036";"0022";"0063";"0032";"0061";"0070";"0107";"0106";
"0079";"0025";"0087";"0092";"0077";"0115";"0033";"0098";"0083";"0047";
"0078";"0084";"0100";"0033";"0036";"0031";"0033";"0068";"0029";"0010";
"0084";"0101";"0017";"0059";"0062";"0101";"0124";"0130";"0075";"0117";
"0003";"0115";"0110";"0075";"0051";"0066";"0090";"0117";"0100";"0113";
"0069";"0112";"0000";"0123";"0100";"0094";"0101";"0055";"0017";"0112";
"0022";"0014";"0084";"0031";"0057";"0045";"0032";"0066";"0108";"0100";
"0044";"0080";"0049";"0030";"0026";"0059";"0080";"0067";"0026";"0034";
"0115";"0010";"0057";"0124";"0030";"0007";"0079";"0003";"0014";"0068";
"0043";"0077";"0062";"0012";"0055";      };
     };
     String_Data @[6] {
      name="supercat_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] "airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";      };
     };
     String_Data @[7] {
      name="supercat_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     float_Data @[8] {
      name="supercat_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;      };
     };
     String_Data @[9] {
      name="category_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     String_Data @[10] {
      name="category_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     float_Data @[11] {
      name="category_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;      };
     };
     String_Data @[12] {
      name="subcat_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     String_Data @[13] {
      name="subcat_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     float_Data @[14] {
      name="subcat_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;      };
     };
     String_Data @[15] {
      name="feature1_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     String_Data @[16] {
      name="feature1_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     float_Data @[17] {
      name="feature1_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;      };
     };
     String_Data @[18] {
      name="feature2_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     String_Data @[19] {
      name="feature2_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     float_Data @[20] {
      name="feature2_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;      };
     };
     String_Data @[21] {
      name="feature3_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     String_Data @[22] {
      name="feature3_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     float_Data @[23] {
      name="feature3_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;      };
     };
     String_Data @[24] {
      name="feature4_trg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     String_Data @[25] {
      name="feature4_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     float_Data @[26] {
      name="feature4_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [205] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="train_mode";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[3] {
      name="cur_lrate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[4] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[5] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[6] {
      name="supercat_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[7] {
      name="category_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[8] {
      name="subcat_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[9] {
      name="feature1_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[10] {
      name="feature2_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[11] {
      name="feature3_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[12] {
      name="feature4_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[13] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[14] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[15] {
      name="avg_send_pct";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[16] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[17] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[18] {
      name="wt_sync_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[19] {
      name="wt_sync_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[20] {
      name="apply_inputs_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[21] {
      name="xform_image_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[22] {
      name="filter_image_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="CycleOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="train_mode";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[4] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[5] {
      name="target_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     String_Data @[6] {
      name="output_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[7] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     int_Data @[8] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="ct_cycle";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[9] {
      name="send_pct";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[10] {
      name="V2_hig_maxda";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[11] {
      name="V2_hig_maxda_sum";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[12] {
      name="V2_hig_acts_avg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[13] {
      name="V4_maxda";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[14] {
      name="V4_maxda_sum";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
     float_Data @[15] {
      name="V4_acts_avg";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="GroundTruth_SelectRows";
    desc=;
    data {
     name="data";
     el_typ=DataColTp;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="presentation_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1] 489;      };
     };
     int_Data @[1] {
      name="object_id";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [1] 96;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserDataItemBase;
     el_def=0;
     UserDataItem @[0] {
      name="N_ROWS";
      value 2 0=1;
     };
     UserDataItem @[1] {
      name="SCALE_MIN";
      value 6 0=-0.8454717397689819;
     };
     UserDataItem @[2] {
      name="SCALE_MAX";
      value 6 0=0.8454717397689819;
     };
     UserDataItem @[3] {
      name="BLOCK_HEIGHT";
      value 6 0=2;
     };
    };
    name="high_v1_rf_spec_GridFilter";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      name="Filter";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;4;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [4 4 8] -0.32213023;-0.41362345;-0.41362345;-0.32213023;0.48178351;0.6186223;0.6186223;0.48178351;0.48178351;0.6186223;
0.6186223;0.48178351;-0.32213023;-0.41362345;-0.41362345;-0.32213023;0.51280457;0.32152057;-0.34445959;-0.51238638;
0.32152039;0.84547174;0.41284057;-0.34445959;-0.34445959;0.41284057;0.84547174;0.32152048;-0.51238638;-0.34445956;
0.32152057;0.51280457;-0.32213041;0.48178354;0.48178351;-0.32213023;-0.41362345;0.61862224;0.6186223;-0.41362345;
-0.41362345;0.6186223;0.6186223;-0.41362345;-0.32213023;0.48178351;0.48178342;-0.32213023;-0.51238638;-0.34445956;
0.32152039;0.51280457;-0.34445956;0.41284057;0.84547174;0.32152057;0.32152057;0.84547174;0.41284057;-0.34445959;
0.51280457;0.32152057;-0.34445959;-0.51238638;0.32213017;0.41362342;0.41362342;0.32213017;-0.48178351;-0.6186223;
-0.6186223;-0.48178351;-0.48178345;-0.61862224;-0.61862224;-0.48178345;0.32213023;0.41362363;0.41362363;0.32213023;
-0.51280457;-0.3215206;0.34445956;0.51238638;-0.32152024;-0.84547174;-0.41284063;0.34445956;0.3444595;-0.41284049;
-0.84547174;-0.3215206;0.51238638;0.34445947;-0.32152051;-0.51280457;0.32213044;-0.48178354;-0.48178351;0.32213017;
0.41362363;-0.61862206;-0.6186223;0.41362342;0.41362363;-0.61862224;-0.6186223;0.41362342;0.32213023;-0.48178345;
-0.48178342;0.32213017;0.51238638;0.34445947;-0.32152024;-0.51280457;0.34445947;-0.41284049;-0.84547174;-0.3215206;
-0.32152051;-0.84547174;-0.41284063;0.34445956;-0.51280457;-0.32152063;0.34445956;0.51238638;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserDataItem;
     el_def=0;
     UserDataItem @[0] {
      name="N_ROWS";
      value 2 0=1;
     };
     UserDataItem @[1] {
      name="BLOCK_HEIGHT";
      value 6 0=2;
     };
    };
    name="V1_high_GridFilterInput";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      name="Filter";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 96;96;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [96 96 1] 0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705193;0;
0;0;1.4643462;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705193;0;0;0;
1.4643462;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705193;0;0;0;1.4643462;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705193;0;0;0;1.4643462;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705193;0;0;0;1.4643462;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705193;0;
0;0;1.4643462;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705193;0;0;0;
1.4643462;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705193;0;0;0;1.4643462;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705193;0;0;0;1.4643462;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705193;0;0;0;1.4643462;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;1.3705193;0;0;0;1.4643463;0;0;0;
1.3705193;0;0;0;1.4643463;0;0;0;1.3705193;0;
0;0;1.4643463;0;0;0;1.3705193;0;0;0;
1.4643463;0;0;0;1.3705193;0;0;0;1.4643463;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705193;0;
0;0;1.4643462;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;1.3705193;0;0;0;
1.3705193;0;0;0;1.3705193;0;0;0;1.3705193;0;
0;0;1.3705193;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705192;0;0;0;1.4643462;0;0;0;
1.3705192;0;0;0;1.4643462;0;0;0;1.3705192;0;
0;0;1.4643462;0;0;0;1.3705192;0;0;0;
1.4643462;0;0;0;1.3705192;0;0;0;1.4643462;0;
0;0;1.3705193;0;0;0;1.4643462;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
1.4643463;0;0;0;1.4643463;0;0;0;1.4643463;0;
0;0;1.4643463;0;0;0;1.4643463;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="high_freq_bw_GraphFilter";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="X_AXIS";
	value 1 0=1;
       };
      };
      name="X";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [81] -4;-3;-2;-1;0;1;2;3;4;-4;
-3;-2;-1;0;1;2;3;4;-4;-3;
-2;-1;0;1;2;3;4;-4;-3;-2;
-1;0;1;2;3;4;-4;-3;-2;-1;
0;1;2;3;4;-4;-3;-2;-1;0;
1;2;3;4;-4;-3;-2;-1;0;1;
2;3;4;-4;-3;-2;-1;0;1;2;
3;4;-4;-3;-2;-1;0;1;2;3;
4;      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="Z_AXIS";
	value 1 0=1;
       };
      };
      name="Z";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [81] -4;-4;-4;-4;-4;-4;-4;-4;-4;-3;
-3;-3;-3;-3;-3;-3;-3;-3;-2;-2;
-2;-2;-2;-2;-2;-2;-2;-1;-1;-1;
-1;-1;-1;-1;-1;-1;0;0;0;0;
0;0;0;0;0;1;1;1;1;1;
1;1;1;1;2;2;2;2;2;2;
2;2;2;3;3;3;3;3;3;3;
3;3;4;4;4;4;4;4;4;4;
4;      };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_1";
	value 1 0=1;
       };
      };
      name="Y";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [81] 0;0;0;0;-0.006231836;0;0;0;0;0;
0;-0.0089056054;-0.012233058;-0.013308758;-0.012233058;-0.0089056054;0;0;0;-0.0089056054;
-0.014168869;-0.011789105;-0.0066205077;-0.011789105;-0.014168869;-0.0089056054;0;0;-0.012233058;-0.011789105;
0.022404492;0.055586569;0.022404492;-0.011789105;-0.012233058;0;-0.006231836;-0.013308758;-0.0066205077;0.055586569;
0.11277749;0.055586569;-0.0066205077;-0.013308758;-0.006231836;0;-0.012233058;-0.011789105;0.022404492;0.055586569;
0.022404492;-0.011789105;-0.012233058;0;0;-0.0089056054;-0.014168869;-0.011789105;-0.0066205077;-0.011789105;
-0.014168869;-0.0089056054;0;0;0;-0.0089056054;-0.012233058;-0.013308758;-0.012233058;-0.0089056054;
0;0;0;0;0;0;-0.006231836;0;0;0;
0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[3] {
   name="VisionData";
   el_typ=DataTable;
   el_def=0;
   DataTable_Group @.gp[0] {
    name="ConfigData";
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="Lesson";
     desc="Parameters for a lesson, i.e., a training/testing session";
     data {
      name="data";
      el_typ=String_Data;
      el_def=0;
      String_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.2674650549888611;
	};
       };
       name="lesson_id";
       desc="unique identifier used to select lesson as one to use";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] "veh3d_nb_lr20_nsc";"car_nb_fmvid3";"car_nb_fmvid3_veh3dcat";"veh3d_nb_lr20_nsc_occ20";"car_nb_fmvid3_occ20";"veh3d_lr20_bg10_nsc";"faces_umist";"Stirling_faces";"digits_mnist";"Stirling_veh3d";
"umist_veh3d";"creatures";"household3d_lr20_nb";       };
      };
      String_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.2614770531654358;
	};
       };
       name="description";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] "3d render studio vehicles no bkgd, L/R orient, +/-20deg, no subcats!";"cars from video with no backgrounds -- side-only, only sedan, suvanagon";"cars from video with no backgrounds -- side-only, only sedan, suvanagon -- using veh3d categories";"3d render studio vehicles no bkgd, L/R orient, +/-20deg, no subcats!";"cars from video with no backgrounds -- side-only, only sedan, suvanagon";"3d render studio vehicles, 10 bkgds (no ground), L/R orient, +/-20deg, no subcats!";"UMIST faces database";"Stirling University faces database";"MNIST digits dataset";"Merged veh3d_lr20_nb and Stirling faces. NOTE: save_weights_modulus = 10 so we can see how long we need to train with it=false";
"Merged veh3d_lr20_nb and umist faces. NOTE: save_weights_modulus = 10 so we can see how long we need to train with it=false";"Sheinberg 3d rendered creatures";"3d render studio household no bkgd, L/R orient, +/-20deg";       };
      };
      String_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.4191616773605347;
	};
       };
       name="oid_filename";
       desc="full relative path (from project) to OID file containing list of objects and other parameters";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] "images/veh3d_lr20_nb/Veh3d_nosubcat.dat";"images/car_nb_fmvid/CarNbFmVidFix3.dat";"images/car_nb_fmvid/CarNbFmVidFix3_veh3dcat.dat";"images/veh3d_lr20_nb/Veh3d_nosubcat.dat";"images/car_nb_fmvid/CarNbFmVidFix3.dat";"images/veh3d_lr20_bg10/Veh3d_nosubcat.dat";"images/faces_umist/faces_umist_oid.dat";"images/Stirling_faces/Stirling_faces_oid.dat";"DATA:MNIST_Digits_Train,TEST:MNIST_Digits_Test";"images/Stirling_faces_veh3d_lr20_nb_oid.dat";
"images/faces_umist_veh3d_lr20_nb_oid.dat";"images/creatures/train/creatures_train_oid.dat";"images/household3d_lr20_nb/household3d_lr20_nb.dat";       };
      };
      String_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.2614770531654358;
	};
       };
       name="weights_filename";
       desc="full relative path (from project) to a weights file to load at start of training";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] ;;;;;;;;;;
;;;       };
      };
      byte_Data @[4] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.113772451877594;
	};
       };
       name="load_specs";
       desc="load specs in addition to weights (generally a good idea because specs contain adapting connection spec params to maintain target relative netinput values)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 1;1;1;1;1;1;1;1;1;1;
1;1;1;       };
      };
      byte_Data @[5] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.113772451877594;
	};
       };
       name="new_seed";
       desc="use a new random seed to get new weights and a new random split of testing and training";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 0;0;0;0;0;0;0;0;0;0;
0;0;0;       };
      };
      int_Data @[6] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1417165696620941;
	};
       };
       name="epoch_trials";
       desc="number of individual object/image presentations per epoch of training";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 500;500;500;500;500;500;500;500;500;500;
500;500;500;       };
      };
      int_Data @[7] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1177644729614258;
	};
       };
       name="train_size";
       desc="number of items to include in the training set: set to -1 to include all the remainder after the specified number of testing items is taken out (note: train_size and test_size cannot both be -1!)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] -1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;       };
      };
      int_Data @[8] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.08782435208559036;
	};
       };
       name="test_size";
       desc="number of items to include in the testing set: set to -1 to include all the remainder after the specified number of training items is taken out (note: train_size and test_size cannot both be -1!)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 10;5;5;5;5;5;5;5;5;5;
5;5;2;       };
      };
      int_Data @[9] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1676646769046783;
	};
       };
       name="split_on_indivs";
       desc="perform train/test split in terms of individual objects within category+subcat, not individual images (can be multiple images per individual object)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 1;1;1;1;1;1;0;0;0;0;
0;1;1;       };
      };
      int_Data @[10] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1497005969285965;
	};
       };
       name="test_modulus";
       desc="how frequently (in terms of epochs) to run the test during training -- note this test is restricted to be no more than epoch_trials items, even if there are more total to test -- see test_final";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 20;20;20;20;20;20;20;20;50;20;
20;20;20;       };
      };
      byte_Data @[11] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1257485002279282;
	};
       };
       name="test_final";
       desc="run a final test at the end of all training, which tests the entire set of testing items, regardless of number";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 0;0;0;0;0;0;1;1;1;1;
1;0;1;       };
      };
      int_Data @[12] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1417165696620941;
	};
       };
       name="train_nreps";
       desc="number of repetitions per image with different transform params to run during training -- the response for each such transform acts as an individual vote, and a weighted majority rule is used to decide networks overall output -- this is like making multiple saccades to an object, and integrating over them -- typically improves accuracy significantly, but costs in time, so typically just used in testing and not training.";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 1;1;1;1;1;1;1;1;1;1;
1;1;1;       };
      };
      int_Data @[13] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1417165696620941;
	};
       };
       name="test_nreps";
       desc="number of repetitions per image with different transform params to run during testing -- the response for each such transform acts as an individual vote, and a weighted majority rule is used to decide networks overall output -- this is like making multiple saccades to an object, and integrating over them -- typically improves accuracy significantly, but costs in time, so typically just used in testing and not training.";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 7;7;7;7;7;7;7;7;7;7;
7;7;7;       };
      };
      int_Data @[14] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1536926180124283;
	};
       };
       name="train_epochs";
       desc="total number of epochs to train for";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 5;350;350;350;350;350;350;350;350;350;
350;350;350;       };
      };
      int_Data @[15] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1497005969285965;
	};
       };
       name="lrs_step_epochs";
       desc="how many epochs per given step in the lrate schedule: each step drops the lrate roughly in half (log scale)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 50;50;50;50;50;50;50;50;50;50;
50;50;50;       };
      };
      int_Data @[16] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1996008008718491;
	};
       };
       name="self_org_epochs";
       desc="number of epochs to run before activating the output layer and setting mvl_mix = err_mvl_mix (starts out at 1 = fully self organizing BCM)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 0;0;0;0;0;0;0;0;0;0;
0;0;0;       };
      };
      float_Data @[17] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1996008008718491;
	};
       };
       name="err_mvl_mix";
       desc="conspec.xcal.mvl_mix value when in error-driven (non self-organizing) learning mode (is 1.0 in self org) -- NOTE: overrides conspec setting";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 0.0049999999;0.0049999999;0.0049999999;0.0049999999;0.0049999999;0.0049999999;0.0049999999;0.0049999999;0.0049999999;0.0049999999;
0.0049999999;0.0049999999;0.0049999999;       };
      };
      int_Data @[18] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.2335329353809357;
	};
       };
       name="save_weights_modulus";
       desc="how frequently (in epochs) to save the weights -- useful for checkpointing during long training runs";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] 50000;50;50;50;50;50;50;50;50;10;
10;50;50;       };
      };
      String_Data @[19] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1836327314376831;
	};
       };
       name="train_transform_id";
       desc="transform_id of the transform params in Transform data table to use during training";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] "vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"faces_umist";"faces_umist";"digits_mnist";"faces_umist";
"faces_umist";"faces_umist";"vehicle";       };
      };
      String_Data @[20] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.2714570760726929;
	};
       };
       name="test_transform_id";
       desc="transform_id of the transform params in Transform data table to use during testing";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] "vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"faces_umist";"faces_umist";"digits_mnist";"faces_umist";
"faces_umist";"faces_umist";"vehicle";       };
      };
      String_Data @[21] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.2714570760726929;
	};
       };
       name="train_occlusion_id";
       desc="occlusion parameters for training (no occlusion if blank) -- if specified, renders an opaque occluder over the image in a specified location";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] ;;;"occlude_20";"occlude_20";;;;;;
;;;       };
      };
      String_Data @[22] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.2714570760726929;
	};
       };
       name="test_occlusion_id";
       desc="occlusion parameters for testing (no occlusion if blank) -- if specified, renders an opaque occluder over the image in a specified location";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [13] ;;;"occlude_20";"occlude_20";;;;;;
;;;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[1] {
     name="Transform";
     desc="Ranges of transformation for training or testing - this needs to be adapted for retinal vs. image coordinate frame";
     data {
      name="data";
      el_typ=double_Data;
      el_def=0;
      String_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1538461595773697;
	};
       };
       name="transform_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [17] "std_train";"identity";"caltech_train";"caltech_test";"urgent_train_1";"caltech_train_fov";"caltech_test_fov";"caltech_train_nomv";"caltech_test_nomv";"tarr_objects";
"test_target";"itti_popout";"stim_gen";"tobj_90rot";"vehicle";"faces_umist";"digits_mnist";       };
      };
      String_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.201048955321312;
	};
       };
       name="description";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [17] "Standard Training Range";"Identity";"standard caltech training";"standard caltech testing";"Standard Urgent Training Range";"standard caltech training";"standard caltech testing";"no move";"no move";;
;;;;"3d and other vehicle tests: object is most of image -- uses foveate";"faces: not as zoomed in as vehicle";"digits -- not too much xform";       };
      };
      double_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1346153914928436;
	};
       };
       name="x_translate";
       desc="maximum amount as a proportion (0-1) to translate image in horizontal dimension";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [17] 0;0;0.15;0;0.15;0.15;0;0;0;0.25;
0.9;0;0;0.25;0.15;0.15;0.05;       };
      };
      double_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1311188787221909;
	};
       };
       name="y_translate";
       desc="maximum amount as a proportion (0-1) to translate image in horizontal dimension";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [17] 0;0;0.15;0;0.15;0.15;0;0;0;0.25;
0.9;0;0;0.25;0.15;0.15;0.05;       };
      };
      double_Data @[4] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.07692307978868484;
	};
       };
       name="min_scale";
       desc="minimum scaling factor";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [17] 0.75;1;0.35;0.425;0.8;0.8;1;0.35;0.425;0.08;
0.4;0.25;1;0.15;1;0.9;0.85;       };
      };
      double_Data @[5] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.09440559148788452;
	};
       };
       name="max_scale";
       desc="maximum scaling factor";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [17] 1.25;1;0.5;0.425;1.2;1.2;1;0.5;0.425;0.16;
0.5;0.25;1;0.3;1.2;1.1;0.95;       };
      };
      double_Data @[6] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.07692307978868484;
	};
       };
       name="rotate";
       desc="in normalized units where 1=360, so .01 = 3.6, .02 = 7.2, etc -- this is the \"half range\" -- + rotate and -rotate around 0";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [17] 0.02;0;0.01;0;0.02;0.01;0;0.01;0;0.01;
0;0;0;0.25;0.02;0.02;0.01;       };
      };
      byte_Data @[7] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.06468531489372253;
	};
       };
       name="foveate";
       desc="automatically zoom image to foveate box (full image by default) -- scaling parameter is then applied *after* this foveation step: e.g., 1.0 scale = full image foveated";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [17] 1;1;0;0;1;1;1;0;0;0;
0;0;0;0;1;1;1;       };
      };
      int_Data @[8] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.104895107448101;
	};
       };
       name="renorm";
       desc="renormalization to perform on filtered output values (0=no renorm, 1= linear renorm, 2 = log renorm)  -- 1 (linear) is default";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [17] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;2;2;2;       };
      };
      int_Data @[9] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.104895107448101;
	};
       };
       name="fade_width";
       desc="width of the fade to border framing around image -- -1 = default, 0 = none";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [17] -1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;       };
      };
      int_Data @[10] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.104895107448101;
	};
       };
       name="attention_mod";
       desc="not currently supported, but would provide a modulation of filter output values simulating attention, centered in fovea.";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [17] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[2] {
     name="ActiveLesson";
     desc="One record: parameters for current session";
     data {
      name="data";
      el_typ=String_Data;
      el_def=0;
      String_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.2674650549888611;
	};
       };
       name="lesson_id";
       desc="unique identifier used to select lesson as one to use";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] "veh3d_nb_lr20_nsc";       };
      };
      String_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.2614770531654358;
	};
       };
       name="description";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] "3d render studio vehicles no bkgd, L/R orient, +/-20deg, no subcats!";       };
      };
      String_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.4191616773605347;
	};
       };
       name="oid_filename";
       desc="full relative path (from project) to OID file containing list of objects and other parameters";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] "images/veh3d_lr20_nb/Veh3d_nosubcat.dat";       };
      };
      String_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.2614770531654358;
	};
       };
       name="weights_filename";
       desc="full relative path (from project) to a weights file to load at start of training";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] ;       };
      };
      byte_Data @[4] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.113772451877594;
	};
       };
       name="load_specs";
       desc="load specs in addition to weights (generally a good idea because specs contain adapting connection spec params to maintain target relative netinput values)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 1;       };
      };
      byte_Data @[5] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.113772451877594;
	};
       };
       name="new_seed";
       desc="use a new random seed to get new weights and a new random split of testing and training";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 0;       };
      };
      int_Data @[6] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1417165696620941;
	};
       };
       name="epoch_trials";
       desc="number of individual object/image presentations per epoch of training";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 500;       };
      };
      int_Data @[7] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1177644729614258;
	};
       };
       name="train_size";
       desc="number of items to include in the training set: set to -1 to include all the remainder after the specified number of testing items is taken out (note: train_size and test_size cannot both be -1!)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] -1;       };
      };
      int_Data @[8] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.08782435208559036;
	};
       };
       name="test_size";
       desc="number of items to include in the testing set: set to -1 to include all the remainder after the specified number of training items is taken out (note: train_size and test_size cannot both be -1!)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 10;       };
      };
      int_Data @[9] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1676646769046783;
	};
       };
       name="split_on_indivs";
       desc="perform train/test split in terms of individual objects within category+subcat, not individual images (can be multiple images per individual object)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 1;       };
      };
      int_Data @[10] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1497005969285965;
	};
       };
       name="test_modulus";
       desc="how frequently (in terms of epochs) to run the test during training -- note this test is restricted to be no more than epoch_trials items, even if there are more total to test -- see test_final";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 20;       };
      };
      byte_Data @[11] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1257485002279282;
	};
       };
       name="test_final";
       desc="run a final test at the end of all training, which tests the entire set of testing items, regardless of number";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 1;       };
      };
      int_Data @[12] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1417165696620941;
	};
       };
       name="train_nreps";
       desc="number of repetitions per image with different transform params to run during training -- the response for each such transform acts as an individual vote, and a weighted majority rule is used to decide networks overall output -- this is like making multiple saccades to an object, and integrating over them -- typically improves accuracy significantly, but costs in time, so typically just used in testing and not training.";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 1;       };
      };
      int_Data @[13] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1417165696620941;
	};
       };
       name="test_nreps";
       desc="number of repetitions per image with different transform params to run during testing -- the response for each such transform acts as an individual vote, and a weighted majority rule is used to decide networks overall output -- this is like making multiple saccades to an object, and integrating over them -- typically improves accuracy significantly, but costs in time, so typically just used in testing and not training.";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 7;       };
      };
      int_Data @[14] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1536926180124283;
	};
       };
       name="train_epochs";
       desc="total number of epochs to train for";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 350;       };
      };
      int_Data @[15] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1497005969285965;
	};
       };
       name="lrs_step_epochs";
       desc="how many epochs per given step in the lrate schedule: each step drops the lrate roughly in half (log scale)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 50;       };
      };
      int_Data @[16] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1996008008718491;
	};
       };
       name="self_org_epochs";
       desc="number of epochs to run before activating the output layer and setting mvl_mix = err_mvl_mix (starts out at 1 = fully self organizing BCM)";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 0;       };
      };
      float_Data @[17] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1996008008718491;
	};
       };
       name="err_mvl_mix";
       desc="conspec.xcal.mvl_mix value when in error-driven (non self-organizing) learning mode (is 1.0 in self org) -- NOTE: overrides conspec setting";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 0.0049999999;       };
      };
      int_Data @[18] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.2335329353809357;
	};
       };
       name="save_weights_modulus";
       desc="how frequently (in epochs) to save the weights -- useful for checkpointing during long training runs";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 50;       };
      };
      String_Data @[19] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1836327314376831;
	};
       };
       name="train_transform_id";
       desc="transform_id of the transform params in Transform data table to use during training";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] "vehicle";       };
      };
      String_Data @[20] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.2714570760726929;
	};
       };
       name="test_transform_id";
       desc="transform_id of the transform params in Transform data table to use during testing";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] "vehicle";       };
      };
      String_Data @[21] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.2714570760726929;
	};
       };
       name="train_occlusion_id";
       desc="occlusion parameters for training (no occlusion if blank) -- if specified, renders an opaque occluder over the image in a specified location";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] ;       };
      };
      String_Data @[22] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.2714570760726929;
	};
       };
       name="test_occlusion_id";
       desc="occlusion parameters for testing (no occlusion if blank) -- if specified, renders an opaque occluder over the image in a specified location";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] ;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[3] {
     name="Occlusion";
     desc="parameters for occulsion, if it is being used";
     data {
      name="data";
      el_typ=String_Data;
      el_def=0;
      String_Data @[0] {
       name="occlusion_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] "occlude_10";"occlude_20";"occlude_30";"occlude_40";       };
      };
      float_Data @[1] {
       name="occlude_box";
       desc="ll, ur coordinates of occluder box";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 2;2;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [2 2 4] 0.44999999;0;0.55000001;1;0.40000001;0;0.60000002;1;0.34999999;0;
0.64999998;1;0.30000001;0;0.69999999;1;       };
      };
      float_Data @[2] {
       name="occlude_p";
       desc="probability of occulding";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0.2;0.2;0.2;0.2;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   DataTable_Group @.gp[1] {
    name="SourceData";
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="ObjectImageData";
     desc="full object image data";
     data {
      name="data";
      el_typ=String_Data;
      el_def=0;
      String_Data @[0] {
       name="supercat";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] "vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";"vehicle";
       };
      };
      String_Data @[1] {
       name="category";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] "airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
       };
      };
      String_Data @[2] {
       name="subcat";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
       };
      };
      String_Data @[3] {
       name="feature1";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] "wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";"wing";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";"rotor";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";"wheel";
       };
      };
      String_Data @[4] {
       name="feature2";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
       };
      };
      String_Data @[5] {
       name="feature3";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
       };
      };
      String_Data @[6] {
       name="feature4";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
       };
      };
      String_Data @[7] {
       name="individual";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] "0000";"0000";"0000";"0000";"0000";"0000";"0000";"0000";"0000";"0000";
"0001";"0001";"0001";"0001";"0001";"0001";"0001";"0001";"0001";"0001";
"0002";"0002";"0002";"0002";"0002";"0002";"0002";"0002";"0002";"0002";
"0003";"0003";"0003";"0003";"0003";"0003";"0003";"0003";"0003";"0003";
"0004";"0004";"0004";"0004";"0004";"0004";"0004";"0004";"0004";"0004";
"0005";"0005";"0005";"0005";"0005";"0005";"0005";"0005";"0005";"0005";
"0006";"0006";"0006";"0006";"0006";"0006";"0006";"0006";"0006";"0006";
"0007";"0007";"0007";"0007";"0007";"0007";"0007";"0007";"0007";"0007";
"0008";"0008";"0008";"0008";"0008";"0008";"0008";"0008";"0008";"0008";
"0009";"0009";"0009";"0009";"0009";"0009";"0009";"0009";"0009";"0009";
"0010";"0010";"0010";"0010";"0010";"0010";"0010";"0010";"0010";"0010";
"0011";"0011";"0011";"0011";"0011";"0011";"0011";"0011";"0011";"0011";
"0012";"0012";"0012";"0012";"0012";"0012";"0012";"0012";"0012";"0012";
"0013";"0013";"0013";"0013";"0013";"0013";"0013";"0013";"0013";"0013";
"0014";"0014";"0014";"0014";"0014";"0014";"0014";"0014";"0014";"0014";
"0015";"0015";"0015";"0015";"0015";"0015";"0015";"0015";"0015";"0015";
"0016";"0016";"0016";"0016";"0016";"0016";"0016";"0016";"0016";"0016";
"0017";"0017";"0017";"0017";"0017";"0017";"0017";"0017";"0017";"0017";
"0018";"0018";"0018";"0018";"0018";"0018";"0018";"0018";"0018";"0018";
"0019";"0019";"0019";"0019";"0019";"0019";"0019";"0019";"0019";"0019";
"0020";"0020";"0020";"0020";"0020";"0020";"0020";"0020";"0020";"0020";
"0093";"0093";"0093";"0093";"0093";"0093";"0093";"0093";"0093";"0093";
"0094";"0094";"0094";"0094";"0094";"0094";"0094";"0094";"0094";"0094";
"0095";"0095";"0095";"0095";"0095";"0095";"0095";"0095";"0095";"0095";
"0096";"0096";"0096";"0096";"0096";"0096";"0096";"0096";"0096";"0096";
"0097";"0097";"0097";"0097";"0097";"0097";"0097";"0097";"0097";"0097";
"0098";"0098";"0098";"0098";"0098";"0098";"0098";"0098";"0098";"0098";
"0099";"0099";"0099";"0099";"0099";"0099";"0099";"0099";"0099";"0099";
"0100";"0100";"0100";"0100";"0100";"0100";"0100";"0100";"0100";"0100";
"0101";"0101";"0101";"0101";"0101";"0101";"0101";"0101";"0101";"0101";
"0102";"0102";"0102";"0102";"0102";"0102";"0102";"0102";"0102";"0102";
"0103";"0103";"0103";"0103";"0103";"0103";"0103";"0103";"0103";"0103";
"0104";"0104";"0104";"0104";"0104";"0104";"0104";"0104";"0104";"0104";
"0105";"0105";"0105";"0105";"0105";"0105";"0105";"0105";"0105";"0105";
"0106";"0106";"0106";"0106";"0106";"0106";"0106";"0106";"0106";"0106";
"0107";"0107";"0107";"0107";"0107";"0107";"0107";"0107";"0107";"0107";
"0108";"0108";"0108";"0108";"0108";"0108";"0108";"0108";"0108";"0108";
"0109";"0109";"0109";"0109";"0109";"0109";"0109";"0109";"0109";"0109";
"0110";"0110";"0110";"0110";"0110";"0110";"0110";"0110";"0110";"0110";
"0111";"0111";"0111";"0111";"0111";"0111";"0111";"0111";"0111";"0111";
"0112";"0112";"0112";"0112";"0112";"0112";"0112";"0112";"0112";"0112";
"0113";"0113";"0113";"0113";"0113";"0113";"0113";"0113";"0113";"0113";
"0114";"0114";"0114";"0114";"0114";"0114";"0114";"0114";"0114";"0114";
"0115";"0115";"0115";"0115";"0115";"0115";"0115";"0115";"0115";"0115";
"0116";"0116";"0116";"0116";"0116";"0116";"0116";"0116";"0116";"0116";
"0117";"0117";"0117";"0117";"0117";"0117";"0117";"0117";"0117";"0117";
"0118";"0118";"0118";"0118";"0118";"0118";"0118";"0118";"0118";"0118";
"0119";"0119";"0119";"0119";"0119";"0119";"0119";"0119";"0119";"0119";
"0120";"0120";"0120";"0120";"0120";"0120";"0120";"0120";"0120";"0120";
"0121";"0121";"0121";"0121";"0121";"0121";"0121";"0121";"0121";"0121";
"0122";"0122";"0122";"0122";"0122";"0122";"0122";"0122";"0122";"0122";
"0123";"0123";"0123";"0123";"0123";"0123";"0123";"0123";"0123";"0123";
"0124";"0124";"0124";"0124";"0124";"0124";"0124";"0124";"0124";"0124";
"0125";"0125";"0125";"0125";"0125";"0125";"0125";"0125";"0125";"0125";
"0126";"0126";"0126";"0126";"0126";"0126";"0126";"0126";"0126";"0126";
"0127";"0127";"0127";"0127";"0127";"0127";"0127";"0127";"0127";"0127";
"0128";"0128";"0128";"0128";"0128";"0128";"0128";"0128";"0128";"0128";
"0129";"0129";"0129";"0129";"0129";"0129";"0129";"0129";"0129";"0129";
"0130";"0130";"0130";"0130";"0130";"0130";"0130";"0130";"0130";"0130";
"0131";"0131";"0131";"0131";"0131";"0131";"0131";"0131";"0131";"0131";
"0021";"0021";"0021";"0021";"0021";"0021";"0021";"0021";"0021";"0021";
"0022";"0022";"0022";"0022";"0022";"0022";"0022";"0022";"0022";"0022";
"0023";"0023";"0023";"0023";"0023";"0023";"0023";"0023";"0023";"0023";
"0024";"0024";"0024";"0024";"0024";"0024";"0024";"0024";"0024";"0024";
"0025";"0025";"0025";"0025";"0025";"0025";"0025";"0025";"0025";"0025";
"0026";"0026";"0026";"0026";"0026";"0026";"0026";"0026";"0026";"0026";
"0027";"0027";"0027";"0027";"0027";"0027";"0027";"0027";"0027";"0027";
"0036";"0036";"0036";"0036";"0036";"0036";"0036";"0036";"0036";"0036";
"0037";"0037";"0037";"0037";"0037";"0037";"0037";"0037";"0037";"0037";
"0038";"0038";"0038";"0038";"0038";"0038";"0038";"0038";"0038";"0038";
"0039";"0039";"0039";"0039";"0039";"0039";"0039";"0039";"0039";"0039";
"0040";"0040";"0040";"0040";"0040";"0040";"0040";"0040";"0040";"0040";
"0041";"0041";"0041";"0041";"0041";"0041";"0041";"0041";"0041";"0041";
"0042";"0042";"0042";"0042";"0042";"0042";"0042";"0042";"0042";"0042";
"0043";"0043";"0043";"0043";"0043";"0043";"0043";"0043";"0043";"0043";
"0044";"0044";"0044";"0044";"0044";"0044";"0044";"0044";"0044";"0044";
"0045";"0045";"0045";"0045";"0045";"0045";"0045";"0045";"0045";"0045";
"0046";"0046";"0046";"0046";"0046";"0046";"0046";"0046";"0046";"0046";
"0047";"0047";"0047";"0047";"0047";"0047";"0047";"0047";"0047";"0047";
"0048";"0048";"0048";"0048";"0048";"0048";"0048";"0048";"0048";"0048";
"0049";"0049";"0049";"0049";"0049";"0049";"0049";"0049";"0049";"0049";
"0050";"0050";"0050";"0050";"0050";"0050";"0050";"0050";"0050";"0050";
"0051";"0051";"0051";"0051";"0051";"0051";"0051";"0051";"0051";"0051";
"0052";"0052";"0052";"0052";"0052";"0052";"0052";"0052";"0052";"0052";
"0053";"0053";"0053";"0053";"0053";"0053";"0053";"0053";"0053";"0053";
"0054";"0054";"0054";"0054";"0054";"0054";"0054";"0054";"0054";"0054";
"0055";"0055";"0055";"0055";"0055";"0055";"0055";"0055";"0055";"0055";
"0056";"0056";"0056";"0056";"0056";"0056";"0056";"0056";"0056";"0056";
"0057";"0057";"0057";"0057";"0057";"0057";"0057";"0057";"0057";"0057";
"0058";"0058";"0058";"0058";"0058";"0058";"0058";"0058";"0058";"0058";
"0059";"0059";"0059";"0059";"0059";"0059";"0059";"0059";"0059";"0059";
"0028";"0028";"0028";"0028";"0028";"0028";"0028";"0028";"0028";"0028";
"0029";"0029";"0029";"0029";"0029";"0029";"0029";"0029";"0029";"0029";
"0030";"0030";"0030";"0030";"0030";"0030";"0030";"0030";"0030";"0030";
"0031";"0031";"0031";"0031";"0031";"0031";"0031";"0031";"0031";"0031";
"0032";"0032";"0032";"0032";"0032";"0032";"0032";"0032";"0032";"0032";
"0033";"0033";"0033";"0033";"0033";"0033";"0033";"0033";"0033";"0033";
"0034";"0034";"0034";"0034";"0034";"0034";"0034";"0034";"0034";"0034";
"0035";"0035";"0035";"0035";"0035";"0035";"0035";"0035";"0035";"0035";
"0060";"0060";"0060";"0060";"0060";"0060";"0060";"0060";"0060";"0060";
"0061";"0061";"0061";"0061";"0061";"0061";"0061";"0061";"0061";"0061";
"0062";"0062";"0062";"0062";"0062";"0062";"0062";"0062";"0062";"0062";
"0063";"0063";"0063";"0063";"0063";"0063";"0063";"0063";"0063";"0063";
"0064";"0064";"0064";"0064";"0064";"0064";"0064";"0064";"0064";"0064";
"0065";"0065";"0065";"0065";"0065";"0065";"0065";"0065";"0065";"0065";
"0066";"0066";"0066";"0066";"0066";"0066";"0066";"0066";"0066";"0066";
"0067";"0067";"0067";"0067";"0067";"0067";"0067";"0067";"0067";"0067";
"0068";"0068";"0068";"0068";"0068";"0068";"0068";"0068";"0068";"0068";
"0069";"0069";"0069";"0069";"0069";"0069";"0069";"0069";"0069";"0069";
"0070";"0070";"0070";"0070";"0070";"0070";"0070";"0070";"0070";"0070";
"0071";"0071";"0071";"0071";"0071";"0071";"0071";"0071";"0071";"0071";
"0072";"0072";"0072";"0072";"0072";"0072";"0072";"0072";"0072";"0072";
"0073";"0073";"0073";"0073";"0073";"0073";"0073";"0073";"0073";"0073";
"0074";"0074";"0074";"0074";"0074";"0074";"0074";"0074";"0074";"0074";
"0075";"0075";"0075";"0075";"0075";"0075";"0075";"0075";"0075";"0075";
"0076";"0076";"0076";"0076";"0076";"0076";"0076";"0076";"0076";"0076";
"0077";"0077";"0077";"0077";"0077";"0077";"0077";"0077";"0077";"0077";
"0078";"0078";"0078";"0078";"0078";"0078";"0078";"0078";"0078";"0078";
"0079";"0079";"0079";"0079";"0079";"0079";"0079";"0079";"0079";"0079";
"0080";"0080";"0080";"0080";"0080";"0080";"0080";"0080";"0080";"0080";
"0081";"0081";"0081";"0081";"0081";"0081";"0081";"0081";"0081";"0081";
"0082";"0082";"0082";"0082";"0082";"0082";"0082";"0082";"0082";"0082";
"0083";"0083";"0083";"0083";"0083";"0083";"0083";"0083";"0083";"0083";
"0084";"0084";"0084";"0084";"0084";"0084";"0084";"0084";"0084";"0084";
"0085";"0085";"0085";"0085";"0085";"0085";"0085";"0085";"0085";"0085";
"0086";"0086";"0086";"0086";"0086";"0086";"0086";"0086";"0086";"0086";
"0087";"0087";"0087";"0087";"0087";"0087";"0087";"0087";"0087";"0087";
"0088";"0088";"0088";"0088";"0088";"0088";"0088";"0088";"0088";"0088";
"0089";"0089";"0089";"0089";"0089";"0089";"0089";"0089";"0089";"0089";
"0090";"0090";"0090";"0090";"0090";"0090";"0090";"0090";"0090";"0090";
"0091";"0091";"0091";"0091";"0091";"0091";"0091";"0091";"0091";"0091";
"0092";"0092";"0092";"0092";"0092";"0092";"0092";"0092";"0092";"0092";
       };
      };
      String_Data @[8] {
       name="ctrlflags";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
       };
      };
      String_Data @[9] {
       name="filename";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] "airplane_airliner_001_00004.jpg";"airplane_airliner_001_00005.jpg";"airplane_airliner_001_00001.jpg";"airplane_airliner_001_00002.jpg";"airplane_airliner_001_00007.jpg";"airplane_airliner_001_00003.jpg";"airplane_airliner_001_00010.jpg";"airplane_airliner_001_00008.jpg";"airplane_airliner_001_00006.jpg";"airplane_airliner_001_00009.jpg";
"airplane_airliner_002_00015.jpg";"airplane_airliner_002_00020.jpg";"airplane_airliner_002_00012.jpg";"airplane_airliner_002_00013.jpg";"airplane_airliner_002_00016.jpg";"airplane_airliner_002_00019.jpg";"airplane_airliner_002_00011.jpg";"airplane_airliner_002_00018.jpg";"airplane_airliner_002_00017.jpg";"airplane_airliner_002_00014.jpg";
"airplane_airliner_003_00022.jpg";"airplane_airliner_003_00027.jpg";"airplane_airliner_003_00030.jpg";"airplane_airliner_003_00028.jpg";"airplane_airliner_003_00025.jpg";"airplane_airliner_003_00029.jpg";"airplane_airliner_003_00024.jpg";"airplane_airliner_003_00021.jpg";"airplane_airliner_003_00026.jpg";"airplane_airliner_003_00023.jpg";
"airplane_airliner_004_00040.jpg";"airplane_airliner_004_00037.jpg";"airplane_airliner_004_00035.jpg";"airplane_airliner_004_00033.jpg";"airplane_airliner_004_00036.jpg";"airplane_airliner_004_00039.jpg";"airplane_airliner_004_00032.jpg";"airplane_airliner_004_00031.jpg";"airplane_airliner_004_00038.jpg";"airplane_airliner_004_00034.jpg";
"airplane_airliner_005_00044.jpg";"airplane_airliner_005_00049.jpg";"airplane_airliner_005_00042.jpg";"airplane_airliner_005_00041.jpg";"airplane_airliner_005_00045.jpg";"airplane_airliner_005_00050.jpg";"airplane_airliner_005_00043.jpg";"airplane_airliner_005_00048.jpg";"airplane_airliner_005_00046.jpg";"airplane_airliner_005_00047.jpg";
"airplane_airliner_006_00053.jpg";"airplane_airliner_006_00060.jpg";"airplane_airliner_006_00051.jpg";"airplane_airliner_006_00054.jpg";"airplane_airliner_006_00052.jpg";"airplane_airliner_006_00059.jpg";"airplane_airliner_006_00055.jpg";"airplane_airliner_006_00058.jpg";"airplane_airliner_006_00056.jpg";"airplane_airliner_006_00057.jpg";
"airplane_fighter_001_00068.jpg";"airplane_fighter_001_00067.jpg";"airplane_fighter_001_00069.jpg";"airplane_fighter_001_00064.jpg";"airplane_fighter_001_00063.jpg";"airplane_fighter_001_00062.jpg";"airplane_fighter_001_00061.jpg";"airplane_fighter_001_00065.jpg";"airplane_fighter_001_00070.jpg";"airplane_fighter_001_00066.jpg";
"airplane_fighter_002_00078.jpg";"airplane_fighter_002_00080.jpg";"airplane_fighter_002_00079.jpg";"airplane_fighter_002_00074.jpg";"airplane_fighter_002_00071.jpg";"airplane_fighter_002_00072.jpg";"airplane_fighter_002_00073.jpg";"airplane_fighter_002_00075.jpg";"airplane_fighter_002_00076.jpg";"airplane_fighter_002_00077.jpg";
"airplane_fighter_003_00081.jpg";"airplane_fighter_003_00083.jpg";"airplane_fighter_003_00082.jpg";"airplane_fighter_003_00084.jpg";"airplane_fighter_003_00089.jpg";"airplane_fighter_003_00090.jpg";"airplane_fighter_003_00088.jpg";"airplane_fighter_003_00085.jpg";"airplane_fighter_003_00087.jpg";"airplane_fighter_003_00086.jpg";
"airplane_fighter_004_00092.jpg";"airplane_fighter_004_00096.jpg";"airplane_fighter_004_00094.jpg";"airplane_fighter_004_00091.jpg";"airplane_fighter_004_00093.jpg";"airplane_fighter_004_00100.jpg";"airplane_fighter_004_00098.jpg";"airplane_fighter_004_00095.jpg";"airplane_fighter_004_00099.jpg";"airplane_fighter_004_00097.jpg";
"airplane_fighter_005_00107.jpg";"airplane_fighter_005_00110.jpg";"airplane_fighter_005_00109.jpg";"airplane_fighter_005_00108.jpg";"airplane_fighter_005_00102.jpg";"airplane_fighter_005_00105.jpg";"airplane_fighter_005_00104.jpg";"airplane_fighter_005_00106.jpg";"airplane_fighter_005_00101.jpg";"airplane_fighter_005_00103.jpg";
"airplane_prop_001_00120.jpg";"airplane_prop_001_00116.jpg";"airplane_prop_001_00117.jpg";"airplane_prop_001_00118.jpg";"airplane_prop_001_00119.jpg";"airplane_prop_001_00112.jpg";"airplane_prop_001_00115.jpg";"airplane_prop_001_00111.jpg";"airplane_prop_001_00113.jpg";"airplane_prop_001_00114.jpg";
"airplane_prop_002_00127.jpg";"airplane_prop_002_00125.jpg";"airplane_prop_002_00130.jpg";"airplane_prop_002_00121.jpg";"airplane_prop_002_00128.jpg";"airplane_prop_002_00122.jpg";"airplane_prop_002_00129.jpg";"airplane_prop_002_00124.jpg";"airplane_prop_002_00123.jpg";"airplane_prop_002_00126.jpg";
"airplane_prop_003_00135.jpg";"airplane_prop_003_00136.jpg";"airplane_prop_003_00132.jpg";"airplane_prop_003_00131.jpg";"airplane_prop_003_00138.jpg";"airplane_prop_003_00139.jpg";"airplane_prop_003_00134.jpg";"airplane_prop_003_00140.jpg";"airplane_prop_003_00137.jpg";"airplane_prop_003_00133.jpg";
"airplane_prop_004_00150.jpg";"airplane_prop_004_00144.jpg";"airplane_prop_004_00149.jpg";"airplane_prop_004_00148.jpg";"airplane_prop_004_00145.jpg";"airplane_prop_004_00142.jpg";"airplane_prop_004_00141.jpg";"airplane_prop_004_00143.jpg";"airplane_prop_004_00147.jpg";"airplane_prop_004_00146.jpg";
"airplane_prop_005_00158.jpg";"airplane_prop_005_00151.jpg";"airplane_prop_005_00155.jpg";"airplane_prop_005_00157.jpg";"airplane_prop_005_00154.jpg";"airplane_prop_005_00156.jpg";"airplane_prop_005_00153.jpg";"airplane_prop_005_00159.jpg";"airplane_prop_005_00160.jpg";"airplane_prop_005_00152.jpg";
"airplane_prop_006_00167.jpg";"airplane_prop_006_00166.jpg";"airplane_prop_006_00161.jpg";"airplane_prop_006_00164.jpg";"airplane_prop_006_00165.jpg";"airplane_prop_006_00169.jpg";"airplane_prop_006_00170.jpg";"airplane_prop_006_00168.jpg";"airplane_prop_006_00163.jpg";"airplane_prop_006_00162.jpg";
"airplane_prop_007_00180.jpg";"airplane_prop_007_00175.jpg";"airplane_prop_007_00179.jpg";"airplane_prop_007_00176.jpg";"airplane_prop_007_00177.jpg";"airplane_prop_007_00171.jpg";"airplane_prop_007_00172.jpg";"airplane_prop_007_00173.jpg";"airplane_prop_007_00174.jpg";"airplane_prop_007_00178.jpg";
"airplane_prop_008_00181.jpg";"airplane_prop_008_00182.jpg";"airplane_prop_008_00184.jpg";"airplane_prop_008_00186.jpg";"airplane_prop_008_00187.jpg";"airplane_prop_008_00185.jpg";"airplane_prop_008_00188.jpg";"airplane_prop_008_00189.jpg";"airplane_prop_008_00183.jpg";"airplane_prop_008_00190.jpg";
"airplane_prop_009_00196.jpg";"airplane_prop_009_00195.jpg";"airplane_prop_009_00194.jpg";"airplane_prop_009_00192.jpg";"airplane_prop_009_00199.jpg";"airplane_prop_009_00197.jpg";"airplane_prop_009_00200.jpg";"airplane_prop_009_00191.jpg";"airplane_prop_009_00193.jpg";"airplane_prop_009_00198.jpg";
"airplane_prop_010_00208.jpg";"airplane_prop_010_00209.jpg";"airplane_prop_010_00205.jpg";"airplane_prop_010_00202.jpg";"airplane_prop_010_00204.jpg";"airplane_prop_010_00210.jpg";"airplane_prop_010_00201.jpg";"airplane_prop_010_00207.jpg";"airplane_prop_010_00203.jpg";"airplane_prop_010_00206.jpg";
"helicopter_attack_001_00935.jpg";"helicopter_attack_001_00938.jpg";"helicopter_attack_001_00932.jpg";"helicopter_attack_001_00934.jpg";"helicopter_attack_001_00933.jpg";"helicopter_attack_001_00931.jpg";"helicopter_attack_001_00937.jpg";"helicopter_attack_001_00939.jpg";"helicopter_attack_001_00936.jpg";"helicopter_attack_001_00940.jpg";
"helicopter_attack_002_00947.jpg";"helicopter_attack_002_00943.jpg";"helicopter_attack_002_00948.jpg";"helicopter_attack_002_00945.jpg";"helicopter_attack_002_00942.jpg";"helicopter_attack_002_00941.jpg";"helicopter_attack_002_00949.jpg";"helicopter_attack_002_00944.jpg";"helicopter_attack_002_00946.jpg";"helicopter_attack_002_00950.jpg";
"helicopter_attack_003_00959.jpg";"helicopter_attack_003_00954.jpg";"helicopter_attack_003_00951.jpg";"helicopter_attack_003_00957.jpg";"helicopter_attack_003_00958.jpg";"helicopter_attack_003_00956.jpg";"helicopter_attack_003_00953.jpg";"helicopter_attack_003_00952.jpg";"helicopter_attack_003_00960.jpg";"helicopter_attack_003_00955.jpg";
"helicopter_attack_004_00967.jpg";"helicopter_attack_004_00965.jpg";"helicopter_attack_004_00970.jpg";"helicopter_attack_004_00966.jpg";"helicopter_attack_004_00963.jpg";"helicopter_attack_004_00962.jpg";"helicopter_attack_004_00964.jpg";"helicopter_attack_004_00961.jpg";"helicopter_attack_004_00968.jpg";"helicopter_attack_004_00969.jpg";
"helicopter_attack_005_00973.jpg";"helicopter_attack_005_00980.jpg";"helicopter_attack_005_00977.jpg";"helicopter_attack_005_00971.jpg";"helicopter_attack_005_00974.jpg";"helicopter_attack_005_00976.jpg";"helicopter_attack_005_00972.jpg";"helicopter_attack_005_00975.jpg";"helicopter_attack_005_00978.jpg";"helicopter_attack_005_00979.jpg";
"helicopter_cargo_001_00987.jpg";"helicopter_cargo_001_00990.jpg";"helicopter_cargo_001_00985.jpg";"helicopter_cargo_001_00986.jpg";"helicopter_cargo_001_00982.jpg";"helicopter_cargo_001_00983.jpg";"helicopter_cargo_001_00981.jpg";"helicopter_cargo_001_00984.jpg";"helicopter_cargo_001_00989.jpg";"helicopter_cargo_001_00988.jpg";
"helicopter_cargo_002_00995.jpg";"helicopter_cargo_002_00992.jpg";"helicopter_cargo_002_00994.jpg";"helicopter_cargo_002_00997.jpg";"helicopter_cargo_002_00999.jpg";"helicopter_cargo_002_00998.jpg";"helicopter_cargo_002_01000.jpg";"helicopter_cargo_002_00996.jpg";"helicopter_cargo_002_00993.jpg";"helicopter_cargo_002_00991.jpg";
"helicopter_cargo_003_01007.jpg";"helicopter_cargo_003_01010.jpg";"helicopter_cargo_003_01002.jpg";"helicopter_cargo_003_01006.jpg";"helicopter_cargo_003_01005.jpg";"helicopter_cargo_003_01003.jpg";"helicopter_cargo_003_01004.jpg";"helicopter_cargo_003_01001.jpg";"helicopter_cargo_003_01008.jpg";"helicopter_cargo_003_01009.jpg";
"helicopter_cargo_004_01013.jpg";"helicopter_cargo_004_01020.jpg";"helicopter_cargo_004_01015.jpg";"helicopter_cargo_004_01014.jpg";"helicopter_cargo_004_01016.jpg";"helicopter_cargo_004_01012.jpg";"helicopter_cargo_004_01011.jpg";"helicopter_cargo_004_01017.jpg";"helicopter_cargo_004_01018.jpg";"helicopter_cargo_004_01019.jpg";
"helicopter_cargo_005_01023.jpg";"helicopter_cargo_005_01026.jpg";"helicopter_cargo_005_01024.jpg";"helicopter_cargo_005_01027.jpg";"helicopter_cargo_005_01028.jpg";"helicopter_cargo_005_01021.jpg";"helicopter_cargo_005_01025.jpg";"helicopter_cargo_005_01022.jpg";"helicopter_cargo_005_01029.jpg";"helicopter_cargo_005_01030.jpg";
"helicopter_jet_001_01036.jpg";"helicopter_jet_001_01035.jpg";"helicopter_jet_001_01031.jpg";"helicopter_jet_001_01038.jpg";"helicopter_jet_001_01034.jpg";"helicopter_jet_001_01040.jpg";"helicopter_jet_001_01039.jpg";"helicopter_jet_001_01033.jpg";"helicopter_jet_001_01037.jpg";"helicopter_jet_001_01032.jpg";
"helicopter_jet_002_01045.jpg";"helicopter_jet_002_01044.jpg";"helicopter_jet_002_01041.jpg";"helicopter_jet_002_01042.jpg";"helicopter_jet_002_01048.jpg";"helicopter_jet_002_01049.jpg";"helicopter_jet_002_01046.jpg";"helicopter_jet_002_01047.jpg";"helicopter_jet_002_01050.jpg";"helicopter_jet_002_01043.jpg";
"helicopter_jet_003_01052.jpg";"helicopter_jet_003_01051.jpg";"helicopter_jet_003_01054.jpg";"helicopter_jet_003_01055.jpg";"helicopter_jet_003_01057.jpg";"helicopter_jet_003_01058.jpg";"helicopter_jet_003_01059.jpg";"helicopter_jet_003_01053.jpg";"helicopter_jet_003_01060.jpg";"helicopter_jet_003_01056.jpg";
"helicopter_jet_004_01063.jpg";"helicopter_jet_004_01061.jpg";"helicopter_jet_004_01066.jpg";"helicopter_jet_004_01064.jpg";"helicopter_jet_004_01062.jpg";"helicopter_jet_004_01068.jpg";"helicopter_jet_004_01069.jpg";"helicopter_jet_004_01067.jpg";"helicopter_jet_004_01065.jpg";"helicopter_jet_004_01070.jpg";
"helicopter_jet_005_01075.jpg";"helicopter_jet_005_01074.jpg";"helicopter_jet_005_01073.jpg";"helicopter_jet_005_01071.jpg";"helicopter_jet_005_01080.jpg";"helicopter_jet_005_01079.jpg";"helicopter_jet_005_01072.jpg";"helicopter_jet_005_01076.jpg";"helicopter_jet_005_01078.jpg";"helicopter_jet_005_01077.jpg";
"helicopter_jet_006_01084.jpg";"helicopter_jet_006_01081.jpg";"helicopter_jet_006_01082.jpg";"helicopter_jet_006_01088.jpg";"helicopter_jet_006_01086.jpg";"helicopter_jet_006_01085.jpg";"helicopter_jet_006_01083.jpg";"helicopter_jet_006_01087.jpg";"helicopter_jet_006_01089.jpg";"helicopter_jet_006_01090.jpg";
"helicopter_utility_001_01092.jpg";"helicopter_utility_001_01095.jpg";"helicopter_utility_001_01096.jpg";"helicopter_utility_001_01091.jpg";"helicopter_utility_001_01097.jpg";"helicopter_utility_001_01094.jpg";"helicopter_utility_001_01098.jpg";"helicopter_utility_001_01099.jpg";"helicopter_utility_001_01093.jpg";"helicopter_utility_001_01100.jpg";
"helicopter_utility_002_01101.jpg";"helicopter_utility_002_01102.jpg";"helicopter_utility_002_01103.jpg";"helicopter_utility_002_01104.jpg";"helicopter_utility_002_01106.jpg";"helicopter_utility_002_01109.jpg";"helicopter_utility_002_01108.jpg";"helicopter_utility_002_01105.jpg";"helicopter_utility_002_01107.jpg";"helicopter_utility_002_01110.jpg";
"helicopter_utility_003_01112.jpg";"helicopter_utility_003_01114.jpg";"helicopter_utility_003_01113.jpg";"helicopter_utility_003_01115.jpg";"helicopter_utility_003_01111.jpg";"helicopter_utility_003_01120.jpg";"helicopter_utility_003_01119.jpg";"helicopter_utility_003_01116.jpg";"helicopter_utility_003_01118.jpg";"helicopter_utility_003_01117.jpg";
"helicopter_utility_004_01125.jpg";"helicopter_utility_004_01124.jpg";"helicopter_utility_004_01126.jpg";"helicopter_utility_004_01122.jpg";"helicopter_utility_004_01128.jpg";"helicopter_utility_004_01129.jpg";"helicopter_utility_004_01121.jpg";"helicopter_utility_004_01123.jpg";"helicopter_utility_004_01127.jpg";"helicopter_utility_004_01130.jpg";
"helicopter_utility_005_01131.jpg";"helicopter_utility_005_01132.jpg";"helicopter_utility_005_01134.jpg";"helicopter_utility_005_01137.jpg";"helicopter_utility_005_01133.jpg";"helicopter_utility_005_01136.jpg";"helicopter_utility_005_01138.jpg";"helicopter_utility_005_01135.jpg";"helicopter_utility_005_01139.jpg";"helicopter_utility_005_01140.jpg";
"motorcycle_chopper_001_01143.jpg";"motorcycle_chopper_001_01141.jpg";"motorcycle_chopper_001_01142.jpg";"motorcycle_chopper_001_01145.jpg";"motorcycle_chopper_001_01144.jpg";"motorcycle_chopper_001_01148.jpg";"motorcycle_chopper_001_01150.jpg";"motorcycle_chopper_001_01146.jpg";"motorcycle_chopper_001_01147.jpg";"motorcycle_chopper_001_01149.jpg";
"motorcycle_chopper_002_01160.jpg";"motorcycle_chopper_002_01151.jpg";"motorcycle_chopper_002_01156.jpg";"motorcycle_chopper_002_01152.jpg";"motorcycle_chopper_002_01154.jpg";"motorcycle_chopper_002_01153.jpg";"motorcycle_chopper_002_01155.jpg";"motorcycle_chopper_002_01159.jpg";"motorcycle_chopper_002_01158.jpg";"motorcycle_chopper_002_01157.jpg";
"motorcycle_chopper_003_01161.jpg";"motorcycle_chopper_003_01168.jpg";"motorcycle_chopper_003_01164.jpg";"motorcycle_chopper_003_01162.jpg";"motorcycle_chopper_003_01165.jpg";"motorcycle_chopper_003_01166.jpg";"motorcycle_chopper_003_01170.jpg";"motorcycle_chopper_003_01163.jpg";"motorcycle_chopper_003_01167.jpg";"motorcycle_chopper_003_01169.jpg";
"motorcycle_chopper_004_01172.jpg";"motorcycle_chopper_004_01171.jpg";"motorcycle_chopper_004_01174.jpg";"motorcycle_chopper_004_01176.jpg";"motorcycle_chopper_004_01177.jpg";"motorcycle_chopper_004_01178.jpg";"motorcycle_chopper_004_01173.jpg";"motorcycle_chopper_004_01180.jpg";"motorcycle_chopper_004_01175.jpg";"motorcycle_chopper_004_01179.jpg";
"motorcycle_dirt_001_01181.jpg";"motorcycle_dirt_001_01184.jpg";"motorcycle_dirt_001_01182.jpg";"motorcycle_dirt_001_01189.jpg";"motorcycle_dirt_001_01190.jpg";"motorcycle_dirt_001_01185.jpg";"motorcycle_dirt_001_01188.jpg";"motorcycle_dirt_001_01183.jpg";"motorcycle_dirt_001_01187.jpg";"motorcycle_dirt_001_01186.jpg";
"motorcycle_dirt_002_01196.jpg";"motorcycle_dirt_002_01193.jpg";"motorcycle_dirt_002_01192.jpg";"motorcycle_dirt_002_01200.jpg";"motorcycle_dirt_002_01194.jpg";"motorcycle_dirt_002_01191.jpg";"motorcycle_dirt_002_01195.jpg";"motorcycle_dirt_002_01197.jpg";"motorcycle_dirt_002_01198.jpg";"motorcycle_dirt_002_01199.jpg";
"motorcycle_dirt_003_01201.jpg";"motorcycle_dirt_003_01202.jpg";"motorcycle_dirt_003_01206.jpg";"motorcycle_dirt_003_01205.jpg";"motorcycle_dirt_003_01203.jpg";"motorcycle_dirt_003_01204.jpg";"motorcycle_dirt_003_01208.jpg";"motorcycle_dirt_003_01210.jpg";"motorcycle_dirt_003_01207.jpg";"motorcycle_dirt_003_01209.jpg";
"motorcycle_dirt_004_01216.jpg";"motorcycle_dirt_004_01217.jpg";"motorcycle_dirt_004_01212.jpg";"motorcycle_dirt_004_01211.jpg";"motorcycle_dirt_004_01215.jpg";"motorcycle_dirt_004_01218.jpg";"motorcycle_dirt_004_01219.jpg";"motorcycle_dirt_004_01213.jpg";"motorcycle_dirt_004_01220.jpg";"motorcycle_dirt_004_01214.jpg";
"motorcycle_sport_001_01228.jpg";"motorcycle_sport_001_01229.jpg";"motorcycle_sport_001_01225.jpg";"motorcycle_sport_001_01230.jpg";"motorcycle_sport_001_01227.jpg";"motorcycle_sport_001_01226.jpg";"motorcycle_sport_001_01222.jpg";"motorcycle_sport_001_01221.jpg";"motorcycle_sport_001_01224.jpg";"motorcycle_sport_001_01223.jpg";
"motorcycle_sport_002_01234.jpg";"motorcycle_sport_002_01231.jpg";"motorcycle_sport_002_01239.jpg";"motorcycle_sport_002_01236.jpg";"motorcycle_sport_002_01238.jpg";"motorcycle_sport_002_01237.jpg";"motorcycle_sport_002_01235.jpg";"motorcycle_sport_002_01233.jpg";"motorcycle_sport_002_01240.jpg";"motorcycle_sport_002_01232.jpg";
"motorcycle_sport_003_01241.jpg";"motorcycle_sport_003_01249.jpg";"motorcycle_sport_003_01246.jpg";"motorcycle_sport_003_01243.jpg";"motorcycle_sport_003_01245.jpg";"motorcycle_sport_003_01247.jpg";"motorcycle_sport_003_01250.jpg";"motorcycle_sport_003_01244.jpg";"motorcycle_sport_003_01242.jpg";"motorcycle_sport_003_01248.jpg";
"motorcycle_sport_004_01251.jpg";"motorcycle_sport_004_01255.jpg";"motorcycle_sport_004_01259.jpg";"motorcycle_sport_004_01253.jpg";"motorcycle_sport_004_01260.jpg";"motorcycle_sport_004_01256.jpg";"motorcycle_sport_004_01252.jpg";"motorcycle_sport_004_01254.jpg";"motorcycle_sport_004_01257.jpg";"motorcycle_sport_004_01258.jpg";
"motorcycle_sport_005_01264.jpg";"motorcycle_sport_005_01263.jpg";"motorcycle_sport_005_01265.jpg";"motorcycle_sport_005_01266.jpg";"motorcycle_sport_005_01267.jpg";"motorcycle_sport_005_01270.jpg";"motorcycle_sport_005_01262.jpg";"motorcycle_sport_005_01261.jpg";"motorcycle_sport_005_01269.jpg";"motorcycle_sport_005_01268.jpg";
"motorcycle_standard_001_01274.jpg";"motorcycle_standard_001_01271.jpg";"motorcycle_standard_001_01276.jpg";"motorcycle_standard_001_01277.jpg";"motorcycle_standard_001_01280.jpg";"motorcycle_standard_001_01273.jpg";"motorcycle_standard_001_01272.jpg";"motorcycle_standard_001_01275.jpg";"motorcycle_standard_001_01279.jpg";"motorcycle_standard_001_01278.jpg";
"motorcycle_standard_002_01288.jpg";"motorcycle_standard_002_01287.jpg";"motorcycle_standard_002_01286.jpg";"motorcycle_standard_002_01289.jpg";"motorcycle_standard_002_01282.jpg";"motorcycle_standard_002_01281.jpg";"motorcycle_standard_002_01285.jpg";"motorcycle_standard_002_01290.jpg";"motorcycle_standard_002_01284.jpg";"motorcycle_standard_002_01283.jpg";
"motorcycle_standard_003_01291.jpg";"motorcycle_standard_003_01296.jpg";"motorcycle_standard_003_01299.jpg";"motorcycle_standard_003_01293.jpg";"motorcycle_standard_003_01300.jpg";"motorcycle_standard_003_01292.jpg";"motorcycle_standard_003_01294.jpg";"motorcycle_standard_003_01295.jpg";"motorcycle_standard_003_01298.jpg";"motorcycle_standard_003_01297.jpg";
"motorcycle_standard_004_01309.jpg";"motorcycle_standard_004_01305.jpg";"motorcycle_standard_004_01307.jpg";"motorcycle_standard_004_01310.jpg";"motorcycle_standard_004_01308.jpg";"motorcycle_standard_004_01306.jpg";"motorcycle_standard_004_01303.jpg";"motorcycle_standard_004_01301.jpg";"motorcycle_standard_004_01302.jpg";"motorcycle_standard_004_01304.jpg";
"motorcycle_standard_005_01315.jpg";"motorcycle_standard_005_01314.jpg";"motorcycle_standard_005_01316.jpg";"motorcycle_standard_005_01312.jpg";"motorcycle_standard_005_01313.jpg";"motorcycle_standard_005_01311.jpg";"motorcycle_standard_005_01317.jpg";"motorcycle_standard_005_01318.jpg";"motorcycle_standard_005_01319.jpg";"motorcycle_standard_005_01320.jpg";
"car_convertible_001_00221.jpg";"car_convertible_001_00222.jpg";"car_convertible_001_00225.jpg";"car_convertible_001_00224.jpg";"car_convertible_001_00226.jpg";"car_convertible_001_00227.jpg";"car_convertible_001_00228.jpg";"car_convertible_001_00230.jpg";"car_convertible_001_00229.jpg";"car_convertible_001_00223.jpg";
"car_convertible_002_00232.jpg";"car_convertible_002_00231.jpg";"car_convertible_002_00235.jpg";"car_convertible_002_00234.jpg";"car_convertible_002_00236.jpg";"car_convertible_002_00237.jpg";"car_convertible_002_00238.jpg";"car_convertible_002_00240.jpg";"car_convertible_002_00239.jpg";"car_convertible_002_00233.jpg";
"car_convertible_003_00247.jpg";"car_convertible_003_00249.jpg";"car_convertible_003_00242.jpg";"car_convertible_003_00241.jpg";"car_convertible_003_00245.jpg";"car_convertible_003_00243.jpg";"car_convertible_003_00244.jpg";"car_convertible_003_00246.jpg";"car_convertible_003_00248.jpg";"car_convertible_003_00250.jpg";
"car_convertible_004_00257.jpg";"car_convertible_004_00256.jpg";"car_convertible_004_00258.jpg";"car_convertible_004_00259.jpg";"car_convertible_004_00260.jpg";"car_convertible_004_00252.jpg";"car_convertible_004_00251.jpg";"car_convertible_004_00255.jpg";"car_convertible_004_00253.jpg";"car_convertible_004_00254.jpg";
"car_convertible_005_00269.jpg";"car_convertible_005_00266.jpg";"car_convertible_005_00268.jpg";"car_convertible_005_00270.jpg";"car_convertible_005_00267.jpg";"car_convertible_005_00264.jpg";"car_convertible_005_00261.jpg";"car_convertible_005_00262.jpg";"car_convertible_005_00263.jpg";"car_convertible_005_00265.jpg";
"car_convertible_006_00274.jpg";"car_convertible_006_00271.jpg";"car_convertible_006_00272.jpg";"car_convertible_006_00273.jpg";"car_convertible_006_00275.jpg";"car_convertible_006_00276.jpg";"car_convertible_006_00277.jpg";"car_convertible_006_00278.jpg";"car_convertible_006_00280.jpg";"car_convertible_006_00279.jpg";
"car_convertible_007_00212.jpg";"car_convertible_007_00211.jpg";"car_convertible_007_00215.jpg";"car_convertible_007_00213.jpg";"car_convertible_007_00214.jpg";"car_convertible_007_00216.jpg";"car_convertible_007_00217.jpg";"car_convertible_007_00218.jpg";"car_convertible_007_00219.jpg";"car_convertible_007_00220.jpg";
"car_pickup_001_00361.jpg";"car_pickup_001_00365.jpg";"car_pickup_001_00362.jpg";"car_pickup_001_00363.jpg";"car_pickup_001_00364.jpg";"car_pickup_001_00366.jpg";"car_pickup_001_00367.jpg";"car_pickup_001_00368.jpg";"car_pickup_001_00369.jpg";"car_pickup_001_00370.jpg";
"car_pickup_002_00371.jpg";"car_pickup_002_00375.jpg";"car_pickup_002_00372.jpg";"car_pickup_002_00373.jpg";"car_pickup_002_00374.jpg";"car_pickup_002_00376.jpg";"car_pickup_002_00377.jpg";"car_pickup_002_00378.jpg";"car_pickup_002_00379.jpg";"car_pickup_002_00380.jpg";
"car_pickup_003_00381.jpg";"car_pickup_003_00382.jpg";"car_pickup_003_00383.jpg";"car_pickup_003_00384.jpg";"car_pickup_003_00385.jpg";"car_pickup_003_00386.jpg";"car_pickup_003_00387.jpg";"car_pickup_003_00388.jpg";"car_pickup_003_00389.jpg";"car_pickup_003_00390.jpg";
"car_pickup_004_00391.jpg";"car_pickup_004_00395.jpg";"car_pickup_004_00392.jpg";"car_pickup_004_00393.jpg";"car_pickup_004_00394.jpg";"car_pickup_004_00396.jpg";"car_pickup_004_00397.jpg";"car_pickup_004_00398.jpg";"car_pickup_004_00399.jpg";"car_pickup_004_00400.jpg";
"car_pickup_005_00401.jpg";"car_pickup_005_00405.jpg";"car_pickup_005_00402.jpg";"car_pickup_005_00403.jpg";"car_pickup_005_00404.jpg";"car_pickup_005_00406.jpg";"car_pickup_005_00407.jpg";"car_pickup_005_00408.jpg";"car_pickup_005_00409.jpg";"car_pickup_005_00410.jpg";
"car_pickup_006_00411.jpg";"car_pickup_006_00415.jpg";"car_pickup_006_00412.jpg";"car_pickup_006_00413.jpg";"car_pickup_006_00414.jpg";"car_pickup_006_00416.jpg";"car_pickup_006_00417.jpg";"car_pickup_006_00418.jpg";"car_pickup_006_00419.jpg";"car_pickup_006_00420.jpg";
"car_pickup_007_00421.jpg";"car_pickup_007_00422.jpg";"car_pickup_007_00423.jpg";"car_pickup_007_00424.jpg";"car_pickup_007_00425.jpg";"car_pickup_007_00426.jpg";"car_pickup_007_00427.jpg";"car_pickup_007_00428.jpg";"car_pickup_007_00429.jpg";"car_pickup_007_00430.jpg";
"car_pickup_008_00431.jpg";"car_pickup_008_00435.jpg";"car_pickup_008_00432.jpg";"car_pickup_008_00433.jpg";"car_pickup_008_00434.jpg";"car_pickup_008_00436.jpg";"car_pickup_008_00437.jpg";"car_pickup_008_00438.jpg";"car_pickup_008_00439.jpg";"car_pickup_008_00440.jpg";
"car_pickup_009_00441.jpg";"car_pickup_009_00445.jpg";"car_pickup_009_00442.jpg";"car_pickup_009_00443.jpg";"car_pickup_009_00444.jpg";"car_pickup_009_00446.jpg";"car_pickup_009_00447.jpg";"car_pickup_009_00448.jpg";"car_pickup_009_00449.jpg";"car_pickup_009_00450.jpg";
"car_pickup_010_00451.jpg";"car_pickup_010_00455.jpg";"car_pickup_010_00452.jpg";"car_pickup_010_00453.jpg";"car_pickup_010_00454.jpg";"car_pickup_010_00456.jpg";"car_pickup_010_00457.jpg";"car_pickup_010_00458.jpg";"car_pickup_010_00459.jpg";"car_pickup_010_00460.jpg";
"car_sedan_001_00461.jpg";"car_sedan_001_00462.jpg";"car_sedan_001_00463.jpg";"car_sedan_001_00464.jpg";"car_sedan_001_00465.jpg";"car_sedan_001_00466.jpg";"car_sedan_001_00467.jpg";"car_sedan_001_00468.jpg";"car_sedan_001_00469.jpg";"car_sedan_001_00470.jpg";
"car_sedan_002_00471.jpg";"car_sedan_002_00475.jpg";"car_sedan_002_00472.jpg";"car_sedan_002_00473.jpg";"car_sedan_002_00474.jpg";"car_sedan_002_00476.jpg";"car_sedan_002_00477.jpg";"car_sedan_002_00478.jpg";"car_sedan_002_00479.jpg";"car_sedan_002_00480.jpg";
"car_sedan_003_00481.jpg";"car_sedan_003_00485.jpg";"car_sedan_003_00482.jpg";"car_sedan_003_00483.jpg";"car_sedan_003_00484.jpg";"car_sedan_003_00486.jpg";"car_sedan_003_00487.jpg";"car_sedan_003_00488.jpg";"car_sedan_003_00489.jpg";"car_sedan_003_00490.jpg";
"car_sedan_004_00491.jpg";"car_sedan_004_00495.jpg";"car_sedan_004_00492.jpg";"car_sedan_004_00493.jpg";"car_sedan_004_00494.jpg";"car_sedan_004_00496.jpg";"car_sedan_004_00497.jpg";"car_sedan_004_00498.jpg";"car_sedan_004_00499.jpg";"car_sedan_004_00500.jpg";
"car_sedan_005_00501.jpg";"car_sedan_005_00502.jpg";"car_sedan_005_00503.jpg";"car_sedan_005_00504.jpg";"car_sedan_005_00505.jpg";"car_sedan_005_00506.jpg";"car_sedan_005_00507.jpg";"car_sedan_005_00508.jpg";"car_sedan_005_00509.jpg";"car_sedan_005_00510.jpg";
"car_sedan_006_00511.jpg";"car_sedan_006_00512.jpg";"car_sedan_006_00513.jpg";"car_sedan_006_00514.jpg";"car_sedan_006_00515.jpg";"car_sedan_006_00516.jpg";"car_sedan_006_00517.jpg";"car_sedan_006_00518.jpg";"car_sedan_006_00519.jpg";"car_sedan_006_00520.jpg";
"car_sedan_007_00525.jpg";"car_sedan_007_00521.jpg";"car_sedan_007_00522.jpg";"car_sedan_007_00523.jpg";"car_sedan_007_00524.jpg";"car_sedan_007_00526.jpg";"car_sedan_007_00527.jpg";"car_sedan_007_00528.jpg";"car_sedan_007_00529.jpg";"car_sedan_007_00530.jpg";
"car_sedan_008_00531.jpg";"car_sedan_008_00532.jpg";"car_sedan_008_00533.jpg";"car_sedan_008_00535.jpg";"car_sedan_008_00534.jpg";"car_sedan_008_00536.jpg";"car_sedan_008_00537.jpg";"car_sedan_008_00538.jpg";"car_sedan_008_00539.jpg";"car_sedan_008_00540.jpg";
"car_sedan_009_00541.jpg";"car_sedan_009_00542.jpg";"car_sedan_009_00543.jpg";"car_sedan_009_00544.jpg";"car_sedan_009_00545.jpg";"car_sedan_009_00546.jpg";"car_sedan_009_00547.jpg";"car_sedan_009_00548.jpg";"car_sedan_009_00549.jpg";"car_sedan_009_00550.jpg";
"car_sportscar_001_00551.jpg";"car_sportscar_001_00552.jpg";"car_sportscar_001_00553.jpg";"car_sportscar_001_00555.jpg";"car_sportscar_001_00554.jpg";"car_sportscar_001_00556.jpg";"car_sportscar_001_00557.jpg";"car_sportscar_001_00558.jpg";"car_sportscar_001_00559.jpg";"car_sportscar_001_00560.jpg";
"car_sportscar_002_00565.jpg";"car_sportscar_002_00561.jpg";"car_sportscar_002_00562.jpg";"car_sportscar_002_00563.jpg";"car_sportscar_002_00564.jpg";"car_sportscar_002_00566.jpg";"car_sportscar_002_00567.jpg";"car_sportscar_002_00568.jpg";"car_sportscar_002_00569.jpg";"car_sportscar_002_00570.jpg";
"car_sportscar_003_00571.jpg";"car_sportscar_003_00572.jpg";"car_sportscar_003_00573.jpg";"car_sportscar_003_00575.jpg";"car_sportscar_003_00574.jpg";"car_sportscar_003_00576.jpg";"car_sportscar_003_00577.jpg";"car_sportscar_003_00578.jpg";"car_sportscar_003_00579.jpg";"car_sportscar_003_00580.jpg";
"car_sportscar_004_00581.jpg";"car_sportscar_004_00582.jpg";"car_sportscar_004_00583.jpg";"car_sportscar_004_00584.jpg";"car_sportscar_004_00585.jpg";"car_sportscar_004_00586.jpg";"car_sportscar_004_00587.jpg";"car_sportscar_004_00588.jpg";"car_sportscar_004_00589.jpg";"car_sportscar_004_00590.jpg";
"car_sportscar_005_00591.jpg";"car_sportscar_005_00592.jpg";"car_sportscar_005_00593.jpg";"car_sportscar_005_00595.jpg";"car_sportscar_005_00594.jpg";"car_sportscar_005_00596.jpg";"car_sportscar_005_00597.jpg";"car_sportscar_005_00598.jpg";"car_sportscar_005_00599.jpg";"car_sportscar_005_00600.jpg";
"car_hatchback_001_00281.jpg";"car_hatchback_001_00282.jpg";"car_hatchback_001_00283.jpg";"car_hatchback_001_00285.jpg";"car_hatchback_001_00284.jpg";"car_hatchback_001_00289.jpg";"car_hatchback_001_00286.jpg";"car_hatchback_001_00287.jpg";"car_hatchback_001_00288.jpg";"car_hatchback_001_00290.jpg";
"car_hatchback_002_00292.jpg";"car_hatchback_002_00294.jpg";"car_hatchback_002_00291.jpg";"car_hatchback_002_00293.jpg";"car_hatchback_002_00295.jpg";"car_hatchback_002_00296.jpg";"car_hatchback_002_00297.jpg";"car_hatchback_002_00298.jpg";"car_hatchback_002_00300.jpg";"car_hatchback_002_00299.jpg";
"car_hatchback_003_00301.jpg";"car_hatchback_003_00305.jpg";"car_hatchback_003_00302.jpg";"car_hatchback_003_00303.jpg";"car_hatchback_003_00304.jpg";"car_hatchback_003_00309.jpg";"car_hatchback_003_00306.jpg";"car_hatchback_003_00307.jpg";"car_hatchback_003_00308.jpg";"car_hatchback_003_00310.jpg";
"car_hatchback_004_00312.jpg";"car_hatchback_004_00314.jpg";"car_hatchback_004_00311.jpg";"car_hatchback_004_00313.jpg";"car_hatchback_004_00315.jpg";"car_hatchback_004_00316.jpg";"car_hatchback_004_00317.jpg";"car_hatchback_004_00318.jpg";"car_hatchback_004_00319.jpg";"car_hatchback_004_00320.jpg";
"car_hatchback_005_00321.jpg";"car_hatchback_005_00322.jpg";"car_hatchback_005_00323.jpg";"car_hatchback_005_00325.jpg";"car_hatchback_005_00324.jpg";"car_hatchback_005_00329.jpg";"car_hatchback_005_00326.jpg";"car_hatchback_005_00327.jpg";"car_hatchback_005_00328.jpg";"car_hatchback_005_00330.jpg";
"car_hatchback_006_00331.jpg";"car_hatchback_006_00335.jpg";"car_hatchback_006_00332.jpg";"car_hatchback_006_00333.jpg";"car_hatchback_006_00334.jpg";"car_hatchback_006_00336.jpg";"car_hatchback_006_00337.jpg";"car_hatchback_006_00338.jpg";"car_hatchback_006_00339.jpg";"car_hatchback_006_00340.jpg";
"car_hatchback_007_00341.jpg";"car_hatchback_007_00342.jpg";"car_hatchback_007_00343.jpg";"car_hatchback_007_00344.jpg";"car_hatchback_007_00345.jpg";"car_hatchback_007_00346.jpg";"car_hatchback_007_00347.jpg";"car_hatchback_007_00348.jpg";"car_hatchback_007_00349.jpg";"car_hatchback_007_00350.jpg";
"car_hatchback_008_00355.jpg";"car_hatchback_008_00351.jpg";"car_hatchback_008_00352.jpg";"car_hatchback_008_00353.jpg";"car_hatchback_008_00354.jpg";"car_hatchback_008_00356.jpg";"car_hatchback_008_00357.jpg";"car_hatchback_008_00358.jpg";"car_hatchback_008_00359.jpg";"car_hatchback_008_00360.jpg";
"car_suv_001_00605.jpg";"car_suv_001_00601.jpg";"car_suv_001_00602.jpg";"car_suv_001_00603.jpg";"car_suv_001_00604.jpg";"car_suv_001_00606.jpg";"car_suv_001_00607.jpg";"car_suv_001_00608.jpg";"car_suv_001_00609.jpg";"car_suv_001_00610.jpg";
"car_suv_002_00611.jpg";"car_suv_002_00612.jpg";"car_suv_002_00613.jpg";"car_suv_002_00615.jpg";"car_suv_002_00614.jpg";"car_suv_002_00616.jpg";"car_suv_002_00617.jpg";"car_suv_002_00618.jpg";"car_suv_002_00619.jpg";"car_suv_002_00620.jpg";
"car_suv_003_00621.jpg";"car_suv_003_00622.jpg";"car_suv_003_00623.jpg";"car_suv_003_00624.jpg";"car_suv_003_00625.jpg";"car_suv_003_00626.jpg";"car_suv_003_00627.jpg";"car_suv_003_00628.jpg";"car_suv_003_00629.jpg";"car_suv_003_00630.jpg";
"car_suv_004_00631.jpg";"car_suv_004_00632.jpg";"car_suv_004_00633.jpg";"car_suv_004_00635.jpg";"car_suv_004_00634.jpg";"car_suv_004_00636.jpg";"car_suv_004_00637.jpg";"car_suv_004_00638.jpg";"car_suv_004_00639.jpg";"car_suv_004_00640.jpg";
"car_suv_005_00645.jpg";"car_suv_005_00641.jpg";"car_suv_005_00642.jpg";"car_suv_005_00643.jpg";"car_suv_005_00644.jpg";"car_suv_005_00646.jpg";"car_suv_005_00647.jpg";"car_suv_005_00648.jpg";"car_suv_005_00649.jpg";"car_suv_005_00650.jpg";
"car_suv_006_00651.jpg";"car_suv_006_00652.jpg";"car_suv_006_00653.jpg";"car_suv_006_00655.jpg";"car_suv_006_00654.jpg";"car_suv_006_00656.jpg";"car_suv_006_00657.jpg";"car_suv_006_00658.jpg";"car_suv_006_00659.jpg";"car_suv_006_00660.jpg";
"car_suv_007_00661.jpg";"car_suv_007_00662.jpg";"car_suv_007_00663.jpg";"car_suv_007_00664.jpg";"car_suv_007_00665.jpg";"car_suv_007_00666.jpg";"car_suv_007_00667.jpg";"car_suv_007_00668.jpg";"car_suv_007_00669.jpg";"car_suv_007_00670.jpg";
"car_suv_008_00671.jpg";"car_suv_008_00672.jpg";"car_suv_008_00673.jpg";"car_suv_008_00674.jpg";"car_suv_008_00675.jpg";"car_suv_008_00676.jpg";"car_suv_008_00677.jpg";"car_suv_008_00678.jpg";"car_suv_008_00679.jpg";"car_suv_008_00680.jpg";
"car_suv_009_00681.jpg";"car_suv_009_00682.jpg";"car_suv_009_00683.jpg";"car_suv_009_00684.jpg";"car_suv_009_00685.jpg";"car_suv_009_00686.jpg";"car_suv_009_00687.jpg";"car_suv_009_00688.jpg";"car_suv_009_00689.jpg";"car_suv_009_00690.jpg";
"car_suv_010_00691.jpg";"car_suv_010_00692.jpg";"car_suv_010_00693.jpg";"car_suv_010_00694.jpg";"car_suv_010_00695.jpg";"car_suv_010_00696.jpg";"car_suv_010_00697.jpg";"car_suv_010_00698.jpg";"car_suv_010_00699.jpg";"car_suv_010_00700.jpg";
"car_suv_011_00701.jpg";"car_suv_011_00702.jpg";"car_suv_011_00703.jpg";"car_suv_011_00704.jpg";"car_suv_011_00705.jpg";"car_suv_011_00706.jpg";"car_suv_011_00707.jpg";"car_suv_011_00708.jpg";"car_suv_011_00709.jpg";"car_suv_011_00710.jpg";
"car_suv_012_00711.jpg";"car_suv_012_00712.jpg";"car_suv_012_00713.jpg";"car_suv_012_00714.jpg";"car_suv_012_00715.jpg";"car_suv_012_00716.jpg";"car_suv_012_00717.jpg";"car_suv_012_00718.jpg";"car_suv_012_00719.jpg";"car_suv_012_00720.jpg";
"car_suv_013_00721.jpg";"car_suv_013_00722.jpg";"car_suv_013_00723.jpg";"car_suv_013_00724.jpg";"car_suv_013_00725.jpg";"car_suv_013_00726.jpg";"car_suv_013_00727.jpg";"car_suv_013_00728.jpg";"car_suv_013_00729.jpg";"car_suv_013_00730.jpg";
"car_suv_014_00731.jpg";"car_suv_014_00732.jpg";"car_suv_014_00733.jpg";"car_suv_014_00734.jpg";"car_suv_014_00735.jpg";"car_suv_014_00736.jpg";"car_suv_014_00737.jpg";"car_suv_014_00738.jpg";"car_suv_014_00739.jpg";"car_suv_014_00740.jpg";
"car_suv_015_00741.jpg";"car_suv_015_00742.jpg";"car_suv_015_00743.jpg";"car_suv_015_00744.jpg";"car_suv_015_00745.jpg";"car_suv_015_00746.jpg";"car_suv_015_00747.jpg";"car_suv_015_00748.jpg";"car_suv_015_00749.jpg";"car_suv_015_00750.jpg";
"car_van_001_00751.jpg";"car_van_001_00752.jpg";"car_van_001_00753.jpg";"car_van_001_00754.jpg";"car_van_001_00755.jpg";"car_van_001_00756.jpg";"car_van_001_00757.jpg";"car_van_001_00758.jpg";"car_van_001_00759.jpg";"car_van_001_00760.jpg";
"car_van_002_00761.jpg";"car_van_002_00762.jpg";"car_van_002_00763.jpg";"car_van_002_00764.jpg";"car_van_002_00765.jpg";"car_van_002_00766.jpg";"car_van_002_00767.jpg";"car_van_002_00768.jpg";"car_van_002_00769.jpg";"car_van_002_00770.jpg";
"car_van_003_00771.jpg";"car_van_003_00772.jpg";"car_van_003_00773.jpg";"car_van_003_00774.jpg";"car_van_003_00775.jpg";"car_van_003_00776.jpg";"car_van_003_00777.jpg";"car_van_003_00778.jpg";"car_van_003_00779.jpg";"car_van_003_00780.jpg";
"car_van_004_00781.jpg";"car_van_004_00782.jpg";"car_van_004_00783.jpg";"car_van_004_00784.jpg";"car_van_004_00785.jpg";"car_van_004_00786.jpg";"car_van_004_00787.jpg";"car_van_004_00788.jpg";"car_van_004_00789.jpg";"car_van_004_00790.jpg";
"car_van_005_00791.jpg";"car_van_005_00792.jpg";"car_van_005_00793.jpg";"car_van_005_00794.jpg";"car_van_005_00795.jpg";"car_van_005_00796.jpg";"car_van_005_00797.jpg";"car_van_005_00798.jpg";"car_van_005_00799.jpg";"car_van_005_00800.jpg";
"car_van_006_00801.jpg";"car_van_006_00802.jpg";"car_van_006_00803.jpg";"car_van_006_00804.jpg";"car_van_006_00805.jpg";"car_van_006_00806.jpg";"car_van_006_00807.jpg";"car_van_006_00808.jpg";"car_van_006_00809.jpg";"car_van_006_00810.jpg";
"car_van_007_00811.jpg";"car_van_007_00812.jpg";"car_van_007_00813.jpg";"car_van_007_00814.jpg";"car_van_007_00815.jpg";"car_van_007_00816.jpg";"car_van_007_00817.jpg";"car_van_007_00818.jpg";"car_van_007_00819.jpg";"car_van_007_00820.jpg";
"car_van_008_00821.jpg";"car_van_008_00822.jpg";"car_van_008_00823.jpg";"car_van_008_00824.jpg";"car_van_008_00825.jpg";"car_van_008_00826.jpg";"car_van_008_00827.jpg";"car_van_008_00828.jpg";"car_van_008_00829.jpg";"car_van_008_00830.jpg";
"car_van_009_00831.jpg";"car_van_009_00832.jpg";"car_van_009_00833.jpg";"car_van_009_00834.jpg";"car_van_009_00835.jpg";"car_van_009_00836.jpg";"car_van_009_00837.jpg";"car_van_009_00838.jpg";"car_van_009_00839.jpg";"car_van_009_00840.jpg";
"car_wagon_001_00841.jpg";"car_wagon_001_00842.jpg";"car_wagon_001_00843.jpg";"car_wagon_001_00844.jpg";"car_wagon_001_00845.jpg";"car_wagon_001_00846.jpg";"car_wagon_001_00847.jpg";"car_wagon_001_00848.jpg";"car_wagon_001_00849.jpg";"car_wagon_001_00850.jpg";
"car_wagon_002_00851.jpg";"car_wagon_002_00852.jpg";"car_wagon_002_00853.jpg";"car_wagon_002_00854.jpg";"car_wagon_002_00855.jpg";"car_wagon_002_00856.jpg";"car_wagon_002_00857.jpg";"car_wagon_002_00858.jpg";"car_wagon_002_00859.jpg";"car_wagon_002_00860.jpg";
"car_wagon_003_00861.jpg";"car_wagon_003_00862.jpg";"car_wagon_003_00863.jpg";"car_wagon_003_00864.jpg";"car_wagon_003_00865.jpg";"car_wagon_003_00866.jpg";"car_wagon_003_00867.jpg";"car_wagon_003_00868.jpg";"car_wagon_003_00869.jpg";"car_wagon_003_00870.jpg";
"car_wagon_004_00871.jpg";"car_wagon_004_00872.jpg";"car_wagon_004_00873.jpg";"car_wagon_004_00874.jpg";"car_wagon_004_00875.jpg";"car_wagon_004_00876.jpg";"car_wagon_004_00877.jpg";"car_wagon_004_00878.jpg";"car_wagon_004_00879.jpg";"car_wagon_004_00880.jpg";
"car_wagon_005_00881.jpg";"car_wagon_005_00882.jpg";"car_wagon_005_00883.jpg";"car_wagon_005_00884.jpg";"car_wagon_005_00885.jpg";"car_wagon_005_00886.jpg";"car_wagon_005_00887.jpg";"car_wagon_005_00888.jpg";"car_wagon_005_00889.jpg";"car_wagon_005_00890.jpg";
"car_wagon_006_00891.jpg";"car_wagon_006_00892.jpg";"car_wagon_006_00893.jpg";"car_wagon_006_00894.jpg";"car_wagon_006_00895.jpg";"car_wagon_006_00896.jpg";"car_wagon_006_00897.jpg";"car_wagon_006_00898.jpg";"car_wagon_006_00899.jpg";"car_wagon_006_00900.jpg";
"car_wagon_007_00901.jpg";"car_wagon_007_00902.jpg";"car_wagon_007_00903.jpg";"car_wagon_007_00904.jpg";"car_wagon_007_00905.jpg";"car_wagon_007_00906.jpg";"car_wagon_007_00907.jpg";"car_wagon_007_00908.jpg";"car_wagon_007_00909.jpg";"car_wagon_007_00910.jpg";
"car_wagon_008_00911.jpg";"car_wagon_008_00912.jpg";"car_wagon_008_00913.jpg";"car_wagon_008_00914.jpg";"car_wagon_008_00915.jpg";"car_wagon_008_00916.jpg";"car_wagon_008_00917.jpg";"car_wagon_008_00918.jpg";"car_wagon_008_00919.jpg";"car_wagon_008_00920.jpg";
"car_wagon_009_00921.jpg";"car_wagon_009_00922.jpg";"car_wagon_009_00923.jpg";"car_wagon_009_00924.jpg";"car_wagon_009_00925.jpg";"car_wagon_009_00926.jpg";"car_wagon_009_00927.jpg";"car_wagon_009_00928.jpg";"car_wagon_009_00929.jpg";"car_wagon_009_00930.jpg";
       };
      };
      int_Data @[10] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="oid_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;942;943;944;945;946;947;948;949;
950;951;952;953;954;955;956;957;958;959;
960;961;962;963;964;965;966;967;968;969;
970;971;972;973;974;975;976;977;978;979;
980;981;982;983;984;985;986;987;988;989;
990;991;992;993;994;995;996;997;998;999;
1000;1001;1002;1003;1004;1005;1006;1007;1008;1009;
1010;1011;1012;1013;1014;1015;1016;1017;1018;1019;
1020;1021;1022;1023;1024;1025;1026;1027;1028;1029;
1030;1031;1032;1033;1034;1035;1036;1037;1038;1039;
1040;1041;1042;1043;1044;1045;1046;1047;1048;1049;
1050;1051;1052;1053;1054;1055;1056;1057;1058;1059;
1060;1061;1062;1063;1064;1065;1066;1067;1068;1069;
1070;1071;1072;1073;1074;1075;1076;1077;1078;1079;
1080;1081;1082;1083;1084;1085;1086;1087;1088;1089;
1090;1091;1092;1093;1094;1095;1096;1097;1098;1099;
1100;1101;1102;1103;1104;1105;1106;1107;1108;1109;
1110;1111;1112;1113;1114;1115;1116;1117;1118;1119;
1120;1121;1122;1123;1124;1125;1126;1127;1128;1129;
1130;1131;1132;1133;1134;1135;1136;1137;1138;1139;
1140;1141;1142;1143;1144;1145;1146;1147;1148;1149;
1150;1151;1152;1153;1154;1155;1156;1157;1158;1159;
1160;1161;1162;1163;1164;1165;1166;1167;1168;1169;
1170;1171;1172;1173;1174;1175;1176;1177;1178;1179;
1180;1181;1182;1183;1184;1185;1186;1187;1188;1189;
1190;1191;1192;1193;1194;1195;1196;1197;1198;1199;
1200;1201;1202;1203;1204;1205;1206;1207;1208;1209;
1210;1211;1212;1213;1214;1215;1216;1217;1218;1219;
1220;1221;1222;1223;1224;1225;1226;1227;1228;1229;
1230;1231;1232;1233;1234;1235;1236;1237;1238;1239;
1240;1241;1242;1243;1244;1245;1246;1247;1248;1249;
1250;1251;1252;1253;1254;1255;1256;1257;1258;1259;
1260;1261;1262;1263;1264;1265;1266;1267;1268;1269;
1270;1271;1272;1273;1274;1275;1276;1277;1278;1279;
1280;1281;1282;1283;1284;1285;1286;1287;1288;1289;
1290;1291;1292;1293;1294;1295;1296;1297;1298;1299;
1300;1301;1302;1303;1304;1305;1306;1307;1308;1309;
1310;1311;1312;1313;1314;1315;1316;1317;1318;1319;
       };
      };
      int_Data @[11] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="supercat_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
       };
      };
      int_Data @[12] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="category_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
       };
      };
      int_Data @[13] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="subcat_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
       };
      };
      int_Data @[14] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="feature1_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] 2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
       };
      };
      int_Data @[15] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="feature2_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
       };
      };
      int_Data @[16] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="feature3_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
       };
      };
      int_Data @[17] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="feature4_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
       };
      };
      int_Data @[18] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="catsubcat_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
       };
      };
      int_Data @[19] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="individual_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1320] 0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;1;1;1;1;1;
2;2;2;2;2;2;2;2;2;2;
3;3;3;3;3;3;3;3;3;3;
4;4;4;4;4;4;4;4;4;4;
5;5;5;5;5;5;5;5;5;5;
6;6;6;6;6;6;6;6;6;6;
7;7;7;7;7;7;7;7;7;7;
8;8;8;8;8;8;8;8;8;8;
9;9;9;9;9;9;9;9;9;9;
10;10;10;10;10;10;10;10;10;10;
11;11;11;11;11;11;11;11;11;11;
12;12;12;12;12;12;12;12;12;12;
13;13;13;13;13;13;13;13;13;13;
14;14;14;14;14;14;14;14;14;14;
15;15;15;15;15;15;15;15;15;15;
16;16;16;16;16;16;16;16;16;16;
17;17;17;17;17;17;17;17;17;17;
18;18;18;18;18;18;18;18;18;18;
19;19;19;19;19;19;19;19;19;19;
20;20;20;20;20;20;20;20;20;20;
21;21;21;21;21;21;21;21;21;21;
22;22;22;22;22;22;22;22;22;22;
23;23;23;23;23;23;23;23;23;23;
24;24;24;24;24;24;24;24;24;24;
25;25;25;25;25;25;25;25;25;25;
26;26;26;26;26;26;26;26;26;26;
27;27;27;27;27;27;27;27;27;27;
28;28;28;28;28;28;28;28;28;28;
29;29;29;29;29;29;29;29;29;29;
30;30;30;30;30;30;30;30;30;30;
31;31;31;31;31;31;31;31;31;31;
32;32;32;32;32;32;32;32;32;32;
33;33;33;33;33;33;33;33;33;33;
34;34;34;34;34;34;34;34;34;34;
35;35;35;35;35;35;35;35;35;35;
36;36;36;36;36;36;36;36;36;36;
37;37;37;37;37;37;37;37;37;37;
38;38;38;38;38;38;38;38;38;38;
39;39;39;39;39;39;39;39;39;39;
40;40;40;40;40;40;40;40;40;40;
41;41;41;41;41;41;41;41;41;41;
42;42;42;42;42;42;42;42;42;42;
43;43;43;43;43;43;43;43;43;43;
44;44;44;44;44;44;44;44;44;44;
45;45;45;45;45;45;45;45;45;45;
46;46;46;46;46;46;46;46;46;46;
47;47;47;47;47;47;47;47;47;47;
48;48;48;48;48;48;48;48;48;48;
49;49;49;49;49;49;49;49;49;49;
50;50;50;50;50;50;50;50;50;50;
51;51;51;51;51;51;51;51;51;51;
52;52;52;52;52;52;52;52;52;52;
53;53;53;53;53;53;53;53;53;53;
54;54;54;54;54;54;54;54;54;54;
55;55;55;55;55;55;55;55;55;55;
56;56;56;56;56;56;56;56;56;56;
57;57;57;57;57;57;57;57;57;57;
58;58;58;58;58;58;58;58;58;58;
59;59;59;59;59;59;59;59;59;59;
60;60;60;60;60;60;60;60;60;60;
61;61;61;61;61;61;61;61;61;61;
62;62;62;62;62;62;62;62;62;62;
63;63;63;63;63;63;63;63;63;63;
64;64;64;64;64;64;64;64;64;64;
65;65;65;65;65;65;65;65;65;65;
66;66;66;66;66;66;66;66;66;66;
67;67;67;67;67;67;67;67;67;67;
68;68;68;68;68;68;68;68;68;68;
69;69;69;69;69;69;69;69;69;69;
70;70;70;70;70;70;70;70;70;70;
71;71;71;71;71;71;71;71;71;71;
72;72;72;72;72;72;72;72;72;72;
73;73;73;73;73;73;73;73;73;73;
74;74;74;74;74;74;74;74;74;74;
75;75;75;75;75;75;75;75;75;75;
76;76;76;76;76;76;76;76;76;76;
77;77;77;77;77;77;77;77;77;77;
78;78;78;78;78;78;78;78;78;78;
79;79;79;79;79;79;79;79;79;79;
80;80;80;80;80;80;80;80;80;80;
81;81;81;81;81;81;81;81;81;81;
82;82;82;82;82;82;82;82;82;82;
83;83;83;83;83;83;83;83;83;83;
84;84;84;84;84;84;84;84;84;84;
85;85;85;85;85;85;85;85;85;85;
86;86;86;86;86;86;86;86;86;86;
87;87;87;87;87;87;87;87;87;87;
88;88;88;88;88;88;88;88;88;88;
89;89;89;89;89;89;89;89;89;89;
90;90;90;90;90;90;90;90;90;90;
91;91;91;91;91;91;91;91;91;91;
92;92;92;92;92;92;92;92;92;92;
93;93;93;93;93;93;93;93;93;93;
94;94;94;94;94;94;94;94;94;94;
95;95;95;95;95;95;95;95;95;95;
96;96;96;96;96;96;96;96;96;96;
97;97;97;97;97;97;97;97;97;97;
98;98;98;98;98;98;98;98;98;98;
99;99;99;99;99;99;99;99;99;99;
100;100;100;100;100;100;100;100;100;100;
101;101;101;101;101;101;101;101;101;101;
102;102;102;102;102;102;102;102;102;102;
103;103;103;103;103;103;103;103;103;103;
104;104;104;104;104;104;104;104;104;104;
105;105;105;105;105;105;105;105;105;105;
106;106;106;106;106;106;106;106;106;106;
107;107;107;107;107;107;107;107;107;107;
108;108;108;108;108;108;108;108;108;108;
109;109;109;109;109;109;109;109;109;109;
110;110;110;110;110;110;110;110;110;110;
111;111;111;111;111;111;111;111;111;111;
112;112;112;112;112;112;112;112;112;112;
113;113;113;113;113;113;113;113;113;113;
114;114;114;114;114;114;114;114;114;114;
115;115;115;115;115;115;115;115;115;115;
116;116;116;116;116;116;116;116;116;116;
117;117;117;117;117;117;117;117;117;117;
118;118;118;118;118;118;118;118;118;118;
119;119;119;119;119;119;119;119;119;119;
120;120;120;120;120;120;120;120;120;120;
121;121;121;121;121;121;121;121;121;121;
122;122;122;122;122;122;122;122;122;122;
123;123;123;123;123;123;123;123;123;123;
124;124;124;124;124;124;124;124;124;124;
125;125;125;125;125;125;125;125;125;125;
126;126;126;126;126;126;126;126;126;126;
127;127;127;127;127;127;127;127;127;127;
128;128;128;128;128;128;128;128;128;128;
129;129;129;129;129;129;129;129;129;129;
130;130;130;130;130;130;130;130;130;130;
131;131;131;131;131;131;131;131;131;131;
       };
      };
      float_Data @[20] {
       name="foveate_box";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 2;2;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [2 2 1320] 0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
0;0;1;1;0;0;1;1;0;0;
1;1;0;0;1;1;0;0;1;1;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[1] {
     name="SuperCat";
     desc="An object super-category, with name and unit assignment (= id)";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="supercat";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] "vehicle";       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="supercat_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[2] {
     name="Category";
     desc="An object category, with name and unit assignment (= id)";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="category";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [5] "airplane";"helicopter";"motorcycle";"sedan";"suvanagon";       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="category_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [5] 0;1;2;3;4;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[3] {
     name="SubCat";
     desc="An object sub-category, with name and unit assignment (= id)";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="subcat";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] ;       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="subcat_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[4] {
     name="Feature1";
     desc="first feature value associated with object";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="feature1";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [3] "rotor";"wheel";"wing";       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="feature1_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [3] 0;1;2;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[5] {
     name="Feature2";
     desc="feature value associated with object";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="feature2";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] ;       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="feature2_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[6] {
     name="Feature3";
     desc="feature value associated with object";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="feature3";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] ;       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="feature3_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[7] {
     name="Feature4";
     desc="feature value associated with object";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="feature4";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] ;       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="feature4_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] 0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[8] {
     name="CatSubCat";
     desc="listing of category and subcategory items";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="category";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [5] "airplane";"helicopter";"motorcycle";"sedan";"suvanagon";       };
      };
      String_Data @[1] {
       name="subcat";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [5] ;;;;;       };
      };
      int_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="catsubcat_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [5] 0;1;2;3;4;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[9] {
     name="Individual";
     desc="listing of individual objects (may be multiple images of same object)";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="category";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [132] "airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";"airplane";
"airplane";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";"helicopter";
"helicopter";"helicopter";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";"motorcycle";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";"sedan";
"sedan";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";"suvanagon";
"suvanagon";"suvanagon";       };
      };
      String_Data @[1] {
       name="subcat";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [132] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;       };
      };
      String_Data @[2] {
       name="individual";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [132] "0000";"0001";"0002";"0003";"0004";"0005";"0006";"0007";"0008";"0009";
"0010";"0011";"0012";"0013";"0014";"0015";"0016";"0017";"0018";"0019";
"0020";"0093";"0094";"0095";"0096";"0097";"0098";"0099";"0100";"0101";
"0102";"0103";"0104";"0105";"0106";"0107";"0108";"0109";"0110";"0111";
"0112";"0113";"0114";"0115";"0116";"0117";"0118";"0119";"0120";"0121";
"0122";"0123";"0124";"0125";"0126";"0127";"0128";"0129";"0130";"0131";
"0021";"0022";"0023";"0024";"0025";"0026";"0027";"0036";"0037";"0038";
"0039";"0040";"0041";"0042";"0043";"0044";"0045";"0046";"0047";"0048";
"0049";"0050";"0051";"0052";"0053";"0054";"0055";"0056";"0057";"0058";
"0059";"0028";"0029";"0030";"0031";"0032";"0033";"0034";"0035";"0060";
"0061";"0062";"0063";"0064";"0065";"0066";"0067";"0068";"0069";"0070";
"0071";"0072";"0073";"0074";"0075";"0076";"0077";"0078";"0079";"0080";
"0081";"0082";"0083";"0084";"0085";"0086";"0087";"0088";"0089";"0090";
"0091";"0092";       };
      };
      int_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="individual_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [132] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;       };
      };
      int_Data @[4] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="catsubcat_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [132] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;       };
      };
      int_Data @[5] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="category_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [132] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;       };
      };
      int_Data @[6] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="subcat_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [132] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[10] {
     name="TrainItems";
     desc="ids of items selected for training set";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       name="oid_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [820] 9;4;5;6;8;2;7;0;3;1;
30;38;37;34;36;39;32;35;33;31;
54;55;59;50;58;57;51;52;56;53;
62;67;60;63;61;65;68;66;64;69;
73;79;71;78;74;77;76;75;70;72;
98;97;99;95;92;94;96;90;93;91;
109;105;102;107;103;101;100;104;106;108;
125;122;126;123;121;120;124;129;128;127;
149;148;147;146;145;142;144;143;141;140;
177;176;179;175;173;172;174;178;170;171;
189;187;186;185;183;182;181;188;184;180;
229;227;226;225;223;222;221;228;224;220;
269;267;266;265;268;264;262;261;260;263;
289;287;286;285;288;283;284;282;281;280;
298;299;297;296;295;294;292;290;293;291;
329;327;326;325;328;323;324;322;321;320;
349;348;347;346;345;344;343;342;341;340;
359;358;357;356;355;353;352;351;350;354;
369;368;367;366;365;363;362;361;364;360;
389;388;387;386;385;384;383;382;381;380;
409;408;407;406;405;403;402;401;404;400;
419;418;417;416;415;413;412;411;414;410;
439;438;437;436;435;433;432;431;434;430;
449;448;447;446;445;443;442;441;444;440;
459;458;457;456;455;453;452;451;454;450;
499;498;497;496;495;493;492;491;494;490;
510;519;518;517;516;515;514;513;512;511;
529;528;527;526;525;523;522;521;520;524;
579;578;577;576;575;573;574;572;571;570;
589;588;587;586;585;584;583;582;581;580;
619;618;617;616;615;613;614;612;611;610;
649;648;647;646;645;643;642;641;640;644;
659;658;657;656;655;653;654;652;651;650;
669;668;667;666;665;664;663;662;661;660;
679;678;677;676;675;674;673;672;671;670;
699;698;697;696;695;694;693;692;691;690;
719;718;717;716;715;714;713;712;711;710;
729;728;727;726;725;724;723;722;721;720;
749;748;747;746;745;744;743;742;741;740;
759;758;757;756;755;754;753;752;751;750;
769;768;767;766;765;764;763;762;761;760;
789;788;787;786;785;784;783;782;781;780;
809;808;807;806;805;804;803;802;801;800;
829;828;827;826;825;824;823;822;821;820;
839;838;837;836;835;834;833;832;831;830;
849;848;847;846;845;844;843;842;841;840;
869;868;867;866;865;864;863;862;861;860;
879;878;877;876;875;874;873;872;871;870;
889;888;887;886;885;884;883;882;881;880;
899;898;897;896;895;894;893;892;891;890;
909;908;907;906;905;904;903;902;901;900;
929;928;927;926;925;924;923;922;921;920;
939;938;937;936;935;934;933;932;931;930;
949;948;947;946;945;944;943;942;941;940;
959;958;957;956;955;954;953;952;951;950;
969;968;967;966;965;964;963;962;961;960;
979;978;977;976;975;974;973;972;971;970;
989;988;987;986;985;984;983;982;981;980;
999;998;997;996;995;994;993;992;991;990;
1009;1008;1007;1006;1005;1004;1003;1002;1001;1000;
1019;1018;1017;1016;1015;1014;1013;1012;1011;1010;
1022;1021;1020;1029;1028;1027;1026;1025;1024;1023;
1039;1038;1037;1036;1035;1034;1033;1032;1031;1030;
1049;1048;1047;1046;1045;1044;1043;1042;1041;1040;
1059;1058;1057;1056;1055;1054;1053;1052;1051;1050;
1069;1068;1067;1066;1065;1064;1063;1062;1061;1060;
1079;1078;1077;1076;1075;1074;1073;1072;1071;1070;
1089;1088;1087;1086;1085;1084;1083;1082;1081;1080;
1099;1098;1097;1096;1095;1094;1093;1092;1091;1090;
1139;1138;1137;1136;1135;1134;1133;1132;1131;1130;
1149;1148;1147;1146;1145;1144;1143;1142;1141;1140;
1169;1168;1167;1166;1165;1164;1163;1162;1161;1160;
1179;1178;1177;1176;1175;1174;1173;1172;1171;1170;
1189;1188;1187;1186;1185;1184;1183;1182;1181;1180;
1199;1198;1197;1196;1195;1194;1193;1192;1191;1190;
1229;1228;1227;1226;1225;1224;1223;1222;1221;1220;
1239;1238;1237;1236;1235;1234;1233;1232;1231;1230;
1269;1268;1267;1266;1265;1264;1263;1262;1261;1260;
1289;1288;1287;1286;1285;1284;1283;1282;1281;1280;
1299;1298;1297;1296;1295;1294;1293;1292;1291;1290;
1309;1308;1307;1306;1305;1304;1303;1302;1301;1300;
1319;1318;1317;1316;1315;1314;1313;1312;1311;1310;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[11] {
     name="TestItems";
     desc="ids of items selected for test set";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       name="oid_id";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [500] 11;14;13;16;10;12;18;17;15;19;
21;28;24;29;23;25;27;22;20;26;
46;48;44;43;45;47;42;40;49;41;
87;85;89;82;83;88;86;81;84;80;
117;119;116;110;111;112;118;114;113;115;
139;138;136;137;132;130;133;135;131;134;
157;159;158;156;151;153;152;150;155;154;
168;169;167;166;165;164;162;161;160;163;
199;197;196;195;193;192;191;198;190;194;
208;209;207;206;205;203;202;204;200;201;
217;216;219;215;213;212;214;218;210;211;
239;237;236;235;233;232;234;238;230;231;
248;249;247;246;245;243;242;244;240;241;
253;252;254;250;251;258;259;257;255;256;
279;278;277;276;275;274;272;271;270;273;
309;307;306;305;308;303;302;301;304;300;
319;318;317;316;315;314;312;310;313;311;
339;338;337;336;335;333;332;331;334;330;
379;378;377;376;375;373;372;371;374;370;
399;398;397;396;395;393;392;391;394;390;
429;428;427;426;425;424;423;422;421;420;
469;468;467;466;465;464;463;462;461;460;
479;478;477;476;475;473;472;471;474;470;
489;488;487;486;485;483;482;481;484;480;
509;508;507;506;505;504;503;502;501;500;
539;538;537;536;535;533;534;532;531;530;
549;548;547;546;545;544;543;542;541;540;
559;558;557;556;555;553;554;552;551;550;
569;568;567;566;565;563;562;561;560;564;
599;598;597;596;595;593;594;592;591;590;
609;608;607;606;605;603;602;601;600;604;
629;628;627;626;625;624;623;622;621;620;
639;638;637;636;635;633;634;632;631;630;
689;688;687;686;685;684;683;682;681;680;
709;708;707;706;705;704;703;702;701;700;
739;738;737;736;735;734;733;732;731;730;
779;778;777;776;775;774;773;772;771;770;
799;798;797;796;795;794;793;792;791;790;
819;818;817;816;815;814;813;812;811;810;
859;858;857;856;855;854;853;852;851;850;
919;918;917;916;915;914;913;912;911;910;
1109;1108;1107;1106;1105;1104;1103;1102;1101;1100;
1119;1118;1117;1116;1115;1114;1113;1112;1111;1110;
1129;1128;1127;1126;1125;1124;1123;1122;1121;1120;
1159;1158;1157;1156;1155;1154;1153;1152;1151;1150;
1209;1208;1207;1206;1205;1204;1203;1202;1201;1200;
1219;1218;1217;1216;1215;1214;1213;1212;1211;1210;
1249;1248;1247;1246;1245;1244;1243;1242;1241;1240;
1259;1258;1257;1256;1255;1254;1253;1252;1251;1250;
1279;1278;1277;1276;1275;1274;1273;1272;1271;1270;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  step_prog=NULL;
  tags=;
  desc=;
  Program_Group @.gp[0] {
   name="LeabraAll_Vision";
   el_typ=Program;
   el_def=0;
   step_prog=$7$;
   tags=;
   desc="The full set of programs for training a standard Leabra network: vision model version";
   Program @[0] {
    name="LeabraBatch";
    tags="Leabra, Std";
    desc="Iterate over training runs";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][0]$23$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="max_batch";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="batch counter";
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc=;
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$24$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$25$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc=;
      flags=;
      network_var=$24$;
      local_ctr_var=$25$;
      counter=Network::batch;
      update_after=0;
     };
     WhileLoop @[1] {
      desc=;
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=$6$;
	targ_ld_init="*VisionTrain*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc=;
	flags=;
	network_var=$24$;
	local_ctr_var=$25$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
   };
   Program @[1] {
    name="VisionTrain";
    tags="Leabra, Vision";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task
vision model version";
    flags=SHOW_STEP|STARTUP_RUN;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;      };
      mti=156;
     };
     TimeUsedHR @[1] {name="total_time_used": s_used=0: n_used=0: };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$23$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="lesson_id";
      var_type=T_String;
      string_val="veh3d_nb_lr20_nsc";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="id of lesson plan to use";
     };
     ProgVar @[1] {
      name="ActiveLesson";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[0][2]$26$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="TrainItems";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[1][10]$27$;
      objs_ptr=0;
      flags=NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="TestItems";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[1][11]$28$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="ObjectImageData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[1][0]$29$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="image_train_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][4]$30$;
      objs_ptr=0;
      flags=USED;
      reference=0;
      desc="for datatable-based image sets: training or complete data";
     };
     ProgVar @[6] {
      name="image_test_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][5]$31$;
      objs_ptr=0;
      flags=USED;
      reference=0;
      desc="for datatable-based image sets: testing data (if spec'd)";
     };
     ProgVar @[7] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[8] {
      name="test_mode";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[9] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[10] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[11] {
      name="log_trials";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Whether to keep training trial data in the log";
     };
     ProgVar @[12] {
      name="test_all";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="instead of doing regular training program, just run a mega test, first of all the training items, and second of all the testing items -- only makes sense when loading weights and implies log_trials=true";
     };
     ProgVar @[13] {
      name="tag";
      var_type=T_String;
      string_val="_gui";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="extra id tag for log file names";
     };
     ProgVar @[14] {
      name="oid_filename";
      var_type=T_String;
      string_val="images/veh3d_lr20_nb/Veh3d_nosubcat.dat";
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[15] {
      name="weights_filename";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[16] {
      name="load_specs";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[17] {
      name="new_seed";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[18] {
      name="train_size";
      var_type=T_Int;
      int_val=-1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[19] {
      name="test_size";
      var_type=T_Int;
      int_val=-1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[20] {
      name="split_on_indivs";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[21] {
      name="train_epochs";
      var_type=T_Int;
      int_val=350;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[22] {
      name="test_modulus";
      var_type=T_Int;
      int_val=20;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[23] {
      name="test_final";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[24] {
      name="train_nreps";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[25] {
      name="test_nreps";
      var_type=T_Int;
      int_val=7;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[26] {
      name="epoch_trials";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[27] {
      name="lrs_step_epochs";
      var_type=T_Int;
      int_val=50;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[28] {
      name="self_org_epochs";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[29] {
      name="err_mvl_mix";
      var_type=T_Real;
      real_val=0.004999999888241291;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[30] {
      name="save_weights_modulus";
      var_type=T_Int;
      int_val=50;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[31] {
      name="train_transform_id";
      var_type=T_String;
      string_val="vehicle";
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[32] {
      name="test_transform_id";
      var_type=T_String;
      string_val="vehicle";
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fm lesson";
     };
     ProgVar @[33] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[0][1].objs[0]$32$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[34] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].train_time$33$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[35] {
      name="epoch_log_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][2]$34$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="output datatable for epoch data";
     };
     ProgVar @[36] {
      name="trial_log_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][0]$35$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="output datatable for trial data";
     };
     ProgVar @[37] {
      name="object_output_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][1]$36$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="output datatable for object output data";
     };
     ProgVar @[38] {
      name="log_subdir";
      var_type=T_String;
      string_val="log/";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="subdirectory for log files";
     };
     ProgVar @[39] {
      name="epoch_log";
      var_type=T_String;
      string_val="/Users/oreilly/emergent/bench/css/log/css_hv_bench_gui.epc.dat";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="name of epoch log file";
     };
     ProgVar @[40] {
      name="train_trial_log";
      var_type=T_String;
      string_val="/Users/oreilly/svn_sims/perception/objrec/log/hv_v1gp4x3_hi1sp_rf4_gui.trn.trl.dat";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="training trial log";
     };
     ProgVar @[41] {
      name="train_object_log";
      var_type=T_String;
      string_val="/Users/oreilly/svn_sims/perception/objrec/log/hv_v1gp4x3_hi1sp_rf4_gui.trn.obj.dat";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="training trial log";
     };
     ProgVar @[42] {
      name="test_trial_log";
      var_type=T_String;
      string_val="/Users/oreilly/svn_sims/perception/objrec/log/hv_v1gp4x3_hi1sp_rf4_gui.tst.trl.dat";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="testing trial log (not final)";
     };
     ProgVar @[43] {
      name="test_object_log";
      var_type=T_String;
      string_val="/Users/oreilly/svn_sims/perception/objrec/log/hv_v1gp4x3_hi1sp_rf4_gui.tst.obj.dat";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="testing trial log (not final)";
     };
     ProgVar @[44] {
      name="final_test_trial_log";
      var_type=T_String;
      string_val="/Users/oreilly/svn_sims/perception/objrec/log/hv_v1gp4x3_hi1sp_rf4_gui.fnl.trl.dat";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="final testing trial log ";
     };
     ProgVar @[45] {
      name="final_test_object_log";
      var_type=T_String;
      string_val="/Users/oreilly/svn_sims/perception/objrec/log/hv_v1gp4x3_hi1sp_rf4_gui.fnl.obj.dat";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="final testing trial log ";
     };
     ProgVar @[46] {
      name="Lesson";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[0][0]$37$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[47] {
      name="LeabraConSpec_0";
      var_type=T_Object;
      object_type=LeabraConSpec;
      object_val=$8$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[48] {
      name="total_time_used";
      var_type=T_Object;
      object_type=TimeUsedHR;
      object_val=.projects[0].programs.gp[0][1].objs[1]$38$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
     Function @[0] {
      desc="parse oid_filename to get image data tables instead of file name..";
      flags=;
      name="GetImageDataTables";
      return_type=T_Int;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="oid_fnm";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc="the oid_filename value to parse";
       };
      };
      fun_code {
       name=;
       el_typ=ProgVars;
       el_def=0;
       ProgVars @[0] {
	desc=;
	flags=;
	local_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @[0] {
	  name="trn_name";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[1] {
	  name="tst_name";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[2] {
	  name="input_dt_gp";
	  var_type=T_Object;
	  object_type=DataTable_Group;
	  object_val=NULL;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	};
       };
       AssignExpr @[1] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][1].functions[0].fun_code[0].local_vars[2]$39$;
	expr {
	 expr=".projects[0].data.gp.InputData";
	};
       };
       AssignExpr @[2] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][1].functions[0].fun_code[0].local_vars[0]$40$;
	expr {
	 expr="oid_fnm.after(\"DATA:\")";
	};
       };
       If @[3] {
	desc=;
	flags=;
	cond {
	 expr="trn_name.contains(\",\")";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][1].functions[0].fun_code[0].local_vars[1]$41$;
	  expr {
	   expr="trn_name.after(\"TEST:\")";
	  };
	 };
	 AssignExpr @[1] {
	  desc=;
	  flags=;
	  result_var=$40$;
	  expr {
	   expr="trn_name.before(\",\")";
	  };
	 };
	};
       };
       MethodCall @[4] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][1].vars[5]$42$;
	obj=$39$;
	method=taGroup_DataTable_::FindName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="item_nm";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="trn_name";
	  };
	 };
	};
       };
       IfElse @[5] {
	desc=;
	flags=;
	cond {
	 expr="tst_name.nonempty()";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][1].vars[6]$43$;
	  obj=$39$;
	  method=taGroup_DataTable_::FindName;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="item_nm";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="tst_name";
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=$43$;
	  expr {
	   expr="NULL";
	  };
	 };
	};
       };
      };
     };
     Function @[1] {
      desc="configure self-organizing learning guy";
      flags=;
      name="SelfOrgConfig";
      return_type=T_Int;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="turn_on";
	var_type=T_Bool;
	bool_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc="whether to turn on self org or off";
       };
      };
      fun_code {
       name=;
       el_typ=ProgVars;
       el_def=0;
       ProgVars @[0] {
	desc=;
	flags=;
	local_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @[0] {
	  name="Output_lay";
	  var_type=T_Object;
	  object_type=LeabraLayer;
	  object_val=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[1] {
	  name="conspec";
	  var_type=T_Object;
	  object_type=LeabraConSpec;
	  object_val=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	};
       };
       AssignExpr @[1] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][1].functions[1].fun_code[0].local_vars[0]$44$;
	expr {
	 expr="network.layers.Output";
	};
       };
       AssignExpr @[2] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][1].functions[1].fun_code[0].local_vars[1]$45$;
	expr {
	 expr="network.specs.LeabraConSpec_0";
	};
       };
       IfElse @[3] {
	desc=;
	flags=;
	cond {
	 expr="turn_on";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=OFF;
	  result_var=NULL;
	  obj=$44$;
	  method=LeabraLayer::SetLayerFlag;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=Layer::LayerFlags;
	    type="Layer::LayerFlags";
	    name="flg";
	    required=0;
	    def_val=;
	    expr {
	     expr="Layer::LESIONED";
	    };
	   };
	  };
	 };
	 MemberAssign @[1] {
	  desc=;
	  flags=;
	  obj=$44$;
	  path="layer_type";
	  expr {
	   expr="Layer::INPUT";
	  };
	  update_after=0;
	 };
	 MemberAssign @[2] {
	  desc="1.0 = full self organizing learning: no short versus medium";
	  flags=;
	  obj=$45$;
	  path="xcal.mvl_mix";
	  expr {
	   expr="1.0";
	  };
	  update_after=1;
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=OFF;
	  result_var=NULL;
	  obj=$44$;
	  method=LeabraLayer::ClearLayerFlag;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=Layer::LayerFlags;
	    type="Layer::LayerFlags";
	    name="flg";
	    required=0;
	    def_val=;
	    expr {
	     expr="Layer::LESIONED";
	    };
	   };
	  };
	 };
	 MemberAssign @[1] {
	  desc=;
	  flags=;
	  obj=$44$;
	  path="layer_type";
	  expr {
	   expr="Layer::TARGET";
	  };
	  update_after=0;
	 };
	 MemberAssign @[2] {
	  desc="err driven mdoe";
	  flags=;
	  obj=$45$;
	  path="xcal.mvl_mix";
	  expr {
	   expr="err_mvl_mix";
	  };
	  update_after=1;
	 };
	};
       };
      };
     };
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].args[2]$46$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc=;
      flags=OFF;
      result_var=NULL;
      obj=$0$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[34]$47$;
      expr {
       expr="network.train_time";
      };
     };
     NetCounterInit @[3] {
      desc="initialize epoch counter ";
      flags=;
      network_var=$0$;
      local_ctr_var=.projects[0].programs.gp[0][1].vars[9]$48$;
      counter=Network::epoch;
      update_after=0;
     };
     MethodCall @[4] {
      desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].vars[33]$49$;
      method=RndSeed::OldSeed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfGuiPrompt @[5] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$0$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].vars[48]$50$;
      method=TimeUsedHR::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     NetCounterInit @[1] {
      desc="Initialize epoch counter ";
      flags=;
      network_var=$0$;
      local_ctr_var=$48$;
      counter=Network::epoch;
      update_after=0;
     };
     AssignExpr @[2] {
      desc=;
      flags=;
      result_var=$47$;
      expr {
       expr="network.train_time";
      };
     };
     CodeBlock @[3] {
      desc="Initialize ActiveLesson for access";
      flags=;
      prog_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ResetDataRows @[0] {
	desc=;
	flags=;
	data_var=.projects[0].programs.gp[0][1].vars[1]$51$;
       };
       DataSelectRowsProg @[1] {
	desc="Copy the Active Lesson record from the main table";
	flags=;
	src_data_var=.projects[0].programs.gp[0][1].vars[46]$52$;
	dest_data_var=$51$;
	select_spec {
	 name="select_spec";
	 ops {
	  name=;
	  el_typ=DataSelectEl;
	  el_def=0;
	  DataSelectEl @[0] {
	   col_name="lesson_id";
	   rel=EQUAL;
	   use_var=1;
	   cmp 9 0="veh3d_nb_lr20_nsc";
	   var=$2$;
	  };
	 };
	 comb_op=AND;
	};
       };
       IfElse @[2] {
	desc="couldn't get lesson!";
	flags=;
	cond {
	 expr="ActiveLesson.rows == 0";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MiscCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  object_type=taMisc;
	  method=taMisc::Error;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="a";
	    required=1;
	    def_val=;
	    expr {
	     expr="\"lesson:\"";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="b";
	    required=0;
	    def_val="0";
	    expr {
	     expr="lesson_id";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="c";
	    required=0;
	    def_val="0";
	    expr {
	     expr="\"could not be found! cannot proceed!\"";
	    };
	   };
	   ProgArg @[3] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="d";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[4] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="e";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[5] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="f";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[6] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="g";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[7] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="h";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[8] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="i";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
       MethodCall @[3] {
	desc="Read the Active Lesson Record";
	flags=;
	result_var=NULL;
	obj=$51$;
	method=DataBlock_Idx::ReadItem;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="idx";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
      };
     };
     Comment @[4] {
      desc="******* READ VARS FM LESSON *******";
      flags=;
     };
     DataVarProg @[5] {
      desc="oia_filename, weights_filename, load_specs";
      flags=;
      data_var=$51$;
      set_data=0;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][1].vars[14]$53$;
      var_2=.projects[0].programs.gp[0][1].vars[15]$54$;
      var_3=.projects[0].programs.gp[0][1].vars[16]$55$;
      var_4=NULL;
     };
     DataVarProg @[6] {
      desc="new_split, train_size, test_size";
      flags=;
      data_var=$51$;
      set_data=0;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][1].vars[17]$56$;
      var_2=.projects[0].programs.gp[0][1].vars[18]$57$;
      var_3=.projects[0].programs.gp[0][1].vars[19]$58$;
      var_4=.projects[0].programs.gp[0][1].vars[20]$59$;
     };
     DataVarProg @[7] {
      desc="train_epochs, test_modulus, test_final, log_final_test";
      flags=;
      data_var=$51$;
      set_data=0;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][1].vars[21]$60$;
      var_2=.projects[0].programs.gp[0][1].vars[22]$61$;
      var_3=.projects[0].programs.gp[0][1].vars[23]$62$;
      var_4=NULL;
     };
     DataVarProg @[8] {
      desc="epoch_trials, test_nreps";
      flags=;
      data_var=$51$;
      set_data=0;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][1].vars[26]$63$;
      var_2=.projects[0].programs.gp[0][1].vars[24]$64$;
      var_3=.projects[0].programs.gp[0][1].vars[25]$65$;
      var_4=NULL;
     };
     DataVarProg @[9] {
      desc="lrate_epoch, save_weights_modulus";
      flags=;
      data_var=$51$;
      set_data=0;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][1].vars[27]$66$;
      var_2=NULL;
      var_3=.projects[0].programs.gp[0][1].vars[30]$67$;
      var_4=NULL;
     };
     DataVarProg @[10] {
      desc="lrate_epoch, save_weights_modulus";
      flags=;
      data_var=$51$;
      set_data=0;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][1].vars[28]$68$;
      var_2=.projects[0].programs.gp[0][1].vars[29]$69$;
      var_3=NULL;
      var_4=NULL;
     };
     DataVarProg @[11] {
      desc="transform_id's";
      flags=;
      data_var=$51$;
      set_data=0;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][1].vars[31]$70$;
      var_2=.projects[0].programs.gp[0][1].vars[32]$71$;
      var_3=NULL;
      var_4=NULL;
     };
     If @[12] {
      desc=;
      flags=;
      cond {
       expr="new_seed";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$49$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     OtherProgramVar @[13] {
      desc=;
      flags=;
      other_prog=.projects[0].programs.gp[0][3]$72$;
      set_other=1;
      var_1=$65$;
      var_2=$64$;
      var_3=NULL;
      var_4=NULL;
     };
     FunctionCall @[14] {
      desc=;
      flags=;
      result_var=NULL;
      fun=.projects[0].programs.gp[0][1].functions[1]$73$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="turn_on";
	required=1;
	def_val=;
	expr {
	 expr="false";
	};
       };
      };
     };
     If @[15] {
      desc=;
      flags=;
      cond {
       expr="test_all";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][1].vars[11]$74$;
	expr {
	 expr="true";
	};
       };
      };
     };
     IfElse @[16] {
      desc="Load an OID file if appropriate";
      flags=OFF;
      cond {
       expr="(ObjectImageData.rows==0) || (oid_filename.nonempty())";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       IfElse @[0] {
	desc=;
	flags=;
	cond {
	 expr="oid_filename.startsWith(\"DATA:\")";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 FunctionCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  fun=.projects[0].programs.gp[0][1].functions[0]$75$;
	  fun_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taString;
	    type="String";
	    name="oid_fnm";
	    required=1;
	    def_val=;
	    expr {
	     expr="oid_filename";
	    };
	   };
	  };
	 };
	 ProgramCall @[1] {
	  desc=;
	  flags=;
	  target=.projects[0].programs.gp[1][1]$76$;
	  targ_ld_init="*ConfigInputFmImgTables*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="train_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="image_train_data";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="test_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="image_test_data";
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="Import the specified oia file";
	  flags=;
	  target=.projects[0].programs.gp[1][0]$77$;
	  targ_ld_init="*Import OIA*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taString;
	    type="String";
	    name="oid_filename";
	    required=1;
	    def_val=;
	    expr {
	     expr="oid_filename";
	    };
	   };
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     ProgramCall @[17] {
      desc="Split the items -- always do this just to be sure -- if old seed, get same split..";
      flags=OFF;
      target=.projects[0].programs.gp[1][2]$78$;
      targ_ld_init="*Split Items*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="NTrain";
	required=1;
	def_val=;
	expr {
	 expr="train_size";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="NTest";
	required=1;
	def_val=;
	expr {
	 expr="test_size";
	};
       };
       ProgArg @[2] {
	arg_type=bool;
	type="bool";
	name="split_on_indivs";
	required=1;
	def_val=;
	expr {
	 expr="split_on_indivs";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="new_seed";
	required=1;
	def_val=;
	expr {
	 expr="new_seed";
	};
       };
       ProgArg @[4] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     ProgramCall @[18] {
      desc="label output and target units";
      flags=;
      target=.projects[0].programs.gp[1][4]$79$;
      targ_ld_init="*LabelOutputs*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     MethodCall @[19] {
      desc="Start the train timer";
      flags=;
      result_var=NULL;
      obj=$47$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     IfElse @[20] {
      desc="Only run each item once in a test epoch";
      flags=;
      cond {
       expr="TestItems.rows > epoch_trials";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="Cap testing trials at epoch size";
	flags=;
	result_var=$58$;
	expr {
	 expr="epoch_trials";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="Test uses all items";
	flags=;
	result_var=$58$;
	expr {
	 expr="-1";
	};
       };
      };
     };
     IfElse @[21] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$0$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     IfElse @[22] {
      desc="Load  weights if file is specified";
      flags=;
      cond {
       expr="weights_filename != \"\"";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="Load weights from the specified file";
	flags=;
	result_var=NULL;
	obj=$0$;
	method=Network::LoadWeights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="fname";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="weights_filename";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="quiet";
	  required=0;
	  def_val="false";
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       PrintVar @[1] {
	desc=;
	flags=;
	message="loaded weights file:";
	print_var=$54$;
	print_var2=NULL;
	print_var3=NULL;
	print_var4=NULL;
	print_var5=NULL;
	print_var6=NULL;
       };
       If @[2] {
	desc=;
	flags=;
	cond {
	 expr="load_specs";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 UserScript @[0] {
	  desc="also load specs file, report loading";
	  flags=;
	  script {
	   expr="String specs_filename = weights_filename.before(\".wts.gz\") + \".spec\";
network.specs.Load(specs_filename);
cerr << \"loaded specs file: \" << specs_filename << endl;
";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     AssignExpr @[23] {
      desc="get epoch counter from loaded network";
      flags=;
      result_var=$48$;
      expr {
       expr="network.epoch";
      };
     };
     AssignExpr @[24] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[47]$80$;
      expr {
       expr="network.specs.LeabraConSpec_0";
      };
     };
     MethodCall @[25] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$80$;
      method=LeabraConSpec::LogLrateSched;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="epcs_per_step";
	required=0;
	def_val="50";
	expr {
	 expr="lrs_step_epochs";
	};
       };
       ProgArg @[1] {
	arg_type=float;
	type="float";
	name="n_steps";
	required=0;
	def_val="7";
	expr {
	 expr="7";
	};
       };
      };
     };
     MethodCall @[26] {
      desc="set epoch log file name";
      flags=OFF;
      result_var=.projects[0].programs.gp[0][1].vars[39]$81$;
      obj=.projects[0].programs.gp[0][1].vars[35]$82$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".epc.dat\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="log_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[27] {
      desc="set epoch data log ";
      flags=OFF;
      result_var=NULL;
      obj=$82$;
      method=DataTable::SaveDataLog;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="epoch_log";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="append";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
       ProgArg @[2] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_0";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[28] {
      desc="set train trial log file name";
      flags=OFF;
      result_var=.projects[0].programs.gp[0][1].vars[40]$83$;
      obj=.projects[0].programs.gp[0][1].vars[36]$84$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".trn.trl.dat\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="log_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[29] {
      desc="set train trial log file name";
      flags=OFF;
      result_var=.projects[0].programs.gp[0][1].vars[41]$85$;
      obj=.projects[0].programs.gp[0][1].vars[37]$86$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".trn.obj.dat\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="log_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
     IfElse @[30] {
      desc=;
      flags=OFF;
      cond {
       expr="log_trials";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="set train trial data log";
	flags=;
	result_var=NULL;
	obj=$84$;
	method=DataTable::SaveDataLog;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="fname";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="train_trial_log";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="append";
	  required=0;
	  def_val="false";
	  expr {
	   expr="false";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="dmem_proc_0";
	  required=0;
	  def_val="true";
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       MethodCall @[1] {
	desc="set train trial data log";
	flags=;
	result_var=NULL;
	obj=$86$;
	method=DataTable::SaveDataLog;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="fname";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="train_object_log";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="append";
	  required=0;
	  def_val="false";
	  expr {
	   expr="false";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="dmem_proc_0";
	  required=0;
	  def_val="true";
	  expr {
	   expr="false";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[31] {
      desc="set test trial log file name";
      flags=OFF;
      result_var=.projects[0].programs.gp[0][1].vars[42]$87$;
      obj=$84$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".tst.trl.dat\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="log_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[32] {
      desc="set test trial log file name";
      flags=OFF;
      result_var=.projects[0].programs.gp[0][1].vars[43]$88$;
      obj=$86$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".tst.obj.dat\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="log_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[33] {
      desc="set test trial data log";
      flags=OFF;
      result_var=NULL;
      obj=$84$;
      method=DataTable::SaveDataLog;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="test_trial_log";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="append";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
       ProgArg @[2] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_0";
	required=0;
	def_val="true";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[34] {
      desc="set test trial data log";
      flags=OFF;
      result_var=NULL;
      obj=$86$;
      method=DataTable::SaveDataLog;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="test_object_log";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="append";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
       ProgArg @[2] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_0";
	required=0;
	def_val="true";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[35] {
      desc="set final test trial log file name";
      flags=OFF;
      result_var=.projects[0].programs.gp[0][1].vars[44]$89$;
      obj=$84$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".fnl.trl.dat\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="log_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[36] {
      desc="set final test trial log file name";
      flags=OFF;
      result_var=.projects[0].programs.gp[0][1].vars[45]$90$;
      obj=$86$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".fnl.obj.dat\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="log_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[37] {
      desc="close trial log";
      flags=OFF;
      result_var=NULL;
      obj=$84$;
      method=DataTable::CloseDataLog;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[38] {
      desc="close trial log";
      flags=OFF;
      result_var=NULL;
      obj=$86$;
      method=DataTable::CloseDataLog;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     Comment @[39] {
      desc="******* TEST_ALL special case *******";
      flags=;
     };
     If @[40] {
      desc=;
      flags=;
      cond {
       expr="test_all";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MemberAssign @[0] {
	desc="set network to testing mode";
	flags=;
	obj=$0$;
	path="train_mode";
	expr {
	 expr="test_mode";
	};
	update_after=0;
       };
       MemberAssign @[1] {
	desc="set output to compare type";
	flags=;
	obj=$0$;
	path="layers.Output.layer_type";
	expr {
	 expr="Layer::OUTPUT";
	};
	update_after=0;
       };
       ProgramCall @[2] {
	desc="use training items but testing transform, -1 = all";
	flags=;
	target=.projects[0].programs.gp[1][3]$91$;
	targ_ld_init="*Build Presentation*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=taString;
	  type="String";
	  name="transform_id";
	  required=1;
	  def_val=;
	  expr {
	   expr="test_transform_id";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="build_rows";
	  required=1;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="is_train";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
       };
       MethodCall @[3] {
	desc="append to train trial data log";
	flags=;
	result_var=NULL;
	obj=$84$;
	method=DataTable::SaveDataLog;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="fname";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="train_trial_log";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="append";
	  required=0;
	  def_val="false";
	  expr {
	   expr="true";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="dmem_proc_0";
	  required=0;
	  def_val="true";
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       MethodCall @[4] {
	desc="append to train trial data log";
	flags=;
	result_var=NULL;
	obj=$86$;
	method=DataTable::SaveDataLog;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="fname";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="train_object_log";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="append";
	  required=0;
	  def_val="false";
	  expr {
	   expr="true";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="dmem_proc_0";
	  required=0;
	  def_val="true";
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       ProgramCall @[5] {
	desc="Run the training epoch";
	flags=;
	target=.projects[0].programs.gp[0][2]$92$;
	targ_ld_init="*LeabraEpoch*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="accumulate_trials";
	  required=1;
	  def_val=;
	  expr {
	   expr="log_trials";
	  };
	 };
	};
       };
       NetCounterIncr @[6] {
	desc="Increment the epoch counter";
	flags=;
	network_var=$0$;
	local_ctr_var=$48$;
	counter=Network::epoch;
	update_after=0;
       };
       IfElse @[7] {
	desc="only if some actual test items to test";
	flags=;
	cond {
	 expr="TestItems.rows > 0";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="Build an epoch of testing presentations";
	  flags=;
	  target=$91$;
	  targ_ld_init="*Build Presentation*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taString;
	    type="String";
	    name="transform_id";
	    required=1;
	    def_val=;
	    expr {
	     expr="test_transform_id";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="build_rows";
	    required=1;
	    def_val=;
	    expr {
	     expr="-1";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="is_train";
	    required=1;
	    def_val=;
	    expr {
	     expr="false";
	    };
	   };
	  };
	 };
	 MethodCall @[1] {
	  desc="append to test trial data log";
	  flags=;
	  result_var=NULL;
	  obj=$84$;
	  method=DataTable::SaveDataLog;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="test_trial_log";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=bool;
	    type="bool";
	    name="append";
	    required=0;
	    def_val="false";
	    expr {
	     expr="true";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="dmem_proc_0";
	    required=0;
	    def_val="true";
	    expr {
	     expr="false";
	    };
	   };
	  };
	 };
	 MethodCall @[2] {
	  desc="append to test trial data log";
	  flags=;
	  result_var=NULL;
	  obj=$86$;
	  method=DataTable::SaveDataLog;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="test_object_log";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=bool;
	    type="bool";
	    name="append";
	    required=0;
	    def_val="false";
	    expr {
	     expr="true";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="dmem_proc_0";
	    required=0;
	    def_val="true";
	    expr {
	     expr="false";
	    };
	   };
	  };
	 };
	 ProgramCall @[3] {
	  desc="Run the test epoch";
	  flags=;
	  target=$92$;
	  targ_ld_init="*LeabraEpoch*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    expr {
	     expr="network";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="input_data";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="accumulate_trials";
	    required=1;
	    def_val=;
	    expr {
	     expr="log_trials";
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
       ReturnExpr @[8] {
	desc=;
	flags=;
	expr {
	 expr=;
	};
       };
      };
     };
     Comment @[41] {
      desc="******* MAIN LOOP *******";
      flags=;
     };
     WhileLoop @[42] {
      desc="Main loop - number of epochs specified";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       Comment @[0] {
	desc="******* TRAINING *******";
	flags=;
       };
       MemberAssign @[1] {
	desc="set output to target type";
	flags=;
	obj=$0$;
	path="layers.Output.layer_type";
	expr {
	 expr="Layer::TARGET";
	};
	update_after=0;
       };
       MemberAssign @[2] {
	desc="set network to training mode";
	flags=;
	obj=$0$;
	path="train_mode";
	expr {
	 expr="train_mode";
	};
	update_after=0;
       };
       IfElse @[3] {
	desc=;
	flags=;
	cond {
	 expr="epoch < self_org_epochs";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 FunctionCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  fun=$73$;
	  fun_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=bool;
	    type="bool";
	    name="turn_on";
	    required=1;
	    def_val=;
	    expr {
	     expr="true";
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 FunctionCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  fun=$73$;
	  fun_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=bool;
	    type="bool";
	    name="turn_on";
	    required=1;
	    def_val=;
	    expr {
	     expr="false";
	    };
	   };
	  };
	 };
	};
       };
       ProgramCall @[4] {
	desc="Build one epoch of training presentations";
	flags=;
	target=$91$;
	targ_ld_init="*Build Presentation*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=taString;
	  type="String";
	  name="transform_id";
	  required=1;
	  def_val=;
	  expr {
	   expr="train_transform_id";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="build_rows";
	  required=1;
	  def_val=;
	  expr {
	   expr="epoch_trials";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="is_train";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
       };
       IfElse @[5] {
	desc=;
	flags=OFF;
	cond {
	 expr="log_trials";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc="append to train trial data log";
	  flags=;
	  result_var=NULL;
	  obj=$84$;
	  method=DataTable::SaveDataLog;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="train_trial_log";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=bool;
	    type="bool";
	    name="append";
	    required=0;
	    def_val="false";
	    expr {
	     expr="true";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="dmem_proc_0";
	    required=0;
	    def_val="true";
	    expr {
	     expr="false";
	    };
	   };
	  };
	 };
	 MethodCall @[1] {
	  desc="append to train trial data log";
	  flags=;
	  result_var=NULL;
	  obj=$86$;
	  method=DataTable::SaveDataLog;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="train_object_log";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=bool;
	    type="bool";
	    name="append";
	    required=0;
	    def_val="false";
	    expr {
	     expr="true";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="dmem_proc_0";
	    required=0;
	    def_val="true";
	    expr {
	     expr="false";
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc="close train trial data log";
	  flags=;
	  result_var=NULL;
	  obj=$84$;
	  method=DataTable::CloseDataLog;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 MethodCall @[1] {
	  desc="close train trial data log";
	  flags=;
	  result_var=NULL;
	  obj=$86$;
	  method=DataTable::CloseDataLog;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
       };
       ProgramCall @[6] {
	desc="Run the training epoch";
	flags=;
	target=$92$;
	targ_ld_init="*LeabraEpoch*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="accumulate_trials";
	  required=1;
	  def_val=;
	  expr {
	   expr="log_trials";
	  };
	 };
	};
       };
       NetCounterIncr @[7] {
	desc="Increment the epoch counter";
	flags=;
	network_var=$0$;
	local_ctr_var=$48$;
	counter=Network::epoch;
	update_after=0;
       };
       IfBreak @[8] {
	desc="Stop if training errors go below stopping criterion";
	flags=OFF;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
       IfElse @[9] {
	desc="Save weights if it's time";
	flags=;
	cond {
	 expr="(save_weights_modulus > 0) && (epoch < train_epochs) && ((epoch % save_weights_modulus) == 0)";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 ProgramCall @[0] {
	  desc=;
	  flags=;
	  target=.projects[0].programs.gp[0][12]$93$;
	  targ_ld_init="*SaveWeightsSpecs*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    expr {
	     expr="network";
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
       Comment @[10] {
	desc="******* TESTING *******";
	flags=;
       };
       IfElse @[11] {
	desc="Run a test if it's time";
	flags=;
	cond {
	 expr="(test_modulus > 0) && (epoch < train_epochs) && ((epoch % test_modulus) == 0)";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MemberAssign @[0] {
	  desc="set network to testing mode";
	  flags=;
	  obj=$0$;
	  path="train_mode";
	  expr {
	   expr="test_mode";
	  };
	  update_after=0;
	 };
	 MemberAssign @[1] {
	  desc="set output to compare type";
	  flags=;
	  obj=$0$;
	  path="layers.Output.layer_type";
	  expr {
	   expr="Layer::OUTPUT";
	  };
	  update_after=0;
	 };
	 IfElse @[2] {
	  desc="if no items to test but test requested, test on training items!!";
	  flags=;
	  cond {
	   expr="TestItems.rows == 0";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   ProgramCall @[0] {
	    desc="use training items but testing transform";
	    flags=;
	    target=$91$;
	    targ_ld_init="*Build Presentation*";
	    prog_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=taString;
	      type="String";
	      name="transform_id";
	      required=1;
	      def_val=;
	      expr {
	       expr="test_transform_id";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=int;
	      type="int";
	      name="build_rows";
	      required=1;
	      def_val=;
	      expr {
	       expr="epoch_trials";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=bool;
	      type="bool";
	      name="is_train";
	      required=1;
	      def_val=;
	      expr {
	       expr="true";
	      };
	     };
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   ProgramCall @[0] {
	    desc="Build an epoch of testing presentations";
	    flags=;
	    target=$91$;
	    targ_ld_init="*Build Presentation*";
	    prog_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=taString;
	      type="String";
	      name="transform_id";
	      required=1;
	      def_val=;
	      expr {
	       expr="test_transform_id";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=int;
	      type="int";
	      name="build_rows";
	      required=1;
	      def_val=;
	      expr {
	       expr="test_size";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=bool;
	      type="bool";
	      name="is_train";
	      required=1;
	      def_val=;
	      expr {
	       expr="false";
	      };
	     };
	    };
	   };
	  };
	 };
	 MethodCall @[3] {
	  desc="append to test trial data log";
	  flags=OFF;
	  result_var=NULL;
	  obj=$84$;
	  method=DataTable::SaveDataLog;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="test_trial_log";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=bool;
	    type="bool";
	    name="append";
	    required=0;
	    def_val="false";
	    expr {
	     expr="true";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="dmem_proc_0";
	    required=0;
	    def_val="true";
	    expr {
	     expr="false";
	    };
	   };
	  };
	 };
	 MethodCall @[4] {
	  desc="append to test trial data log";
	  flags=OFF;
	  result_var=NULL;
	  obj=$86$;
	  method=DataTable::SaveDataLog;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="fname";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="test_object_log";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=bool;
	    type="bool";
	    name="append";
	    required=0;
	    def_val="false";
	    expr {
	     expr="true";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="dmem_proc_0";
	    required=0;
	    def_val="true";
	    expr {
	     expr="false";
	    };
	   };
	  };
	 };
	 ProgramCall @[5] {
	  desc="Run the test epoch";
	  flags=;
	  target=$92$;
	  targ_ld_init="*LeabraEpoch*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    expr {
	     expr="network";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable;
	    type="DataTable*";
	    name="input_data";
	    required=1;
	    def_val=;
	    expr {
	     expr="input_data";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="accumulate_trials";
	    required=1;
	    def_val=;
	    expr {
	     expr="log_trials";
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
      };
      test {
       expr="epoch < train_epochs";
      };
     };
     MethodCall @[43] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$47$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[44] {
      desc="Always save weights at the end";
      flags=OFF;
      target=$93$;
      targ_ld_init="*SaveWeightsSpecs*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[45] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$50$;
      method=TimeUsedHR::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     PrintExpr @[46] {
      desc=;
      flags=;
      expr {
       expr="\"total time used: \" << total_time_used.s_used << \" train_timer: \" << train_timer.GetString() << endl";
      };
     };
     IfElse @[47] {
      desc="Run final test if requested";
      flags=OFF;
      cond {
       expr="test_final";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MemberAssign @[0] {
	desc="set network to testing mode";
	flags=;
	obj=$0$;
	path="train_mode";
	expr {
	 expr="test_mode";
	};
	update_after=0;
       };
       MemberAssign @[1] {
	desc="set output to compare type";
	flags=;
	obj=$0$;
	path="layers.Output.layer_type";
	expr {
	 expr="Layer::OUTPUT";
	};
	update_after=0;
       };
       IfElse @[2] {
	desc="test on training items if no separate testing items";
	flags=;
	cond {
	 expr="TestItems.rows == 0";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="Build an epoch of all test items";
	  flags=;
	  target=$91$;
	  targ_ld_init="*Build Presentation*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taString;
	    type="String";
	    name="transform_id";
	    required=1;
	    def_val=;
	    expr {
	     expr="test_transform_id";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="build_rows";
	    required=1;
	    def_val=;
	    expr {
	     expr="-1";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="is_train";
	    required=1;
	    def_val=;
	    expr {
	     expr="true";
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 ProgramCall @[0] {
	  desc="Build an epoch of all test items";
	  flags=;
	  target=$91$;
	  targ_ld_init="*Build Presentation*";
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taString;
	    type="String";
	    name="transform_id";
	    required=1;
	    def_val=;
	    expr {
	     expr="test_transform_id";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="build_rows";
	    required=1;
	    def_val=;
	    expr {
	     expr="-1";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=bool;
	    type="bool";
	    name="is_train";
	    required=1;
	    def_val=;
	    expr {
	     expr="false";
	    };
	   };
	  };
	 };
	};
       };
       MethodCall @[3] {
	desc="append to final test trial data log ";
	flags=;
	result_var=NULL;
	obj=$84$;
	method=DataTable::SaveDataLog;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="fname";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="final_test_trial_log";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="append";
	  required=0;
	  def_val="false";
	  expr {
	   expr="true";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="dmem_proc_0";
	  required=0;
	  def_val="true";
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       MethodCall @[4] {
	desc="append to final test trial data log ";
	flags=;
	result_var=NULL;
	obj=$86$;
	method=DataTable::SaveDataLog;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="fname";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="final_test_object_log";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="append";
	  required=0;
	  def_val="false";
	  expr {
	   expr="true";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="dmem_proc_0";
	  required=0;
	  def_val="true";
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       ProgramCall @[5] {
	desc="Run the test epoch";
	flags=;
	target=$92$;
	targ_ld_init="*LeabraEpoch*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="accumulate_trials";
	  required=1;
	  def_val=;
	  expr {
	   expr="log_trials";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
    };
   };
   Program @[2] {
    name="LeabraEpoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="TrialType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="TRIAL";
	value=0;
	desc="just run the trial directly";
       };
       DynEnumItem @[1] {
	name="XFORM_OBJ_RND";
	value=1;
	desc="random transforms of object over series of sequential fixations";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$23$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="accumulate_trials";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="Whether to accumulate trial data or clear before each epoch";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=205;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].epoch_time$94$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="wt_sync_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].wt_sync_time$95$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network's dmem weight sync timer";
     };
     ProgVar @[4] {
      name="ApplyInputTime";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].programs.gp[2][0].objs[4]$96$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="FilterImageTime";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].programs.gp[2][0].objs[6]$97$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[6] {
      name="XformImageTime";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].programs.gp[2][0].objs[5]$98$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[7] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$36$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[8] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=205;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[9] {
      name="trial_type";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][2].types[0]$99$;
       value=1;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter: note also needs to do this in regular running program";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$100$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$101$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[2]$102$;
      expr {
       expr="network.epoch_time";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[3]$103$;
      expr {
       expr="network.wt_sync_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter";
      flags=;
      network_var=$100$;
      local_ctr_var=$101$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc=;
      flags=;
      result_var=$102$;
      expr {
       expr="network.epoch_time";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=;
      result_var=$103$;
      expr {
       expr="network.wt_sync_time";
      };
     };
     ResetDataRows @[3] {
      desc=;
      flags=;
      data_var=.projects[0].programs.gp[0][2].vars[7]$104$;
     };
     MethodCall @[4] {
      desc="start epoch timer";
      flags=;
      result_var=NULL;
      obj=$102$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="reset dmem wt_sync timer";
      flags=NON_STD;
      result_var=NULL;
      obj=$103$;
      method=TimeUsed::ResetUsed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[6] {
      desc="reset dmem wt_sync timer";
      flags=NON_STD;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[4]$105$;
      method=TimeUsed::ResetUsed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[7] {
      desc="reset dmem wt_sync timer";
      flags=NON_STD;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[6]$106$;
      method=TimeUsed::ResetUsed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="reset dmem wt_sync timer";
      flags=NON_STD;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[5]$107$;
      method=TimeUsed::ResetUsed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[9] {
      desc=;
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       Switch @[0] {
	desc=;
	flags=NON_STD;
	switch_var=.projects[0].programs.gp[0][2].vars[9]$108$;
	cases {
	 name=;
	 el_typ=CaseBlock;
	 el_def=0;
	 CaseBlock @[0] {
	  desc=;
	  flags=;
	  prog_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   ProgramCall @[0] {
	    desc=;
	    flags=;
	    target=$7$;
	    targ_ld_init="*Fixations*";
	    prog_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=LeabraNetwork;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      expr {
	       expr="network";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable;
	      type="DataTable*";
	      name="input_data";
	      required=1;
	      def_val=;
	      expr {
	       expr="input_data";
	      };
	     };
	    };
	   };
	  };
	  case_val {
	   expr="TRIAL";
	  };
	 };
	 CaseBlock @[1] {
	  desc=;
	  flags=;
	  prog_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   ProgramCall @[0] {
	    desc=;
	    flags=;
	    target=$72$;
	    targ_ld_init="*Fixations*";
	    prog_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=LeabraNetwork;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      expr {
	       expr="network";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable;
	      type="DataTable*";
	      name="input_data";
	      required=1;
	      def_val=;
	      expr {
	       expr="input_data";
	      };
	     };
	    };
	   };
	  };
	  case_val {
	   expr="XFORM_OBJ_RND";
	  };
	 };
	};
       };
      };
      data_var=.projects[0].programs.gp[0][2].args[1]$109$;
      index_var=.projects[0].programs.gp[0][2].vars[8]$110$;
      order_var=.projects[0].programs.gp[0][2].vars[0]$111$;
      order=PERMUTED;
      item_idx_list{ 491;360;272;356;99;217;22;224;458;353;23;30;397;180;183;28;472;92;176;498;404;433;442;379;240;215;292;327;253;468;343;289;118;459;388;242;202;334;49;195;376;64;34;56;17;141;211;226;107;448;133;54;14;69;142;239;420;352;460;15;48;29;490;430;276;322;453;344;75;96;90;359;444;116;150;9;159;266;351;421;138;248;255;479;475;354;348;416;347;13;7;287;385;201;411;333;380;2;172;400;114;173;403;345;203;269;213;293;305;270;231;136;208;185;377;331;365;417;98;94;441;189;469;493;435;131;337;68;455;245;440;464;74;339;204;328;338;407;313;35;463;86;46;310;372;83;162;179;431;146;10;135;111;429;261;393;483;140;77;126;415;122;0;156;79;66;81;286;51;119;181;41;466;329;302;238;336;391;108;78;235;449;252;318;193;309;446;399;194;346;130;36;297;164;324;20;443;6;44;402;230;434;371;39;284;144;171;478;279;285;27;47;67;414;363;37;158;426;274;412;474;42;457;233;207;33;72;175;87;461;462;488;456;395;425;275;406;258;205;112;437;390;369;358;298;63;281;212;106;308;496;243;170;427;438;11;471;115;481;100;151;368;326;497;19;423;53;184;101;495;234;494;319;137;125;366;355;25;256;401;387;330;428;294;210;220;225;110;265;8;236;93;268;58;257;320;342;65;232;182;384;419;316;161;408;295;454;476;362;123;103;60;451;32;147;21;95;214;480;394;168;290;452;1;271;129;357;197;484;82;307;473;436;280;143;167;418;378;251;306;349;113;3;374;206;160;432;312;361;16;382;216;104;153;71;152;332;132;190;282;467;188;364;127;367;323;155;24;386;340;91;260;325;267;227;335;61;52;55;209;62;218;196;109;445;76;300;249;283;187;314;317;246;89;413;392;383;43;85;492;149;301;389;254;4;154;447;38;489;198;273;134;124;165;487;178;311;450;223;148;303;50;26;139;73;166;186;381;70;40;97;410;350;222;439;373;102;477;199;499;291;57;341;263;169;259;424;250;59;370;277;80;174;157;105;221;315;247;219;244;482;120;177;375;299;304;5;470;409;12;31;278;45;191;288;229;88;264;465;296;241;262;121;422;200;84;128;117;405;237;18;485;228;192;163;145;321;398;486;396;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     IfElse @[10] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$100$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[11] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$100$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[12] {
      desc=;
      flags=NON_STD;
      result_var=NULL;
      obj=$100$;
      method=LeabraNetwork::Compute_AvgAbsRelNetin;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[13] {
      desc=;
      flags=NON_STD;
      result_var=NULL;
      obj=$100$;
      method=LeabraNetwork::Compute_AdaptRelNetin;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[14] {
      desc=;
      flags=NON_STD;
      result_var=NULL;
      obj=$100$;
      method=LeabraNetwork::Compute_AdaptAbsNetin;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[15] {
      desc="end epoch timer -- must be before monitor to monitor time!";
      flags=;
      result_var=NULL;
      obj=$102$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[16] {
      desc=;
      flags=;
      target=.projects[0].programs.gp[0][11]$112$;
      targ_ld_init="*LeabraEpochMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
    };
   };
   Program @[3] {
    name="XformObjRnd";
    tags=;
    desc="randomly move and rescale object around input";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=DataTable;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$23$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="fixation";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="fixation counter";
     };
     ProgVar @[1] {
      name="nreps_eff";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="number of repetitions: current effective value";
     };
     ProgVar @[2] {
      name="test_nreps";
      var_type=T_Int;
      int_val=7;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="number of repetitions per image with different transform params to run during testing";
     };
     ProgVar @[3] {
      name="train_nreps";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="number of repetitions per image with different transform params to run during training";
     };
     ProgVar @[4] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="epc_at_max";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="epoch when transform parameters are at their maximum value: computes a gradient; 0 for no gradient";
     };
     ProgVar @[6] {
      name="start_grad";
      var_type=T_Real;
      real_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="starting value of gradient in transform parameters";
     };
     ProgVar @[7] {
      name="gradient";
      var_type=T_Real;
      real_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="current gradient value";
     };
     ProgVar @[8] {
      name="epoch";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="current epoch";
     };
     ProgVar @[9] {
      name="translate_x";
      var_type=T_Real;
      real_val=-0.1084296437028285;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed xlate";
     };
     ProgVar @[10] {
      name="translate_y";
      var_type=T_Real;
      real_val=-0.01432922986032415;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[11] {
      name="scale";
      var_type=T_Real;
      real_val=1.058967251231663;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed scale value";
     };
     ProgVar @[12] {
      name="x_translate";
      var_type=T_Real;
      real_val=0.15;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="from Transform";
     };
     ProgVar @[13] {
      name="y_translate";
      var_type=T_Real;
      real_val=0.15;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="from Transform";
     };
     ProgVar @[14] {
      name="min_scale";
      var_type=T_Real;
      real_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="from Transform";
     };
     ProgVar @[15] {
      name="max_scale";
      var_type=T_Real;
      real_val=1.2;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="from Transform";
     };
     ProgVar @[16] {
      name="mid_scale";
      var_type=T_Real;
      real_val=1.1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed";
     };
     ProgVar @[17] {
      name="rotate";
      var_type=T_Real;
      real_val=-0.004307933635490034;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="from Transform";
     };
     ProgVar @[18] {
      name="xform_rotate";
      var_type=T_Real;
      real_val=0.02;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="copy of value from Transform (to avoid name clash)";
     };
     ProgVar @[19] {
      name="train_transform_id";
      var_type=T_String;
      string_val="vehicle";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[20] {
      name="test_transform_id";
      var_type=T_String;
      string_val="vehicle";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[21] {
      name="transform_id";
      var_type=T_String;
      string_val="vehicle";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[22] {
      name="ActiveLesson";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$26$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[23] {
      name="Transform";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[0][1]$113$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[24] {
      name="dif_inhib_cycles";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="set number of inhib cycles differentially for within-fixation sequence vs post fixation";
     };
     ProgVar @[25] {
      name="inter_inhib_cycles";
      var_type=T_Int;
      int_val=20;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="number of ignore phase cycles within fixation sequence";
     };
     ProgVar @[26] {
      name="final_inhib_cycles";
      var_type=T_Int;
      int_val=20;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="number of inhib phase cycles for the last trial (clear out final guy)";
     };
     ProgVar @[27] {
      name="MyLeabraSettle";
      var_type=T_Object;
      object_type=Program;
      object_val=.projects[0].programs.gp[0][5]$114$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     ResetDataRows @[0] {
      desc=;
      flags=;
      data_var=.projects[0].programs.gp[0][3].vars[4]$115$;
     };
     Comment @[1] {
      desc="get transform data from lesson";
      flags=;
     };
     DataVarProg @[2] {
      desc=;
      flags=;
      data_var=.projects[0].programs.gp[0][3].vars[22]$116$;
      set_data=0;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][3].vars[19]$117$;
      var_2=.projects[0].programs.gp[0][3].vars[20]$118$;
      var_3=NULL;
      var_4=NULL;
     };
     IfElse @[3] {
      desc=;
      flags=;
      cond {
       expr="network->train_mode == LeabraNetwork::TRAIN";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][3].vars[21]$119$;
	expr {
	 expr="train_transform_id";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=$119$;
	expr {
	 expr="test_transform_id";
	};
       };
      };
     };
     DataVarProg @[4] {
      desc="get translate and scale params";
      flags=;
      data_var=.projects[0].programs.gp[0][3].vars[23]$120$;
      set_data=0;
      row_spec=ROW_VAL;
      row_var=$119$;
      var_1=.projects[0].programs.gp[0][3].vars[12]$121$;
      var_2=.projects[0].programs.gp[0][3].vars[13]$122$;
      var_3=.projects[0].programs.gp[0][3].vars[14]$123$;
      var_4=.projects[0].programs.gp[0][3].vars[15]$124$;
     };
     DataVarProg @[5] {
      desc="get rotate";
      flags=;
      data_var=$120$;
      set_data=0;
      row_spec=ROW_VAL;
      row_var=$119$;
      var_1=.projects[0].programs.gp[0][3].vars[17]$125$;
      var_2=NULL;
      var_3=NULL;
      var_4=NULL;
     };
     AssignExpr @[6] {
      desc="save value bc we reuse rotate for computed val";
      flags=;
      result_var=.projects[0].programs.gp[0][3].vars[18]$126$;
      expr {
       expr="rotate";
      };
     };
     Comment @[7] {
      desc="get gradient value";
      flags=;
     };
     AssignExpr @[8] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][3].vars[8]$127$;
      expr {
       expr="network.epoch";
      };
     };
     IfElse @[9] {
      desc=;
      flags=;
      cond {
       expr="epc_at_max > 0";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][3].vars[7]$128$;
	expr {
	 expr="start_grad + (1.0 - start_grad) * (epoch / epc_at_max)";
	};
       };
       If @[1] {
	desc=;
	flags=;
	cond {
	 expr="gradient > 1.0";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=$128$;
	  expr {
	   expr="1.0";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="default to start!";
	flags=;
	result_var=$128$;
	expr {
	 expr="start_grad";
	};
       };
      };
     };
     AssignExpr @[10] {
      desc=;
      flags=;
      result_var=$121$;
      expr {
       expr="gradient * x_translate";
      };
     };
     AssignExpr @[11] {
      desc=;
      flags=;
      result_var=$122$;
      expr {
       expr="gradient * y_translate";
      };
     };
     AssignExpr @[12] {
      desc=;
      flags=;
      result_var=$125$;
      expr {
       expr="gradient * rotate";
      };
     };
     AssignExpr @[13] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][3].vars[16]$129$;
      expr {
       expr=".5 * (min_scale + max_scale)";
      };
     };
     AssignExpr @[14] {
      desc=;
      flags=;
      result_var=$123$;
      expr {
       expr="mid_scale - gradient * (mid_scale - min_scale)";
      };
     };
     AssignExpr @[15] {
      desc=;
      flags=;
      result_var=$124$;
      expr {
       expr="mid_scale + gradient * (max_scale - mid_scale)";
      };
     };
     PrintVar @[16] {
      desc=;
      flags=OFF;
      message=;
      print_var=$128$;
      print_var2=$121$;
      print_var3=$122$;
      print_var4=$125$;
      print_var5=$123$;
      print_var6=$124$;
     };
     IfElse @[17] {
      desc=;
      flags=;
      cond {
       expr="network->train_mode == LeabraNetwork::TRAIN";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][3].vars[1]$130$;
	expr {
	 expr="train_nreps";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=$130$;
	expr {
	 expr="test_nreps";
	};
       };
      };
     };
     Comment @[18] {
      desc="run the loop";
      flags=;
     };
     ForLoop @[19] {
      desc=;
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       RandomCall @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][3].vars[9]$131$;
	object_type=Random;
	method=Random::UniformMeanRange;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="mean";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="range";
	  required=0;
	  def_val=;
	  expr {
	   expr="x_translate";
	  };
	 };
	};
       };
       RandomCall @[1] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][3].vars[10]$132$;
	object_type=Random;
	method=Random::UniformMeanRange;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="mean";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="range";
	  required=0;
	  def_val=;
	  expr {
	   expr="y_translate";
	  };
	 };
	};
       };
       RandomCall @[2] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][3].vars[11]$133$;
	object_type=Random;
	method=Random::UniformMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="min";
	  required=0;
	  def_val=;
	  expr {
	   expr="min_scale";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="max";
	  required=0;
	  def_val=;
	  expr {
	   expr="max_scale";
	  };
	 };
	};
       };
       RandomCall @[3] {
	desc=;
	flags=;
	result_var=$125$;
	object_type=Random;
	method=Random::UniformMeanRange;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=double;
	  type="double";
	  name="mean";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="range";
	  required=0;
	  def_val=;
	  expr {
	   expr="xform_rotate";
	  };
	 };
	};
       };
       DataVarProg @[4] {
	desc="set vals in current presentation ";
	flags=;
	data_var=.projects[0].programs.gp[0][3].args[1]$134$;
	set_data=1;
	row_spec=CUR_ROW;
	row_var=NULL;
	var_1=$131$;
	var_2=$132$;
	var_3=$133$;
	var_4=$125$;
       };
       If @[5] {
	desc=;
	flags=;
	cond {
	 expr="dif_inhib_cycles";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 IfElse @[0] {
	  desc=;
	  flags=;
	  cond {
	   expr="fixation ==  nreps_eff-1";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   MemberAssign @[0] {
	    desc=;
	    flags=;
	    obj=.projects[0].programs.gp[0][3].args[0]$135$;
	    path="ct_time.inhib";
	    expr {
	     expr="final_inhib_cycles";
	    };
	    update_after=0;
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   MemberAssign @[0] {
	    desc=;
	    flags=;
	    obj=$135$;
	    path="ct_time.inhib";
	    expr {
	     expr="inter_inhib_cycles";
	    };
	    update_after=0;
	   };
	  };
	 };
	};
       };
       ProgramCall @[6] {
	desc=;
	flags=;
	target=$7$;
	targ_ld_init="*LeabraTrial*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
      };
      init {
       expr="fixation = 0";
      };
      test {
       expr="fixation < nreps_eff";
      };
      iter {
       expr="fixation++";
      };
     };
     ProgramCall @[20] {
      desc="compute ObjectOutputData by voting across trials";
      flags=;
      target=.projects[0].programs.gp[0][8]$136$;
      targ_ld_init="*ObjectVoting*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
    };
   };
   Program @[4] {
    name="LeabraTrial";
    tags=;
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$23$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="CycleOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][3]$137$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc=;
      flags=;
      network_var=.projects[0].programs.gp[0][4].args[0]$138$;
      local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$139$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     ResetDataRows @[0] {
      desc=;
      flags=;
      data_var=.projects[0].programs.gp[0][4].vars[2]$140$;
     };
     NetCounterInit @[1] {
      desc=;
      flags=;
      network_var=$138$;
      local_ctr_var=$139$;
      counter=LeabraNetwork::phase_no;
      update_after=1;
     };
     MethodCall @[2] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$138$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[3] {
      desc=;
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=$114$;
	targ_ld_init="*LeabraSettle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc=;
	flags=;
	network_var=$138$;
	local_ctr_var=$139$;
	counter=LeabraNetwork::phase_no;
	update_after=1;
       };
       MethodCall @[2] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$138$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[4] {
      desc="does Compute_dWt etc";
      flags=;
      result_var=NULL;
      obj=$138$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$138$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[6] {
      desc="trial monitor calls DecodeOutput itself";
      flags=;
      target=.projects[0].programs.gp[0][7]$141$;
      targ_ld_init="*LeabraTrialMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     NetUpdateView @[7] {
      desc=;
      flags=;
      network_var=$138$;
      update_var=.projects[0].programs.gp[0][4].vars[1]$142$;
     };
    };
   };
   Program @[5] {
    name="LeabraSettle";
    tags="Leabra, Ct";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold, continuous time version";
    flags=;
    objs {
     name=;
     el_typ=TimeUsed;
     el_def=0;
     TimeUsed @[0] {name="ApplyInputsTime": start={usr=39742: sys=140: tot=1787220418: }: end={usr=39736: sys=140: tot=1787220412: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
     TimeUsed @[1] {name="SettleTime": start={usr=39736: sys=140: tot=1787220412: }: end={usr=39740: sys=140: tot=1787220416: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$23$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=50;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current cycle of settling (local loop counter)";
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="if true, will update network views at end of settling";
     };
     ProgVar @[3] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="minus_cycles";
      var_type=T_Int;
      int_val=19;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="number of cycles to settle (output max act above threshold) in minus phase";
     };
     ProgVar @[5] {
      name="output_thresh";
      var_type=T_Real;
      real_val=0.75;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="threshold for output activation to record setting cycles";
     };
     ProgVar @[6] {
      name="ApplyInputsTime";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].programs.gp[0][5].objs[0]$143$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[7] {
      name="SettleTime";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].programs.gp[0][5].objs[1]$144$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[0][5].args[0]$145$;
      local_ctr_var=.projects[0].programs.gp[0][5].vars[0]$146$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].vars[6]$147$;
      method=TimeUsed::ResetUsed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].vars[7]$148$;
      method=TimeUsed::ResetUsed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$145$;
      local_ctr_var=$146$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$145$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc=;
      flags=OFF;
      result_var=NULL;
      obj=$147$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="false";
	};
       };
      };
     };
     ProgramCall @[3] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      target=.projects[0].programs.gp[2][0]$149$;
      targ_ld_init="*ApplyInputs*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     MethodCall @[4] {
      desc=;
      flags=OFF;
      result_var=NULL;
      obj=$147$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[5] {
      desc=;
      flags=OFF;
      result_var=NULL;
      obj=$148$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[6] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$145$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[7] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][5].vars[3]$150$;
      expr {
       expr="network.phase_no";
      };
     };
     IfElse @[8] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[0][5].vars[1]$151$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$151$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[9] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	target=.projects[0].programs.gp[0][6]$152$;
	targ_ld_init="*LeabraCycle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$145$;
	local_ctr_var=$146$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=OFF;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=OFF;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
       If @[4] {
	desc=;
	flags=;
	cond {
	 expr="phase_no == 0 && minus_cycles < 0";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 If @[0] {
	  desc=;
	  flags=;
	  cond {
	   expr="network->layers.Output.acts.max >= output_thresh";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   AssignExpr @[0] {
	    desc=;
	    flags=;
	    result_var=.projects[0].programs.gp[0][5].vars[4]$153$;
	    expr {
	     expr="cycle";
	    };
	   };
	  };
	 };
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[10] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$145$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[11] {
      desc=;
      flags=OFF;
      result_var=NULL;
      obj=$148$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[12] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.Compute_TrialStats_Test()";
      };
      true_code {
       name=;
       el_typ=MethodCall;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$145$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       MethodCall @[1] {
	desc="special for adapting netin";
	flags=NON_STD;
	result_var=NULL;
	obj=$145$;
	method=LeabraNetwork::Compute_AbsRelNetin;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     IfElse @[13] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$145$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     NetUpdateView @[14] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$145$;
      update_var=.projects[0].programs.gp[0][5].vars[2]$154$;
     };
    };
   };
   Program @[6] {
    name="LeabraCycle";
    tags=;
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].args[0]$155$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc=;
      flags=;
      network_var=$155$;
      update_var=$4$;
     };
     ProgramCall @[2] {
      desc=;
      flags=OFF;
      target=.projects[0].programs.gp[0][10]$156$;
      targ_ld_init="*LeabraCycleMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
    };
   };
   Program @[7] {
    name="LeabraTrialMonitor";
    tags=;
    desc="monitor trial-level data from the network";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="individual";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="trial_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="supercat_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="supercat_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="category_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="category_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="subcat_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="subcat_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="feature1_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="feature1_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="feature2_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="feature2_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="feature3_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="feature3_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="feature4_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="feature4_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="max_netin";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[25] {
	name="max_act";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[26] {
	name="cycles_norm";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$5$;
      data=$35$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$23$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][7].objs[0]$157$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="max_idx";
      var_type=T_Real;
      real_val=86;
      objs_ptr=0;
      flags=NULL_CHECK;
      reference=0;
      desc="index of max output unit";
     };
     ProgVar @[3] {
      name="max_netin";
      var_type=T_Real;
      real_val=0.3184622526168823;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="netinput of max output unit";
     };
     ProgVar @[4] {
      name="max_act";
      var_type=T_Real;
      real_val=0.4137043058872223;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="activation of max output unit";
     };
     ProgVar @[5] {
      name="minus_cycles";
      var_type=T_Real;
      real_val=19;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="number of cycles to settle";
     };
     ProgVar @[6] {
      name="cycles_min";
      var_type=T_Real;
      real_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="min cycles for computing normalized cycle value";
     };
     ProgVar @[7] {
      name="cycles_max";
      var_type=T_Real;
      real_val=50;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="max cycles for computing normalized cycle value";
     };
     ProgVar @[8] {
      name="cycles_norm";
      var_type=T_Real;
      real_val=0.8200000000000001;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="normalized cycle value";
     };
     ProgVar @[9] {
      name="SuperCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[1][1]$158$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[10] {
      name="Category";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[1][2]$159$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[11] {
      name="SubCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[1][3]$160$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[12] {
      name="Feature1";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[1][4]$161$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[13] {
      name="Feature2";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[1][5]$162$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[14] {
      name="Feature3";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[1][6]$163$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[15] {
      name="Feature4";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[1][7]$164$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[16] {
      name="individual";
      var_type=T_String;
      string_val="0055";
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[17] {
      name="supercat_trg";
      var_type=T_String;
      string_val="airplane";
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[18] {
      name="supercat_out";
      var_type=T_String;
      string_val="airplane";
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[19] {
      name="category_trg";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[20] {
      name="category_out";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[21] {
      name="subcat_trg";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[22] {
      name="subcat_out";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[23] {
      name="feature1_trg";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[24] {
      name="feature1_out";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[25] {
      name="feature2_trg";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[26] {
      name="feature2_out";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[27] {
      name="feature3_trg";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[28] {
      name="feature3_out";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[29] {
      name="feature4_trg";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[30] {
      name="feature4_out";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[31] {
      name="subgp_cnt";
      var_type=T_Int;
      int_val=7;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[32] {
      name="output_name";
      var_type=T_String;
      string_val="airplane";
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current output name for parsing";
     };
     ProgVar @[33] {
      name="target_name";
      var_type=T_String;
      string_val="airplane";
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current target name for parsing";
     };
     ProgVar @[34] {
      name="cur_outnm";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current output name for parsing";
     };
     ProgVar @[35] {
      name="cur_trgnm";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current target name for parsing";
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
     Function @[0] {
      desc="get target and output value for given layer";
      flags=;
      name="GetTrgOut";
      return_type=T_Bool;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="data_table";
	var_type=T_Object;
	object_type=DataTable;
	object_val=NULL;
	objs_ptr=0;
	flags=LOCAL_VAR|FUN_ARG;
	reference=0;
	desc=;
       };
       ProgVar @[1] {
	name="trg_val";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=1;
	desc=;
       };
       ProgVar @[2] {
	name="out_val";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=1;
	desc=;
       };
      };
      fun_code {
       name=;
       el_typ=ProgVars;
       el_def=0;
       ProgVars @[0] {
	desc=;
	flags=;
	local_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       If @[1] {
	desc=;
	flags=;
	cond {
	 expr="cur_outnm.empty() || cur_trgnm.empty()";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
       IfElse @[2] {
	desc=;
	flags=;
	cond {
	 expr="cur_outnm.contains(\"_\")";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][7].functions[0].args[2]$165$;
	  expr {
	   expr="cur_outnm.before(\"_\")";
	  };
	 };
	 AssignExpr @[1] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][7].vars[34]$166$;
	  expr {
	   expr="cur_outnm.after(\"_\")";
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=$165$;
	  expr {
	   expr="cur_outnm";
	  };
	 };
	 AssignExpr @[1] {
	  desc=;
	  flags=;
	  result_var=$166$;
	  expr {
	   expr="\"\"";
	  };
	 };
	};
       };
       IfElse @[3] {
	desc=;
	flags=;
	cond {
	 expr="cur_trgnm.contains(\"_\")";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][7].functions[0].args[1]$167$;
	  expr {
	   expr="cur_trgnm.before(\"_\")";
	  };
	 };
	 AssignExpr @[1] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][7].vars[35]$168$;
	  expr {
	   expr="cur_trgnm.after(\"_\")";
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=$167$;
	  expr {
	   expr="cur_trgnm";
	  };
	 };
	 AssignExpr @[1] {
	  desc=;
	  flags=;
	  result_var=$168$;
	  expr {
	   expr="\"\"";
	  };
	 };
	};
       };
       VarIncr @[4] {
	desc=;
	flags=;
	var=.projects[0].programs.gp[0][7].vars[31]$169$;
	expr {
	 expr="1";
	};
       };
       ReturnExpr @[5] {
	desc=;
	flags=;
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[1]$170$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$170$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="Initialize monitoring data (get rid of any existing)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[0]$171$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema";
      flags=;
      result_var=NULL;
      obj=$170$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$170$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=$171$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="get the new monitor data.";
      flags=;
      result_var=NULL;
      obj=$170$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     OtherProgramVar @[3] {
      desc=;
      flags=;
      other_prog=$114$;
      set_other=0;
      var_1=.projects[0].programs.gp[0][7].vars[5]$172$;
      var_2=NULL;
      var_3=NULL;
      var_4=NULL;
     };
     MemberAssign @[4] {
      desc=;
      flags=;
      obj=.projects[0].programs.gp[0][7].args[0]$173$;
      path="minus_cycles";
      expr {
       expr="minus_cycles";
      };
      update_after=0;
     };
     AssignExpr @[5] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][7].vars[8]$174$;
      expr {
       expr="1.0f - ((minus_cycles - cycles_min) / cycles_max)";
      };
     };
     AssignExpr @[6] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][7].vars[32]$175$;
      expr {
       expr="network.minus_output_name";
      };
     };
     AssignExpr @[7] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][7].vars[33]$176$;
      expr {
       expr="network.layers.Target.output_name";
      };
     };
     AssignExpr @[8] {
      desc=;
      flags=;
      result_var=$166$;
      expr {
       expr="output_name";
      };
     };
     AssignExpr @[9] {
      desc=;
      flags=;
      result_var=$168$;
      expr {
       expr="target_name";
      };
     };
     AssignExpr @[10] {
      desc=;
      flags=;
      result_var=$169$;
      expr {
       expr="0";
      };
     };
     DataVarProg @[11] {
      desc=;
      flags=;
      data_var=.projects[0].programs.gp[0][7].args[1]$177$;
      set_data=0;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][7].vars[16]$178$;
      var_2=NULL;
      var_3=NULL;
      var_4=NULL;
     };
     FunctionCall @[12] {
      desc=;
      flags=;
      result_var=NULL;
      fun=.projects[0].programs.gp[0][7].functions[0]$179$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="SuperCat";
	};
       };
       ProgArg @[1] {
	arg_type=taString;
	type="String";
	name="trg_val";
	required=1;
	def_val=;
	expr {
	 expr="supercat_trg";
	};
       };
       ProgArg @[2] {
	arg_type=taString;
	type="String";
	name="out_val";
	required=1;
	def_val=;
	expr {
	 expr="supercat_out";
	};
       };
      };
     };
     FunctionCall @[13] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$179$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="Category";
	};
       };
       ProgArg @[1] {
	arg_type=taString;
	type="String";
	name="trg_val";
	required=1;
	def_val=;
	expr {
	 expr="category_trg";
	};
       };
       ProgArg @[2] {
	arg_type=taString;
	type="String";
	name="out_val";
	required=1;
	def_val=;
	expr {
	 expr="category_out";
	};
       };
      };
     };
     FunctionCall @[14] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$179$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="SubCat";
	};
       };
       ProgArg @[1] {
	arg_type=taString;
	type="String";
	name="trg_val";
	required=1;
	def_val=;
	expr {
	 expr="subcat_trg";
	};
       };
       ProgArg @[2] {
	arg_type=taString;
	type="String";
	name="out_val";
	required=1;
	def_val=;
	expr {
	 expr="subcat_out";
	};
       };
      };
     };
     FunctionCall @[15] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$179$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="Feature1";
	};
       };
       ProgArg @[1] {
	arg_type=taString;
	type="String";
	name="trg_val";
	required=1;
	def_val=;
	expr {
	 expr="feature1_trg";
	};
       };
       ProgArg @[2] {
	arg_type=taString;
	type="String";
	name="out_val";
	required=1;
	def_val=;
	expr {
	 expr="feature1_out";
	};
       };
      };
     };
     FunctionCall @[16] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$179$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="Feature2";
	};
       };
       ProgArg @[1] {
	arg_type=taString;
	type="String";
	name="trg_val";
	required=1;
	def_val=;
	expr {
	 expr="feature2_trg";
	};
       };
       ProgArg @[2] {
	arg_type=taString;
	type="String";
	name="out_val";
	required=1;
	def_val=;
	expr {
	 expr="feature2_out";
	};
       };
      };
     };
     FunctionCall @[17] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$179$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="Feature3";
	};
       };
       ProgArg @[1] {
	arg_type=taString;
	type="String";
	name="trg_val";
	required=1;
	def_val=;
	expr {
	 expr="feature3_trg";
	};
       };
       ProgArg @[2] {
	arg_type=taString;
	type="String";
	name="out_val";
	required=1;
	def_val=;
	expr {
	 expr="feature3_out";
	};
       };
      };
     };
     FunctionCall @[18] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$179$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="Feature4";
	};
       };
       ProgArg @[1] {
	arg_type=taString;
	type="String";
	name="trg_val";
	required=1;
	def_val=;
	expr {
	 expr="feature4_trg";
	};
       };
       ProgArg @[2] {
	arg_type=taString;
	type="String";
	name="out_val";
	required=1;
	def_val=;
	expr {
	 expr="feature4_out";
	};
       };
      };
     };
     DataVarProg @[19] {
      desc=;
      flags=;
      data_var=$171$;
      set_data=1;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][7].vars[3]$180$;
      var_2=.projects[0].programs.gp[0][7].vars[4]$181$;
      var_3=$174$;
      var_4=NULL;
     };
     DataVarProg @[20] {
      desc=;
      flags=;
      data_var=$171$;
      set_data=1;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][7].vars[17]$182$;
      var_2=.projects[0].programs.gp[0][7].vars[18]$183$;
      var_3=.projects[0].programs.gp[0][7].vars[19]$184$;
      var_4=.projects[0].programs.gp[0][7].vars[20]$185$;
     };
     DataVarProg @[21] {
      desc=;
      flags=;
      data_var=$171$;
      set_data=1;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][7].vars[21]$186$;
      var_2=.projects[0].programs.gp[0][7].vars[22]$187$;
      var_3=$178$;
      var_4=NULL;
     };
     DataVarProg @[22] {
      desc=;
      flags=;
      data_var=$171$;
      set_data=1;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][7].vars[23]$188$;
      var_2=.projects[0].programs.gp[0][7].vars[24]$189$;
      var_3=.projects[0].programs.gp[0][7].vars[25]$190$;
      var_4=.projects[0].programs.gp[0][7].vars[26]$191$;
     };
     DataVarProg @[23] {
      desc=;
      flags=;
      data_var=$171$;
      set_data=1;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=.projects[0].programs.gp[0][7].vars[27]$192$;
      var_2=.projects[0].programs.gp[0][7].vars[28]$193$;
      var_3=.projects[0].programs.gp[0][7].vars[29]$194$;
      var_4=.projects[0].programs.gp[0][7].vars[30]$195$;
     };
     MethodCall @[24] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$171$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[25] {
      desc="very important NOT to do this for voting -- each proc runs its own voting thing";
      flags=OFF;
      result_var=NULL;
      obj=$173$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[8] {
    name="ObjectMonitor";
    tags=;
    desc="perform object voting and record results in ObjectOutputData log";
    flags=;
    objs {
     name=;
     el_typ=DataTable;
     el_def=0;
     NetMonitor @[0] {
      name="obj_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="individual";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="trial_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="supercat_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="supercat_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="supercat_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="category_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="category_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="category_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="subcat_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="subcat_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="subcat_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="feature1_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="feature1_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="feature1_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="feature2_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="feature2_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="feature2_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="feature3_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="feature3_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="feature3_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="feature4_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[25] {
	name="feature4_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[26] {
	name="feature4_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$5$;
      data=$36$;
      rmv_orphan_cols=1;
     };
     DataTable @[1] {
      name="name_group";
      desc=;
      data {
       name="data";
       el_typ=DataColTp;
       el_def=0;
       String_Data @[0] {
	name="feature4_out";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] ;	};
       };
       int_Data @[1] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="N";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 1;	};
       };
       float_Data @[2] {
	name="cycles_norm";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.81999999;	};
       };
       float_Data @[3] {
	name="max_act";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.41370431;	};
       };
       float_Data @[4] {
	name="max_netin";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.31846225;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[2] {
      name="cycles_sort";
      desc=;
      data {
       name="data";
       el_typ=DataColTp;
       el_def=0;
       String_Data @[0] {
	name="feature4_out";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] ;	};
       };
       int_Data @[1] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="N";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 1;	};
       };
       float_Data @[2] {
	name="cycles_norm";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.81999999;	};
       };
       float_Data @[3] {
	name="max_act";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.41370431;	};
       };
       float_Data @[4] {
	name="max_netin";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.31846225;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[3] {
      name="max_act_sort";
      desc=;
      data {
       name="data";
       el_typ=DataColTp;
       el_def=0;
       String_Data @[0] {
	name="feature4_out";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] ;	};
       };
       int_Data @[1] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="N";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 1;	};
       };
       float_Data @[2] {
	name="cycles_norm";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.81999999;	};
       };
       float_Data @[3] {
	name="max_act";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.41370431;	};
       };
       float_Data @[4] {
	name="max_netin";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.31846225;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[4] {
      name="max_netin_sort";
      desc=;
      data {
       name="data";
       el_typ=DataColTp;
       el_def=0;
       String_Data @[0] {
	name="feature4_out";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] ;	};
       };
       int_Data @[1] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="N";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 1;	};
       };
       float_Data @[2] {
	name="cycles_norm";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.81999999;	};
       };
       float_Data @[3] {
	name="max_act";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.41370431;	};
       };
       float_Data @[4] {
	name="max_netin";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.31846225;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="object_output";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$36$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="name_group";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[0][8].objs[1]$196$;
      objs_ptr=1;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="cycles_sort";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[0][8].objs[2]$197$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="max_act_sort";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[0][8].objs[3]$198$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="max_netin_sort";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[0][8].objs[4]$199$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[6] {
      name="obj_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][8].objs[0]$200$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
     Function @[0] {
      desc=;
      flags=;
      name="VoteOutput";
      return_type=T_Bool;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="col_nm";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc=;
       };
      };
      fun_code {
       name=;
       el_typ=ProgVars;
       el_def=0;
       ProgVars @[0] {
	desc=;
	flags=;
	local_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @[0] {
	  name="st_idx";
	  var_type=T_Int;
	  int_val=0;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[1] {
	  name="cyc_out_nm";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[2] {
	  name="act_out_nm";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[3] {
	  name="net_out_nm";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[4] {
	  name="out_nm";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc="overall name as concensus over others";
	 };
	 ProgVar @[5] {
	  name="targ_val";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc="target value";
	 };
	 ProgVar @[6] {
	  name="out_err";
	  var_type=T_Real;
	  real_val=0;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc="overall errror";
	 };
	};
       };
       UserScript @[1] {
	desc="sets the column name in following data group prog -- MUST update index if things move!!!";
	flags=;
	script {
	 expr="this.functions[0].fun_code[2].group_spec.ops[0].col_name = col_nm;";
	};
       };
       DataGroupProg @[2] {
	desc="get the data grouped by name";
	flags=OFF;
	src_data_var=.projects[0].programs.gp[0][8].vars[0]$201$;
	dest_data_var=.projects[0].programs.gp[0][8].vars[2]$202$;
	group_spec {
	 name="group_spec";
	 ops {
	  name=;
	  el_typ=DataGroupEl;
	  el_def=0;
	  DataGroupEl @[0] {
	   col_name="feature4_out";
	   agg {name="Aggregate": op=GROUP: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	  };
	  DataGroupEl @[1] {
	   col_name="trial";
	   agg {name="Aggregate": op=N: rel={name="Relation": rel=GREATERTHAN: val=0: use_var=0: var=NULL: }: };
	  };
	  DataGroupEl @[2] {
	   col_name="cycles_norm";
	   agg {name="Aggregate": op=SUM: rel={name="Relation": rel=GREATERTHAN: val=0: use_var=0: var=NULL: }: };
	  };
	  DataGroupEl @[3] {
	   col_name="max_act";
	   agg {name="Aggregate": op=SUM: rel={name="Relation": rel=GREATERTHAN: val=0: use_var=0: var=NULL: }: };
	  };
	  DataGroupEl @[4] {
	   col_name="max_netin";
	   agg {name="Aggregate": op=SUM: rel={name="Relation": rel=GREATERTHAN: val=0: use_var=0: var=NULL: }: };
	  };
	 };
	 append_agg_name=0;
	};
       };
       Comment @[3] {
	desc="Sort according to each of the criteria";
	flags=;
       };
       DataSortProg @[4] {
	desc="cycles";
	flags=OFF;
	src_data_var=$202$;
	dest_data_var=.projects[0].programs.gp[0][8].vars[3]$203$;
	sort_spec {
	 name="sort_spec";
	 ops {
	  name=;
	  el_typ=DataSortEl;
	  el_def=0;
	  DataSortEl @[0] {
	   col_name="cycles_norm";
	   order=DESCENDING;
	  };
	 };
	};
       };
       DataSortProg @[5] {
	desc="max_act";
	flags=OFF;
	src_data_var=$202$;
	dest_data_var=.projects[0].programs.gp[0][8].vars[4]$204$;
	sort_spec {
	 name="sort_spec";
	 ops {
	  name=;
	  el_typ=DataSortEl;
	  el_def=0;
	  DataSortEl @[0] {
	   col_name="max_act";
	   order=DESCENDING;
	  };
	 };
	};
       };
       DataSortProg @[6] {
	desc="max_netin";
	flags=OFF;
	src_data_var=$202$;
	dest_data_var=.projects[0].programs.gp[0][8].vars[5]$205$;
	sort_spec {
	 name="sort_spec";
	 ops {
	  name=;
	  el_typ=DataSortEl;
	  el_def=0;
	  DataSortEl @[0] {
	   col_name="max_netin";
	   order=DESCENDING;
	  };
	 };
	};
       };
       Comment @[7] {
	desc="find col start and get trg name (once)";
	flags=;
       };
       MethodCall @[8] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][8].functions[0].fun_code[0].local_vars[0]$206$;
	obj=.projects[0].programs.gp[0][8].vars[1]$207$;
	method=DataTable::FindColNameIdx;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_nm";
	  required=1;
	  def_val=;
	  expr {
	   expr="col_nm";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="err_msg";
	  required=0;
	  def_val="false";
	  expr {
	   expr="true";
	  };
	 };
	};
       };
       MethodCall @[9] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][8].functions[0].fun_code[0].local_vars[5]$208$;
	obj=$207$;
	method=DataTable::GetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx-1";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       Comment @[10] {
	desc="cycle";
	flags=;
       };
       MethodCall @[11] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][8].functions[0].fun_code[0].local_vars[1]$209$;
	obj=$203$;
	method=DataTable::GetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       AssignExpr @[12] {
	desc=;
	flags=OFF;
	result_var=.projects[0].programs.gp[0][8].functions[0].fun_code[0].local_vars[6]$210$;
	expr {
	 expr="cyc_out_nm != targ_val";
	};
       };
       MethodCall @[13] {
	desc=;
	flags=OFF;
	result_var=NULL;
	obj=$207$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="cyc_out_nm";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+2";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       MethodCall @[14] {
	desc=;
	flags=OFF;
	result_var=NULL;
	obj=$207$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="out_err";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+3";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       Comment @[15] {
	desc="act";
	flags=;
       };
       MethodCall @[16] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][8].functions[0].fun_code[0].local_vars[2]$211$;
	obj=$204$;
	method=DataTable::GetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       AssignExpr @[17] {
	desc=;
	flags=OFF;
	result_var=$210$;
	expr {
	 expr="act_out_nm != targ_val";
	};
       };
       MethodCall @[18] {
	desc=;
	flags=OFF;
	result_var=NULL;
	obj=$207$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="act_out_nm";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+4";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       MethodCall @[19] {
	desc=;
	flags=OFF;
	result_var=NULL;
	obj=$207$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="out_err";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+5";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       Comment @[20] {
	desc="netin";
	flags=;
       };
       MethodCall @[21] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][8].functions[0].fun_code[0].local_vars[3]$212$;
	obj=$205$;
	method=DataTable::GetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       AssignExpr @[22] {
	desc=;
	flags=OFF;
	result_var=$210$;
	expr {
	 expr="net_out_nm != targ_val";
	};
       };
       MethodCall @[23] {
	desc=;
	flags=OFF;
	result_var=NULL;
	obj=$207$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="net_out_nm";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+6";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       MethodCall @[24] {
	desc=;
	flags=OFF;
	result_var=NULL;
	obj=$207$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="out_err";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+7";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       Comment @[25] {
	desc="get consensus";
	flags=;
       };
       IfElse @[26] {
	desc=;
	flags=;
	cond {
	 expr="cyc_out_nm == act_out_nm || cyc_out_nm == net_out_nm";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][8].functions[0].fun_code[0].local_vars[4]$213$;
	  expr {
	   expr="cyc_out_nm";
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 IfElse @[0] {
	  desc=;
	  flags=;
	  cond {
	   expr="act_out_nm == net_out_nm";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   AssignExpr @[0] {
	    desc=;
	    flags=;
	    result_var=$213$;
	    expr {
	     expr="act_out_nm";
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   AssignExpr @[0] {
	    desc="using net as the default if nobody agrees!";
	    flags=;
	    result_var=$213$;
	    expr {
	     expr="net_out_nm";
	    };
	   };
	  };
	 };
	};
       };
       AssignExpr @[27] {
	desc=;
	flags=;
	result_var=$210$;
	expr {
	 expr="out_nm != targ_val";
	};
       };
       MethodCall @[28] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$207$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="out_nm";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       MethodCall @[29] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$207$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="out_err";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+1";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
      };
     };
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[6]$214$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="object_output";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$214$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="object_output";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     Comment @[1] {
      desc="Start filling in OutputData -- get counters etc from trial guy";
      flags=;
     };
     AddNewDataRow @[2] {
      desc=;
      flags=;
      data_var=$207$;
     };
     DataProcCall @[3] {
      desc="get row from trial data for all the basic vars";
      flags=;
      result_var=NULL;
      object_type=taDataProc;
      method=taDataProc::CopyCommonColsRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dest";
	required=0;
	def_val=;
	expr {
	 expr="object_output";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="src";
	required=0;
	def_val=;
	expr {
	 expr="trial_data";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="dest_row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=int;
	type="int";
	name="src_row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     FunctionCall @[4] {
      desc=;
      flags=;
      result_var=NULL;
      fun=.projects[0].programs.gp[0][8].functions[0]$215$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"supercat_out\"";
	};
       };
      };
     };
     FunctionCall @[5] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$215$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"category_out\"";
	};
       };
      };
     };
     FunctionCall @[6] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$215$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"subcat_out\"";
	};
       };
      };
     };
     FunctionCall @[7] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$215$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"feature1_out\"";
	};
       };
      };
     };
     FunctionCall @[8] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$215$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"feature2_out\"";
	};
       };
      };
     };
     FunctionCall @[9] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$215$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"feature3_out\"";
	};
       };
      };
     };
     FunctionCall @[10] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$215$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"feature4_out\"";
	};
       };
      };
     };
     DoneWritingDataRow @[11] {
      desc=;
      flags=;
      data_var=$207$;
     };
     MethodCall @[12] {
      desc="this is the trial-level info that gets shared across procs -- basic trial stuff does not!";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].args[0]$216$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="object_output";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[9] {
    name="ObjectMonitor_detail";
    tags=;
    desc="perform object voting and record results in ObjectOutputData log: detail level stats (other one has only summary stats)";
    flags=;
    objs {
     name=;
     el_typ=DataTable;
     el_def=0;
     NetMonitor @[0] {
      name="obj_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="supercat_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="supercat_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="supercat_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="supercat_cyc_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="supercat_cyc_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="supercat_act_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="supercat_act_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="supercat_net_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="supercat_net_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="category_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="category_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="category_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="category_cyc_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="category_cyc_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="category_act_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="category_act_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="category_net_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="category_net_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="subcat_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="subcat_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[25] {
	name="subcat_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[26] {
	name="subcat_cyc_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[27] {
	name="subcat_cyc_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[28] {
	name="subcat_act_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[29] {
	name="subcat_act_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[30] {
	name="subcat_net_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[31] {
	name="subcat_net_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[32] {
	name="feature1_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[33] {
	name="feature1_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[34] {
	name="feature1_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[35] {
	name="feature1_cyc_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[36] {
	name="feature1_cyc_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[37] {
	name="feature1_act_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[38] {
	name="feature1_act_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[39] {
	name="feature1_net_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[40] {
	name="feature1_net_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[41] {
	name="feature2_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[42] {
	name="feature2_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[43] {
	name="feature2_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[44] {
	name="feature2_cyc_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[45] {
	name="feature2_cyc_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[46] {
	name="feature2_act_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[47] {
	name="feature2_act_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[48] {
	name="feature2_net_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[49] {
	name="feature2_net_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[50] {
	name="feature3_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[51] {
	name="feature3_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[52] {
	name="feature3_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[53] {
	name="feature3_cyc_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[54] {
	name="feature3_cyc_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[55] {
	name="feature3_act_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[56] {
	name="feature3_act_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[57] {
	name="feature3_net_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[58] {
	name="feature3_net_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[59] {
	name="feature4_trg";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[60] {
	name="feature4_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[61] {
	name="feature4_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[62] {
	name="feature4_cyc_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[63] {
	name="feature4_cyc_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[64] {
	name="feature4_act_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[65] {
	name="feature4_act_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[66] {
	name="feature4_net_out";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[67] {
	name="feature4_net_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$5$;
      data=$36$;
      rmv_orphan_cols=1;
     };
     DataTable @[1] {
      name="name_group";
      desc=;
      data {
       name="data";
       el_typ=DataColTp;
       el_def=0;
       String_Data @[0] {
	name="feature4_out";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] ;	};
       };
       int_Data @[1] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="trial";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 1;	};
       };
       float_Data @[2] {
	name="cycles_norm";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.81999999;	};
       };
       float_Data @[3] {
	name="max_act";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.31647909;	};
       };
       float_Data @[4] {
	name="max_netin";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.52698946;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[2] {
      name="cycles_sort";
      desc=;
      data {
       name="data";
       el_typ=DataColTp;
       el_def=0;
       String_Data @[0] {
	name="feature4_out";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] ;	};
       };
       int_Data @[1] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="trial";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 1;	};
       };
       float_Data @[2] {
	name="cycles_norm";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.81999999;	};
       };
       float_Data @[3] {
	name="max_act";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.31647909;	};
       };
       float_Data @[4] {
	name="max_netin";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.52698946;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[3] {
      name="max_act_sort";
      desc=;
      data {
       name="data";
       el_typ=DataColTp;
       el_def=0;
       String_Data @[0] {
	name="feature4_out";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] ;	};
       };
       int_Data @[1] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="trial";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 1;	};
       };
       float_Data @[2] {
	name="cycles_norm";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.81999999;	};
       };
       float_Data @[3] {
	name="max_act";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.31647909;	};
       };
       float_Data @[4] {
	name="max_netin";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.52698946;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[4] {
      name="max_netin_sort";
      desc=;
      data {
       name="data";
       el_typ=DataColTp;
       el_def=0;
       String_Data @[0] {
	name="feature4_out";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] ;	};
       };
       int_Data @[1] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="trial";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 1;	};
       };
       float_Data @[2] {
	name="cycles_norm";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.81999999;	};
       };
       float_Data @[3] {
	name="max_act";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.31647909;	};
       };
       float_Data @[4] {
	name="max_netin";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 0.52698946;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="object_output";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$36$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="name_group";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[0][9].objs[1]$217$;
      objs_ptr=1;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="cycles_sort";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[0][9].objs[2]$218$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="max_act_sort";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[0][9].objs[3]$219$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="max_netin_sort";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[0][9].objs[4]$220$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[6] {
      name="obj_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][9].objs[0]$221$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
     Function @[0] {
      desc=;
      flags=;
      name="VoteOutput";
      return_type=T_Bool;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="col_nm";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc=;
       };
      };
      fun_code {
       name=;
       el_typ=ProgVars;
       el_def=0;
       ProgVars @[0] {
	desc=;
	flags=;
	local_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @[0] {
	  name="st_idx";
	  var_type=T_Int;
	  int_val=0;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[1] {
	  name="cyc_out_nm";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[2] {
	  name="act_out_nm";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[3] {
	  name="net_out_nm";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[4] {
	  name="out_nm";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc="overall name as concensus over others";
	 };
	 ProgVar @[5] {
	  name="targ_val";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc="target value";
	 };
	 ProgVar @[6] {
	  name="out_err";
	  var_type=T_Real;
	  real_val=0;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc="overall errror";
	 };
	};
       };
       UserScript @[1] {
	desc="sets the column name in following data group prog -- MUST update index if things move!!!";
	flags=;
	script {
	 expr="this.functions[0].fun_code[2].group_spec.ops[0].col_name = col_nm;";
	};
       };
       DataGroupProg @[2] {
	desc="get the data grouped by name";
	flags=;
	src_data_var=.projects[0].programs.gp[0][9].vars[0]$222$;
	dest_data_var=.projects[0].programs.gp[0][9].vars[2]$223$;
	group_spec {
	 name="group_spec";
	 ops {
	  name=;
	  el_typ=DataGroupEl;
	  el_def=0;
	  DataGroupEl @[0] {
	   col_name="feature4_out";
	   agg {name="Aggregate": op=GROUP: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	  };
	  DataGroupEl @[1] {
	   col_name="trial";
	   agg {name="Aggregate": op=N: rel={name="Relation": rel=GREATERTHAN: val=0: use_var=0: var=NULL: }: };
	  };
	  DataGroupEl @[2] {
	   col_name="cycles_norm";
	   agg {name="Aggregate": op=SUM: rel={name="Relation": rel=GREATERTHAN: val=0: use_var=0: var=NULL: }: };
	  };
	  DataGroupEl @[3] {
	   col_name="max_act";
	   agg {name="Aggregate": op=SUM: rel={name="Relation": rel=GREATERTHAN: val=0: use_var=0: var=NULL: }: };
	  };
	  DataGroupEl @[4] {
	   col_name="max_netin";
	   agg {name="Aggregate": op=SUM: rel={name="Relation": rel=GREATERTHAN: val=0: use_var=0: var=NULL: }: };
	  };
	 };
	 append_agg_name=0;
	};
       };
       Comment @[3] {
	desc="Sort according to each of the criteria";
	flags=;
       };
       DataSortProg @[4] {
	desc="cycles";
	flags=;
	src_data_var=$223$;
	dest_data_var=.projects[0].programs.gp[0][9].vars[3]$224$;
	sort_spec {
	 name="sort_spec";
	 ops {
	  name=;
	  el_typ=DataSortEl;
	  el_def=0;
	  DataSortEl @[0] {
	   col_name="cycles_norm";
	   order=DESCENDING;
	  };
	 };
	};
       };
       DataSortProg @[5] {
	desc="max_act";
	flags=;
	src_data_var=$223$;
	dest_data_var=.projects[0].programs.gp[0][9].vars[4]$225$;
	sort_spec {
	 name="sort_spec";
	 ops {
	  name=;
	  el_typ=DataSortEl;
	  el_def=0;
	  DataSortEl @[0] {
	   col_name="max_act";
	   order=DESCENDING;
	  };
	 };
	};
       };
       DataSortProg @[6] {
	desc="max_netin";
	flags=;
	src_data_var=$223$;
	dest_data_var=.projects[0].programs.gp[0][9].vars[5]$226$;
	sort_spec {
	 name="sort_spec";
	 ops {
	  name=;
	  el_typ=DataSortEl;
	  el_def=0;
	  DataSortEl @[0] {
	   col_name="max_netin";
	   order=DESCENDING;
	  };
	 };
	};
       };
       Comment @[7] {
	desc="find col start and get trg name (once)";
	flags=;
       };
       MethodCall @[8] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][9].functions[0].fun_code[0].local_vars[0]$227$;
	obj=.projects[0].programs.gp[0][9].vars[1]$228$;
	method=DataTable::FindColNameIdx;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_nm";
	  required=1;
	  def_val=;
	  expr {
	   expr="col_nm";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="err_msg";
	  required=0;
	  def_val="false";
	  expr {
	   expr="true";
	  };
	 };
	};
       };
       MethodCall @[9] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][9].functions[0].fun_code[0].local_vars[5]$229$;
	obj=$228$;
	method=DataTable::GetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx-1";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       Comment @[10] {
	desc="cycle";
	flags=;
       };
       MethodCall @[11] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][9].functions[0].fun_code[0].local_vars[1]$230$;
	obj=$224$;
	method=DataTable::GetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       AssignExpr @[12] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][9].functions[0].fun_code[0].local_vars[6]$231$;
	expr {
	 expr="cyc_out_nm != targ_val";
	};
       };
       MethodCall @[13] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$228$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="cyc_out_nm";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+2";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       MethodCall @[14] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$228$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="out_err";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+3";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       Comment @[15] {
	desc="act";
	flags=;
       };
       MethodCall @[16] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][9].functions[0].fun_code[0].local_vars[2]$232$;
	obj=$225$;
	method=DataTable::GetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       AssignExpr @[17] {
	desc=;
	flags=;
	result_var=$231$;
	expr {
	 expr="act_out_nm != targ_val";
	};
       };
       MethodCall @[18] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$228$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="act_out_nm";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+4";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       MethodCall @[19] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$228$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="out_err";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+5";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       Comment @[20] {
	desc="netin";
	flags=;
       };
       MethodCall @[21] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[0][9].functions[0].fun_code[0].local_vars[3]$233$;
	obj=$226$;
	method=DataTable::GetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       AssignExpr @[22] {
	desc=;
	flags=;
	result_var=$231$;
	expr {
	 expr="net_out_nm != targ_val";
	};
       };
       MethodCall @[23] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$228$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="net_out_nm";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+6";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       MethodCall @[24] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$228$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="out_err";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+7";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       Comment @[25] {
	desc="get consensus";
	flags=;
       };
       IfElse @[26] {
	desc=;
	flags=;
	cond {
	 expr="cyc_out_nm == act_out_nm || cyc_out_nm == net_out_nm";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][9].functions[0].fun_code[0].local_vars[4]$234$;
	  expr {
	   expr="cyc_out_nm";
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 IfElse @[0] {
	  desc=;
	  flags=;
	  cond {
	   expr="act_out_nm == net_out_nm";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   AssignExpr @[0] {
	    desc=;
	    flags=;
	    result_var=$234$;
	    expr {
	     expr="act_out_nm";
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   AssignExpr @[0] {
	    desc="using net as the default if nobody agrees!";
	    flags=;
	    result_var=$234$;
	    expr {
	     expr="net_out_nm";
	    };
	   };
	  };
	 };
	};
       };
       AssignExpr @[27] {
	desc=;
	flags=;
	result_var=$231$;
	expr {
	 expr="out_nm != targ_val";
	};
       };
       MethodCall @[28] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$228$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="out_nm";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
       MethodCall @[29] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$228$;
	method=DataTable::SetVal;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="out_err";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_idx+1";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="-1";
	  };
	 };
	};
       };
      };
     };
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][9].vars[6]$235$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="object_output";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$235$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="object_output";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     Comment @[1] {
      desc="Start filling in OutputData -- get counters etc from trial guy";
      flags=;
     };
     AddNewDataRow @[2] {
      desc=;
      flags=;
      data_var=$228$;
     };
     DataProcCall @[3] {
      desc="get row from trial data for all the basic vars";
      flags=;
      result_var=NULL;
      object_type=taDataProc;
      method=taDataProc::CopyCommonColsRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dest";
	required=0;
	def_val=;
	expr {
	 expr="object_output";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="src";
	required=0;
	def_val=;
	expr {
	 expr="trial_data";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="dest_row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=int;
	type="int";
	name="src_row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     FunctionCall @[4] {
      desc=;
      flags=;
      result_var=NULL;
      fun=.projects[0].programs.gp[0][9].functions[0]$236$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"supercat_out\"";
	};
       };
      };
     };
     FunctionCall @[5] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$236$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"category_out\"";
	};
       };
      };
     };
     FunctionCall @[6] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$236$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"subcat_out\"";
	};
       };
      };
     };
     FunctionCall @[7] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$236$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"feature1_out\"";
	};
       };
      };
     };
     FunctionCall @[8] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$236$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"feature2_out\"";
	};
       };
      };
     };
     FunctionCall @[9] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$236$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"feature3_out\"";
	};
       };
      };
     };
     FunctionCall @[10] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$236$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"feature4_out\"";
	};
       };
      };
     };
     DoneWritingDataRow @[11] {
      desc=;
      flags=;
      data_var=$228$;
     };
     MethodCall @[12] {
      desc="this is the trial-level info that gets shared across procs -- basic trial stuff does not!";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][9].args[0]$237$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="object_output";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[10] {
    name="LeabraCycleMonitor";
    tags=;
    desc="monitor trial-level data from the network";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="cycle_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="target_name";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="output_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ct_cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="ct_cycle";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="send_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="send_pct";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="V2_hig_maxda";
	computed=0;
	object_type=LeabraLayer;
	object=NULL;
	variable="maxda";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="V2_hig_maxda_sum";
	computed=0;
	object_type=LeabraLayer;
	object=NULL;
	variable="maxda_sum";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="V2_hig_acts_avg";
	computed=0;
	object_type=LeabraLayer;
	object=NULL;
	variable="acts.avg";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="V4_maxda";
	computed=0;
	object_type=LeabraLayer;
	object=NULL;
	variable="maxda";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="V4_maxda_sum";
	computed=0;
	object_type=LeabraLayer;
	object=NULL;
	variable="maxda_sum";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="V4_acts_avg";
	computed=0;
	object_type=LeabraLayer;
	object=NULL;
	variable="acts.avg";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$5$;
      data=$137$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$137$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="cycle_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][10].objs[0]$238$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][10].vars[1]$239$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="cycle_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$239$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="Initialize monitoring data (get rid of any existing)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][10].vars[0]$240$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema";
      flags=;
      result_var=NULL;
      obj=$239$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=$240$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data.";
      flags=;
      result_var=NULL;
      obj=$239$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$240$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[11] {
    name="LeabraEpochMonitor";
    tags=;
    desc="monitor epoch-level data from the network";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cur_lrate";
	computed=0;
	object_type=LeabraConSpec;
	object=.projects[0].networks[0].specs[2].children[2].children[0].children[1]$241$;
	variable="cur_lrate";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="supercat_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="cnt_err";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$36$;
	agg_col {
	 col_name="supercat_err";
	};
	agg {name="": op=SUM: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="category_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="cnt_err";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$36$;
	agg_col {
	 col_name="category_err";
	};
	agg {name="": op=SUM: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="subcat_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="cnt_err";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$36$;
	agg_col {
	 col_name="subcat_err";
	};
	agg {name="": op=SUM: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="feature1_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="cnt_err";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$36$;
	agg_col {
	 col_name="feature1_err";
	};
	agg {name="": op=SUM: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="feature2_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="cnt_err";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$36$;
	agg_col {
	 col_name="feature2_err";
	};
	agg {name="": op=SUM: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="feature3_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="cnt_err";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$36$;
	agg_col {
	 col_name="feature3_err";
	};
	agg {name="": op=SUM: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="feature4_err";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="cnt_err";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$36$;
	agg_col {
	 col_name="feature4_err";
	};
	agg {name="": op=SUM: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="avg_send_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="avg_send_pct";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="wt_sync_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="wt_sync_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="apply_inputs_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="xform_image_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="filter_image_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$5$;
      data=$34$;
      rmv_orphan_cols=1;
     };
     DataTable @[1] {
      name="ObjectOutputSums";
      desc=;
      data {
       name="data";
       el_typ=DataColTp;
       el_def=0;
       float_Data @[0] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="view_panel_wd";
	  value 6 0=0.1805054098367691;
	 };
	};
	name="cycles_err_sum";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 9;	};
       };
       float_Data @[1] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="view_panel_wd";
	  value 6 0=0.1805054098367691;
	 };
	};
	name="max_act_err_sum";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 9;	};
       };
       float_Data @[2] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="view_panel_wd";
	  value 6 0=0.1805054098367691;
	 };
	};
	name="max_netin_err_sum";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[1] 9;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$34$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="object_output_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$36$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][11].objs[0]$242$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="wt_sync_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$95$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network's dmem weight sync timer";
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$94$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="epoch timer";
     };
     ProgVar @[5] {
      name="ObjectOutputSums";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[0][11].objs[1]$243$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[6] {
      name="TrialOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$35$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[7] {
      name="act_avg_max";
      var_type=T_Real;
      real_val=0.6;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="threshold for counting act_avg vars -- if above this val, count = 1 -- auto set from HigherUnits.act_reg.max";
     };
     ProgVar @[8] {
      name="act_avg_min";
      var_type=T_Real;
      real_val=0.02;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="threshold for counting act_avg vars -- if above this val, count = 1 -- auto set from HigherUnits.act_reg.min";
     };
     ProgVar @[9] {
      name="ApplyInputTime";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$96$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[10] {
      name="FilterImageTime";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$97$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[11] {
      name="XformImageTime";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$98$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][11].vars[4]$244$;
      expr {
       expr="network.epoch_time";
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][11].vars[3]$245$;
      expr {
       expr="network.wt_sync_time";
      };
     };
     MethodCall @[2] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][11].vars[2]$246$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[3] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$246$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="update the monitor items and data schema";
      flags=;
      result_var=NULL;
      obj=$246$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$246$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][11].vars[7]$247$;
      expr {
       expr=".6";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][11].vars[8]$248$;
      expr {
       expr=".02";
      };
     };
     MethodCall @[3] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][11].vars[0]$249$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[4] {
      desc="get the new monitor data.";
      flags=;
      result_var=NULL;
      obj=$246$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[5] {
      desc=;
      flags=;
      result_var=$244$;
      expr {
       expr="network.epoch_time";
      };
     };
     AssignExpr @[6] {
      desc=;
      flags=;
      result_var=$245$;
      expr {
       expr="network.wt_sync_time";
      };
     };
     MethodCall @[7] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$249$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[8] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$249$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[9] {
      desc="wt_sync_time.tot";
      flags=;
      result_var=NULL;
      obj=$249$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="wt_sync_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"wt_sync_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[10] {
      desc="wt_sync_time.usr";
      flags=;
      result_var=NULL;
      obj=$249$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="wt_sync_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"wt_sync_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[11] {
      desc="wt_sync_time.usr";
      flags=;
      result_var=NULL;
      obj=$249$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="ApplyInputTime.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"apply_inputs_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[12] {
      desc="wt_sync_time.usr";
      flags=;
      result_var=NULL;
      obj=$249$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="XformImageTime.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"xform_image_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[13] {
      desc="wt_sync_time.usr";
      flags=;
      result_var=NULL;
      obj=$249$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="FilterImageTime.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"filter_image_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[14] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$249$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[12] {
    name="SaveWeightsSpecs";
    tags="Weights, Specs";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values
also save specs.";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val="_ndor";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="user defined tag (set by startup script)";
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val="wts/";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="subdirectory to save weights in";
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/svn_sims/perception/objrec/wts/hv.v1salnf_dml_ndor.00_0000.wts.gz";
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0000";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of epoch with leading zeros";
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="00";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of batch with leading zeros";
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val="_ndor.00_0000";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="batch + epoch";
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not first dmem processor";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][12].vars[4]$250$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][12].vars[3]$251$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][12].vars[5]$252$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][12].vars[2]$253$;
      obj=.projects[0].programs.gp[0][12].args[0]$254$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$254$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
     UserScript @[6] {
      desc=;
      flags=;
      script {
       expr="String specfnm = fname.before(\".wts.gz\");
specfnm += \".spec\";
network.specs.SaveAs(specfnm);

";
      };
     };
    };
   };
  };
  Program_Group @.gp[1] {
   name="VisionData";
   el_typ=Program;
   el_def=0;
   step_prog=$91$;
   tags=;
   desc="manages lists of images and associated object data for vision model training";
   Program @[0] {
    name="ConfigInputData";
    tags=;
    desc="Read object image data (OID) file -- must have at least: supercat, category, subcat, feature1..4, individual, ctrlflags, filename columns.  This program then creates subtables in data.SourceData for each of these column values, and id's for these in the ObjectImageData which is the master overall data table for all object information";
    flags=;
    objs {
     name=;
     el_typ=DataTable;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="oid_filename";
      var_type=T_String;
      string_val="images/veh3d_lr20_nb/Veh3d_nosubcat.dat";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="last_oid_filename";
      var_type=T_String;
      string_val="images/veh3d_lr20_nb/Veh3d_nosubcat.dat";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="the last oid file that was processed -- if same as current, do not redo";
     };
     ProgVar @[1] {
      name="file_path";
      var_type=T_String;
      string_val="/Users/oreilly/svn_images/veh3d_lr20_nb/";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Path stub from user-entered .oia filename";
     };
     ProgVar @[2] {
      name="ObjectImageData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$29$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="SuperCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$158$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="Category";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$159$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="SubCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$160$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[6] {
      name="Feature1";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$161$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[7] {
      name="CatSubCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[1][8]$255$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[8] {
      name="Individual";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[1][9]$256$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[9] {
      name="box_col_idx";
      var_type=T_Int;
      int_val=-1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[10] {
      name="catsubcat_idx";
      var_type=T_Int;
      int_val=4;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="optimization to keep track of this index in CatSubCat -- everything is sorted so this works";
     };
     ProgVar @[11] {
      name="individual_idx";
      var_type=T_Int;
      int_val=131;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="optimization to keep track of this index in CatSubCat -- everything is sorted so this works";
     };
     ProgVar @[12] {
      name="make_box";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="if we need to make a foveate_box ourselves (not in file)";
     };
     ProgVar @[13] {
      name="Feature2";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$162$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[14] {
      name="Feature3";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$163$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[15] {
      name="Feature4";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$164$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name="Code";
     el_typ=DataProcCall;
     el_def=0;
     IfElse @[0] {
      desc="check to see if same as last time; if so do not reprocess -- not really needed anymore because this is fast and just causes problems.";
      flags=OFF;
      cond {
       expr="oid_filename.after(\"/\",-1) == last_oid_filename.after(\"/\",-1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       PrintVar @[0] {
	desc=;
	flags=;
	message="not re-importing OID file: ";
	print_var=.projects[0].programs.gp[1][0].args[0]$257$;
	print_var2=NULL;
	print_var3=NULL;
	print_var4=NULL;
	print_var5=NULL;
	print_var6=NULL;
       };
       ReturnExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr=;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][0].vars[0]$258$;
	expr {
	 expr="oid_filename";
	};
       };
      };
     };
     PrintVar @[1] {
      desc=;
      flags=;
      message="Importing OID file: ";
      print_var=$257$;
      print_var2=NULL;
      print_var3=NULL;
      print_var4=NULL;
      print_var5=NULL;
      print_var6=NULL;
     };
     MethodCall @[2] {
      desc="Reset the raw data table prior to load";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][0].vars[2]$259$;
      method=DataTable::RemoveAllCols;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="Load the raw .OIA file";
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::LoadData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=1;
	def_val=;
	expr {
	 expr="oid_filename";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable::Delimiters;
	type="DataTable::Delimiters";
	name="delim";
	required=0;
	def_val="DataTable::TAB";
	expr {
	 expr="DataTable::TAB";
	};
       };
       ProgArg @[2] {
	arg_type=bool;
	type="bool";
	name="quote_str";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
       ProgArg @[3] {
	arg_type=int;
	type="int";
	name="max_recs";
	required=0;
	def_val="-1";
	expr {
	 expr="-1";
	};
       };
       ProgArg @[4] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[4] {
      desc="Set the file path stub to enable absolute references";
      flags=;
      result_var=.projects[0].programs.gp[1][0].vars[1]$260$;
      expr {
       expr="ObjectImageData.file_name.before(\"/\",-1) + \"/\"";
      };
     };
     Comment @[5] {
      desc="sort and make unique id";
      flags=;
     };
     MethodCall @[6] {
      desc="get rid of IGNORE items right away";
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::Filter;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="filter_expr";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"ctrlflags != \\\"IGNORE\\\"\"";
	};
       };
      };
     };
     MethodCall @[7] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::SortColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col1";
	required=1;
	def_val=;
	expr {
	 expr="\"supercat\"";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="ascending1";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col2";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"category\"";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="ascending2";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
       ProgArg @[4] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col3";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"subcat\"";
	};
       };
       ProgArg @[5] {
	arg_type=bool;
	type="bool";
	name="ascending3";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
       ProgArg @[6] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col4";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"individual\"";
	};
       };
       ProgArg @[7] {
	arg_type=bool;
	type="bool";
	name="ascending4";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
       ProgArg @[8] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col5";
	required=0;
	def_val="\"\"";
	expr {
	 expr=;
	};
       };
       ProgArg @[9] {
	arg_type=bool;
	type="bool";
	name="ascending5";
	required=0;
	def_val="true";
	expr {
	 expr=;
	};
       };
       ProgArg @[10] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col6";
	required=0;
	def_val="\"\"";
	expr {
	 expr=;
	};
       };
       ProgArg @[11] {
	arg_type=bool;
	type="bool";
	name="ascending6";
	required=0;
	def_val="true";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[8] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"oid_id\"";
	};
       };
      };
     };
     MethodCall @[9] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::InitValsToRowNoColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"oid_id\"";
	};
       };
      };
     };
     Comment @[10] {
      desc="get supercats";
      flags=;
     };
     DataGroupProg @[11] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$259$;
      dest_data_var=.projects[0].programs.gp[1][0].vars[3]$261$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="supercat";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[12] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$261$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"supercat_id\"";
	};
       };
      };
     };
     MethodCall @[13] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$261$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[14] {
      desc="get categories";
      flags=;
     };
     DataGroupProg @[15] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$259$;
      dest_data_var=.projects[0].programs.gp[1][0].vars[4]$262$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="category";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[16] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$262$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"category_id\"";
	};
       };
      };
     };
     MethodCall @[17] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$262$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[18] {
      desc="get subcats";
      flags=;
     };
     DataGroupProg @[19] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$259$;
      dest_data_var=.projects[0].programs.gp[1][0].vars[5]$263$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="subcat";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[20] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$263$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"subcat_id\"";
	};
       };
      };
     };
     MethodCall @[21] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$263$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[22] {
      desc="get feature1";
      flags=;
     };
     DataGroupProg @[23] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$259$;
      dest_data_var=.projects[0].programs.gp[1][0].vars[6]$264$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="feature1";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[24] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$264$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"feature1_id\"";
	};
       };
      };
     };
     MethodCall @[25] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$264$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[26] {
      desc="get feature2";
      flags=;
     };
     DataGroupProg @[27] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$259$;
      dest_data_var=.projects[0].programs.gp[1][0].vars[13]$265$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="feature2";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[28] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$265$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"feature2_id\"";
	};
       };
      };
     };
     MethodCall @[29] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$265$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[30] {
      desc="get feature3";
      flags=;
     };
     DataGroupProg @[31] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$259$;
      dest_data_var=.projects[0].programs.gp[1][0].vars[14]$266$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="feature3";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[32] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$266$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"feature3_id\"";
	};
       };
      };
     };
     MethodCall @[33] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$266$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[34] {
      desc="get feature4";
      flags=;
     };
     DataGroupProg @[35] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$259$;
      dest_data_var=.projects[0].programs.gp[1][0].vars[15]$267$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="feature4";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[36] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$267$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"feature4_id\"";
	};
       };
      };
     };
     MethodCall @[37] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$267$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[38] {
      desc="get catsubcat";
      flags=;
     };
     DataGroupProg @[39] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$259$;
      dest_data_var=.projects[0].programs.gp[1][0].vars[7]$268$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="category";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
	DataGroupEl @[1] {
	 col_name="subcat";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[40] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$268$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"catsubcat_id\"";
	};
       };
      };
     };
     MethodCall @[41] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$268$;
      method=DataTable::InitValsToRowNoColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"catsubcat_id\"";
	};
       };
      };
     };
     Comment @[42] {
      desc="get individual";
      flags=;
     };
     DataGroupProg @[43] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$259$;
      dest_data_var=.projects[0].programs.gp[1][0].vars[8]$269$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="category";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
	DataGroupEl @[1] {
	 col_name="subcat";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
	DataGroupEl @[2] {
	 col_name="individual";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[44] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$269$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"individual_id\"";
	};
       };
      };
     };
     MethodCall @[45] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$269$;
      method=DataTable::InitValsToRowNoColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"individual_id\"";
	};
       };
      };
     };
     Comment @[46] {
      desc="individual gets all the relevant id's too!";
      flags=;
     };
     MethodCall @[47] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$269$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"catsubcat_id\"";
	};
       };
      };
     };
     MethodCall @[48] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$269$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"category_id\"";
	};
       };
      };
     };
     MethodCall @[49] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$269$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"subcat_id\"";
	};
       };
      };
     };
     Comment @[50] {
      desc="get all the id's back into the main file";
      flags=;
     };
     MethodCall @[51] {
      desc="get rid of SKIP items now that basic info has been extracted";
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::Filter;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="filter_expr";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"ctrlflags != \\\"SKIP\\\"\"";
	};
       };
      };
     };
     MethodCall @[52] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"supercat_id\"";
	};
       };
      };
     };
     MethodCall @[53] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"category_id\"";
	};
       };
      };
     };
     MethodCall @[54] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"subcat_id\"";
	};
       };
      };
     };
     MethodCall @[55] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"feature1_id\"";
	};
       };
      };
     };
     MethodCall @[56] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"feature2_id\"";
	};
       };
      };
     };
     MethodCall @[57] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"feature3_id\"";
	};
       };
      };
     };
     MethodCall @[58] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"feature4_id\"";
	};
       };
      };
     };
     MethodCall @[59] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"catsubcat_id\"";
	};
       };
      };
     };
     MethodCall @[60] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$259$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"individual_id\"";
	};
       };
      };
     };
     MethodCall @[61] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][0].vars[9]$270$;
      obj=$259$;
      method=DataTable::FindColNameIdx;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"foveate_box\"";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="err_msg";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     IfElse @[62] {
      desc=;
      flags=;
      cond {
       expr="box_col_idx >= 0";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][0].vars[12]$271$;
	expr {
	 expr="false";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=$271$;
	expr {
	 expr="true";
	};
       };
       MethodCall @[1] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$259$;
	method=DataTable::NewColMatrix;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=taBase::ValType;
	  type="taBase::ValType";
	  name="val_type";
	  required=1;
	  def_val=;
	  expr {
	   expr="taBase::VT_FLOAT";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_nm";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"foveate_box\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="dims";
	  required=0;
	  def_val="1";
	  expr {
	   expr="2";
	  };
	 };
	 ProgArg @[3] {
	  arg_type=int;
	  type="int";
	  name="d0";
	  required=0;
	  def_val="0";
	  expr {
	   expr="2";
	  };
	 };
	 ProgArg @[4] {
	  arg_type=int;
	  type="int";
	  name="d1";
	  required=0;
	  def_val="0";
	  expr {
	   expr="2";
	  };
	 };
	 ProgArg @[5] {
	  arg_type=int;
	  type="int";
	  name="d2";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[6] {
	  arg_type=int;
	  type="int";
	  name="d3";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[7] {
	  arg_type=int;
	  type="int";
	  name="d4";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[8] {
	  arg_type=int;
	  type="int";
	  name="d5";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[9] {
	  arg_type=int;
	  type="int";
	  name="d6";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	};
       };
      };
     };
     AssignExpr @[63] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][0].vars[10]$272$;
      expr {
       expr="0";
      };
     };
     AssignExpr @[64] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][0].vars[11]$273$;
      expr {
       expr="0";
      };
     };
     DataCalcLoop @[65] {
      desc=;
      flags=;
      src_data_var=$259$;
      dest_data_var=NULL;
      src_cols {
       name="src_cols";
       el_typ=DataOpEl;
       el_def=0;
       DataOpEl @[0] {
	col_name="supercat";
       };
       DataOpEl @[1] {
	col_name="category";
       };
       DataOpEl @[2] {
	col_name="subcat";
       };
       DataOpEl @[3] {
	col_name="feature1";
       };
       DataOpEl @[4] {
	col_name="feature2";
       };
       DataOpEl @[5] {
	col_name="feature3";
       };
       DataOpEl @[6] {
	col_name="feature4";
       };
       DataOpEl @[7] {
	col_name="individual";
       };
       DataOpEl @[8] {
	col_name="ctrlflags";
       };
       DataOpEl @[9] {
	col_name="filename";
       };
       DataOpEl @[10] {
	col_name="oid_id";
       };
       DataOpEl @[11] {
	col_name="supercat_id";
       };
       DataOpEl @[12] {
	col_name="category_id";
       };
       DataOpEl @[13] {
	col_name="subcat_id";
       };
       DataOpEl @[14] {
	col_name="feature1_id";
       };
       DataOpEl @[15] {
	col_name="feature2_id";
       };
       DataOpEl @[16] {
	col_name="feature3_id";
       };
       DataOpEl @[17] {
	col_name="feature4_id";
       };
       DataOpEl @[18] {
	col_name="catsubcat_id";
       };
       DataOpEl @[19] {
	col_name="individual_id";
       };
       DataOpEl @[20] {
	col_name="foveate_box";
       };
      };
      dest_cols {
       name="dest_cols";
       el_typ=DataOpEl;
       el_def=0;
      };
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][0].prog_code[65].src_col_vars[11]$274$;
	obj=$261$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_supercat";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"supercat\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[1] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][0].prog_code[65].src_col_vars[12]$275$;
	obj=$262$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_category";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"category\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[2] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][0].prog_code[65].src_col_vars[13]$276$;
	obj=$263$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_subcat";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"subcat\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[3] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][0].prog_code[65].src_col_vars[14]$277$;
	obj=$264$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_feature1";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"feature1\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[4] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][0].prog_code[65].src_col_vars[15]$278$;
	obj=$265$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_feature2";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"feature2\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[5] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][0].prog_code[65].src_col_vars[16]$279$;
	obj=$266$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_feature3";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"feature3\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[6] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][0].prog_code[65].src_col_vars[17]$280$;
	obj=$267$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_feature4";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"feature4\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       Comment @[7] {
	desc="catsubcat (multiple columns)";
	flags=;
       };
       MethodCall @[8] {
	desc=;
	flags=;
	result_var=$272$;
	obj=$268$;
	method=DataTable::FindMultiValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=1;
	  def_val="0";
	  expr {
	   expr="catsubcat_idx";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val1";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_category";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name1";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"category\"";
	  };
	 };
	 ProgArg @[3] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val2";
	  required=0;
	  def_val="0";
	  expr {
	   expr="s_subcat";
	  };
	 };
	 ProgArg @[4] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name2";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"subcat\"";
	  };
	 };
	 ProgArg @[5] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val3";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[6] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name3";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[7] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val4";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[8] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name4";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[9] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="vall5";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[10] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name5";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[11] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val6";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[12] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name6";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	};
       };
       AssignExpr @[9] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][0].prog_code[65].src_col_vars[18]$281$;
	expr {
	 expr="catsubcat_idx";
	};
       };
       Comment @[10] {
	desc="individual (multiple columns)";
	flags=;
       };
       MethodCall @[11] {
	desc=;
	flags=;
	result_var=$273$;
	obj=$269$;
	method=DataTable::FindMultiValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=1;
	  def_val="0";
	  expr {
	   expr="individual_idx";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val1";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_category";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name1";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"category\"";
	  };
	 };
	 ProgArg @[3] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val2";
	  required=0;
	  def_val="0";
	  expr {
	   expr="s_subcat";
	  };
	 };
	 ProgArg @[4] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name2";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"subcat\"";
	  };
	 };
	 ProgArg @[5] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val3";
	  required=0;
	  def_val="0";
	  expr {
	   expr="s_individual";
	  };
	 };
	 ProgArg @[6] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name3";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"individual\"";
	  };
	 };
	 ProgArg @[7] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val4";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[8] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name4";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[9] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="vall5";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[10] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name5";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[11] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val6";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[12] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name6";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	};
       };
       AssignExpr @[12] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][0].prog_code[65].src_col_vars[19]$282$;
	expr {
	 expr="individual_idx";
	};
       };
       If @[13] {
	desc=;
	flags=;
	cond {
	 expr="make_box";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=.projects[0].programs.gp[1][0].prog_code[65].src_col_vars[20]$283$;
	  method=taMatrixT_float_::Set_Flat;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taMatrixT_float_::const_float_ref;
	    type="const float&";
	    name="item";
	    required=0;
	    def_val=;
	    expr {
	     expr="0.0";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="idx";
	    required=0;
	    def_val=;
	    expr {
	     expr="0";
	    };
	   };
	  };
	 };
	 MethodCall @[1] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$283$;
	  method=taMatrixT_float_::Set_Flat;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taMatrixT_float_::const_float_ref;
	    type="const float&";
	    name="item";
	    required=0;
	    def_val=;
	    expr {
	     expr="0.0";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="idx";
	    required=0;
	    def_val=;
	    expr {
	     expr="1";
	    };
	   };
	  };
	 };
	 MethodCall @[2] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$283$;
	  method=taMatrixT_float_::Set_Flat;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taMatrixT_float_::const_float_ref;
	    type="const float&";
	    name="item";
	    required=0;
	    def_val=;
	    expr {
	     expr="1.0";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="idx";
	    required=0;
	    def_val=;
	    expr {
	     expr="2";
	    };
	   };
	  };
	 };
	 MethodCall @[3] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$283$;
	  method=taMatrixT_float_::Set_Flat;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taMatrixT_float_::const_float_ref;
	    type="const float&";
	    name="item";
	    required=0;
	    def_val=;
	    expr {
	     expr="1.0";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="idx";
	    required=0;
	    def_val=;
	    expr {
	     expr="3";
	    };
	   };
	  };
	 };
	};
       };
       DataCalcSetSrcRow @[14] {
	desc=;
	flags=;
	src_data_var=$259$;
	dest_data_var=NULL;
       };
       Comment @[15] {
	desc="copy id's over to individual too";
	flags=;
       };
       MethodCall @[16] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$269$;
	method=DataTable::SetValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="s_catsubcat_id";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"catsubcat_id\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="individual_idx";
	  };
	 };
	};
       };
       MethodCall @[17] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$269$;
	method=DataTable::SetValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="s_category_id";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"category_id\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="individual_idx";
	  };
	 };
	};
       };
       MethodCall @[18] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$269$;
	method=DataTable::SetValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="s_subcat_id";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"subcat_id\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="individual_idx";
	  };
	 };
	};
       };
      };
      src_col_vars {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="s_supercat";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[1] {
	name="s_category";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[2] {
	name="s_subcat";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[3] {
	name="s_feature1";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[4] {
	name="s_feature2";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[5] {
	name="s_feature3";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[6] {
	name="s_feature4";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[7] {
	name="s_individual";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[8] {
	name="s_ctrlflags";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR;
	reference=0;
	desc=;
       };
       ProgVar @[9] {
	name="s_filename";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR;
	reference=0;
	desc=;
       };
       ProgVar @[10] {
	name="s_oid_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR;
	reference=0;
	desc=;
       };
       ProgVar @[11] {
	name="s_supercat_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[12] {
	name="s_category_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[13] {
	name="s_subcat_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[14] {
	name="s_feature1_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[15] {
	name="s_feature2_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[16] {
	name="s_feature3_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[17] {
	name="s_feature4_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[18] {
	name="s_catsubcat_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[19] {
	name="s_individual_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[20] {
	name="s_foveate_box";
	var_type=T_Object;
	object_type=float_Matrix;
	object_val=NULL;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
      };
      dest_col_vars {
       name=;
       el_typ=ProgVar;
       el_def=0;
      };
     };
    };
   };
   Program @[1] {
    name="ConfigInputFmImgTables";
    tags=;
    desc="configure input from tables with images already loaded";
    flags=;
    objs {
     name=;
     el_typ=DataTable;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="train_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$30$;
      objs_ptr=0;
      flags=CTRL_PANEL|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="test_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$31$;
      objs_ptr=0;
      flags=CTRL_PANEL|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="ObjectImageData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$29$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="SuperCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$158$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="Category";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$159$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="SubCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$160$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="Feature1";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$161$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="CatSubCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$255$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[6] {
      name="Individual";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$256$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[7] {
      name="box_col_idx";
      var_type=T_Int;
      int_val=-1;
      objs_ptr=0;
      flags=NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[8] {
      name="rows";
      var_type=T_Int;
      int_val=60000;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[9] {
      name="catsubcat_idx";
      var_type=T_Int;
      int_val=9;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="optimization to keep track of this index in CatSubCat -- everything is sorted so this works";
     };
     ProgVar @[10] {
      name="individual_idx";
      var_type=T_Int;
      int_val=9;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="optimization to keep track of this index in CatSubCat -- everything is sorted so this works";
     };
     ProgVar @[11] {
      name="make_box";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="if we need to make a foveate_box ourselves (not in file)";
     };
     ProgVar @[12] {
      name="Feature2";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$162$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[13] {
      name="Feature3";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$163$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[14] {
      name="Feature4";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$164$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[15] {
      name="i";
      var_type=T_Int;
      int_val=70000;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=DataProcCall;
     el_def=0;
     PrintVar @[0] {
      desc=;
      flags=;
      message="Importing from data table: ";
      print_var=.projects[0].programs.gp[1][1].args[0]$284$;
      print_var2=NULL;
      print_var3=NULL;
      print_var4=NULL;
      print_var5=NULL;
      print_var6=NULL;
     };
     MethodCall @[1] {
      desc="Reset the raw data table prior to load";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][1].vars[0]$285$;
      method=DataTable::RemoveAllRows;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     DataProcCall @[2] {
      desc=;
      flags=;
      result_var=NULL;
      object_type=taDataProc;
      method=taDataProc::CopyCommonColData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dest";
	required=0;
	def_val=;
	expr {
	 expr="ObjectImageData";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="src";
	required=0;
	def_val=;
	expr {
	 expr="train_data";
	};
       };
      };
     };
     MethodCall @[3] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$284$;
      method=DataTable::FindMakeCol;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"oid_id\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=0;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_INT";
	};
       };
      };
     };
     MethodCall @[4] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$284$;
      method=DataTable::InitValsToRowNoColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"oid_id\"";
	};
       };
      };
     };
     If @[5] {
      desc="use ctrlflags to mark train vs. test, init oid's";
      flags=;
      cond {
       expr="test_data != NULL";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$285$;
	method=DataTable::InitVals;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="init_val";
	  required=0;
	  def_val=;
	  expr {
	   expr="\"TRAIN\"";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="\"ctrlflags\"";
	  };
	 };
	};
       };
       AssignExpr @[1] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].vars[8]$286$;
	expr {
	 expr="ObjectImageData.rows";
	};
       };
       DataProcCall @[2] {
	desc=;
	flags=;
	result_var=NULL;
	object_type=taDataProc;
	method=taDataProc::CopyCommonColData;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="dest";
	  required=0;
	  def_val=;
	  expr {
	   expr="ObjectImageData";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="src";
	  required=0;
	  def_val=;
	  expr {
	   expr="test_data";
	  };
	 };
	};
       };
       MethodCall @[3] {
	desc=;
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[1][1].args[1]$287$;
	method=DataTable::FindMakeCol;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_nm";
	  required=1;
	  def_val="\"\"";
	  expr {
	   expr="\"oid_id\"";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=taBase::ValType;
	  type="taBase::ValType";
	  name="val_type";
	  required=0;
	  def_val="taBase::VT_FLOAT";
	  expr {
	   expr="taBase::VT_INT";
	  };
	 };
	};
       };
       ForLoop @[4] {
	desc=;
	flags=;
	loop_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$285$;
	  method=DataTable::SetVal;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_Variant_ref;
	    type="const Variant&";
	    name="val";
	    required=0;
	    def_val=;
	    expr {
	     expr="\"TEST\"";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=Variant;
	    type="Variant";
	    name="col";
	    required=0;
	    def_val=;
	    expr {
	     expr="\"ctrlflags\"";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=int;
	    type="int";
	    name="row";
	    required=0;
	    def_val=;
	    expr {
	     expr="i";
	    };
	   };
	  };
	 };
	 MethodCall @[1] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$287$;
	  method=DataTable::SetVal;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_Variant_ref;
	    type="const Variant&";
	    name="val";
	    required=0;
	    def_val=;
	    expr {
	     expr="i";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=Variant;
	    type="Variant";
	    name="col";
	    required=0;
	    def_val=;
	    expr {
	     expr="\"oid_id\"";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=int;
	    type="int";
	    name="row";
	    required=0;
	    def_val=;
	    expr {
	     expr="i-rows";
	    };
	   };
	  };
	 };
	};
	init {
	 expr="i = rows";
	};
	test {
	 expr="i < ObjectImageData.rows";
	};
	iter {
	 expr="i++";
	};
       };
      };
     };
     Comment @[6] {
      desc="sort and make unique id";
      flags=;
     };
     MethodCall @[7] {
      desc="get rid of IGNORE items right away";
      flags=OFF;
      result_var=NULL;
      obj=$285$;
      method=DataTable::Filter;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="filter_expr";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"ctrlflags != \\\"IGNORE\\\"\"";
	};
       };
      };
     };
     MethodCall @[8] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::FindMakeCol;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"oid_id\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=0;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_INT";
	};
       };
      };
     };
     MethodCall @[9] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::InitValsToRowNoColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"oid_id\"";
	};
       };
      };
     };
     MethodCall @[10] {
      desc="sort after oid so it matches originals";
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::SortColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col1";
	required=1;
	def_val=;
	expr {
	 expr="\"supercat\"";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="ascending1";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col2";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"category\"";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="ascending2";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
       ProgArg @[4] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col3";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"subcat\"";
	};
       };
       ProgArg @[5] {
	arg_type=bool;
	type="bool";
	name="ascending3";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
       ProgArg @[6] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col4";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"individual\"";
	};
       };
       ProgArg @[7] {
	arg_type=bool;
	type="bool";
	name="ascending4";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
       ProgArg @[8] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col5";
	required=0;
	def_val="\"\"";
	expr {
	 expr=;
	};
       };
       ProgArg @[9] {
	arg_type=bool;
	type="bool";
	name="ascending5";
	required=0;
	def_val="true";
	expr {
	 expr=;
	};
       };
       ProgArg @[10] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col6";
	required=0;
	def_val="\"\"";
	expr {
	 expr=;
	};
       };
       ProgArg @[11] {
	arg_type=bool;
	type="bool";
	name="ascending6";
	required=0;
	def_val="true";
	expr {
	 expr=;
	};
       };
      };
     };
     Comment @[11] {
      desc="get supercats";
      flags=;
     };
     DataGroupProg @[12] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$285$;
      dest_data_var=.projects[0].programs.gp[1][1].vars[1]$288$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="supercat";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[13] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$288$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"supercat_id\"";
	};
       };
      };
     };
     MethodCall @[14] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$288$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[15] {
      desc="get categories";
      flags=;
     };
     DataGroupProg @[16] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$285$;
      dest_data_var=.projects[0].programs.gp[1][1].vars[2]$289$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="category";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[17] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$289$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"category_id\"";
	};
       };
      };
     };
     MethodCall @[18] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$289$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[19] {
      desc="get subcats";
      flags=;
     };
     DataGroupProg @[20] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$285$;
      dest_data_var=.projects[0].programs.gp[1][1].vars[3]$290$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="subcat";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[21] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$290$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"subcat_id\"";
	};
       };
      };
     };
     MethodCall @[22] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$290$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[23] {
      desc="get feature1";
      flags=;
     };
     DataGroupProg @[24] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$285$;
      dest_data_var=.projects[0].programs.gp[1][1].vars[4]$291$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="feature1";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[25] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$291$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"feature1_id\"";
	};
       };
      };
     };
     MethodCall @[26] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$291$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[27] {
      desc="get feature2";
      flags=;
     };
     DataGroupProg @[28] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$285$;
      dest_data_var=.projects[0].programs.gp[1][1].vars[12]$292$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="feature2";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[29] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$292$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"feature2_id\"";
	};
       };
      };
     };
     MethodCall @[30] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$292$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[31] {
      desc="get feature3";
      flags=;
     };
     DataGroupProg @[32] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$285$;
      dest_data_var=.projects[0].programs.gp[1][1].vars[13]$293$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="feature3";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[33] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$293$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"feature3_id\"";
	};
       };
      };
     };
     MethodCall @[34] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$293$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[35] {
      desc="get feature4";
      flags=;
     };
     DataGroupProg @[36] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$285$;
      dest_data_var=.projects[0].programs.gp[1][1].vars[14]$294$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="feature4";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[37] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$294$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"feature4_id\"";
	};
       };
      };
     };
     MethodCall @[38] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$294$;
      method=DataTable::InitValsToRowNo;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Variant;
	type="Variant";
	name="col";
	required=0;
	def_val=;
	expr {
	 expr="1";
	};
       };
      };
     };
     Comment @[39] {
      desc="get catsubcat";
      flags=;
     };
     DataGroupProg @[40] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$285$;
      dest_data_var=.projects[0].programs.gp[1][1].vars[5]$295$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="category";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
	DataGroupEl @[1] {
	 col_name="subcat";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[41] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$295$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"catsubcat_id\"";
	};
       };
      };
     };
     MethodCall @[42] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$295$;
      method=DataTable::InitValsToRowNoColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"catsubcat_id\"";
	};
       };
      };
     };
     Comment @[43] {
      desc="get individual";
      flags=;
     };
     DataGroupProg @[44] {
      desc="Group by category name into table";
      flags=;
      src_data_var=$285$;
      dest_data_var=.projects[0].programs.gp[1][1].vars[6]$296$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="category";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
	DataGroupEl @[1] {
	 col_name="subcat";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
	DataGroupEl @[2] {
	 col_name="individual";
	 agg {name="": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=0;
      };
     };
     MethodCall @[45] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$296$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"individual_id\"";
	};
       };
      };
     };
     MethodCall @[46] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$296$;
      method=DataTable::InitValsToRowNoColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"individual_id\"";
	};
       };
      };
     };
     Comment @[47] {
      desc="individual gets all the relevant id's too!";
      flags=;
     };
     MethodCall @[48] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$296$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"catsubcat_id\"";
	};
       };
      };
     };
     MethodCall @[49] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$296$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"category_id\"";
	};
       };
      };
     };
     MethodCall @[50] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$296$;
      method=DataTable::NewColInt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"subcat_id\"";
	};
       };
      };
     };
     Comment @[51] {
      desc="get all the id's back into the main file";
      flags=;
     };
     MethodCall @[52] {
      desc="get rid of SKIP items now that basic info has been extracted";
      flags=OFF;
      result_var=NULL;
      obj=$285$;
      method=DataTable::Filter;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="filter_expr";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"ctrlflags != \\\"SKIP\\\"\"";
	};
       };
      };
     };
     MethodCall @[53] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::FindMakeCol;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"supercat_id\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=0;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_INT";
	};
       };
      };
     };
     MethodCall @[54] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::FindMakeCol;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"category_id\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=0;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_INT";
	};
       };
      };
     };
     MethodCall @[55] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::FindMakeCol;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"subcat_id\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=0;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_INT";
	};
       };
      };
     };
     MethodCall @[56] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::FindMakeCol;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"feature1_id\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=0;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_INT";
	};
       };
      };
     };
     MethodCall @[57] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::FindMakeCol;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"feature2_id\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=0;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_INT";
	};
       };
      };
     };
     MethodCall @[58] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::FindMakeCol;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"feature3_id\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=0;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_INT";
	};
       };
      };
     };
     MethodCall @[59] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::FindMakeCol;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"feature4_id\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=0;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_INT";
	};
       };
      };
     };
     MethodCall @[60] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::FindMakeCol;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"catsubcat_id\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=0;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_INT";
	};
       };
      };
     };
     MethodCall @[61] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::FindMakeCol;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"individual_id\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=0;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_INT";
	};
       };
      };
     };
     MethodCall @[62] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$285$;
      method=DataTable::FindMakeColMatrix;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"foveate_box\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=0;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_FLOAT";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="dims";
	required=0;
	def_val="1";
	expr {
	 expr="2";
	};
       };
       ProgArg @[3] {
	arg_type=int;
	type="int";
	name="d0";
	required=0;
	def_val="0";
	expr {
	 expr="2";
	};
       };
       ProgArg @[4] {
	arg_type=int;
	type="int";
	name="d1";
	required=0;
	def_val="0";
	expr {
	 expr="2";
	};
       };
       ProgArg @[5] {
	arg_type=int;
	type="int";
	name="d2";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
       ProgArg @[6] {
	arg_type=int;
	type="int";
	name="d3";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
       ProgArg @[7] {
	arg_type=int;
	type="int";
	name="d4";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
       ProgArg @[8] {
	arg_type=int;
	type="int";
	name="d5";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
       ProgArg @[9] {
	arg_type=int;
	type="int";
	name="d6";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
      };
     };
     AssignExpr @[63] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][1].vars[9]$297$;
      expr {
       expr="0";
      };
     };
     AssignExpr @[64] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][1].vars[10]$298$;
      expr {
       expr="0";
      };
     };
     AssignExpr @[65] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][1].vars[11]$299$;
      expr {
       expr="true";
      };
     };
     DataCalcLoop @[66] {
      desc=;
      flags=;
      src_data_var=$285$;
      dest_data_var=NULL;
      src_cols {
       name="src_cols";
       el_typ=DataOpEl;
       el_def=0;
       DataOpEl @[0] {
	col_name="supercat";
       };
       DataOpEl @[1] {
	col_name="category";
       };
       DataOpEl @[2] {
	col_name="subcat";
       };
       DataOpEl @[3] {
	col_name="feature1";
       };
       DataOpEl @[4] {
	col_name="feature2";
       };
       DataOpEl @[5] {
	col_name="feature3";
       };
       DataOpEl @[6] {
	col_name="feature4";
       };
       DataOpEl @[7] {
	col_name="individual";
       };
       DataOpEl @[8] {
	col_name="ctrlflags";
       };
       DataOpEl @[9] {
	col_name="filename";
       };
       DataOpEl @[10] {
	col_name="oid_id";
       };
       DataOpEl @[11] {
	col_name="supercat_id";
       };
       DataOpEl @[12] {
	col_name="category_id";
       };
       DataOpEl @[13] {
	col_name="subcat_id";
       };
       DataOpEl @[14] {
	col_name="feature1_id";
       };
       DataOpEl @[15] {
	col_name="feature2_id";
       };
       DataOpEl @[16] {
	col_name="feature3_id";
       };
       DataOpEl @[17] {
	col_name="feature4_id";
       };
       DataOpEl @[18] {
	col_name="catsubcat_id";
       };
       DataOpEl @[19] {
	col_name="individual_id";
       };
       DataOpEl @[20] {
	col_name="foveate_box";
       };
      };
      dest_cols {
       name="dest_cols";
       el_typ=DataOpEl;
       el_def=0;
      };
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].prog_code[66].src_col_vars[11]$300$;
	obj=$288$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_supercat";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"supercat\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[1] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].prog_code[66].src_col_vars[12]$301$;
	obj=$289$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_category";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"category\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[2] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].prog_code[66].src_col_vars[13]$302$;
	obj=$290$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_subcat";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"subcat\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[3] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].prog_code[66].src_col_vars[14]$303$;
	obj=$291$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_feature1";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"feature1\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[4] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].prog_code[66].src_col_vars[15]$304$;
	obj=$292$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_feature2";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"feature2\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[5] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].prog_code[66].src_col_vars[16]$305$;
	obj=$293$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_feature3";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"feature3\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[6] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].prog_code[66].src_col_vars[17]$306$;
	obj=$294$;
	method=DataTable::FindValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_feature4";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"feature4\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       Comment @[7] {
	desc="catsubcat (multiple columns)";
	flags=;
       };
       MethodCall @[8] {
	desc=;
	flags=;
	result_var=$297$;
	obj=$295$;
	method=DataTable::FindMultiValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=1;
	  def_val="0";
	  expr {
	   expr="catsubcat_idx";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val1";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_category";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name1";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"category\"";
	  };
	 };
	 ProgArg @[3] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val2";
	  required=0;
	  def_val="0";
	  expr {
	   expr="s_subcat";
	  };
	 };
	 ProgArg @[4] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name2";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"subcat\"";
	  };
	 };
	 ProgArg @[5] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val3";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[6] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name3";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[7] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val4";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[8] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name4";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[9] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="vall5";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[10] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name5";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[11] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val6";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[12] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name6";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	};
       };
       AssignExpr @[9] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].prog_code[66].src_col_vars[18]$307$;
	expr {
	 expr="catsubcat_idx";
	};
       };
       Comment @[10] {
	desc="individual (multiple columns)";
	flags=;
       };
       MethodCall @[11] {
	desc=;
	flags=;
	result_var=$298$;
	obj=$296$;
	method=DataTable::FindMultiValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="st_row";
	  required=1;
	  def_val="0";
	  expr {
	   expr="individual_idx";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val1";
	  required=1;
	  def_val=;
	  expr {
	   expr="s_category";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name1";
	  required=1;
	  def_val=;
	  expr {
	   expr="\"category\"";
	  };
	 };
	 ProgArg @[3] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val2";
	  required=0;
	  def_val="0";
	  expr {
	   expr="s_subcat";
	  };
	 };
	 ProgArg @[4] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name2";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"subcat\"";
	  };
	 };
	 ProgArg @[5] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val3";
	  required=0;
	  def_val="0";
	  expr {
	   expr="s_individual";
	  };
	 };
	 ProgArg @[6] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name3";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"individual\"";
	  };
	 };
	 ProgArg @[7] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val4";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[8] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name4";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[9] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="vall5";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[10] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name5";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[11] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val6";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[12] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name6";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr=;
	  };
	 };
	};
       };
       AssignExpr @[12] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].prog_code[66].src_col_vars[19]$308$;
	expr {
	 expr="individual_idx";
	};
       };
       If @[13] {
	desc=;
	flags=;
	cond {
	 expr="make_box";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=.projects[0].programs.gp[1][1].prog_code[66].src_col_vars[20]$309$;
	  method=taMatrixT_float_::Set_Flat;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taMatrixT_float_::const_float_ref;
	    type="const float&";
	    name="item";
	    required=0;
	    def_val=;
	    expr {
	     expr="0.0";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="idx";
	    required=0;
	    def_val=;
	    expr {
	     expr="0";
	    };
	   };
	  };
	 };
	 MethodCall @[1] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$309$;
	  method=taMatrixT_float_::Set_Flat;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taMatrixT_float_::const_float_ref;
	    type="const float&";
	    name="item";
	    required=0;
	    def_val=;
	    expr {
	     expr="0.0";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="idx";
	    required=0;
	    def_val=;
	    expr {
	     expr="1";
	    };
	   };
	  };
	 };
	 MethodCall @[2] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$309$;
	  method=taMatrixT_float_::Set_Flat;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taMatrixT_float_::const_float_ref;
	    type="const float&";
	    name="item";
	    required=0;
	    def_val=;
	    expr {
	     expr="1.0";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="idx";
	    required=0;
	    def_val=;
	    expr {
	     expr="2";
	    };
	   };
	  };
	 };
	 MethodCall @[3] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$309$;
	  method=taMatrixT_float_::Set_Flat;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taMatrixT_float_::const_float_ref;
	    type="const float&";
	    name="item";
	    required=0;
	    def_val=;
	    expr {
	     expr="1.0";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="idx";
	    required=0;
	    def_val=;
	    expr {
	     expr="3";
	    };
	   };
	  };
	 };
	};
       };
       DataCalcSetSrcRow @[14] {
	desc=;
	flags=;
	src_data_var=$285$;
	dest_data_var=NULL;
       };
       Comment @[15] {
	desc="copy id's over to individual too";
	flags=;
       };
       MethodCall @[16] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$296$;
	method=DataTable::SetValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="s_catsubcat_id";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"catsubcat_id\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="individual_idx";
	  };
	 };
	};
       };
       MethodCall @[17] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$296$;
	method=DataTable::SetValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="s_category_id";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"category_id\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="individual_idx";
	  };
	 };
	};
       };
       MethodCall @[18] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$296$;
	method=DataTable::SetValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="s_subcat_id";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"subcat_id\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="individual_idx";
	  };
	 };
	};
       };
      };
      src_col_vars {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="s_supercat";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[1] {
	name="s_category";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[2] {
	name="s_subcat";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[3] {
	name="s_feature1";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[4] {
	name="s_feature2";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[5] {
	name="s_feature3";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[6] {
	name="s_feature4";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[7] {
	name="s_individual";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[8] {
	name="s_ctrlflags";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR;
	reference=0;
	desc=;
       };
       ProgVar @[9] {
	name="s_filename";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR;
	reference=0;
	desc=;
       };
       ProgVar @[10] {
	name="s_oid_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR;
	reference=0;
	desc=;
       };
       ProgVar @[11] {
	name="s_supercat_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[12] {
	name="s_category_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[13] {
	name="s_subcat_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[14] {
	name="s_feature1_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[15] {
	name="s_feature2_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[16] {
	name="s_feature3_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[17] {
	name="s_feature4_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[18] {
	name="s_catsubcat_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[19] {
	name="s_individual_id";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
       ProgVar @[20] {
	name="s_foveate_box";
	var_type=T_Object;
	object_type=float_Matrix;
	object_val=NULL;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|USED;
	reference=0;
	desc=;
       };
      };
      dest_col_vars {
       name=;
       el_typ=ProgVar;
       el_def=0;
      };
     };
    };
   };
   Program @[2] {
    name="Split_Items";
    tags=;
    desc="Split the OIAs into Train and Test sets";
    flags=;
    objs {
     name=;
     el_typ=DataTable;
     el_def=0;
     DataTable @[0] {
      name="train_only";
      desc="items marked for training only";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       String_Data @[0] {
	name="supercat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[1] {
	name="category";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[2] {
	name="subcat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[3] {
	name="feature1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[4] {
	name="feature2";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[5] {
	name="feature3";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[6] {
	name="feature4";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[7] {
	name="individual";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[8] {
	name="ctrlflags";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[9] {
	name="filename";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[10] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[11] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="supercat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[12] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="category_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[13] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="subcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[14] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature1_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[15] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature2_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[16] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature3_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[17] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature4_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[18] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="catsubcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[19] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="individual_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       float_Data @[20] {
	name="foveate_box";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 2;2;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[1] {
      name="train_only_oid_id";
      desc="items marked for training only: just oid_id";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[2] {
      name="test_only";
      desc="items marked for testing only";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       String_Data @[0] {
	name="supercat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[1] {
	name="category";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[2] {
	name="subcat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[3] {
	name="feature1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[4] {
	name="feature2";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[5] {
	name="feature3";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[6] {
	name="feature4";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[7] {
	name="individual";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[8] {
	name="ctrlflags";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[9] {
	name="filename";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[10] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[11] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="supercat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[12] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="category_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[13] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="subcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[14] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature1_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[15] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature2_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[16] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature3_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[17] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature4_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[18] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="catsubcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[19] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="individual_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       float_Data @[20] {
	name="foveate_box";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 2;2;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[3] {
      name="test_only_oid_id";
      desc="items marked for testing only: just oid_id";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[4] {
      name="divide_rest";
      desc="the rest of the items to be divded between training and testing";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       String_Data @[0] {
	name="supercat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[1] {
	name="category";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[2] {
	name="subcat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[3] {
	name="feature1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[4] {
	name="feature2";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[5] {
	name="feature3";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[6] {
	name="feature4";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[7] {
	name="individual";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[8] {
	name="ctrlflags";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[9] {
	name="filename";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[10] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[11] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="supercat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[12] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="category_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[13] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="subcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[14] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature1_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[15] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature2_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[16] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature3_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[17] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature4_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[18] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="catsubcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[19] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="individual_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       float_Data @[20] {
	name="foveate_box";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 2;2;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[5] {
      name="divide_rest_iid_only";
      desc="the rest of the items to be divded between training and testing: just indiv_id's (for join)";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="individual_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[6] {
      name="divide_rest_indiv";
      desc="the rest of the individuals to be divided..";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       String_Data @[0] {
	name="category";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[1] {
	name="subcat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[2] {
	name="individual";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[3] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="individual_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[4] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="catsubcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[5] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="category_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[6] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="subcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[7] {
      name="one_object";
      desc="Copy of OIA items for one object category";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       String_Data @[0] {
	name="supercat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[1] {
	name="category";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[2] {
	name="subcat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[3] {
	name="feature1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[4] {
	name="feature2";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[5] {
	name="feature3";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[6] {
	name="feature4";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[7] {
	name="individual";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[8] {
	name="ctrlflags";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[9] {
	name="filename";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[10] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[11] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="supercat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[12] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="category_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[13] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="subcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[14] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature1_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[15] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature2_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[16] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature3_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[17] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature4_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[18] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="catsubcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[19] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="individual_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       float_Data @[20] {
	name="foveate_box";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 2;2;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[8] {
      name="one_object_oid_id";
      desc="Just the ids for OIDs in one object category";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[9] {
      name="train_one_object";
      desc="The post-split training set for one object category";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[10] {
      name="test_one_object";
      desc="The post-split test set for one object category";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItemBase;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[11] {
      name="one_object_indiv";
      desc="join of object and filenames -- one object";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       String_Data @[0] {
	name="category";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[1] {
	name="subcat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[2] {
	name="individual";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[3] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="individual_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[4] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="catsubcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[5] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="category_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[6] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="subcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[12] {
      name="train_one_obj_indiv";
      desc="The post-split training set for one object category";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       String_Data @[0] {
	name="category";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[1] {
	name="subcat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[2] {
	name="individual";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[3] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="individual_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[4] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="catsubcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[5] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="category_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[6] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="subcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[13] {
      name="test_one_obj_indiv";
      desc="The post-split test set for one object category";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       String_Data @[0] {
	name="category";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[1] {
	name="subcat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[2] {
	name="individual";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[3] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="individual_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[4] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="catsubcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[5] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="category_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[6] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="subcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[14] {
      name="train_indiv_join";
      desc="join indiv for one obj with ObjectImageData";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       String_Data @[0] {
	name="category";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[1] {
	name="subcat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[2] {
	name="individual";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[3] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="individual_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[4] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="catsubcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[5] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="category_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[6] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="subcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[7] {
	name="supercat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[8] {
	name="category_1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[9] {
	name="subcat_1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[10] {
	name="feature1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[11] {
	name="feature2";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[12] {
	name="feature3";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[13] {
	name="feature4";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[14] {
	name="individual_1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[15] {
	name="ctrlflags";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[16] {
	name="filename";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[17] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[18] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="supercat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[19] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="category_id_1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[20] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="subcat_id_1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[21] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature1_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[22] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature2_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[23] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature3_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[24] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature4_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[25] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="catsubcat_id_1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       float_Data @[26] {
	name="foveate_box";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 2;2;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[15] {
      name="test_indiv_join";
      desc="join indiv for one obj with ObjectImageData";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       String_Data @[0] {
	name="category";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[1] {
	name="subcat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[2] {
	name="individual";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[3] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="individual_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[4] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="catsubcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[5] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="category_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[6] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="subcat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[7] {
	name="supercat";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[8] {
	name="category_1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[9] {
	name="subcat_1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[10] {
	name="feature1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[11] {
	name="feature2";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[12] {
	name="feature3";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[13] {
	name="feature4";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[14] {
	name="individual_1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[15] {
	name="ctrlflags";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       String_Data @[16] {
	name="filename";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[17] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[18] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="supercat_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[19] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="category_id_1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[20] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="subcat_id_1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[21] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature1_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[22] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature2_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[23] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature3_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[24] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="feature4_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       int_Data @[25] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="catsubcat_id_1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
       float_Data @[26] {
	name="foveate_box";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 2;2;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[16] {
      name="test_indiv_oid_id";
      desc="just the oid_id info -- added to list of items";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[17] {
      name="train_indiv_oid_id";
      desc="just the oid_id info -- added to list of items";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="NARROW";
	  value 1 0=1;
	 };
	};
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     RndSeed_List @[18] {
      name="rnd_seeds";
      seeds {
       name=;
       el_typ=RndSeed;
       el_def=0;
       RndSeed @[0] {
	name="RndSeed_1";
	seed{ 1268377840;1006166038;1102458544;1588864216;1387899553;703590693;666497183;-696646206;2139065901;60597093;1409319907;1576401461;2086505104;369509442;-1060225000;-1771389514;-1752290284;1565076159;1223658248;-1859605600;307456254;-452306357;-1084348802;1075940099;-441587230;15576798;7130032;901614731;533452275;-24153092;-207275335;-1615612543;1755232207;631095911;152555973;772485084;1175100912;1313687866;625702765;1504342824;167731285;446791346;2103590500;1542040324;416884261;-1441211962;213110402;-1174271111;-1353688393;36808346;-168483596;1900070054;744224023;504496456;-389936738;721276968;1537247232;858075550;411836816;1479495179;1974674478;525561288;1646417958;-171268446;-427366715;-64814497;379005582;-515127223;589012854;-965341229;-1447391914;428324459;-736674945;207868981;2036733491;981828613;1115079493;-835293663;-682121800;1231189526;-1817450909;2042809750;-1660818459;-531517066;1852153981;-1537299135;-2065156411;677321690;-1906071718;893853201;312276495;1711545158;623428191;-575502632;362244037;2108120600;1125286205;907680013;2064570243;985503917;-868429403;-474313501;136148166;-1333327739;411540651;-1392160032;-1197300332;-1310549351;291566227;1662345068;528153455;-266560966;1298160109;479643277;-510080237;325299651;44427619;-82833532;106323897;1667024244;-1686600543;972853192;1477362274;-1198609270;1112988196;973397526;-648059604;1746014986;-459315497;-1061747163;764003200;158966275;-2033875277;1004133722;970948360;1231054511;-1061314258;-364073910;-93189545;-1898903633;1733205197;763431177;217932315;-868931530;2029009529;2136558057;-333491942;-1368366992;-1324281970;2044792529;-1368905562;-648819381;-1813805568;-1651969693;-170187553;406013799;1698843455;-1541546477;-99174829;-1900626385;1226448225;514193281;427143047;-955351066;1718420221;612305425;-721874341;-243444385;2124737012;-101225646;574795935;489539174;1996872938;1190587492;917524871;501377522;-224112854;525282526;-1689157048;-1377304091;1188978647;-572565981;-384558250;1390560832;581271901;51498858;569151372;-134574345;-989398272;-1725258772;588188580;1671847027;-147227718;-1158491714;-1070703634;553065028;-1503149672;1891683463;-919705692;2119713962;440376127;937818020;347961470;128841857;1495733425;-414361027;1182910788;-489859576;1549522471;2027934671;726257432;1570409803;-1197713146;-1603386519;1233247501;-1696882029;1084079373;599458453;456966819;1503069738;2047832787;675852215;-860404975;1152391417;-1516334408;-1356108221;-907392633;-1117608457;1752078221;-1752189151;2057960629;909707243;1160373151;-1784128449;1718880763;1123334797;-1942583768;-495621761;1613363930;-1479791530;496136724;-1738557739;175977157;-1561102932;868846746;452518839;1141884713;-1645872193;-39880823;-475462549;1138910722;-16852182;1207200041;-271850043;-1982685668;294154453;-519470583;-1516394253;20160791;909434390;139421106;-1533189569;-1756010473;502812240;-1727023464;-1037994549;397639922;141648517;-803730299;-673536021;-1535678570;244716147;372888431;1392497372;-1496221885;-1740843336;-167755146;1591596606;-1796849935;858513910;-1577661146;-970771379;1493393888;-2032269344;-1761669306;749234929;1480862515;-1805595175;1566075783;-1642650881;1908749299;-281542243;222835322;-1177209529;-75304353;-1092560013;1346178493;76810325;489670579;261985738;-824495138;-1840792482;278826362;-1097196463;1983551727;-1753762537;-1581928581;-538641168;1331353619;1828119119;883230716;-1639578717;-285763395;496955951;848934085;1170522100;1829558757;199818289;-214386285;597640975;-1874390741;-1202210962;1069034206;-2035566375;2041193131;-1219319721;100984783;-1431945998;885160952;-388324831;-1510724940;388645145;338759977;-39209094;-143383285;735831415;1976514627;-1045789349;1862972682;560550314;2129081190;-1484101640;2065027320;-12602220;1877479403;2121826987;-1373730708;739291841;-1585000319;-681877492;-773984695;1293590161;-1068785616;1006010496;377828322;-293639283;565603946;-1426699465;-1411511729;1714964168;764706741;1306607826;257195945;239521816;1475670756;165896902;-772018292;-1937634342;2056078760;664989214;-7863992;1181132554;-349058101;1663790941;977218754;-617710591;-1782448062;-378774855;123950812;1135673927;116874522;-1541364033;-2058883313;430589600;-1369866592;2088872299;-591949228;102649046;49076210;-425740801;-1085625870;1391885623;-658813482;-1151356014;-859182758;-956779864;-1637285373;730289394;58197768;727060407;-916577341;-846865327;1458950124;-2034508012;337365826;898335903;2120051537;-2005325785;1665901873;1821302153;-1214042046;435440347;1768799491;1434428775;-1733699364;-1239195851;-1737883309;297656214;27950544;373814451;-2126751933;373765962;-1581945896;-834586455;-1951115590;-1617514431;-1331927271;-1767955886;1179999036;-1473534530;-1928462118;1256320743;71719022;672514839;2141079749;-1145070841;-172959827;-537708709;653979502;-1625008611;-1438280973;430765006;1113026560;1937160992;568557249;14503138;933382376;-1436357305;-1025209607;2002821219;-1985889684;1519742249;-1871283572;-1472833077;-1275265261;-1933067140;-1105277570;1820487605;-1691785266;1182146887;1968412778;1434019588;-1641393209;1944746888;1683886045;782040989;-1576607805;616272376;2095468716;-1195021546;-373492550;328372180;-2036910980;-1674500721;1867990907;252018429;319520941;740383518;1757282996;1901916232;-733945939;-82944121;174413046;1865166065;-83219308;1761699960;365296291;682762038;57948214;-529984201;1245328238;-1434078282;-1378403344;-2137183641;-1636513593;-1662540632;388559618;-1975389253;-1920849169;-1513175436;1208185986;-1236527964;1000013172;1408570555;1356773722;-1903307296;1452889636;815516564;-1904900256;629136807;-1130245151;-1787685490;-1436651972;-336417161;-1421415994;-1703927721;-1378008947;398459248;1771406134;1974875578;1338066895;-984574897;372977670;1245129321;-699570924;1866674976;768005907;1578174350;-1028881285;1614577001;-1529732070;-1730078837;925211681;323699738;-1193686440;-72547943;-464319014;1948031414;-2054384051;1561368134;-1477948641;-660395634;1752619967;-55614955;-2092336434;-1974951779;-453675043;-1592780103;-926572309;1064084909;-1371409305;1452440320;1420104333;1306607461;814123166;-2004715903;779738843;173351316;-40209006;433192292;-1372619100;-1576153169;-44988813;2133589091;-182909218;-2087256986;-832628310;1340052196;-921402479;-2139157293;900917679;644733766;2056911578;100412836;-1067005966;220454228;-572241820;614511076;2144679222;823750646;-743582638;-2073354438;209734494;1317342301;1419714196;1010290706;-388187292;-1825500946;1524497256;-788634694;1573542731;45523073;-1652990411;-607216380;-1984056043;-2057125018;37985480;-1123293891;-870765775;1147784977;117326760;-1910662239;-278027095;1543959405;1056364536;2025778997;1271084514;-1727021074;-1604319620;-20053993;903659078;500468225;-1262748215;2106181244;1811887799;1995570741;1374626028;779212010;-935314244;-1626132282;218571712;-265102035;1890640788;883394872;	};
	mti=624;
       };
       RndSeed @[1] {
	name="RndSeed_2";
	seed{ 1268377841;-806267215;-1468369348;1699337337;-400749732;-2111548544;-376208304;-1152868410;-813503396;2042566788;338090371;-196088902;-1497562871;-1720890268;617331276;-1289278453;-1522257763;440747468;1749202318;543434878;-1532926006;-1968178691;1311774897;-2097156729;1069015697;-373097394;-183648389;-433339789;-882792884;1605362760;-342941205;1442154663;344571806;-1221187721;-1280430517;712791024;-678916652;-1314323208;640598216;-1156245745;906169673;441405174;-1018835656;-436499598;-705397567;-2121856329;99948183;-722880318;-1923338923;184709764;2027672134;104002870;869180546;1579055487;-344171284;-732589694;-148410083;1575661327;1453821632;784833376;109489436;831146057;1379702283;813206577;602704021;1501339658;69076889;1931010208;-915552055;-297119241;-153491062;817001556;1425332588;2062556490;1903538657;482348459;-1564284989;1194506354;-891465555;373289717;15923193;979310222;1886905432;1391442032;-1184940567;-266129140;1049387585;-373388036;-1600448525;-1332253842;875441654;1451935849;-992429724;713704704;-1434830498;208592299;1879766999;567233999;-1139377651;-426168498;-1143284027;1241736168;187505747;1463392294;-650713397;-1012787887;429476804;-446510913;713674392;1310055013;-1455772190;1817409999;-1514124106;1456904053;769840438;454165697;-538039911;-395324361;1243254010;818475646;-1837163986;408608725;947276931;-248296662;-158033751;-1292290673;-321546721;-1470286453;-1859424115;-313987092;162959565;-98576796;152942119;-297485080;413486141;11450776;-110521984;605717560;-1396694366;1823820203;-1550316898;49130521;-1718794389;1876123132;-1986299295;-1685371744;505071228;-231953537;1942553728;-851521414;1453850963;-1170511887;-1615458697;834884034;1025381412;-224315697;-1887319272;-1717826593;-1410010161;347596160;-589362144;-1703705232;-2145671012;-1669851911;1970772651;1285226423;-235320972;367766426;1845894762;-1482800160;116570836;797649487;-1212876585;-43832906;-1989914089;-15425544;-258117193;1004744885;-425323237;-1804063957;1554053345;-19787499;-1281391516;-493628683;217178566;1101728215;-40343512;-1710416718;-732528084;1964344392;524763787;-276388714;-364532599;-1499927245;-1180971497;441748492;-2036224640;976357135;1089261745;1307346487;-979510762;1133463570;1369348937;-1281045453;1386334497;777419373;-459431217;300181323;-1049566105;713007173;-1895683829;2131690080;634968601;2113170866;67703669;1462848256;1084039485;-848610939;-2017433416;-603268035;-841477294;-1949501230;1723169518;-722704342;-1440609779;-247922740;-16010099;-1155515671;-743701861;-1033347363;-838583172;-947595774;334886989;-939054006;-1014592841;-549777937;-1640772856;-413305377;1425423546;-658306634;-2062044583;1967722968;1766861967;-1805937927;1923502331;-339100265;-1676148646;-1878049873;-1699929799;2041819200;1795052447;1114147921;-1132057460;1319736067;-1516170552;1193313457;1470532208;702683286;2037774896;-1849233576;2097781126;-1633430968;976327224;475441439;1116426563;-532585965;-441040550;2135910952;-314321863;770426351;-2005205159;179008246;-488373730;-740205694;510141431;-367632250;337527437;1869133750;950168393;-25336348;-1068313541;-1580747983;487915321;-1133694056;686343902;-833272653;708201102;-1489802971;-828416893;1423966113;-645104830;-852923704;-1425357253;-1226590558;-2098024890;-52615685;-967199744;1926144344;-716355001;1008251391;1593356743;-206890421;-880154730;1265245176;1503939437;-366833971;-1380936072;-1668765355;971726727;1621946488;1346019827;-1922406479;375305687;797888012;-504383498;-793202204;-2124165025;1701706478;-1875449719;1206461206;-865916845;-1914586927;-675555455;1610520973;1651671424;352461354;356906456;-1374513281;-2133677415;-1633205392;187932484;376781599;1253895047;-1891785941;1103188347;406155377;-447162651;-279453681;-1528442354;-630698993;539782672;987626917;-1848287121;1489264984;1392642677;278017309;2011593419;959089933;-1432314755;546748024;543438518;-1345651411;-1126364181;1844733262;1154236557;1190421663;815153594;-662013497;-1909985350;-1559032577;-1620933063;726763952;-1112898598;-809722461;-1255878260;-829576077;1178401182;1056805930;1400631298;392973728;-760921710;-2109704024;-391604602;1018401006;1776913756;-547976152;1733644655;255786975;-840807563;753134857;-150644983;-369773969;996094490;-1256935487;-1785875345;-1049524862;616740455;624957222;-1464436350;-1987874555;-1551280055;326957598;284867934;-1210710625;1941716347;-1937732435;-422958697;-787571471;-1352700152;-2074531199;1552081471;-496471545;106242342;-27432047;-496331730;1720945750;-122556695;-1753973271;-1379569073;-718516486;93154007;2128164718;-1570355353;1582446966;-42836847;1369876793;-1479033672;1295188227;-1615365780;-312424439;578963350;-1831893549;-818698725;233529631;816835043;-2100903112;-981790324;-1797491178;1622625168;2092460770;-1775589315;1083644298;-1357547385;-124077270;1297336799;-2044169143;1715406411;1967199975;-1069997964;-2144698454;-1397930240;-1536485501;1046171807;-1065031818;-998248475;-1792688773;1150845819;-1092736287;584017999;-389058580;-1069084147;1259708233;-323133140;1006796880;1171747158;-1492629478;1837189952;-535856274;186910923;-1887888158;-1252243924;1110986739;-1969353144;-502841599;-1633554534;-331095863;-409351292;843681046;1461678466;-1849956988;-610253388;-2020904438;-1740486912;1395922851;-1314847036;-124673031;-166953602;-327128786;-483551841;-313490325;913827560;-667401367;-97758028;-237740778;1982593069;-2141423807;-1490884011;-1131412166;1009060096;-882012439;-2078630340;-656302495;-76287850;-1332696650;-1479521806;-229728865;-895439748;959252236;-388155986;-1262828492;1714049346;1896082532;-1026469169;897112179;866644567;-1772868276;-2137612352;-1925588091;-1560289985;84078606;84030852;1327416083;-1694131686;2136253817;-1355120038;574523067;-1948107573;-1203204526;754513814;131266101;326140401;444874526;-1647970592;1214733109;1325519248;198527298;-1473758440;1966488913;-1301937504;1679146491;-921387084;-506883002;516124237;960281462;-41804380;-372960262;1245717589;218843965;-77375957;-1838913565;1079731937;-1640138627;859145017;2045069468;60599569;753230550;1950254736;749056600;1245214428;-68277162;-318505809;494845443;-322595753;-1532986547;-2005471403;-1134363010;-1834826472;1365815151;1479612052;-1970886664;-958721582;1504567974;376884501;-399366020;586085199;-1549514912;-978215456;566675398;-1296053930;431252573;-1469292565;1567918632;1342797161;-1184367547;-1510373055;180159662;-321521434;1558233498;-1685760151;1062257274;-62519706;-909142754;92101559;-158654342;-1466723579;1964557068;1149365099;-1239180003;1258002055;-562422997;-1127407338;-1691499725;-1193656923;-592858060;31886085;159221836;-1232374704;1820510383;-1312797444;1292128397;-173886060;-1484753428;1984751424;-1830811648;-424002266;-97128714;2027644423;1783789757;-1303756660;-1078364057;-866283717;1024883579;1716554987;194434231;1331223961;198035295;1333428707;-804965741;-66321094;270045928;1688739828;-350110954;-889188681;1976574835;	};
	mti=624;
       };
       RndSeed @[2] {
	name="RndSeed_3";
	seed{ 1268377842;336065248;1279046242;874404882;-339872482;-1712768650;183418570;-2083430471;-1879910449;585554154;-175190436;107037318;-358419222;-977645318;-89771189;-1677999241;-98518471;-1037532429;480123074;1793955485;1134159776;1242860442;1846413117;1879832259;856960162;-2092544509;-125677697;1146533895;-287584134;-1634139942;-1715933866;-1975282109;1071255749;1969556186;329874313;-1581707728;1375296478;1621399072;1009640491;-1369241570;-718459084;-946270244;737843749;1231003076;-1970623515;101019984;586777790;497880357;1230109897;387433241;-1250469361;1772256340;-470316355;1562077995;240173512;-1979155425;-1601209175;-1358908752;1707459188;-1454811804;1718372218;861275844;703303570;516081369;1529976029;1698526989;659121150;-1435934343;790317259;-783983780;1104929729;-488465657;-1250407204;-1146412577;-928079493;-1416172381;-611023663;1449838887;-976178612;-286547846;-886697715;-460900137;-2071011338;-773591145;-953173576;408312348;386828642;-101734911;1030852898;1416066243;-1281695004;-70083815;1154358174;1198652696;-1474675653;237192156;507413036;-2121865283;913810877;-921597708;-1460127529;-366253714;2089217383;-602849371;-748162330;1229087170;1574366553;-1472742365;1116856945;-959691107;1454664388;-910914264;871675239;-563039980;-1663292027;-370395722;-2032005667;-1514876816;-285130896;915903446;-87762458;-645364526;-1347993617;-1985147396;2008380338;57045276;297180298;915905777;-1553668971;1766063892;-1058479925;1101248363;1051006806;-67552397;-1439472714;1351461515;2045649658;1686708368;478048959;-1601930010;-715699584;803569980;-1873209030;-231871577;-1061897148;-637450348;1525812773;-32712505;-1200723480;2007237607;487956564;-559860293;862038576;1894503817;-116848830;-1271355840;-819926362;1544675510;1028691921;-1530806508;827140686;-818450585;-1489537258;1495773063;-1103038846;-1861500635;1074926601;-535679025;-2125133788;-923628121;620406366;-293735999;-228641738;1542649494;-1091364543;1665323806;-969809173;-126570951;-1294219372;-341900063;-1987584034;-395571583;-1007465472;-624977690;-1599283183;212046648;752487890;1546311317;-1748509408;991916327;-1291418591;2134760846;-1310527189;-2051598610;-319531042;-495521804;-1021780937;1007859017;2003081107;-1395986591;367095255;-90610276;-784322683;-1133807959;999576899;2080079676;-1208231713;-2022320896;730406042;1302115219;-68551828;1323801246;1635260559;1298640603;-965695784;-2017851330;-1536074620;-1696122953;-1141123005;1188961152;-18881599;1904586343;551314716;2094260459;-2124744910;-1183041839;723356961;-1693034520;1145236022;1497290648;1213919555;-1479835151;762990791;-1880269204;-852418480;619916458;-1484940802;-774267559;-2054799504;1510542057;-2000718216;524749075;-1637433231;1118599506;-264353357;1641169765;633412458;-1262384183;1522060047;620010367;1345409301;-1352355361;787771949;1925587390;-797734823;-1006438783;-2136681398;614091113;1342646383;-361246103;432455382;123982195;-1818415515;329871018;750232602;1610328395;1692951868;-1366780132;-1097552414;47544941;-1313299697;-562738640;341873199;-1952590692;73363816;-953129189;1860994444;2040800950;427570761;-821199644;-965023941;113390129;-1563359377;1231832092;16082317;-150698306;1276071599;-1041815099;-503811522;-137185230;1074521463;-1330139471;1339734211;1937291183;-1766943028;-382222739;1961427086;690143380;-2016333938;-456282265;1405007776;199924914;-1572268696;1899048449;1006970672;-1034868959;-2115787876;850467977;1541706817;-1572553099;944624937;-35189916;-1793941541;-1294781738;1733460702;-1817183690;952077248;-1214520323;-1384289319;-399457882;-1704938407;-81208280;505340217;-1656398400;-1814507314;568036801;650262379;-499834498;1414339737;1860280641;-418390134;-1868397736;-1746993714;1096830665;-593486282;-355907272;1043822743;999056356;-1961595322;-2115115481;2047384301;-1933480847;-2038540875;934789514;-724027702;-98685018;-1091888525;-1996560144;-304518442;-121232282;-899061193;483965923;1162058991;891963719;-1881740955;-1736231418;-1916242696;-511315449;-159866630;1049347236;165435932;384600693;-962707821;-2116435909;274094313;1644480090;176551509;1879092728;1529734573;1622714957;-1273897618;947857679;-896713889;-301946687;-1243584512;-1992287167;2134901479;-1843905481;-1657069725;1942309824;-1062720095;-1707887513;213072471;961516754;-590865830;1970997150;2046237245;1663792943;221226154;-342822249;-1811093014;-1751289329;-1383991895;-596938496;-789368135;1898876653;172929192;-500327467;792593148;938740475;-570054249;-1291313931;-126575099;1220382705;1415658308;234311886;-93118244;1713131666;-1471187305;132286306;1652612420;-64734508;766068591;1661769576;1088286475;499231377;933684693;1789569962;1088503577;-45498853;-1216685796;-1183139717;-244151709;-690095737;313988796;1284150741;-442002866;-998052084;1996511639;-567369765;450341350;-1370742931;820236155;-1002000328;-103801863;703190357;1572776253;-177347999;724485216;-282403945;-1133062372;2111041167;2099846592;-1637087264;-536539162;583259158;-1738771348;768266021;-538867623;-1201080509;478304103;-670851994;182567581;-1434267978;-584719670;-2050028524;885099638;63017559;-955232995;109411489;1455642193;-529408163;1091071972;-679955416;-1405675065;1055562122;-914395324;-1329272874;-460592008;1746870620;-491917177;-940406293;1406505568;1262463774;-2071258091;898328046;-351430974;-1924086526;1565178590;-57273638;121279101;-269766094;1437632567;-922442447;1738207390;1933510560;1415196011;2143790777;1896169600;-1776386610;200134502;-1399166167;-831304477;-1044302259;996945076;2122709235;-2085438614;-1683580423;-1426123527;1874500602;435543803;-818786820;1620000401;921616583;-1429368965;1563450806;1782377005;2056122711;830553834;588189263;-1681789399;-484115466;-1474263383;-1886149000;-1364329948;-460584703;857711054;1840518731;2080401208;32849028;1522501148;857763962;324250668;-1403356313;1736359397;165409025;-1698258829;1800456100;-1556540631;-1695312632;-937285372;1352659158;-1327622681;-694603154;57162775;2028537386;-1217825777;1947254842;-417829791;-1924057403;-1429463649;-1448364530;-545308454;-1730692932;-198470890;-2005252502;348352810;-1731124811;1435385431;-590045165;167491702;2034298549;222855980;839011973;949037475;-402478470;-1416166167;-895240732;-62888623;1491000713;-1020055336;575962008;1117855018;1918469930;-589997781;-1661298947;-1096479791;-516515978;-1849008031;958530632;1018051234;546035237;600329173;1030613574;-22616612;636881466;1696666914;-229501936;396695745;-945221784;-824157573;-935990371;-240155236;68866306;-2021881326;-1602942311;-1625873295;-1446515030;1630605972;-111078378;-1080087657;-718147304;-763849481;-1812637035;-613904667;1963161873;362304932;-1838510071;1601026477;39538483;2043513975;-1384279321;1181385651;2052995477;-1224151616;1443930599;1350432796;809855696;-583240080;1701005504;-1956511865;-2012545316;785210874;1747378183;-1922852156;-645265275;1974408518;-1452841364;1620986320;78314208;-1277764404;-510566989;-1722996514;-1269637829;	};
	mti=624;
       };
       RndSeed @[3] {
	name="RndSeed_4";
	seed{ 1268377843;-1476368005;1860853183;-422336007;1968101798;-500744728;252391613;-39166056;1117694767;1215768367;-717483216;1365171754;377465347;477015612;-2037589574;169696679;-1203416589;-1245033178;1209316166;1594669590;440187431;1688555640;1821933779;-1831258895;598535927;1541240460;2091662011;1853273469;1649997320;-285023574;1443814859;823433937;-877531755;1550975567;1951966952;883657488;579431796;435634921;-1313138925;194982620;-66401036;112463004;671905206;2011354873;844204036;-468660799;1896611768;262464812;1055323788;954478957;-428485325;266587171;-2045557501;-2071018854;614342190;1271563869;-984465788;-2036733316;178844144;2075190251;1781015950;-1193715544;1658385744;-65527244;-2091520269;39665238;-780165584;-899173022;1017280649;-161882286;-1859226565;1561680836;-974347775;-14877421;-716347494;-181813080;2051114691;-733610793;-1917438990;373157375;12934379;-1694209016;-1294599612;1900360689;1688792580;-1138125490;-1570663598;260370151;1067245691;342057952;1992902586;1860788258;192588075;-266747564;-2147363151;-544964610;1404036145;-1563248815;142786337;2042958184;1190137809;-1545826955;-1074167975;571732558;-1498654930;-287772475;1910174856;-1812018312;-960458354;-289873394;-901438321;-576038997;-491422280;-436163016;-1021357895;1789158357;924047128;1519891693;1881189778;2093819510;1204214891;2085597259;-1160894548;-2074884575;957015883;1310811156;1246673351;249840029;242608241;-721408490;1078881227;-2128240331;-1281357257;655189102;-1173783060;1403325805;1111562276;1050498082;-1962515468;-927066471;-2092083890;-1791208567;374298981;1374179944;832681213;-846017182;880472279;-918219674;-1964107411;-1047170976;802116261;-1366759248;-1788276526;1646457513;-297949982;1773500000;-107438623;-824034105;186834418;925242137;871164541;1801480434;1473803137;-1498082781;386584745;-510802862;1697959323;-955086743;-399078278;-1308545690;1232956702;767206630;1999381866;-832698652;1629182161;536959679;1766982923;-850110557;176894674;-1562677363;271551263;-1240565008;136315952;-1271965785;1847058897;603219913;-1653177337;1150010292;-1932323803;-2044669152;-1713471704;-117725615;193495322;430430723;754556657;1495379672;-2067063455;-1466854444;-1134110156;517275157;-191595503;-243755549;1709703722;-1864442174;-2073910644;1573527763;-1441966680;1237370593;865883952;-1448667455;1030706881;-1650359304;-1271931786;-1425535335;-1808025859;91662962;1780892114;722920472;-1665083822;-1493868949;255029577;1810547626;-1274890667;688357426;-856795494;1351552062;1068928189;1770105972;413575181;-32881914;-1458757921;-876842216;-995107441;-708422363;-690295064;-1700198750;664485388;1992812457;225398326;-918633923;1936183654;1154923924;524323259;-2042074438;1186370444;534359190;240606756;752183595;-374898193;-250507499;-1290126680;90447885;302160669;-103499666;1855592703;-249705675;1761284942;-1551047124;-1593348312;1150441109;740121960;-1939176691;1334951153;-852755529;1308205836;1293568554;-1472379135;1614979130;-408564909;1835468701;1375501722;1259504182;1232981955;-652227941;1461602058;675539818;1672322022;-214031816;192025949;1660695496;1001783397;-1815661070;-1559906102;-828575741;274379036;-1538007767;-425769451;1811049933;1677426332;-1153041902;-337757838;964764600;1712885948;508641462;-22417676;648968090;-569599254;-499199978;1823889011;-313450971;-450020310;-1859539366;2015814118;-678641582;-878036443;307316783;-2030329155;-224891506;-1013010731;688226723;1895915909;-1386799541;-1567423227;-387793924;-267869227;368061097;-1523300631;1006681844;992471938;-61440631;2115265202;-574505760;431620561;-367881800;695046923;-1522997348;-1598492516;-1643283043;384149507;-879106696;-639410735;-861444315;776538442;-774945409;-379992262;-1701307444;260454294;-1060293249;-1460046018;-1109448705;693906725;2106170862;1381578657;1096258423;1974555878;464985980;461162822;-1461985287;1299821155;-366488569;776522482;-604924711;418276706;-2013433077;986526959;1255328430;-1301635217;-883082138;1675485759;2085581277;2085267764;-92987310;-1934091681;-11981540;819815847;-28279984;-888859603;-972057195;-632468578;-884941982;-777750601;-270626953;-1715491272;2020788311;-1260842652;96302261;874965473;-1213550530;-263477978;1765537300;837571781;-1728192458;1251035650;1979895726;-1844864885;-1205239666;1912513726;1423587294;-585669761;-958685839;1644503424;-1048886676;-248013229;47859481;1842966375;-953120055;-1812800194;-1277532615;-2055411243;-1672654238;-868818576;-1636663568;1505335564;1685870772;-109388291;1748534475;920813384;-1200504577;-1475114391;-1313480496;802166388;-968298145;-1384810776;1147217391;1763858052;1417433368;-1608425091;1221685180;-1718076365;1654454776;-880549407;1679299023;-1012382228;-61243406;-1604422467;-1762179068;1698996744;-385236936;1314221043;-1441392089;1102651207;1655688781;-1193864788;-384689833;-989989930;646001084;12205280;506324501;-1630534401;-643277176;869446031;1645123108;891161427;1546577018;-1708983997;-1007214238;1728321027;1181860489;1572112744;-1549637330;-376435682;-853848524;-534623113;-811712631;-1909068488;-338648151;-494105126;105650534;-278422264;-700917214;-737101359;1254667175;-623069108;-706740230;1294680077;1739240077;834232078;1398997081;61226124;517001489;-876898677;1112092031;-1230413170;2019872533;-1943836482;1781067783;-490476998;-1020073126;1048083707;1867031526;-1229960445;-457694650;-757107685;334604123;677624779;358988796;1453394002;-1723746906;-929206372;-2009980252;-1965259928;456758461;1534842237;-2088855591;724770389;381253240;349828936;38541657;-553278705;-2033270353;485687349;-730958882;1386216743;732051445;-358272351;-1246515741;-2062023489;976094604;-873193928;-753237436;-48339199;-886261815;1434820274;445278624;-293450206;-467698168;-248668325;212727741;-1671306089;839249360;692790552;-1524138879;-171230023;-574324371;-1714622350;764857917;277415199;296066634;605228866;-1317185253;382831087;-1123724194;-1950120352;-876840769;-618905534;-1102109508;-1726664946;350027221;1272587299;-11242107;-1377757702;1213687029;36530786;1787260105;-635636472;-472083848;-708403287;-1200293323;1804544215;1915724947;-1545858624;-1079913039;-1843716921;209373410;2015376724;-225277516;394544735;292658344;-683624330;-160275112;-1663258089;-1192066694;-381792630;1331384128;-1019801639;-483726025;88894394;1726155929;-1854320080;-1455934989;-545476785;-1055598793;651148736;-1396596995;-1284295719;1110485670;1192736035;137865899;-688334151;1884411813;841800184;1646246173;-1873279406;-95727657;-1405422356;-1697119697;-1147276533;-39864872;-447613773;1175960509;-856117382;-866910708;-696105669;-587708055;-953896156;-1888776266;54724696;-2091817715;1973086273;-1507335273;-73758431;256462531;-1368952759;-537627918;-41200527;-12102313;-1457872766;1525011679;1437191158;1910876628;1481769067;1970857525;1196468456;932599634;1581864896;1160571532;974717193;548027382;1761235064;-1625193688;93338622;771005347;239117501;1960125952;	};
	mti=624;
       };
       RndSeed @[4] {
	name="RndSeed_5";
	seed{ 1268377844;-334035542;-356799313;1411853279;83893402;-930106681;-1699189926;-878939713;2042264372;-1930102542;-999381318;1374668808;-370819943;1506267855;122186068;-247758285;-730460928;-1633764032;-1934164708;91810537;-1765122303;-1480255676;-719280972;1124592458;-1038616657;-1129069835;788732557;1800007356;672748973;-1265409442;-1639118230;-674315481;1358774612;557073322;-1552241612;-1559701647;1978567555;-665609105;-291077438;1123147596;1896369801;-1878670383;1188506985;940151347;-1100416693;-372151558;1252881771;942345473;-101143915;-1535143073;1874651363;-464071843;-51334582;1180592130;1694344293;1137139627;-981419958;-1536768506;-157269042;1746826524;-797197907;-219127837;-1689996386;-1082304309;-629761907;-1135595961;-1807208837;1923618560;1034394793;-1701429262;1695459830;-1853932102;-817704480;149178840;-763512190;-638542288;-1745046165;1973928890;1896631317;-1289963469;-1103240027;-497445580;-2035069435;800098326;1242789634;695439236;-822000790;2087832004;-1639839727;48519896;-191008878;-70738544;92198491;1279149380;1753629079;690693773;-545084671;-1591768533;-2055179377;241110020;-1928732168;-1800736249;-585553569;-1550611021;199335997;-1938825862;-202401598;260935056;-2104825284;1742444771;77743000;-1554447513;-927833015;-1676465245;-212836361;-1849987145;934146013;-670570586;1738060175;1495599997;-1624841116;-514018633;1478546814;-1045548394;-522276283;1294847003;-2113834816;-46706935;-513504910;676246294;847081008;1321478515;1202740350;-980585056;-1606900523;-1133438886;-1458719936;-970716269;-2024234918;1445878595;636375958;316424379;-123298475;-649520771;-1293058746;-862465947;-1321873712;-173606035;-1888415494;813197933;1970360983;-2063475771;1858745627;1474813403;-852872804;-175330474;-1283254747;144940288;1116860830;221997914;-329611998;1088171942;770714757;-80232932;949328351;-1418261344;203992720;392687479;-1687606885;1190087430;213932397;1706663340;-1017656595;29257363;-1554822227;-383351878;1052703149;-995027214;-1413740857;-1406068372;1341974298;-1674469028;1082259660;1258806936;1919530005;295616669;1761674155;-905810739;-523162622;1125770786;1683326861;538732283;-1825704761;1988231034;861904713;-1745426032;308758878;848642267;-23803347;2646765;1566235977;-499329487;-1006680956;-1022146290;-1005664275;576012211;1822289261;1817278571;1484471458;1216817184;-156008745;1266450039;-1526396062;-1649156683;-1113691895;419648814;1663580670;-807315084;1124727757;-1119583145;-785599643;1651400219;1889340192;-1294922268;-701197666;-478224942;-495362729;1243596551;959822914;1371576559;-380259124;842800530;1686687106;-1031196520;-480239343;-1508004091;697421231;-513683976;-928081931;-1947297027;-1223778677;760929790;-1080523736;-1962107003;-301256649;681695609;-1551135053;-935131700;1563824803;-1866724125;54296255;-1309984426;348623648;-2040976227;107524793;2114094332;1863638481;-828386287;1913277980;-525772940;-622906889;427182665;762011859;200482630;898747814;-786564729;234296862;2345185;-1631212847;472666444;504479754;-720625919;997084890;-1699887341;-1550933049;1934494412;153942261;-626239810;-1684775257;-88955600;-1958184649;1760047106;962694473;-2129145880;336544366;1301550211;1106487912;1613983116;-188371263;-70138453;-467540886;-1350938736;1960085438;515360384;-449064538;-884079552;1474595479;225375319;266991229;-173922948;1233306439;-637435445;-1115407082;-1519923693;-1649252635;-188401324;1658859397;-126065593;144176136;-1044148131;-1258535860;775336445;448765705;1056215238;895554904;-1188985613;1224043857;-578555443;-2045270652;-1651309283;278371707;-512428600;-415523495;1731215301;-159052392;973296236;2069844450;-1331508522;-896435476;-155686764;-1764027427;1630154566;669165391;-283227528;2049717973;-862644493;1621655040;737099958;-335548640;1625822498;-959114461;2133634293;-1076178534;-1499002289;-393918791;1988391611;1052561084;-1035719289;266181232;1394859917;748494746;-2061704415;-202876625;-1835549763;-1081128259;-507398722;1876548085;-1673358679;1835950557;-1141941965;1484810941;-554911339;-36667496;-1731638126;-648788420;1469083464;-1366754757;226638572;844991628;-688693075;428098584;-699943189;-880454916;2113746704;-455748565;1677598015;1704573166;1009180356;1340655822;-336133594;-207837419;-875384021;-233236410;-1211727432;-1059866142;1663615046;602594437;-11587844;-144899297;1142962065;1667366230;1201505242;-1951254033;265007370;1281438844;1390123996;-1239890755;239654888;1705007126;67637666;-1140021126;846115049;1152876159;-326609079;-477688890;2012681038;1761142465;-319829161;-843633220;83444980;787139038;1438348337;-1854764916;1361436579;-1106448760;-1534593007;2045512735;1768871799;-1773983440;1911096413;-1832389136;-1121940449;429772311;-449994822;1065944741;807464386;-192372428;883886942;1840696258;-226574180;-646965399;564590721;-647752299;857983967;-61683795;-1220090023;-129631333;1751686317;97639826;1113427537;-465438904;-1033194160;-932710791;-381580835;-2034944942;1286370637;-807144262;-1074425924;1006658998;1922074767;805035976;932795307;1794213691;-1656855129;-779720481;1177099411;243296610;-1430452365;1705405023;-1171896607;-1589742501;-1000961558;-682550341;-1126340249;2122621865;1065450265;1118106543;-1556200583;1980396635;1356469079;1773971652;1730348176;-1170642931;1572804292;-84514157;-1943069525;-1718894199;1300480180;-1206983097;-16857064;-799512697;115506421;-1293063285;1660338160;61388025;-1187534558;-61351034;-1345926560;-1670755182;1893287609;1536778370;532557978;-1706977106;-1287042615;-1661681147;714558898;-31200470;925088286;-1635484216;438090917;1926085645;-1725849935;1125542293;-916202149;323120560;1706588265;84880130;571345861;1647973301;1331764225;223088126;2087744821;1803752324;885777018;-1711692252;-328014591;-521114162;-432469786;881201503;97104770;-97360302;-1495615234;1076746614;28867838;-73449406;-1392630606;-2101957762;1413154299;1934763954;277706416;-1155267198;1118285203;1594400430;1176192032;152996891;717536190;1917370894;-1460168444;-507668616;-1908762462;623630652;1647432393;-1964166394;-721533261;1257641360;127409494;2081463056;1056983256;536893276;40285553;-1951002437;248945700;691462236;-1824800139;-1763284451;-762611866;-1817302523;-1838852624;1855417512;-276606500;381199915;1995674664;-1585289377;-1857122588;1321302258;1857275156;553123967;1368730450;927892727;-1377589588;1707467488;765718016;1040902204;-96879127;-1999623792;459115225;858057437;-1756630926;665964146;-1916831939;974374175;-165454208;-484612363;-278050987;748956982;2104606359;-621250184;-1821916462;-1025429924;-1119804216;-1058430976;-958218626;-1060041055;-1312982469;-373769265;1156990415;-785986918;1558761906;2146994421;755277467;-168785793;-866896059;-1179105544;1283837181;-1235173944;574749967;333373513;183799852;-1260884036;1667417687;-965326768;-1750862302;-850969340;-1141582552;-1177446920;180942857;1648733941;-926245715;1451946256;1128937248;-1313903759;1859842508;6495567;1391647130;	};
	mti=624;
       };
       RndSeed @[5] {
	name="RndSeed_6";
	seed{ 1268377845;-2146468795;697239301;1028813308;-1100295056;854905599;2021307809;-1426307033;220677025;-116009074;1456701355;-1503045603;-2070848697;-1307316410;667208162;-572811207;-1380968206;-1302182207;737756673;366356344;-320550292;1134707936;1409848795;-796210919;68567386;1194783387;448274652;-901860633;1823774736;-585623598;-235454829;1022803695;638597995;2015409240;1608108095;-20500839;1522257126;1527805512;-993346573;-2044750377;-965207503;1657083875;1891130964;-1819560780;-1295142406;489484037;868678183;879792274;2042964938;1707534920;-824541185;1519803039;1445088906;559833100;1542869234;-735773930;914902145;-130140130;22980779;-213315918;663127313;1690278130;-82418915;1756506389;902949156;563167093;292988523;332131194;-657575578;-678720994;-1178467657;-1947144528;-995529086;-1266507218;528975782;-1248175415;1611232611;-2126855689;397255415;-327648574;-1937721483;-1992814268;625428208;178613507;-105931389;-871193643;1071786436;284188331;204201167;-1541282556;-1340501576;-1658255171;-937973065;916237665;239095971;50072494;-915228154;301142362;-1700461852;1844525857;-1766820860;-1780548413;-880541301;1520329487;551654126;488789583;-1897573227;518008574;-1735755614;361707405;655777807;1503980890;-2104207273;773805818;-792782060;310771590;-1991866798;1390661125;-281252854;2028368132;948520049;1323268622;1625698149;-437700881;-1814366312;1092295231;275679476;1368562883;-972444918;-946385906;1186920099;834797677;1925152901;-185575271;-1502388408;1015624377;-1118501755;1168640204;563883627;1080202178;1984735099;-1103864401;-1668969777;2140305520;-1370161627;-1432607500;-1440990304;846936445;718050277;85911278;1195932284;-24102680;1338587215;-1683557025;-1279749301;-2120012440;1855235438;-2026460056;163364976;1568922831;1741839334;-2139233852;-1008268864;1991587218;1244581539;1333409935;928927404;117642883;1289289047;-1500972649;-1330760333;292261696;1507378412;-765229266;-220829073;109037899;405835335;1597841844;-1843713509;-521273968;228439731;1222893652;-1287127233;-106276664;-1152996401;-479363686;1301835543;-2110743959;-1128452109;-1327307822;807285198;1764943109;-1329627308;-99859537;-1597915234;692000079;-244076561;-1958890271;-1420109483;-561492198;1942656677;1745302397;-1647792970;1300527055;-1476230382;-158251491;-1733773148;-1712607155;25155323;-967236392;1541520953;-496761621;-630319012;-686590640;2109453717;1984354363;-180332102;-1300863018;219376510;-1516120175;-566445861;1523090965;996776642;130670953;-1842995123;1182664460;-287719933;-191498525;6833988;-1708948807;1209378733;754594755;1388234711;2098224727;-162840872;-1940914094;-303370116;-1075979768;-1703124768;-2129056743;4577943;732630404;-749471226;1125208556;-198694795;-1262936701;-1738953253;1717155988;1296076993;-47194951;35102812;-1431862969;-1658393035;-1923585104;526565432;475778839;-1347615725;786871478;-1330335024;-423956515;1227911578;1277543980;-1456454201;-1715145536;-1694604398;-1030399783;393132300;-1626706233;2009604549;-127715487;-210350920;1507416534;-323649053;-1824711055;630034289;716444072;-1844060068;575001643;-716916467;-494435939;388346478;-1755429761;-968692885;1480165667;-1325118074;-221627855;-1303660328;-473786079;-2019058294;-416878647;-818563628;727830006;-561452750;489044602;112614728;718689935;1288416915;-1429863741;-690003889;45984551;-1216518513;-902435890;-1861108209;1762652496;-1062891739;-1929981649;1737268467;2098556589;1751299856;811684842;800347784;304934111;-996815821;-1901117399;-106408655;23027701;-1867646491;2024880224;-339859325;-516785217;-1891209620;-1528532825;-18104485;399546107;183821643;1247845084;-2096603273;630605680;1955930232;-1132097018;-1980579618;1811928087;-1727499270;-1305642459;1835078065;-711775297;-2019828100;671233799;1837331989;966413111;-1902043897;1698373966;-766481279;-749051231;-874537662;-752364290;782069291;-885097646;719061329;-625483950;-129731245;-1963320849;1577521377;-688813631;-1403900692;-1728505527;-35840261;-157814467;1522425052;1926752664;-899609659;-1577018233;-1583091997;-190142160;4590987;-1682981820;637583116;-1378038485;-1442389091;299951660;1142709454;-360421858;1739378661;1101728361;-1713060738;-741612957;1547022680;-2105107818;836776414;-1389003759;1577394171;771254559;119280057;1537081468;1929648081;-133450095;-1219417316;-1729424807;101577323;-1624708932;887325308;2147145843;-1091934078;-1612202999;-497281823;2142187701;1713015952;-2119561278;-1731856306;303014795;-1686246809;-1075804054;2003663514;1930122170;-1587274405;-1717356878;-1267153658;-399450069;-1001006752;485081256;-1528108062;-1140199173;615535833;-1259824070;-1058563146;-1415099128;-1803435886;187566705;30906679;2140070742;-1234550281;-18144178;-481457913;-1694092229;-185328347;468899751;1439200653;1708281319;-520957078;-959472870;1402442635;1502089505;465101648;-658014143;-1540952644;1086880681;450736892;1931770657;-785861290;527239488;12052472;-1418051951;-860070727;-1794760419;251505143;-2083897552;217756280;-911039721;306973860;1933623925;1640549766;-1662560506;-973964712;-1734214996;701564524;417027683;1350111703;1328124215;982921752;-55009981;-843232244;-506721608;1985695893;875692083;-549822225;-2040886547;379304221;-1924427964;-1587151246;2004308997;-98153622;-1957301436;654537334;634867815;-825566851;1054752401;-1625208303;-1555339684;991539956;-426495965;387456640;-631862687;-1797190516;1818489833;-867277716;565577904;877109078;-1746869035;1007835579;-580944976;1438882441;496419219;-1458107413;-1428789798;201246758;-1783935251;-1235415749;660126318;-2100794024;-787591051;518973058;858424639;701385425;472145772;-1117883500;-1288117721;-243660909;-2011099701;-1846934711;-2010943084;283056172;1160255323;1489396354;647101104;1905269106;563976034;350105006;-908319317;1536804174;661332274;-496640830;1251631918;-1740223851;1875328670;-2072523321;482713030;-204458196;-185143654;-582285971;42140791;1851094021;518581159;-1114482185;-292250434;-1381106265;770007344;-992867832;-125117584;-497147527;291733821;1628873773;2029933433;-1085659018;856951779;-126210641;978916093;-247929613;545703123;1514509411;1082785487;795854700;-1933149245;-1865408947;-1434632620;1176477720;-2083091192;-395968226;-1969096802;-189976902;-1989971412;-208098218;1640529082;737561337;1058658160;-577965724;-476291368;2003935645;714424515;-1243616729;-1733808174;1252077386;-1561080366;604276044;1446135097;1835551062;-1362788206;-374813936;365579200;-308697854;-437082968;931626171;-1219409140;-912319284;-807786766;2088720477;2131434133;984003246;-1541038351;-1047739605;-418289387;-1565180420;161506693;-2059453239;-1224171160;-156275932;-1784797258;-1332674472;1021005783;1126273321;1258598175;-1939724498;-1947991371;2104099725;1603097751;-316627062;1749642346;-1964373099;329999346;1320743642;283903432;-2068950454;1120338123;360016918;-1966772973;-1900469477;-461226940;1939130731;1935881019;2065908300;-1082171444;1042812082;1702250151;1241692140;-1426364432;	};
	mti=624;
       };
       RndSeed @[6] {
	name="RndSeed_7";
	seed{ 1268377846;-1004136332;-1520413195;1522801014;-1488995593;-1880825938;-290239774;401994700;-837461116;823745356;2146480390;333682382;-1407140526;1533706397;1679571354;-1858884298;-1652545132;619425343;150238701;-1861657708;63858754;-1475840993;977556615;-773679014;-933446603;-1698093209;1731500019;481195157;-1186284571;-1336164032;-814903000;-1793636074;-1210611452;663176575;1997038141;1921310159;1103151210;2129800540;694004439;-767396358;-886453147;615135847;-1657067059;710952406;1848972186;-810832044;1324530817;874831535;947946043;-2080246664;1206959700;1210684604;-2043948091;571542712;-1987019570;308177075;640424407;303776012;-1847323146;677920127;-58574249;1491335009;1425209630;1862721658;-2093653049;752339450;705657316;1704074039;-911301998;-1529037702;-214264930;-1805237704;-1923142870;-1027838191;1296462948;-69666524;-1107219537;-997142386;1016642799;-1545113190;-1052628664;1816161768;2107379263;-1646080823;-408916117;700619869;570455559;-678866918;1102641973;-1160384547;-690029995;977979977;1505878057;730519589;7738359;520490962;-2103861190;-1092473223;-2089211415;-5681894;532466753;-1869455606;1473431182;877911506;797566530;-1318114701;1403598847;1085015457;977328268;-1421059159;400272869;1459497160;1066969277;582137858;889826108;404204319;-305980753;-2114743727;-1565776331;-1914731734;209135424;-1044136775;-749797412;-1204663690;-1898220480;-744869753;57133202;-163167207;-1730099006;425587777;1670326055;-42481535;1847438798;1751276080;-194457893;1274229695;-1344923522;-302643851;2033602072;-1863896728;-158451362;811231038;1872554500;-2075655800;-67013118;-624879626;-1481404101;1193200912;1381761353;603195901;-896838041;116431371;1504291311;962750847;-993945931;553770089;1468999433;-1735020859;151483425;-1510114652;-2043790818;337242541;738313955;-2074610894;774349460;1303402761;-714053426;-1224077688;914724634;440895467;-2124258463;783692218;-1030477554;-1446565938;-1233985494;1985992823;-1310618306;255186269;-520686749;290219411;-2138784077;-1589447286;-1953978530;-1845607421;-205758947;847327375;-1210208219;1925996318;1466048247;-1660822069;-840166901;1912694247;-1956689282;1423490989;1170910110;-1004089986;-2119043051;-442748712;-423527891;1408881389;669287396;-755429955;214899392;-1639559541;58936793;1415960682;-605247995;2069935917;23253292;-1239346387;-392578723;-1033146135;37144358;-1439045421;-1339575221;2032415396;686115057;-2129280786;1749510646;1973616206;-342909689;-976480399;-30457128;-882273210;-354194151;1423111715;1877036620;1457920580;1085950749;427138801;34451195;-823698194;-125993111;1721302971;-783454388;1665610262;1468404479;-184455901;-388616562;1027920784;-1974499136;-1226913925;-554470225;3216591;1026096543;339683248;519559526;-722838475;-1186379706;-76421171;1738519360;-1414102368;1431846118;45655840;-165015394;1372034032;-914335723;-547321937;258249694;-1730009703;-1030370773;1432365773;1634471810;-192660810;847841137;623012254;-1670694304;154827701;-1371952011;-2058503424;634182360;-1495797689;279558473;1142762462;-1021991155;122906521;-410533519;1630754063;220663196;1173674915;-57517566;-638645122;-60173461;-541388509;1490543292;-2068931922;-1805839622;2091332855;-469136338;-452762654;-772746777;-1584278505;1905977965;-1299822143;-1798736363;1917773626;-1988309393;-1448032470;-546636814;-174038976;-1583425893;783387786;-2146939488;1816155161;-1895168344;-1288987581;-1197838377;1704598844;404631365;303535214;952004252;580329667;-1350743769;-459953710;396614063;-890467770;-1993049227;-871864784;1298570845;-1732266101;-1382368435;-1083036052;1340551336;-538991376;153559075;832006676;-284324054;-938119820;-1706434501;-1783433018;1410927262;-219592442;-918520507;-563747861;1619137494;-288299998;728148821;-1668999462;-1180459894;1946782459;670670838;-2083470493;-40697957;-756076465;-1689601196;-1441337273;260356499;1035068250;-1185948194;-1153350359;-688828843;1551494989;1480529500;1818663186;-538275615;759307405;-2143831547;1924867368;-1160275053;-2042103140;30830526;-1315388065;1953473563;596879789;-1362458707;-498257800;-826084107;1656507517;547129948;1011995581;482586627;645598626;-1069149090;655806246;1390743924;552239520;-2025601640;28467515;-1375342399;-1350215318;-296947836;-1321549632;2057560072;30094860;-9650116;-830303908;1726493437;-1849099537;-351349243;260941795;1290844437;-1383024021;1387970037;-1258256691;-1258096587;-25010626;2106119325;1627873049;-210477562;22857352;-40821448;1669471448;968131631;-801222882;-424231675;-2073376013;-1655436373;-1442509756;-1518776522;1319834909;-74493530;-910195532;-342471473;-1963361767;293773637;1438289624;486243901;896693426;-1619440164;-1634105287;1511478251;176314103;2058846233;1050305311;466465763;-1130269384;-2147136628;1348980401;761314588;-1474127431;-234308747;301866301;-1617809471;-1030671200;-1393950463;-1108213022;136643604;-1839902311;59909853;-343893016;614156399;1510997124;437571379;-1686303782;-1231796748;329925067;1341037013;-566155677;433948064;-397911583;701721068;428611551;-937114689;1298454257;-1604370826;-483673717;2034367600;-1170730146;-771759850;-855962604;1092949471;-848859037;-141379666;854134288;-253157856;1678680224;-1641903529;-2080697764;-1753968918;-372339875;1050954732;1189560819;-1591375790;603036009;-146163385;-988316241;1413063352;-1847511590;-1399662570;69072323;-1532210481;-270048830;-1847534585;60325084;1073676464;-70682795;-1296884524;1827858517;-998858996;-1420506668;-984536744;-844888622;1032463969;783421234;952091304;896251447;-410823517;1870267665;726241602;1133552381;-735237280;-708895996;1259170489;1433375887;1667734526;-2108357484;1394153256;610932264;-1630656572;-1727485669;781720027;-522885018;1607679705;-1293851335;-625572535;-732089803;-803358894;839560698;-1356370008;-84473319;1989470282;1998375584;-583852913;2001023303;-158013270;-1579074118;-1209216090;1194214851;-1729865318;422687497;984249759;-1450475314;562757264;1409384677;-1462902774;1180020031;2117437838;-2002399612;-761646344;-453283294;-231820767;-1062306937;1972134194;-1395939778;66237388;1804410269;-1832309586;1526377983;-168454822;406818626;1468782896;-37819524;1288888899;840341555;-2017306295;-1501339710;-1638758164;-933665261;1834210942;1901500746;-465526841;-1319440763;473390197;-1518003876;-509062582;661686786;1733265152;1856425628;-827552983;1722966987;-296846612;894003590;-1172743654;-1814075979;-527232399;-402437319;-752567774;-134211002;-1174647685;-2000294144;1141727246;-166203600;-187126683;1284021381;1162110556;-145806854;562090631;-567390066;557596397;250391246;510239636;1900265395;1194255754;421852456;1189028634;-1181790470;-1349197268;-1979065221;-802177261;-1450839129;-692097167;1346960467;974221492;1126026591;-1287956878;347802765;459172607;-730091526;-507006819;1839152823;-144890320;9854850;687751854;2025942795;1778592600;1088535940;-1306594079;1299782392;688252839;568182350;1606483250;2131309196;-393647857;918675499;	};
	mti=624;
       };
       RndSeed @[7] {
	name="RndSeed_8";
	seed{ 1268377847;1478397711;-268505464;1191804890;-14113685;-908294899;848755852;-1165193405;686116269;-188466614;-124055593;-277761361;-1020425752;1228090564;-1719068985;-1415026488;-284462654;-139777482;-745470981;-820098837;-900797540;-1835791152;17002736;-1805910329;-687476527;821454067;1944116985;-942493709;-1512646196;1156918371;-131533624;683030326;-571888018;1552229922;-1863989519;381978882;-1075175442;1911022657;1197690214;-529880886;132589685;1242338130;-49116439;1225656445;-529025768;-152901932;-655416831;1436122361;-197720568;-1707195000;1284393380;-116434100;1310018911;-94317493;-943306594;643935016;-147263744;-831264920;-226520975;-71368907;1265145482;2057357332;-1055576697;1901238611;-1293852774;-331673799;-1324807132;219947329;-1901336599;-1000586500;1094313441;-2130931289;-1525038239;141496664;1568796674;1103776890;857407443;-1621894772;-1771842732;-791320771;-1826362938;1503731365;-1670194426;-576615193;-279012792;-319683860;-409595999;1912593729;-199652712;662545024;1107795162;-839969342;910089857;-1922575806;423244702;719842229;-661201975;1772736787;-530571652;1605828478;1114031231;-1188760549;182759235;-1126629162;416991244;1806915877;410152862;-1741449279;317143899;930815572;186248082;1229525769;-365180264;1463870104;-468957233;-1848082449;-497332747;343435395;-1559996635;2037072346;2123116255;-495629297;1112370486;-931166674;5834045;-1483229554;1566568890;-1353420218;760445268;1328075429;105963318;-1479149871;2084981955;-1742857457;1505075623;196386053;-1385389951;894857016;-148448862;741475856;527103196;608196441;-1416620117;-1105082564;-1314534906;94427173;-786164693;1058888795;-2021710981;-2089566126;-792350682;-1773843408;-1938042286;815188521;-1328761913;1398430292;-1857019611;-1838418944;238704488;430122151;-527706749;1122810913;-1124902590;931493603;1484546867;1216800095;-1148597060;2099344797;1298654004;-1257832046;-158749062;-1006659736;1674313955;-366785577;-968007854;1807742116;-1993682231;1883295176;1680916991;352286697;-1823145823;1716878340;-1623483473;-158400264;-1194412353;1149517386;630175569;-368792400;287895131;-1791902300;-1297635012;-26610635;-1996996594;-1265913475;1804795613;-479835761;-2020937472;1138305167;-12386612;-613134478;-1417817763;-884444604;212735437;1056198572;1387953064;492780410;-1514356240;-857667767;-1397458174;369592273;-1688309945;-55520244;1940435391;-320942389;-1207394882;-671885309;-1714669352;2113214683;-2114619172;-1717993871;-1218482373;-2118425766;1317030550;1588149618;483183167;281051836;-2062667506;2116863647;-733549766;778784610;1098892432;-1013897444;-66255069;466874505;-971622409;-2107529169;1220702125;1613568969;941752022;-1767632547;-912280981;-1017967623;1292010644;923077820;301114144;-471434091;-222990812;1352160602;189030623;-1008037900;-162071443;208303713;134323777;-971294302;972809859;1079184814;115346955;-1539936680;-419580796;-882542266;-103692739;1720477051;-704097240;1468086526;-797641565;91104297;1592604215;-1458353575;1944324595;535326599;-82558895;1067926377;-1007695235;1382699719;900243248;50822915;-234702781;-110300587;-1643797756;1503758453;2045569756;-1942753462;109244546;267155045;-1402354699;794460304;1634847214;-1333882006;1185599784;1332901710;824924749;-1920412028;2004113922;522723156;249844042;-2137346727;-1521936113;2140788810;981432769;213537616;-1018646596;1408470664;673025595;1818472822;730772515;1051250176;-1328068814;743950115;-1373090557;-836572262;17487251;278327094;-1542830202;-588260275;1974053376;1240571040;-1383336511;1527927340;-143687169;695346603;-1679925065;-2123364950;198255754;-841529931;439805970;-1436994977;-1917868809;-1002032400;-375708121;1822118269;-2109308106;-1468753713;-2057240787;1444795864;1445298411;1294931873;-862391440;-1094346576;1200259468;1607766772;-231335683;1504299915;112208072;1724588095;1276569550;-239059708;-525216739;1165934385;-1180557492;-1025959645;1039731454;789923221;-1196150231;-786575528;-2076736695;439808250;-847716858;-308066722;1251838231;-971121387;2024997142;634764924;-710376362;-190794764;-1552469793;-650670690;-1996561057;-153467872;-746021313;892898077;1267493091;682906781;481847397;2070036046;1229184417;-926871145;1906320604;-973876822;-1677448665;-1959432428;-702440662;23734698;986999696;-1806794417;-1958331935;-521907440;873394945;-1694995992;-1307179818;-1659806423;-220019075;-987513027;1260692222;1235732260;-423141341;-537260501;1918041940;1555446550;1797628065;1294860463;2118476854;-444401084;1888337557;-386570761;-166932776;-105000708;1739910449;2040546695;807019894;-963186905;-645751090;-1960878724;1658475090;443934556;-1395096342;-1830512345;371735097;-392791266;-452191981;1184855283;2099029790;1469482976;-1069414805;1012019375;-247210573;-784750567;-143966740;-2030217226;766593264;629815389;-1908604065;409606752;-1566979696;-1903580597;1550860671;2110277225;-1702268740;-1027528021;1084341758;-730436014;1677320365;-544886379;-555591704;-1681492878;413917676;1965780953;-1478116874;869397251;-1242137361;429203522;-1612247604;86880777;697110609;-2137404742;892433502;1247492317;-2056311660;-1546461449;-264891021;-1931516165;-15867127;2084630207;1955848388;1661213832;-677145379;1481018215;1815648016;1218622600;1988988129;-530811339;53971748;-61068533;1889289216;1444044606;-118403915;976923561;1554132105;-309830779;-1200565316;403061205;1077596137;1607413865;-528629014;2135660752;122824025;1792302850;-1447618283;1430992634;1274414575;851359439;1757145237;-1381631921;-1703465651;1231890712;247372235;-1441967610;641827204;1623441157;-678460794;-2045072020;1431850074;1731187932;1557414439;237924597;-445075551;1141440227;-132021468;-562454690;1942988461;-271396903;375237888;-1349893377;-800009007;-611951909;512192826;396212197;1541807197;-42308015;580217440;58743271;-82765525;-1001564463;-843602716;1728360494;-865358953;1717102449;-1996603074;903666363;1347248343;87276671;2026002221;-1752763793;-1661666283;-1607416280;1886431912;-1637431356;2111818038;544854988;-587416170;2084473572;-448504971;1361329579;-806203344;1827270974;1461708539;990375107;1160365585;-823544205;-236524460;787926904;-391179138;-898302856;1185051055;1353644495;895078000;16278619;1915833619;590351431;-495462095;-2065533719;-195631641;1619769637;489705830;-1586907791;-1158405229;-1907252374;780149310;43168429;1681528185;-693128559;870291412;-1237099297;-1152325011;1902831368;303036875;629682774;1510335534;-1128714292;-968418168;-1272862694;-857461828;-1213760608;-810845392;-1778718618;-48810564;1378119076;-2104520349;1025001104;-968431332;-1600875896;382708928;-593368561;678806796;1883122701;-764555506;-293886092;195609415;889654360;667613454;163496669;2123769993;-928593919;-1159463644;-1300875175;-1689652925;-619775486;-1296421437;-768124796;-303616349;1518929793;1100183522;-712259086;1087350649;-422294339;-268044452;-1152028190;1069993928;-1659239343;165225001;1360096664;-625598263;-554890209;-205208198;-325145556;	};
	mti=624;
       };
       RndSeed @[8] {
	name="RndSeed_9";
	seed{ 1268377848;-1674237122;-1816057170;1707074015;-1448744294;1126753789;-65365902;-1993761380;1511439710;-135688828;-1634527923;798469942;-2045376934;-58877755;-1984349140;-2071241675;-1730817853;-631659210;-12940549;1933544427;89681254;1949876051;201612656;-506868409;1616076780;984984986;449505244;1327904231;775248346;890772767;-1175317415;-605832442;-653167079;785220195;-963613647;-1371573795;-468630497;-452535503;492846304;1101784199;-1379475706;-974446403;-142894816;-1129568774;973386500;-54278975;-1227459912;-2129212015;-989346257;-531448947;-807076552;1635351418;-1134589253;1241365554;-1539863723;115116170;-1378240342;122667649;1326827039;-311478255;1382072662;1157944976;-609009549;-1639687057;-1989555135;-1360891472;1645026684;1046448020;-531975768;1983486908;2000525015;1759447221;-393034932;-141208204;585656125;-1281662884;1299272546;1057677660;-1419172454;214052167;600300627;487020560;-1971958110;-1759468173;1250017001;-323847715;-491527444;-1108119646;-987256200;-1874913824;-1664641916;1088638777;161167732;1579728673;-1371830274;-1591311669;-1884411219;-480805268;-852014803;-180650615;1030578646;-1168302125;1736140507;-1515176343;-1998789729;-1438657958;858199330;78153941;-1584727691;563485536;-729862834;-1635380016;1976080714;-1489330680;-486951836;-1864348650;-1245661096;-634984969;471092666;-1984875303;-30405153;828650565;-1503359821;-103990448;100455227;1416030660;-535320521;-1681575677;-1089675547;-810643292;-1009159835;-1002220607;-1733239282;116393793;-816077269;1177286223;-632689842;-1724839190;-611879406;-2129154496;912724630;1773575099;678951664;1227911487;224975878;-196606737;-1652539986;72180079;-1716201377;-1834081722;-1360664214;1282784927;197706478;-754432385;-312464506;1792956692;1928880869;757532817;468908755;-287514402;-746193711;-1444470405;-1352075681;1489762388;-693012691;1460511691;1468971352;-1980841532;89090502;72987079;-2013813971;1968212278;1454740063;159976899;-1077622371;-1880972438;1706369208;518830;309900632;-132930453;-1047296580;-1912603632;-2141055536;1428029073;1476427656;1160880838;1143126077;-806433689;-1688983504;-2095800713;1898062311;-605718915;-211603850;-1154420246;-1994614454;-146275797;128467596;-221041151;-352437872;1512137414;343504971;56203616;-150084694;1827619704;-372219767;-1633291969;-1170418977;115504896;705164240;1095598561;1261772338;1887647218;-1723312973;733160362;-848753432;-1060578162;287406457;176533142;-1085921272;1382098637;-1649706152;1361106271;297106676;1998905635;1039533386;2011869459;1473806076;-1186299980;1052166578;736876063;2021331489;1679902599;-854462778;608018850;188643284;-1802388593;934835341;1577087374;-1042590375;699127665;-147949179;1057532111;1919574429;-1921450113;1239528005;2119023049;-510765858;-1231240920;-279072630;858716166;-1536356008;-1362689155;568088855;1799190032;-1713000781;351380948;-1914642012;-2046501505;1155418195;-1297847459;2079143039;1830757563;822544488;907934223;-1894862861;-930454498;653788539;623246738;-2085737050;-1717516607;1512163069;1672765051;-368144078;-943095194;-703889429;-111894629;619925516;170459601;752718219;-451227666;1750392473;-893179119;915054900;224554655;258063575;1031770352;-1099653170;-65324901;-1272009448;-993839517;364762370;-705618707;-1558329078;713922893;1040363911;-1228780950;-45022160;-308612024;-51673663;1406048437;-1121545168;1793407719;2101302252;-1788808528;-1946221718;-1404632775;-464973703;368757589;1310045885;-1132481183;1881771077;38845451;-423029617;1227360373;1954376446;-1799967018;-1485934880;-2011778457;1395617815;-1924333587;-941563509;-1088240663;-2097344519;1866572362;416033755;-1560116820;-1692055316;-1874909907;-1944529965;-2049086530;-1859707274;-119072497;-1628942584;1698269759;-1436501564;-1744944531;-1377395173;-448347602;-1643138541;-856466680;956878763;155808460;738031570;-555898575;1163756562;169363416;284094866;-1064668683;-212492950;1810058442;-229445515;1487013357;1720427388;1677747890;-33337087;213322029;878359845;-1027783170;-989068489;836770027;1831639327;-933529537;-1726837482;-1654825393;493382349;-487270066;-69169;462394091;-575554777;-499049819;-579052816;-278860206;16670825;1960000482;-1986519803;1874670650;-1472843841;1729625098;178607313;727011568;931749932;-1629585703;-1683472155;-1368507486;-255449184;-489103408;-1306707263;-917533838;2048425497;-640902915;-1031124036;1766988514;-33744873;-1085721235;-276595371;-1840416135;1819944723;-728232537;-825874622;502679348;-2135888620;944263487;-1262762387;206549598;175615658;-1403591513;1529316271;500241213;-378323543;773672875;853537553;-1125777328;925369334;279066539;158825237;-426455576;1616183895;-668732529;1012466654;893539897;-354449631;1399817231;487364908;-198902781;24341928;936455409;-584403521;1698648279;1377266714;1154816852;-821606601;1969614131;1904498794;729097960;-949845190;78006320;193735844;-89300375;418942856;731408991;-1062744013;-1041312599;-609295668;-888585114;-1962603883;-1983316400;2024028696;-1634644324;548967446;78394479;1124669581;210607359;-1680053921;-1880926090;-902562934;1155370964;-2009743919;-1265708792;-1719872324;1431019201;1980392332;1446690158;1989551513;1250111175;1764977646;-845840868;-1554883827;1403123134;-140366545;1230790705;1111205062;-2111339686;910748560;-1580924503;1883974993;-2045201813;1276614217;548590661;-2079740393;-460460760;-1072195881;-120457339;-721985600;1244472530;1917416483;-351337137;-69810974;-1723918420;1196586894;-563235756;422295357;301593084;-939501992;-690633004;1302430657;-1434796881;371197745;-1127018170;-1671481914;-843965369;-297694008;-1849544436;-1388324228;-1483693139;-781042429;1874268921;824784338;-2083676203;495657167;1444657832;913577899;1713691510;977159923;-1020327200;1050134673;-1808876488;381767398;-1647888189;-700469461;1173652687;-30628530;758017642;1766738908;-1048038084;1207220967;2145178827;-1450831936;-425653351;1978990546;-1453991088;1484548972;1787738388;1458455645;2098869857;1594938870;-1847157878;-1712380224;-1637474653;-418037601;523893671;-1357010433;1486321646;511326825;1415200396;-990960447;-2041359189;869128655;-495994930;-1576322299;-2110387480;1334807160;168518884;28890140;875736373;-819809005;-16318085;131387012;1326850113;-323159186;1696041264;-418686075;1142936591;-1653855816;-1709768043;-510142777;-768433783;-1456302168;-1312435639;1688411343;-1335452289;-1926297205;-295168440;51114195;828108924;-1873002710;-330738425;2055844052;-1178090678;-364276310;868122352;346457844;-459811703;2020259512;-1460528572;2004735462;-915470996;-591491563;1003607801;-760999031;-1443458625;-1167022369;-1547101056;-567815270;1260543662;1946420317;-630262113;503630304;1829537717;1618796634;1808939326;793530163;769821816;-824859214;600644144;-633403572;1559243656;785154155;-1907036266;-1731937340;948243839;1932545149;-1302295729;1438526661;-2091348039;150522413;831839016;387637552;-395474343;314032620;-1766141817;1089369061;-1789608095;1150320509;765438555;	};
	mti=624;
       };
       RndSeed @[9] {
	name="RndSeed_10";
	seed{ 1268377849;808296921;1720515487;1905840985;-2117240388;-1469467141;166071363;-1641565834;1842091724;-1521241110;-794484078;-828556224;-1826774661;1550415306;-1036903387;1004499213;-972910799;-2147335989;1192108127;578229033;609910849;-1273077062;-1512478034;1133584883;1493886610;1219928856;1862646263;-1149172695;1179559955;91746615;619289041;-198080364;1237627571;1494860379;950130596;163370967;-2115750153;1025887182;-727931284;401084658;775827874;981944083;1911371177;1004868467;1156462475;1786430367;-1234125948;-142691827;950517174;380518143;2137936333;-1663012433;421359221;166474078;1378666572;1492597656;-1784781675;1064533708;1593848502;758706542;1387077282;-567848564;1058124969;-1739999252;-133828826;760555226;2086207044;-1089323396;51779066;458192359;-104651927;-1479101671;1732975855;631228463;-1485561387;-674338530;-1233453635;1418351528;-151555333;-1594944473;-1726103575;-1210156280;803530052;1490802727;-1502438062;244834533;-880195665;1245205299;-887319278;-1383864050;2081840662;869166702;1452044226;-1618185396;725629988;1166212755;350786042;733372931;-880982383;-651232771;-784101478;816810178;-1161902352;1314521057;-1836002360;1459661083;1165468076;-713859412;1593377399;-1815535877;-725911125;1974069175;1996673342;-1026538164;-1972658275;-1506078418;967987920;895220869;1259392495;-1520984739;-2141065741;1016060302;-1156590720;-436403003;-842344294;924866010;1588169088;1107315044;-819527079;-1558439933;1995768295;569890369;1345802537;1482255693;-1009136766;-816032916;1411142227;796417251;1919361305;1527637763;-2044053930;1913021361;1638827262;637530154;1051081506;-1557625093;-871923249;536896015;-687229057;1584054401;-1532857578;2033785723;-1684921926;549111345;-183014673;-1226212425;-616256507;2119243003;1158484288;556439620;-1155106956;2018854959;2122848456;980703472;34572116;1121474761;-195686514;1562482760;-1363204491;2118179996;-906883173;-1006600285;-1780548916;953364979;1387446413;-1654332437;-1641767779;1486611052;-1901614413;1498812808;-1793704767;-1516284764;-189580236;1332818282;1762116335;1407403679;1338469136;1265653616;-231409327;1368473623;-231469204;-1428849014;2091496552;996106030;2027039720;-1547041616;-199942914;532862358;-347763980;177144634;1102860458;254039872;-825774838;-140503464;1587316147;-685047289;-1507331998;341679;521878235;-667259848;1821722393;-879172277;-889323972;-1963063632;246146832;-638993881;1422898444;221340666;-690799492;137352694;1981419754;633565332;23502658;-1417336855;693273495;-1021658508;-1802092331;-2116311882;934825960;-1378701459;-200630607;1711005473;-1599657848;711645531;1073116369;2121724000;171425841;-886043326;-1445722989;-1022466268;-269249965;-996832639;934099004;-2079109985;-1008189467;1545424051;913868080;-517784345;-2001138964;-1403212065;-1641004245;1595568424;270309161;374052138;181097616;577334735;1409620651;1408139283;-668980708;-1240189378;1923318448;-95794726;298009763;641355862;-1000752906;-434891086;-790057505;-2116332329;-910068203;-1541448261;630651915;700470374;-1126833330;1041914381;-1930330829;-274948504;-763444149;-1593443971;542730033;433451116;-771381324;-1392698548;1520076000;-29763872;-452574293;1866832485;-1898877294;851161071;414994795;-406101160;1726408457;-604737717;32862348;1122260065;1675406086;516372970;268309626;1334402891;-1204341924;1205244737;859134316;-1025829687;-401256736;-472605762;-1469802559;-1355006944;1541401756;-918331356;-1961177193;-1010981890;-293660409;2074346443;-532506134;-1610388698;330009198;-1060864863;-190456026;-2172970;-146856633;196548883;1328353471;-135312841;-678814778;-792960260;1950779103;-166591269;-73694594;-895852136;-1671334289;332336970;1122345852;2105697948;1470595645;426540793;-1668261237;1260784220;-2045190911;-2060792192;-269153124;1002967822;360973274;907751511;-335961431;-600823703;2005314858;452679248;1116331754;1159575314;825714395;1155778756;-1380801513;2044525224;2096256781;1837483293;442734;1378889673;-452140212;-823921008;1625945189;1322447067;-1978420886;-1114790031;-1348166455;1365737602;1227935771;-1470757457;-1766534225;5904816;1327191008;215122486;238438080;-1769559245;-820656951;-210976985;-1506955606;-1458187841;-620435959;-1974461077;-1959277337;-1219372;2038487375;-1119716541;167209763;149422414;-1654832314;-2052657323;1347616213;2069928487;-1633343358;357923845;-1438933889;330212312;-729989696;-808732040;-7772399;-1025749595;-301827574;1552414746;1915246389;-218022637;-191190816;-1483006432;1312888572;300316772;-518585080;-418061844;1504644065;-494235401;1860814300;-2111220022;959989378;1987929317;-860695664;1120675228;-571023985;-842443301;1749514200;910453566;487882520;180485659;1715647819;945562071;727083641;1298252900;-730887551;581908723;-2025814903;657436546;-1622486538;-1869845775;-1656275315;931084058;1935911154;-27216752;281995953;1947357832;-1490754879;641520548;-1665251990;1879968703;872763822;43080031;1371872053;1824428351;60521778;649472119;281454513;804578196;-1569456348;760807871;642115869;522223412;374408520;-1362976979;1212282449;1258749783;-1681800010;1990389965;-1497747898;1578280607;1322798114;-1257650532;-1099437020;-809860403;1077402390;-337002268;-440026123;1683214305;-1636833996;1883854371;1056255808;1472521751;-1838510458;1609228269;955491830;766190057;-754379831;-525210993;1451915034;-467963258;-322937511;-548405149;1835239362;1715530962;-1809884125;-1449917462;416593006;-142864563;1531234734;702233332;1656150062;-1994558602;-208428368;305528204;315684394;-1286366591;-79621473;1172690301;-1185900578;890546111;690251599;-573633760;1637491141;-1707263925;-213563451;-1943516905;-1231809469;1091160224;1302418049;927731325;-1506959793;-909005984;1210424079;-1137529721;838090619;196272266;-1283296650;-1293730359;-2075785699;-406846654;-1287253075;-1728615148;110678456;-1097975901;-1152901743;1313626124;-1550273489;753282256;-562364384;1586416352;823096791;-1911910682;-924948984;-1297668244;1812885116;473792104;1640007968;1178584350;1333747285;-1962463937;-1447722963;1803402152;531070155;745136438;533054062;387224967;701841253;-137227780;1132171967;-327510757;432975006;691841661;563554937;1538098406;501616717;-661084788;-4466025;-685608303;166025160;1777183767;-126440226;2136963682;1977566785;-378603149;-1907008668;1566615411;1021056048;-1762547417;484412113;-47013970;1445435003;-1032082851;965248850;243681175;1080758225;-463237297;1577793340;1504146002;528713729;-155962456;1382803387;296417447;-1206486231;720739646;-658556482;696446682;-227481524;-1056509834;-845251211;652584923;980184757;1996065976;1641187405;219444301;-982902349;-1637133117;-1376076935;-694301476;-855757487;-1144601167;1629342967;-1507097241;458338355;-739585670;202205209;1387164986;338548133;-252864136;1262314215;1164909855;1329433912;476789472;-1259332412;864768643;1790225173;-429836981;-1093300272;452403779;413884889;-1410744824;1412519518;256437480;1759879670;-402188318;	};
	mti=624;
       };
       RndSeed @[10] {
	name="RndSeed_11";
	seed{ 1268377850;1950629384;-497137009;-554937025;293518512;583704949;-259239889;-1082708637;2062864461;1210243589;-1031264354;-298473988;-822545241;-1012905791;-897939816;-2036527562;2080140948;-472359462;-880466001;863482607;361004895;-183953520;859371541;1456479584;1501266013;-1209081755;-31021123;-1288250351;418381467;-1607637436;-779169860;1555967354;2143012007;1239116703;695927672;-357853573;645961084;1730041361;91653238;-69244747;-1826114058;951475565;-2115161813;-704489896;1872741651;-2046991801;1114747495;-132253587;549970326;1504659039;-1017048760;614069706;-976416026;-381156978;421007831;-118744822;164278725;1316851698;-1657285095;660138978;-411106714;-98107626;1702355079;-618837219;-711741162;10230410;-1181723980;2100168721;-35012972;777519320;-2028737154;-1017639373;-727365320;1040414608;1464482842;858860018;-1082782010;-824789087;-529914568;1080705942;-717653533;-1224346191;-1581532431;-423506638;161230249;-357796606;2142155451;950537657;-1246467243;-520034132;1923773541;-733646897;114116568;-1588072299;-7095567;418530265;-455940611;-1774474345;-1049596117;1727021867;-1092486666;60240297;-69662445;-2115361865;-462490671;-1023437757;-1024737878;-1960819432;74198446;1256334355;621010312;449589015;-714939517;1413693937;1247966242;-101479102;1014334489;-423788718;421303403;1721815470;494035331;-1025207256;1755740273;-349080405;1384705732;2066784566;1022822961;893533908;-1634845148;1751833471;-1978595528;1076618341;1028038648;-129968803;559250588;514696723;-1763200761;2051507330;1740006201;-594141789;-1401663316;-439160013;1991156350;1297421226;-1211873785;-1878307446;1605066554;-214948390;1261375537;-1970596987;-1828523047;-1549309698;1461667844;822417298;1302163252;1175666052;-1138330859;-1469859920;-360465448;-1937878778;-296936652;981281876;-1234734650;520996599;1152036631;-2136745389;-1800307813;-1839618812;-1042787834;-1738536542;1181379786;1505923010;-1157164133;-1468621558;-1676854058;-1064143789;1211544640;500361046;1029458848;725776083;-426455821;1961970533;-2075704534;153479039;-850375469;-747004215;343654508;566277975;713483535;-1892260184;604863440;-1824249393;886977441;447907910;1430731360;1207890440;1096503121;-1851253931;-514500327;-82767351;-425101126;193372870;-1801179416;-2109227747;173815047;-705516656;-74162995;416603157;-1772809703;-1191339912;1442607860;-2033092484;-1114507126;340776573;1454605607;-216080683;-800558778;638950930;-2103640076;1420141289;1574923876;1006476214;1834800556;-1481317600;-2049388726;-529575863;-2014820332;768751505;1151567385;1643036765;2057773362;1092183302;-45704277;-675261903;1648046244;1592098564;-693646619;269624235;703305317;1446077384;-161353667;1474754407;340734512;74087907;-258529661;-591613579;-1281086844;1815117269;-2092688996;-1763333553;-1797626277;-211877096;1457696163;-1379388441;-1157298345;-1992596856;-705709198;2130406806;1509493909;-1895224473;580529373;-1629423306;-729078134;742688276;1029020396;-819827675;561971720;-1653991885;672267105;977672018;-1151330712;-1379036447;1575710623;-1041196953;-1607097210;433098023;451055735;32747272;1460098878;978265074;1863561618;1003600664;344369554;1692273077;-759748320;188479212;-700401606;1068380316;2080418476;-296424350;-592958361;1960249495;-1333220782;826278581;514256783;1324944274;-998752985;-1205574563;-223645275;-1593856599;1014827171;-949443460;-1077289399;1789384646;-1054694989;1728117665;-1955862702;-745794621;-149582860;187197608;-1014287490;-924567928;-2063144689;164423770;-660220228;-1399656042;-1001552736;1392873612;728268255;-1867579078;1698329688;-222131874;-540149773;-1920843021;181298009;-100215710;117486731;-1213030626;979551060;-1429535379;34245909;725411732;1812042416;586586658;1387594424;-1628564148;-1703467242;913842229;68424507;-992793958;1598730417;-1512708411;693472473;2098181108;104013313;188768446;-1319249328;-1004862027;-994990038;-1842066806;339489030;287674045;-2141227279;-2131297728;-1121185940;178648521;-2004776271;2100987140;2020157791;-1842175619;-991973501;766230249;1917584471;749321561;784029321;-621316486;458719275;1112118630;298652179;1192840688;1699265159;-2094182831;672092979;-872996972;1233667849;1107251103;-2136475442;-2080483851;-1122362643;608143558;-1834160742;143136373;719878823;636273762;1647308330;176880504;162557914;1164823685;1851807128;-50354206;618374731;1186185246;1804887235;1959105555;1924075172;-261483100;-1425937553;-356894578;1268172335;1439485877;316753812;1731949301;-1616580650;1060574263;739076679;1796992664;1189348595;960067345;-1042607027;795787871;1632667669;-1507564161;-1994985235;-947521816;1298870101;-1561747005;637803461;283009882;1516133924;1453323068;686923189;548149006;-2053269460;-1629509171;1489422163;1918207747;1779193716;836706260;1675363408;1851002530;-1384905987;760784714;545692642;2041934811;1116496052;1645610524;-490672091;1336743603;-951240720;860054;808369638;1062929271;265901;-1875943172;210449394;-178912713;-779570110;757917796;1708209460;-243901270;1877475695;-1051824087;119454806;-1337698893;547916187;996097774;-2050804818;912158885;-1374830621;843259536;1439047836;-18225986;-1160026785;593020032;-760346544;2137175440;940784903;175166614;-1738397950;-1231526699;234346921;1709396612;930856273;1968769998;-1709411963;346753822;-1505725774;2006806861;-1680645926;1595985687;140409742;642236135;734589445;-1980814628;1029618042;1912043783;1032910660;1365308347;532984906;-216220389;-1758432158;1124420555;-1859386722;-1241086599;-664895883;741280893;-1347824575;1114479456;151795767;-647455066;-1246763507;1861012704;54017979;23673278;-1701021714;-1822646763;-1161449459;-1616937242;-49211920;438416860;581139914;-782779215;-864635334;971597694;-1108720456;-1521833627;1089336999;-1117051005;-1812881173;1607479028;-621369935;31040323;-300857735;-1864492499;-1897103977;1033194198;-2066936196;-1357240379;520893075;753246480;-1053155998;256737880;884836044;-75670383;1862117808;-642077204;1665435747;-374062397;2132219866;-1965187454;-1195242852;-1366376333;845506483;-2140817730;1712305740;618472322;-1278372244;2057255305;-1991017268;761036139;-158810019;1568159037;-108126508;259275772;1087998102;1879880894;-2030663545;100010918;1608020140;-1251210384;-841054166;1422437214;-1703250515;-2028726466;-33535776;525549252;1338681738;914180366;1927828158;-2127962476;-1145235096;-1373977843;-1403322841;1089147862;-1455561455;747081150;612867126;160663951;-759443795;-1267356951;-78564357;-1482605795;488172673;-1259513300;1177105518;-27649772;-191219875;873146465;-2018911855;1651999820;-384865873;-1504329941;155213437;1784753826;79799201;-430065192;-2073196357;-1502546862;-1954597402;-968668853;-1682213952;-1003126813;162158010;-936747331;1688015186;1031947036;-1609402262;881929063;290537731;1542341520;-870300777;368107463;-1573205273;-1609983042;-632942702;888127388;1030035188;-489249619;1167202576;2105868064;-1746381967;259422668;-444580886;453400156;	};
	mti=624;
       };
       RndSeed @[11] {
	name="RndSeed_12";
	seed{ 1268377851;138196131;1897103185;1191381651;-2032579170;1837636241;-2032563498;-622118485;-1270831280;-498408093;569171690;-165335971;-537211102;749953298;-516559320;1575549446;-2065079341;1026964102;1298189552;-1686842328;1606954662;-1518156040;837438136;-1099697489;-816295079;1374293147;-498375972;1740658966;36795695;1568826024;-1445175861;1319145836;-383273695;-2004375413;-562704593;177031295;1426231615;175078299;-1939949747;1755355474;1856956647;-1410402073;582860675;-1058100774;134030281;1703194490;-1080095051;1403108706;2128524095;1249568167;1995206832;879636232;1339807324;1073633254;-877870092;1607040938;1098834351;1368860639;-737507120;220587642;1033975902;-900232365;1028114126;-296243835;991833118;1431664151;-377266960;2083960610;260897811;2114625220;-594865921;903385011;-1791197977;1173803938;1058585241;-959676504;-2136088125;1790007922;-24823123;-1179040523;-2101254973;1115621750;-1368364219;-558607786;2038888669;-881726687;11859648;-558753257;1388641852;-1015942294;186071495;1451641566;556130647;921335472;-1563098162;1738976219;-1045465246;-2134637914;-180695274;-1097273172;132518666;-79962793;-1520679286;-320955377;-374735580;-2003058740;1706683056;-1211543232;1337418102;1958945632;1653792435;-1409474903;1257479399;1130233135;886342040;1012496747;657730219;-1323869972;860845148;-1037949757;-563920840;-2145064256;-1820299004;-1923953191;382888675;1282189068;1503583647;395902421;-66706807;-525501709;399241522;937945917;1443787925;1344484073;-1200013810;1818093379;748457874;-409483485;-1974357974;-90707885;1131509788;-640227074;258232671;263778826;63232130;-1743454757;-1190115281;-1354264748;-1505062014;-1931759083;-1214475607;1643143438;1127240323;2009472995;2137556676;-4220588;1426591471;-1397931389;377046659;-165024434;-2019306239;1203152336;-1098693353;693468908;404447168;-951416987;1051132388;1428341659;-2103798166;1045626801;-1419011457;747362556;-1456506856;1740000495;-57034604;-1399872702;1774758128;1764401350;-1488130507;-464098458;-514560883;-196554053;-1131963570;1118826931;731946482;-1803365581;217680911;-758036058;-864134187;400146987;1694473909;-340528701;-425844352;-890809232;-1399136991;-916063598;239760633;-1161271294;-927397690;-1877679232;378295570;-362663197;-367529174;515039480;-1648395612;397949515;787358565;-2002254680;-1385246238;-131486159;302546060;533991439;-810852929;-2081843199;2039977221;-626462869;412949728;344999225;1116066135;-584278583;-1416537202;187370265;1251656379;207248961;1004468613;-517759142;-893157377;1854102351;1288815786;363797340;-750909390;1865577788;-800004359;1146940299;1534838876;211473052;1712231544;746870186;1907607296;-294384300;1078842179;-1550799877;-1276437713;-2021142860;-1792150334;610029749;1351595359;1314118925;-474635596;-1312939476;932191008;1212077211;-389657666;-1024522354;-2077003617;-2460688;-1998468385;-1632612558;1614802674;1019105762;1712734510;-873275504;-1854086907;1440909258;2006464287;-832647713;-1735002922;-1795486545;1972344397;1697184009;94865718;1812007261;1005514332;-682145955;1177712424;1103951168;-974943047;707530871;-546099447;1306782217;2036440640;-520406594;-2060522069;1951544776;666290793;1380912522;-901989387;910610221;-183905567;183051851;-1014546503;-1148407931;153190503;2126497992;-308491917;1756916311;839121686;42653399;-509553923;38743393;1915539825;30642781;777487583;-725892054;321738333;1822808290;1354042817;470429171;1212165395;-1393661105;1016564631;-2036407606;-1216052704;937003683;41545353;-1937674680;-283369874;861624126;-1351902540;-835096307;428612038;1249583711;-527770024;1615162922;1250327355;899066151;-653812567;-1283601831;241732143;1014672596;-1397775122;855793255;1833262831;1018024755;1090494317;1562292971;-951987806;2106449622;1092287269;772233863;-2046167145;-662672354;1431383495;-487586187;-245255194;202672050;-1902785388;1269825161;1633563908;1672321366;535695281;422112052;829399268;-731873451;831603792;-368130829;-506977260;-538473096;57583085;384716008;-1920696080;1558602467;-33687916;-1874191874;-1693966888;1260614255;641402068;1017797907;-1433738001;-607508494;-1447510905;375951084;1144041616;-173390934;805381155;1304362566;-899722629;-1140473135;-1689400903;1321380674;860450283;-1388830156;418277068;1252375547;-1059982046;250306694;86953056;762708835;-216771949;-920411051;878435700;-806521781;-1444845072;-1522577405;-1345185041;-2033682932;-1767501038;-1792469283;-1970512247;29798758;-367160114;-1075287182;1212241090;225955202;-473126946;949911750;920438196;584275355;-1855079745;-261827798;-555269689;801822703;606018023;242407616;378422622;-1764577867;873888211;-321585952;429015601;-680044552;738724523;462338588;665610930;-285385759;-1152437294;1940505273;1849052226;-468651238;1048005513;1497112506;600873333;1369385432;304063821;386756114;-491646772;-2065143202;-1994312704;586979455;-1162009903;-603543050;1632119905;-1210522727;933019873;104301440;-1043963076;-384114536;-502623771;-611735683;73630838;1684040271;51359880;-832475285;2095553996;124713126;644018500;1627559323;-1219858038;-1579641743;1426660905;550784915;-1017245237;1209601461;706985426;-1989326935;-853226681;-551053403;1750117456;910317256;-1475000644;-898459445;-1066315586;-2112552600;1374767786;-1546323376;221947444;377579615;276956759;-116256464;-340126211;1478597909;2111745732;-1211800934;-188006438;-1538632832;-1198422482;-311722687;1983823600;528961532;1511287892;1247493234;1417504329;-1657936813;-58626335;1133884183;-192909412;1405166250;2104308327;1423407663;-2002267112;2137954869;-1634423688;1347115031;-1334343516;1540604277;-952211268;1927711828;1751243907;1831572293;450658256;-669729011;2077220996;1473102712;639164861;1086994066;1224815873;-438899965;512604420;-1526127463;1701799469;-36381341;-1659651864;1294151771;-1908916340;-619310319;1567107622;867730032;-156669890;-1890990304;-845495174;1552107214;72923325;-83293788;-1739837449;-2022962498;-628958654;-1607211332;1915205902;-1356985340;125040248;1559132019;-1541463018;-685510143;-1816162584;1853136497;-1847823280;1282918523;954295364;2104554743;1801604402;-1719811516;-1283514940;813676357;-1705362079;-1574357704;-195818484;134597398;428992474;2056922415;1224231764;-1785120840;39553170;1043400139;-1845629367;-1514002230;-890953444;-1493652880;-1267711184;849233649;1224734797;-1561222091;1270364909;-1549038249;446972357;1382244854;-1838950479;-1716001058;807260940;-955665923;-1123669640;2046208357;-256681288;1366155532;-1859862169;-725459936;1022498583;-276861604;-1066991675;-1913790103;-1704381309;337756722;1771856392;-714571556;-1186254517;2097775902;618143373;-2089253644;-932307614;-1160674662;-2051809202;890514515;-151852521;1135022141;-633502202;-853438636;-2091639121;-1487556194;-1944088342;56120807;1696826755;1745109163;-856785036;747633494;-911658670;-1604595622;958418206;-1764393667;-1023794365;-1068684631;216846716;-538049449;1199877008;337595298;423660376;1886458919;	};
	mti=624;
       };
       RndSeed @[12] {
	name="RndSeed_13";
	seed{ 1268377852;1280528594;-320549311;1685369357;61254336;1298275781;-1979735462;-802937665;-955311564;-1988245828;623712000;1830359819;861592830;370089539;-486683779;410629829;-432568119;-2120019517;1377651255;-507564703;-177972802;-1261925210;-1361100598;-1657301249;-1549338903;-814731824;613220185;1740005176;712512153;293746554;-1805243072;1331047721;-2025703192;335261299;-607363455;-2084381843;391641583;-201358736;365101701;535571360;-1394223544;1247880539;1388766892;1688639340;-54652115;1568878419;-61698680;1025391366;1873641358;-1180706148;1784794760;-1042494144;-2033527133;-2058758470;-1726861618;1993056947;1665561202;-2094026088;580641020;-1983209561;-974960299;-29035221;-864083706;-1175014344;-899799774;686444358;1002945760;604071075;2010967955;-1419925793;-2041963913;-1197994640;-1454550974;1563617673;-959976718;-2110674336;-227235082;540512246;699429468;-799778149;-269806008;-1229263128;1644264612;2060286572;-1097817515;-1169056856;673604712;28919135;-841927213;1644596073;-586700702;-741845088;-295317845;274362533;-1971732873;1512554888;-285168531;-963844665;-1259828554;-1931145881;608982589;1139780470;-191736487;450811625;122452821;176170482;-629441820;399383694;1635467890;-1051344180;-742415591;-2036710479;117211407;-1105661348;-1575096952;-1330408987;1094594455;-1709568861;24126715;2078665342;-374572141;-1608724407;-320646895;-342909291;1772214186;1391565300;-1771513049;245908248;-906866440;1959609992;-1451547249;1200178724;917862941;1186837238;-2040608007;786655374;-158450034;-1754062038;878004050;-737278491;1543137866;-658828508;-1725993487;-1058902930;945167505;1127866054;-1988205547;1393478822;-1125311113;-1736229698;1617662658;-481279354;-1880724463;239324952;-1271100142;517027819;-890973357;143470381;875410015;-15386854;193601149;154791154;910556700;-1587659345;-991237403;-592592029;-440633978;-790525152;-1369005961;2039409618;-396626455;1414021117;-89973992;1301816660;-363579337;-21364429;1381312672;381563190;-505851648;-500395550;-20056199;-49746473;-1936176806;415041647;-81740925;-1195279815;-1436824319;906198506;1462298638;-205744728;1361874997;-1054033597;914904832;-614902847;2053037644;-1669338588;-1580222526;109657989;-540590785;-435927693;786978296;-780950623;1453277620;-1896756684;437628442;-1620075761;1516052975;-748109387;-1946627170;-72484515;-542592792;2124976266;-978818389;-417465059;-820253780;-319970334;228331933;-1689585462;-1859178558;-697591909;1908090836;-101010202;1492839479;-1595795411;-177360277;1234766825;605608810;1126190005;-970116376;-394143076;1200838817;66033671;-502023509;-1153135311;-234815223;1127859165;-1700855112;-1538810289;-200037809;-1980179221;-205071907;891143047;789734453;-2091587876;941483146;-1696660121;899886799;420954018;1822936546;278378120;440519842;-2098827547;1922326815;-329949229;1285889550;-1063001110;1023384813;575586178;-1038343860;-535466962;-795687995;-1223281629;1989098251;1113630201;314258400;2109626473;-1002403310;-372206912;623461115;1996275988;1486842711;2125488125;1322761084;1792925282;-1103054559;-2037266718;185685876;-103770663;1081264664;-299885068;678822539;-742890256;2087378937;130946547;2075309307;-617532993;2049588298;385543606;-1573900306;-1508100803;-1437025795;1518590398;-842719105;-527684079;1987301440;-739576884;1456797907;-1595109885;1666814095;-57407695;681482726;607702763;2106746597;-468804317;-1749410096;-425030645;2054260826;792756250;-1581877898;-1744606215;-1509953987;-1942898926;-1408972152;806208427;-791562575;-1268754571;1360146991;-2142606493;1283082115;1762707849;1378962408;779199790;276679272;1003127883;968840667;-362015828;-1326093231;571549958;1189308070;-331882452;239966933;1145902164;-1667398699;1687426080;1712888659;1242704553;-57229928;-433208712;-2105635111;-2107731782;-1614179860;1327559227;-248079304;-1916520546;1164996068;762177970;978024084;273087935;-301574985;-1933590431;743498605;-107343776;591557487;1963389740;-2044983517;113670760;480769132;1862614017;1043115366;909508773;-366375039;1690317235;239722148;1908841503;431597378;-342929289;-993733838;1761840324;1243543593;2048741689;-1232075638;-1728670949;-542151855;-1478346033;1699998039;-1957423515;150664987;-16911840;-474332087;-1659990867;1825581447;-16574117;372316470;-2141791795;1702672171;-2107654381;310213687;209482294;1840379602;1209159108;2000297279;407222525;-1368628647;-438140304;-11402263;1926874845;458961496;424932933;-993126457;1180911075;650020282;1590775283;-1528282100;544233753;-407860879;-1135460977;2050866999;1210734565;-1191595380;1693675935;-550804752;2092373626;-1331645661;-2127931742;2087702206;687458810;-713458878;111831878;1267649088;760845896;1371329548;-1789550650;-878449158;-1613355548;-1156641946;1506018333;1028431030;1074871161;-1075335164;197503499;-1219953915;793954930;-1692474710;-854370823;326743892;1164790231;763078946;389738015;1250396913;-43761049;-1596868820;403104991;-2125683531;-1134301970;-676673832;1321773348;-1280144809;365630024;635355176;1187985801;-935101334;-753711056;363055331;1918156372;-2053269937;-1531542744;-161924262;493227238;-1737216376;-796641219;-1208655806;-2045691123;248534457;-1172253492;-1166527210;-916412747;-2091700832;-357911363;155516618;-1005018745;-1497145622;-784950433;-751597276;466353468;1587807878;1072026654;-1459437646;-1535454643;-1289076215;-1085213898;1669515620;1579385786;-1549857367;800975194;-784057242;1459675838;-1813336511;-89285290;-117141135;-1027512861;-1628302518;684402003;-664525141;-422893003;-1221030084;-1599425691;422307987;-842109200;947311313;-848689304;549073451;293326828;1737643538;-1957617034;1134472636;348107402;-537703316;2045612230;648388479;-768874984;406011301;1136107800;-262671907;674512023;757708949;223384012;1801696128;233626858;51536984;-329469761;4872244;1072997005;341612715;-420953982;1482685937;1851040189;-1911198406;577704231;-233790093;791295809;570464183;359517254;1418530738;-890044748;1194291017;-482578049;1777869828;-1303386862;512422250;-1175913747;-1212290713;496444406;1385814060;-794992416;-249186641;-514383875;-1888448680;-1214924123;495387911;-14238488;-1278259747;378475042;1309957010;940494376;-1925005326;-207803429;-1939806620;-1840152981;397152923;1393904726;-140333181;-1885683791;982085329;-667053144;1912522667;-2147171769;2042270831;1460498333;1716225732;-1840342286;1182634730;731364338;-1576031562;-311120063;-1012827832;-1918173226;-701799196;-294686620;1005550053;-1090935140;687557786;-1218861817;-288306625;-868358157;1293677560;426148998;168296744;635363091;1406414795;651163391;-265032727;-1188933727;1486661791;274536103;1483362613;-271392809;113689848;245133357;-1996793577;-647404384;-1310395993;-332946062;-1790656273;-237374244;-719194793;1744552065;64451806;-1415713803;-531215917;1950052721;87602066;-394920707;-303906662;62316482;1261640688;1958019452;-1348436551;-2118668240;1679902756;-440383996;1753637423;1053908115;1596535661;-1883629557;	};
	mti=624;
       };
       RndSeed @[13] {
	name="RndSeed_14";
	seed{ 1268377853;-531904659;-408843160;-774985414;195511425;1747849194;1411254973;-558049229;428014328;-1513899039;217750425;156451944;-62020332;1335652640;623528723;1566689678;56298619;1207353240;974223471;1633741534;-922287857;648467921;-1930021749;-1694561500;-106906602;-2119929502;-1070785798;-1106647720;-2095405410;1525757865;1569447270;1132165314;1152122895;205882279;410144773;504315676;-1903304144;1935998943;987283644;-875780525;955149752;-1362050623;1080216857;40157859;-195099269;162685061;145375655;-941668846;1846328805;-1646137563;825244053;-1511361284;1225660010;494607212;-751657518;-433840980;-1134430141;-163005730;1857879659;-2120410611;1079398183;-999124933;1642651222;138233746;-1736941862;1244070777;-628648294;1900366752;-1019805751;-1441004297;-1704455697;371320776;-1763542480;706541571;708605049;1065202952;-1515080588;803821787;-1717943883;654826626;2057933210;-2096142984;817320820;-1943469801;559196829;1543525702;-1028283303;2098463193;986272400;-259218647;1492376044;-1991258148;969724146;943583703;-1480754895;1744968830;-2054277765;1309137438;128755101;789142612;-2023333496;408770007;-1666978503;-415355986;-1365126999;1462752992;-872075217;638029255;-531927313;1955794825;2114775318;-1216985726;-1822757904;1455528171;-1147367740;1016482449;-1960180567;-1463788820;1762606684;-1947312088;531131146;-1006594709;-1710777726;271480059;1439398531;-278599737;2033407186;-1620417858;-688680788;-280052596;149023725;-673256956;-798944185;1744921433;-1642182082;-279878093;102564216;-1719481119;-294301415;208005581;1324282733;1014945321;-440045637;-38368217;-822047036;-753806316;1361706149;-1774161593;-118645299;-1747681061;-1313212621;301907948;1034618036;-353816675;1842173936;1235921840;-1005685135;1815461271;-356314420;-609209526;720719213;1395777954;1944273137;1559826259;-88871426;1900300918;2030833817;-892607329;806137396;1906741037;1938360582;504778606;1666266386;469113900;308324874;-647466847;384377498;-1212870285;-2032379065;-1129648148;-514259046;1314906386;1724643381;1874379067;-1277016422;506802865;1911863695;-407096383;1732329030;1325568448;-196424989;1949559583;-1222585962;-81337307;729438656;361572739;1920826483;-768009281;-1836872206;1449947255;-63863466;-2127095726;-521181094;1136315624;-1766159943;-211129708;-1708663455;-118926370;-1728422911;504948992;-1820004910;-1754913821;1269207449;399100365;1614173111;439709093;-1975218191;-1313155400;1924547132;1459996652;-524241315;1915896307;-658733224;2119047878;1352011875;-458823285;1267461002;-1005694534;1265713121;-1644358587;1185153001;-2113986705;-1452033047;296150944;506331914;-720532003;-665401470;-1417166894;1357184510;-63001206;-1705522947;-232012660;-1419897763;-1751260818;148946064;-1383893563;-78252167;1722871321;-706688912;-1407606440;-18099332;598894870;-1220920150;-49817787;1899390364;-903734032;1335392223;-295757417;323046502;-1452295359;119586163;124930660;1386405498;-1129407858;728491588;-609731107;193869728;-1337945301;1784283449;-927894491;1513433612;-1395290832;1831761866;-604117208;571422729;-381882976;-475333277;-1045538827;-426419420;-658123142;1327718357;906576829;-585965653;1337665123;17733574;-396044229;822560566;-143327379;-1579375226;658305589;337440011;-1986958982;-1709714052;-1961252389;-839637821;-365084441;673226524;1942537013;1696061614;1713841462;2027757279;-2066481981;791478867;-951757074;375071153;785581318;303772304;-726006781;-1786276556;1775355267;1090748288;1847875612;-1941354071;-1190947664;299560308;-1566653441;930134285;-1109657506;976632202;-956985679;-417558662;1868258558;-221697827;911077081;897605089;1258910730;2049027229;-1125345581;1908693693;-1037407883;-144325928;-932571982;331605025;-901403822;-245239485;1048539023;1004768187;480916760;-113718326;385218720;-42420108;-627476664;1181758701;-653578637;575882120;1387621889;-1150130342;551083795;578170587;-2085572412;-524700292;-1780575366;-435984456;1274544424;93742991;-626302002;883037765;968931230;-1734475588;-236062115;1316099710;847632516;726208894;-794667487;-485347626;1963948150;-170707103;-525972199;-1265281358;-920689439;1083031708;-733215644;53075223;1719044744;1923545731;1233021121;-2110909128;304114523;-742715551;1740014885;1816054960;-1792508846;-1448092402;721527611;849148615;-913018620;54417477;716751292;1454771376;-1485521830;-801019842;-1069431144;-545697873;-734823323;-1263752248;-1701518787;1837759335;-154941749;-266963338;1467243192;1283706253;1741948365;-1504413938;610035023;-472629057;-1903810623;1619659909;-20605525;950203616;-1082753543;1225263265;-651622213;2145577524;-1487944314;-909602126;-1585866124;-908257234;-1687838622;-1802786942;-331573469;1118290244;2004889310;448845473;-1957177300;1301998030;1038550868;-1302472242;-1658250457;1522631749;-1409444735;-484789155;2057402565;-927888636;-224159116;-1250516571;-203348074;-1491706755;-20220208;-1398682123;-1999604950;-1913268096;1449787139;-1571311740;1311831961;-218494796;475029744;371634286;-1397720283;1704556323;-801426389;593296778;-568007883;1621068818;1500344388;119880191;-407741854;1080201997;1021931909;746387523;2080296762;-687122669;176220957;-864401089;1846805115;-1399962126;1629424001;802439506;-688871123;-1614913798;532033965;1530015767;1864548485;1700305388;-1748004518;320106898;718664309;1650214661;-779801999;777962200;1972402455;1248234894;1864393292;1484586819;-1598486291;-2125369553;-1613040730;390129050;649068969;-873260395;-1841445609;6946867;1767006474;-289657277;683573549;-1970991697;915078192;186331360;-989713839;-1564567988;935529657;-959313935;649832047;354620097;187085084;-1026564604;537221564;1128662310;-1686967970;79449928;800117093;-963335209;191381667;-751977137;141384957;550770387;396947010;418731022;1462217099;1999028088;118508996;1399362652;708005818;-1040252820;-673213226;-1079068907;-712340192;86404061;-957557440;1382416511;1140040135;622578480;1375984643;1213259998;173609232;-155890330;364222448;646210504;639199233;-457862273;-1074491897;-1717586155;-895513296;-1276640707;-948593670;-240268195;-1702760137;1942784267;474901781;-85702547;-1982499957;-1865816013;843175548;1025899796;-805794035;-486477648;689161162;1528388318;314258216;-665609994;-1601603624;643167538;-327188245;-257817158;-653572816;299866707;-216838156;-1607811671;1678399918;1239223107;-1777744573;1026661855;388538934;424732554;-711314001;-733725926;1815786524;1180145329;-16603727;-1500142724;1845096697;1549323292;-988868938;-1866290001;-936056;-27013345;1090171989;733354862;-611798351;-1083325306;1410674273;1187819054;255910362;-496187566;718011974;-1988572688;2119708877;1887203024;740070346;-186422520;-481353554;-412124263;1364668443;148498076;950368743;-1328105089;2087065006;564803433;799936460;1957980636;-1193276526;-410738126;1836529848;-1770822559;-1628137356;-1890496780;-15741067;-1954741770;-334931027;193154064;-1561226053;-1359630231;2034556836;1834912647;396477517;	};
	mti=624;
       };
       RndSeed @[14] {
	name="RndSeed_15";
	seed{ 1268377854;610427804;-1956394866;-259716289;-1239119184;1300363839;585427068;-266464013;-1482509640;-1880355477;-986875017;1915668687;2072868690;-1158644020;-731888300;-394794398;946102613;2097406874;76791609;640610960;-1840987420;-575145261;-1971370970;-861329845;-1338989952;-743067805;220762362;1433205949;1080316488;597460970;1088674160;660161204;232105252;2124835669;1717849158;475338534;1627355170;151658740;-749890454;1021755028;689071244;-605776027;1107251560;841699224;1171701540;1342650054;-493216847;-1182978199;-1666123673;-310178550;-34802241;102928223;-369793105;134279953;2078998251;1451740297;-943687200;-379612728;-666425263;451201685;1925229061;-1222953007;1499591037;-1740398037;-6952083;-383401817;-1535589130;-675788665;1713324120;1379075170;-1641105835;409173914;1405141514;623997344;-1112509334;1405195603;1367788454;1388034096;-822549341;-1695820945;388677457;1802949702;-1083392171;-1481765722;-722812664;-1925575508;-1989009668;1301162125;-660804716;-1793211924;1997005120;-1032935424;-911809397;2128409093;-1731485710;-528643569;-1766071524;-495081161;730633702;-1946600927;-194663629;-1022805419;-1019868588;-331635782;-1540056731;-1800821492;-609968912;-1902839990;471013332;1645533969;-1729757762;-1481984101;332026061;-978676142;-1896503449;222500940;-577944976;1450164948;422501247;-1754492782;-1960699576;218272939;-1203688719;1112997210;191146083;-1148687732;-809891708;-1297703742;-287401920;-886903312;-607916959;1551545645;-1416493344;1585031599;1838157868;-1078364344;1611180730;367423312;-1062487270;-1802489240;-523985314;1994211390;-1570434967;-1097482810;872268516;-727324539;-1836158096;1310297741;1932667344;-1679664886;1898604734;-922580238;586336941;1056672730;1108072348;-2040916340;-1115757406;1808389053;-1558960694;-2019364729;1705185817;-55772135;534733028;-197706089;273999112;-2092456755;-132133551;514515969;897023501;-118181686;-861646601;-757955345;145014216;587655317;-1136361353;-822588456;-7659241;-1641823851;-2049560507;-1287124042;-1952714056;-1534964201;-1580921857;1444094088;-508287035;331786199;1746093965;1706632951;278922698;-1832819857;410816447;-733286886;-374713955;959562263;874570453;976255948;1509229632;649623402;-90908776;-849869842;894329417;1988417686;2054374237;-1509306345;1322079765;-996169039;-936011000;-1905520858;-1632092668;1913368367;1906162680;1822583568;-522758263;-1886100409;-384336625;58966675;1008824279;1626091436;-328375013;-1242907821;-1357823791;390364956;533734122;-1674378959;2015937791;-999053545;1737924550;-866154138;536560317;-1543275914;-619486038;-601610092;69063547;1112425328;-1894836865;-706846660;-1745440569;-363844698;645891591;221946034;352233770;-383371133;-70202510;1381416328;-496625407;2092429503;1637460460;1594548344;-2135273035;-281137876;-1174471803;-1427801026;-240508760;1816618868;515665703;1977924194;-944667377;2089872061;1844394286;-918243442;-1355685723;1752695272;-910331149;1590741431;1884027862;-1902023716;1132158368;539892368;-665351204;461211400;385978166;-1682217123;-1562730357;1877583902;-553587635;-671811111;441597462;1615218115;1465669792;994320796;-1826504796;1634366359;-671817400;221972146;364701526;1185827851;1975212816;1612580820;282924329;-676639922;1291578243;2029682029;-974763840;-1843392236;-1889172268;-788664427;780193110;739117591;-544126147;742973089;2051735473;-1606676067;-327545879;-1477644671;-709675553;-2138374915;-1758246707;1792770526;1110676783;896629339;-1933772259;-1824373134;-1108886680;-945902581;-1075697566;1450528539;89333886;-1583267597;-2097768109;9295668;-225657660;536738500;365089942;-239327631;887893566;-1314951749;1907182659;-2063832751;1899493895;-32711769;1310289150;-95061786;1806581925;-1328331263;31931261;-612671840;-137981281;-669952803;2136165096;659701824;1234541204;768785182;-1608981972;303946621;-592937303;1760097387;1973102892;-1954851556;67609650;1128303383;679454476;-334080741;-1946063912;-365086621;938647362;482420845;-841856667;-955741021;1912675462;1315275178;-266490657;658174005;-230677677;-1654407173;-974782551;-550119041;604384090;-1424472591;-341334705;1169024109;1540156430;-1432999330;-1569852480;1864498943;718375340;1527537235;-1231480366;1843888265;601259810;-1080599579;-1909005665;-382177682;928442239;1067797914;-1443559102;1885333441;-14929854;2042156072;143959729;716275290;1092289800;345624340;-1978898324;1573524207;291297136;-1392774981;-1270350967;718316132;737384194;-1409767591;-500778121;63244885;328700443;985274682;-343801994;-734894146;1133646887;1786006165;-1244225028;810604751;-1785376187;551712414;287661042;1569704471;-1418034612;-1355601819;245305667;-1579963376;1813415612;506023732;471536936;152683117;-1389294681;-2129140032;-533078478;773055486;919462624;-2117835765;-733787591;1088115855;782916532;104170419;880591439;492696028;1233332606;-395487282;431708821;-1065911426;-56320249;-819469749;-1563635680;-551661277;-130014374;-945318696;-373035229;522549597;-448354193;1878409307;-1358065854;1019397633;181774631;-1310548698;-260291336;684624844;-2065607358;1480975367;-20697562;1595605858;-701672743;-47293491;487421970;-1945107737;-2078231769;583564392;1250213592;879783534;1215721784;501296720;1339037540;425806254;2140287356;-1483444952;1075875178;-1166864368;729610996;-683173857;946471144;-492403355;920664348;80381419;318675607;-1387344268;-103900048;-345881022;-853179767;-865182633;-1388354806;1530485775;474403182;805732431;1130620949;-701938225;-1925793944;-1163650881;-584717953;1011645403;2138182231;472597471;863838189;569274228;-119337288;-7084868;-805537711;222125137;-1043085587;-1501242401;186582315;1160646386;-573508901;424503605;-1521819417;187189592;395119032;-1461694567;1012292905;-569592784;-656972509;368641957;-1042656481;1734395923;-1531014366;-2117325399;-575960703;-607005611;449105402;-71954513;-1158988566;750727575;135881123;918078048;1200230898;515449330;936568974;680247323;1840136125;-1812020413;2093470653;1162487621;-937368594;-965819492;-37992745;1023109057;-604161469;-422298273;605451116;-124495939;61689368;1959963035;1863734758;-1793489592;1483485784;-1240432572;-1290660922;-1928220035;-1778752187;-454166994;1641756397;-61540023;267712096;-1608608241;549005905;1424624934;-1854795371;-1668562490;-1976477560;-1851798873;503333455;499085922;-1452501790;-2052940135;2051442785;930033691;341405667;-1218534964;1368331908;2049184184;96862525;41100370;739981468;1414321103;306892938;753148599;-208231559;-1472148631;-1034320257;-1817285323;-859535363;-700278911;669538966;-650115717;-1082695002;1348448515;-1702303206;-1007471159;658724100;-1993625369;-232105555;276136443;-758604451;2062509677;-80267532;1576263884;908093499;1882043554;1814593963;-1660607377;-1367296417;-219497968;-1900767521;1309068434;137257825;-1323097944;1274863478;-1633952936;-212420888;-1920536546;1837087092;-69809518;68978335;-1515899354;1864606368;1233016050;1894945101;1753809259;	};
	mti=624;
       };
       RndSeed @[15] {
	name="RndSeed_16";
	seed{ 1268377855;-1202005449;-1374587925;2068409328;-1907192039;-1562056532;-1986598228;-555502419;608790190;-810901329;855732198;-71484471;1898819774;-2083130776;-620143136;-1020951138;-174474239;659701467;-1559036039;1637129882;-1027570117;693169197;210518743;-1963168278;-843021152;-1738240152;-1806545172;557351425;1390728065;-235474531;-519249548;218014482;1933113402;-1611759000;97136116;-1392003737;-169828867;-1340259493;-2012925117;1161953740;782002953;-767751242;1263303571;-1672748347;1841166255;591451603;2009548653;1791752651;1470932706;1352815296;1570434903;-1416662239;1579886595;796777215;-1479352879;598503286;786964422;553615191;-279720819;-999706047;-974739898;719160950;-342543668;-2118724886;-1470669368;-198239501;-2003824398;-1334370573;-484102567;-1074826297;617617919;771537122;-908860558;-379112226;-15916933;701892515;83639963;256026228;764133394;-1704302231;-464332153;356309605;-2035992789;1473426560;-1002356679;-1833737929;-465717441;1712088835;-1894599134;-256312583;1277218556;-56488148;-1537661721;707599286;1369068844;431206432;-1643799296;2085291051;66658036;-1417295193;1807630461;1710607697;571068662;762124149;1305140881;404021049;-767520025;-1236141985;-758398435;739746883;-837768739;-2071145723;1638859059;1376598827;-905457148;-1767072714;119371000;1694490189;-352493454;-1649768948;140927486;-255354961;-2070027434;2017371295;522289362;1407595863;163058028;1625664539;-798175038;-1746098778;1283333686;-1284613322;1204080648;540665106;-1913912672;-1242317711;-467147545;-814263683;514521664;1897987019;1665691966;-1662491288;-1009009312;-809454690;1014030977;-548968842;1983056315;-1368563467;885813511;1213618008;-1371662413;1258558060;1131584153;1260017297;-676907158;1635716616;-1545446615;1833237396;-1007878297;1290356499;-1198543686;220568889;-1450604257;2037292564;1238408173;-1775054655;1830402197;1257834251;1112154522;578303440;652839866;-1610568947;2100790423;83203547;-552381675;-407859619;1902803398;43944756;-1619541962;830908727;1865429607;298219763;212648853;-1444485248;-963909374;-1345762;2020574251;-2032165043;-1851514393;-718803690;-835467513;822782291;-1290323585;1683526674;246781761;-1973586328;-1876659562;-239179479;-561186728;1828958126;-1656621101;1264361278;998017957;-1939773980;1396656778;1688849572;-905639193;-485666621;-373842800;-1002409520;186373137;1055835272;1528320636;-232230618;-494636689;-387478413;-460171000;-1833892560;-671297644;-487147922;-1947119907;-1786612264;-25155104;-399506834;1496861409;-546870463;1124180972;-941981084;-842034553;-102141191;611854216;625435023;-414710445;-1351489159;1950413169;2028220955;663596846;-1612202989;1787382947;-224661799;-1437735182;1910672801;-1953726190;-2031059901;-1054421095;-1633725769;1997635423;2057473805;1510202548;-107613854;1006380351;857893334;-1005500310;-512703638;-303084949;-686685177;1247656596;1978096330;1936356889;-589598597;1158387804;-660086090;-511553681;1893606051;-1298506510;-583853127;-652838036;-503964970;1917293589;-519560975;544506504;428492983;1165598787;-1181905637;1560939759;-664504071;-348682826;-2023186818;242934786;-1903228959;-992241497;-1949368883;858188485;-1990128172;-863241078;1360983082;1661884693;-1579099645;-1805153147;-1027624604;-1184752187;1779842982;-194478841;1933342649;-1191922498;778562387;1597260775;1799282919;611570152;-94438989;-1360546916;-1847890813;1546246419;1227573065;1513138328;-946116978;873196499;1621948018;-179976301;1363397893;-1550645302;-828105953;-419123388;1704404796;-951246517;825600675;-1863151989;-1346859446;1542237094;298653986;-800318038;92677614;1773884968;-1625034640;-1342644162;248812785;1546304859;1638391753;-596290768;-1909121176;480976924;-1804162985;-1992759339;-1570338784;37480632;-298497561;-1261622204;-544346385;1078956142;-1162320866;-451511200;-1792733340;547793556;756449723;1164657439;1208912431;1693524864;1135217728;1953275905;1887117661;-17668438;1764881164;1562499713;-708200991;-1676102260;-1379229591;-2018013541;954868930;-1688579088;86876641;-808892371;323754383;1570545109;-2146649585;-420389491;-1087575949;2083729155;-2056806599;1421174455;377679167;56054349;-929452332;-552334521;-1144268983;-1263528691;1814452066;1469675143;1973647959;-2041492632;1196719181;-789727368;-1923663868;-2138156580;-955769835;-371925970;738849858;963817868;-166200897;272573616;1952164597;-1823275062;627317615;-415876269;-1655490535;-2020042959;-830278742;-2085710791;1389432788;-658031209;1167818995;1291412234;766638056;-331745254;-1923922832;1217987726;-71805696;-1941100859;-1482568422;1967113232;-359893682;1699446267;1191804733;-428191672;960942644;786088994;1144231177;-162327096;-503431752;-864784535;-1116360587;-1038135401;-184771831;1273464472;328137988;-672335812;1594927492;720244771;-1954276742;378579716;-1347117503;-1832301283;-745929238;-939718755;758747399;-1853622155;139048870;-974697422;-1654765046;-234258722;1185829864;-988951131;-922093001;1866566718;1654853014;1069231439;-515823384;518517;-46024216;1356471927;1033186383;-1430666259;-189909490;-1174189595;-1624651544;1583841304;-1357779804;708916550;-1910080409;-1333517661;957404240;326276444;-475583719;1824189712;-1777032572;986175150;1769788023;-199610272;1760498658;-1490266781;-271214054;-1318310221;-679336276;-1881805853;-1714914658;536468838;1792667929;-2119567276;810484171;128866805;664837256;1037732744;-1935878519;-360838727;-1291558331;-1656502553;1567688510;556897473;510786316;-274368092;-504078388;-547842667;-451261415;-2100301266;332929353;-154596165;-299336057;-951414780;1806668724;-666622629;-263793237;1809921340;1174579206;-1758917703;-795494978;494787209;-1034319098;-2116253709;-1537696496;646093846;-1549181781;151454123;2136288630;1144037619;1810826107;243182372;1602997047;-664726446;207838970;568214696;268894287;1746298931;-532541;-1043789622;327354968;1000615620;1546213729;1858381038;1180826458;2007556087;2100626463;-1980715032;-1048599707;630656850;-1358303377;-402141929;-1017143557;966029808;-2045090359;1970327089;-1758917877;-1286066775;1441237396;1812793063;-769732387;-1040107594;322820490;-610816108;1357977526;-825209769;-1756163255;1411826109;-1927541421;946379805;-1113842022;1361013794;-1959172358;378034692;34843073;1742816339;-5384055;205408930;-1930287589;-929338609;1324263919;-358913254;894477330;1159487312;980088364;-1792758380;2138555495;-920316808;-1493964350;-896337156;88637400;-2131948938;-246860285;-641183680;-1798273104;482463100;-36605905;-639840352;-1867437932;1219971956;870671472;995136120;645137313;1193122255;43970193;-933840255;1704274327;1379184764;816285856;378964336;2063674241;1480436690;-2012366958;-912949724;1871619768;-175125933;489661415;-237810821;738721969;1482555695;-1678108799;1221944331;-486550449;1436512346;-1853552314;-1941041612;1273004975;399381512;-1723977333;-456466831;36882271;-1840021023;-1129726986;1480113580;1470065834;-4561695;-1095450219;-133484033;-2012309799;7977429;1162629240;	};
	mti=624;
       };
       RndSeed @[16] {
	name="RndSeed_17";
	seed{ 1268377856;-59672986;702726875;-1732570262;-955690996;116235504;1867209398;-347621062;1375376517;821247005;1542274171;1498162733;-1767072920;-919926049;-2100362022;-1490255545;1788865865;-2079578759;-2093572967;-1432896454;1193228844;1487866070;-1700099095;1100412622;-1102240061;-646671554;-260785109;1540858851;1979030086;627498272;1506500030;1721774970;-2061622617;871430202;-1266747132;-2138671743;612661203;-1758973596;-2028661916;578567525;1638024705;1182506537;696307186;128303781;-1475143611;628593456;205636126;-39476219;-1152717682;-2063974547;-222925315;-1933028503;731524203;277203308;797393874;-1771625455;-1987811657;1193697954;325264777;-2014109624;-650553490;-1016868034;85523535;-1677012374;-71914680;1674164184;-454579745;-1102004209;150846053;161322782;-354570980;452191362;1058060690;2145802467;-2120219788;-1506442279;900348083;1432693228;-170631217;1386346443;1174920450;628477312;1895011282;-117817966;10740617;-97773982;-737821285;132261199;2069430147;526868643;519396265;1383701256;-1489962007;881927956;-323346622;1190075908;-511015591;-1166424349;429973543;-914469178;1516208413;462023793;-804666885;980369215;-445273277;785502377;-1039088617;1444417615;844770610;1948358439;-181536660;-199267526;458608365;1494382834;-643251375;525988301;-1719788715;2126731464;-954951485;-1105263561;351274593;-826053186;-453021429;-2088968029;-991835903;-659267513;1485463378;-1696594114;-2132412628;373564327;-1383632795;2020046886;-1657780505;1715439070;315435137;-1121647508;-168059410;21242890;728863356;1016538999;335692159;2020200104;334887483;1049775318;1555093246;-1446229460;-1064443208;-43153574;-652998735;-1427944497;-1646748297;-588464960;1203754119;1326747511;-400768984;1532744850;67275163;400637380;1447510770;-2053737090;-1080052084;-124320601;898406742;-673086063;460510526;1159614491;-1500936984;-1496798471;-1048000337;-1693501307;-772633363;-459343727;-1447283642;-854260863;414774520;249126535;-1190556941;-1800025402;815260678;958278929;377282921;700784674;837148704;1434619223;-1082209882;443175533;-1895179589;-1140896584;1558106142;-1507740680;-126694304;-815751474;1505057953;2071931873;2059874338;508410258;938957150;-1929670437;-1045215389;-796030553;-100920708;-1680718876;-476782456;1035205282;-611281738;1821542710;901747329;662886068;1785792980;-1649484070;52921354;948335301;2144974221;-102724335;882133744;1730937223;-740863818;1595323714;-473211063;-2008993011;1601514695;530227451;-2096834843;-1673828094;1302425056;-240860250;2016902651;170229381;-1557981091;-478382752;1419856885;-1191932885;-123978219;-1384626793;-1866255949;-1703848768;-1100987530;1749004721;1393052510;1446286442;1494798887;910901231;1148199229;984234399;-447229009;-710832175;1165172944;347262060;14971796;889704029;-99667797;-39838909;2105540924;-925555954;-1120679393;526599024;-1722774480;-2060709189;-1351129857;-1643037228;-1883313038;-1712637643;1609368249;1644071839;1534501982;643740036;1526181406;1186941510;1143557647;158550675;2070550541;806218187;1881661735;-951899377;-857904946;-1442115852;840470050;581846655;1945421873;2013572103;370218358;930324135;-1961494531;-44347466;1554075781;-1017681615;-786021416;1030093190;644753662;1683495767;-994193392;-406699102;725407913;-678236974;1399474331;-1107357719;143854559;2054620964;-775184445;471058411;1161274339;-388654249;-609075886;-380007644;1037878931;6554672;184768546;-479594339;-483547766;1633132866;-105612379;-2081775691;755692395;1837321584;1129711567;-1178578047;-1037627669;-927266107;502871900;-2055793525;-1112052659;1283261292;673361987;2077779634;-29667101;-1043412571;-1408670268;932585061;-1254028255;1797096984;1175996967;-1236428727;1093286371;1003538807;191966273;-1239662604;2132403038;1266519244;1316832051;-289454579;1616257754;1923085500;1077916903;1799058965;-885896388;-1210750924;1567687848;-978040568;512013747;-1954710532;-1144071532;229672077;-110181887;-728523221;284741418;992818933;1743965453;-1646636255;664111413;-1059094448;975113511;1549471948;495343435;-1849387774;-917779860;1464157752;2021144299;355919297;1944317845;-1322272043;1119012677;537396039;-136623241;621926969;828545779;24653398;1905282918;-1472302052;-1583751344;-847905067;1959268842;-973941196;485684273;-908095020;-81683885;134656785;-772816841;1390324231;151014370;552068015;572423313;1520943036;-2081043431;-1829700816;-438378940;-36523378;1133045805;-763943191;-1791257120;887494073;-1535798131;852305148;647918846;1678907337;810904444;144491905;504559227;-1530916066;533039012;604064077;1641488891;551891773;-981213779;-160787133;1454121950;1614118810;2007125191;-1350024769;-1273293261;-723059720;1675083435;-942852937;102113450;-623124807;-1845073142;1493664721;-2144251206;-608035773;1517512428;1041723950;-1835226156;-1432399075;-298818581;2045154361;718435274;-410727835;-125931022;2121526986;437574349;-353564264;820362975;-1981634892;144518536;572047459;-1183980597;-37719798;-56005813;-1472668377;1959464537;1127334521;352056090;-1170877179;225365127;601616904;-662386962;-414035384;898735199;1773832772;1853520899;1589510293;-2091814864;-1920333945;102639175;-1940776238;-932321824;-258527392;-474566943;-1160252675;-2127145105;1865733334;-1415575127;-1023584946;1370742329;829072881;-948407569;-596007689;-2014270944;1810715463;1696354940;163344944;264552144;2053937649;-523620974;1293784344;-517655103;230754671;-784457295;-781611231;1579986002;-904042072;-2100021919;1744833786;1305768947;-1434697113;793854151;-534114446;183669381;1069546858;-1958562108;747377681;1115162025;2079925565;-1831022942;1108420375;-1740033114;-620747347;-352649824;-1170780598;-1800508316;-6464453;888626198;309927085;-556013759;-967667445;-983006678;-1425912528;-409585474;197953942;678268980;1993456267;1868067962;1469630864;35463487;-385755418;1711101797;1685323905;-1182223218;1533159755;-287775166;110273206;1273469408;81797336;-471298228;-1634020544;217165088;-1394643017;820113793;971592446;594128464;187340715;2091211667;-1002683209;2104979746;1201692654;-1994014101;-305207666;1440574659;819838125;372180837;-1153041922;2068283026;1609997606;-1770593909;-229093834;1579432467;-1243837115;-1735410129;1287069422;-262791815;773188945;-1814168539;2073451668;-1645132293;1685184112;1376665033;254175773;-1413716825;-273480624;-2127158793;1010468066;241262948;-1555696977;2016564605;33495081;1118927723;1660382481;812358032;-1567512559;-1292993343;-433023438;-1729987431;1380392556;1448237127;295980005;-1850572639;1253637528;-169742169;-1335380225;-691824355;1072593187;-337737699;-2039102427;-478133069;-2027074623;-390119103;-835775651;-1182665622;1256789853;-1090882142;421726839;682480203;1982536944;672556655;1857082150;-2032914497;-915538706;993698015;944886106;-1295596318;-907571519;1393501932;-313904412;735360647;306922664;1074266286;1682894450;-639328057;1721258941;-1727223914;750277583;-398730729;232636497;-1835058333;-1690281804;	};
	mti=624;
       };
       RndSeed @[17] {
	name="RndSeed_18";
	seed{ 1268377857;-1872106239;1756765489;-775408653;-1822954060;2011246291;-1381770528;-2047455951;1239531559;1055859975;-967091507;-1991962287;-1681243957;1156980826;854095605;437455800;1825642408;-976828738;-1829597789;-1830549096;944845782;1604385155;-1969814944;-427269439;2079770786;976315240;-75046878;1997477408;-1833802719;-655541012;163443049;1677750156;951678913;1418299462;-1574845659;-757932666;811635357;47897878;-1807482924;697791893;-1983831823;511249160;2044764754;-1060932118;748041753;15055114;-1846650080;-138598759;-42031886;-137163706;699909227;1351270762;1982698091;-1136951801;-1475582673;-1354498056;27707354;1454801723;-254685156;268481398;1619719114;-1042886060;-458060911;807416537;668545245;-2048816014;-1657513870;-1274358669;1326270937;1907014269;-1618219214;-1618604489;1827731505;-114058439;-1509668820;731060337;1077157345;-1985173075;800495961;1217012076;1885177169;-965908255;209277820;1911508031;1088963274;1592655212;-1166061225;-871066656;1450693607;284602391;976275565;-2021889956;-1971225742;-1875598451;-583725367;1247735825;1985824432;947428662;-399381328;1346579970;607502995;1683713892;779288639;1949945922;-1055390249;-1570455283;-1736822187;-1584960578;1966677400;730762954;-1725009888;-1304268839;1427068119;1565327071;-1546167288;-1602311579;939219479;-1006511480;-260268979;-1091475139;-79020717;1279918345;452440226;1571644005;-1614064144;1305832183;-1607804532;-97070203;1602103902;1846316796;-932917421;1843895059;601542814;-1689592613;-358071517;-164717529;-2031165764;1352896383;1824787264;-1910162896;-1338853306;1652234081;-575497874;965533072;-434800032;1638745248;259865879;-2118424154;-1913294264;-1274695225;180654159;-1225771326;961698392;1212071249;21004586;1136160813;218091000;1206778741;-1935586974;1300648831;-383819946;985143850;533253428;-1938437593;-1767272899;-1514285440;-1321258000;1146749217;-1443065272;1928679899;-661850708;1793103286;-1497693985;491298014;1537913412;2141340392;1362237341;1286196541;175576414;419216585;305990913;-1525503206;-342533842;1256211576;2054079861;-343213187;1457366896;606439760;-629473972;1161705448;1893122219;1853554129;420115408;1674183121;1180370898;-1277230590;1561184964;-1084789378;-1787195726;757169207;1395683707;1361907691;1269924380;-1502291140;1545645634;-570713028;345726121;444661884;-779383364;-819780564;1485008477;376293151;515385103;284651712;842415254;-974377467;1157193526;2027421836;-983650949;-411588301;1007710412;-1536316071;-1299703611;-429570462;-247091675;1169820639;231898488;662223163;576628779;-192652068;-335217695;66147089;622911389;-1762771238;-477600734;1800153840;-258020607;1065667255;-555685343;183931481;-737648883;-1550975113;-588355813;-1327331989;-190655391;-829145697;1421396866;644245158;-908110218;-476792286;1680873727;457952049;-1896127407;-1272708932;-2083784204;-973585139;-1018577530;-853085318;2096681151;1393691129;1396418524;-1771470794;1051158922;1783463545;2122915424;235005518;-1088316464;1063509221;434091109;2005875174;-623937487;-1131729207;-897508825;-488073915;-1701880912;1283420237;-2089551088;1671213359;1743095356;974101544;1741817056;1755272926;7577109;1003068516;-235390832;-583401956;1471732313;-1590739497;1821205289;334530537;-1711255281;-1596264380;-1159707966;-1854728475;234531145;360438772;-1237361556;-1099409777;1705417675;-1096773155;880993575;2086094992;-331596957;-1893085681;-115457711;-618485621;-57325862;96343504;1448799300;1278420334;1228877057;-268320201;-519343172;-1464933740;-1638159256;-128597747;226994626;1823263943;2066530652;296620016;-809256208;1474940448;1567948103;-274963487;1297439598;-2069595376;1346318688;-1073584756;607426995;652636136;-1708830766;-1222717861;-335279255;1335507999;1054328612;-424683901;-89513520;-503430000;537442897;-1822565304;-1661893498;2060447081;401429342;1641100141;-2080237836;-1680427417;-65731533;282613835;2057828851;916856791;158703665;-1149669964;-1164398546;-1246163267;-1239414339;-669773634;772456693;-1909178610;-642888414;821172332;428437508;1615288061;-627691818;-1071417228;1219966815;-394516605;1050613486;-527733931;1791778910;953015788;913300366;1065524857;1453738033;1703685221;2060126442;2085439790;988874755;-1166621272;1078589324;864297244;-1063449208;218283092;791233186;-631374487;429438546;1729090011;-712935804;-1238170682;-109026856;889311212;561010082;-23888783;-588833662;150358382;-1065822224;115556202;-931282850;-468079810;628045215;-739557302;255225693;1771943490;1368900865;-867321197;225553508;165054729;1010361123;770988390;1594416342;-91278996;-1443108507;-1239665090;-1110736056;-1718392881;-867194241;923705483;-1803764873;-776301622;1848762607;-1181803127;1058212987;1334755628;216943975;859941450;1024445146;247444395;1987405601;-496905909;-1030808812;-912916288;401320349;1829368224;-559775947;246028287;200011853;97125652;-117983592;749797340;700821378;-361180671;-1071911294;-1355865186;552307270;1507263833;-921094796;2127546544;1664608403;75687257;-1513087267;-1212512580;635754680;-129238437;-1755652484;-1789053061;1623565699;1377493009;-1494026216;-1520972277;-1490674601;-108680108;1700302623;-229013853;-1262633234;-1568890645;2141662909;1813777917;1550934590;1778940846;-1789758241;2015191558;-1086427751;1065759486;1848512014;-736455484;-309578915;-815819791;444588630;1559122891;-1218172272;-1219825799;-619294617;-1014022827;-995083568;-2000215518;-156002172;-1859359192;-928910728;1476755310;-77156429;827884121;-233041913;-1447004289;-112456899;-2085183645;-100742093;-769900321;-1713417028;-1297604889;-383795381;-1847852709;-571200751;31433231;761133281;-362112068;1604430675;-2034926765;-808517137;1646727191;1503600810;-1930401676;-436576628;-1572153494;-660232696;1300457304;1184196895;1443203289;-1001220292;1581212896;-903465013;459672559;-1825661357;-2074816258;-1607380618;-1036502833;1411880584;1290581786;1830728373;1303041811;-1963098582;-778162215;-1577415404;552890817;1503145017;-1640272851;60807073;-908313188;1144482003;112377587;156918521;-798011560;1558119427;-248534809;2003544082;1458601118;2079015899;-1642630877;-290370265;1513600343;-1520463086;702060405;-340500401;935767075;-864704777;560952429;21120555;98546722;1301693846;-1566030400;-100247112;1654881270;-6809181;1880669777;1808525250;1087294754;-1655460861;-115972198;-1535720813;-286171540;-640898301;574781753;1940412087;-557081079;1747891758;-382334520;-702774699;-1822854099;46202827;26579032;-1129771782;-513091557;628366268;-70611087;-1043555264;2133754806;-539498373;-690032223;145951028;1861973967;-1963621230;-1765908707;131866761;-1761531556;-64314778;1518149930;-1236591799;-2142639638;1890480860;810981510;494134580;-657570853;-426287472;-1789264552;-91479844;-788967082;-197749275;-1324663781;222763323;-567637594;-906715783;1545497987;1999227052;-660880476;-1632005561;174105758;-125074756;-549728574;663018893;1020715018;1458683996;735947804;1951655288;490097706;1649707264;867342548;	};
	mti=624;
       };
       RndSeed @[18] {
	name="RndSeed_19";
	seed{ 1268377858;-729773776;-460887007;-281420947;-1069322134;1352829554;425536101;-1573599520;91187506;-1130478909;1534107439;450915121;1312719713;1788359917;-2066535126;-2037172009;1263692057;-781627767;1465505412;-2082353268;1963712794;350503612;-1998000062;1043925335;132202091;2133975888;1150027791;468757409;1865670561;1065605693;1383776047;-587265211;-2070812482;272723533;-302859901;-662130781;-515249596;-864391896;1357255965;1876316211;433481186;256517203;-1208631319;2065070818;-1210648901;1558665258;44157989;-786933816;-1876736441;-966220182;557242527;1961463278;-761076097;-452900063;1889916576;-72296772;1659498643;1678248915;-1338110956;1502382825;924906948;-874325359;1769364952;282798044;-707824116;-277832916;-859676467;1545629577;557041900;-563572383;113036784;-1807568905;1512868081;1735030521;-1485592542;242906347;-1789991933;-936673870;1531138083;-1872834631;1152387095;-832506113;1632783806;625796014;2129654266;-16331940;-467856431;-1311624143;-1757224073;223369858;-1833875548;-1127015719;-1733964861;-239424382;1753094211;914941033;1360875213;-414235939;689975288;1663477051;-918472122;47049374;1612586684;-1652537864;719611402;687709275;-1892129967;1772854058;-387237021;-415969971;-19546572;1419803426;1730891839;1002034919;1487169685;1088452311;1073834210;-1545282300;-1229100588;-1556592667;-285213285;1490904433;-1867385430;-364588093;213470012;-1929262295;1234971509;-1106626237;1869832229;-2014039371;-377687627;1604305745;1354620692;1826504910;-33072847;-1342180543;1409209591;507227031;1098875421;1924354455;-1165855046;1175015205;-150831678;-1517361484;-506303394;-426932670;-898252489;491130391;550428327;827733880;-1090839826;116255667;82168119;-1680354740;-1546406048;1264110661;-2060125328;-527092073;1663024386;-2034160178;-598917604;126949852;672788590;-1360479735;1202604539;187693639;-489767511;112643769;768577701;-1211146558;365240938;-1088991619;-1767051321;-1460795802;1678772770;448117630;326854502;-1781571089;-1078691789;735880456;1167484124;-296021786;-667207665;-1733326477;-1679445171;-1447164444;-630560136;-329984446;-337096351;-136081817;-1464421838;1958739375;641938534;-2041036033;-845753453;1554614419;-1661533090;223212817;-681653893;-729893601;1756197076;262308306;1196726948;1101418724;-1171556315;1938048816;-73379805;-1040138897;-1382184852;-265571785;-217636010;-2029228452;-1685464598;-128442019;-1238206228;-1692199747;539649843;-1202060552;1945171836;854493740;390205496;-1723441419;-296310959;-1829181895;1594190119;1248973535;-1261240200;-1110017275;-22656601;-1468018023;140512013;2099859976;-2005717131;-98997796;1053301989;1118630980;-1495773915;615600208;1344241790;-1884640758;160128536;201259113;1164391263;-1413049591;-1286215861;-659992126;-1076589797;-956677420;-161321269;1234615777;1698024026;-1543468574;1126123100;1619626158;1093768457;-1266084569;-966187623;-1949220669;1451021863;-790309887;-2083866674;-1846890367;1101184949;733542155;-1585751201;1964691898;770626257;-574486912;-996299333;1412760229;-640692286;1064452404;-446394732;-350482012;-1223272715;-988053626;330988941;-2137063754;-1141583334;179158159;-1403196285;-1631495938;-641009530;1941322388;-1571693851;1220672832;-573066045;-418049825;-1218878484;1346423815;1927918976;-891443704;-711235973;-580016515;-1077010724;2062089405;1716540244;2107399858;1480861897;-902881261;-1657784452;2116703203;281348952;-2143841561;-204701047;1800493987;-1164912100;-1095623415;-48408181;1681267677;289782530;379902721;-1857752675;-455447564;1437911213;-1670694633;-2090024059;1530750080;92844323;-240214258;-1570916767;-162991792;-785276415;1582693901;1060481024;1058228549;1370805887;143920893;-1017491431;-1875540597;-61669033;1908505455;879071666;451460743;1434086289;-305364705;-1702171300;2003367271;92694672;-1209249245;857149785;-2049869198;2134589318;-1743761254;230237520;1144228329;578458082;-2019851899;928799391;-767043304;-1119544315;1618267938;-18582225;-1760901187;1717503677;-1120123505;1289414405;2031766009;2126309438;109730114;-416839054;-792258306;1440170555;1475619917;-1524750488;333662271;135149897;658746428;-1165815524;-642723769;-468545466;-127215188;-126907777;-830341023;1714199072;1358657916;-1784294199;1054513296;-1278000566;818524131;-1041768181;522260901;302007447;-755965934;1835565365;-1882468603;1784966725;1820190295;-1035344014;874170906;1668261832;1582744788;-446388591;-2083005661;1918181007;1724976529;-1884525732;-1945261149;799334675;872741134;-425672170;803000538;-1143402092;170342337;-258586183;-724196873;-1449100582;1240862927;984932574;-1010464977;880337398;1515703721;558566628;-692184175;-826276808;1436696550;-796469565;1298103137;2136084098;-826747310;-2116753255;-373835316;-258664623;-276097279;1782458226;-976806648;90593793;-913109744;-1735895765;-1015313446;-1669050549;-2053088644;706945894;1838714607;841991064;-710114133;547766268;-373744607;1661226272;1709185212;-2016286391;-256430256;1339955321;-1459625709;-270735759;1050144439;-1145954575;-1132772706;-175454900;-595582740;1253435149;868062591;-1991904289;2133163254;-664043975;-729032535;1455781594;-1937762000;-1000098684;-1163691506;-2061265784;-649234881;-1149648006;418207783;-1226725325;794859046;-2072013616;918035117;-744219371;1726628227;-1710724064;-1809916607;1164650567;1572756343;591805800;258663395;1213556075;-1159938385;232575263;1877023258;-1249590905;261326938;-878512284;-981287802;656052061;-876718442;2021713839;1150912397;-17799132;-1985546164;1541650096;-932000064;1900474331;776883439;446251833;1711278188;2038475249;-1337688671;1706479169;-1723883213;-1749757111;175604108;-1337062862;-645024025;-603640340;-1456928700;1955052440;1243670104;-1297120231;1840157604;1483116311;-190628947;-384259162;2014971674;-439401815;538462485;-2075913139;2145602608;-641054117;1459646143;-1113497346;611721589;-524955085;-192438533;106721764;1218966785;1063299854;1376779413;1183177844;-654468806;-1885604209;1498725556;475943549;-1463389594;440313738;-1356401271;1318274287;444568063;1265570485;-1497319649;701613453;-1521064002;-1631679670;-928088697;-1398854860;1063646319;370268397;748448932;2018943704;-683449662;481706315;1239803838;452110211;1442198488;-1563387961;535252964;-1086354656;-1686824809;-2022870537;2044531928;-2108662579;1225287388;1533533283;60319453;104324197;-71367922;475605847;-893343094;-1895457979;-1606400964;-1550705488;-1696688523;-1986523601;130985726;-1591543180;-334497587;1679124870;-929242236;1213859205;-1894526121;-1304567859;-505932304;-609962459;-796904123;-603882266;-1632643678;202500714;2053781533;2092114264;-2064397462;1541532246;1122698658;405960351;-541268468;-82981571;872032713;1385041825;-2050438027;149249097;-1830847452;-123317418;1066033122;370526340;-1971142033;-325186467;-309644941;-814779506;548015616;1184204896;-2052998746;-2002582506;-1307880889;-1453235043;-962671584;-1327872203;-1128560102;-1181985312;-8268141;-402867910;-496789784;-512012253;-1536704755;-275355047;-440917519;	};
	mti=624;
       };
       RndSeed @[19] {
	name="RndSeed_20";
	seed{ 1268377859;1752760267;791020724;57683719;-1583461177;-1343441218;1699918898;-1384815834;660234556;-581601099;625739224;-1358502333;1991811249;1235588477;297227770;-332548687;-1272778422;-1109345927;591986841;-1924260496;1941020686;1747266816;-1563997573;-188079404;1749405163;-668829845;-615005150;-897775072;-659113237;1182131621;1541692882;202633054;-1568096714;1898503845;-893281578;-1307503828;1380069194;-830944324;1089116545;1530138535;1299448486;717318924;1575790566;-1081483954;1978006312;-1052506022;1857940555;40358753;918310517;-545615526;1217591631;42539513;550273137;-1870518838;302575646;517523981;839101529;-182607786;-841957693;548405755;140319555;589798572;-366158822;-164940004;-714779013;1770608025;-1725620934;-1261469861;1752358753;1249673509;-1137232006;-222291297;508296148;-259338515;1073938992;-1733093728;204644406;288365467;-1409427595;-877285054;-548292619;-1502987681;1437584387;1318489885;1304457824;-1228273254;-1610604210;720555859;-1845217513;985069730;967625284;1900425519;21300610;1857797799;1738739164;-1026900592;-1938459041;-1086687214;-993923406;-1676221128;-1840612794;-1699962567;-1258213459;767915890;401744482;1335624467;-1817192316;-756407479;-1303869794;-1528129543;-1480570507;1282321250;-719939201;-1401820579;2079805165;-96309361;1723592368;1303962954;-2051761651;-249835678;-1717912899;389342420;673168414;-1660729775;-1556993477;1861364218;1742660485;726493075;1526499455;-299939785;-1721282298;-1220928745;-67244851;-1333089333;1529042899;-575731615;-1271348942;35055737;2093054279;-1692053719;2068004739;856858839;944604257;1024730068;1256888116;-1746139782;89350378;388527845;-1495632403;-891916576;-1809433819;-87149062;-737375019;-2111039737;-1327906157;-855614256;-1600746789;1134684474;-1722902555;647859650;1163116586;-1861299048;-220837020;11984710;-930312894;-1613593526;-1261389554;682913379;1727498423;-1664330121;-267011629;766681019;-518973325;-589130531;555846212;2098590083;-1972053254;-971957111;1288445220;-266121908;326485983;1082602160;-565266037;1225849695;1909095118;-263963804;1652985693;-1655518201;284961717;886316070;667513276;-327451669;-1520497848;-1567617293;1332469463;1873375537;331110580;-239905847;-702731912;454111566;575484558;577040591;-2141533835;-270324802;624125789;1059294590;-164544124;1009850898;1422978026;-602220664;-1128436311;-98973622;-1101392223;-1306711516;270137300;1990933371;-1934048774;1383743409;-199208630;-1589697624;430247150;881555651;-268697395;2021429285;1396974356;574297386;1808323700;723611660;159097248;-760912635;-377810364;1850160618;996149663;694346660;-1454205794;-547348873;1449400496;-7637054;660834579;-1843052434;-350210164;-631606436;-922330003;-1510255015;-1109604901;48902290;1717652624;-1168912596;1865571358;1795420212;1099768547;-1333283291;-1256800929;114981806;1780804260;-1465523944;1855896130;-232630160;-670600863;-1471467859;-1133636849;1090157094;2034372969;-1942386929;1230192169;221441745;714936959;-195607514;-1830244187;-991424016;-489742099;-1562813195;1363336579;-1099303077;-1158924241;-1367523372;-445794686;-1535440134;-1439560466;-652384717;1872298504;-1011638362;1339050547;339740885;1540389413;1369011537;1182996910;-2109683158;1993812712;-2126929906;1119261150;389080350;1018786810;-669938489;748514938;1469178185;655714960;-1955980295;1907580465;-1401169381;-683446775;1036240159;-1701618327;-1961943194;8382372;719923429;1864544395;1961853349;173730536;166516413;1149689543;-707273899;702844966;-782551497;-731236418;-404282420;2130962663;-1703413253;132833659;-525153850;-186185479;-104180253;-1377254750;-10720669;-1660724956;890340163;704423349;-1454489936;2051669890;428075768;-1231917790;-536138005;-1998869804;-2131694149;1515506763;-758238079;-855487846;-1308471122;1019863342;-1788250503;-2074045733;2023690738;-1191042763;1042189066;-541378998;-1125614298;-1901222770;-949692265;-21190720;1351257164;1037668543;1585796026;-762962649;-797064043;938268304;1832106035;-463966434;-1339728682;2000098570;-1169477186;1768701076;137536818;-222236636;196386766;-1905636430;1681984989;-1894173382;116717703;-1755886157;970744134;-185935856;986606578;-1227679250;1604093841;-230847162;2076551856;-198438323;1397815359;628957168;-536540373;1124978756;-1496639050;583956866;1695187913;2015627112;772611822;1899795304;1806195440;-1163011175;375036076;170281314;-670144719;-582583742;-939391442;626361931;-810999774;1020417937;550512322;1043013144;-1933199097;-2060931703;-1330062232;1707716964;-1908077716;-866295302;1410656722;-970511147;-1504888827;1805900635;528397851;-1691398847;-354985974;424775209;-782235446;152439275;-898781610;803489321;1169858766;475609677;58865412;1122818616;734632738;-1065523184;-357483482;-1306556095;733676568;-1834911966;72622411;1208960835;1710715063;-2098536580;-1665754011;1217385811;119934219;776669705;2117650496;358141017;332612050;1162894224;111917804;893193428;1992263005;-848176378;356784052;1786294208;-772627998;109201539;-1983268754;-348417956;-1252274628;2051640888;-1951359168;-726193970;-1967927386;-796151430;-278542460;1402992907;-1582719813;-505882681;-1134492129;-1520963523;1895596456;-1935566213;1018934412;1770072332;1514678514;-553175887;1642663437;-875890544;-702562604;1669880745;-1619979489;748818761;-1674582874;-1329792370;-965228777;1213677760;1834669826;-419663603;964368997;-478906183;-693818045;1361189922;-864495950;-513249607;1351301959;1888541316;62547296;2120900808;1061339702;-960526536;2139877170;1134341131;1898396639;-292131196;-1674519502;174887136;-1401091503;1142980529;49779299;1840823811;832572095;421361233;354945260;-1811557612;-1847783513;-484869357;1499012939;82703406;1590687267;-978170008;-1144612298;-2058572668;-549599009;1910635726;471631534;1914061482;-484257156;-1797520095;1635959766;-2109319973;-417948506;709041187;528340698;-1667862514;1772397257;-1668726026;-72875949;-207425120;-1307667872;1690580156;-288557660;300174327;-2089145976;-1707917432;939453833;-814675419;-1525589737;-1273535389;1016694112;915538172;17121673;-840683989;2060558311;177221086;1015015607;-486424235;293752593;-97497895;-1608188377;-1986194497;-1598820168;-1075346038;-1551533871;1125554281;-1705915597;-497457791;-1020944265;1944216562;527662094;-2108329546;830157365;787230235;-1902664230;310184044;-3530543;-1811065072;-2040922543;585155575;-1689419348;-1279505952;167844453;-565020395;1894813163;-465553008;53175358;1584774326;-1552784012;1118318544;-928466760;1720317707;1122554679;-1923269484;-1689309323;652569403;-243080304;-1854769591;-2088513310;-1544992084;-154953997;1736507134;1800672234;104964359;-230536940;-1058723995;-666360943;-2139280146;2028013425;-1848450682;1031708523;-2043532657;1886077178;1794373729;214720571;-239170397;-1311826563;1610128505;-803605065;-1498986908;963993247;625634845;-904529708;-21545417;838951145;1774645075;1422741441;-2098317016;1824131579;848477196;-1361404121;-244410107;665884619;-193689467;313759053;	};
	mti=624;
       };
       RndSeed @[20] {
	name="RndSeed_21";
	seed{ 1268377860;-1399874566;-756530982;-767248736;2102282579;-295841953;-1166079150;-1604499817;-106588719;-868254237;-2138470038;-224141805;1055730780;-959202215;-540313200;-2040815090;-1976345908;1702695255;-1174872832;1887650781;1310622176;-1632524582;1581804366;925408578;-1543742174;-867770951;213124220;-925884153;853813936;-1716713587;-1019706743;216881809;-988588971;-1357100017;-885524925;-610506909;-1415108348;-720280189;632196006;539160229;-2113833919;-2086684264;1938662380;-619282004;-619654857;369319345;-1202802685;256047508;537439124;1749673365;1745864598;-1456828986;335794824;316987357;249130855;-1204284710;1411188592;-1736021810;145786038;1302577673;-223750812;-368684832;-1342413619;-1775268630;1837285320;934755214;-1827963576;-828700555;2112584914;561654404;1871669850;268216622;-1921360530;1798940645;-271302338;-1169005988;-239657630;362709138;1985272808;1753838652;-1222999711;-1167587488;-1028891652;590660334;-593213894;-302828078;-1384639285;285131940;-1673832180;-1116430113;-886784885;1444620803;-2143247066;-438473839;-1209363720;-1794521343;-1116659825;-1604392958;1738115170;-2008757646;1552535188;-1006682578;-1691050713;1272827136;-1472304435;124906260;-1001688242;1972613836;-846184371;-160096973;-182242210;947154464;398365456;542348737;6643351;-1312939770;1992960776;134859778;-703033536;-886021914;1345570769;-1861474935;1689203537;-1564143861;-502677495;-572252561;71027994;1074845121;558372160;1234150081;1459877442;1932461042;978229859;240575636;-660118806;240629620;-1913359028;-245692849;727459974;280343401;143784441;1647108298;-1987161179;763125874;1020071818;1593703427;572489564;-1659274273;1029841861;-750810546;-1657813513;1518090048;458921533;483322794;1130820780;1565138396;-2059137587;-1276757432;-15951408;-1760584738;110443116;-1642604227;-1486590595;1538337470;-1140910849;-53891722;-1013445425;-211142365;-245716408;167007040;-189654806;-738753128;577022419;425585644;1220763850;-1922116666;-1771474684;1681903119;1020512824;2119090379;2009344614;-672736680;359389597;1514987688;892212325;-824501870;-1139363857;613695036;-949048728;-1261862924;1890853580;1296855200;1742051653;656858261;578012299;-1884819814;840465084;-2005202703;1928958885;636879995;-1512925105;-978170838;-885457417;-1894791665;-930014995;-568838989;1150220862;-66227542;306818685;652066082;-2086612676;-551633847;-672537594;-1301240882;950848594;63078193;-1205573587;-815316380;1528255101;-54794297;1267094832;-1343367630;-876269106;-988914752;874155983;135890060;-1982580706;1267015663;1360918474;1962632956;1043859383;-230884582;-1642171707;-991901588;1190886325;-396942609;-796584952;-1400386492;-607187316;1097090650;-961317417;396882325;-1398927941;465726448;856164004;-868981847;195513608;-1670206177;263049833;1108161894;177942941;-736978708;-1581826489;-1384022218;731251842;1915181641;-254859416;364892472;-1809021926;82376315;1026429579;-253315876;-2014727167;-526474954;1196292081;-486391111;279961196;1482591655;1587919242;-1099261980;-252574516;163032506;1501959538;763757168;-29563070;-1534064968;-1484639626;344587481;1756357555;-1071835055;-1615037582;-2089049015;750843313;1332979952;-2002673359;1399711036;-1162602705;-1481688352;-489476534;-1860872978;-1974415810;-1008502065;1896521632;-1845156694;1027432302;88769933;448407241;95543158;1409110200;-197993688;-1316520925;-590830798;-1663787901;1529465108;-1347710087;217777080;772665546;1860311781;-1412128472;-1253502777;825232367;1172348290;1484669159;1221898743;887151944;-1608853853;1373231041;-978853891;437014132;-234682109;1510182464;-1169233434;1367952438;-294288906;-526687251;-380974037;-2032405234;-1371596029;-1386204755;290669140;-1532747666;1024366567;-2124575121;-65239218;-356214865;-1972444117;2130245245;1636146237;-1879654146;1887764671;-1089406390;-1348778051;-337541455;-2014484591;-2044950185;-871125790;-1318150369;-912896820;1695553031;-1655969861;268660315;-1880736186;1627715124;103448906;-285500012;-205783818;171764493;-1926385018;-1188293766;-854136897;-768537964;707067388;-1368911402;1835367951;-740148494;-228377726;-930773933;-290716417;-1418930980;1508690695;1211912400;683850984;1447342332;1589393990;-1486619015;1728068350;-207438061;820310729;1069571015;-1905084930;-527848984;195808820;529412098;-1294465975;-342698473;-804574363;1181464256;-661429080;934493179;1823276684;-430644185;-1164884037;1556237957;1783209885;-2101709290;122506095;585509719;-715019808;-593001699;-250361243;1156149710;-1901416644;-1814998264;-733208955;-603471246;-214617814;258627523;-1472136058;-1067301460;970532516;1188430926;-320406586;306234197;258510630;-85601892;-919417766;-1294646851;244001020;-1531311858;-611254433;73465072;-869254059;1303106964;1294664304;861761853;438457274;1886360588;-1701093428;-1405875214;1585194845;-1685076742;1391030151;930199438;-1476760905;-1881540581;-1150073712;472527182;-232115333;679053326;-1574687427;624267923;1603829944;-451097673;1330361279;-566191694;563305874;1127550552;-653571108;-735557701;-665991847;1388447812;-757255684;-2097204641;-584211082;-1832851985;1721863496;-1688743787;-1335419812;896434400;1034992171;629635011;-673276740;703533097;940987132;-1474585796;2141876039;649354864;-1597819901;-1143009479;-859531492;877148177;-84526708;-1361363389;1888967294;2023599349;-1569730017;-396727219;-305890653;-830209282;-258370384;-1307543681;282856242;-819188068;-1145406050;487591024;-1525884395;-1452712967;-1599627538;-22937340;598223020;-1143989818;-616558529;-1969584744;-5496401;2023904970;2081153798;1986024115;-1692408789;-842139873;-45843457;1178781792;-600049350;-661137805;-759591897;1949274156;942078138;1200729436;734735532;-893080104;1704971364;-818892073;565576611;-1841910705;602026338;-430379092;-618383090;-483559131;1322263555;1332824272;559977852;1098799092;933089970;1105421380;-1992131004;-1195816534;-316868267;657942268;1071415163;-1835786089;-638346790;459265455;-1041041634;-1998256763;-1392414888;161356440;1103353871;-1857700450;-1572844379;-118186243;-1567970735;35692507;258492036;2138863666;-1244415682;1800221388;-2059419134;-17200094;-447155160;-403678693;-1196268131;840773857;-1496075284;1884445966;1135919124;-1917974669;-407147840;-395805669;541708197;-2034156729;1305956712;1986220445;-417353539;575171368;369275131;-626841541;1282201677;1623589938;-943458986;1072515521;-1520606114;-955132282;259641780;-130739648;394989996;-1039726822;222375964;1044052300;-37615299;1563547064;1410880832;-201298455;946051479;1939761625;1762417791;-1093538306;1930609333;-1283119282;950284103;1963239503;722085651;2138019789;903287243;1995221607;1129960079;1308627544;-599269264;111024819;2005882356;-1774188289;-2030177496;-2022151190;-1214661407;-1544420631;1786244114;-1490333477;-464910086;-86913637;-84641961;-1986327932;343334719;1595395389;769464079;1593451087;757942571;858973021;-498369768;1852180239;1097418991;-1928124848;-1941044539;565484015;-64314184;-1273490635;-1438054878;	};
	mti=624;
       };
       RndSeed @[21] {
	name="RndSeed_22";
	seed{ 1268377861;1082659477;967608422;-656775615;313633294;41653643;-661232931;1246744477;-2065996652;-612567753;468816270;806710033;-2009704767;1966315004;-1366715937;-1268723392;-1963138790;1910679177;658668474;-343451019;-1660299614;-1759687371;-1654463031;-242529234;-386653479;2062445083;-175258020;1085348502;-1153741649;-1356278434;-1697748630;1269841447;-388703458;-16255086;-761772713;-394703289;1989821688;1217754978;-1483664075;-1994863142;500813408;2063584265;1599326034;-386003222;-1768582375;-562463532;-409055231;575972089;1466600813;-257124403;1610031736;457333488;6836452;1655565865;1714052606;553487570;639824146;-297157037;1847649738;-92189614;1225880881;-1612059603;-1879550519;-1351582634;1077281124;-506422758;2087922975;-1603806439;1056433387;-407104516;870341345;-263371764;1481695539;1623890691;-1309591020;719040761;1563497353;-259490571;594735964;-132497509;-880054456;-1684075544;-1903825500;1854838993;-608593308;-1330902536;-2096317960;291645945;-1778397035;2091850476;-1627818789;-169723144;-1800497053;789907362;1641002312;2146801452;134658593;-953542554;1634512187;-852860347;-667272190;-1994574390;-1832501170;-759952797;1127577672;930514486;-1022371400;1222834738;-1797848693;-1620775814;-56261690;-147559896;-1616124313;-438242486;-2031022785;1440407172;840038381;574596598;-458809212;2114524346;181027135;-613452460;572906189;849479772;-1159034680;927076911;2081772553;177893287;1446997091;1186215211;-2119011308;539071281;1465600985;-2054978371;1143379681;706176743;1704868011;140858779;1174911409;389772027;64598163;-597273204;1662142713;2114683495;2082277582;315900220;491444542;-1250171895;-952640533;1628498717;-1757233502;465098167;-431210293;-801597567;1811306724;2013700084;-1578485435;-1090479968;827910792;-682667961;1176178548;-333072694;624013039;-541004818;-187045339;-1487816797;-1343644629;-52720172;-697825925;138371329;1056034575;983480470;1702959578;1002596116;-563585134;1665748452;601770249;-418930114;1736484803;500630077;-1582200891;1998917944;1550208307;1745500017;1203949544;-1937852250;2068487534;-1262910330;-457708336;672291580;1859306026;-163799370;1238137641;-911409271;1523035188;-1117630804;-492426902;-979990478;-392366821;-1732342977;-967076647;1321231563;22929020;729621431;1316816639;956543235;-1824230915;1828417898;-858586361;-2131143323;451137909;-1658044164;-1607494902;229395197;1644559271;-913170603;-591043642;-1834497390;-242615382;1354546056;-946778391;1609915695;518873604;-1690840973;2057877109;-1688203099;-1637813819;-300686490;1716307133;582368017;16279451;-1968188402;-1406331484;-1377214105;-940213565;-1647694165;106683033;812130378;-329099232;283935166;-219160858;-349274550;-353639233;2107497247;-1352891958;-1653916451;1023106033;-1024049140;-942125597;992189017;655656727;-855270386;-1542158563;2118248248;1934408571;636502561;1175765253;-1198044267;-1874484587;1436349846;830190743;1569984408;552733027;-1942441962;-383505172;1708827220;2088012179;-761828955;147883402;-259945857;1335623674;-932818410;-320954279;-233083245;-118640670;604818904;-736243892;-1562570176;-406092000;-728560410;-2043829135;1613262200;-1663569193;-235287516;786393983;-1826266824;794650368;2096669727;-2101424394;1253325669;-1130368106;495013511;-256165017;-60623975;681412328;-474979665;2082011908;1297332002;352189689;728043624;-2021711308;905012859;695354037;-1363529832;-668716302;-1239280826;1318911750;-174301706;-2102644771;379992880;-1013839066;983053264;-1133067704;1893352043;-594743540;1290950950;-245101409;-277055799;-1892484880;-1393313095;-1439449081;877686842;962679332;659991927;-632807369;-1994618423;-963837603;2096027997;-569246060;-394706468;2100319557;1183779103;1243719714;-1623780836;1883125028;-1560361496;-942387038;-1773078058;-395246090;-1233487876;-126204278;834414178;-1267492864;235015201;-533499043;-862203025;1972582134;-532684850;1116930621;1339424521;1579214726;127113378;2119691082;-123209480;-1319071895;-1211770470;1974022748;-1807768298;2147472970;-374689794;342938937;1395565030;-1487175539;-691060522;1263112821;76733745;514293443;1983930206;-905414421;1818483961;-546379958;-1618587072;-372127874;-1276077370;-1407454006;-293692321;-266015292;-163426308;1760692245;-1772362401;25904173;-56034242;-1085068657;-1552924640;-1500938006;-1332476663;-1469718055;-2029170710;2002497548;1958636454;1548605801;-437817457;-1412108348;-708996953;-357706178;904342684;56104728;935654917;1048624775;-1200460846;-1283007840;1369634171;-1728109388;-1337400479;-1977175389;88319002;-1153979944;1137815193;-565101680;-739037800;1704325825;-162429093;-1560248492;1454457995;694412816;-721922577;-714525764;2104206076;1184609395;907883677;-1493645163;866186296;-826649666;1283338296;321292581;-1986270654;580889834;-1896975363;-1071629241;1658072193;-1056567250;-750290832;1775047183;-487350473;884778294;256972289;1976252697;-362586067;-1326476836;-1465492403;1798419427;655223779;317689161;1411240072;-1541695287;1429531860;1181904583;-1747473443;438970299;-603864696;-1408122727;189854186;499887382;-996798093;-1734749450;994103307;1681193247;1510561951;-1704032736;374415157;1848094389;1762804433;-844780066;-915153152;-635135745;624113981;1669479395;-275016707;-24751350;1588434274;421719269;-1311701712;1067241618;1350200691;1526542804;-1637701660;-401582694;795846714;-1985320256;1185673833;1734888680;61737678;-887848152;-747191078;-350040959;-742767825;-1667035582;1924456743;1038363622;-1043502681;1997501342;2068952742;-728928049;-1296126359;2038371621;-1250976477;-2012829451;231594596;-992825498;-826326580;206946207;314159792;-424431258;-1533604912;-1347875374;-423181047;119806188;1627923223;-526999638;-528650070;325510571;607002998;-1470801010;-1468068803;1634110941;6600143;1504740271;-622980181;-1682265266;358957827;-1159393993;149066994;-306690172;1353480526;-970971849;1392739217;-88409634;210164544;457818704;1296464801;374827058;-2002985011;1280513471;1402749963;-1319750648;-1121852407;-1581916817;708490010;-256404132;1626785686;2068680623;2101333955;380226472;1083327335;-1617940642;952036717;173933347;1085929970;1774692867;332343023;-1860614799;793244550;1499450374;254558188;-98662842;-876025756;-1183591985;1586724110;-41525223;-2010655119;1788881039;-892993481;-408556874;-167544676;1262792687;-1413363429;-2084455917;-361200660;1873802883;-790243965;1080999354;-1017712638;-1815856223;-1245002612;-2079224764;-588787747;-1933258026;306619365;450312347;-1267643798;-1168374452;-767109109;667387246;-2044623699;1342440019;1594936995;2124692020;-849062348;1245345023;-325183357;-1594086194;-1056253237;1406491448;-879918898;173836339;-657847950;-1797638935;383100428;-226823918;955922188;-209639916;-302557076;2146585893;1910289807;-400645790;1310299810;1680518061;-1670854341;1435887325;481547053;1362126883;549538253;-581184187;-683172605;-1924795546;60132571;-1335965745;1089243978;-1494541823;-1514020710;1792472676;-1989262010;-798049726;19089172;	};
	mti=624;
       };
       RndSeed @[22] {
	name="RndSeed_23";
	seed{ 1268377862;-2069975356;-1920144864;13799789;-119425787;1981194595;1962483120;-217878564;-632129021;-1680596471;-1825156767;598808346;1945175886;1110059320;-683621237;1433555383;-405888290;-1179023806;986330962;-2069842579;512293855;1374598672;957607371;1403745326;-988086877;-1530875847;-739108255;1062263493;1465695445;-1301285951;1039369997;-239780544;1260324495;1403098151;-1944991456;-1617589107;706870159;66111120;-1775147274;1916940907;-1711366662;-171570431;403991028;1114464623;-800239982;-545089438;683214707;-836666482;456078289;-1827583322;-2126498074;200387623;881511063;1062059208;489325342;2143471885;885308916;1022526845;931762059;400819474;791323222;621548075;-1230426571;301705970;-1956383814;-974872615;-1011565756;24633926;1951251426;1668062164;2014410831;-362269427;-1696371506;-628680507;-1191658392;-170061795;1722378786;-711419108;1108462217;-2145406985;-1386379015;387079768;-1557901046;1676230779;2044574326;176504904;-1745820482;1838602883;-922630238;-1561334818;-253441498;-1653305868;682535018;-672191441;-181143110;1848936284;-2034946799;1511977952;-1243569881;-69246724;620936191;-928472320;584706965;-1407209680;-1080041182;-781323767;1294850140;577446428;-1471581832;1158287247;-198368908;-1695030430;-2078599856;-900314165;1964109402;-1323385510;-1579365332;44248219;-109278051;-1783232307;221331747;473919048;2063796962;960218890;996139374;1316605667;636719528;765681607;36129027;581396912;1735123698;1118410082;-410063981;140705877;680501007;-1976448910;-453507912;360640848;-1016527590;-69704600;218751427;-552833668;955853481;1220625980;-897426527;-2115643013;1063226959;1543793854;959061743;-994763808;244677669;-1049835472;-2072819785;1154361346;-724278071;-1690182067;-383910713;-1636459023;1267948669;-2063214197;1534600365;-222657411;1542435928;126142656;-2079198108;1839858403;-1412688432;804257409;-1167494515;1876015636;1290184691;1988019493;729811936;-2097180659;-1219175015;844128726;-756277218;-1323093726;-1878228398;-690210237;936328180;2139372537;1460363662;1838941474;-1522351481;1527966770;138640345;1322647128;536476377;-858973862;-857038373;-166300937;789311236;733638997;-58182581;1403988267;-1723287466;-559829527;-717105128;-1403144594;-1265842844;-17336313;-17269154;1144299644;839989021;-1256963010;1999046778;88943702;-494500674;-1186560926;-196502862;-1414938200;-1773968666;1019087049;-1288959709;1831420892;1034161161;1013485926;-858065896;264356482;303517734;-702482981;-143026410;-1301948120;-1953748878;1795155217;737865778;1307149981;879728752;-743762667;-329115500;570262394;615983626;-536284965;-497902046;-1071706896;1221797835;169856415;-1225836631;-623347098;631986121;-1055706050;-1657585149;-1382902696;-223432074;2040530462;-566099407;714449073;-253878323;-1387672769;646698251;-2122649262;970261900;131538233;252774779;908628358;-1769201442;417510349;-1975212573;-1090397240;-1797205578;-1193799415;-1448436387;-1608454526;1377868168;-674896618;675192659;-1019394102;-1793661863;-1262892044;388898588;2107392795;-62561198;-1807290874;-1485304666;-644038201;-1159309464;495859687;-1067995591;174770169;-990632107;-1195734009;-1498747885;-633652016;2058414939;2100692383;514049652;419258595;-553273937;-1825719811;864868797;1732447668;1539131021;2051129953;1033310470;601878149;-1616820063;183886968;-913351550;832014608;680699004;1262830105;-1319506778;-1063640605;-435143024;803888176;404492322;1352831133;-1815442752;1450742207;-943575252;-651835966;-1224585379;-1342429004;1161787144;1442629832;2108541321;2032290789;1751184946;1365732958;-1871158341;854350398;859621816;-487125285;1246917756;1581898646;1858630361;1047718015;289059427;-632005288;985368881;-188786016;896859803;229009268;875554322;461596777;1419207613;1849554557;-1262576578;-428621569;1960181952;270308986;1025812856;7345583;-1818479005;1046634142;2143544240;586780464;-2073678004;516122915;1515271981;717574587;-1733078233;406952954;1781617924;-1155974820;-1975979654;1006140861;-796999177;1434065579;-2078834566;-733091647;-1449482252;228649849;-87054039;1838889215;112159652;-1521730269;-1682847627;1085065060;178436427;-60211446;1837150465;-377563531;-1526086652;988515797;178844545;-1283515298;1842834886;-1808871426;-2086016024;212881103;-681254871;-806818799;-1179072870;-1235897479;-1724275703;1825873114;1708136171;-540916265;-1747975638;626017103;-673655117;1379984633;283840354;1000768821;-1502679947;-1315964032;-738931240;-1497601034;-2117587756;-707643393;-1278610434;-31252481;1071479808;498986389;-1155106209;37031240;116480;1697809561;-1240749678;1934096235;2058508398;414796904;-506016090;1356387768;-738503523;448983543;-1272469739;-1850655562;-313177944;1731604508;1156284951;270670421;836690481;-816678914;-240468613;-2046166525;2059480337;-893101827;-1442247708;1211746669;2106279244;1898155538;-1869333967;2030387922;1738230259;410300463;-1113871551;266759718;-1578775370;1663178941;1490313190;-965904674;1507273709;1540989401;1096905718;1380118834;1675785695;2055098455;1731049904;-314507880;-1248263445;-397682510;-709216101;-1494635073;1683403353;-66226559;-1152821996;-1106159239;-1676139949;-1676024638;-1293811314;-1596814837;-1322366883;-1164548532;-835183464;-1884340742;-904581972;470632928;-1293482186;1517071707;-1961127846;-1266217839;-620256551;-333452323;1491328626;-1659416516;-841623468;1149627186;-1508304897;1504173490;-926661503;-173630675;-1173825270;1893394957;603112610;-764393519;-1418085950;-542242135;1711616252;439270076;-1048425960;2093789588;2128465591;807138749;1706367617;-987629967;-932757780;-571294402;1622495237;259438473;1926085635;1624654017;-1569829448;-1254934949;-306637801;-766533153;-737306168;-919055852;2043130897;-1751737265;707518817;882103878;1072234912;1949058595;-907157650;258309382;1444711268;-1415639584;-1923322318;2143234809;-2127385118;1496021867;-1961268002;1179496665;1177706310;902666258;16556842;-987505757;2030979122;-458569422;-916219031;-1168241433;-767253137;-946859597;-1860293496;-696029557;1572431298;1039106826;1776619278;433519112;1943465798;952789026;-360494710;-1763355090;785157502;-186760487;1500318758;1821879432;-2031393485;-1537398916;-279640866;1244672602;-730623215;1221306949;240423680;-284622547;-1871636652;1836399901;1756961340;-742588094;604260823;974533382;-1187358318;-2132580347;1486146553;-945540337;409833972;872557437;-1702097013;642872392;1129671332;-850894250;1182878407;-1787791267;-2073864517;-810993090;-778460845;304117459;-903164285;1357249221;-1991584358;771530559;1151110435;221831859;1604861417;1473877715;-766712538;-17156378;-1671743577;-1572387992;-1189653214;1453504497;-1976433662;1709151827;-1931070802;-1163654095;1185226101;-99371749;1230523600;1990797774;-792311803;-84958535;699842494;-1477945773;487745875;937818910;-1494146250;-815416859;1625845792;-1667438488;-718377418;1405016654;2034854545;-840032969;1761500140;185015274;-1557905476;-1449404831;-252996997;-1080359995;-1684078863;-120609970;	};
	mti=624;
       };
       RndSeed @[23] {
	name="RndSeed_24";
	seed{ 1268377863;412558687;-1338337923;-1953041890;1222803728;-1410988870;-1420929890;-1586307693;1708852029;-892902731;796350424;520110147;1666332027;476275503;-309114727;-2127819055;-166345649;716643853;665767987;1791520562;-218420685;-1376037627;1809468121;-1961550001;-2077192583;-322631264;-480638871;-739505171;-1442508030;1345027869;838017578;2036004017;2124724624;1564659542;-340632459;-1072455503;-979654562;437137878;-2061553772;-891351979;99869718;1659028183;-107649896;-1895521198;653501372;-1964821159;1018085397;-1840249480;718697298;1771069835;-856730204;-1160500714;-691712488;-647937060;-1077207503;-1246677674;1774190172;-1469440022;-62275902;-1552643232;54554598;-610780165;1592746262;-351822510;1181248053;2138290885;49779606;-87916431;-1600671938;-1555874063;-1562582747;296989610;-927867814;-276393882;304088355;827769370;735084174;987622483;2001446925;907786507;-498867033;178321669;1105783883;1432277893;-432597144;389120140;942056338;-440030479;873853906;-1897753549;1510584495;-232664319;1045582374;-344277157;-214198762;-798592088;1509893591;1573090255;-1447563608;-1561320587;-134632105;-1601218935;262834237;-421829256;674946287;1040060852;-660451218;-2079387540;79583698;-907488697;-1321379518;850884271;1135508091;-457728877;-2027301566;-1956617549;-256988855;1183278247;282168308;-1975661637;980836725;1896812706;-481440823;440828205;-1657992131;135040088;-629770442;888890728;374057608;1406472233;1775028298;1929914650;1140108075;625410583;2009277081;-1079509377;904088793;-1933806810;-1242320450;1600568247;-2013891238;-563059643;770377260;-1623524373;-1837886339;171773356;-1508150930;-495285201;1418779120;-2090928726;1032180702;1463837997;918583028;-901545251;700280880;706147211;808483187;-901548548;-1262746311;-174611482;583808761;-1865682466;-1310119826;-1567441089;-1561847627;1540141016;483099203;416628758;-200798378;-558527950;2011873023;1355106529;-269115124;-628977000;2083900117;-963610029;-1062923712;465244192;-45187758;-1975596376;1742794694;-561964744;1946978301;-2053405917;1903060413;-316424219;-132723592;-1882619838;300014076;833019177;995046123;1357634166;1379393715;-1809258245;-1012913153;1772042031;-895851542;-1782571854;-319454666;-889340752;-1929626009;-307516510;1090183247;-282706543;403139942;2051260427;-154788160;2113240766;501758251;-949775928;-1814353687;-523638646;-455536671;978401023;-1921897871;-1813558474;535527516;-232857307;1018571480;-1129021421;-1204379503;1367410140;-1726638577;-1993594624;-1217642326;-253269207;-1983069580;185851761;-914251399;-1041956857;-1133042054;-874486209;-1578995052;2009299991;-1977500776;-1511362899;-981314825;-545566927;1801847208;1304500636;-215015199;1751051291;1719865652;1784555484;-1383727067;-1593577640;622500216;-1310210737;438439257;1912792598;-2031610099;1666261222;-202466529;-68604151;-1368266256;1187106681;-289008808;536762088;-63802742;1827766800;-195401031;769631847;-904214871;931617817;1767880677;57184765;139263707;-692010894;-803248479;280899831;-302087807;2068163417;-1164528952;1588110531;-234695780;-608791090;-103886859;-1281576157;-1969859045;135420404;1728909916;1669792970;1264748593;1913744395;2146892558;-634055416;-1233047179;-1296944110;177937264;821085265;-1304179177;480021612;2010985408;-2126596790;-507965810;-123259960;-1556344001;-810926790;-1048794713;-529288481;744574456;1457880069;738464450;-420267591;1408258450;-126035152;1559611217;1741779907;249790142;1036431403;-1462270675;1805038530;1191004199;-1902916041;1495120163;2025536933;-1252518160;1755746487;706903820;-1628599045;-1158094723;-1412593060;934667864;-1083115013;-551034495;1694010255;-1851781556;1743741965;-363796988;-80379636;-1718226123;-1311611650;-755977032;-557030892;-1446902943;-1458548130;-2146976868;1875285159;2003795152;1585387720;-974693983;-1364455361;742264423;-2097033478;-264150736;-214653576;-1968103967;370427626;945370542;-659665661;-554081698;1519555856;1829890581;1960972101;842492726;783758257;-1899487431;742909612;-779874494;738905868;-496689884;-1366335284;654405808;2108663515;512589678;-1425594925;-2117745181;1595112500;-1315217575;936465240;1922562858;-1920131990;62381692;1124017249;2009119574;917273034;1807689770;202825072;1335250602;554929650;2102100982;-1473560336;1567630072;-524022084;-1804138021;405472542;1518867544;-1526552160;-2109562770;-15263711;16038128;-1508546505;816413553;-234607074;924760059;460384914;1125297958;-1272186128;-1824291576;387700865;1549825397;924150869;79707163;-926995654;-1138978799;1961100308;481811167;-926698862;-38007347;121024991;249398677;-319458716;1809859391;-1842825453;-1585490861;1435672212;1808355177;1304624553;-683344662;267352720;-1945998220;1211757107;953635168;1629453447;448387206;1943807111;219160712;209559379;-2028451733;-1842101222;-553306330;-443248568;-1428024761;47916010;437479172;753191495;-1569403209;-1649972194;-1867733822;-108543625;1396861052;-91676662;-427985337;-5894513;807447288;-987091563;-484228116;734901770;-1864749646;1750546481;-1597317966;1223902003;-447920514;2074129942;1987782617;-573484545;374945332;-90163123;293205648;-1476306789;-115288279;2000707423;-1023348764;1930577650;-1563227473;1958006034;1821971793;436025955;568067555;136957796;1949784138;-2044528018;214211188;1768228253;-1675643802;-1362644657;667298365;-1586212626;-1197065478;200015287;585304595;-1904466336;204707980;-1462624993;340067157;-514470034;2060922087;-533344603;-279224474;-1931693630;-1972247894;-1546496461;963853377;1736216722;1971893997;424179979;-1247041977;815171626;728249476;64183815;635886007;-1499998680;-1901462904;1374270569;832034560;-1275669255;-818324479;-806592315;-1250548198;-56106635;2015239052;-1116056160;-393904918;-488506642;1256969859;2053453133;-125324032;-461502668;-32093767;-1470782871;-761177793;856511157;-461930381;-638476741;1032283684;-1223650751;1537511805;-2077441029;-2108124083;913951804;-1845644866;-1990673089;-1779216347;66355320;-1954616978;-437197389;717607048;-799273023;-1089533020;-944410471;-267527970;1217386062;-895953335;-855627951;-1588041862;1804078201;849421690;-1258810043;-1305188825;-1067902018;288037047;-1220824742;903680480;-1947668599;199550721;-302666096;643796267;1181464356;193269959;720052146;-1198013078;1381862457;75123786;-2061912731;-1358318889;-10842818;-856006585;774398219;489303695;-1367873628;1573928120;683014200;-618076076;1775975312;-480896141;-977812113;1343992284;-2044234894;1919384946;1998326690;364893331;292981572;-752330726;-625007324;274500011;-505686592;-579488967;-1158692307;852215255;874913568;1402104302;217953434;-839602926;429744902;-1841280592;917198733;609157621;82502910;271206540;223710611;-292976553;-528236675;2045181200;-855182576;1163400155;22380895;-426712103;-1274048159;480729455;585871916;1485494718;-980934210;1894676213;1550419113;1849114798;-1506595214;2065384600;-1784220730;-1112665410;-791149929;-2136589616;-355624633;-1963008446;1329459631;	};
	mti=624;
       };
       RndSeed @[24] {
	name="RndSeed_25";
	seed{ 1268377864;1554891150;738976877;-118852604;-859273785;1930340953;106581182;367260925;267783385;-555601242;-86292445;-889416533;835489364;1915427633;450783742;-1368735931;527136275;639287440;1569392866;1372650658;-887363741;-462116619;-148091100;-655877766;-2021470763;-878426900;-147056283;1847040857;1893360084;-313092570;-1333392969;438664;-765603128;-1671443144;188088836;293531575;-1755413929;-1201936210;-663037950;2048311692;527028681;-1903995530;-927479058;345433260;-1331936248;1649816095;-207236092;-1625987598;1083090912;1397138678;1609057445;869980391;-172215721;2054868825;-690887186;1515621304;-755359435;-923860857;-517089202;-973960292;-893244169;324423809;1906953251;-1557546071;-91058761;429079621;-1539656581;822932736;-63329980;-213399480;-2087769891;-1233946814;153046152;-788137487;-1749279036;-384165271;1616193054;-1311268472;843814336;1664472335;-1365013290;-1229978635;-1789804603;-615307050;41687389;1377027846;1551975705;-1331553585;-1478014919;-511438176;-309750359;671483501;751558237;385449998;-27720732;-1954141822;-89923616;2024591344;1930232695;993428465;-793442439;-457032313;-1842747014;448943295;1933485763;1715707123;-364352028;-1498088562;-1864815960;1076416383;-74036444;848594386;-1326174646;554879705;854010127;1033189982;1756255626;-1822678196;1365290044;1224448392;1865213061;-761475955;-2127121792;-106299451;6086554;-310140353;-429580758;573036460;1104618332;1331214642;1568824481;-1335874653;716267529;815707410;-1459481952;-1539830671;-1544850201;2075569122;138628121;-420124824;1796673731;-446730473;178554738;193163913;-790199907;-106909209;-1999293562;759887783;917312631;-176307576;495395949;-204819304;-35834689;1252158149;-124582930;-694853092;1565216215;-2076754933;690651435;-1458439786;-1783387132;1931220223;742536920;-2057225253;-682443199;1195664047;-779350708;1351190482;448233959;-1069817908;1426986069;364575183;-887269801;-1575877679;-1276350995;1487226618;1091458231;1861669503;-948405656;-1460105238;2121002812;-364377914;1417667439;1730976029;-1840487228;-478431017;1938120798;-1429545674;-287958464;-899991508;72831561;2105247884;-710191775;-1426578837;2066662703;1832610281;-1451888308;2060251787;-93484232;525828622;-1467888050;-1498345275;-280551859;845722513;6189569;978093106;-1471354232;832725825;-1628048779;722163908;727116326;195213265;-565682359;1083323143;-1540990924;2043655205;1398101772;1771851258;1447237601;392121403;838969123;-217207636;-1030240023;919437105;-1099208651;1056345492;404099142;1230234241;63888740;1926487385;-596480866;1771036632;1333621381;1348653821;-1362486698;1176459279;-1059111822;-494775678;-921135405;1595461887;-1416338650;9789989;2004387467;-2007830683;715625367;1060768392;-1421807458;-1247384957;254676701;1194009386;1141105649;1712610987;2069386254;-1891749400;-509219760;1278453950;-420951205;1578259129;-830006374;373409120;-533512220;347854376;1859053262;349099954;-454599614;292368302;73002672;-1626907525;1102265801;-398497547;921309212;767252507;432879287;-1287682492;-355110736;2020229810;-1232921421;-1595143190;47700894;1292055661;407206836;344531741;-1347395445;603875368;305430756;-34808047;-1554864840;-1499645183;-1045306289;-328220899;-147884552;163176490;678554550;638608883;413943045;-334894816;-1851672841;1550404818;-311608471;2026515453;1563506584;744149386;213747360;-1573798321;1284655761;1234074625;-1449988814;1144407331;810973598;1418037899;-778468440;-1766558034;-680993004;-379300788;1742506853;5735343;1707646023;1370562267;-732309696;41535918;314355942;1030152703;176267741;768549492;-850088696;-1303369316;188218012;209149139;1502186375;1201193767;1572754760;-121980904;2062423795;-1563127609;280595463;-1386938606;-1736953184;888319291;1661987993;856535371;-178972949;-735300899;1757077740;1989448664;-492013835;-1032939929;819518158;910725793;796984289;-803147230;1232744803;324071177;1142497517;-956544387;-1227304168;-365284187;128818402;-1834887025;-560404985;-1618549509;1871747237;-1036517859;837243200;-1283567701;-485105639;1699042735;-822678252;-68298110;340606805;-256804102;1503905455;-642612711;-238862410;-116195106;-1308582489;2048819344;818762669;1753520570;1253227329;1031348667;-470523069;1867016637;-599042902;-693774036;888264715;-598400808;-970446103;-1858721323;530813527;-1187361576;1494678920;780097940;1648004332;-318803958;268109335;-2098415714;720039448;1254279429;-343378910;199392148;-1249315084;1944917663;-470385688;1610393674;1389070891;375651879;-1081661959;-779988834;-707210103;1880077835;-790352500;424706566;679642106;-403382977;-358324662;630746476;-173672132;563547772;-860023666;41128516;-2135221640;475184583;-1733992407;2128803230;1347813475;315660883;1260932969;1161690547;-2045289754;320266657;-567464141;1617186719;-1954481914;-1908317115;-798519115;1648852865;-2047815884;694134787;1606149605;-865814357;1999029248;-1992892642;1775240134;529006142;1399356978;-886565156;1327980217;-2092902313;1118689353;-1588797911;-43668551;-1944499163;1489824807;809730755;49410997;-1428945616;416010370;1720506131;1311210980;87505444;1675834880;-426649294;-1591940317;1680109268;-444417831;-2022336045;-1049785785;1729229479;-277245102;-1107002934;292033982;1373979597;-347083436;-840092628;1892400997;-175437745;-1856048168;-840179489;1869182122;-1195930538;1624199940;-2040762406;-1455769062;1751795035;-293566362;947314366;592154844;593093811;-759167097;-832267011;-1196957664;706453845;-1416616587;237795552;844862030;-946964299;248055742;-928596505;-962334490;1289460044;-2067221931;1593830728;-1175211837;134416156;-909915132;-358596676;-1517330603;1526148686;-1015640537;-1563207119;1410130717;342071307;603316567;-1560643500;-376339984;379081186;51921454;1799273515;-1080510312;1447117001;417437936;-93730631;1564327276;-38399220;1651609079;1165994523;1545341008;-1111907580;799377774;-1931667337;-326875845;-1648211669;-2098409407;1488390020;1138697871;680408605;-774119287;-760253813;-2059732542;-198423845;896475476;-419816383;-1751483864;-1971802447;-2113947201;-193630542;-43489545;-1711983513;25869053;-1296552714;1029984874;-510312455;385157578;-1385170725;-1287106361;-1071362844;-909445041;369665065;442611547;455740438;-727151394;804051554;-100754212;1098923310;-123777857;-1072831391;-882798880;522837190;1142166102;-836973172;-1371037019;-18903778;1216492461;1119449369;-933791562;-2096202072;-1524173486;1993775825;-1221302702;-560123949;21638996;-253451671;-1912287208;1140459145;752573936;-379485703;1205670892;828224460;-1715200568;-1495868161;-1779198177;-490461760;-1142078657;-1337840030;-1181897166;174943043;-563663165;1039807509;-1574384737;-1671799736;-921696886;-653819290;-780041933;-1098208693;-707444183;78747375;-664832599;1665624177;2099259024;-867577194;-1192963029;-2131712112;-711114498;-239269066;889703247;-83263598;-923078755;-896656961;-101071466;-1923435724;-47539014;79550570;446504512;1760375215;	};
	mti=624;
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="NTrain";
      var_type=T_Int;
      int_val=-1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Number of training items per category; if -1, then all the rest after test items selected";
     };
     ProgVar @[1] {
      name="NTest";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Number of test items per category; if NTrain is != -1, then this can be -1 to select remainder of other items";
     };
     ProgVar @[2] {
      name="split_on_indivs";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="whether to do split based on individual objects (which may have multiple image files or rows in ObjectImageData file) or on individual image files (rows)";
     };
     ProgVar @[3] {
      name="new_seed";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="from lesson -- whether to use a new random seed for the split or use existing seed list";
     };
     ProgVar @[4] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="required for the batch counter";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cur_id";
      var_type=T_Int;
      int_val=4;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="Loop variable for selecting OIAs in one object category";
     };
     ProgVar @[1] {
      name="one_object";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[7]$310$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="Local tables are described in objs";
     };
     ProgVar @[2] {
      name="test_one_object";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[10]$311$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="train_one_object";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[9]$312$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="one_object_oid_id";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[8]$313$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="TrainItems";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$27$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Final Training Set output table in main data section";
     };
     ProgVar @[6] {
      name="TestItems";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$28$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Final Test Set output table in main data section";
     };
     ProgVar @[7] {
      name="ObjectImageData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$29$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[8] {
      name="one_object_indiv";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[11]$314$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="one obj from indiv table";
     };
     ProgVar @[9] {
      name="Individual";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$256$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[10] {
      name="CatSubCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$255$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[11] {
      name="train_one_obj_indiv";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[12]$315$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[12] {
      name="test_one_obj_indiv";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[13]$316$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[13] {
      name="train_indiv_join";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[14]$317$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[14] {
      name="test_indiv_join";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[15]$318$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[15] {
      name="test_indiv_oid_id";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[16]$319$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[16] {
      name="train_indiv_oid_id";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[17]$320$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[17] {
      name="train_only";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[0]$321$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[18] {
      name="test_only";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[2]$322$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[19] {
      name="divide_rest";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[4]$323$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[20] {
      name="divide_rest_indiv";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[6]$324$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[21] {
      name="divide_rest_iid_only";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[5]$325$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[22] {
      name="train_only_oid_id";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[1]$326$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[23] {
      name="test_only_oid_id";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][2].objs[3]$327$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[24] {
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      object_val=.projects[0].programs.gp[1][2].objs[18]$328$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     PrintExpr @[0] {
      desc=;
      flags=;
      expr {
       expr="\"running Split_Items\"";
      };
     };
     If @[1] {
      desc=;
      flags=;
      cond {
       expr="!new_seed";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[1][2].vars[24]$329$;
	method=RndSeed_List::UseSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="idx";
	  required=0;
	  def_val=;
	  expr {
	   expr="network.batch";
	  };
	 };
	};
       };
      };
     };
     MethodCall @[2] {
      desc="Empty the Test items";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][2].vars[6]$330$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="Empty the Training items";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][2].vars[5]$331$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     DataSelectRowsProg @[4] {
      desc=;
      flags=;
      src_data_var=.projects[0].programs.gp[1][2].vars[7]$332$;
      dest_data_var=.projects[0].programs.gp[1][2].vars[17]$333$;
      select_spec {
       name="select_spec";
       ops {
	name=;
	el_typ=DataSelectEl;
	el_def=0;
	DataSelectEl @[0] {
	 col_name="ctrlflags";
	 rel=EQUAL;
	 use_var=0;
	 cmp 9 0="TRAIN";
	 var=NULL;
	};
       };
       comb_op=AND;
      };
     };
     DataSelectRowsProg @[5] {
      desc=;
      flags=;
      src_data_var=$332$;
      dest_data_var=.projects[0].programs.gp[1][2].vars[18]$334$;
      select_spec {
       name="select_spec";
       ops {
	name=;
	el_typ=DataSelectEl;
	el_def=0;
	DataSelectEl @[0] {
	 col_name="ctrlflags";
	 rel=EQUAL;
	 use_var=0;
	 cmp 9 0="TEST";
	 var=NULL;
	};
       };
       comb_op=AND;
      };
     };
     DataSelectRowsProg @[6] {
      desc=;
      flags=;
      src_data_var=$332$;
      dest_data_var=.projects[0].programs.gp[1][2].vars[19]$335$;
      select_spec {
       name="select_spec";
       ops {
	name=;
	el_typ=DataSelectEl;
	el_def=0;
	DataSelectEl @[0] {
	 col_name="ctrlflags";
	 rel=NOTEQUAL;
	 use_var=0;
	 cmp 9 0="TRAIN";
	 var=NULL;
	};
	DataSelectEl @[1] {
	 col_name="ctrlflags";
	 rel=NOTEQUAL;
	 use_var=0;
	 cmp 9 0="TEST";
	 var=NULL;
	};
       };
       comb_op=AND;
      };
     };
     IfElse @[7] {
      desc=;
      flags=;
      cond {
       expr="split_on_indivs";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       DataGroupProg @[0] {
	desc=;
	flags=;
	src_data_var=$335$;
	dest_data_var=.projects[0].programs.gp[1][2].vars[21]$336$;
	group_spec {
	 name="group_spec";
	 ops {
	  name=;
	  el_typ=DataGroupEl;
	  el_def=0;
	  DataGroupEl @[0] {
	   col_name="individual_id";
	   agg {name="Aggregate": op=GROUP: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	  };
	 };
	 append_agg_name=0;
	};
       };
       DataJoinProg @[1] {
	desc=;
	flags=;
	src_data_var=.projects[0].programs.gp[1][2].vars[9]$337$;
	dest_data_var=.projects[0].programs.gp[1][2].vars[20]$338$;
	src_b_data_var=$336$;
	join_spec {
	 name="join_spec";
	 col_a {
	  col_name="individual_id";
	 };
	 col_b {
	  col_name="individual_id";
	 };
	 type=INNER;
	 nomatch_warn=0;
	};
       };
       DataCalcLoop @[2] {
	desc="Loop through the object list";
	flags=;
	src_data_var=.projects[0].programs.gp[1][2].vars[10]$339$;
	dest_data_var=NULL;
	src_cols {
	 name="src_cols";
	 el_typ=DataOpEl;
	 el_def=0;
	 DataOpEl @[0] {
	  col_name="catsubcat_id";
	 };
	};
	dest_cols {
	 name="dest_cols";
	 el_typ=DataOpEl;
	 el_def=0;
	};
	loop_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc="Set the current object id from the loop var";
	  flags=;
	  result_var=.projects[0].programs.gp[1][2].vars[0]$340$;
	  expr {
	   expr="s_catsubcat_id";
	  };
	 };
	 DataSelectRowsProg @[1] {
	  desc="Get the oia rows that match the current object";
	  flags=;
	  src_data_var=$338$;
	  dest_data_var=.projects[0].programs.gp[1][2].vars[8]$341$;
	  select_spec {
	   name="select_spec";
	   ops {
	    name=;
	    el_typ=DataSelectEl;
	    el_def=0;
	    DataSelectEl @[0] {
	     col_name="catsubcat_id";
	     rel=EQUAL;
	     use_var=1;
	     cmp 2 0=4;
	     var=$340$;
	    };
	   };
	   comb_op=AND;
	  };
	 };
	 IfElse @[2] {
	  desc="if nothing there, don't bother to split (and avoid warnings!)";
	  flags=;
	  cond {
	   expr="one_object_indiv.rows == 0";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   ResetDataRows @[0] {
	    desc=;
	    flags=;
	    data_var=.projects[0].programs.gp[1][2].vars[12]$342$;
	   };
	   ResetDataRows @[1] {
	    desc=;
	    flags=;
	    data_var=.projects[0].programs.gp[1][2].vars[11]$343$;
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   DataProcCall @[0] {
	    desc="Split the items in the category into two sets";
	    flags=;
	    result_var=NULL;
	    object_type=taDataProc;
	    method=taDataProc::SplitRowsNPermuted;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="src";
	      required=1;
	      def_val=;
	      expr {
	       expr="one_object_indiv";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest_1";
	      required=1;
	      def_val=;
	      expr {
	       expr="test_one_obj_indiv";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=int;
	      type="int";
	      name="n1";
	      required=1;
	      def_val=;
	      expr {
	       expr="NTest";
	      };
	     };
	     ProgArg @[3] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest_2";
	      required=1;
	      def_val=;
	      expr {
	       expr="train_one_obj_indiv";
	      };
	     };
	     ProgArg @[4] {
	      arg_type=int;
	      type="int";
	      name="n2";
	      required=0;
	      def_val="-1";
	      expr {
	       expr="NTrain";
	      };
	     };
	     ProgArg @[5] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest_3";
	      required=0;
	      def_val="NULL";
	      expr {
	       expr="NULL";
	      };
	     };
	     ProgArg @[6] {
	      arg_type=int;
	      type="int";
	      name="n3";
	      required=0;
	      def_val="0";
	      expr {
	       expr="0";
	      };
	     };
	     ProgArg @[7] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest_4";
	      required=0;
	      def_val="NULL";
	      expr {
	       expr="NULL";
	      };
	     };
	     ProgArg @[8] {
	      arg_type=int;
	      type="int";
	      name="n4";
	      required=0;
	      def_val="0";
	      expr {
	       expr="0";
	      };
	     };
	     ProgArg @[9] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest_5";
	      required=0;
	      def_val="NULL";
	      expr {
	       expr="NULL";
	      };
	     };
	     ProgArg @[10] {
	      arg_type=int;
	      type="int";
	      name="n5";
	      required=0;
	      def_val="0";
	      expr {
	       expr="0";
	      };
	     };
	     ProgArg @[11] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest_6";
	      required=0;
	      def_val="NULL";
	      expr {
	       expr="NULL";
	      };
	     };
	     ProgArg @[12] {
	      arg_type=int;
	      type="int";
	      name="n6";
	      required=0;
	      def_val="0";
	      expr {
	       expr="0";
	      };
	     };
	    };
	   };
	  };
	 };
	 DataJoinProg @[3] {
	  desc="use join to get all ObjImgData rows for those individuals";
	  flags=;
	  src_data_var=$343$;
	  dest_data_var=.projects[0].programs.gp[1][2].vars[13]$344$;
	  src_b_data_var=$332$;
	  join_spec {
	   name="join_spec";
	   col_a {
	    col_name="individual_id";
	   };
	   col_b {
	    col_name="individual_id";
	   };
	   type=INNER;
	   nomatch_warn=1;
	  };
	 };
	 DataSelectColsProg @[4] {
	  desc="Get rid of all but the oid_id column";
	  flags=;
	  src_data_var=$344$;
	  dest_data_var=.projects[0].programs.gp[1][2].vars[16]$345$;
	  select_spec {
	   name="select_spec";
	   el_typ=DataOpEl;
	   el_def=0;
	   DataOpEl @[0] {
	    col_name="oid_id";
	   };
	  };
	 };
	 DataJoinProg @[5] {
	  desc="use join to get all ObjImgData rows for those individuals";
	  flags=;
	  src_data_var=$342$;
	  dest_data_var=.projects[0].programs.gp[1][2].vars[14]$346$;
	  src_b_data_var=$332$;
	  join_spec {
	   name="join_spec";
	   col_a {
	    col_name="individual_id";
	   };
	   col_b {
	    col_name="individual_id";
	   };
	   type=INNER;
	   nomatch_warn=1;
	  };
	 };
	 DataSelectColsProg @[6] {
	  desc="Get rid of all but the oid_id column";
	  flags=;
	  src_data_var=$346$;
	  dest_data_var=.projects[0].programs.gp[1][2].vars[15]$347$;
	  select_spec {
	   name="select_spec";
	   el_typ=DataOpEl;
	   el_def=0;
	   DataOpEl @[0] {
	    col_name="oid_id";
	   };
	  };
	 };
	 DataProcCall @[7] {
	  desc="Copy the training set to the training table";
	  flags=;
	  result_var=NULL;
	  object_type=taDataProc;
	  method=taDataProc::AppendRows;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="dest";
	    required=0;
	    def_val=;
	    expr {
	     expr="TrainItems";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="src";
	    required=0;
	    def_val=;
	    expr {
	     expr="train_indiv_oid_id";
	    };
	   };
	  };
	 };
	 DataProcCall @[8] {
	  desc="Copy the test set to the test table";
	  flags=;
	  result_var=NULL;
	  object_type=taDataProc;
	  method=taDataProc::AppendRows;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="dest";
	    required=0;
	    def_val=;
	    expr {
	     expr="TestItems";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="src";
	    required=0;
	    def_val=;
	    expr {
	     expr="test_indiv_oid_id";
	    };
	   };
	  };
	 };
	};
	src_col_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @[0] {
	  name="s_catsubcat_id";
	  var_type=T_Int;
	  int_val=0;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	};
	dest_col_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       DataCalcLoop @[0] {
	desc="Loop through the object list";
	flags=;
	src_data_var=$339$;
	dest_data_var=NULL;
	src_cols {
	 name="src_cols";
	 el_typ=DataOpEl;
	 el_def=0;
	 DataOpEl @[0] {
	  col_name="catsubcat_id";
	 };
	};
	dest_cols {
	 name="dest_cols";
	 el_typ=DataOpEl;
	 el_def=0;
	};
	loop_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc="Set the current object id from the loop var";
	  flags=;
	  result_var=$340$;
	  expr {
	   expr="s_catsubcat_id";
	  };
	 };
	 DataSelectRowsProg @[1] {
	  desc="Get the oia rows that match the current object";
	  flags=;
	  src_data_var=$335$;
	  dest_data_var=.projects[0].programs.gp[1][2].vars[1]$348$;
	  select_spec {
	   name="select_spec";
	   ops {
	    name=;
	    el_typ=DataSelectEl;
	    el_def=0;
	    DataSelectEl @[0] {
	     col_name="catsubcat_id";
	     rel=EQUAL;
	     use_var=1;
	     cmp 2 0=35;
	     var=$340$;
	    };
	   };
	   comb_op=AND;
	  };
	 };
	 DataSelectColsProg @[2] {
	  desc="Get rid of all but the oid_id column";
	  flags=;
	  src_data_var=$348$;
	  dest_data_var=.projects[0].programs.gp[1][2].vars[4]$349$;
	  select_spec {
	   name="select_spec";
	   el_typ=DataOpEl;
	   el_def=0;
	   DataOpEl @[0] {
	    col_name="oid_id";
	   };
	  };
	 };
	 IfElse @[3] {
	  desc=;
	  flags=;
	  cond {
	   expr="one_object_oid_id.rows == 0";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   ResetDataRows @[0] {
	    desc=;
	    flags=;
	    data_var=.projects[0].programs.gp[1][2].vars[2]$350$;
	   };
	   ResetDataRows @[1] {
	    desc=;
	    flags=;
	    data_var=.projects[0].programs.gp[1][2].vars[3]$351$;
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   DataProcCall @[0] {
	    desc="Split the items in the category into two sets";
	    flags=;
	    result_var=NULL;
	    object_type=taDataProc;
	    method=taDataProc::SplitRowsNPermuted;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="src";
	      required=1;
	      def_val=;
	      expr {
	       expr="one_object_oid_id";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest_1";
	      required=1;
	      def_val=;
	      expr {
	       expr="test_one_object";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=int;
	      type="int";
	      name="n1";
	      required=1;
	      def_val=;
	      expr {
	       expr="NTest";
	      };
	     };
	     ProgArg @[3] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest_2";
	      required=1;
	      def_val=;
	      expr {
	       expr="train_one_object";
	      };
	     };
	     ProgArg @[4] {
	      arg_type=int;
	      type="int";
	      name="n2";
	      required=0;
	      def_val="-1";
	      expr {
	       expr="NTrain";
	      };
	     };
	     ProgArg @[5] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest_3";
	      required=0;
	      def_val="NULL";
	      expr {
	       expr="NULL";
	      };
	     };
	     ProgArg @[6] {
	      arg_type=int;
	      type="int";
	      name="n3";
	      required=0;
	      def_val="0";
	      expr {
	       expr="0";
	      };
	     };
	     ProgArg @[7] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest_4";
	      required=0;
	      def_val="NULL";
	      expr {
	       expr="NULL";
	      };
	     };
	     ProgArg @[8] {
	      arg_type=int;
	      type="int";
	      name="n4";
	      required=0;
	      def_val="0";
	      expr {
	       expr="0";
	      };
	     };
	     ProgArg @[9] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest_5";
	      required=0;
	      def_val="NULL";
	      expr {
	       expr="NULL";
	      };
	     };
	     ProgArg @[10] {
	      arg_type=int;
	      type="int";
	      name="n5";
	      required=0;
	      def_val="0";
	      expr {
	       expr="0";
	      };
	     };
	     ProgArg @[11] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest_6";
	      required=0;
	      def_val="NULL";
	      expr {
	       expr="NULL";
	      };
	     };
	     ProgArg @[12] {
	      arg_type=int;
	      type="int";
	      name="n6";
	      required=0;
	      def_val="0";
	      expr {
	       expr="0";
	      };
	     };
	    };
	   };
	  };
	 };
	 DataProcCall @[4] {
	  desc="Copy the training set to the training table";
	  flags=;
	  result_var=NULL;
	  object_type=taDataProc;
	  method=taDataProc::AppendRows;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="dest";
	    required=0;
	    def_val=;
	    expr {
	     expr="TrainItems";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="src";
	    required=0;
	    def_val=;
	    expr {
	     expr="train_one_object";
	    };
	   };
	  };
	 };
	 DataProcCall @[5] {
	  desc="Copy the test set to the test table";
	  flags=;
	  result_var=NULL;
	  object_type=taDataProc;
	  method=taDataProc::AppendRows;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="dest";
	    required=0;
	    def_val=;
	    expr {
	     expr="TestItems";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="src";
	    required=0;
	    def_val=;
	    expr {
	     expr="test_one_object";
	    };
	   };
	  };
	 };
	};
	src_col_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @[0] {
	  name="s_catsubcat_id";
	  var_type=T_Int;
	  int_val=0;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR;
	  reference=0;
	  desc=;
	 };
	};
	dest_col_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
      };
     };
     DataSelectColsProg @[8] {
      desc=;
      flags=;
      src_data_var=$333$;
      dest_data_var=.projects[0].programs.gp[1][2].vars[22]$352$;
      select_spec {
       name="select_spec";
       el_typ=DataOpEl;
       el_def=0;
       DataOpEl @[0] {
	col_name="oid_id";
       };
      };
     };
     DataSelectColsProg @[9] {
      desc=;
      flags=;
      src_data_var=$334$;
      dest_data_var=.projects[0].programs.gp[1][2].vars[23]$353$;
      select_spec {
       name="select_spec";
       el_typ=DataOpEl;
       el_def=0;
       DataOpEl @[0] {
	col_name="oid_id";
       };
      };
     };
     DataProcCall @[10] {
      desc="Copy the training set to the training table";
      flags=;
      result_var=NULL;
      object_type=taDataProc;
      method=taDataProc::AppendRows;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dest";
	required=0;
	def_val=;
	expr {
	 expr="TrainItems";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="src";
	required=0;
	def_val=;
	expr {
	 expr="train_only_oid_id";
	};
       };
      };
     };
     DataProcCall @[11] {
      desc="Copy the training set to the training table";
      flags=;
      result_var=NULL;
      object_type=taDataProc;
      method=taDataProc::AppendRows;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dest";
	required=0;
	def_val=;
	expr {
	 expr="TestItems";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="src";
	required=0;
	def_val=;
	expr {
	 expr="test_only_oid_id";
	};
       };
      };
     };
    };
   };
   Program @[3] {
    name="Build_Presentation";
    tags=;
    desc="Build one epoch of presentation data: uses train and test item lists to select a current set of items to process, and then copies corresponding lines of ObjectImageData over to Presentation, and then adds the appropriate randomly-generated transform values";
    flags=;
    objs {
     name=;
     el_typ=DataTable;
     el_def=0;
     DataTable @[0] {
      name="remaining_items_train";
      desc="The definitive queue of training items during processing";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[1] {
      name="remaining_items_test";
      desc="The definitive queue of test items during processing";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[2] {
      name="remaining_items";
      desc="Internal copy of whichever queue is being accessed";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[3] {
      name="deferred_items";
      desc="Items not selected for the current order";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     DataTable @[4] {
      name="selected_items";
      desc="1. Items selected for the current order";
      data {
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @[0] {
	name="oid_id";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="transform_id";
      var_type=T_String;
      string_val="vehicle";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Reference to transform record to be used";
     };
     ProgVar @[1] {
      name="build_rows";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Number of items to select for this order (-1 = all!)";
     };
     ProgVar @[2] {
      name="is_train";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Is this for training or testing (i.e., which queue to use)";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="remaining_items_train";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][3].objs[0]$354$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="Local tables described in objs";
     };
     ProgVar @[1] {
      name="remaining_items_test";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][3].objs[1]$355$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="remaining_items";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][3].objs[2]$356$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="selected_items";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][3].objs[4]$357$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="deferred_items";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[1][3].objs[3]$358$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="Transform";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$113$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[6] {
      name="ObjectImageData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$29$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[7] {
      name="TrainItems";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$27$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[8] {
      name="TestItems";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$28$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[9] {
      name="Presentation";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$23$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[10] {
      name="translate_x";
      var_type=T_Real;
      real_val=0.02211680484437575;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed xlate";
     };
     ProgVar @[11] {
      name="translate_y";
      var_type=T_Real;
      real_val=-0.001220907121459547;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[12] {
      name="scale";
      var_type=T_Real;
      real_val=1.153616712165203;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="computed scale value";
     };
     ProgVar @[13] {
      name="x_translate";
      var_type=T_Real;
      real_val=0.15;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="from Transform";
     };
     ProgVar @[14] {
      name="y_translate";
      var_type=T_Real;
      real_val=0.15;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="from Transform";
     };
     ProgVar @[15] {
      name="min_scale";
      var_type=T_Real;
      real_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="from Transform";
     };
     ProgVar @[16] {
      name="max_scale";
      var_type=T_Real;
      real_val=1.2;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="from Transform";
     };
     ProgVar @[17] {
      name="rotate";
      var_type=T_Real;
      real_val=-0.01482821912540514;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="from Transform";
     };
     ProgVar @[18] {
      name="xform_rotate";
      var_type=T_Real;
      real_val=0.02;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="copy of value from Transform (to avoid name clash)";
     };
     ProgVar @[19] {
      name="i";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
     Function @[0] {
      desc="Select items from the remaining items table";
      flags=;
      name="SelectItems";
      return_type=T_Int;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="num_rows";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc=;
       };
      };
      fun_code {
       name=;
       el_typ=DataProcCall;
       el_def=0;
       DataProcCall @[0] {
	desc="Split the remaining items table into 'selected' and 'deferred' items (randomly)";
	flags=;
	result_var=NULL;
	object_type=taDataProc;
	method=taDataProc::SplitRowsNPermuted;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="src";
	  required=1;
	  def_val=;
	  expr {
	   expr="remaining_items";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="dest_1";
	  required=1;
	  def_val=;
	  expr {
	   expr="selected_items";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="n1";
	  required=1;
	  def_val=;
	  expr {
	   expr="num_rows";
	  };
	 };
	 ProgArg @[3] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="dest_2";
	  required=1;
	  def_val=;
	  expr {
	   expr="deferred_items";
	  };
	 };
	 ProgArg @[4] {
	  arg_type=int;
	  type="int";
	  name="n2";
	  required=0;
	  def_val="-1";
	  expr {
	   expr="-1";
	  };
	 };
	 ProgArg @[5] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="dest_3";
	  required=0;
	  def_val="NULL";
	  expr {
	   expr="NULL";
	  };
	 };
	 ProgArg @[6] {
	  arg_type=int;
	  type="int";
	  name="n3";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[7] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="dest_4";
	  required=0;
	  def_val="NULL";
	  expr {
	   expr="NULL";
	  };
	 };
	 ProgArg @[8] {
	  arg_type=int;
	  type="int";
	  name="n4";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[9] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="dest_5";
	  required=0;
	  def_val="NULL";
	  expr {
	   expr="NULL";
	  };
	 };
	 ProgArg @[10] {
	  arg_type=int;
	  type="int";
	  name="n5";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[11] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="dest_6";
	  required=0;
	  def_val="NULL";
	  expr {
	   expr="NULL";
	  };
	 };
	 ProgArg @[12] {
	  arg_type=int;
	  type="int";
	  name="n6";
	  required=0;
	  def_val="0";
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       MethodCall @[1] {
	desc="Reset the remaining items table";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[1][3].vars[2]$359$;
	method=DataTable::ResetData;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       DataProcCall @[2] {
	desc="Copy the deferred items back to the remaining items";
	flags=;
	result_var=NULL;
	object_type=taDataProc;
	method=taDataProc::AppendRows;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="dest";
	  required=0;
	  def_val=;
	  expr {
	   expr="remaining_items";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="src";
	  required=0;
	  def_val=;
	  expr {
	   expr="deferred_items";
	  };
	 };
	};
       };
       MethodCall @[3] {
	desc="Reset the deferred items table";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[1][3].vars[4]$360$;
	method=DataTable::ResetData;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc="Reset the training queue";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][3].vars[0]$361$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="Reset the testing queue";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][3].vars[1]$362$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     IfElse @[0] {
      desc="Select from queue, or select all";
      flags=;
      cond {
       expr="build_rows > 0";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="Clear the operating queue";
	flags=;
	result_var=NULL;
	obj=$359$;
	method=DataTable::ResetData;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       IfElse @[1] {
	desc="If training, use training queue, otherwise use test queue";
	flags=;
	cond {
	 expr="is_train";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 DataProcCall @[0] {
	  desc="Move training queue to operating queue";
	  flags=;
	  result_var=NULL;
	  object_type=taDataProc;
	  method=taDataProc::AppendRows;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="dest";
	    required=0;
	    def_val=;
	    expr {
	     expr="remaining_items";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="src";
	    required=0;
	    def_val=;
	    expr {
	     expr="remaining_items_train";
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 DataProcCall @[0] {
	  desc="Move testing queue to operating queue";
	  flags=;
	  result_var=NULL;
	  object_type=taDataProc;
	  method=taDataProc::AppendRows;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="dest";
	    required=0;
	    def_val=;
	    expr {
	     expr="remaining_items";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="src";
	    required=0;
	    def_val=;
	    expr {
	     expr="remaining_items_test";
	    };
	   };
	  };
	 };
	};
       };
       WhileLoop @[2] {
	desc="Reload operating queue until the order can be filled";
	flags=;
	loop_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 IfElse @[0] {
	  desc="If training, refresh queue from TrainItems, otherwise from TestItems";
	  flags=;
	  cond {
	   expr="is_train";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   DataProcCall @[0] {
	    desc="Add all TrainItems to operating queue";
	    flags=;
	    result_var=NULL;
	    object_type=taDataProc;
	    method=taDataProc::AppendRows;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest";
	      required=0;
	      def_val=;
	      expr {
	       expr="remaining_items";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="src";
	      required=0;
	      def_val=;
	      expr {
	       expr="TrainItems";
	      };
	     };
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   DataProcCall @[0] {
	    desc="Add all TestItems to operating queue";
	    flags=;
	    result_var=NULL;
	    object_type=taDataProc;
	    method=taDataProc::AppendRows;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dest";
	      required=0;
	      def_val=;
	      expr {
	       expr="remaining_items";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="src";
	      required=0;
	      def_val=;
	      expr {
	       expr="TestItems";
	      };
	     };
	    };
	   };
	  };
	 };
	};
	test {
	 expr="remaining_items.rows < build_rows";
	};
       };
       FunctionCall @[3] {
	desc="Fill the order from the operating queue";
	flags=;
	result_var=NULL;
	fun=.projects[0].programs.gp[1][3].functions[0]$363$;
	fun_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="num_rows";
	  required=1;
	  def_val=;
	  expr {
	   expr="build_rows";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       IfElse @[0] {
	desc="Fill the order directly from TrainItems or TestItems";
	flags=;
	cond {
	 expr="is_train";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 DataSelectColsProg @[0] {
	  desc="Copy all TrainItems to selected items";
	  flags=;
	  src_data_var=.projects[0].programs.gp[1][3].vars[7]$364$;
	  dest_data_var=.projects[0].programs.gp[1][3].vars[3]$365$;
	  select_spec {
	   name="select_spec";
	   el_typ=DataOpEl;
	   el_def=0;
	   DataOpEl @[0] {
	    col_name="oid_id";
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 DataSelectColsProg @[0] {
	  desc="Copy all TestItems to selected items";
	  flags=;
	  src_data_var=.projects[0].programs.gp[1][3].vars[8]$366$;
	  dest_data_var=$365$;
	  select_spec {
	   name="select_spec";
	   el_typ=DataOpEl;
	   el_def=0;
	   DataOpEl @[0] {
	    col_name="oid_id";
	   };
	  };
	 };
	};
       };
      };
     };
     CodeBlock @[1] {
      desc="Produce the Presentation from the selected items";
      flags=;
      prog_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       DataJoinProg @[0] {
	desc="Presentation = selected items from ObjectImageData table";
	flags=;
	src_data_var=$365$;
	dest_data_var=.projects[0].programs.gp[1][3].vars[9]$367$;
	src_b_data_var=.projects[0].programs.gp[1][3].vars[6]$368$;
	join_spec {
	 name="join_spec";
	 col_a {
	  col_name="oid_id";
	 };
	 col_b {
	  col_name="oid_id";
	 };
	 type=INNER;
	 nomatch_warn=1;
	};
       };
       Comment @[1] {
	desc="add transform value columns to the presentation table";
	flags=;
       };
       MethodCall @[2] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$367$;
	method=DataTable::NewColFloat;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_nm";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"translate_x\"";
	  };
	 };
	};
       };
       MethodCall @[3] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$367$;
	method=DataTable::NewColFloat;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_nm";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"translate_y\"";
	  };
	 };
	};
       };
       MethodCall @[4] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$367$;
	method=DataTable::NewColFloat;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_nm";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"rotate\"";
	  };
	 };
	};
       };
       MethodCall @[5] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$367$;
	method=DataTable::NewColFloat;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_nm";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"scale\"";
	  };
	 };
	};
       };
       DataVarProg @[6] {
	desc="get translate params";
	flags=;
	data_var=.projects[0].programs.gp[1][3].vars[5]$369$;
	set_data=0;
	row_spec=ROW_VAL;
	row_var=.projects[0].programs.gp[1][3].args[0]$370$;
	var_1=.projects[0].programs.gp[1][3].vars[13]$371$;
	var_2=.projects[0].programs.gp[1][3].vars[14]$372$;
	var_3=NULL;
	var_4=NULL;
       };
       DataVarProg @[7] {
	desc="get scale and rotate params";
	flags=;
	data_var=$369$;
	set_data=0;
	row_spec=ROW_VAL;
	row_var=$370$;
	var_1=.projects[0].programs.gp[1][3].vars[15]$373$;
	var_2=.projects[0].programs.gp[1][3].vars[16]$374$;
	var_3=.projects[0].programs.gp[1][3].vars[17]$375$;
	var_4=NULL;
       };
       AssignExpr @[8] {
	desc="save value bc we reuse rotate for computed val";
	flags=;
	result_var=.projects[0].programs.gp[1][3].vars[18]$376$;
	expr {
	 expr="rotate";
	};
       };
       ForLoop @[9] {
	desc=;
	flags=;
	loop_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 RandomCall @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[1][3].vars[10]$377$;
	  object_type=Random;
	  method=Random::UniformMeanRange;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=double;
	    type="double";
	    name="mean";
	    required=0;
	    def_val=;
	    expr {
	     expr="0";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="range";
	    required=0;
	    def_val=;
	    expr {
	     expr="x_translate";
	    };
	   };
	  };
	 };
	 RandomCall @[1] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[1][3].vars[11]$378$;
	  object_type=Random;
	  method=Random::UniformMeanRange;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=double;
	    type="double";
	    name="mean";
	    required=0;
	    def_val=;
	    expr {
	     expr="0";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="range";
	    required=0;
	    def_val=;
	    expr {
	     expr="y_translate";
	    };
	   };
	  };
	 };
	 RandomCall @[2] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[1][3].vars[12]$379$;
	  object_type=Random;
	  method=Random::UniformMinMax;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=double;
	    type="double";
	    name="min";
	    required=0;
	    def_val=;
	    expr {
	     expr="min_scale";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="max";
	    required=0;
	    def_val=;
	    expr {
	     expr="max_scale";
	    };
	   };
	  };
	 };
	 RandomCall @[3] {
	  desc=;
	  flags=;
	  result_var=$375$;
	  object_type=Random;
	  method=Random::UniformMeanRange;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=double;
	    type="double";
	    name="mean";
	    required=0;
	    def_val=;
	    expr {
	     expr="0";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="range";
	    required=0;
	    def_val=;
	    expr {
	     expr="xform_rotate";
	    };
	   };
	  };
	 };
	 DataVarProg @[4] {
	  desc="set translate, scale, rotate, vals in current presentation ";
	  flags=;
	  data_var=$367$;
	  set_data=1;
	  row_spec=ROW_NUM;
	  row_var=.projects[0].programs.gp[1][3].vars[19]$380$;
	  var_1=$377$;
	  var_2=$378$;
	  var_3=$379$;
	  var_4=$375$;
	 };
	};
	init {
	 expr="i = 0";
	};
	test {
	 expr="i < Presentation.rows";
	};
	iter {
	 expr="i++";
	};
       };
      };
     };
     IfElse @[2] {
      desc="Update queue if used";
      flags=;
      cond {
       expr="build_rows > 0";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       IfElse @[0] {
	desc="If training, update training queue, otherwise update test queue";
	flags=;
	cond {
	 expr="is_train";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc="Reset the training queue";
	  flags=;
	  result_var=NULL;
	  obj=$361$;
	  method=DataTable::ResetData;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 DataProcCall @[1] {
	  desc="Move operating queue back to training queue";
	  flags=;
	  result_var=NULL;
	  object_type=taDataProc;
	  method=taDataProc::AppendRows;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="dest";
	    required=0;
	    def_val=;
	    expr {
	     expr="remaining_items_train";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="src";
	    required=0;
	    def_val=;
	    expr {
	     expr="remaining_items";
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc="Reset the testing queue";
	  flags=;
	  result_var=NULL;
	  obj=$362$;
	  method=DataTable::ResetData;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	 DataProcCall @[1] {
	  desc="Move operating queue back to testing queue";
	  flags=;
	  result_var=NULL;
	  object_type=taDataProc;
	  method=taDataProc::AppendRows;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="dest";
	    required=0;
	    def_val=;
	    expr {
	     expr="remaining_items_test";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="src";
	    required=0;
	    def_val=;
	    expr {
	     expr="remaining_items";
	    };
	   };
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
    };
   };
   Program @[4] {
    name="LabelOutputs";
    tags=;
    desc="Label the output units in the network based on input data";
    flags=;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$23$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="unit_names";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][3]$381$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="cur_subgp";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="out_gp_size";
      var_type=T_Int;
      int_val=49;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="size of one unitgroup in output layer";
     };
     ProgVar @[3] {
      name="n_groups";
      var_type=T_Int;
      int_val=3;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="number of unit groups in output layer";
     };
     ProgVar @[4] {
      name="SuperCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$158$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="Category";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$159$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[6] {
      name="SubCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$160$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[7] {
      name="Feature1";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$161$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[8] {
      name="Feature2";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$162$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[9] {
      name="Feature3";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$163$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[10] {
      name="Feature4";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$164$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[11] {
      name="output_names";
      var_type=T_Object;
      object_type=String_Data;
      object_val=.projects[0].data.gp[0][3].data[0]$382$;
      objs_ptr=0;
      flags=USED;
      reference=0;
      desc=;
     };
     ProgVar @[12] {
      name="i";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
     Function @[0] {
      desc=;
      flags=;
      name="SetUnitNamesFmData";
      return_type=T_Bool;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="data_table";
	var_type=T_Object;
	object_type=DataTable;
	object_val=NULL;
	objs_ptr=0;
	flags=LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc=;
       };
      };
      fun_code {
       name=;
       el_typ=ProgVars;
       el_def=0;
       ProgVars @[0] {
	desc=;
	flags=;
	local_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @[0] {
	  name="i";
	  var_type=T_Int;
	  int_val=0;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	};
       };
       If @[1] {
	desc=;
	flags=;
	cond {
	 expr="data_table.rows <= 1";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 ReturnExpr @[0] {
	  desc=;
	  flags=;
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       If @[2] {
	desc=;
	flags=;
	cond {
	 expr="data_table.rows >= out_gp_size";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MiscCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  object_type=taMisc;
	  method=taMisc::Error;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="a";
	    required=1;
	    def_val=;
	    expr {
	     expr="\"data to be represented in output layer is larger than size of output unit group\"";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="b";
	    required=0;
	    def_val="0";
	    expr {
	     expr="data_table->name";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="c";
	    required=0;
	    def_val="0";
	    expr {
	     expr="\"rows:\"";
	    };
	   };
	   ProgArg @[3] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="d";
	    required=0;
	    def_val="0";
	    expr {
	     expr="data_table.rows";
	    };
	   };
	   ProgArg @[4] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="e";
	    required=0;
	    def_val="0";
	    expr {
	     expr="\"unit gp size:\"";
	    };
	   };
	   ProgArg @[5] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="f";
	    required=0;
	    def_val="0";
	    expr {
	     expr="out_gp_size";
	    };
	   };
	   ProgArg @[6] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="g";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[7] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="h";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[8] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="i";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	  };
	 };
	 ReturnExpr @[1] {
	  desc=;
	  flags=;
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       If @[3] {
	desc=;
	flags=;
	cond {
	 expr="cur_subgp >= n_groups";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MiscCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  object_type=taMisc;
	  method=taMisc::Error;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="a";
	    required=1;
	    def_val=;
	    expr {
	     expr="\"number of data tables with values to be represented is larger than number of output layer groups\"";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="b";
	    required=0;
	    def_val="0";
	    expr {
	     expr="data_table->name";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="c";
	    required=0;
	    def_val="0";
	    expr {
	     expr="\"n_groups:\"";
	    };
	   };
	   ProgArg @[3] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="d";
	    required=0;
	    def_val="0";
	    expr {
	     expr="n_groups";
	    };
	   };
	   ProgArg @[4] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="e";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[5] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="f";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[6] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="g";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[7] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="h";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	   ProgArg @[8] {
	    arg_type=const_char_ptr;
	    type="const char*";
	    name="i";
	    required=0;
	    def_val="0";
	    expr {
	     expr=;
	    };
	   };
	  };
	 };
	 ReturnExpr @[1] {
	  desc=;
	  flags=;
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       ForLoop @[4] {
	desc=;
	flags=;
	loop_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=.projects[0].programs.gp[1][4].vars[11]$383$;
	  method=DataCol::SetValAsStringM;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="val";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="data_table.GetVal(0,i)";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="row";
	    required=0;
	    def_val=;
	    expr {
	     expr="0";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=int;
	    type="int";
	    name="cell";
	    required=0;
	    def_val=;
	    expr {
	     expr="out_gp_size * cur_subgp + i";
	    };
	   };
	  };
	 };
	};
	init {
	 expr="i = 0";
	};
	test {
	 expr="i < data_table.rows";
	};
	iter {
	 expr="i++";
	};
       };
       VarIncr @[5] {
	desc=;
	flags=;
	var=.projects[0].programs.gp[1][4].vars[1]$384$;
	expr {
	 expr="1";
	};
       };
       ReturnExpr @[6] {
	desc=;
	flags=;
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     InitNamedUnits @[0] {
      desc="this copies unit names to network when run (LabelNetwork)";
      flags=;
      input_data_var=.projects[0].programs.gp[1][4].args[1]$385$;
      unit_names_var=.projects[0].programs.gp[1][4].vars[0]$386$;
      network_var=.projects[0].programs.gp[1][4].args[0]$387$;
      n_lay_name_chars=1;
      max_unit_chars=-1;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=$384$;
      expr {
       expr="0";
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=;
      result_var=$383$;
      expr {
       expr="unit_names.data.Output";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][4].vars[2]$388$;
      expr {
       expr="output_names->GetCellGeom(0) * output_names->GetCellGeom(1)";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][4].vars[3]$389$;
      expr {
       expr="output_names->GetCellGeom(2) * output_names->GetCellGeom(3)";
      };
     };
     MethodCall @[4] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$386$;
      method=DataTable::InitValsColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="init_val";
	required=0;
	def_val=;
	expr {
	 expr="\"-\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"Output\"";
	};
       };
      };
     };
     FunctionCall @[5] {
      desc=;
      flags=;
      result_var=NULL;
      fun=.projects[0].programs.gp[1][4].functions[0]$390$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="SuperCat";
	};
       };
      };
     };
     FunctionCall @[6] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$390$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="Category";
	};
       };
      };
     };
     FunctionCall @[7] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$390$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="SubCat";
	};
       };
      };
     };
     FunctionCall @[8] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$390$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="Feature1";
	};
       };
      };
     };
     FunctionCall @[9] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$390$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="Feature2";
	};
       };
      };
     };
     FunctionCall @[10] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$390$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="Feature3";
	};
       };
      };
     };
     FunctionCall @[11] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$390$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="data_table";
	required=1;
	def_val=;
	expr {
	 expr="Feature4";
	};
       };
      };
     };
     MethodCall @[12] {
      desc="copy from output to target";
      flags=;
      result_var=NULL;
      obj=$386$;
      method=DataTable::CopyCellName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="dest_col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"Target\"";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="dest_row";
	required=0;
	def_val=;
	expr {
	 expr="0";
	};
       };
       ProgArg @[2] {
	arg_type=const_DataTable_ref;
	type="const DataTable&";
	name="src";
	required=0;
	def_val=;
	expr {
	 expr="unit_names";
	};
       };
       ProgArg @[3] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="src_col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"Output\"";
	};
       };
       ProgArg @[4] {
	arg_type=int;
	type="int";
	name="src_row";
	required=0;
	def_val=;
	expr {
	 expr="0";
	};
       };
      };
     };
     MethodCall @[13] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$387$;
      method=Network::SetUnitNamesFromDataTable;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="unit_names_table";
	required=1;
	def_val=;
	expr {
	 expr="unit_names";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="max_unit_chars";
	required=0;
	def_val="-1";
	expr {
	 expr="-1";
	};
       };
       ProgArg @[2] {
	arg_type=bool;
	type="bool";
	name="propagate_names";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
   };
  };
  Program_Group @.gp[2] {
   name="ApplyInputs";
   el_typ=Program;
   el_def=0;
   step_prog=NULL;
   tags=;
   desc=;
   Program @[0] {
    name="ApplyInputsImage_V1in_bw";
    tags=;
    desc="apply input data to the network, using a RetinaSpec to process a bitmap image.  epoch should iterate over a datatable with names of images to load, and the current value of that is used here to load the image and process into a second datatable (image_data) which is actually presented to the network.";
    flags=;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="V1LayerWriter";
      data=.projects[0].data.gp[0][2]$391$;
      network=$5$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
     RetinaSpec @[1] {
      name="RetinaSpec_V1in_bw";
      threads {
       run_time {name="": s_used=0: n_used=0: };
       sync_time {name="": s_used=0: n_used=0: };
       total_time {name="": s_used=0: n_used=0: };
       n_wake_in_sync=0;
       run_time_pct=0;
       sync_time_pct=0;
       wake_in_sync_pct=0;
      };
      color_type=MONOCHROME;
      retina_size {x=144: y=144: };
      edge_mode=WRAP;
      fade_width=-1;
      renorm_thr=1e-05;
      dogs {
       name=;
       el_typ=DoGRetinaSpec;
       el_def=0;
      };
     };
     V1GaborSpec @[2] {
      name="V1GaborSpec_V1in_bw";
      gabors {
       name=;
       el_typ=GaborV1Spec;
       el_def=0;
      };
      wrap=1;
      retina=.projects[0].programs.gp[2][0].objs[1]$392$;
      norm_max=0.95;
      norm_thr=0.01;
     };
     DataTable @[3] {
      name="data_image";
      desc="this must be configured to hold image_data_train or test image data when using DATA: images!  todo: auto-format..";
      data {
       name="data";
       el_typ=float_Data;
       el_def=0;
       float_Data @[0] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @[0] {
	  name="view_panel_wd";
	  value 6 0=0.1996008008718491;
	 };
	};
	name="Image";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 28;28;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[28 28 1] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;20;50;91;172;252;253;171;
151;50;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
41;183;255;253;255;253;255;253;255;192;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;10;212;253;252;
253;232;233;232;223;223;253;252;41;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;41;173;253;255;213;132;31;
31;31;21;21;52;51;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
31;192;253;232;82;0;0;0;0;0;
0;0;0;20;122;0;0;0;0;0;
0;0;0;0;0;0;0;0;52;253;
234;51;0;0;0;0;0;0;0;0;
0;142;244;40;0;0;0;0;0;0;
0;0;0;0;0;0;21;20;0;0;
0;0;0;0;0;0;0;0;0;203;
183;20;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;41;163;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;31;151;82;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;51;253;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
92;232;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
62;142;102;61;21;20;62;61;234;131;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;10;212;253;252;
253;252;253;252;253;232;102;20;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;132;253;254;253;214;253;
214;253;193;92;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;233;232;41;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
153;112;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;92;171;
112;151;112;232;253;130;40;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;11;173;254;253;
254;253;254;253;244;40;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;163;223;253;232;
102;102;173;252;213;50;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;21;51;31;0;0;
11;132;254;50;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
     TimeUsed @[4] {name="ApplyInputTime": start={usr=2155: sys=343: tot=4129168001: }: end={usr=2156: sys=343: tot=4129168002: }: used={usr=33: sys=1: tot=35: }: s_used=0.35: n_used=206: };
     TimeUsed @[5] {name="XformImageTime": start={usr=2155: sys=343: tot=4129168001: }: end={usr=2155: sys=343: tot=4129168002: }: used={usr=8: sys=0: tot=15: }: s_used=0.15: n_used=206: };
     TimeUsed @[6] {name="FilterImageTime": start={usr=2155: sys=343: tot=4129168002: }: end={usr=2156: sys=343: tot=4129168002: }: used={usr=24: sys=0: tot=19: }: s_used=0.19: n_used=206: };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Network to which to apply inputs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$23$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Source data for input process";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="image_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][1]$393$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="One record, contains the full and filtered image data";
     };
     ProgVar @[1] {
      name="v1_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$391$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="image_train_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$30$;
      objs_ptr=0;
      flags=USED;
      reference=0;
      desc="for datatable-based image sets: training or complete data";
     };
     ProgVar @[3] {
      name="image_test_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$31$;
      objs_ptr=0;
      flags=USED;
      reference=0;
      desc="for datatable-based image sets: testing data (if spec'd)";
     };
     ProgVar @[4] {
      name="use_stim_gen";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="use stimulus generation program image instead of file image";
     };
     ProgVar @[5] {
      name="V1LayerWriter";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[2][0].objs[0]$394$;
      objs_ptr=1;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Moves data into the network";
     };
     ProgVar @[6] {
      name="RetinaSpec_V1in_bw";
      var_type=T_Object;
      object_type=RetinaSpec;
      object_val=$392$;
      objs_ptr=1;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Computation object for calculating retinal filters";
     };
     ProgVar @[7] {
      name="filename";
      var_type=T_String;
      string_val="motorcycle_chopper_004_01178.jpg";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Current image file name (from input_data)";
     };
     ProgVar @[8] {
      name="foveate_box_llx";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="lower-left x coordinate of foveation box w.r.t. image (0.0 - 1.0) for current trial";
     };
     ProgVar @[9] {
      name="foveate_box_lly";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="lower-left y coordinate of foveation box w.r.t. image (0.0 - 1.0, independent of x scale)";
     };
     ProgVar @[10] {
      name="foveate_box_urx";
      var_type=T_Real;
      real_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="upper right x coordinate of foveation box w.r.t. image (0.0 - 1.0)";
     };
     ProgVar @[11] {
      name="foveate_box_ury";
      var_type=T_Real;
      real_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="upper-right y coordinate of foveation box w.r.t. image (0.0 - 1.0)";
     };
     ProgVar @[12] {
      name="translate_x";
      var_type=T_Real;
      real_val=-0.1084296405315399;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="Horizontal translation in image coordinates for current input (0.0 - 1.0, 0.3 is generally maximum)";
     };
     ProgVar @[13] {
      name="translate_y";
      var_type=T_Real;
      real_val=-0.01432922948151827;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="Vertical translation for current input (image coords)";
     };
     ProgVar @[14] {
      name="scale";
      var_type=T_Real;
      real_val=1.058967232704163;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="Scaling factor for current input - fraction of size of one dimension (50% = 0.5)";
     };
     ProgVar @[15] {
      name="rotate";
      var_type=T_Real;
      real_val=-0.004307933617383242;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="Rotation for current input - 0.5 is 180 degrees";
     };
     ProgVar @[16] {
      name="foveate";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="whether to use look at or filter image";
     };
     ProgVar @[17] {
      name="renorm";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="renormalization level";
     };
     ProgVar @[18] {
      name="fade_width";
      var_type=T_Int;
      int_val=-1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[19] {
      name="attention_mod";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="whether to apply the attentional modulation";
     };
     ProgVar @[20] {
      name="oid_id";
      var_type=T_Int;
      int_val=455;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[21] {
      name="supercat_id";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[22] {
      name="category_id";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[23] {
      name="subcat_id";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[24] {
      name="feature1_id";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[25] {
      name="feature2_id";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[26] {
      name="feature3_id";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[27] {
      name="feature4_id";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[28] {
      name="cur_subgp";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="current output subgroup";
     };
     ProgVar @[29] {
      name="Canvas";
      var_type=T_Object;
      object_type=taCanvas;
      object_val=.projects[0].programs.gp[2][1].objs[0]$395$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[30] {
      name="SuperCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$158$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[31] {
      name="Category";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$159$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[32] {
      name="SubCat";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$160$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[33] {
      name="Feature1";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$161$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[34] {
      name="Feature2";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$162$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[35] {
      name="Feature3";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$163$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[36] {
      name="Feature4";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$164$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[37] {
      name="output_col";
      var_type=T_Object;
      object_type=float_Data;
      object_val=.projects[0].data.gp[0][1].data[6]$396$;
      objs_ptr=0;
      flags=USED;
      reference=0;
      desc=;
     };
     ProgVar @[38] {
      name="out_gp_size";
      var_type=T_Int;
      int_val=49;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="size of one unitgroup in output layer";
     };
     ProgVar @[39] {
      name="file_path";
      var_type=T_String;
      string_val="/Users/oreilly/svn_images/veh3d_lr20_nb/";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="Path stub from user-entered .oia filename";
     };
     ProgVar @[40] {
      name="ActiveLesson";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$26$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[41] {
      name="train_transform_id";
      var_type=T_String;
      string_val="vehicle";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[42] {
      name="test_transform_id";
      var_type=T_String;
      string_val="vehicle";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[43] {
      name="train_occlusion_id";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[44] {
      name="test_occlusion_id";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[45] {
      name="occlusion_id";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[46] {
      name="oid_filename";
      var_type=T_String;
      string_val="images/veh3d_lr20_nb/Veh3d_nosubcat.dat";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[47] {
      name="occlude_box_llx";
      var_type=T_Real;
      real_val=0.4000000059604645;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="lower-left x coordinate of foveation box w.r.t. image (0.0 - 1.0) for current trial";
     };
     ProgVar @[48] {
      name="occlude_box_lly";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="lower-left y coordinate of foveation box w.r.t. image (0.0 - 1.0, independent of x scale)";
     };
     ProgVar @[49] {
      name="occlude_box_urx";
      var_type=T_Real;
      real_val=0.6000000238418579;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="upper right x coordinate of foveation box w.r.t. image (0.0 - 1.0)";
     };
     ProgVar @[50] {
      name="occlude_box_ury";
      var_type=T_Real;
      real_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="upper-right y coordinate of foveation box w.r.t. image (0.0 - 1.0)";
     };
     ProgVar @[51] {
      name="occlude_p";
      var_type=T_Real;
      real_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="probability of occluding";
     };
     ProgVar @[52] {
      name="transform_id";
      var_type=T_String;
      string_val="vehicle";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[53] {
      name="Transform";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$113$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[54] {
      name="Occlusion";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[3].gp[0][3]$397$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[55] {
      name="data_image";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[2][0].objs[3]$398$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[56] {
      name="ApplyInputTime";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$96$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[57] {
      name="XformImageTime";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$98$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[58] {
      name="FilterImageTime";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$97$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[59] {
      name="V1GaborSpec_V1in_bw";
      var_type=T_Object;
      object_type=V1GaborSpec;
      object_val=.projects[0].programs.gp[2][0].objs[2]$399$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
     Function @[0] {
      desc=;
      flags=;
      name="SetOutputVal";
      return_type=T_Bool;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="data_table";
	var_type=T_Object;
	object_type=DataTable;
	object_val=NULL;
	objs_ptr=0;
	flags=LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc=;
       };
       ProgVar @[1] {
	name="id_val";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc=;
       };
      };
      fun_code {
       name=;
       el_typ=ProgVars;
       el_def=0;
       ProgVars @[0] {
	desc=;
	flags=;
	local_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @[0] {
	  name="input_dt_gp";
	  var_type=T_Object;
	  object_type=DataTable_Group;
	  object_val=NULL;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[1] {
	  name="trn_name";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[2] {
	  name="tst_name";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	};
       };
       If @[1] {
	desc=;
	flags=;
	cond {
	 expr="data_table.rows <= 1";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 ReturnExpr @[0] {
	  desc=;
	  flags=;
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       MethodCall @[2] {
	desc=;
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[2][0].vars[1]$400$;
	method=DataTable::SetMatrixFlatValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="1.0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"Output\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[3] {
	  arg_type=int;
	  type="int";
	  name="cell";
	  required=0;
	  def_val=;
	  expr {
	   expr="cur_subgp*out_gp_size+id_val";
	  };
	 };
	};
       };
       MethodCall @[3] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$400$;
	method=DataTable::SetMatrixFlatValColName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="val";
	  required=0;
	  def_val=;
	  expr {
	   expr="1.0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="col_name";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="\"Target\"";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="row";
	  required=0;
	  def_val=;
	  expr {
	   expr="0";
	  };
	 };
	 ProgArg @[3] {
	  arg_type=int;
	  type="int";
	  name="cell";
	  required=0;
	  def_val=;
	  expr {
	   expr="cur_subgp*out_gp_size+id_val";
	  };
	 };
	};
       };
       VarIncr @[4] {
	desc=;
	flags=;
	var=.projects[0].programs.gp[2][0].vars[28]$401$;
	expr {
	 expr="1";
	};
       };
       ReturnExpr @[5] {
	desc=;
	flags=;
	expr {
	 expr="true";
	};
       };
      };
     };
     Function @[1] {
      desc="parse oid_filename to get image data tables instead of file name..";
      flags=;
      name="GetImageDataTables";
      return_type=T_Int;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="oid_fnm";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc="the oid_filename value to parse";
       };
      };
      fun_code {
       name=;
       el_typ=ProgVars;
       el_def=0;
       ProgVars @[0] {
	desc=;
	flags=;
	local_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @[0] {
	  name="trn_name";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[1] {
	  name="tst_name";
	  var_type=T_String;
	  string_val=;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[2] {
	  name="input_dt_gp";
	  var_type=T_Object;
	  object_type=DataTable_Group;
	  object_val=NULL;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR;
	  reference=0;
	  desc=;
	 };
	};
       };
       AssignExpr @[1] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[2][0].functions[0].fun_code[0].local_vars[0]$402$;
	expr {
	 expr=".projects[0].data.gp.InputData";
	};
       };
       AssignExpr @[2] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[2][0].functions[0].fun_code[0].local_vars[1]$403$;
	expr {
	 expr="oid_fnm.after(\"DATA:\")";
	};
       };
       If @[3] {
	desc=;
	flags=;
	cond {
	 expr="trn_name.contains(\",\")";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[2][0].functions[0].fun_code[0].local_vars[2]$404$;
	  expr {
	   expr="trn_name.after(\"TEST:\")";
	  };
	 };
	 AssignExpr @[1] {
	  desc=;
	  flags=;
	  result_var=$403$;
	  expr {
	   expr="trn_name.before(\",\")";
	  };
	 };
	};
       };
       MethodCall @[4] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[2][0].vars[2]$405$;
	obj=$402$;
	method=taGroup_DataTable_::FindName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="item_nm";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="trn_name";
	  };
	 };
	};
       };
       IfElse @[5] {
	desc=;
	flags=;
	cond {
	 expr="tst_name.nonempty()";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[2][0].vars[3]$406$;
	  obj=$402$;
	  method=taGroup_DataTable_::FindName;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="item_nm";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="tst_name";
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=$406$;
	  expr {
	   expr="NULL";
	  };
	 };
	};
       };
      };
     };
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="Empty the image data table";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][0].vars[0]$407$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="Empty the image data table";
      flags=;
      result_var=NULL;
      obj=$400$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="Connect the image data table to the layerwriter";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][0].vars[5]$408$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="v1_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="Confirm that all is well with the layerwriter";
      flags=;
      result_var=NULL;
      obj=$408$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[4] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][0].vars[58]$409$;
      method=TimeUsed::ResetUsed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[5] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][0].vars[56]$410$;
      method=TimeUsed::ResetUsed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[6] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][0].vars[57]$411$;
      method=TimeUsed::ResetUsed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfElse @[0] {
      desc="For minus phase";
      flags=;
      cond {
       expr="network.phase_no == 0";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MemberAssign @[0] {
	desc=;
	flags=OFF|NON_STD;
	obj=.projects[0].programs.gp[2][0].vars[6]$412$;
	path="threads.n_threads";
	expr {
	 expr="1";
	};
	update_after=0;
       };
       MethodCall @[1] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$410$;
	method=TimeUsed::StartTimer;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=bool;
	  type="bool";
	  name="reset_used";
	  required=0;
	  def_val="true";
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       MethodCall @[2] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$411$;
	method=TimeUsed::StartTimer;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=bool;
	  type="bool";
	  name="reset_used";
	  required=0;
	  def_val="true";
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       OtherProgramVar @[3] {
	desc=;
	flags=;
	other_prog=$77$;
	set_other=0;
	var_1=.projects[0].programs.gp[2][0].vars[39]$413$;
	var_2=NULL;
	var_3=NULL;
	var_4=NULL;
       };
       CodeBlock @[4] {
	desc="Assign data from the current input/presentation record to variables, for calling LookImageName";
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 DataVarProgMatrix @[0] {
	  desc="get foveation box";
	  flags=;
	  data_var=.projects[0].programs.gp[2][0].args[1]$414$;
	  set_data=0;
	  row_spec=CUR_ROW;
	  row_var=NULL;
	  var_1=.projects[0].programs.gp[2][0].vars[8]$415$;
	  var_2=.projects[0].programs.gp[2][0].vars[9]$416$;
	  var_3=.projects[0].programs.gp[2][0].vars[10]$417$;
	  var_4=.projects[0].programs.gp[2][0].vars[11]$418$;
	 };
	 DataVarProg @[1] {
	  desc="get non-matrix vals";
	  flags=;
	  data_var=$414$;
	  set_data=0;
	  row_spec=CUR_ROW;
	  row_var=NULL;
	  var_1=.projects[0].programs.gp[2][0].vars[7]$419$;
	  var_2=.projects[0].programs.gp[2][0].vars[20]$420$;
	  var_3=NULL;
	  var_4=NULL;
	 };
	 DataVarProg @[2] {
	  desc=;
	  flags=;
	  data_var=$414$;
	  set_data=0;
	  row_spec=CUR_ROW;
	  row_var=NULL;
	  var_1=.projects[0].programs.gp[2][0].vars[12]$421$;
	  var_2=.projects[0].programs.gp[2][0].vars[13]$422$;
	  var_3=.projects[0].programs.gp[2][0].vars[14]$423$;
	  var_4=.projects[0].programs.gp[2][0].vars[15]$424$;
	 };
	 DataVarProg @[3] {
	  desc=;
	  flags=;
	  data_var=$414$;
	  set_data=0;
	  row_spec=CUR_ROW;
	  row_var=NULL;
	  var_1=.projects[0].programs.gp[2][0].vars[21]$425$;
	  var_2=.projects[0].programs.gp[2][0].vars[22]$426$;
	  var_3=.projects[0].programs.gp[2][0].vars[23]$427$;
	  var_4=NULL;
	 };
	 DataVarProg @[4] {
	  desc=;
	  flags=;
	  data_var=$414$;
	  set_data=0;
	  row_spec=CUR_ROW;
	  row_var=NULL;
	  var_1=.projects[0].programs.gp[2][0].vars[24]$428$;
	  var_2=.projects[0].programs.gp[2][0].vars[25]$429$;
	  var_3=.projects[0].programs.gp[2][0].vars[26]$430$;
	  var_4=.projects[0].programs.gp[2][0].vars[27]$431$;
	 };
	 Comment @[5] {
	  desc="get transform data from lesson";
	  flags=;
	 };
	 DataVarProg @[6] {
	  desc=;
	  flags=;
	  data_var=.projects[0].programs.gp[2][0].vars[40]$432$;
	  set_data=0;
	  row_spec=CUR_ROW;
	  row_var=NULL;
	  var_1=.projects[0].programs.gp[2][0].vars[41]$433$;
	  var_2=.projects[0].programs.gp[2][0].vars[42]$434$;
	  var_3=.projects[0].programs.gp[2][0].vars[43]$435$;
	  var_4=.projects[0].programs.gp[2][0].vars[44]$436$;
	 };
	 DataVarProg @[7] {
	  desc=;
	  flags=;
	  data_var=$432$;
	  set_data=0;
	  row_spec=CUR_ROW;
	  row_var=NULL;
	  var_1=.projects[0].programs.gp[2][0].vars[46]$437$;
	  var_2=NULL;
	  var_3=NULL;
	  var_4=NULL;
	 };
	 IfElse @[8] {
	  desc=;
	  flags=;
	  cond {
	   expr="network->train_mode == LeabraNetwork::TRAIN";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   AssignExpr @[0] {
	    desc=;
	    flags=;
	    result_var=.projects[0].programs.gp[2][0].vars[52]$438$;
	    expr {
	     expr="train_transform_id";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=;
	    result_var=.projects[0].programs.gp[2][0].vars[45]$439$;
	    expr {
	     expr="train_occlusion_id";
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   AssignExpr @[0] {
	    desc=;
	    flags=;
	    result_var=$438$;
	    expr {
	     expr="test_transform_id";
	    };
	   };
	   AssignExpr @[1] {
	    desc=;
	    flags=;
	    result_var=$439$;
	    expr {
	     expr="test_occlusion_id";
	    };
	   };
	  };
	 };
	 DataVarProg @[9] {
	  desc=;
	  flags=;
	  data_var=.projects[0].programs.gp[2][0].vars[53]$440$;
	  set_data=0;
	  row_spec=ROW_VAL;
	  row_var=$438$;
	  var_1=.projects[0].programs.gp[2][0].vars[17]$441$;
	  var_2=.projects[0].programs.gp[2][0].vars[18]$442$;
	  var_3=.projects[0].programs.gp[2][0].vars[16]$443$;
	  var_4=.projects[0].programs.gp[2][0].vars[19]$444$;
	 };
	 If @[10] {
	  desc=;
	  flags=;
	  cond {
	   expr="occlusion_id.nonempty()";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   DataVarProgMatrix @[0] {
	    desc=;
	    flags=;
	    data_var=.projects[0].programs.gp[2][0].vars[54]$445$;
	    set_data=0;
	    row_spec=ROW_VAL;
	    row_var=$439$;
	    var_1=.projects[0].programs.gp[2][0].vars[47]$446$;
	    var_2=.projects[0].programs.gp[2][0].vars[48]$447$;
	    var_3=.projects[0].programs.gp[2][0].vars[49]$448$;
	    var_4=.projects[0].programs.gp[2][0].vars[50]$449$;
	   };
	   DataVarProg @[1] {
	    desc=;
	    flags=;
	    data_var=$445$;
	    set_data=0;
	    row_spec=ROW_VAL;
	    row_var=$439$;
	    var_1=.projects[0].programs.gp[2][0].vars[51]$450$;
	    var_2=NULL;
	    var_3=NULL;
	    var_4=NULL;
	   };
	  };
	 };
	};
       };
       IfElse @[5] {
	desc="images stored in data table(s)";
	flags=;
	cond {
	 expr="oid_filename.startsWith(\"DATA:\")";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 ProgVars @[0] {
	  desc=;
	  flags=;
	  local_vars {
	   name=;
	   el_typ=ProgVar;
	   el_def=0;
	   ProgVar @[0] {
	    name="img_matrix";
	    var_type=T_Object;
	    object_type=float_Matrix;
	    object_val=NULL;
	    objs_ptr=0;
	    flags=LOCAL_VAR|USED;
	    reference=0;
	    desc=;
	   };
	  };
	 };
	 FunctionCall @[1] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  fun=.projects[0].programs.gp[2][0].functions[1]$451$;
	  fun_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=taString;
	    type="String";
	    name="oid_fnm";
	    required=1;
	    def_val=;
	    expr {
	     expr="oid_filename";
	    };
	   };
	  };
	 };
	 IfElse @[2] {
	  desc=;
	  flags=;
	  cond {
	   expr="oid_id < image_train_data.rows";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   MethodCall @[0] {
	    desc=;
	    flags=;
	    result_var=NULL;
	    obj=.projects[0].programs.gp[2][0].vars[55]$452$;
	    method=DataTable::CopyCell;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=Variant;
	      type="Variant";
	      name="dest_col";
	      required=0;
	      def_val=;
	      expr {
	       expr="\"Image\"";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=int;
	      type="int";
	      name="dest_row";
	      required=0;
	      def_val=;
	      expr {
	       expr="0";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=const_DataTable_ref;
	      type="const DataTable&";
	      name="src";
	      required=0;
	      def_val=;
	      expr {
	       expr="image_train_data";
	      };
	     };
	     ProgArg @[3] {
	      arg_type=Variant;
	      type="Variant";
	      name="src_col";
	      required=0;
	      def_val=;
	      expr {
	       expr="\"Image\"";
	      };
	     };
	     ProgArg @[4] {
	      arg_type=int;
	      type="int";
	      name="src_row";
	      required=0;
	      def_val=;
	      expr {
	       expr="oid_id";
	      };
	     };
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   MethodCall @[0] {
	    desc="get from testing data table: assuming non-null and oid's labeled after train guy..";
	    flags=;
	    result_var=NULL;
	    obj=$452$;
	    method=DataTable::CopyCell;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=Variant;
	      type="Variant";
	      name="dest_col";
	      required=0;
	      def_val=;
	      expr {
	       expr="\"Image\"";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=int;
	      type="int";
	      name="dest_row";
	      required=0;
	      def_val=;
	      expr {
	       expr="0";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=const_DataTable_ref;
	      type="const DataTable&";
	      name="src";
	      required=0;
	      def_val=;
	      expr {
	       expr="image_test_data";
	      };
	     };
	     ProgArg @[3] {
	      arg_type=Variant;
	      type="Variant";
	      name="src_col";
	      required=0;
	      def_val=;
	      expr {
	       expr="\"Image\"";
	      };
	     };
	     ProgArg @[4] {
	      arg_type=int;
	      type="int";
	      name="src_row";
	      required=0;
	      def_val=;
	      expr {
	       expr="oid_id - image_train_data.rows";
	      };
	     };
	    };
	   };
	  };
	 };
	 MethodCall @[3] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[2][0].prog_code[0].true_code[5].true_code[0].local_vars[0]$453$;
	  obj=$452$;
	  method=DataTable::GetValAsMatrixColName;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=const_taString_ref;
	    type="const taString&";
	    name="col_name";
	    required=0;
	    def_val="\"\"";
	    expr {
	     expr="\"Image\"";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=int;
	    type="int";
	    name="row";
	    required=0;
	    def_val=;
	    expr {
	     expr="0";
	    };
	   };
	  };
	 };
	 MathCall @[4] {
	  desc=;
	  flags=OFF;
	  result_var=NULL;
	  object_type=taMath_float;
	  method=taMath_float::vec_norm_max;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=float_Matrix_ptr;
	    type="float_Matrix*";
	    name="vec";
	    required=1;
	    def_val=;
	    expr {
	     expr="img_matrix";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=float;
	    type="float";
	    name="max";
	    required=0;
	    def_val="1.0f";
	    expr {
	     expr="1.0";
	    };
	   };
	  };
	 };
	 IfElse @[5] {
	  desc=;
	  flags=;
	  cond {
	   expr="foveate";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   MethodCall @[0] {
	    desc="Key operation: Read and filter the image into the image data table";
	    flags=;
	    result_var=NULL;
	    obj=$412$;
	    method=RetinaSpec::LookAtImageData;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=float_Matrix_ref;
	      type="float_Matrix&";
	      name="img_data";
	      required=1;
	      def_val=;
	      expr {
	       expr="img_matrix";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dt";
	      required=1;
	      def_val=;
	      expr {
	       expr="image_data";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=RetinalSpacingSpec::Region;
	      type="RetinalSpacingSpec::Region";
	      name="region";
	      required=1;
	      def_val=;
	      expr {
	       expr="RetinalSpacingSpec::FOVEA";
	      };
	     };
	     ProgArg @[3] {
	      arg_type=float;
	      type="float";
	      name="box_ll_x";
	      required=1;
	      def_val=;
	      expr {
	       expr="foveate_box_llx";
	      };
	     };
	     ProgArg @[4] {
	      arg_type=float;
	      type="float";
	      name="box_ll_y";
	      required=1;
	      def_val=;
	      expr {
	       expr="foveate_box_lly";
	      };
	     };
	     ProgArg @[5] {
	      arg_type=float;
	      type="float";
	      name="box_ur_x";
	      required=1;
	      def_val=;
	      expr {
	       expr="foveate_box_urx";
	      };
	     };
	     ProgArg @[6] {
	      arg_type=float;
	      type="float";
	      name="box_ur_y";
	      required=1;
	      def_val=;
	      expr {
	       expr="foveate_box_ury";
	      };
	     };
	     ProgArg @[7] {
	      arg_type=float;
	      type="float";
	      name="move_x";
	      required=0;
	      def_val="0";
	      expr {
	       expr="translate_x";
	      };
	     };
	     ProgArg @[8] {
	      arg_type=float;
	      type="float";
	      name="move_y";
	      required=0;
	      def_val="0";
	      expr {
	       expr="translate_y";
	      };
	     };
	     ProgArg @[9] {
	      arg_type=float;
	      type="float";
	      name="scale";
	      required=0;
	      def_val="1.0f";
	      expr {
	       expr="scale";
	      };
	     };
	     ProgArg @[10] {
	      arg_type=float;
	      type="float";
	      name="rotate";
	      required=0;
	      def_val="0.0f";
	      expr {
	       expr="rotate";
	      };
	     };
	     ProgArg @[11] {
	      arg_type=bool;
	      type="bool";
	      name="superimpose";
	      required=0;
	      def_val="false";
	      expr {
	       expr="false";
	      };
	     };
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   MethodCall @[0] {
	    desc="Key operation: Read and filter the image into the image data table ";
	    flags=;
	    result_var=NULL;
	    obj=$412$;
	    method=RetinaSpec::TransformImageData;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=float_Matrix_ref;
	      type="float_Matrix&";
	      name="img_data";
	      required=1;
	      def_val=;
	      expr {
	       expr="img_matrix";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dt";
	      required=1;
	      def_val=;
	      expr {
	       expr="image_data";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=float;
	      type="float";
	      name="move_x";
	      required=0;
	      def_val="0.0f";
	      expr {
	       expr="translate_x";
	      };
	     };
	     ProgArg @[3] {
	      arg_type=float;
	      type="float";
	      name="move_y";
	      required=0;
	      def_val="0.0f";
	      expr {
	       expr="translate_y";
	      };
	     };
	     ProgArg @[4] {
	      arg_type=float;
	      type="float";
	      name="scale";
	      required=0;
	      def_val="1.0f";
	      expr {
	       expr="scale";
	      };
	     };
	     ProgArg @[5] {
	      arg_type=float;
	      type="float";
	      name="rotate";
	      required=0;
	      def_val="0.0f";
	      expr {
	       expr="rotate";
	      };
	     };
	     ProgArg @[6] {
	      arg_type=bool;
	      type="bool";
	      name="superimpose";
	      required=0;
	      def_val="false";
	      expr {
	       expr="false";
	      };
	     };
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 IfElse @[0] {
	  desc=;
	  flags=;
	  cond {
	   expr="foveate";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   MethodCall @[0] {
	    desc="Key operation: Read and filter the image into the image data table";
	    flags=OFF;
	    result_var=NULL;
	    obj=$412$;
	    method=RetinaSpec::LookAtImageName;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=const_taString_ref;
	      type="const taString&";
	      name="img_fname";
	      required=1;
	      def_val=;
	      expr {
	       expr="file_path + \"/\" + filename";
	      };
	     };
	     ProgArg @[1] {
	      arg_type=DataTable_ptr;
	      type="DataTable*";
	      name="dt";
	      required=1;
	      def_val=;
	      expr {
	       expr="image_data";
	      };
	     };
	     ProgArg @[2] {
	      arg_type=RetinalSpacingSpec::Region;
	      type="RetinalSpacingSpec::Region";
	      name="region";
	      required=1;
	      def_val=;
	      expr {
	       expr="RetinalSpacingSpec::FOVEA";
	      };
	     };
	     ProgArg @[3] {
	      arg_type=float;
	      type="float";
	      name="box_ll_x";
	      required=1;
	      def_val=;
	      expr {
	       expr="foveate_box_llx";
	      };
	     };
	     ProgArg @[4] {
	      arg_type=float;
	      type="float";
	      name="box_ll_y";
	      required=1;
	      def_val=;
	      expr {
	       expr="foveate_box_lly";
	      };
	     };
	     ProgArg @[5] {
	      arg_type=float;
	      type="float";
	      name="box_ur_x";
	      required=1;
	      def_val=;
	      expr {
	       expr="foveate_box_urx";
	      };
	     };
	     ProgArg @[6] {
	      arg_type=float;
	      type="float";
	      name="box_ur_y";
	      required=1;
	      def_val=;
	      expr {
	       expr="foveate_box_ury";
	      };
	     };
	     ProgArg @[7] {
	      arg_type=float;
	      type="float";
	      name="move_x";
	      required=0;
	      def_val="0";
	      expr {
	       expr="translate_x";
	      };
	     };
	     ProgArg @[8] {
	      arg_type=float;
	      type="float";
	      name="move_y";
	      required=0;
	      def_val="0";
	      expr {
	       expr="translate_y";
	      };
	     };
	     ProgArg @[9] {
	      arg_type=float;
	      type="float";
	      name="scale";
	      required=0;
	      def_val="1.0f";
	      expr {
	       expr="scale";
	      };
	     };
	     ProgArg @[10] {
	      arg_type=float;
	      type="float";
	      name="rotate";
	      required=0;
	      def_val="0.0f";
	      expr {
	       expr="rotate";
	      };
	     };
	     ProgArg @[11] {
	      arg_type=bool;
	      type="bool";
	      name="superimpose";
	      required=0;
	      def_val="false";
	      expr {
	       expr="false";
	      };
	     };
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   IfElse @[0] {
	    desc=;
	    flags=;
	    cond {
	     expr="use_stim_gen";
	    };
	    true_code {
	     name=;
	     el_typ=ProgEl;
	     el_def=0;
	     ProgramCall @[0] {
	      desc=;
	      flags=;
	      target=.projects[0].programs.gp[2][1]$454$;
	      targ_ld_init="*PopoutStimGen*";
	      prog_args {
	       name=;
	       el_typ=ProgArg;
	       el_def=0;
	      };
	     };
	     MethodCall @[1] {
	      desc="Key operation: Read and filter the image into the image data table ";
	      flags=;
	      result_var=NULL;
	      obj=$412$;
	      method=RetinaSpec::TransformImage;
	      meth_args {
	       name=;
	       el_typ=ProgArg;
	       el_def=0;
	       ProgArg @[0] {
		arg_type=taImage_ref;
		type="taImage&";
		name="img";
		required=1;
		def_val=;
		expr {
		 expr="Canvas";
		};
	       };
	       ProgArg @[1] {
		arg_type=DataTable_ptr;
		type="DataTable*";
		name="dt";
		required=1;
		def_val=;
		expr {
		 expr="image_data";
		};
	       };
	       ProgArg @[2] {
		arg_type=float;
		type="float";
		name="move_x";
		required=0;
		def_val="0";
		expr {
		 expr="translate_x";
		};
	       };
	       ProgArg @[3] {
		arg_type=float;
		type="float";
		name="move_y";
		required=0;
		def_val="0";
		expr {
		 expr="translate_y";
		};
	       };
	       ProgArg @[4] {
		arg_type=float;
		type="float";
		name="scale";
		required=0;
		def_val="1.0f";
		expr {
		 expr="scale";
		};
	       };
	       ProgArg @[5] {
		arg_type=float;
		type="float";
		name="rotate";
		required=0;
		def_val="0.0f";
		expr {
		 expr="rotate";
		};
	       };
	       ProgArg @[6] {
		arg_type=bool;
		type="bool";
		name="superimpose";
		required=0;
		def_val="false";
		expr {
		 expr="false";
		};
	       };
	      };
	     };
	    };
	    false_code {
	     name=;
	     el_typ=ProgEl;
	     el_def=0;
	     MethodCall @[0] {
	      desc="Key operation: Read and filter the image into the image data table ";
	      flags=;
	      result_var=NULL;
	      obj=$412$;
	      method=RetinaSpec::TransformImageName;
	      meth_args {
	       name=;
	       el_typ=ProgArg;
	       el_def=0;
	       ProgArg @[0] {
		arg_type=const_taString_ref;
		type="const taString&";
		name="img_fname";
		required=1;
		def_val=;
		expr {
		 expr="filename";
		};
	       };
	       ProgArg @[1] {
		arg_type=DataTable_ptr;
		type="DataTable*";
		name="dt";
		required=1;
		def_val=;
		expr {
		 expr="image_data";
		};
	       };
	       ProgArg @[2] {
		arg_type=float;
		type="float";
		name="move_x";
		required=0;
		def_val="0";
		expr {
		 expr="translate_x";
		};
	       };
	       ProgArg @[3] {
		arg_type=float;
		type="float";
		name="move_y";
		required=0;
		def_val="0";
		expr {
		 expr="translate_y";
		};
	       };
	       ProgArg @[4] {
		arg_type=float;
		type="float";
		name="scale";
		required=0;
		def_val="1.0f";
		expr {
		 expr="scale";
		};
	       };
	       ProgArg @[5] {
		arg_type=float;
		type="float";
		name="rotate";
		required=0;
		def_val="0.0f";
		expr {
		 expr="rotate";
		};
	       };
	       ProgArg @[6] {
		arg_type=bool;
		type="bool";
		name="superimpose";
		required=0;
		def_val="false";
		expr {
		 expr="false";
		};
	       };
	      };
	     };
	    };
	   };
	  };
	 };
	};
       };
       If @[6] {
	desc=;
	flags=;
	cond {
	 expr="occlusion_id.nonempty() && Random::BoolProb(occlude_p)";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc="Key operation: Read and filter the image into the image data table";
	  flags=;
	  result_var=NULL;
	  obj=$412$;
	  method=RetinaSpec::RenderOccluder;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="dt";
	    required=0;
	    def_val=;
	    expr {
	     expr="image_data";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=float;
	    type="float";
	    name="llx";
	    required=0;
	    def_val=;
	    expr {
	     expr="occlude_box_llx";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=float;
	    type="float";
	    name="lly";
	    required=0;
	    def_val=;
	    expr {
	     expr="occlude_box_lly";
	    };
	   };
	   ProgArg @[3] {
	    arg_type=float;
	    type="float";
	    name="urx";
	    required=0;
	    def_val=;
	    expr {
	     expr="occlude_box_urx";
	    };
	   };
	   ProgArg @[4] {
	    arg_type=float;
	    type="float";
	    name="ury";
	    required=0;
	    def_val=;
	    expr {
	     expr="occlude_box_ury";
	    };
	   };
	  };
	 };
	};
       };
       MethodCall @[7] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$411$;
	method=TimeUsed::EndTimer;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       MethodCall @[8] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$409$;
	method=TimeUsed::StartTimer;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=bool;
	  type="bool";
	  name="reset_used";
	  required=0;
	  def_val="true";
	  expr {
	   expr="false";
	  };
	 };
	};
       };
       MethodCall @[9] {
	desc="Key operation: Read and filter the image into the image data table";
	flags=;
	result_var=NULL;
	obj=$412$;
	method=RetinaSpec::FilterImageData;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="dt";
	  required=1;
	  def_val=;
	  expr {
	   expr="image_data";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=bool;
	  type="bool";
	  name="superimpose";
	  required=0;
	  def_val="false";
	  expr {
	   expr="false";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=int;
	  type="int";
	  name="renorm";
	  required=0;
	  def_val="1";
	  expr {
	   expr="renorm";
	  };
	 };
	};
       };
       IfElse @[10] {
	desc=;
	flags=;
	cond {
	 expr="attention_mod";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MethodCall @[0] {
	  desc="Key operation: Read and filter the image into the image data table";
	  flags=;
	  result_var=NULL;
	  obj=$412$;
	  method=RetinaSpec::AttendRegion;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="dt";
	    required=1;
	    def_val=;
	    expr {
	     expr="image_data";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=RetinalSpacingSpec::Region;
	    type="RetinalSpacingSpec::Region";
	    name="region";
	    required=0;
	    def_val="RetinalSpacingSpec::FOVEA";
	    expr {
	     expr="RetinalSpacingSpec::FOVEA";
	    };
	   };
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
       MethodCall @[11] {
	desc="Key operation: Read and filter the image into the image data table";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[2][0].vars[59]$455$;
	method=V1GaborSpec::FilterRetinaData;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="v1_out_dt";
	  required=0;
	  def_val=;
	  expr {
	   expr="v1_data";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable_ptr;
	  type="DataTable*";
	  name="ret_in_dt";
	  required=0;
	  def_val=;
	  expr {
	   expr="image_data";
	  };
	 };
	};
       };
       Comment @[12] {
	desc="set Output targets (note: order must be same as in LabelOutputs)";
	flags=;
       };
       AssignExpr @[13] {
	desc=;
	flags=;
	result_var=$401$;
	expr {
	 expr="0";
	};
       };
       AssignExpr @[14] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[2][0].vars[37]$456$;
	expr {
	 expr="image_data.data.Output";
	};
       };
       AssignExpr @[15] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[2][0].vars[38]$457$;
	expr {
	 expr="output_col->GetCellGeom(0) * output_col->GetCellGeom(1)";
	};
       };
       MethodCall @[16] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$400$;
	method=DataTable::InitVals;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="init_val";
	  required=0;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="\"Output\"";
	  };
	 };
	};
       };
       MethodCall @[17] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$400$;
	method=DataTable::InitVals;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_Variant_ref;
	  type="const Variant&";
	  name="init_val";
	  required=0;
	  def_val=;
	  expr {
	   expr="0.0";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=Variant;
	  type="Variant";
	  name="col";
	  required=0;
	  def_val=;
	  expr {
	   expr="\"Target\"";
	  };
	 };
	};
       };
       FunctionCall @[18] {
	desc=;
	flags=;
	result_var=NULL;
	fun=.projects[0].programs.gp[2][0].functions[0]$458$;
	fun_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="data_table";
	  required=1;
	  def_val=;
	  expr {
	   expr="SuperCat";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="id_val";
	  required=1;
	  def_val=;
	  expr {
	   expr="supercat_id";
	  };
	 };
	};
       };
       FunctionCall @[19] {
	desc=;
	flags=;
	result_var=NULL;
	fun=$458$;
	fun_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="data_table";
	  required=1;
	  def_val=;
	  expr {
	   expr="Category";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="id_val";
	  required=1;
	  def_val=;
	  expr {
	   expr="category_id";
	  };
	 };
	};
       };
       FunctionCall @[20] {
	desc=;
	flags=;
	result_var=NULL;
	fun=$458$;
	fun_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="data_table";
	  required=1;
	  def_val=;
	  expr {
	   expr="SubCat";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="id_val";
	  required=1;
	  def_val=;
	  expr {
	   expr="subcat_id";
	  };
	 };
	};
       };
       FunctionCall @[21] {
	desc=;
	flags=;
	result_var=NULL;
	fun=$458$;
	fun_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="data_table";
	  required=1;
	  def_val=;
	  expr {
	   expr="Feature1";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="id_val";
	  required=1;
	  def_val=;
	  expr {
	   expr="feature1_id";
	  };
	 };
	};
       };
       FunctionCall @[22] {
	desc=;
	flags=;
	result_var=NULL;
	fun=$458$;
	fun_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="data_table";
	  required=1;
	  def_val=;
	  expr {
	   expr="Feature2";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="id_val";
	  required=1;
	  def_val=;
	  expr {
	   expr="feature2_id";
	  };
	 };
	};
       };
       FunctionCall @[23] {
	desc=;
	flags=;
	result_var=NULL;
	fun=$458$;
	fun_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="data_table";
	  required=1;
	  def_val=;
	  expr {
	   expr="Feature3";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="id_val";
	  required=1;
	  def_val=;
	  expr {
	   expr="feature3_id";
	  };
	 };
	};
       };
       FunctionCall @[24] {
	desc=;
	flags=;
	result_var=NULL;
	fun=$458$;
	fun_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="data_table";
	  required=1;
	  def_val=;
	  expr {
	   expr="Feature4";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="id_val";
	  required=1;
	  def_val=;
	  expr {
	   expr="feature4_id";
	  };
	 };
	};
       };
       DoneWritingDataRow @[25] {
	desc=;
	flags=;
	data_var=$407$;
       };
       MethodCall @[26] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$410$;
	method=TimeUsed::EndTimer;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       MethodCall @[27] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$409$;
	method=TimeUsed::EndTimer;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="Final read of image data before applying to network";
      flags=;
      result_var=NULL;
      obj=$400$;
      method=DataBlock_Idx::ReadItem;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="idx";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="write the data to the network!";
      flags=;
      result_var=NULL;
      obj=$408$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[1] {
    name="PopoutStimGen";
    tags="Canvas, Drawing, DataGen, Image";
    desc="generate popout stimulus displays";
    flags=;
    objs {
     name=;
     el_typ=taCanvas;
     el_def=0;
     taCanvas @[0] {
      name="Canvas";
      coord_type=NORMALIZED;
     };
     DataTable @[1] {
      name="StimGenData";
      desc=;
      data {
       name="data";
       el_typ=float_Data;
       el_def=0;
       float_Data @[0] {
	name="Canvas";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 112;112;3;	};
	calc_expr {
	 expr=;
	};
	ar {
	 name=;
		[112 112 3 1] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.47450981;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.054901961;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.9254902;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;0.10980392;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.67843139;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.078431375;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.47450981;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.054901961;0;0;0;0;0;0;0;0;
0.47450981;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.054901961;
0;0;0;0;0;0;0;0;0.47450981;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.054901961;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.9254902;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;0.10980392;0;0;0;0;0;0;
0;0;0.9254902;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;0.10980392;0;0;0;0;0;0;0;0;
0.9254902;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;0.10980392;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.67843139;0.73725492;0.73725492;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.078431375;0;0;0;0;
0;0;0;0;0.67843139;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;
0.73725492;0.73725492;0.73725492;0.078431375;0;0;0;0;0;0;
0;0;0.67843139;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;
0.73725492;0.078431375;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.47450981;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.054901961;0;0;
0;0;0;0;0;0;0.47450981;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.054901961;0;0;0;0;
0;0;0;0;0.47450981;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.054901961;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.9254902;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;0.10980392;
0;0;0;0;0;0;0;0;0.9254902;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;0.10980392;0;0;
0;0;0;0;0;0;0.9254902;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;0.10980392;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.67843139;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;
0.73725492;0.078431375;0;0;0;0;0;0;0;0;
0.67843139;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.078431375;
0;0;0;0;0;0;0;0;0.67843139;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.078431375;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.47450981;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.054901961;0;0;0;0;0;0;
0;0;0.47450981;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;0.51764709;
0.51764709;0.054901961;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.9254902;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;0.10980392;0;0;0;0;
0;0;0;0;0.9254902;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;0.10980392;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.67843139;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.078431375;0;0;
0;0;0;0;0;0;0.67843139;0.73725492;0.73725492;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;
0.73725492;0.73725492;0.73725492;0.73725492;0.73725492;0.078431375;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="DisplayType";
      desc="type of display to create";
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="COLOR";
	value=0;
	desc=;
       };
       DynEnumItem @[1] {
	name="ORIENTATION";
	value=1;
	desc=;
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="canvas_width";
      var_type=T_Int;
      int_val=112;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="canvas_height";
      var_type=T_Int;
      int_val=112;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="Canvas";
      var_type=T_Object;
      object_type=taCanvas;
      object_val=$395$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="StimGenData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].programs.gp[2][1].objs[1]$459$;
      objs_ptr=1;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[4] {
      name="disp_type";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[2][1].types[0]$460$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[5] {
      name="disp_size";
      var_type=T_Int;
      int_val=3;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="display size, as number in each dimension of a square grid of oriented lines";
     };
     ProgVar @[6] {
      name="bg_color";
      var_type=T_String;
      string_val="black";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="color of background";
     };
     ProgVar @[7] {
      name="non_targ_color";
      var_type=T_String;
      string_val="lime";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="color of non-target stimulus";
     };
     ProgVar @[8] {
      name="targ_color";
      var_type=T_String;
      string_val="red";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="color of target stimulus";
     };
     ProgVar @[9] {
      name="trg_ctr";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="always put the target in the center";
     };
     ProgVar @[10] {
      name="line_len";
      var_type=T_Real;
      real_val=0.15;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="line length, as proportion of entire display";
     };
     ProgVar @[11] {
      name="line_width";
      var_type=T_Real;
      real_val=0.02;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[12] {
      name="spacing";
      var_type=T_Real;
      real_val=0.1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="space between lines (normalized units)";
     };
     ProgVar @[13] {
      name="bg_line_angle";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="angle of background lines";
     };
     ProgVar @[14] {
      name="fg_line_angle";
      var_type=T_Real;
      real_val=90;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="angle of target line";
     };
     ProgVar @[15] {
      name="orientation_jitter";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="jitter in orientation of lines";
     };
     ProgVar @[16] {
      name="total_size";
      var_type=T_Real;
      real_val=0.6499999999999999;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="total size of display = disp_size * line_len + (disp_size-1) * spacing";
     };
     ProgVar @[17] {
      name="start_coord";
      var_type=T_Real;
      real_val=0.3;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="where to start drawing";
     };
     ProgVar @[18] {
      name="incr";
      var_type=T_Real;
      real_val=0.25;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="increment per line";
     };
     ProgVar @[19] {
      name="cur_x";
      var_type=T_Real;
      real_val=0.8;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[20] {
      name="cur_y";
      var_type=T_Real;
      real_val=0.8;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[21] {
      name="y";
      var_type=T_Int;
      int_val=3;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[22] {
      name="x";
      var_type=T_Int;
      int_val=3;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[23] {
      name="trg_idx";
      var_type=T_Int;
      int_val=8;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="index of target item";
     };
     ProgVar @[24] {
      name="trg_x";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="index of target item";
     };
     ProgVar @[25] {
      name="trg_y";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="index of target item";
     };
     ProgVar @[26] {
      name="idx";
      var_type=T_Int;
      int_val=9;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="index of line";
     };
     ProgVar @[27] {
      name="cur_angle";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[28] {
      name="cur_jitter";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[29] {
      name="cur_color";
      var_type=T_String;
      string_val="red";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
     Function @[0] {
      desc=;
      flags=;
      name="DrawLine";
      return_type=T_Int;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="ctr_x";
	var_type=T_Real;
	real_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc="line center - x";
       };
       ProgVar @[1] {
	name="ctr_y";
	var_type=T_Real;
	real_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc=;
       };
       ProgVar @[2] {
	name="angle";
	var_type=T_Real;
	real_val=0;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc=;
       };
       ProgVar @[3] {
	name="color";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc=;
       };
      };
      fun_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgVars @[0] {
	desc=;
	flags=;
	local_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @[0] {
	  name="st_x";
	  var_type=T_Real;
	  real_val=0;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[1] {
	  name="st_y";
	  var_type=T_Real;
	  real_val=0;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[2] {
	  name="ed_x";
	  var_type=T_Real;
	  real_val=0;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	 ProgVar @[3] {
	  name="ed_y";
	  var_type=T_Real;
	  real_val=0;
	  objs_ptr=0;
	  flags=NULL_CHECK|LOCAL_VAR|USED;
	  reference=0;
	  desc=;
	 };
	};
       };
       MethodCall @[1] {
	desc=;
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[2][1].vars[2]$461$;
	method=taCanvas::PenColorName;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="const taString&";
	  name="name";
	  required=0;
	  def_val="\"\"";
	  expr {
	   expr="color";
	  };
	 };
	};
       };
       MathCall @[2] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[2][1].functions[0].fun_code[0].local_vars[0]$462$;
	object_type=taMath_float;
	method=taMath_float::cos_deg;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=float;
	  type="float";
	  name="angle";
	  required=0;
	  def_val=;
	  expr {
	   expr="angle-180.0";
	  };
	 };
	};
       };
       MathCall @[3] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[2][1].functions[0].fun_code[0].local_vars[1]$463$;
	object_type=taMath_float;
	method=taMath_float::sin_deg;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=float;
	  type="float";
	  name="angle";
	  required=0;
	  def_val=;
	  expr {
	   expr="angle-180.0";
	  };
	 };
	};
       };
       MathCall @[4] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[2][1].functions[0].fun_code[0].local_vars[2]$464$;
	object_type=taMath_float;
	method=taMath_float::cos_deg;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=float;
	  type="float";
	  name="angle";
	  required=0;
	  def_val=;
	  expr {
	   expr="angle";
	  };
	 };
	};
       };
       MathCall @[5] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[2][1].functions[0].fun_code[0].local_vars[3]$465$;
	object_type=taMath_float;
	method=taMath_float::sin_deg;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=float;
	  type="float";
	  name="angle";
	  required=0;
	  def_val=;
	  expr {
	   expr="angle";
	  };
	 };
	};
       };
       AssignExpr @[6] {
	desc=;
	flags=;
	result_var=$462$;
	expr {
	 expr="ctr_x + .5 * line_len * st_x";
	};
       };
       AssignExpr @[7] {
	desc=;
	flags=;
	result_var=$463$;
	expr {
	 expr="ctr_y + .5 * line_len * st_y";
	};
       };
       AssignExpr @[8] {
	desc=;
	flags=;
	result_var=$464$;
	expr {
	 expr="ctr_x + .5 * line_len * ed_x";
	};
       };
       AssignExpr @[9] {
	desc=;
	flags=;
	result_var=$465$;
	expr {
	 expr="ctr_y + .5 * line_len * ed_y";
	};
       };
       MethodCall @[10] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$461$;
	method=taCanvas::Line;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=float;
	  type="float";
	  name="x1";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_x";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=float;
	  type="float";
	  name="y1";
	  required=0;
	  def_val=;
	  expr {
	   expr="st_y";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=float;
	  type="float";
	  name="x2";
	  required=0;
	  def_val=;
	  expr {
	   expr="ed_x";
	  };
	 };
	 ProgArg @[3] {
	  arg_type=float;
	  type="float";
	  name="y2";
	  required=0;
	  def_val=;
	  expr {
	   expr="ed_y";
	  };
	 };
	};
       };
      };
     };
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     ResetDataRows @[0] {
      desc=;
      flags=;
      data_var=.projects[0].programs.gp[2][1].vars[3]$466$;
     };
     MethodCall @[1] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$461$;
      method=taImage::SetImageSize;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="width";
	required=0;
	def_val=;
	expr {
	 expr="canvas_width";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="height";
	required=0;
	def_val=;
	expr {
	 expr="canvas_height";
	};
       };
      };
     };
     MethodCall @[2] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$461$;
      method=taImage::ConfigDataColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="StimGenData";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"Canvas\"";
	};
       };
       ProgArg @[2] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=1;
	def_val=;
	expr {
	 expr="taBase::VT_FLOAT";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="rgb";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     AddNewDataRow @[3] {
      desc=;
      flags=;
      data_var=$466$;
     };
     MethodCall @[4] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$461$;
      method=taCanvas::InitCanvas;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[5] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$461$;
      method=taCanvas::EraseName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="bg_color";
	};
       };
      };
     };
     MethodCall @[6] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$461$;
      method=taCanvas::PenWidth;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=float;
	type="float";
	name="width";
	required=0;
	def_val=;
	expr {
	 expr="line_width";
	};
       };
      };
     };
     AssignExpr @[7] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[2][1].vars[16]$467$;
      expr {
       expr="line_len* disp_size +  spacing*(disp_size-1)";
      };
     };
     AssignExpr @[8] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[2][1].vars[18]$468$;
      expr {
       expr="line_len+ spacing";
      };
     };
     AssignExpr @[9] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[2][1].vars[17]$469$;
      expr {
       expr=".5 - total_size * .5 + .5 * incr";
      };
     };
     RandomCall @[10] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[2][1].vars[24]$470$;
      object_type=Random;
      method=Random::IntZeroN;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="n";
	required=0;
	def_val=;
	expr {
	 expr="disp_size";
	};
       };
      };
     };
     RandomCall @[11] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[2][1].vars[25]$471$;
      object_type=Random;
      method=Random::IntZeroN;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="n";
	required=0;
	def_val=;
	expr {
	 expr="disp_size";
	};
       };
      };
     };
     AssignExpr @[12] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[2][1].vars[23]$472$;
      expr {
       expr="trg_y * disp_size + trg_x";
      };
     };
     IfElse @[13] {
      desc=;
      flags=;
      cond {
       expr="trg_ctr";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=$472$;
	expr {
	 expr=".5 * (disp_size * disp_size)";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     ForLoop @[14] {
      desc=;
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[2][1].vars[20]$473$;
	expr {
	 expr="start_coord + incr * y";
	};
       };
       ForLoop @[1] {
	desc=;
	flags=;
	loop_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[2][1].vars[19]$474$;
	  expr {
	   expr="start_coord + incr * x";
	  };
	 };
	 AssignExpr @[1] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[2][1].vars[27]$475$;
	  expr {
	   expr="bg_line_angle";
	  };
	 };
	 AssignExpr @[2] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[2][1].vars[29]$476$;
	  expr {
	   expr="non_targ_color";
	  };
	 };
	 RandomCall @[3] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[2][1].vars[28]$477$;
	  object_type=Random;
	  method=Random::UniformMinMax;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=double;
	    type="double";
	    name="min";
	    required=0;
	    def_val=;
	    expr {
	     expr="-  orientation_jitter";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="max";
	    required=0;
	    def_val=;
	    expr {
	     expr="orientation_jitter";
	    };
	   };
	  };
	 };
	 IfElse @[4] {
	  desc=;
	  flags=;
	  cond {
	   expr="idx ==  trg_idx";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   IfElse @[0] {
	    desc=;
	    flags=;
	    cond {
	     expr="disp_type ==  COLOR";
	    };
	    true_code {
	     name=;
	     el_typ=ProgEl;
	     el_def=0;
	     AssignExpr @[0] {
	      desc=;
	      flags=;
	      result_var=$476$;
	      expr {
	       expr="targ_color";
	      };
	     };
	    };
	    false_code {
	     name=;
	     el_typ=ProgEl;
	     el_def=0;
	     AssignExpr @[0] {
	      desc=;
	      flags=;
	      result_var=$475$;
	      expr {
	       expr="fg_line_angle";
	      };
	     };
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	  };
	 };
	 FunctionCall @[5] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  fun=.projects[0].programs.gp[2][1].functions[0]$478$;
	  fun_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=double;
	    type="double";
	    name="ctr_x";
	    required=1;
	    def_val=;
	    expr {
	     expr="cur_x";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="ctr_y";
	    required=1;
	    def_val=;
	    expr {
	     expr="cur_y";
	    };
	   };
	   ProgArg @[2] {
	    arg_type=double;
	    type="double";
	    name="angle";
	    required=1;
	    def_val=;
	    expr {
	     expr="cur_angle +  cur_jitter";
	    };
	   };
	   ProgArg @[3] {
	    arg_type=taString;
	    type="String";
	    name="color";
	    required=1;
	    def_val=;
	    expr {
	     expr="cur_color";
	    };
	   };
	  };
	 };
	};
	init {
	 expr="x = 0";
	};
	test {
	 expr="x < disp_size";
	};
	iter {
	 expr="x++, idx++";
	};
       };
      };
      init {
       expr="y = 0, idx=0";
      };
      test {
       expr="y < disp_size";
      };
      iter {
       expr="y++";
      };
     };
     Comment @[15] {
      desc="update the datatable with the current image";
      flags=;
     };
     MethodCall @[16] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$461$;
      method=taImage::ImageToDataCellName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="StimGenData";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"Canvas\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     DoneWritingDataRow @[17] {
      desc=;
      flags=;
      data_var=$466$;
     };
    };
   };
   Program @[2] {
    name="SetOutputGeom";
    tags=;
    desc="set geometry of output layer, in all the relevant objects";
    flags=;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="un_x";
      var_type=T_Int;
      int_val=7;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="un_y";
      var_type=T_Int;
      int_val=7;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="gp_x";
      var_type=T_Int;
      int_val=3;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="gp_y";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="RetinaData_hi52_clr";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$393$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="UnitNames";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$381$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[2] {
      name="hv_hi52_clr_nwct_noit";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[3] {
      name="hv_hi52_clr_nwct_it";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
     Function @[0] {
      desc=;
      flags=;
      name="SetLayGeom";
      return_type=T_Int;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="out_layer";
	var_type=T_Object;
	object_type=LeabraLayer;
	object_val=NULL;
	objs_ptr=0;
	flags=LOCAL_VAR|FUN_ARG|USED;
	reference=0;
	desc=;
       };
      };
      fun_code {
       name=;
       el_typ=ProgVars;
       el_def=0;
       ProgVars @[0] {
	desc=;
	flags=;
	local_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       MethodCall @[1] {
	desc=;
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[2][2].functions[0].args[0]$479$;
	method=LeabraLayer::SetLayerUnitGeom;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="x";
	  required=1;
	  def_val=;
	  expr {
	   expr="un_x";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="y";
	  required=1;
	  def_val=;
	  expr {
	   expr="un_y";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="n_not_xy";
	  required=0;
	  def_val="false";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[3] {
	  arg_type=int;
	  type="int";
	  name="n";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	};
       };
       MethodCall @[2] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$479$;
	method=LeabraLayer::SetLayerUnitGpGeom;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="x";
	  required=1;
	  def_val=;
	  expr {
	   expr="gp_x";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="y";
	  required=1;
	  def_val=;
	  expr {
	   expr="gp_y";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="n_not_xy";
	  required=0;
	  def_val="false";
	  expr {
	   expr=;
	  };
	 };
	 ProgArg @[3] {
	  arg_type=int;
	  type="int";
	  name="n";
	  required=0;
	  def_val="0";
	  expr {
	   expr=;
	  };
	 };
	};
       };
      };
     };
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][2].vars[1]$480$;
      method=DataTable::ChangeColTypeGeom;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"Output\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=1;
	def_val=;
	expr {
	 expr="taBase::VT_STRING";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="dims";
	required=0;
	def_val="0";
	expr {
	 expr="4";
	};
       };
       ProgArg @[3] {
	arg_type=int;
	type="int";
	name="d0";
	required=0;
	def_val="0";
	expr {
	 expr="un_x";
	};
       };
       ProgArg @[4] {
	arg_type=int;
	type="int";
	name="d1";
	required=0;
	def_val="0";
	expr {
	 expr="un_y";
	};
       };
       ProgArg @[5] {
	arg_type=int;
	type="int";
	name="d2";
	required=0;
	def_val="0";
	expr {
	 expr="gp_x";
	};
       };
       ProgArg @[6] {
	arg_type=int;
	type="int";
	name="d3";
	required=0;
	def_val="0";
	expr {
	 expr="gp_y";
	};
       };
       ProgArg @[7] {
	arg_type=int;
	type="int";
	name="d4";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
       ProgArg @[8] {
	arg_type=int;
	type="int";
	name="d5";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
       ProgArg @[9] {
	arg_type=int;
	type="int";
	name="d6";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[1] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[2][2].vars[0]$481$;
      method=DataTable::ChangeColTypeGeom;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"Output\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=1;
	def_val=;
	expr {
	 expr="taBase::VT_FLOAT";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="dims";
	required=0;
	def_val="0";
	expr {
	 expr="4";
	};
       };
       ProgArg @[3] {
	arg_type=int;
	type="int";
	name="d0";
	required=0;
	def_val="0";
	expr {
	 expr="un_x";
	};
       };
       ProgArg @[4] {
	arg_type=int;
	type="int";
	name="d1";
	required=0;
	def_val="0";
	expr {
	 expr="un_y";
	};
       };
       ProgArg @[5] {
	arg_type=int;
	type="int";
	name="d2";
	required=0;
	def_val="0";
	expr {
	 expr="gp_x";
	};
       };
       ProgArg @[6] {
	arg_type=int;
	type="int";
	name="d3";
	required=0;
	def_val="0";
	expr {
	 expr="gp_y";
	};
       };
       ProgArg @[7] {
	arg_type=int;
	type="int";
	name="d4";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
       ProgArg @[8] {
	arg_type=int;
	type="int";
	name="d5";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
       ProgArg @[9] {
	arg_type=int;
	type="int";
	name="d6";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[2] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$481$;
      method=DataTable::ChangeColTypeGeom;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"Target\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=1;
	def_val=;
	expr {
	 expr="taBase::VT_FLOAT";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="dims";
	required=0;
	def_val="0";
	expr {
	 expr="4";
	};
       };
       ProgArg @[3] {
	arg_type=int;
	type="int";
	name="d0";
	required=0;
	def_val="0";
	expr {
	 expr="un_x";
	};
       };
       ProgArg @[4] {
	arg_type=int;
	type="int";
	name="d1";
	required=0;
	def_val="0";
	expr {
	 expr="un_y";
	};
       };
       ProgArg @[5] {
	arg_type=int;
	type="int";
	name="d2";
	required=0;
	def_val="0";
	expr {
	 expr="gp_x";
	};
       };
       ProgArg @[6] {
	arg_type=int;
	type="int";
	name="d3";
	required=0;
	def_val="0";
	expr {
	 expr="gp_y";
	};
       };
       ProgArg @[7] {
	arg_type=int;
	type="int";
	name="d4";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
       ProgArg @[8] {
	arg_type=int;
	type="int";
	name="d5";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
       ProgArg @[9] {
	arg_type=int;
	type="int";
	name="d6";
	required=0;
	def_val="0";
	expr {
	 expr=;
	};
       };
      };
     };
     FunctionCall @[3] {
      desc=;
      flags=;
      result_var=NULL;
      fun=.projects[0].programs.gp[2][2].functions[0]$482$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraLayer;
	type="LeabraLayer*";
	name="out_layer";
	required=1;
	def_val=;
	expr {
	 expr="hv_hi52_clr_nwct_it.layers.Output";
	};
       };
      };
     };
     FunctionCall @[4] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$482$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraLayer;
	type="LeabraLayer*";
	name="out_layer";
	required=1;
	def_val=;
	expr {
	 expr="hv_hi52_clr_nwct_it.layers.Target";
	};
       };
      };
     };
     FunctionCall @[5] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$482$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraLayer;
	type="LeabraLayer*";
	name="out_layer";
	required=1;
	def_val=;
	expr {
	 expr="hv_hi52_clr_nwct_noit.layers.Output";
	};
       };
      };
     };
     FunctionCall @[6] {
      desc=;
      flags=;
      result_var=NULL;
      fun=$482$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraLayer;
	type="LeabraLayer*";
	name="out_layer";
	required=1;
	def_val=;
	expr {
	 expr="hv_hi52_clr_nwct_noit.layers.Target";
	};
       };
      };
     };
    };
   };
  };
  Program_Group @.gp[3] {
   name="NetLayerCalc";
   el_typ=Program;
   el_def=0;
   step_prog=NULL;
   tags=;
   desc=;
   Program @[0] {
    name="VisionLayerCalc_clr_tiny";
    tags=;
    desc="compute sizes of layers in vision model";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="hi_v1_rf_mv";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="how much to move rf from one group to next";
     };
     ProgVar @[2] {
      name="hi_v1_rf_half";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="half-size of high-res receptive field from input to V1";
     };
     ProgVar @[3] {
      name="hi_ret_x";
      var_type=T_Int;
      int_val=22;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res retina (auto-fit to multiple of rf size)";
     };
     ProgVar @[4] {
      name="hi_ret_y";
      var_type=T_Int;
      int_val=22;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res retina (auto-fit to multiple of rf size)";
     };
     ProgVar @[5] {
      name="hi_v2_rf_half";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="half-size of high-res v2 receptive field (in group units), typically 2 (could be 3)";
     };
     ProgVar @[6] {
      name="md_v1_rf_half";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="half-size of med-res receptive field from input to V1 (must be even!)";
     };
     ProgVar @[7] {
      name="md_ret_x";
      var_type=T_Int;
      int_val=12;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res retina (auto-fit to multiple of rf size)";
     };
     ProgVar @[8] {
      name="md_ret_y";
      var_type=T_Int;
      int_val=12;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res retina (auto-fit to multiple of rf size)";
     };
     ProgVar @[9] {
      name="md_v2_rf_half";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="size of med-res v2 receptive field (in group units), typically 2 (could be 3)";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="hi_v1_x";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res v1 groups (computed!)";
     };
     ProgVar @[1] {
      name="hi_v1_y";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res v1 groups (computed!)";
     };
     ProgVar @[2] {
      name="hi_v2_x";
      var_type=T_Int;
      int_val=4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res v2 groups (computed!)";
     };
     ProgVar @[3] {
      name="hi_v2_y";
      var_type=T_Int;
      int_val=4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res v2 groups (computed!)";
     };
     ProgVar @[4] {
      name="md_v1_x";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res v1 groups (computed!)";
     };
     ProgVar @[5] {
      name="md_v1_y";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res v1 groups (computed!)";
     };
     ProgVar @[6] {
      name="md_v2_x";
      var_type=T_Int;
      int_val=4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res v2 groups (computed!)";
     };
     ProgVar @[7] {
      name="md_v2_y";
      var_type=T_Int;
      int_val=4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res v2 groups (computed!)";
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=UserScript;
     el_def=0;
     Comment @[0] {
      desc="High-Res";
      flags=;
     };
     AssignExpr @[1] {
      desc="ret -> v1";
      flags=;
      result_var=.projects[0].programs.gp[3][0].vars[0]$483$;
      expr {
       expr="((hi_ret_x - 2* hi_v1_rf_half) / hi_v1_rf_mv) +1";
      };
     };
     AssignExpr @[2] {
      desc="ret -> v1";
      flags=;
      result_var=.projects[0].programs.gp[3][0].vars[1]$484$;
      expr {
       expr="((hi_ret_y - 2*hi_v1_rf_half) / hi_v1_rf_mv) +1";
      };
     };
     AssignExpr @[3] {
      desc="v1 -> ret";
      flags=;
      result_var=.projects[0].programs.gp[3][0].args[3]$485$;
      expr {
       expr="(hi_v1_x -1) * hi_v1_rf_mv + 2*hi_v1_rf_half";
      };
     };
     AssignExpr @[4] {
      desc="v1 -> ret";
      flags=;
      result_var=.projects[0].programs.gp[3][0].args[4]$486$;
      expr {
       expr="(hi_v1_y - 1) * hi_v1_rf_mv + 2*hi_v1_rf_half";
      };
     };
     AssignExpr @[5] {
      desc="v1 -> v2";
      flags=;
      result_var=.projects[0].programs.gp[3][0].vars[2]$487$;
      expr {
       expr="(hi_v1_x / hi_v2_rf_half) - 1";
      };
     };
     AssignExpr @[6] {
      desc="v1 -> v2";
      flags=;
      result_var=.projects[0].programs.gp[3][0].vars[3]$488$;
      expr {
       expr="(hi_v1_y / hi_v2_rf_half) - 1";
      };
     };
     AssignExpr @[7] {
      desc="v2 -> v1";
      flags=;
      result_var=$483$;
      expr {
       expr="(hi_v2_x + 1) * hi_v2_rf_half";
      };
     };
     AssignExpr @[8] {
      desc="v2 -> v1";
      flags=;
      result_var=$484$;
      expr {
       expr="(hi_v2_y + 1) * hi_v2_rf_half";
      };
     };
     AssignExpr @[9] {
      desc="v1 -> ret";
      flags=;
      result_var=$485$;
      expr {
       expr="(hi_v1_x -1) * hi_v1_rf_mv + 2*hi_v1_rf_half";
      };
     };
     AssignExpr @[10] {
      desc="v1 -> ret";
      flags=;
      result_var=$486$;
      expr {
       expr="(hi_v1_y - 1) * hi_v1_rf_mv + 2*hi_v1_rf_half";
      };
     };
     Comment @[11] {
      desc="Med-Res";
      flags=;
     };
     AssignExpr @[12] {
      desc="ret -> v1";
      flags=;
      result_var=.projects[0].programs.gp[3][0].vars[4]$489$;
      expr {
       expr="(md_ret_x / md_v1_rf_half) - 1";
      };
     };
     AssignExpr @[13] {
      desc="ret -> v1";
      flags=;
      result_var=.projects[0].programs.gp[3][0].vars[5]$490$;
      expr {
       expr="(md_ret_y / md_v1_rf_half) - 1";
      };
     };
     AssignExpr @[14] {
      desc="v1 -> ret";
      flags=;
      result_var=.projects[0].programs.gp[3][0].args[7]$491$;
      expr {
       expr="(md_v1_x + 1) * md_v1_rf_half";
      };
     };
     AssignExpr @[15] {
      desc="v1 -> ret";
      flags=;
      result_var=.projects[0].programs.gp[3][0].args[8]$492$;
      expr {
       expr="(md_v1_y + 1) * md_v1_rf_half";
      };
     };
     AssignExpr @[16] {
      desc="v1 -> v2";
      flags=;
      result_var=.projects[0].programs.gp[3][0].vars[6]$493$;
      expr {
       expr="(md_v1_x / md_v2_rf_half) - 1";
      };
     };
     AssignExpr @[17] {
      desc="v1 -> v2";
      flags=;
      result_var=.projects[0].programs.gp[3][0].vars[7]$494$;
      expr {
       expr="(md_v1_y / md_v2_rf_half) - 1";
      };
     };
     AssignExpr @[18] {
      desc="v2 -> v1";
      flags=;
      result_var=$489$;
      expr {
       expr="(md_v2_x + 1) * md_v2_rf_half";
      };
     };
     AssignExpr @[19] {
      desc="v2 -> v1";
      flags=;
      result_var=$490$;
      expr {
       expr="(md_v2_y + 1) * md_v2_rf_half";
      };
     };
     AssignExpr @[20] {
      desc="v1 -> ret";
      flags=;
      result_var=$491$;
      expr {
       expr="(md_v1_x + 1) * md_v1_rf_half";
      };
     };
     AssignExpr @[21] {
      desc="v1 -> ret";
      flags=;
      result_var=$492$;
      expr {
       expr="(md_v1_y + 1) * md_v1_rf_half";
      };
     };
     Comment @[22] {
      desc="Set network vals";
      flags=;
     };
     UserScript @[23] {
      desc="set hi retina geom";
      flags=;
      script {
       expr="network.layers.high_freq_bw_on.SetLayerUnitGeom(hi_ret_x, hi_ret_y);
network.layers.high_freq_bw_off.SetLayerUnitGeom(hi_ret_x, hi_ret_y);


";
      };
     };
     UserScript @[24] {
      desc="set hi v1/2/4 geom";
      flags=;
      script {
       expr="network.layers.V1_high.SetLayerUnitGpGeom(hi_v1_x, hi_v1_y);
network.layers.V2_high.SetLayerUnitGpGeom(hi_v2_x, hi_v2_y);
";
      };
     };
     UserScript @[25] {
      desc="set med retina geom";
      flags=;
      script {
       expr="network.layers.med_freq_rg_on.SetLayerUnitGeom(md_ret_x, md_ret_y);
network.layers.med_freq_rg_off.SetLayerUnitGeom(md_ret_x, md_ret_y);
network.layers.med_freq_by_on.SetLayerUnitGeom(md_ret_x, md_ret_y);
network.layers.med_freq_by_off.SetLayerUnitGeom(md_ret_x, md_ret_y);
network.layers.med_freq_bw_on.SetLayerUnitGeom(md_ret_x, md_ret_y);
network.layers.med_freq_bw_off.SetLayerUnitGeom(md_ret_x, md_ret_y);


";
      };
     };
     UserScript @[26] {
      desc="set med v1/2/4 geom";
      flags=;
      script {
       expr="network.layers.V1_med.SetLayerUnitGpGeom(md_v1_x, md_v1_y);
network.layers.V1_mblob.SetLayerUnitGpGeom(md_v1_x, md_v1_y);
network.layers.V2_med.SetLayerUnitGpGeom(md_v2_x, md_v2_y);
";
      };
     };
    };
   };
   Program @[1] {
    name="VisionLayerCalc_clr_hi52";
    tags=;
    desc="compute sizes of layers in vision model";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="hi_v1_rf_mv";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="how much to move rf from one group to next";
     };
     ProgVar @[2] {
      name="hi_v1_rf_half";
      var_type=T_Int;
      int_val=3;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="half-size of high-res receptive field from input to V1";
     };
     ProgVar @[3] {
      name="hi_ret_x";
      var_type=T_Int;
      int_val=52;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res retina (auto-fit to multiple of rf size)";
     };
     ProgVar @[4] {
      name="hi_ret_y";
      var_type=T_Int;
      int_val=52;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res retina (auto-fit to multiple of rf size)";
     };
     ProgVar @[5] {
      name="hi_v2_rf_half";
      var_type=T_Int;
      int_val=4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="half-size of high-res v2 receptive field (in group units), typically 2 (could be 3)";
     };
     ProgVar @[6] {
      name="hi_v4_rf_half";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="half-size of high-res v4 receptive field (in group units), typically 1 (could be 2)";
     };
     ProgVar @[7] {
      name="md_v1_rf_half";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="half-size of med-res receptive field from input to V1 (must be even!)";
     };
     ProgVar @[8] {
      name="md_ret_x";
      var_type=T_Int;
      int_val=26;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res retina (auto-fit to multiple of rf size)";
     };
     ProgVar @[9] {
      name="md_ret_y";
      var_type=T_Int;
      int_val=26;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res retina (auto-fit to multiple of rf size)";
     };
     ProgVar @[10] {
      name="md_v2_rf_half";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="size of med-res v2 receptive field (in group units), typically 2 (could be 3)";
     };
     ProgVar @[11] {
      name="md_v4_rf_half";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="half-size of med-res v4 receptive field (in group units), typically 1 (could be 2)";
     };
     ProgVar @[12] {
      name="do_low";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="actually do low inputs (else no low inputs)";
     };
     ProgVar @[13] {
      name="lo_v1_rf_half";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="half-size of low-res receptive field from input to V1 (must be even!)";
     };
     ProgVar @[14] {
      name="lo_ret_x";
      var_type=T_Int;
      int_val=13;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of low-res retina (auto-fit to multiple of rf size)";
     };
     ProgVar @[15] {
      name="lo_ret_y";
      var_type=T_Int;
      int_val=13;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of low-res retina (auto-fit to multiple of rf size)";
     };
     ProgVar @[16] {
      name="lo_v2_rf_half";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      reference=0;
      desc="half-size of low-res v2 receptive field (in group units), typically 2 (could be 3)";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="hi_v1_x";
      var_type=T_Int;
      int_val=24;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res v1 groups (computed!)";
     };
     ProgVar @[1] {
      name="hi_v1_y";
      var_type=T_Int;
      int_val=24;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res v1 groups (computed!)";
     };
     ProgVar @[2] {
      name="hi_v2_x";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res v2 groups (computed!)";
     };
     ProgVar @[3] {
      name="hi_v2_y";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res v2 groups (computed!)";
     };
     ProgVar @[4] {
      name="hi_v4_x";
      var_type=T_Int;
      int_val=4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res v4 groups (computed!)";
     };
     ProgVar @[5] {
      name="hi_v4_y";
      var_type=T_Int;
      int_val=4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of high-res v4 groups (computed!)";
     };
     ProgVar @[6] {
      name="md_v1_x";
      var_type=T_Int;
      int_val=12;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res v1 groups (computed!)";
     };
     ProgVar @[7] {
      name="md_v1_y";
      var_type=T_Int;
      int_val=12;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res v1 groups (computed!)";
     };
     ProgVar @[8] {
      name="md_v2_x";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res v2 groups (computed!)";
     };
     ProgVar @[9] {
      name="md_v2_y";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res v2 groups (computed!)";
     };
     ProgVar @[10] {
      name="md_v4_x";
      var_type=T_Int;
      int_val=4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res v4 groups (computed!)";
     };
     ProgVar @[11] {
      name="md_v4_y";
      var_type=T_Int;
      int_val=4;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of med-res v4 groups (computed!)";
     };
     ProgVar @[12] {
      name="lo_v1_x";
      var_type=T_Int;
      int_val=12;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of low-res v1 groups (computed!)";
     };
     ProgVar @[13] {
      name="lo_v1_y";
      var_type=T_Int;
      int_val=12;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of low-res v1 groups (computed!)";
     };
     ProgVar @[14] {
      name="lo_v2_x";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of low-res v2 groups (computed!)";
     };
     ProgVar @[15] {
      name="lo_v2_y";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="size of low-res v2 groups (computed!)";
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=UserScript;
     el_def=0;
     Comment @[0] {
      desc="High-Res";
      flags=;
     };
     AssignExpr @[1] {
      desc="ret -> v1";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[0]$495$;
      expr {
       expr="((hi_ret_x - 2* hi_v1_rf_half) / hi_v1_rf_mv) +1";
      };
     };
     AssignExpr @[2] {
      desc="ret -> v1";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[1]$496$;
      expr {
       expr="((hi_ret_y - 2*hi_v1_rf_half) / hi_v1_rf_mv) +1";
      };
     };
     AssignExpr @[3] {
      desc="v1 -> ret";
      flags=;
      result_var=.projects[0].programs.gp[3][1].args[3]$497$;
      expr {
       expr="(hi_v1_x -1) * hi_v1_rf_mv + 2*hi_v1_rf_half";
      };
     };
     AssignExpr @[4] {
      desc="v1 -> ret";
      flags=;
      result_var=.projects[0].programs.gp[3][1].args[4]$498$;
      expr {
       expr="(hi_v1_y - 1) * hi_v1_rf_mv + 2*hi_v1_rf_half";
      };
     };
     AssignExpr @[5] {
      desc="v1 -> v2";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[2]$499$;
      expr {
       expr="(hi_v1_x / hi_v2_rf_half) - 1";
      };
     };
     AssignExpr @[6] {
      desc="v1 -> v2";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[3]$500$;
      expr {
       expr="(hi_v1_y / hi_v2_rf_half) - 1";
      };
     };
     AssignExpr @[7] {
      desc="v2 -> v1";
      flags=;
      result_var=$495$;
      expr {
       expr="(hi_v2_x + 1) * hi_v2_rf_half";
      };
     };
     AssignExpr @[8] {
      desc="v2 -> v1";
      flags=;
      result_var=$496$;
      expr {
       expr="(hi_v2_y + 1) * hi_v2_rf_half";
      };
     };
     AssignExpr @[9] {
      desc="v1 -> ret";
      flags=;
      result_var=$497$;
      expr {
       expr="(hi_v1_x -1) * hi_v1_rf_mv + 2*hi_v1_rf_half";
      };
     };
     AssignExpr @[10] {
      desc="v1 -> ret";
      flags=;
      result_var=$498$;
      expr {
       expr="(hi_v1_y - 1) * hi_v1_rf_mv + 2*hi_v1_rf_half";
      };
     };
     AssignExpr @[11] {
      desc="ret -> v1";
      flags=;
      result_var=$495$;
      expr {
       expr="((hi_ret_x - 2* hi_v1_rf_half) / hi_v1_rf_mv) +1";
      };
     };
     AssignExpr @[12] {
      desc="ret -> v1";
      flags=;
      result_var=$496$;
      expr {
       expr="((hi_ret_y - 2*hi_v1_rf_half) / hi_v1_rf_mv) +1";
      };
     };
     AssignExpr @[13] {
      desc="v1 -> v2";
      flags=;
      result_var=$499$;
      expr {
       expr="(hi_v1_x / hi_v2_rf_half) - 1";
      };
     };
     AssignExpr @[14] {
      desc="v1 -> v2";
      flags=;
      result_var=$500$;
      expr {
       expr="(hi_v1_y / hi_v2_rf_half) - 1";
      };
     };
     AssignExpr @[15] {
      desc="v2 -> v4";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[4]$501$;
      expr {
       expr="(hi_v2_x / hi_v4_rf_half) - 1";
      };
     };
     AssignExpr @[16] {
      desc="v2 -> v4";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[5]$502$;
      expr {
       expr="(hi_v2_y / hi_v4_rf_half) - 1";
      };
     };
     AssignExpr @[17] {
      desc="v4 -> v2";
      flags=;
      result_var=$499$;
      expr {
       expr="(hi_v4_x + 1) * hi_v4_rf_half";
      };
     };
     AssignExpr @[18] {
      desc="v4 -> v2";
      flags=;
      result_var=$500$;
      expr {
       expr="(hi_v4_y + 1) * hi_v4_rf_half";
      };
     };
     AssignExpr @[19] {
      desc="v2 -> v1";
      flags=;
      result_var=$495$;
      expr {
       expr="(hi_v2_x + 1) * hi_v2_rf_half";
      };
     };
     AssignExpr @[20] {
      desc="v2 -> v1";
      flags=;
      result_var=$496$;
      expr {
       expr="(hi_v2_y + 1) * hi_v2_rf_half";
      };
     };
     AssignExpr @[21] {
      desc="v1 -> ret";
      flags=;
      result_var=$497$;
      expr {
       expr="(hi_v1_x -1) * hi_v1_rf_mv + 2*hi_v1_rf_half";
      };
     };
     AssignExpr @[22] {
      desc="v1 -> ret";
      flags=;
      result_var=$498$;
      expr {
       expr="(hi_v1_y - 1) * hi_v1_rf_mv + 2*hi_v1_rf_half";
      };
     };
     Comment @[23] {
      desc="Med-Res";
      flags=;
     };
     AssignExpr @[24] {
      desc="ret -> v1";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[6]$503$;
      expr {
       expr="(md_ret_x / md_v1_rf_half) - 1";
      };
     };
     AssignExpr @[25] {
      desc="ret -> v1";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[7]$504$;
      expr {
       expr="(md_ret_y / md_v1_rf_half) - 1";
      };
     };
     AssignExpr @[26] {
      desc="v1 -> ret";
      flags=;
      result_var=.projects[0].programs.gp[3][1].args[8]$505$;
      expr {
       expr="(md_v1_x + 1) * md_v1_rf_half";
      };
     };
     AssignExpr @[27] {
      desc="v1 -> ret";
      flags=;
      result_var=.projects[0].programs.gp[3][1].args[9]$506$;
      expr {
       expr="(md_v1_y + 1) * md_v1_rf_half";
      };
     };
     AssignExpr @[28] {
      desc="v1 -> v2";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[8]$507$;
      expr {
       expr="(md_v1_x / md_v2_rf_half) - 1";
      };
     };
     AssignExpr @[29] {
      desc="v1 -> v2";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[9]$508$;
      expr {
       expr="(md_v1_y / md_v2_rf_half) - 1";
      };
     };
     AssignExpr @[30] {
      desc="v2 -> v1";
      flags=;
      result_var=$503$;
      expr {
       expr="(md_v2_x + 1) * md_v2_rf_half";
      };
     };
     AssignExpr @[31] {
      desc="v2 -> v1";
      flags=;
      result_var=$504$;
      expr {
       expr="(md_v2_y + 1) * md_v2_rf_half";
      };
     };
     AssignExpr @[32] {
      desc="v1 -> ret";
      flags=;
      result_var=$505$;
      expr {
       expr="(md_v1_x + 1) * md_v1_rf_half";
      };
     };
     AssignExpr @[33] {
      desc="v1 -> ret";
      flags=;
      result_var=$506$;
      expr {
       expr="(md_v1_y + 1) * md_v1_rf_half";
      };
     };
     AssignExpr @[34] {
      desc="ret -> v1";
      flags=;
      result_var=$503$;
      expr {
       expr="(md_ret_x / md_v1_rf_half) - 1";
      };
     };
     AssignExpr @[35] {
      desc="ret -> v1";
      flags=;
      result_var=$504$;
      expr {
       expr="(md_ret_y / md_v1_rf_half) - 1";
      };
     };
     AssignExpr @[36] {
      desc="v1 -> v2";
      flags=;
      result_var=$507$;
      expr {
       expr="(md_v1_x / md_v2_rf_half) - 1";
      };
     };
     AssignExpr @[37] {
      desc="v1 -> v2";
      flags=;
      result_var=$508$;
      expr {
       expr="(md_v1_y / md_v2_rf_half) - 1";
      };
     };
     AssignExpr @[38] {
      desc="v2 -> v4";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[10]$509$;
      expr {
       expr="(md_v2_x / md_v4_rf_half) - 1";
      };
     };
     AssignExpr @[39] {
      desc="v2 -> v4";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[11]$510$;
      expr {
       expr="(md_v2_y / md_v4_rf_half) - 1";
      };
     };
     AssignExpr @[40] {
      desc="v4 -> v2";
      flags=;
      result_var=$507$;
      expr {
       expr="(md_v4_x + 1) * md_v4_rf_half";
      };
     };
     AssignExpr @[41] {
      desc="v4 -> v2";
      flags=;
      result_var=$508$;
      expr {
       expr="(md_v4_y + 1) * md_v4_rf_half";
      };
     };
     AssignExpr @[42] {
      desc="v2 -> v1";
      flags=;
      result_var=$503$;
      expr {
       expr="(md_v2_x + 1) * md_v2_rf_half";
      };
     };
     AssignExpr @[43] {
      desc="v2 -> v1";
      flags=;
      result_var=$504$;
      expr {
       expr="(md_v2_y + 1) * md_v2_rf_half";
      };
     };
     AssignExpr @[44] {
      desc="v1 -> ret";
      flags=;
      result_var=$505$;
      expr {
       expr="(md_v1_x + 1) * md_v1_rf_half";
      };
     };
     AssignExpr @[45] {
      desc="v1 -> ret";
      flags=;
      result_var=$506$;
      expr {
       expr="(md_v1_y + 1) * md_v1_rf_half";
      };
     };
     Comment @[46] {
      desc="Low-Res";
      flags=;
     };
     If @[47] {
      desc=;
      flags=;
      cond {
       expr="do_low";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="ret -> v1";
	flags=;
	result_var=.projects[0].programs.gp[3][1].vars[12]$511$;
	expr {
	 expr="(lo_ret_x / lo_v1_rf_half) - 1";
	};
       };
       AssignExpr @[1] {
	desc="ret -> v1";
	flags=;
	result_var=.projects[0].programs.gp[3][1].vars[13]$512$;
	expr {
	 expr="(lo_ret_y / lo_v1_rf_half) - 1";
	};
       };
       AssignExpr @[2] {
	desc="v1 -> ret";
	flags=;
	result_var=.projects[0].programs.gp[3][1].args[14]$513$;
	expr {
	 expr="(lo_v1_x + 1) * lo_v1_rf_half";
	};
       };
       AssignExpr @[3] {
	desc="v1 -> ret";
	flags=;
	result_var=.projects[0].programs.gp[3][1].args[15]$514$;
	expr {
	 expr="(lo_v1_y + 1) * lo_v1_rf_half";
	};
       };
       AssignExpr @[4] {
	desc="v1 -> v2";
	flags=;
	result_var=.projects[0].programs.gp[3][1].vars[14]$515$;
	expr {
	 expr="(lo_v1_x / lo_v2_rf_half) - 1";
	};
       };
       AssignExpr @[5] {
	desc="v1 -> v2";
	flags=;
	result_var=.projects[0].programs.gp[3][1].vars[15]$516$;
	expr {
	 expr="(lo_v1_y / lo_v2_rf_half) - 1";
	};
       };
       AssignExpr @[6] {
	desc="v2 -> v1";
	flags=;
	result_var=$511$;
	expr {
	 expr="(lo_v2_x + 1) * lo_v2_rf_half";
	};
       };
       AssignExpr @[7] {
	desc="v2 -> v1";
	flags=;
	result_var=$512$;
	expr {
	 expr="(lo_v2_y + 1) * lo_v2_rf_half";
	};
       };
       AssignExpr @[8] {
	desc="v1 -> ret";
	flags=;
	result_var=$513$;
	expr {
	 expr="(lo_v1_x + 1) * lo_v1_rf_half";
	};
       };
       AssignExpr @[9] {
	desc="v1 -> ret";
	flags=;
	result_var=$514$;
	expr {
	 expr="(lo_v1_y + 1) * lo_v1_rf_half";
	};
       };
      };
     };
     Comment @[48] {
      desc="Set network vals";
      flags=;
     };
     UserScript @[49] {
      desc="set hi retina geom";
      flags=;
      script {
       expr="network.layers.hbw_on.SetLayerUnitGeom(hi_ret_x, hi_ret_y);
network.layers.hbw_off.SetLayerUnitGeom(hi_ret_x, hi_ret_y);


";
      };
     };
     UserScript @[50] {
      desc="set hi v1/2/4 geom";
      flags=;
      script {
       expr="network.layers.V1_high.SetLayerUnitGpGeom(hi_v1_x, hi_v1_y);
network.layers.V2_high.SetLayerUnitGpGeom(hi_v2_x, hi_v2_y);
network.layers.V4.SetLayerUnitGpGeom(hi_v4_x, hi_v4_y);
";
      };
     };
     UserScript @[51] {
      desc="set med retina geom";
      flags=;
      script {
       expr="network.layers.mrg_on.SetLayerUnitGeom(md_ret_x, md_ret_y);
network.layers.mrg_off.SetLayerUnitGeom(md_ret_x, md_ret_y);
network.layers.mby_on.SetLayerUnitGeom(md_ret_x, md_ret_y);
network.layers.mby_off.SetLayerUnitGeom(md_ret_x, md_ret_y);
network.layers.mbw_on.SetLayerUnitGeom(md_ret_x, md_ret_y);
network.layers.mbw_off.SetLayerUnitGeom(md_ret_x, md_ret_y);


";
      };
     };
     UserScript @[52] {
      desc="set med v1/2/4 geom";
      flags=;
      script {
       expr="network.layers.V1_med.SetLayerUnitGpGeom(md_v1_x, md_v1_y);
network.layers.V1_mblob.SetLayerUnitGpGeom(md_v1_x, md_v1_y);
network.layers.V2_med.SetLayerUnitGpGeom(md_v2_x, md_v2_y);
//network.layers.V4_mlow.SetLayerUnitGpGeom(md_v4_x, md_v4_y);
";
      };
     };
     If @[53] {
      desc=;
      flags=;
      cond {
       expr="do_low";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       UserScript @[0] {
	desc="set low retina geom";
	flags=;
	script {
	 expr="network.layers.lbw_on.SetLayerUnitGeom(lo_ret_x, lo_ret_y);
network.layers.lbw_off.SetLayerUnitGeom(lo_ret_x, lo_ret_y);


";
	};
       };
       UserScript @[1] {
	desc="set low v1/2/4 geom";
	flags=;
	script {
	 expr="network.layers.V1_low.SetLayerUnitGpGeom(lo_v1_x, lo_v1_y);
network.layers.V2_low.SetLayerUnitGpGeom(lo_v2_x, lo_v2_y);
";
	};
       };
      };
     };
    };
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="view_win_lft";
     value 6 0=-0.001224739709869027;
    };
    UserDataItem @[1] {
     name="view_win_top";
     value 6 0=0.01361867692321539;
    };
    UserDataItem @[2] {
     name="view_win_wd";
     value 6 0=1;
    };
    UserDataItem @[3] {
     name="view_win_ht";
     value 6 0=0.7996109127998352;
    };
    UserDataItem @[4] {
     name="view_win_iconified";
     value 1 0=0;
    };
    UserDataItem @[5] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAAAAAADAAAAvAAAAf0AAANIAQAAAAcBAAAAAQ==";
    };
   };
   m_data=.projects[0]$517$;
   name="DefaultProjectBrowser";
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_visible";
       value 1 0=1;
      };
     };
     m_data=NULL;
     name="Application";
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     m_data=NULL;
     name="Tree";
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$517$;
    };
    PanelViewer @[1] {
     m_data=NULL;
     name="Panels";
     visible=1;
    };
    T3DataViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_frame_selected";
       value 1 0=1;
      };
     };
     m_data=NULL;
     name="DefaultViewer";
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       m_data=NULL;
       name="hv_hi52_noit";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 NetView @[0] {
	  m_data=$5$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=0;
	  net_text=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  net_box_offset=0;
	  ordered_uvg_list{ act;	  };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=1: y=1: z=2: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.02;
	   layer_vals=0.03;
	   prjn=0.005;
	   unit=0.002;
	   un_nm_len=12;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.001;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	  };
	  wt_line_disp=0;
	  wt_line_width=2;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name=;
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$518$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="targ";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    name="dav";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    name="net";
	    auto_scale=0;
	    min=-0.8;
	    max=0.8;
	   };
	   ScaleRange @[5] {
	    name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[6] {
	    name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    name="gc.h";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[9] {
	    name="r.pdw";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[10] {
	    name="gc.i";
	    auto_scale=0;
	    min=-1.724444;
	    max=1.724444;
	   };
	   ScaleRange @[11] {
	    name="ext";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[12] {
	    name="gc.a";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[13] {
	    name="act_dif";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[14] {
	    name="da";
	    auto_scale=1;
	    min=-0.2958892;
	    max=0.2958892;
	   };
	   ScaleRange @[15] {
	    name="act_eq";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[16] {
	    name="bias.wt";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[17] {
	    name="p_act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[18] {
	    name="p_act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[19] {
	    name="act_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Output=0;Target=0;	  };
	 };
	 GridTableView @[1] {
	  m_data=$393$;
FloatTransform @*(.m_transform) {scale={x=0.3094138: y=0.3094129: z=0.3094131: }: rotate={x=-0.9992082: y=-0.03778645: z=0.01246599: rot=0.4152852: }: translate={x=0.4773437: y=0.5728936: z=-0.5446005: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].data.gp[0][1].data[0]$519$;
	    m_transform=NULL;
	    name="Name";
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].data.gp[0][1].data[1]$520$;
	    m_transform=NULL;
	    name="LookBox";
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    m_data=.projects[0].data.gp[0][1].data[2]$521$;
	    m_transform=NULL;
	    name="ImageSize";
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    m_data=.projects[0].data.gp[0][1].data[3]$522$;
	    m_transform=NULL;
	    name="Move";
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    m_data=.projects[0].data.gp[0][1].data[4]$523$;
	    m_transform=NULL;
	    name="Scale";
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    m_data=.projects[0].data.gp[0][1].data[5]$524$;
	    m_transform=NULL;
	    name="Rotate";
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    m_data=$396$;
	    m_transform=NULL;
	    name="Output";
	    visible=1;
	    text_width=7;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    m_data=.projects[0].data.gp[0][1].data[7]$525$;
	    m_transform=NULL;
	    name="Target";
	    visible=1;
	    text_width=7;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[8] {
	    m_data=.projects[0].data.gp[0][1].data[8]$526$;
	    m_transform=NULL;
	    name="RewTarg";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[9] {
	    m_data=.projects[0].data.gp[0][1].data[9]$527$;
	    m_transform=NULL;
	    name="RetinaImage";
	    visible=1;
	    text_width=113;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	   GridColView @[10] {
	    m_data=.projects[0].data.gp[0][1].data[10]$528$;
	    m_transform=NULL;
	    name="high_freq_bw_on";
	    visible=1;
	    text_width=52;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[11] {
	    m_data=.projects[0].data.gp[0][1].data[11]$529$;
	    m_transform=NULL;
	    name="high_freq_bw_off";
	    visible=1;
	    text_width=52;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[12] {
	    m_data=.projects[0].data.gp[0][1].data[12]$530$;
	    m_transform=NULL;
	    name="med_freq_bw_on";
	    visible=1;
	    text_width=26;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[13] {
	    m_data=.projects[0].data.gp[0][1].data[13]$531$;
	    m_transform=NULL;
	    name="med_freq_bw_off";
	    visible=1;
	    text_width=26;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=0.3094138: y=0.3094129: z=0.3094131: }: rotate={x=-0.9992082: y=-0.03778645: z=0.01246599: rot=0.4152852: }: translate={x=0.4773437: y=0.5728936: z=-0.5446005: }: };
	  view_rows=1;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=2;
	  col_range {min=8: max=9: };
	  width=2;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name=;
	   chunks=133;
	   min=-0;
	   max=0;
	   range=0;
	   zero=0;
	   spec=$518$;
	   auto_scale=1;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=0.5: y=0.9956616: z=2.06709: };
       camera_orient {x=-1.000006: y=0: z=0: rot=0.2222549: };
       camera_focdist=2.631826;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       headlight_on=1;
       fullscreen_on=0;
       stereo_view=STEREO_NONE;
      };
      T3DataViewFrame @[1] {
       m_data=NULL;
       name="V1_high_GridFilterInput";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @[0] {
	  m_data=.projects[0].data.gp[2][2]$532$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].data.gp[2][2].data[0]$533$;
	    m_transform=NULL;
	    name="Filter";
	    visible=1;
	    text_width=240;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=1;
	  view_range {min=0: max=0: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=0: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1.464346;
	   max=1.464346;
	   range=1.464346;
	   zero=0;
	   spec=$518$;
	   auto_scale=1;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=2;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=1.5325: y=0.5175: z=1.443747: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.453747;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       headlight_on=1;
       fullscreen_on=0;
       stereo_view=STEREO_NONE;
      };
      T3DataViewFrame @[2] {
       m_data=NULL;
       name="high_freq_bw_GraphFilter";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=.projects[0].data.gp[2][3]$534$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[2][3].data[0]$535$;
	    m_transform=NULL;
	    name="X";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[2][3].data[1]$536$;
	    m_transform=NULL;
	    name="Z";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].data.gp[2][3].data[2]$537$;
	    m_transform=NULL;
	    name="Y";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=80: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="X";
	   fixed_range {fix_min=0: min=-4: fix_max=0: max=4: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-4: max=4: };
	   range {min=-4: max=4: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Z;
	   col_name="Z";
	   fixed_range {fix_min=0: min=-4: fix_max=0: max=4: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-4: max=4: };
	   range {min=-4: max=4: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Y";
	   fixed_range {fix_min=0: min=-0.01416887: fix_max=0: max=0.1127775: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.01416887: max=0.1127775: };
	   range {min=-0.01416887: max=0.1127775: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$518$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.4275: y=0.445: z=1.376934: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.866934;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       headlight_on=1;
       fullscreen_on=0;
       stereo_view=STEREO_NONE;
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_lft";
       value 6 0=0;
      };
      UserDataItem @[1] {
       name="view_win_top";
       value 6 0=0.008754863403737545;
      };
      UserDataItem @[2] {
       name="view_win_wd";
       value 6 0=0.04654011130332947;
      };
      UserDataItem @[3] {
       name="view_win_ht";
       value 6 0=0.7285992503166199;
      };
      UserDataItem @[4] {
       name="view_win_iconified";
       value 1 0=0;
      };
      UserDataItem @[5] {
       name="view_visible";
       value 1 0=1;
      };
     };
     m_data=NULL;
     name="Tools";
     visible=1;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 last_change_desc="* new default params: v1sal feat = .015 med /.0075 high, gp_g = .1, v2 lay gp_g = .6 -- maybe even lower?";
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=1;
    };
    UserDataItem @[1] {
     name="pvlv_lve";
     value 1 0=1;
    };
    UserDataItem @[2] {
     name="pvlv_pvi";
     value 1 0=1;
    };
    UserDataItem @[3] {
     name="ext_rew";
     value 1 0=1;
    };
    UserDataItem @[4] {
     name="maxda";
     value 1 0=1;
    };
    UserDataItem @[5] {
     name="minus_output_name";
     value 1 0=1;
    };
    UserDataItem @[6] {
     name="minus_cycles";
     value 1 0=1;
    };
    UserDataItem @[7] {
     name="ct_cycle";
     value 1 0=1;
    };
    UserDataItem @[8] {
     name="phase_no";
     value 1 0=1;
    };
    UserDataItem @[9] {
     name="phase";
     value 1 0=1;
    };
    UserDataItem @[10] {
     name="sse";
     value 1 0=1;
    };
    UserDataItem @[11] {
     name="output_name";
     value 1 0=1;
    };
    UserDataItem @[12] {
     name="trial_name";
     value 1 0=1;
    };
    UserDataItem @[13] {
     name="group_name";
     value 1 0=1;
    };
    UserDataItem @[14] {
     name="time";
     value 1 0=1;
    };
    UserDataItem @[15] {
     name="cycle";
     value 1 0=1;
    };
    UserDataItem @[16] {
     name="tick";
     value 1 0=1;
    };
    UserDataItem @[17] {
     name="trial";
     value 1 0=1;
    };
    UserDataItem @[18] {
     name="group";
     value 1 0=1;
    };
    UserDataItem @[19] {
     name="epoch";
     value 1 0=1;
    };
    UserDataItem @[20] {
     name="batch";
     value 1 0=1;
    };
   };
   name="hv_v1gp3_bw_noit";
   desc="v1 n_filters_per_gp = 3, high = 144, fovea only, black&white, 6x6 gabor, medium 72x72";
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="StdLeabraUnitSpec";
     desc=;
     unique{ opt_thresh;     };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
      LeabraUnitSpec @[0] {
       name="V1Units";
       desc=;
       unique{ bias_spec;da_mod;dt;       };
       children {
	name=;
	el_typ=LeabraUnitSpec;
	el_def=0;
       };
       act_range {min=0: max=1: range=1: scale=1: };
       bias_con_type=LeabraCon;
       bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[2].children[1].children[0]$538$: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
       spike {rise=1: decay=0.95: g_gain=4: window=20: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
       depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: clamp_norm_max_amp=2: };
       syn_delay {
	on=0;
	delay=4;
       };
       opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=1: range=1: scale=1: };
       v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
       dt {vm=0.2: net=1: midpoint=1: d_vm_max=0.02: vm_eq_cyc=100: vm_eq_dt=1: };
       g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
       e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
       hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=1: trl=0: };
       acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
       da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
       maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
       noise_type=NO_NOISE;
       noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
       noise_adapt {trial_fixed=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
       noise_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=1;
	cur_val=0;
       };
      };
      LeabraUnitSpec @[1] {
       name="HigherUnits";
       desc=;
       unique{ da_mod;act_reg;       };
       children {
	name=;
	el_typ=LeabraUnitSpec;
	el_def=0;
	LeabraUnitSpec @[0] {
	 name="OutputUnits";
	 desc=;
	 unique{ act;bias_spec;	 };
	 children {
	  name=;
	  el_typ=LeabraUnitSpec;
	  el_def=0;
	 };
	 act_range {min=0: max=1: range=1: scale=1: };
	 bias_con_type=LeabraCon;
	 bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[2].children[0].children[1]$539$: };
	 sse_tol=0.5;
	 act_fun=NOISY_XX1;
	 act {thr=0.25: gain=600: nvar=0.002: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
	 spike {rise=1: decay=0.95: g_gain=4: window=20: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
	 depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: clamp_norm_max_amp=2: };
	 syn_delay {
	  on=0;
	  delay=4;
	 };
	 opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
	 clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	 vm_range {min=0: max=1: range=1: scale=1: };
	 v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
	 dt {vm=0.25: net=0.7: midpoint=0: d_vm_max=0.02: vm_eq_cyc=0: vm_eq_dt=1: };
	 g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
	 e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
	 hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=1: trl=0: };
	 acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
	 da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
	 maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
	 noise_type=NO_NOISE;
	 noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	 noise_adapt {trial_fixed=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
	 noise_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=1;
	  cur_val=0;
	 };
	};
       };
       act_range {min=0: max=1: range=1: scale=1: };
       bias_con_type=LeabraCon;
       bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[2].children[0]$540$: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
       spike {rise=1: decay=0.95: g_gain=4: window=20: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
       depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: clamp_norm_max_amp=2: };
       syn_delay {
	on=0;
	delay=4;
       };
       opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=1: range=1: scale=1: };
       v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
       dt {vm=0.25: net=0.7: midpoint=0: d_vm_max=0.02: vm_eq_cyc=0: vm_eq_dt=1: };
       g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
       e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
       hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=1: trl=0: };
       acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
       da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
       maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
       noise_type=NO_NOISE;
       noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
       noise_adapt {trial_fixed=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
       noise_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=1;
	cur_val=0;
       };
      };
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=$540$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=1: decay=0.95: g_gain=4: window=20: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: clamp_norm_max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {vm=0.25: net=0.7: midpoint=0: d_vm_max=0.02: vm_eq_cyc=0: vm_eq_dt=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=1: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     noise_type=NO_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {trial_fixed=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraLayerSpec @[1] {
     name="LeabraLayerSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="V1_med";
       desc=;
       unique{ gp_kwta;feat_inhib;inhib_group;inhib;clamp;kwta;decay;abs_net_adapt;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
	LeabraLayerSpec @[0] {
	 name="V1_blob";
	 desc=;
	 unique{ feat_kwta;gp_kwta;	 };
	 children {
	  name=;
	  el_typ=LeabraLayerSpec;
	  el_def=0;
	 };
	 inhib_group=UNIT_GROUPS;
	 inhib {
	  type=KWTA_AVG_INHIB;
	  kwta_pt=0.6;
	  min_i=0.8;
	  comp_thr=0.5;
	  comp_gain=2;
	  gp_pt=0.2;
	 };
	 kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=1: gp_g=0.8: };
	 gp_kwta {k_from=USE_K: k=1: pct=0.02: pat_q=0.5: diff_act_pct=1: act_pct=0.3: gp_i=1: gp_g=0.6: };
	 tie_brk {on=0: k_thr=1: diff_thr=0.2: };
	 adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	 clamp {hard=0: gain=0.5: };
	 decay {event=0: phase=0: phase2=0: clamp_phase2=1: };
	 ct_inhib_mod {
	  use_sin=0;
	  burst_i=0.02;
	  trough_i=0.02;
	  use_fin=0;
	  inhib_i=0;
	 };
	 abs_net_adapt {
	  on=0;
	  trg_net=0.5;
	  tol=0.1;
	  abs_lrate=0.1;
	 };
	};
	LeabraLayerSpec @[1] {
	 name="V1_high";
	 desc=;
	 unique{ kwta;gp_kwta;compute_i;i_kwta_pt;feat_inhib;feat_kwta;	 };
	 children {
	  name=;
	  el_typ=LeabraLayerSpec;
	  el_def=0;
	 };
	 inhib_group=UNIT_GROUPS;
	 inhib {
	  type=KWTA_AVG_INHIB;
	  kwta_pt=0.6;
	  min_i=0.8;
	  comp_thr=0.5;
	  comp_gain=2;
	  gp_pt=0.2;
	 };
	 kwta {k_from=USE_PCT: k=12: pct=0.8: pat_q=0.5: diff_act_pct=1: act_pct=0.1: gp_i=1: gp_g=0.8: };
	 gp_kwta {k_from=USE_K: k=1: pct=0.02: pat_q=0.5: diff_act_pct=1: act_pct=0.15: gp_i=1: gp_g=0.6: };
	 tie_brk {on=0: k_thr=1: diff_thr=0.2: };
	 adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	 clamp {hard=0: gain=0.5: };
	 decay {event=0: phase=0: phase2=0: clamp_phase2=1: };
	 ct_inhib_mod {
	  use_sin=0;
	  burst_i=0.02;
	  trough_i=0.02;
	  use_fin=0;
	  inhib_i=0;
	 };
	 abs_net_adapt {
	  on=0;
	  trg_net=0.5;
	  tol=0.1;
	  abs_lrate=0.1;
	 };
	};
       };
       inhib_group=UNIT_GROUPS;
       inhib {
	type=KWTA_AVG_INHIB;
	kwta_pt=0.6;
	min_i=0.8;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=1: gp_g=0.8: };
       gp_kwta {k_from=USE_K: k=1: pct=0.02: pat_q=0.5: diff_act_pct=1: act_pct=0.3: gp_i=1: gp_g=0.6: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=0: gain=0.5: };
       decay {event=0: phase=0: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
      LeabraV1LayerSpec @[1] {
       name="V1_med_sal";
       desc=;
       unique{ gp_kwta;feat_inhib;inhib_group;inhib;clamp;kwta;decay;abs_net_adapt;       };
       children {
	name=;
	el_typ=LeabraV1LayerSpec;
	el_def=0;
	LeabraV1LayerSpec @[0] {
	 name="V1_blob_sal";
	 desc=;
	 unique{ feat_kwta;gp_kwta;feat_inhib;	 };
	 children {
	  name=;
	  el_typ=LeabraLayerSpec;
	  el_def=0;
	 };
	 inhib_group=UNIT_GROUPS;
	 inhib {
	  type=KWTA_AVG_INHIB;
	  kwta_pt=0.6;
	  min_i=0.8;
	  comp_thr=0.5;
	  comp_gain=2;
	  gp_pt=0.2;
	 };
	 kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=1: gp_g=0.6: };
	 gp_kwta {k_from=USE_K: k=1: pct=0.02: pat_q=0.5: diff_act_pct=1: act_pct=0.3: gp_i=1: gp_g=0.4: };
	 tie_brk {on=0: k_thr=1: diff_thr=0.2: };
	 adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	 clamp {hard=0: gain=0.5: };
	 decay {event=0: phase=0: phase2=0: clamp_phase2=1: };
	 ct_inhib_mod {
	  use_sin=0;
	  burst_i=0.02;
	  trough_i=0.02;
	  use_fin=0;
	  inhib_i=0;
	 };
	 abs_net_adapt {
	  on=0;
	  trg_net=0.5;
	  tol=0.1;
	  abs_lrate=0.1;
	 };
	 feat_inhib {
	  feat_gain=0.02;
	  dist_sigma=0.25;
	  i_rat_thr=0.5;
	 };
	};
	LeabraV1LayerSpec @[1] {
	 name="V1_high_sal";
	 desc=;
	 unique{ kwta;gp_kwta;compute_i;i_kwta_pt;feat_inhib;feat_kwta;	 };
	 children {
	  name=;
	  el_typ=LeabraLayerSpec;
	  el_def=0;
	 };
	 inhib_group=UNIT_GROUPS;
	 inhib {
	  type=KWTA_AVG_INHIB;
	  kwta_pt=0.6;
	  min_i=0.8;
	  comp_thr=0.5;
	  comp_gain=2;
	  gp_pt=0.2;
	 };
	 kwta {k_from=USE_PCT: k=12: pct=0.8: pat_q=0.5: diff_act_pct=1: act_pct=0.1: gp_i=1: gp_g=0.6: };
	 gp_kwta {k_from=USE_K: k=1: pct=0.02: pat_q=0.5: diff_act_pct=1: act_pct=0.075: gp_i=1: gp_g=0.1: };
	 tie_brk {on=0: k_thr=1: diff_thr=0.2: };
	 adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	 clamp {hard=0: gain=0.5: };
	 decay {event=0: phase=0: phase2=0: clamp_phase2=1: };
	 ct_inhib_mod {
	  use_sin=0;
	  burst_i=0.02;
	  trough_i=0.02;
	  use_fin=0;
	  inhib_i=0;
	 };
	 abs_net_adapt {
	  on=0;
	  trg_net=0.5;
	  tol=0.1;
	  abs_lrate=0.1;
	 };
	 feat_inhib {
	  feat_gain=0.005;
	  dist_sigma=0.25;
	  i_rat_thr=0.5;
	 };
	};
       };
       inhib_group=UNIT_GROUPS;
       inhib {
	type=KWTA_AVG_INHIB;
	kwta_pt=0.6;
	min_i=0.8;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=1: gp_g=0.6: };
       gp_kwta {k_from=USE_K: k=2: pct=0.02: pat_q=0.5: diff_act_pct=1: act_pct=0.1: gp_i=1: gp_g=0.1: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=0: gain=0.5: };
       decay {event=0: phase=0: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
       feat_inhib {
	feat_gain=0.01;
	dist_sigma=0.25;
	i_rat_thr=0.5;
       };
      };
      LeabraLayerSpec @[2] {
       name="InputLayers";
       desc=;
       unique{ kwta;inhib_group;compute_i;i_kwta_pt;inhib;abs_net_adapt;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
	LeabraLayerSpec @[0] {
	 name="high";
	 desc=;
	 unique{ kwta;	 };
	 children {
	  name=;
	  el_typ=LeabraLayerSpec;
	  el_def=0;
	 };
	 inhib_group=ENTIRE_LAYER;
	 inhib {
	  type=KWTA_INHIB;
	  kwta_pt=0.25;
	  min_i=0;
	  comp_thr=0.5;
	  comp_gain=2;
	  gp_pt=0.2;
	 };
	 kwta {k_from=USE_PCT: k=12: pct=0.15: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
	 gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
	 tie_brk {on=0: k_thr=1: diff_thr=0.2: };
	 adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	 clamp {hard=1: gain=0.5: };
	 decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
	 ct_inhib_mod {
	  use_sin=0;
	  burst_i=0.02;
	  trough_i=0.02;
	  use_fin=0;
	  inhib_i=0;
	 };
	 abs_net_adapt {
	  on=0;
	  trg_net=0.5;
	  tol=0.1;
	  abs_lrate=0.1;
	 };
	};
	LeabraLayerSpec @[1] {
	 name="med";
	 desc=;
	 unique{ kwta;	 };
	 children {
	  name=;
	  el_typ=LeabraLayerSpec;
	  el_def=0;
	 };
	 inhib_group=ENTIRE_LAYER;
	 inhib {
	  type=KWTA_INHIB;
	  kwta_pt=0.25;
	  min_i=0;
	  comp_thr=0.5;
	  comp_gain=2;
	  gp_pt=0.2;
	 };
	 kwta {k_from=USE_PCT: k=12: pct=0.15: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
	 gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
	 tie_brk {on=0: k_thr=1: diff_thr=0.2: };
	 adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	 clamp {hard=1: gain=0.5: };
	 decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
	 ct_inhib_mod {
	  use_sin=0;
	  burst_i=0.02;
	  trough_i=0.02;
	  use_fin=0;
	  inhib_i=0;
	 };
	 abs_net_adapt {
	  on=0;
	  trg_net=0.5;
	  tol=0.1;
	  abs_lrate=0.1;
	 };
	};
	LeabraLayerSpec @[2] {
	 name="mclr";
	 desc=;
	 unique{ kwta;	 };
	 children {
	  name=;
	  el_typ=LeabraLayerSpec;
	  el_def=0;
	 };
	 inhib_group=ENTIRE_LAYER;
	 inhib {
	  type=KWTA_INHIB;
	  kwta_pt=0.25;
	  min_i=0;
	  comp_thr=0.5;
	  comp_gain=2;
	  gp_pt=0.2;
	 };
	 kwta {k_from=USE_PCT: k=12: pct=0.05: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
	 gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
	 tie_brk {on=0: k_thr=1: diff_thr=0.2: };
	 adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	 clamp {hard=1: gain=0.5: };
	 decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
	 ct_inhib_mod {
	  use_sin=0;
	  burst_i=0.02;
	  trough_i=0.02;
	  use_fin=0;
	  inhib_i=0;
	 };
	 abs_net_adapt {
	  on=0;
	  trg_net=0.5;
	  tol=0.1;
	  abs_lrate=0.1;
	 };
	};
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PCT: k=12: pct=0.01: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: };
       decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
      LeabraLayerSpec @[3] {
       name="V2_high";
       desc=;
       unique{ kwta;gp_kwta;inhib_group;inhib;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
	LeabraLayerSpec @[0] {
	 name="V2_med";
	 desc=;
	 unique{ 	 };
	 children {
	  name=;
	  el_typ=LeabraLayerSpec;
	  el_def=0;
	 };
	 inhib_group=UNIT_GROUPS;
	 inhib {
	  type=KWTA_AVG_INHIB;
	  kwta_pt=0.6;
	  min_i=0;
	  comp_thr=0.5;
	  comp_gain=2;
	  gp_pt=0.2;
	 };
	 kwta {k_from=USE_PCT: k=12: pct=0.8: pat_q=0.5: diff_act_pct=1: act_pct=0.05: gp_i=1: gp_g=0.6: };
	 gp_kwta {k_from=USE_PCT: k=12: pct=0.1: pat_q=0.5: diff_act_pct=0: act_pct=0.05: gp_i=1: gp_g=0.5: };
	 tie_brk {on=0: k_thr=1: diff_thr=0.2: };
	 adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
	 clamp {hard=1: gain=0.5: };
	 decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
	 ct_inhib_mod {
	  use_sin=0;
	  burst_i=0.02;
	  trough_i=0.02;
	  use_fin=0;
	  inhib_i=0;
	 };
	 abs_net_adapt {
	  on=1;
	  trg_net=0.5;
	  tol=0.1;
	  abs_lrate=0.2;
	 };
	};
       };
       inhib_group=UNIT_GROUPS;
       inhib {
	type=KWTA_AVG_INHIB;
	kwta_pt=0.6;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PCT: k=12: pct=0.8: pat_q=0.5: diff_act_pct=1: act_pct=0.05: gp_i=1: gp_g=0.6: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.1: pat_q=0.5: diff_act_pct=0: act_pct=0.05: gp_i=1: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: };
       decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=1;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
      LeabraLayerSpec @[4] {
       name="V4";
       desc=;
       unique{ kwta;gp_kwta;inhib_group;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_AVG_INHIB;
	kwta_pt=0.6;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PCT: k=12: pct=0.15: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.8: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=1: act_pct=0.12: gp_i=1: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: };
       decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=1;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
      LeabraLayerSpec @[5] {
       name="IT";
       desc=;
       unique{ kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_AVG_INHIB;
	kwta_pt=0.6;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: };
       decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=1;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
      LeabraLayerSpec @[6] {
       name="Output";
       desc=;
       unique{ kwta;inhib_group;compute_i;i_kwta_pt;inhib;gp_kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=UNIT_GROUPS;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: };
       decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=1;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.5: };
     decay {event=1: phase=0: phase2=0: clamp_phase2=1: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=1;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
    };
    LeabraConSpec @[2] {
     name="LeabraConSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_0";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;ct_lrate;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
	LeabraBiasSpec @[0] {
	 name="FixedBias";
	 desc=;
	 unique{ rnd;wt_limits;wt_scale;lrate;	 };
	 children {
	  name=;
	  el_typ=LeabraBiasSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	 wt_limits {type=NONE: min=-1: max=5: sym=0: };
	 learn_rule=CTLEABRA_XCAL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: };
	 wt_scale_init {init=0: abs=1: rel=1: };
	 lrate=0;
	 cur_lrate=0;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=50;
	   step=-0.01;
	  };
	  SchedItem @[1] {
	   start_ctr=50;
	   start_val=0.5;
	   duration=50;
	   step=-0.006;
	  };
	  SchedItem @[2] {
	   start_ctr=100;
	   start_val=0.2;
	   duration=50;
	   step=-0.002;
	  };
	  SchedItem @[3] {
	   start_ctr=150;
	   start_val=0.1;
	   duration=50;
	   step=-0.001;
	  };
	  SchedItem @[4] {
	   start_ctr=200;
	   start_val=0.05;
	   duration=50;
	   step=-0.0006;
	  };
	  SchedItem @[5] {
	   start_ctr=250;
	   start_val=0.02;
	   duration=50;
	   step=-0.0002;
	  };
	  SchedItem @[6] {
	   start_ctr=300;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1: };
	 lmix {hebb=0: err=1: err_sb=1: };
	 xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	 xcal_c {s_dt=0.2: m_dt=0.1: };
	 xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	 savg_cor {cor=0.8: thresh=0.001: norm_con_n=0: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.05;
	 };
	 dwt_thresh=0.1;
	};
	LeabraBiasSpec @[1] {
	 name="OutputBias";
	 desc=;
	 unique{ rnd;wt_limits;wt_scale;wt_scale_init;	 };
	 children {
	  name=;
	  el_typ=LeabraBiasSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	 wt_limits {type=NONE: min=-1: max=5: sym=0: };
	 learn_rule=CTLEABRA_XCAL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: };
	 wt_scale_init {init=0: abs=1: rel=1: };
	 lrate=0.02;
	 cur_lrate=0.02;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=50;
	   step=-0.01;
	  };
	  SchedItem @[1] {
	   start_ctr=50;
	   start_val=0.5;
	   duration=50;
	   step=-0.006;
	  };
	  SchedItem @[2] {
	   start_ctr=100;
	   start_val=0.2;
	   duration=50;
	   step=-0.002;
	  };
	  SchedItem @[3] {
	   start_ctr=150;
	   start_val=0.1;
	   duration=50;
	   step=-0.001;
	  };
	  SchedItem @[4] {
	   start_ctr=200;
	   start_val=0.05;
	   duration=50;
	   step=-0.0006;
	  };
	  SchedItem @[5] {
	   start_ctr=250;
	   start_val=0.02;
	   duration=50;
	   step=-0.0002;
	  };
	  SchedItem @[6] {
	   start_ctr=300;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1: };
	 lmix {hebb=0: err=1: err_sb=1: };
	 xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	 xcal_c {s_dt=0.2: m_dt=0.1: };
	 xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	 savg_cor {cor=0.8: thresh=0.001: norm_con_n=0: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.05;
	 };
	 dwt_thresh=0.1;
	};
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=CTLEABRA_XCAL;
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.02;
       cur_lrate=0.02;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=0;
	default_val=1;
	interpolate=0;
	cur_val=1;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=50;
	 step=-0.01;
	};
	SchedItem @[1] {
	 start_ctr=50;
	 start_val=0.5;
	 duration=50;
	 step=-0.006;
	};
	SchedItem @[2] {
	 start_ctr=100;
	 start_val=0.2;
	 duration=50;
	 step=-0.002;
	};
	SchedItem @[3] {
	 start_ctr=150;
	 start_val=0.1;
	 duration=50;
	 step=-0.001;
	};
	SchedItem @[4] {
	 start_ctr=200;
	 start_val=0.05;
	 duration=50;
	 step=-0.0006;
	};
	SchedItem @[5] {
	 start_ctr=250;
	 start_val=0.02;
	 duration=50;
	 step=-0.0002;
	};
	SchedItem @[6] {
	 start_ctr=300;
	 start_val=0.01;
	 duration=1;
	 step=1;
	};
       };
       wt_sig {gain=6: off=1: };
       lmix {hebb=0: err=1: err_sb=1: };
       xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
       xcal_c {s_dt=0.2: m_dt=0.1: };
       xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
       savg_cor {cor=0.8: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.05;
       };
       dwt_thresh=0.1;
      };
      LeabraConSpec @[1] {
       name="V1Cons";
       desc=;
       unique{ lrate;lmix;savg_cor;wt_scale;wt_scale_init;ca_dep;rel_net_adapt;       };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
	LeabraBiasSpec @[0] {
	 name="V1Bias";
	 desc=;
	 unique{ rnd;wt_limits;wt_scale;wt_scale_init;	 };
	 children {
	  name=;
	  el_typ=LeabraBiasSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	 wt_limits {type=NONE: min=-1: max=5: sym=0: };
	 learn_rule=CTLEABRA_XCAL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: };
	 wt_scale_init {init=0: abs=1: rel=1: };
	 lrate=0;
	 cur_lrate=0;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=50;
	   step=-0.01;
	  };
	  SchedItem @[1] {
	   start_ctr=50;
	   start_val=0.5;
	   duration=50;
	   step=-0.006;
	  };
	  SchedItem @[2] {
	   start_ctr=100;
	   start_val=0.2;
	   duration=50;
	   step=-0.002;
	  };
	  SchedItem @[3] {
	   start_ctr=150;
	   start_val=0.1;
	   duration=50;
	   step=-0.001;
	  };
	  SchedItem @[4] {
	   start_ctr=200;
	   start_val=0.05;
	   duration=50;
	   step=-0.0006;
	  };
	  SchedItem @[5] {
	   start_ctr=250;
	   start_val=0.02;
	   duration=50;
	   step=-0.0002;
	  };
	  SchedItem @[6] {
	   start_ctr=300;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1: };
	 lmix {hebb=1: err=0: err_sb=1: };
	 xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	 xcal_c {s_dt=0.2: m_dt=0.1: };
	 xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	 savg_cor {cor=0.5: thresh=0.0001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.2;
	 };
	 dwt_thresh=0.1;
	};
	LeabraConSpec @[1] {
	 name="BlobCons";
	 desc=;
	 unique{ wt_scale;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=CTLEABRA_XCAL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: };
	 wt_scale_init {init=1: abs=1: rel=1: };
	 lrate=0;
	 cur_lrate=0;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=50;
	   step=-0.01;
	  };
	  SchedItem @[1] {
	   start_ctr=50;
	   start_val=0.5;
	   duration=50;
	   step=-0.006;
	  };
	  SchedItem @[2] {
	   start_ctr=100;
	   start_val=0.2;
	   duration=50;
	   step=-0.002;
	  };
	  SchedItem @[3] {
	   start_ctr=150;
	   start_val=0.1;
	   duration=50;
	   step=-0.001;
	  };
	  SchedItem @[4] {
	   start_ctr=200;
	   start_val=0.05;
	   duration=50;
	   step=-0.0006;
	  };
	  SchedItem @[5] {
	   start_ctr=250;
	   start_val=0.02;
	   duration=50;
	   step=-0.0002;
	  };
	  SchedItem @[6] {
	   start_ctr=300;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1: };
	 lmix {hebb=1: err=0: err_sb=1: };
	 xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	 xcal_c {s_dt=0.2: m_dt=0.1: };
	 xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	 savg_cor {cor=0.5: thresh=0.0001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.2;
	 };
	};
       };
       rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=CTLEABRA_XCAL;
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=1: abs=1: rel=1: };
       lrate=0;
       cur_lrate=0;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=50;
	 step=-0.01;
	};
	SchedItem @[1] {
	 start_ctr=50;
	 start_val=0.5;
	 duration=50;
	 step=-0.006;
	};
	SchedItem @[2] {
	 start_ctr=100;
	 start_val=0.2;
	 duration=50;
	 step=-0.002;
	};
	SchedItem @[3] {
	 start_ctr=150;
	 start_val=0.1;
	 duration=50;
	 step=-0.001;
	};
	SchedItem @[4] {
	 start_ctr=200;
	 start_val=0.05;
	 duration=50;
	 step=-0.0006;
	};
	SchedItem @[5] {
	 start_ctr=250;
	 start_val=0.02;
	 duration=50;
	 step=-0.0002;
	};
	SchedItem @[6] {
	 start_ctr=300;
	 start_val=0.01;
	 duration=1;
	 step=1;
	};
       };
       wt_sig {gain=6: off=1: };
       lmix {hebb=1: err=0: err_sb=1: };
       xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
       xcal_c {s_dt=0.2: m_dt=0.1: };
       xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
       savg_cor {cor=0.5: thresh=0.0001: norm_con_n=1: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.2;
       };
      };
      LeabraConSpec @[2] {
       name="HigherCons";
       desc=;
       unique{ rel_net_adapt;savg_cor;       };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
	LeabraConSpec @[0] {
	 name="FeedForward";
	 desc=;
	 unique{ wt_scale;wt_scale_init;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	  LeabraConSpec @[0] {
	   name="V1_V2_high";
	   desc=;
	   unique{ wt_scale;	   };
	   children {
	    name=;
	    el_typ=LeabraConSpec;
	    el_def=0;
	    LeabraConSpec @[0] {
	     name="V1_V2_med";
	     desc=;
	     unique{ wt_scale;wt_scale_init;	     };
	     children {
	      name=;
	      el_typ=LeabraConSpec;
	      el_def=0;
	      LeabraConSpec @[0] {
	       name="V1_V2_mblob";
	       desc=;
	       unique{ wt_scale;	       };
	       children {
		name=;
		el_typ=LeabraConSpec;
		el_def=0;
	       };
	       rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	       learn_rule=CTLEABRA_XCAL;
	       inhib=0;
	       wt_scale {abs=1: rel=1: };
	       wt_scale_init {init=1: abs=1: rel=1: };
	       lrate=0.02;
	       cur_lrate=0.04;
	       lrs_value=EPOCH;
	       lrate_sched {
		name=;
		el_typ=SchedItem;
		el_def=0;
		last_ctr=-1;
		default_val=1;
		interpolate=0;
		cur_val=0;
		SchedItem @[0] {
		 start_ctr=0;
		 start_val=1;
		 duration=50;
		 step=-0.01;
		};
		SchedItem @[1] {
		 start_ctr=50;
		 start_val=0.5;
		 duration=50;
		 step=-0.006;
		};
		SchedItem @[2] {
		 start_ctr=100;
		 start_val=0.2;
		 duration=50;
		 step=-0.002;
		};
		SchedItem @[3] {
		 start_ctr=150;
		 start_val=0.1;
		 duration=50;
		 step=-0.001;
		};
		SchedItem @[4] {
		 start_ctr=200;
		 start_val=0.05;
		 duration=50;
		 step=-0.0006;
		};
		SchedItem @[5] {
		 start_ctr=250;
		 start_val=0.02;
		 duration=50;
		 step=-0.0002;
		};
		SchedItem @[6] {
		 start_ctr=300;
		 start_val=0.01;
		 duration=1;
		 step=1;
		};
	       };
	       wt_sig {gain=6: off=1: };
	       lmix {hebb=0: err=1: err_sb=1: };
	       xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	       xcal_c {s_dt=0.2: m_dt=0.1: };
	       xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	       savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	       rel_net_adapt {
		on=1;
		trg_fm_input=0.85;
		trg_fm_output=0.15;
		trg_lateral=0;
		trg_sum=1;
		tol_lg=0.05;
		tol_sm=0.2;
		rel_lrate=0.2;
	       };
	      };
	     };
	     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	     learn_rule=CTLEABRA_XCAL;
	     inhib=0;
	     wt_scale {abs=1: rel=1: };
	     wt_scale_init {init=1: abs=1: rel=1: };
	     lrate=0.02;
	     cur_lrate=0.02;
	     lrs_value=EPOCH;
	     lrate_sched {
	      name=;
	      el_typ=SchedItem;
	      el_def=0;
	      last_ctr=-1;
	      default_val=1;
	      interpolate=0;
	      cur_val=0;
	      SchedItem @[0] {
	       start_ctr=0;
	       start_val=1;
	       duration=50;
	       step=-0.01;
	      };
	      SchedItem @[1] {
	       start_ctr=50;
	       start_val=0.5;
	       duration=50;
	       step=-0.006;
	      };
	      SchedItem @[2] {
	       start_ctr=100;
	       start_val=0.2;
	       duration=50;
	       step=-0.002;
	      };
	      SchedItem @[3] {
	       start_ctr=150;
	       start_val=0.1;
	       duration=50;
	       step=-0.001;
	      };
	      SchedItem @[4] {
	       start_ctr=200;
	       start_val=0.05;
	       duration=50;
	       step=-0.0006;
	      };
	      SchedItem @[5] {
	       start_ctr=250;
	       start_val=0.02;
	       duration=50;
	       step=-0.0002;
	      };
	      SchedItem @[6] {
	       start_ctr=300;
	       start_val=0.01;
	       duration=1;
	       step=1;
	      };
	     };
	     wt_sig {gain=6: off=1: };
	     lmix {hebb=0: err=1: err_sb=1: };
	     xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	     xcal_c {s_dt=0.2: m_dt=0.1: };
	     xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	     savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	     rel_net_adapt {
	      on=1;
	      trg_fm_input=0.85;
	      trg_fm_output=0.15;
	      trg_lateral=0;
	      trg_sum=1;
	      tol_lg=0.05;
	      tol_sm=0.2;
	      rel_lrate=0.2;
	     };
	    };
	    LeabraConSpec @[1] {
	     name="V1_V2_hblob";
	     desc=;
	     unique{ wt_scale;	     };
	     children {
	      name=;
	      el_typ=LeabraConSpec;
	      el_def=0;
	     };
	     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	     learn_rule=CTLEABRA_XCAL;
	     inhib=0;
	     wt_scale {abs=1: rel=1: };
	     wt_scale_init {init=1: abs=1: rel=1: };
	     lrate=0.02;
	     cur_lrate=0.01;
	     lrs_value=EPOCH;
	     lrate_sched {
	      name=;
	      el_typ=SchedItem;
	      el_def=0;
	      last_ctr=-1;
	      default_val=1;
	      interpolate=0;
	      cur_val=0;
	      SchedItem @[0] {
	       start_ctr=0;
	       start_val=1;
	       duration=50;
	       step=-0.01;
	      };
	      SchedItem @[1] {
	       start_ctr=50;
	       start_val=0.5;
	       duration=50;
	       step=-0.006;
	      };
	      SchedItem @[2] {
	       start_ctr=100;
	       start_val=0.2;
	       duration=50;
	       step=-0.002;
	      };
	      SchedItem @[3] {
	       start_ctr=150;
	       start_val=0.1;
	       duration=50;
	       step=-0.001;
	      };
	      SchedItem @[4] {
	       start_ctr=200;
	       start_val=0.05;
	       duration=50;
	       step=-0.0006;
	      };
	      SchedItem @[5] {
	       start_ctr=250;
	       start_val=0.02;
	       duration=50;
	       step=-0.0002;
	      };
	      SchedItem @[6] {
	       start_ctr=300;
	       start_val=0.01;
	       duration=1;
	       step=1;
	      };
	     };
	     wt_sig {gain=6: off=1: };
	     lmix {hebb=0: err=1: err_sb=1: };
	     xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	     xcal_c {s_dt=0.2: m_dt=0.1: };
	     xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	     savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	     rel_net_adapt {
	      on=1;
	      trg_fm_input=0.85;
	      trg_fm_output=0.15;
	      trg_lateral=0;
	      trg_sum=1;
	      tol_lg=0.05;
	      tol_sm=0.2;
	      rel_lrate=0.2;
	     };
	    };
	   };
	   rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	   wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	   learn_rule=CTLEABRA_XCAL;
	   inhib=0;
	   wt_scale {abs=1: rel=1: };
	   wt_scale_init {init=1: abs=1: rel=1: };
	   lrate=0.02;
	   cur_lrate=0.02;
	   lrs_value=EPOCH;
	   lrate_sched {
	    name=;
	    el_typ=SchedItem;
	    el_def=0;
	    last_ctr=-1;
	    default_val=1;
	    interpolate=0;
	    cur_val=0;
	    SchedItem @[0] {
	     start_ctr=0;
	     start_val=1;
	     duration=50;
	     step=-0.01;
	    };
	    SchedItem @[1] {
	     start_ctr=50;
	     start_val=0.5;
	     duration=50;
	     step=-0.006;
	    };
	    SchedItem @[2] {
	     start_ctr=100;
	     start_val=0.2;
	     duration=50;
	     step=-0.002;
	    };
	    SchedItem @[3] {
	     start_ctr=150;
	     start_val=0.1;
	     duration=50;
	     step=-0.001;
	    };
	    SchedItem @[4] {
	     start_ctr=200;
	     start_val=0.05;
	     duration=50;
	     step=-0.0006;
	    };
	    SchedItem @[5] {
	     start_ctr=250;
	     start_val=0.02;
	     duration=50;
	     step=-0.0002;
	    };
	    SchedItem @[6] {
	     start_ctr=300;
	     start_val=0.01;
	     duration=1;
	     step=1;
	    };
	   };
	   wt_sig {gain=6: off=1: };
	   lmix {hebb=0: err=1: err_sb=1: };
	   xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	   xcal_c {s_dt=0.2: m_dt=0.1: };
	   xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	   savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	   rel_net_adapt {
	    on=1;
	    trg_fm_input=0.85;
	    trg_fm_output=0.15;
	    trg_lateral=0;
	    trg_sum=1;
	    tol_lg=0.05;
	    tol_sm=0.2;
	    rel_lrate=0.2;
	   };
	  };
	  LeabraConSpec @[1] {
	   name="V2_V4_high";
	   desc=;
	   unique{ wt_scale;	   };
	   children {
	    name=;
	    el_typ=LeabraConSpec;
	    el_def=0;
	    LeabraConSpec @[0] {
	     name="V2_V4_med";
	     desc=;
	     unique{ wt_scale;	     };
	     children {
	      name=;
	      el_typ=LeabraConSpec;
	      el_def=0;
	     };
	     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	     learn_rule=CTLEABRA_XCAL;
	     inhib=0;
	     wt_scale {abs=1: rel=1: };
	     wt_scale_init {init=1: abs=1: rel=1: };
	     lrate=0.02;
	     cur_lrate=0.02;
	     lrs_value=EPOCH;
	     lrate_sched {
	      name=;
	      el_typ=SchedItem;
	      el_def=0;
	      last_ctr=-1;
	      default_val=1;
	      interpolate=0;
	      cur_val=0;
	      SchedItem @[0] {
	       start_ctr=0;
	       start_val=1;
	       duration=50;
	       step=-0.01;
	      };
	      SchedItem @[1] {
	       start_ctr=50;
	       start_val=0.5;
	       duration=50;
	       step=-0.006;
	      };
	      SchedItem @[2] {
	       start_ctr=100;
	       start_val=0.2;
	       duration=50;
	       step=-0.002;
	      };
	      SchedItem @[3] {
	       start_ctr=150;
	       start_val=0.1;
	       duration=50;
	       step=-0.001;
	      };
	      SchedItem @[4] {
	       start_ctr=200;
	       start_val=0.05;
	       duration=50;
	       step=-0.0006;
	      };
	      SchedItem @[5] {
	       start_ctr=250;
	       start_val=0.02;
	       duration=50;
	       step=-0.0002;
	      };
	      SchedItem @[6] {
	       start_ctr=300;
	       start_val=0.01;
	       duration=1;
	       step=1;
	      };
	     };
	     wt_sig {gain=6: off=1: };
	     lmix {hebb=0: err=1: err_sb=1: };
	     xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	     xcal_c {s_dt=0.2: m_dt=0.1: };
	     xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	     savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	     rel_net_adapt {
	      on=1;
	      trg_fm_input=0.85;
	      trg_fm_output=0.15;
	      trg_lateral=0;
	      trg_sum=1;
	      tol_lg=0.05;
	      tol_sm=0.2;
	      rel_lrate=0.2;
	     };
	    };
	   };
	   rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	   wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	   learn_rule=CTLEABRA_XCAL;
	   inhib=0;
	   wt_scale {abs=1: rel=1: };
	   wt_scale_init {init=1: abs=1: rel=1: };
	   lrate=0.02;
	   cur_lrate=0.02;
	   lrs_value=EPOCH;
	   lrate_sched {
	    name=;
	    el_typ=SchedItem;
	    el_def=0;
	    last_ctr=-1;
	    default_val=1;
	    interpolate=0;
	    cur_val=0;
	    SchedItem @[0] {
	     start_ctr=0;
	     start_val=1;
	     duration=50;
	     step=-0.01;
	    };
	    SchedItem @[1] {
	     start_ctr=50;
	     start_val=0.5;
	     duration=50;
	     step=-0.006;
	    };
	    SchedItem @[2] {
	     start_ctr=100;
	     start_val=0.2;
	     duration=50;
	     step=-0.002;
	    };
	    SchedItem @[3] {
	     start_ctr=150;
	     start_val=0.1;
	     duration=50;
	     step=-0.001;
	    };
	    SchedItem @[4] {
	     start_ctr=200;
	     start_val=0.05;
	     duration=50;
	     step=-0.0006;
	    };
	    SchedItem @[5] {
	     start_ctr=250;
	     start_val=0.02;
	     duration=50;
	     step=-0.0002;
	    };
	    SchedItem @[6] {
	     start_ctr=300;
	     start_val=0.01;
	     duration=1;
	     step=1;
	    };
	   };
	   wt_sig {gain=6: off=1: };
	   lmix {hebb=0: err=1: err_sb=1: };
	   xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	   xcal_c {s_dt=0.2: m_dt=0.1: };
	   xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	   savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	   rel_net_adapt {
	    on=1;
	    trg_fm_input=0.85;
	    trg_fm_output=0.15;
	    trg_lateral=0;
	    trg_sum=1;
	    tol_lg=0.05;
	    tol_sm=0.2;
	    rel_lrate=0.2;
	   };
	  };
	  LeabraConSpec @[2] {
	   name="V4_IT";
	   desc=;
	   unique{ wt_scale;	   };
	   children {
	    name=;
	    el_typ=LeabraConSpec;
	    el_def=0;
	   };
	   rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	   wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	   learn_rule=CTLEABRA_XCAL;
	   inhib=0;
	   wt_scale {abs=1: rel=1: };
	   wt_scale_init {init=1: abs=1: rel=1: };
	   lrate=0.02;
	   cur_lrate=0.01;
	   lrs_value=EPOCH;
	   lrate_sched {
	    name=;
	    el_typ=SchedItem;
	    el_def=0;
	    last_ctr=-1;
	    default_val=1;
	    interpolate=0;
	    cur_val=0;
	    SchedItem @[0] {
	     start_ctr=0;
	     start_val=1;
	     duration=50;
	     step=-0.01;
	    };
	    SchedItem @[1] {
	     start_ctr=50;
	     start_val=0.5;
	     duration=50;
	     step=-0.006;
	    };
	    SchedItem @[2] {
	     start_ctr=100;
	     start_val=0.2;
	     duration=50;
	     step=-0.002;
	    };
	    SchedItem @[3] {
	     start_ctr=150;
	     start_val=0.1;
	     duration=50;
	     step=-0.001;
	    };
	    SchedItem @[4] {
	     start_ctr=200;
	     start_val=0.05;
	     duration=50;
	     step=-0.0006;
	    };
	    SchedItem @[5] {
	     start_ctr=250;
	     start_val=0.02;
	     duration=50;
	     step=-0.0002;
	    };
	    SchedItem @[6] {
	     start_ctr=300;
	     start_val=0.01;
	     duration=1;
	     step=1;
	    };
	   };
	   wt_sig {gain=6: off=1: };
	   lmix {hebb=0: err=1: err_sb=1: };
	   xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	   xcal_c {s_dt=0.2: m_dt=0.1: };
	   xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	   savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	   rel_net_adapt {
	    on=1;
	    trg_fm_input=0.85;
	    trg_fm_output=0.15;
	    trg_lateral=0;
	    trg_sum=1;
	    tol_lg=0.05;
	    tol_sm=0.2;
	    rel_lrate=0.2;
	   };
	  };
	 };
	 rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=CTLEABRA_XCAL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: };
	 wt_scale_init {init=1: abs=1: rel=1: };
	 lrate=0.02;
	 cur_lrate=0.01;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=50;
	   step=-0.01;
	  };
	  SchedItem @[1] {
	   start_ctr=50;
	   start_val=0.5;
	   duration=50;
	   step=-0.006;
	  };
	  SchedItem @[2] {
	   start_ctr=100;
	   start_val=0.2;
	   duration=50;
	   step=-0.002;
	  };
	  SchedItem @[3] {
	   start_ctr=150;
	   start_val=0.1;
	   duration=50;
	   step=-0.001;
	  };
	  SchedItem @[4] {
	   start_ctr=200;
	   start_val=0.05;
	   duration=50;
	   step=-0.0006;
	  };
	  SchedItem @[5] {
	   start_ctr=250;
	   start_val=0.02;
	   duration=50;
	   step=-0.0002;
	  };
	  SchedItem @[6] {
	   start_ctr=300;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1: };
	 lmix {hebb=0: err=1: err_sb=1: };
	 xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	 xcal_c {s_dt=0.2: m_dt=0.1: };
	 xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	 savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=1;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.2;
	 };
	};
	LeabraConSpec @[1] {
	 name="FeedBack";
	 desc=;
	 unique{ wt_scale;wt_scale_init;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	  LeabraConSpec @[0] {
	   name="V2_V1_high";
	   desc=;
	   unique{ wt_scale;wt_scale_init;	   };
	   children {
	    name=;
	    el_typ=LeabraConSpec;
	    el_def=0;
	    LeabraConSpec @[0] {
	     name="V2_V1_med";
	     desc=;
	     unique{ wt_scale;	     };
	     children {
	      name=;
	      el_typ=LeabraConSpec;
	      el_def=0;
	     };
	     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	     learn_rule=CTLEABRA_XCAL;
	     inhib=0;
	     wt_scale {abs=1: rel=0: };
	     wt_scale_init {init=1: abs=1: rel=0: };
	     lrate=0.02;
	     cur_lrate=0.01;
	     lrs_value=EPOCH;
	     lrate_sched {
	      name=;
	      el_typ=SchedItem;
	      el_def=0;
	      last_ctr=-1;
	      default_val=1;
	      interpolate=0;
	      cur_val=0;
	      SchedItem @[0] {
	       start_ctr=0;
	       start_val=1;
	       duration=50;
	       step=-0.01;
	      };
	      SchedItem @[1] {
	       start_ctr=50;
	       start_val=0.5;
	       duration=50;
	       step=-0.006;
	      };
	      SchedItem @[2] {
	       start_ctr=100;
	       start_val=0.2;
	       duration=50;
	       step=-0.002;
	      };
	      SchedItem @[3] {
	       start_ctr=150;
	       start_val=0.1;
	       duration=50;
	       step=-0.001;
	      };
	      SchedItem @[4] {
	       start_ctr=200;
	       start_val=0.05;
	       duration=50;
	       step=-0.0006;
	      };
	      SchedItem @[5] {
	       start_ctr=250;
	       start_val=0.02;
	       duration=50;
	       step=-0.0002;
	      };
	      SchedItem @[6] {
	       start_ctr=300;
	       start_val=0.01;
	       duration=1;
	       step=1;
	      };
	     };
	     wt_sig {gain=6: off=1: };
	     lmix {hebb=0: err=1: err_sb=1: };
	     xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	     xcal_c {s_dt=0.2: m_dt=0.1: };
	     xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	     savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	     rel_net_adapt {
	      on=1;
	      trg_fm_input=0.85;
	      trg_fm_output=0.15;
	      trg_lateral=0;
	      trg_sum=1;
	      tol_lg=0.05;
	      tol_sm=0.2;
	      rel_lrate=0.2;
	     };
	    };
	    LeabraConSpec @[1] {
	     name="V2_V1_mblob";
	     desc=;
	     unique{ wt_scale;	     };
	     children {
	      name=;
	      el_typ=LeabraConSpec;
	      el_def=0;
	     };
	     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	     learn_rule=CTLEABRA_XCAL;
	     inhib=0;
	     wt_scale {abs=1: rel=0: };
	     wt_scale_init {init=1: abs=1: rel=0: };
	     lrate=0.02;
	     cur_lrate=0.01;
	     lrs_value=EPOCH;
	     lrate_sched {
	      name=;
	      el_typ=SchedItem;
	      el_def=0;
	      last_ctr=-1;
	      default_val=1;
	      interpolate=0;
	      cur_val=0;
	      SchedItem @[0] {
	       start_ctr=0;
	       start_val=1;
	       duration=50;
	       step=-0.01;
	      };
	      SchedItem @[1] {
	       start_ctr=50;
	       start_val=0.5;
	       duration=50;
	       step=-0.006;
	      };
	      SchedItem @[2] {
	       start_ctr=100;
	       start_val=0.2;
	       duration=50;
	       step=-0.002;
	      };
	      SchedItem @[3] {
	       start_ctr=150;
	       start_val=0.1;
	       duration=50;
	       step=-0.001;
	      };
	      SchedItem @[4] {
	       start_ctr=200;
	       start_val=0.05;
	       duration=50;
	       step=-0.0006;
	      };
	      SchedItem @[5] {
	       start_ctr=250;
	       start_val=0.02;
	       duration=50;
	       step=-0.0002;
	      };
	      SchedItem @[6] {
	       start_ctr=300;
	       start_val=0.01;
	       duration=1;
	       step=1;
	      };
	     };
	     wt_sig {gain=6: off=1: };
	     lmix {hebb=0: err=1: err_sb=1: };
	     xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	     xcal_c {s_dt=0.2: m_dt=0.1: };
	     xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	     savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	     rel_net_adapt {
	      on=1;
	      trg_fm_input=0.85;
	      trg_fm_output=0.15;
	      trg_lateral=0;
	      trg_sum=1;
	      tol_lg=0.05;
	      tol_sm=0.2;
	      rel_lrate=0.2;
	     };
	    };
	   };
	   rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	   wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	   learn_rule=CTLEABRA_XCAL;
	   inhib=0;
	   wt_scale {abs=1: rel=0: };
	   wt_scale_init {init=1: abs=1: rel=0: };
	   lrate=0.02;
	   cur_lrate=0.01;
	   lrs_value=EPOCH;
	   lrate_sched {
	    name=;
	    el_typ=SchedItem;
	    el_def=0;
	    last_ctr=-1;
	    default_val=1;
	    interpolate=0;
	    cur_val=0;
	    SchedItem @[0] {
	     start_ctr=0;
	     start_val=1;
	     duration=50;
	     step=-0.01;
	    };
	    SchedItem @[1] {
	     start_ctr=50;
	     start_val=0.5;
	     duration=50;
	     step=-0.006;
	    };
	    SchedItem @[2] {
	     start_ctr=100;
	     start_val=0.2;
	     duration=50;
	     step=-0.002;
	    };
	    SchedItem @[3] {
	     start_ctr=150;
	     start_val=0.1;
	     duration=50;
	     step=-0.001;
	    };
	    SchedItem @[4] {
	     start_ctr=200;
	     start_val=0.05;
	     duration=50;
	     step=-0.0006;
	    };
	    SchedItem @[5] {
	     start_ctr=250;
	     start_val=0.02;
	     duration=50;
	     step=-0.0002;
	    };
	    SchedItem @[6] {
	     start_ctr=300;
	     start_val=0.01;
	     duration=1;
	     step=1;
	    };
	   };
	   wt_sig {gain=6: off=1: };
	   lmix {hebb=0: err=1: err_sb=1: };
	   xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	   xcal_c {s_dt=0.2: m_dt=0.1: };
	   xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	   savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	   rel_net_adapt {
	    on=1;
	    trg_fm_input=0.85;
	    trg_fm_output=0.15;
	    trg_lateral=0;
	    trg_sum=1;
	    tol_lg=0.05;
	    tol_sm=0.2;
	    rel_lrate=0.2;
	   };
	  };
	  LeabraConSpec @[1] {
	   name="V4_V2_high";
	   desc=;
	   unique{ wt_scale;	   };
	   children {
	    name=;
	    el_typ=LeabraConSpec;
	    el_def=0;
	    LeabraConSpec @[0] {
	     name="V4_V2_med";
	     desc=;
	     unique{ wt_scale;	     };
	     children {
	      name=;
	      el_typ=LeabraConSpec;
	      el_def=0;
	     };
	     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	     learn_rule=CTLEABRA_XCAL;
	     inhib=0;
	     wt_scale {abs=1: rel=0.1: };
	     wt_scale_init {init=1: abs=1: rel=0.1: };
	     lrate=0.02;
	     cur_lrate=0.02;
	     lrs_value=EPOCH;
	     lrate_sched {
	      name=;
	      el_typ=SchedItem;
	      el_def=0;
	      last_ctr=-1;
	      default_val=1;
	      interpolate=0;
	      cur_val=0;
	      SchedItem @[0] {
	       start_ctr=0;
	       start_val=1;
	       duration=50;
	       step=-0.01;
	      };
	      SchedItem @[1] {
	       start_ctr=50;
	       start_val=0.5;
	       duration=50;
	       step=-0.006;
	      };
	      SchedItem @[2] {
	       start_ctr=100;
	       start_val=0.2;
	       duration=50;
	       step=-0.002;
	      };
	      SchedItem @[3] {
	       start_ctr=150;
	       start_val=0.1;
	       duration=50;
	       step=-0.001;
	      };
	      SchedItem @[4] {
	       start_ctr=200;
	       start_val=0.05;
	       duration=50;
	       step=-0.0006;
	      };
	      SchedItem @[5] {
	       start_ctr=250;
	       start_val=0.02;
	       duration=50;
	       step=-0.0002;
	      };
	      SchedItem @[6] {
	       start_ctr=300;
	       start_val=0.01;
	       duration=1;
	       step=1;
	      };
	     };
	     wt_sig {gain=6: off=1: };
	     lmix {hebb=0: err=1: err_sb=1: };
	     xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	     xcal_c {s_dt=0.2: m_dt=0.1: };
	     xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	     savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	     rel_net_adapt {
	      on=1;
	      trg_fm_input=0.85;
	      trg_fm_output=0.15;
	      trg_lateral=0;
	      trg_sum=1;
	      tol_lg=0.05;
	      tol_sm=0.2;
	      rel_lrate=0.2;
	     };
	    };
	   };
	   rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	   wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	   learn_rule=CTLEABRA_XCAL;
	   inhib=0;
	   wt_scale {abs=1: rel=0.1: };
	   wt_scale_init {init=1: abs=1: rel=0.1: };
	   lrate=0.02;
	   cur_lrate=0.02;
	   lrs_value=EPOCH;
	   lrate_sched {
	    name=;
	    el_typ=SchedItem;
	    el_def=0;
	    last_ctr=-1;
	    default_val=1;
	    interpolate=0;
	    cur_val=0;
	    SchedItem @[0] {
	     start_ctr=0;
	     start_val=1;
	     duration=50;
	     step=-0.01;
	    };
	    SchedItem @[1] {
	     start_ctr=50;
	     start_val=0.5;
	     duration=50;
	     step=-0.006;
	    };
	    SchedItem @[2] {
	     start_ctr=100;
	     start_val=0.2;
	     duration=50;
	     step=-0.002;
	    };
	    SchedItem @[3] {
	     start_ctr=150;
	     start_val=0.1;
	     duration=50;
	     step=-0.001;
	    };
	    SchedItem @[4] {
	     start_ctr=200;
	     start_val=0.05;
	     duration=50;
	     step=-0.0006;
	    };
	    SchedItem @[5] {
	     start_ctr=250;
	     start_val=0.02;
	     duration=50;
	     step=-0.0002;
	    };
	    SchedItem @[6] {
	     start_ctr=300;
	     start_val=0.01;
	     duration=1;
	     step=1;
	    };
	   };
	   wt_sig {gain=6: off=1: };
	   lmix {hebb=0: err=1: err_sb=1: };
	   xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	   xcal_c {s_dt=0.2: m_dt=0.1: };
	   xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	   savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	   rel_net_adapt {
	    on=1;
	    trg_fm_input=0.85;
	    trg_fm_output=0.15;
	    trg_lateral=0;
	    trg_sum=1;
	    tol_lg=0.05;
	    tol_sm=0.2;
	    rel_lrate=0.2;
	   };
	  };
	  LeabraConSpec @[2] {
	   name="IT_V4";
	   desc=;
	   unique{ wt_scale;	   };
	   children {
	    name=;
	    el_typ=LeabraConSpec;
	    el_def=0;
	   };
	   rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	   wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	   learn_rule=CTLEABRA_XCAL;
	   inhib=0;
	   wt_scale {abs=1: rel=0.1: };
	   wt_scale_init {init=1: abs=1: rel=0.1: };
	   lrate=0.02;
	   cur_lrate=0.01;
	   lrs_value=EPOCH;
	   lrate_sched {
	    name=;
	    el_typ=SchedItem;
	    el_def=0;
	    last_ctr=-1;
	    default_val=1;
	    interpolate=0;
	    cur_val=0;
	    SchedItem @[0] {
	     start_ctr=0;
	     start_val=1;
	     duration=50;
	     step=-0.01;
	    };
	    SchedItem @[1] {
	     start_ctr=50;
	     start_val=0.5;
	     duration=50;
	     step=-0.006;
	    };
	    SchedItem @[2] {
	     start_ctr=100;
	     start_val=0.2;
	     duration=50;
	     step=-0.002;
	    };
	    SchedItem @[3] {
	     start_ctr=150;
	     start_val=0.1;
	     duration=50;
	     step=-0.001;
	    };
	    SchedItem @[4] {
	     start_ctr=200;
	     start_val=0.05;
	     duration=50;
	     step=-0.0006;
	    };
	    SchedItem @[5] {
	     start_ctr=250;
	     start_val=0.02;
	     duration=50;
	     step=-0.0002;
	    };
	    SchedItem @[6] {
	     start_ctr=300;
	     start_val=0.01;
	     duration=1;
	     step=1;
	    };
	   };
	   wt_sig {gain=6: off=1: };
	   lmix {hebb=0: err=1: err_sb=1: };
	   xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	   xcal_c {s_dt=0.2: m_dt=0.1: };
	   xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	   savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	   rel_net_adapt {
	    on=1;
	    trg_fm_input=0.85;
	    trg_fm_output=0.15;
	    trg_lateral=0;
	    trg_sum=1;
	    tol_lg=0.05;
	    tol_sm=0.2;
	    rel_lrate=0.2;
	   };
	  };
	  LeabraConSpec @[3] {
	   name="Out_V4";
	   desc=;
	   unique{ wt_scale;savg_cor;	   };
	   children {
	    name=;
	    el_typ=LeabraConSpec;
	    el_def=0;
	   };
	   rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	   wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	   learn_rule=CTLEABRA_XCAL;
	   inhib=0;
	   wt_scale {abs=1: rel=0.1: };
	   wt_scale_init {init=1: abs=1: rel=0.1: };
	   lrate=0.02;
	   cur_lrate=0.02;
	   lrs_value=EPOCH;
	   lrate_sched {
	    name=;
	    el_typ=SchedItem;
	    el_def=0;
	    last_ctr=-1;
	    default_val=1;
	    interpolate=0;
	    cur_val=0;
	    SchedItem @[0] {
	     start_ctr=0;
	     start_val=1;
	     duration=50;
	     step=-0.01;
	    };
	    SchedItem @[1] {
	     start_ctr=50;
	     start_val=0.5;
	     duration=50;
	     step=-0.006;
	    };
	    SchedItem @[2] {
	     start_ctr=100;
	     start_val=0.2;
	     duration=50;
	     step=-0.002;
	    };
	    SchedItem @[3] {
	     start_ctr=150;
	     start_val=0.1;
	     duration=50;
	     step=-0.001;
	    };
	    SchedItem @[4] {
	     start_ctr=200;
	     start_val=0.05;
	     duration=50;
	     step=-0.0006;
	    };
	    SchedItem @[5] {
	     start_ctr=250;
	     start_val=0.02;
	     duration=50;
	     step=-0.0002;
	    };
	    SchedItem @[6] {
	     start_ctr=300;
	     start_val=0.01;
	     duration=1;
	     step=1;
	    };
	   };
	   wt_sig {gain=6: off=1: };
	   lmix {hebb=0: err=1: err_sb=1: };
	   xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	   xcal_c {s_dt=0.2: m_dt=0.1: };
	   xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	   savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	   rel_net_adapt {
	    on=1;
	    trg_fm_input=0.85;
	    trg_fm_output=0.15;
	    trg_lateral=0;
	    trg_sum=1;
	    tol_lg=0.05;
	    tol_sm=0.2;
	    rel_lrate=0.2;
	   };
	  };
	  LeabraConSpec @[4] {
	   name="Out_IT";
	   desc=;
	   unique{ wt_scale;savg_cor;	   };
	   children {
	    name=;
	    el_typ=LeabraConSpec;
	    el_def=0;
	   };
	   rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	   wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	   learn_rule=CTLEABRA_XCAL;
	   inhib=0;
	   wt_scale {abs=1: rel=0.1: };
	   wt_scale_init {init=1: abs=1: rel=0.1: };
	   lrate=0.02;
	   cur_lrate=0.01;
	   lrs_value=EPOCH;
	   lrate_sched {
	    name=;
	    el_typ=SchedItem;
	    el_def=0;
	    last_ctr=-1;
	    default_val=1;
	    interpolate=0;
	    cur_val=0;
	    SchedItem @[0] {
	     start_ctr=0;
	     start_val=1;
	     duration=50;
	     step=-0.01;
	    };
	    SchedItem @[1] {
	     start_ctr=50;
	     start_val=0.5;
	     duration=50;
	     step=-0.006;
	    };
	    SchedItem @[2] {
	     start_ctr=100;
	     start_val=0.2;
	     duration=50;
	     step=-0.002;
	    };
	    SchedItem @[3] {
	     start_ctr=150;
	     start_val=0.1;
	     duration=50;
	     step=-0.001;
	    };
	    SchedItem @[4] {
	     start_ctr=200;
	     start_val=0.05;
	     duration=50;
	     step=-0.0006;
	    };
	    SchedItem @[5] {
	     start_ctr=250;
	     start_val=0.02;
	     duration=50;
	     step=-0.0002;
	    };
	    SchedItem @[6] {
	     start_ctr=300;
	     start_val=0.01;
	     duration=1;
	     step=1;
	    };
	   };
	   wt_sig {gain=6: off=1: };
	   lmix {hebb=0: err=1: err_sb=1: };
	   xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	   xcal_c {s_dt=0.2: m_dt=0.1: };
	   xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	   savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	   rel_net_adapt {
	    on=1;
	    trg_fm_input=0.85;
	    trg_fm_output=0.15;
	    trg_lateral=0;
	    trg_sum=1;
	    tol_lg=0.05;
	    tol_sm=0.2;
	    rel_lrate=0.2;
	   };
	  };
	 };
	 rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=CTLEABRA_XCAL;
	 inhib=0;
	 wt_scale {abs=1: rel=0.1: };
	 wt_scale_init {init=1: abs=1: rel=0.1: };
	 lrate=0.02;
	 cur_lrate=0.01;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=50;
	   step=-0.01;
	  };
	  SchedItem @[1] {
	   start_ctr=50;
	   start_val=0.5;
	   duration=50;
	   step=-0.006;
	  };
	  SchedItem @[2] {
	   start_ctr=100;
	   start_val=0.2;
	   duration=50;
	   step=-0.002;
	  };
	  SchedItem @[3] {
	   start_ctr=150;
	   start_val=0.1;
	   duration=50;
	   step=-0.001;
	  };
	  SchedItem @[4] {
	   start_ctr=200;
	   start_val=0.05;
	   duration=50;
	   step=-0.0006;
	  };
	  SchedItem @[5] {
	   start_ctr=250;
	   start_val=0.02;
	   duration=50;
	   step=-0.0002;
	  };
	  SchedItem @[6] {
	   start_ctr=300;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1: };
	 lmix {hebb=0: err=1: err_sb=1: };
	 xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	 xcal_c {s_dt=0.2: m_dt=0.1: };
	 xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	 savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=1;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.2;
	 };
	};
	LeabraConSpec @[2] {
	 name="ToOutput";
	 desc=;
	 unique{ wt_scale;wt_scale_init;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	  LeabraConSpec @[0] {
	   name="V4_Out";
	   desc=;
	   unique{ wt_scale;	   };
	   children {
	    name=;
	    el_typ=LeabraConSpec;
	    el_def=0;
	   };
	   rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	   wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	   learn_rule=CTLEABRA_XCAL;
	   inhib=0;
	   wt_scale {abs=1: rel=1: };
	   wt_scale_init {init=1: abs=1: rel=1: };
	   lrate=0.02;
	   cur_lrate=0.02;
	   lrs_value=EPOCH;
	   lrate_sched {
	    name=;
	    el_typ=SchedItem;
	    el_def=0;
	    last_ctr=-1;
	    default_val=1;
	    interpolate=0;
	    cur_val=0;
	    SchedItem @[0] {
	     start_ctr=0;
	     start_val=1;
	     duration=50;
	     step=-0.01;
	    };
	    SchedItem @[1] {
	     start_ctr=50;
	     start_val=0.5;
	     duration=50;
	     step=-0.006;
	    };
	    SchedItem @[2] {
	     start_ctr=100;
	     start_val=0.2;
	     duration=50;
	     step=-0.002;
	    };
	    SchedItem @[3] {
	     start_ctr=150;
	     start_val=0.1;
	     duration=50;
	     step=-0.001;
	    };
	    SchedItem @[4] {
	     start_ctr=200;
	     start_val=0.05;
	     duration=50;
	     step=-0.0006;
	    };
	    SchedItem @[5] {
	     start_ctr=250;
	     start_val=0.02;
	     duration=50;
	     step=-0.0002;
	    };
	    SchedItem @[6] {
	     start_ctr=300;
	     start_val=0.01;
	     duration=1;
	     step=1;
	    };
	   };
	   wt_sig {gain=6: off=1: };
	   lmix {hebb=0: err=1: err_sb=1: };
	   xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	   xcal_c {s_dt=0.2: m_dt=0.1: };
	   xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	   savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	   rel_net_adapt {
	    on=1;
	    trg_fm_input=0.85;
	    trg_fm_output=0.15;
	    trg_lateral=0;
	    trg_sum=1;
	    tol_lg=0.05;
	    tol_sm=0.2;
	    rel_lrate=0.2;
	   };
	  };
	  LeabraConSpec @[1] {
	   name="IT_Out";
	   desc=;
	   unique{ wt_scale;	   };
	   children {
	    name=;
	    el_typ=LeabraConSpec;
	    el_def=0;
	   };
	   rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	   wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	   learn_rule=CTLEABRA_XCAL;
	   inhib=0;
	   wt_scale {abs=1: rel=1: };
	   wt_scale_init {init=1: abs=1: rel=1: };
	   lrate=0.02;
	   cur_lrate=0.01;
	   lrs_value=EPOCH;
	   lrate_sched {
	    name=;
	    el_typ=SchedItem;
	    el_def=0;
	    last_ctr=-1;
	    default_val=1;
	    interpolate=0;
	    cur_val=0;
	    SchedItem @[0] {
	     start_ctr=0;
	     start_val=1;
	     duration=50;
	     step=-0.01;
	    };
	    SchedItem @[1] {
	     start_ctr=50;
	     start_val=0.5;
	     duration=50;
	     step=-0.006;
	    };
	    SchedItem @[2] {
	     start_ctr=100;
	     start_val=0.2;
	     duration=50;
	     step=-0.002;
	    };
	    SchedItem @[3] {
	     start_ctr=150;
	     start_val=0.1;
	     duration=50;
	     step=-0.001;
	    };
	    SchedItem @[4] {
	     start_ctr=200;
	     start_val=0.05;
	     duration=50;
	     step=-0.0006;
	    };
	    SchedItem @[5] {
	     start_ctr=250;
	     start_val=0.02;
	     duration=50;
	     step=-0.0002;
	    };
	    SchedItem @[6] {
	     start_ctr=300;
	     start_val=0.01;
	     duration=1;
	     step=1;
	    };
	   };
	   wt_sig {gain=6: off=1: };
	   lmix {hebb=0: err=1: err_sb=1: };
	   xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	   xcal_c {s_dt=0.2: m_dt=0.1: };
	   xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	   savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	   rel_net_adapt {
	    on=1;
	    trg_fm_input=0.85;
	    trg_fm_output=0.15;
	    trg_lateral=0;
	    trg_sum=1;
	    tol_lg=0.05;
	    tol_sm=0.2;
	    rel_lrate=0.2;
	   };
	  };
	 };
	 rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=CTLEABRA_XCAL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: };
	 wt_scale_init {init=1: abs=1: rel=1: };
	 lrate=0.02;
	 cur_lrate=0.01;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=50;
	   step=-0.01;
	  };
	  SchedItem @[1] {
	   start_ctr=50;
	   start_val=0.5;
	   duration=50;
	   step=-0.006;
	  };
	  SchedItem @[2] {
	   start_ctr=100;
	   start_val=0.2;
	   duration=50;
	   step=-0.002;
	  };
	  SchedItem @[3] {
	   start_ctr=150;
	   start_val=0.1;
	   duration=50;
	   step=-0.001;
	  };
	  SchedItem @[4] {
	   start_ctr=200;
	   start_val=0.05;
	   duration=50;
	   step=-0.0006;
	  };
	  SchedItem @[5] {
	   start_ctr=250;
	   start_val=0.02;
	   duration=50;
	   step=-0.0002;
	  };
	  SchedItem @[6] {
	   start_ctr=300;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1: };
	 lmix {hebb=0: err=1: err_sb=1: };
	 xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	 xcal_c {s_dt=0.2: m_dt=0.1: };
	 xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	 savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=1;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.2;
	 };
	};
       };
       rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=CTLEABRA_XCAL;
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.02;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=50;
	 step=-0.01;
	};
	SchedItem @[1] {
	 start_ctr=50;
	 start_val=0.5;
	 duration=50;
	 step=-0.006;
	};
	SchedItem @[2] {
	 start_ctr=100;
	 start_val=0.2;
	 duration=50;
	 step=-0.002;
	};
	SchedItem @[3] {
	 start_ctr=150;
	 start_val=0.1;
	 duration=50;
	 step=-0.001;
	};
	SchedItem @[4] {
	 start_ctr=200;
	 start_val=0.05;
	 duration=50;
	 step=-0.0006;
	};
	SchedItem @[5] {
	 start_ctr=250;
	 start_val=0.02;
	 duration=50;
	 step=-0.0002;
	};
	SchedItem @[6] {
	 start_ctr=300;
	 start_val=0.01;
	 duration=1;
	 step=1;
	};
       };
       wt_sig {gain=6: off=1: };
       lmix {hebb=0: err=1: err_sb=1: };
       xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
       xcal_c {s_dt=0.2: m_dt=0.1: };
       xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
       savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
       rel_net_adapt {
	on=1;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.2;
       };
      };
      LeabraConSpec @[3] {
       name="FixedWts";
       desc=;
       unique{ rnd;lrate;savg_cor;       };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
	LeabraConSpec @[0] {
	 name="NoCon";
	 desc=;
	 unique{ rnd;wt_scale;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=CTLEABRA_XCAL;
	 inhib=0;
	 wt_scale {abs=1: rel=0: };
	 wt_scale_init {init=0: abs=1: rel=1: };
	 lrate=0;
	 cur_lrate=0;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=50;
	   step=-0.01;
	  };
	  SchedItem @[1] {
	   start_ctr=50;
	   start_val=0.5;
	   duration=50;
	   step=-0.006;
	  };
	  SchedItem @[2] {
	   start_ctr=100;
	   start_val=0.2;
	   duration=50;
	   step=-0.002;
	  };
	  SchedItem @[3] {
	   start_ctr=150;
	   start_val=0.1;
	   duration=50;
	   step=-0.001;
	  };
	  SchedItem @[4] {
	   start_ctr=200;
	   start_val=0.05;
	   duration=50;
	   step=-0.0006;
	  };
	  SchedItem @[5] {
	   start_ctr=250;
	   start_val=0.02;
	   duration=50;
	   step=-0.0002;
	  };
	  SchedItem @[6] {
	   start_ctr=300;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1: };
	 lmix {hebb=0: err=1: err_sb=1: };
	 xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	 xcal_c {s_dt=0.2: m_dt=0.1: };
	 xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	 savg_cor {cor=0.5: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.05;
	 };
	};
	LeabraConSpec @[1] {
	 name="FmTarget";
	 desc=;
	 unique{ wt_scale;wt_scale_init;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0.95: var=0: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=CTLEABRA_XCAL;
	 inhib=0;
	 wt_scale {abs=1: rel=0: };
	 wt_scale_init {init=1: abs=1: rel=0: };
	 lrate=0;
	 cur_lrate=0;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=50;
	   step=-0.01;
	  };
	  SchedItem @[1] {
	   start_ctr=50;
	   start_val=0.5;
	   duration=50;
	   step=-0.006;
	  };
	  SchedItem @[2] {
	   start_ctr=100;
	   start_val=0.2;
	   duration=50;
	   step=-0.002;
	  };
	  SchedItem @[3] {
	   start_ctr=150;
	   start_val=0.1;
	   duration=50;
	   step=-0.001;
	  };
	  SchedItem @[4] {
	   start_ctr=200;
	   start_val=0.05;
	   duration=50;
	   step=-0.0006;
	  };
	  SchedItem @[5] {
	   start_ctr=250;
	   start_val=0.02;
	   duration=50;
	   step=-0.0002;
	  };
	  SchedItem @[6] {
	   start_ctr=300;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1: };
	 lmix {hebb=0: err=1: err_sb=1: };
	 xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
	 xcal_c {s_dt=0.2: m_dt=0.1: };
	 xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
	 savg_cor {cor=0.5: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.05;
	 };
	};
       };
       rnd {name="": type=UNIFORM: mean=0.95: var=0: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=CTLEABRA_XCAL;
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0;
       cur_lrate=0;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=50;
	 step=-0.01;
	};
	SchedItem @[1] {
	 start_ctr=50;
	 start_val=0.5;
	 duration=50;
	 step=-0.006;
	};
	SchedItem @[2] {
	 start_ctr=100;
	 start_val=0.2;
	 duration=50;
	 step=-0.002;
	};
	SchedItem @[3] {
	 start_ctr=150;
	 start_val=0.1;
	 duration=50;
	 step=-0.001;
	};
	SchedItem @[4] {
	 start_ctr=200;
	 start_val=0.05;
	 duration=50;
	 step=-0.0006;
	};
	SchedItem @[5] {
	 start_ctr=250;
	 start_val=0.02;
	 duration=50;
	 step=-0.0002;
	};
	SchedItem @[6] {
	 start_ctr=300;
	 start_val=0.01;
	 duration=1;
	 step=1;
	};
       };
       wt_sig {gain=6: off=1: };
       lmix {hebb=0: err=1: err_sb=1: };
       xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
       xcal_c {s_dt=0.2: m_dt=0.1: };
       xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
       savg_cor {cor=0.5: thresh=0.001: norm_con_n=1: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.05;
       };
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=CTLEABRA_XCAL;
     inhib=0;
     wt_scale {abs=1: rel=1: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.02;
     cur_lrate=0.01;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=0;
      SchedItem @[0] {
       start_ctr=0;
       start_val=1;
       duration=50;
       step=-0.01;
      };
      SchedItem @[1] {
       start_ctr=50;
       start_val=0.5;
       duration=50;
       step=-0.006;
      };
      SchedItem @[2] {
       start_ctr=100;
       start_val=0.2;
       duration=50;
       step=-0.002;
      };
      SchedItem @[3] {
       start_ctr=150;
       start_val=0.1;
       duration=50;
       step=-0.001;
      };
      SchedItem @[4] {
       start_ctr=200;
       start_val=0.05;
       duration=50;
       step=-0.0006;
      };
      SchedItem @[5] {
       start_ctr=250;
       start_val=0.02;
       duration=50;
       step=-0.0002;
      };
      SchedItem @[6] {
       start_ctr=300;
       start_val=0.01;
       duration=1;
       step=1;
      };
     };
     wt_sig {gain=6: off=1: };
     lmix {hebb=0: err=1: err_sb=1: };
     xcal {lrn_var=XCAL_SR: mvl_mix=0.005: svm_mix=0.995: s_mix=0.9: m_mix=0.1: l_dt=0.005: l_gain=1.5: ml_dt=0.4: d_rev=0.1: d_gain=1: d_rev_ratio=9: };
     xcal_c {s_dt=0.2: m_dt=0.1: };
     xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: };
     savg_cor {cor=0.8: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.05;
     };
    };
    BaseSpec_Group @.gp[0] {
     name="LeabraPrjns";
     el_typ=FullPrjnSpec;
     el_def=0;
     FullPrjnSpec @[0] {
      name="FullPrjnSpec_0";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
     };
     V1RFPrjnSpec @[1] {
      name="high_v1";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=TiledRFPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=1;
      rf_spec {
       name="high_v1_rf_spec";
       threads {
	run_time {name="": s_used=0: n_used=0: };
	sync_time {name="": s_used=0: n_used=0: };
	total_time {name="": s_used=0: n_used=0: };
	n_wake_in_sync=0;
	run_time_pct=0;
	sync_time_pct=0;
	wake_in_sync_pct=5.086490225169912e-315;
       };
       filter_type=GABOR;
       rf_width {x=4: y=4: };
       rf_ovlp {x=2: y=2: };
       n_filters=8;
       gabor_rf {n_angles=4: freq=1.5: length=2: width=2: amp=0.9: };
       blob_rf {n_sizes=1: width_st=1: width_inc=2: };
      };
      rf_move {x=2: y=2: };
      wrap=1;
      dog_surr_mult=1;
      trg_recv_geom {x=0: y=0: };
      trg_send_geom {x=0: y=0: };
     };
     V1RFPrjnSpec @[2] {
      name="med_v1";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=V1RFPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=1;
      rf_spec {
       name="med_v1_rf_spec";
       threads {
	run_time {name="": s_used=0: n_used=0: };
	sync_time {name="": s_used=0: n_used=0: };
	total_time {name="": s_used=0: n_used=0: };
	n_wake_in_sync=0;
	run_time_pct=0;
	sync_time_pct=0;
	wake_in_sync_pct=-3.880381882481743e-08;
       };
       filter_type=GABOR;
       rf_width {x=4: y=4: };
       rf_ovlp {x=2: y=2: };
       n_filters=8;
       gabor_rf {n_angles=4: freq=1.5: length=2: width=2: amp=0.9: };
       blob_rf {n_sizes=1: width_st=1: width_inc=2: };
      };
      rf_move {x=2: y=2: };
      wrap=1;
      dog_surr_mult=1;
      trg_recv_geom {x=0: y=0: };
      trg_send_geom {x=0: y=0: };
     };
     V1RFPrjnSpec @[3] {
      name="med_v1_blob";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=V1RFPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=1;
      rf_spec {
       name="med_v1_blob_rf_spec";
       threads {
	run_time {name="": s_used=0: n_used=0: };
	sync_time {name="": s_used=0: n_used=0: };
	total_time {name="": s_used=0: n_used=0: };
	n_wake_in_sync=0;
	run_time_pct=0;
	sync_time_pct=0;
	wake_in_sync_pct=1.16529096057956e-15;
       };
       filter_type=BLOB;
       rf_width {x=4: y=4: };
       rf_ovlp {x=2: y=2: };
       n_filters=4;
       gabor_rf {n_angles=8: freq=1: length=4: width=2: amp=0.9: };
       blob_rf {n_sizes=1: width_st=2: width_inc=2: };
      };
      rf_move {x=2: y=2: };
      wrap=1;
      dog_surr_mult=0;
      trg_recv_geom {x=0: y=0: };
      trg_send_geom {x=0: y=0: };
     };
     TiledGpRFPrjnSpec @[4] {
      name="V1_V2";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V2_V1";
	desc=;
	unique{ reciprocal;	};
	children {
	 name=;
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	send_gp_size {x=4: y=4: };
	send_gp_skip {x=2: y=2: };
	wrap=1;
	reciprocal=1;
	trg_recv_geom {x=0: y=0: };
	trg_send_geom {x=0: y=0: };
       };
      };
      self_con=0;
      init_wts=0;
      send_gp_size {x=4: y=4: };
      send_gp_skip {x=2: y=2: };
      wrap=1;
      reciprocal=0;
      trg_recv_geom {x=0: y=0: };
      trg_send_geom {x=0: y=0: };
     };
     TiledGpRFPrjnSpec @[5] {
      name="V1_V2_high";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="V2_V1_high";
	desc=;
	unique{ reciprocal;	};
	children {
	 name=;
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	send_gp_size {x=8: y=8: };
	send_gp_skip {x=4: y=4: };
	wrap=1;
	reciprocal=1;
	trg_recv_geom {x=0: y=0: };
	trg_send_geom {x=0: y=0: };
       };
      };
      self_con=0;
      init_wts=0;
      send_gp_size {x=8: y=8: };
      send_gp_skip {x=4: y=4: };
      wrap=1;
      reciprocal=0;
      trg_recv_geom {x=0: y=0: };
      trg_send_geom {x=0: y=0: };
     };
     GpOneToOnePrjnSpec @[6] {
      name="GpOneToOne";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=GpOneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
     OneToOnePrjnSpec @[7] {
      name="OneToOne";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    LeabraLayer @[0] {
     name="Output";
     desc=;
     flags=;
     layer_type=TARGET;
     pos {x=0: y=0: z=0: };
     disp_scale=1;
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=1: y=1: n_not_xy=0: n=1: };
     scaled_act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$11$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="airplane";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [1 1] "airplane";     };
     netin {cmpt=1: avg=0: max=0: max_i=0: };
     i_thrs {cmpt=1: avg=-0.1: max=-0.1: max_i=0: };
     acts {cmpt=1: avg=0: max=0: max_i=0: };
     acts_p {cmpt=1: avg=0: max=0: max_i=0: };
     acts_m {cmpt=1: avg=0: max=0: max_i=0: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=1: pct_c=0: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.3578752: i_kwta_pt=-0.2999998: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=$10$: };
     hard_clamped=0;
     ravg_l_avg=6.344288e-21;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=206;
     norm_err=-1;
     da_updt=0;
    };
    LeabraLayer @[1] {
     name="Target";
     desc=;
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     disp_scale=1;
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=1: y=1: n_not_xy=0: n=1: };
     scaled_act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$11$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="airplane";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [1 1] "airplane";     };
     netin {cmpt=1: avg=0: max=0: max_i=0: };
     i_thrs {cmpt=1: avg=-0.1: max=-0.1: max_i=0: };
     acts {cmpt=1: avg=0: max=0: max_i=0: };
     acts_p {cmpt=1: avg=0: max=0: max_i=0: };
     acts_m {cmpt=1: avg=0: max=0: max_i=0: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=1: pct_c=0: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.3578752: i_kwta_pt=-0.2999998: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=$10$: };
     hard_clamped=0;
     ravg_l_avg=1.4772e-19;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=206;
     norm_err=-1;
     da_updt=0;
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=2;
   batch=0;
   epoch=0;
   group=0;
   trial=205;
   tick=0;
   cycle=50;
   time=14400;
   group_name=;
   trial_name=;
   output_name="airplane";
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=0;
   cur_sum_sse=0;
   avg_sse_n=206;
   cur_cnt_err=0;
   train_time {name="train_time": start={usr=1578: sys=276: tot=4129167298: }: end={usr=5286: sys=956: tot=3513129229: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="epoch_time": start={usr=1595: sys=276: tot=4129167312: }: end={usr=7049: sys=754: tot=4128991459: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="trial_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="settle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="cycle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="wt_sync_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="misc_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=JUST_WEIGHTS;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=2;
   n_cons=0;
   max_size {x=1: y=1: z=2: };
   font_sizes {
    net_name=0.05;
    net_vals=0.05;
    layer=0.04;
    layer_vals=0.03;
    prjn=0.01;
    unit=0.02;
    un_nm_len=3;
   };
   view_params {
    xy_square=0;
    unit_spacing=0.05;
    prjn_disp=L_R_F;
    prjn_name=0;
    prjn_width=0.002;
    prjn_trans=0.5;
    lay_trans=0.5;
    unit_trans=0.6;
   };
   learn_rule=CTLEABRA_XCAL;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase=MINUS_PHASE;
   nothing_phase=0;
   phase_no=0;
   phase_max=2;
   ct_cycle=50;
   time_inc=1;
   cycle_max=50;
   min_cycles=0;
   min_cycles_phase2=0;
   ct_time {
    minus=50;
    plus=20;
    inhib=0;
    n_avg_only_epcs=1;
    total_cycles=70;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=0;
    interval=5;
    plus_s_st=19;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0;
    trough_i=0;
   };
   ct_fin_i {
    start=0;
    end=10;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=0;
    m_sum=4;
    m_nrm=0;
    do_s=0;
   };
   minus_cycles=50;
   avg_cycles=0;
   avg_cycles_sum=10300;
   avg_cycles_n=206;
   minus_output_name="airplane";
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=2;
   avg_send_pct=0;
   avg_send_pct_sum=0;
   avg_send_pct_n=14400;
   maxda_stopcrit=-1;
   maxda=0;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0;
   pvlv_lve=0;
   pvlv_lvi=0;
   pv_detected=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   off_errs=1;
   on_errs=1;
   norm_err=0;
   avg_norm_err=1;
   avg_norm_err_sum=0;
   avg_norm_err_n=0;
  };
 };
};

Design Notes

Sender-based

Issues
* writing: one write per conn
  -- will absolutely necessitate tnet in shared memory
* any source unit can (and often will) contain targets
  for any other unit, per prjn 
* in real sim, layers have diff sizes, therefore there
  won't be an even matching of unitgroup size to units,
  i.e. some ugs will have dangling 

What we know

* for any given Unit, its targets are a disjoint set
  (or, we can make sure this is true);
  therefore, guaranteed to not clobber
* prjns for a small set, providing sharp delimitation 
  on both the sending and target neuron pools
  
* any time you need to synchronize, you have to put
  all the threads needing sync in one block
* how many ways to insure no clobbering?
* only 16K memory, supposed to only use 1/2, so 8K
  /4 means max 2K net guys in one block
  
Questions

* can't fit all nets at once, so need to iterate
  block will thus do a subset of nets


Strategy

* work by target layer, per incoming prjn
* since the net is the thing that can be clobbered, we
  prolly need to put updates of one set of nets all in
  one block, so we can synchronize
* maybe each thread works on one con, with the block working
  on one unit at a time, syncing between each
* blocks can work on separate layers
  
* each thread works on one source unit -- these can be random
* so the breakdown, is that it is still quasi-receiver-based,
  in that the entire set of units is divided up into chunks that
  will get read and processed by blocks
* 

Restrictions

* once we get the nets in shared, we pretty much need to
  only work in that thread bank, otherwise we just face the
  same problem of too many writes
* since there is no cross-block sync method, you cannot have
  subsums located across blocks


Definitions

* Target Layer Chunk -- one processing unit of target layers
* TLC must be small enough so all its nets can fit in shared mem
* prolly also need chunks in order to make sure we have lots of
  blocks
  
TLC

* chunk size tension: 
  too low, not enough threads/block
  too high, too many wasted threads when it doesn't fit

Data Structures

by Unit Group:

// ta_Dump File v3.0 -- code v8.0.6.0 rev10531
LeabraProject .projects["LeabraFlex"] { 
 Doc_Group @.docs = [2] {
  taDoc @["LeabraFlexProgs"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };
  };
  taDoc @["ChangeLog"] { };
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_1"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @["ControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   ControlPanelMember_Group @.mbrs = [7] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
   };

   ControlPanelMethod_Group @.mths = [4] {
    ControlPanelMethod @[0] { };
    ControlPanelMethod @[1] { };
    ControlPanelMethod @[2] { };
    ControlPanelMethod @[3] { };
   };
  };
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   ControlPanelMember_Group @.mbrs = [2] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_running.last_sort_spec.ops = [6] {
    DataSortEl @["tag_up_0"] { };
    DataSortEl @["last_svn_up_1"] { };
    DataSortEl @["last_svn_up_2"] { };
    DataSortEl @["last_svn_up_3"] { };
    DataSortEl @["last_svn_up_4"] { };
    DataSortEl @["last_svn_up_5"] { };
   };

   DataTableCell_List @.jobs_running.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_done.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_done.last_sort_spec.ops = [6] {
    DataSortEl @["tag_up_0"] { };
    DataSortEl @["last_svn_up_1"] { };
    DataSortEl @["last_svn_up_2"] { };
    DataSortEl @["last_svn_up_3"] { };
    DataSortEl @["last_svn_up_4"] { };
    DataSortEl @["last_svn_up_5"] { };
   };

   DataTableCell_List @.jobs_done.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_deleted.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_deleted.last_sort_spec.ops = [6] {
    DataSortEl @["tag_up_0"] { };
    DataSortEl @["last_svn_up_1"] { };
    DataSortEl @["last_svn_up_2"] { };
    DataSortEl @["last_svn_up_3"] { };
    DataSortEl @["last_svn_up_4"] { };
    DataSortEl @["last_svn_up_5"] { };
   };

   DataTableCell_List @.jobs_deleted.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_archive.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_archive.last_sort_spec.ops = [6] {
    DataSortEl @["tag_up_0"] { };
    DataSortEl @["last_svn_up_1"] { };
    DataSortEl @["last_svn_up_2"] { };
    DataSortEl @["last_svn_up_3"] { };
    DataSortEl @["last_svn_up_4"] { };
    DataSortEl @["last_svn_up_5"] { };
   };

   DataTableCell_List @.jobs_archive.control_panel_cells = [0] {
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataOpList @.file_list.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.file_list.control_panel_cells = [0] {
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   DataOpList @.cluster_info.last_sort_spec.ops = [6] {
    DataSortEl @["state_up_0"] { };
    DataSortEl @["start_time_up_1"] { };
    DataSortEl @["start_time_up_2"] { };
    DataSortEl @["start_time_up_3"] { };
    DataSortEl @["start_time_up_4"] { };
    DataSortEl @["start_time_up_5"] { };
   };

   DataTableCell_List @.cluster_info.control_panel_cells = [0] {
   };

   DataTableCols @.clusterscript_timestamp.data = [2] {
    String_Data @["timestamp"] { };
    int_Data @["version"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
   };

   DataOpList @.clusterscript_timestamp.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.clusterscript_timestamp.control_panel_cells = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
  ParamSet_Group @.gp["RunParams"] = [2] { 
   ParamSet @["RunMaster"] { 
    ControlPanelMember_Group @.mbrs = [18] {
     ControlPanelMember @[0] { };
     ControlPanelMember @[1] { };
     ControlPanelMember @[2] { };
     ControlPanelMember @[3] { };
     ControlPanelMember @[4] { };
     ControlPanelMember @[5] { };
     ControlPanelMember @[6] { };
     ControlPanelMember @[7] { };
     ControlPanelMember @[8] { };
     ControlPanelMember @[9] { };
     ControlPanelMember @[10] { };
     ControlPanelMember @[11] { };
     ControlPanelMember @[12] { };
     ControlPanelMember @[13] { };
     ControlPanelMember @[14] { };
     ControlPanelMember @[15] { };
     ControlPanelMember @[16] { };
     ControlPanelMember @[17] { };
    };

    ControlPanelMethod_Group @.mths = [0] {
    };
   };
   ParamSet @["RunConfig1"] { 
    ControlPanelMember_Group @.mbrs = [18] {
     ControlPanelMember @[0] { };
     ControlPanelMember @[1] { };
     ControlPanelMember @[2] { };
     ControlPanelMember @[3] { };
     ControlPanelMember @[4] { };
     ControlPanelMember @[5] { };
     ControlPanelMember @[6] { };
     ControlPanelMember @[7] { };
     ControlPanelMember @[8] { };
     ControlPanelMember @[9] { };
     ControlPanelMember @[10] { };
     ControlPanelMember @[11] { };
     ControlPanelMember @[12] { };
     ControlPanelMember @[13] { };
     ControlPanelMember @[14] { };
     ControlPanelMember @[15] { };
     ControlPanelMember @[16] { };
     ControlPanelMember @[17] { };
    };

    ControlPanelMethod_Group @.mths = [0] {
    };
   };
  };
  ParamSet_Group @.gp["MiscParams"] = [2] { 
   ParamSet @["MiscMaster"] { 
    ControlPanelMember_Group @.mbrs = [1] {
     ControlPanelMember @[0] { };
    };

    ControlPanelMethod_Group @.mths = [0] {
    };
   };
   ParamSet @["MiscConfig1"] { 
    ControlPanelMember_Group @.mbrs = [1] {
     ControlPanelMember @[0] { };
    };

    ControlPanelMethod_Group @.mths = [0] {
    };
   };
  };
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] = [1] { 
   DataTable @["StdInputData"] { 
    DataTableCols @.data = [3] {
     String_Data @["Name"] { };
     float_Data @["Output"] { };
     float_Data @["Input"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
  };
  DataTable_Group @.gp["OutputData"] = [4] { 
   DataTable @["TrialOutputData"] { 
    DataTableCols @.data = [30] {
     int_Data @["batch"] { };
     int_Data @["epoch"] { };
     String_Data @["train_mode"] { };
     int_Data @["group"] { };
     int_Data @["trial"] { };
     int_Data @["tick"] { };
     float_Data @["time"] { };
     String_Data @["trial_name"] { };
     String_Data @["group_name"] { };
     String_Data @["output_name"] { };
     float_Data @["rt_cycles"] { };
     float_Data @["sse"] { };
     float_Data @["norm_err"] { };
     float_Data @["cos_err"] { };
     float_Data @["ext_rew"] { };
     float_Data @["Output_lay_sse"] { };
     float_Data @["Output_lay_bin_err"] { };
     float_Data @["Output_lay_norm_err"] { };
     float_Data @["Output_lay_cos_err"] { };
     float_Data @["Hidden_lay_net_sd"] { };
     float_Data @["Output_lay_net_sd"] { };
     float_Data @["net_cos_diff"] { };
     float_Data @["net_trial_cos_diff"] { };
     float_Data @["net_avg_act_diff"] { };
     float_Data @["Hidden_cos_diff"] { };
     float_Data @["Output_cos_diff"] { };
     float_Data @["Hidden_trial_cos_diff"] { };
     float_Data @["Output_trial_cos_diff"] { };
     float_Data @["Hidden_avg_act_diff"] { };
     float_Data @["Output_avg_act_diff"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["EpochOutputData"] { 
    DataTableCols @.data = [40] {
     int_Data @["batch"] { };
     int_Data @["epoch"] { };
     float_Data @["avg_sse"] { };
     float_Data @["cnt_err"] { };
     float_Data @["pct_cor"] { };
     float_Data @["pct_err"] { };
     float_Data @["avg_norm_err"] { };
     float_Data @["avg_cos_err"] { };
     float_Data @["avg_ext_rew"] { };
     float_Data @["avg_cycles"] { };
     float_Data @["epoch_time_tot"] { };
     float_Data @["epoch_time_usr"] { };
     float_Data @["Output_lay_avg_sse"] { };
     float_Data @["Output_lay_cnt_err"] { };
     float_Data @["Output_lay_pct_cor"] { };
     float_Data @["Output_lay_pct_err"] { };
     float_Data @["Output_lay_avg_norm_err"] { };
     float_Data @["Output_lay_avg_cos_err"] { };
     float_Data @["net_avg_cos_diff"] { };
     float_Data @["net_avg_trial_cos_diff"] { };
     float_Data @["net_avg_avg_act_diff"] { };
     float_Data @["Hidden_avg_cos_diff"] { };
     float_Data @["Output_avg_cos_diff"] { };
     float_Data @["Hidden_avg_trial_cos_diff"] { };
     float_Data @["Output_avg_trial_cos_diff"] { };
     float_Data @["Hidden_avg_avg_act_diff"] { };
     float_Data @["Output_avg_avg_act_diff"] { };
     float_Data @["Hidden_avg_net_sd"] { };
     float_Data @["Output_avg_net_sd"] { };
     float_Data @["Hidden_hog_pct"] { };
     float_Data @["Output_hog_pct"] { };
     float_Data @["Hidden_dead_pct"] { };
     float_Data @["Output_dead_pct"] { };
     float_Data @["Hidden_netmax"] { };
     float_Data @["Output_netmax"] { };
     float_Data @["Input_avg_act"] { };
     float_Data @["Hidden_avg_act"] { };
     float_Data @["Output_avg_act"] { };
     float_Data @["Hidden_netrel"] { };
     float_Data @["Output_netrel"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["TestTrialOutputData"] { 
    DataTableCols @.data = [30] {
     int_Data @["batch"] { };
     int_Data @["epoch"] { };
     String_Data @["train_mode"] { };
     int_Data @["group"] { };
     int_Data @["trial"] { };
     int_Data @["tick"] { };
     float_Data @["time"] { };
     String_Data @["trial_name"] { };
     String_Data @["group_name"] { };
     String_Data @["output_name"] { };
     float_Data @["rt_cycles"] { };
     float_Data @["sse"] { };
     float_Data @["norm_err"] { };
     float_Data @["cos_err"] { };
     float_Data @["ext_rew"] { };
     float_Data @["Output_lay_sse"] { };
     float_Data @["Output_lay_bin_err"] { };
     float_Data @["Output_lay_norm_err"] { };
     float_Data @["Output_lay_cos_err"] { };
     float_Data @["Hidden_lay_net_sd"] { };
     float_Data @["Output_lay_net_sd"] { };
     float_Data @["net_cos_diff"] { };
     float_Data @["net_trial_cos_diff"] { };
     float_Data @["net_avg_act_diff"] { };
     float_Data @["Hidden_cos_diff"] { };
     float_Data @["Output_cos_diff"] { };
     float_Data @["Hidden_trial_cos_diff"] { };
     float_Data @["Output_trial_cos_diff"] { };
     float_Data @["Hidden_avg_act_diff"] { };
     float_Data @["Output_avg_act_diff"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["TestEpochOutputData"] { 
    DataTableCols @.data = [32] {
     int_Data @["batch"] { };
     int_Data @["epoch"] { };
     float_Data @["avg_sse"] { };
     float_Data @["cnt_err"] { };
     float_Data @["pct_cor"] { };
     float_Data @["pct_err"] { };
     float_Data @["avg_norm_err"] { };
     float_Data @["avg_cos_err"] { };
     float_Data @["avg_ext_rew"] { };
     float_Data @["avg_cycles"] { };
     float_Data @["Output_lay_avg_sse"] { };
     float_Data @["Output_lay_cnt_err"] { };
     float_Data @["Output_lay_pct_cor"] { };
     float_Data @["Output_lay_pct_err"] { };
     float_Data @["Output_lay_avg_norm_err"] { };
     float_Data @["Output_lay_avg_cos_err"] { };
     float_Data @["net_avg_cos_diff"] { };
     float_Data @["net_avg_trial_cos_diff"] { };
     float_Data @["net_avg_avg_act_diff"] { };
     float_Data @["Hidden_avg_cos_diff"] { };
     float_Data @["Output_avg_cos_diff"] { };
     float_Data @["Hidden_avg_trial_cos_diff"] { };
     float_Data @["Output_avg_trial_cos_diff"] { };
     float_Data @["Hidden_avg_avg_act_diff"] { };
     float_Data @["Output_avg_avg_act_diff"] { };
     float_Data @["Hidden_avg_net_sd"] { };
     float_Data @["Output_avg_net_sd"] { };
     float_Data @["Hidden_netmax"] { };
     float_Data @["Output_netmax"] { };
     float_Data @["Input_avg_act"] { };
     float_Data @["Hidden_avg_act"] { };
     float_Data @["Output_avg_act"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] { 
  };
  DataTable_Group @.gp["ClusterRun"] { 
  };
 };

 Program_TopGroup @.programs = [1] {
  Program @["MasterStartup"] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @["DocLink"] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @["network"] { };
   };

   ProgVar_List @.vars = [11] {
    ProgVar @["batch_prog"] { };
    ProgVar @["tag"] { };
    ProgVar @["log_dir"] { };
    ProgVar @["log_file_nm"] { };
    ProgVar @["EpochOutputData"] { };
    ProgVar @["batch_str"] { };
    ProgVar @["batch_start"] { };
    ProgVar @["startup_prog"] { };
    ProgVar @["MyClusterRun"] { };
    ProgVar @["run_params"] { };
    ProgVar @["misc_params"] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [21] {
    RegisterArgs @[0] { };
    PrintExpr @[1] { };
    Comment @[2] { };
    AssignExpr @[3] { };
    ProgVarFmArg @[4] { };
    ProgVarFmArg @[5] { };
    Comment @[6] { };
    ControlPanelsFmArgs @[7] { };
    MethodCall @[8] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[9] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    ControlPanelsFmArgs @[10] { };
    ControlPanelsFmArgs @[11] { };
    AssignExpr @[12] { };
    Comment @[13] { };
    If @[14] { 
     ProgEl_List @.true_code = [4] {
      ProgVarFmArg @[0] { };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      VarIncr @[2] { };
      If @[3] { 
       ProgEl_List @.true_code = [2] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [4] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	  ProgArg @[3] { };
	 };
	};
	MiscCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
    Else @[15] { 
     ProgEl_List @.true_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    OtherProgramVar @[16] { };
    Comment @[17] { };
    ProgramCallVar @[18] { 
     ProgArg_List @.prog_args = [1] {
      ProgArg @[0] { };
     };
    };
    PrintExpr @[19] { };
    ProgramCall @[20] { 
     ProgArg_List @.prog_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Program_Group @.gp["StartupProgs"] = [1] { 
   Program @["BasicStartup"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["tag"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     Comment @[0] { };
     Comment @[1] { };
    };
   };
  };
  Program_Group @.gp["ConfigProgs"] = [3] { 
   Program @["MasterBatch"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["batch"] { };
     ProgVar @["batch_start"] { };
     ProgVar @["n_batches"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["i"] { };
      };
     };
     AssignExpr @[1] { };
     MemberAssign @[2] { };
     ForLoop @[3] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @["MasterTrain"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [5] {
     ProgVar @["run_params"] { };
     ProgVar @["misc_params"] { };
     ProgVar @["run_prog"] { };
     ProgVar @["init_prog"] { };
     ProgVar @["stop_train"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     AssignExpr @[0] { };
     WtInitPrompt @[1] { 
      ProgEl_List @.yes_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     AssignExpr @[0] { };
     If @[1] { 
      ProgEl_List @.true_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     ProgramCallVar @[2] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     WhileLoop @[3] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
    };
   };
   Program @["MasterRun"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [1] {
     DynEnumType @["StopStepGrain"] { 
      DynEnumItem_List @.enums = [4] {
       DynEnumItem @["TRIAL"] { };
       DynEnumItem @["EPOCH"] { };
       DynEnumItem @["ERROR"] { };
       DynEnumItem @["CORRECT"] { };
      };
     };
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["run_prog"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["stop_step_grain"] { };
    };

    Function_List @.functions = [1] {
     Function @["StopStepTest"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [2] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       Switch @[1] { 
	ProgEl_List @.cases = [4] {
	 CaseBlock @[0] { 
	  ProgEl_List @.prog_code = [1] {
	   ReturnExpr @[0] { };
	  };
	 };
	 CaseBlock @[1] { 
	  ProgEl_List @.prog_code = [1] {
	   ReturnExpr @[0] { };
	  };
	 };
	 CaseBlock @[2] { 
	  ProgEl_List @.prog_code = [1] {
	   ReturnExpr @[0] { };
	  };
	 };
	 CaseBlock @[3] { 
	  ProgEl_List @.prog_code = [1] {
	   ReturnExpr @[0] { };
	  };
	 };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [1] {
     ProgramCallVar @[0] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program_Group @.gp["InitProgs"] = [1] { 
    Program @["BasicInit"] { 
     UserDataItem_List @*(.user_data_) {
      UserData_DocLink @["DocLink"] { };
     };

     ProgObjList @.objs = [0] {
     };

     ProgType_List @.types = [0] {
     };

     ProgVar_List @.args = [1] {
      ProgVar @["network"] { };
     };

     ProgVar_List @.vars = [5] {
      ProgVar @["layer_group_lesion_list"] { };
      ProgVar @["layer_lesion_list"] { };
      ProgVar @["prjn_lesion_list"] { };
      ProgVar @["prjn_unlesion_list"] { };
      ProgVar @["test_run"] { };
     };

     Function_List @.functions = [0] {
     };

     ProgEl_List @.init_code = [0] {
     };

     ProgEl_List @.prog_code = [4] {
      ProgramCall @[0] { 
       ProgArg_List @.prog_args = [5] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
       };
      };
      ProgramCall @[1] { 
       ProgArg_List @.prog_args = [1] {
	ProgArg @[0] { };
       };
      };
      If @[2] { 
       ProgEl_List @.true_code = [1] {
	MemberAssign @[0] { };
       };
      };
      Else @[3] { 
       ProgEl_List @.true_code = [1] {
	MemberAssign @[0] { };
       };
      };
     };
    };
   };
   Program_Group @.gp["RunProgs"] = [1] { 
    Program @["BasicRun"] { 
     UserDataItem_List @*(.user_data_) {
      UserData_DocLink @["DocLink"] { };
     };

     ProgObjList @.objs = [0] {
     };

     ProgType_List @.types = [0] {
     };

     ProgVar_List @.args = [1] {
      ProgVar @["network"] { };
     };

     ProgVar_List @.vars = [5] {
      ProgVar @["train_epochs"] { };
      ProgVar @["trials_per_epoch_eff"] { };
      ProgVar @["test_interval"] { };
      ProgVar @["update_net_view"] { };
      ProgVar @["StdInputData"] { };
     };

     Function_List @.functions = [0] {
     };

     ProgEl_List @.init_code = [0] {
     };

     ProgEl_List @.prog_code = [6] {
      Comment @[0] { };
      MemberAssign @[1] { };
      ProgramCall @[2] { 
       ProgArg_List @.prog_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      Comment @[3] { };
      MemberAssign @[4] { };
      If @[5] { 
       ProgEl_List @.true_code = [5] {
	ProgramCall @[0] { 
	 ProgArg_List @.prog_args = [1] {
	  ProgArg @[0] { };
	 };
	};
	If @[1] { 
	 ProgEl_List @.true_code = [1] {
	  ProgramCall @[0] { 
	   ProgArg_List @.prog_args = [1] {
	    ProgArg @[0] { };
	   };
	  };
	 };
	};
	MemberAssign @[2] { };
	If @[3] { 
	 ProgEl_List @.true_code = [2] {
	  ProgramCall @[0] { 
	   ProgArg_List @.prog_args = [1] {
	    ProgArg @[0] { };
	   };
	  };
	  ReturnExpr @[1] { };
	 };
	};
	ProgramCall @[4] { 
	 ProgArg_List @.prog_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
   };
  };
  Program_Group @.gp["TaskProgs"] = [3] { 
   Program @["BasicTrain"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     TimeUsed @["BasicTrainTime"] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["update_net_view"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["basic_train_time"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };

    ProgEl_List @.prog_code = [19] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     Comment @[1] { };
     ProgramCall @[2] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     ProgramCall @[4] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     Comment @[5] { };
     ProgramCall @[6] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[8] { };
     StopStepPoint @[9] { };
     Comment @[10] { };
     MethodCall @[11] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[12] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ProgramCall @[13] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[14] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[15] { };
     ProgramCall @[16] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[17] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[18] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["BasicTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     TimeUsed @["BasicTrainTime"] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["update_net_view"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["basic_train_time"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };

    ProgEl_List @.prog_code = [19] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     Comment @[1] { };
     ProgramCall @[2] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     ProgramCall @[4] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     Comment @[5] { };
     ProgramCall @[6] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[8] { };
     StopStepPoint @[9] { };
     Comment @[10] { };
     MethodCall @[11] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[12] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ProgramCall @[13] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[14] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[15] { };
     ProgramCall @[16] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[17] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[18] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["TestAll"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [7] {
     ProgVar @["input_data"] { };
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["step_on_err"] { };
     ProgVar @["data_loop_index"] { };
     ProgVar @["test_updt_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [6] {
     NetCounterInit @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[3] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 StopStepPoint @[0] { };
	};
       };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
  };
  Program_Group @.gp["EnviroProgs"] = [3] { 
   Program @["ChooseNextEvent"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     DataTable @["PermIdxTable"] { 
      DataTableCols @.data = [1] {
       int_Data @["Index"] { };
      };

      DataOpList @.last_sort_spec.ops = [0] {
      };

      DataTableCell_List @.control_panel_cells = [0] {
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["permuted"] { };
    };

    ProgVar_List @.vars = [4] {
     ProgVar @["cur_idx"] { };
     ProgVar @["input_idx"] { };
     ProgVar @["dmem_rows"] { };
     ProgVar @["perm_idx_table"] { };
    };

    Function_List @.functions = [3] {
     Function @["ComputeDmemRows"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [3] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       Else @[2] { 
	ProgEl_List @.true_code = [2] {
	 AssignExpr @[0] { };
	 WhileLoop @[1] { 
	  ProgEl_List @.loop_code = [1] {
	   VarIncr @[0] { };
	  };
	 };
	};
       };
      };
     };
     Function @["PermuteIndexes"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [3] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       AssignExpr @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [1] {
	 DataProcCall @[0] { 
	  ProgArg_List @.meth_args = [3] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	  };
	 };
	};
       };
      };
     };
     Function @["InitIndexes"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [5] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       FunctionCall @[1] { 
	ProgArg_List @.fun_args = [0] {
	};
       };
       MethodCall @[2] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
       MethodCall @[3] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
       FunctionCall @[4] { 
	ProgArg_List @.fun_args = [0] {
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [2] {
     FunctionCall @[0] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [8] {
     FunctionCall @[0] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       FunctionCall @[0] { 
	ProgArg_List @.fun_args = [0] {
	};
       };
      };
     };
     If @[2] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     Else @[3] { 
      ProgEl_List @.true_code = [1] {
       AssignExpr @[0] { };
      };
     };
     If @[4] { 
      ProgEl_List @.true_code = [2] {
       AssignExpr @[0] { };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 RandomCall @[0] { 
	  ProgArg_List @.meth_args = [2] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	  };
	 };
	};
       };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       FunctionCall @[0] { 
	ProgArg_List @.fun_args = [0] {
	};
       };
      };
     };
     Else @[7] { 
      ProgEl_List @.true_code = [1] {
       VarIncr @[0] { };
      };
     };
    };
   };
   Program @["ChooseRandomEvent"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["event_idx"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     RandomCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["ApplyInputs"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["layer_writer_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
  };
  Program_Group @.gp["UtilProgs"] = [16] { 
   Program @["BatchRndSeed"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     RndSeed_List @["rnd_seeds"] { 
      taList @.seeds = [25] {
       RndSeed @["RndSeed_1"] { };
       RndSeed @["RndSeed_2"] { };
       RndSeed @["RndSeed_3"] { };
       RndSeed @["RndSeed_4"] { };
       RndSeed @["RndSeed_5"] { };
       RndSeed @["RndSeed_6"] { };
       RndSeed @["RndSeed_7"] { };
       RndSeed @["RndSeed_8"] { };
       RndSeed @["RndSeed_9"] { };
       RndSeed @["RndSeed_10"] { };
       RndSeed @["RndSeed_11"] { };
       RndSeed @["RndSeed_12"] { };
       RndSeed @["RndSeed_13"] { };
       RndSeed @["RndSeed_14"] { };
       RndSeed @["RndSeed_15"] { };
       RndSeed @["RndSeed_16"] { };
       RndSeed @["RndSeed_17"] { };
       RndSeed @["RndSeed_18"] { };
       RndSeed @["RndSeed_19"] { };
       RndSeed @["RndSeed_20"] { };
       RndSeed @["RndSeed_21"] { };
       RndSeed @["RndSeed_22"] { };
       RndSeed @["RndSeed_23"] { };
       RndSeed @["RndSeed_24"] { };
       RndSeed @["RndSeed_25"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["rnd_seeds"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [1] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["ConfigNetwork"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [5] {
     ProgVar @["network"] { };
     ProgVar @["lesion_layer_groups"] { };
     ProgVar @["lesion_layers"] { };
     ProgVar @["lesion_prjns"] { };
     ProgVar @["un_lesion_prjns"] { };
    };

    ProgVar_List @.vars = [0] {
    };

    Function_List @.functions = [4] {
     Function @["UnlesionAll"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [3] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [2] {
	 ProgVar @["laygp"] { };
	 ProgVar @["lay"] { };
	};
       };
       ForeachLoop @[1] { 
	ProgEl_List @.loop_code = [2] {
	 MethodCall @[0] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 MethodCall @[1] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	};
       };
       ForeachLoop @[2] { 
	ProgEl_List @.loop_code = [2] {
	 MethodCall @[0] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 MethodCall @[1] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	};
       };
      };
     };
     Function @["LayerGpsOnOff"] { 
      ProgVar_List @.args = [2] {
       ProgVar @["laygps"] { };
       ProgVar @["lay_gp_on"] { };
      };

      ProgEl_List @.fun_code = [3] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [3] {
	 ProgVar @["les_laygp_mat"] { };
	 ProgVar @["laygp"] { };
	 ProgVar @["laygp_nm"] { };
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       ForeachLoop @[2] { 
	ProgEl_List @.loop_code = [4] {
	 MemberMethodCall @[0] { 
	  ProgArg_List @.meth_args = [1] {
	   ProgArg @[0] { };
	  };
	 };
	 If @[1] { 
	  ProgEl_List @.true_code = [2] {
	   MiscCall @[0] { 
	    ProgArg_List @.meth_args = [9] {
	     ProgArg @[0] { };
	     ProgArg @[1] { };
	     ProgArg @[2] { };
	     ProgArg @[3] { };
	     ProgArg @[4] { };
	     ProgArg @[5] { };
	     ProgArg @[6] { };
	     ProgArg @[7] { };
	     ProgArg @[8] { };
	    };
	   };
	   IfContinue @[1] { };
	  };
	 };
	 If @[2] { 
	  ProgEl_List @.true_code = [2] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	   MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 Else @[3] { 
	  ProgEl_List @.true_code = [2] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	   MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     Function @["LayersOnOff"] { 
      ProgVar_List @.args = [2] {
       ProgVar @["lays"] { };
       ProgVar @["lay_on"] { };
      };

      ProgEl_List @.fun_code = [3] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [3] {
	 ProgVar @["les_lays_mat"] { };
	 ProgVar @["lay"] { };
	 ProgVar @["lay_nm"] { };
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       ForeachLoop @[2] { 
	ProgEl_List @.loop_code = [4] {
	 MemberMethodCall @[0] { 
	  ProgArg_List @.meth_args = [1] {
	   ProgArg @[0] { };
	  };
	 };
	 If @[1] { 
	  ProgEl_List @.true_code = [2] {
	   MiscCall @[0] { 
	    ProgArg_List @.meth_args = [9] {
	     ProgArg @[0] { };
	     ProgArg @[1] { };
	     ProgArg @[2] { };
	     ProgArg @[3] { };
	     ProgArg @[4] { };
	     ProgArg @[5] { };
	     ProgArg @[6] { };
	     ProgArg @[7] { };
	     ProgArg @[8] { };
	    };
	   };
	   IfContinue @[1] { };
	  };
	 };
	 If @[2] { 
	  ProgEl_List @.true_code = [2] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	   MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 Else @[3] { 
	  ProgEl_List @.true_code = [2] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	   MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     Function @["ProjectionsOnOff"] { 
      ProgVar_List @.args = [2] {
       ProgVar @["prjns"] { };
       ProgVar @["prjn_on"] { };
      };

      ProgEl_List @.fun_code = [3] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [5] {
	 ProgVar @["les_prjns_mat"] { };
	 ProgVar @["prjn"] { };
	 ProgVar @["prjn_nm"] { };
	 ProgVar @["lay_nm"] { };
	 ProgVar @["lay"] { };
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       ForeachLoop @[2] { 
	ProgEl_List @.loop_code = [8] {
	 If @[0] { 
	  ProgEl_List @.true_code = [2] {
	   MiscCall @[0] { 
	    ProgArg_List @.meth_args = [9] {
	     ProgArg @[0] { };
	     ProgArg @[1] { };
	     ProgArg @[2] { };
	     ProgArg @[3] { };
	     ProgArg @[4] { };
	     ProgArg @[5] { };
	     ProgArg @[6] { };
	     ProgArg @[7] { };
	     ProgArg @[8] { };
	    };
	   };
	   IfContinue @[1] { };
	  };
	 };
	 MethodCall @[1] { 
	  ProgArg_List @.meth_args = [2] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	  };
	 };
	 MethodCall @[2] { 
	  ProgArg_List @.meth_args = [2] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	  };
	 };
	 MemberMethodCall @[3] { 
	  ProgArg_List @.meth_args = [1] {
	   ProgArg @[0] { };
	  };
	 };
	 If @[4] { 
	  ProgEl_List @.true_code = [2] {
	   MiscCall @[0] { 
	    ProgArg_List @.meth_args = [9] {
	     ProgArg @[0] { };
	     ProgArg @[1] { };
	     ProgArg @[2] { };
	     ProgArg @[3] { };
	     ProgArg @[4] { };
	     ProgArg @[5] { };
	     ProgArg @[6] { };
	     ProgArg @[7] { };
	     ProgArg @[8] { };
	    };
	   };
	   IfContinue @[1] { };
	  };
	 };
	 AssignExpr @[5] { };
	 If @[6] { 
	  ProgEl_List @.true_code = [2] {
	   MiscCall @[0] { 
	    ProgArg_List @.meth_args = [9] {
	     ProgArg @[0] { };
	     ProgArg @[1] { };
	     ProgArg @[2] { };
	     ProgArg @[3] { };
	     ProgArg @[4] { };
	     ProgArg @[5] { };
	     ProgArg @[6] { };
	     ProgArg @[7] { };
	     ProgArg @[8] { };
	    };
	   };
	   IfContinue @[1] { };
	  };
	 };
	 MemberAssign @[7] { };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [9] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     FunctionCall @[1] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     FunctionCall @[2] { 
      ProgArg_List @.fun_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     FunctionCall @[3] { 
      ProgArg_List @.fun_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     FunctionCall @[5] { 
      ProgArg_List @.fun_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[6] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     PrintExpr @[8] { };
    };
   };
   Program @["PositionLayersFromTable"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [2] {
     DataTable @["LayerLayout"] { 
      DataTableCols @.data = [9] {
       String_Data @["LayerName"] { };
       String_Data @["LayerGroup"] { };
       String_Data @["LayoutGroup"] { };
       int_Data @["X_Abs"] { };
       int_Data @["Y_Abs"] { };
       int_Data @["Z_Abs"] { };
       int_Data @["X_Rel"] { };
       int_Data @["Y_Rel"] { };
       int_Data @["Z_Rel"] { };
      };

      DataOpList @.last_sort_spec.ops = [0] {
      };

      DataTableCell_List @.control_panel_cells = [0] {
      };
     };
     DataTable @["LayerLayout_previous"] { 
      DataTableCols @.data = [9] {
       String_Data @["LayerName"] { };
       String_Data @["LayerGroup"] { };
       String_Data @["LayoutGroup"] { };
       int_Data @["X_Abs"] { };
       int_Data @["Y_Abs"] { };
       int_Data @["Z_Abs"] { };
       int_Data @["X_Rel"] { };
       int_Data @["Y_Rel"] { };
       int_Data @["Z_Rel"] { };
      };

      DataOpList @.last_sort_spec.ops = [0] {
      };

      DataTableCell_List @.control_panel_cells = [0] {
      };
     };
    };

    ProgType_List @.types = [2] {
     DynEnumType @["ActionType"] { 
      DynEnumItem_List @.enums = [2] {
       DynEnumItem @["GetCurrentPos"] { };
       DynEnumItem @["SetPositions"] { };
      };
     };
     DynEnumType @["UseGroup"] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @["IgnoreGroup"] { };
       DynEnumItem @["LayerGroup"] { };
       DynEnumItem @["LayoutGroup"] { };
      };
     };
    };

    ProgVar_List @.args = [3] {
     ProgVar @["action"] { };
     ProgVar @["use_group"] { };
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["LayerLayout"] { };
     ProgVar @["LayerLayout_previous"] { };
    };

    Function_List @.functions = [2] {
     Function @["GetCurrent"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [7] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [4] {
	 ProgVar @["leaf"] { };
	 ProgVar @["current_layer"] { };
	 ProgVar @["net_layers"] { };
	 ProgVar @["layer_group"] { };
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
       MethodCall @[2] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       AssignExpr @[3] { };
       Comment @[4] { };
       ForeachLoop @[5] { 
	ProgEl_List @.loop_code = [5] {
	 MethodCall @[0] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 CssExpr @[1] { };
	 CssExpr @[2] { };
	 CssExpr @[3] { };
	 CssExpr @[4] { };
	};
       };
       ForLoop @[6] { 
	ProgEl_List @.loop_code = [10] {
	 MethodCall @[0] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 AssignExpr @[1] { };
	 CssExpr @[2] { };
	 If @[3] { 
	  ProgEl_List @.true_code = [1] {
	   CssExpr @[0] { };
	  };
	 };
	 CssExpr @[4] { };
	 CssExpr @[5] { };
	 CssExpr @[6] { };
	 CssExpr @[7] { };
	 CssExpr @[8] { };
	 CssExpr @[9] { };
	};
       };
      };
     };
     Function @["SetPos"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [3] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [9] {
	 ProgVar @["row"] { };
	 ProgVar @["current_layer"] { };
	 ProgVar @["layer_name"] { };
	 ProgVar @["layer_group"] { };
	 ProgVar @["group_name"] { };
	 ProgVar @["lgrow"] { };
	 ProgVar @["lg_x"] { };
	 ProgVar @["lg_y"] { };
	 ProgVar @["lg_z"] { };
	};
       };
       ForLoop @[1] { 
	ProgEl_List @.loop_code = [4] {
	 AssignExpr @[0] { };
	 IfContinue @[1] { };
	 AssignExpr @[2] { };
	 If @[3] { 
	  ProgEl_List @.true_code = [1] {
	   Switch @[0] { 
	    ProgEl_List @.cases = [3] {
	     CaseBlock @[0] { 
	      ProgEl_List @.prog_code = [1] {
	       MethodCall @[0] { 
		ProgArg_List @.meth_args = [3] {
		 ProgArg @[0] { };
		 ProgArg @[1] { };
		 ProgArg @[2] { };
		};
	       };
	      };
	     };
	     CaseBlock @[1] { 
	      ProgEl_List @.prog_code = [4] {
	       AssignExpr @[0] { };
	       If @[1] { 
		ProgEl_List @.true_code = [4] {
		 MethodCall @[0] { 
		  ProgArg_List @.meth_args = [4] {
		   ProgArg @[0] { };
		   ProgArg @[1] { };
		   ProgArg @[2] { };
		   ProgArg @[3] { };
		  };
		 };
		 AssignExpr @[1] { };
		 AssignExpr @[2] { };
		 AssignExpr @[3] { };
		};
	       };
	       Else @[2] { 
		ProgEl_List @.true_code = [3] {
		 AssignExpr @[0] { };
		 AssignExpr @[1] { };
		 AssignExpr @[2] { };
		};
	       };
	       MethodCall @[3] { 
		ProgArg_List @.meth_args = [3] {
		 ProgArg @[0] { };
		 ProgArg @[1] { };
		 ProgArg @[2] { };
		};
	       };
	      };
	     };
	     CaseBlock @[2] { 
	      ProgEl_List @.prog_code = [4] {
	       AssignExpr @[0] { };
	       If @[1] { 
		ProgEl_List @.true_code = [4] {
		 MethodCall @[0] { 
		  ProgArg_List @.meth_args = [4] {
		   ProgArg @[0] { };
		   ProgArg @[1] { };
		   ProgArg @[2] { };
		   ProgArg @[3] { };
		  };
		 };
		 AssignExpr @[1] { };
		 AssignExpr @[2] { };
		 AssignExpr @[3] { };
		};
	       };
	       Else @[2] { 
		ProgEl_List @.true_code = [3] {
		 AssignExpr @[0] { };
		 AssignExpr @[1] { };
		 AssignExpr @[2] { };
		};
	       };
	       MethodCall @[3] { 
		ProgArg_List @.meth_args = [3] {
		 ProgArg @[0] { };
		 ProgArg @[1] { };
		 ProgArg @[2] { };
		};
	       };
	      };
	     };
	    };
	   };
	  };
	 };
	};
       };
       MethodCall @[2] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [1] {
     Switch @[0] { 
      ProgEl_List @.cases = [2] {
       CaseBlock @[0] { 
	ProgEl_List @.prog_code = [1] {
	 FunctionCall @[0] { 
	  ProgArg_List @.fun_args = [0] {
	  };
	 };
	};
       };
       CaseBlock @[1] { 
	ProgEl_List @.prog_code = [1] {
	 FunctionCall @[0] { 
	  ProgArg_List @.fun_args = [0] {
	  };
	 };
	};
       };
      };
     };
    };
   };
   Program @["NetworkToggleLesion"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     String_Matrix @["les_lay_mat"] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["lesion_layers"] { };
     ProgVar @["lesion"] { };
    };

    ProgVar_List @.vars = [4] {
     ProgVar @["les_lay_mat"] { };
     ProgVar @["i"] { };
     ProgVar @["laygp_nm"] { };
     ProgVar @["laygp"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[1] { 
      ProgEl_List @.loop_code = [5] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
       MemberMethodCall @[1] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
       If @[2] { 
	ProgEl_List @.true_code = [2] {
	 MiscCall @[0] { 
	  ProgArg_List @.meth_args = [9] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	   ProgArg @[2] { };
	   ProgArg @[3] { };
	   ProgArg @[4] { };
	   ProgArg @[5] { };
	   ProgArg @[6] { };
	   ProgArg @[7] { };
	   ProgArg @[8] { };
	  };
	 };
	 IfContinue @[1] { };
	};
       };
       If @[3] { 
	ProgEl_List @.true_code = [1] {
	 MethodCall @[0] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	};
       };
       Else @[4] { 
	ProgEl_List @.true_code = [1] {
	 MethodCall @[0] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["TrainStart"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     RndSeed @["dmem_rnd_seed"] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [14] {
     ProgVar @["dmem_rnd_seed"] { };
     ProgVar @["load_weights"] { };
     ProgVar @["weights_file"] { };
     ProgVar @["load_st_epc"] { };
     ProgVar @["lrs_step_epochs"] { };
     ProgVar @["lrs_n_steps"] { };
     ProgVar @["lrs_bump_step"] { };
     ProgVar @["LRSConSpec"] { };
     ProgVar @["dmem_new_seed"] { };
     ProgVar @["train_epochs"] { };
     ProgVar @["trials_per_epoch"] { };
     ProgVar @["trials_per_epoch_eff"] { };
     ProgVar @["test_run"] { };
     ProgVar @["test_interval"] { };
    };

    Function_List @.functions = [1] {
     Function @["DMemSafeTrialsPerEpoch"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [3] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       AssignExpr @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [2] {
	 AssignExpr @[0] { };
	 If @[1] { 
	  ProgEl_List @.true_code = [1] {
	   VarIncr @[0] { };
	  };
	 };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     FunctionCall @[0] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     ProgramCall @[1] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     If @[2] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     If @[3] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     PrintExpr @[5] { };
     If @[6] { 
      ProgEl_List @.true_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       PrintVar @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [1] {
	 MemberAssign @[0] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     If @[8] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["TrainEnd"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["save_final_wts"] { };
     ProgVar @["Train"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["EpochStart"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["BasicTrainTime"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     MemberAssign @[0] { };
     MemberMethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["EpochEnd"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["save_wts_interval"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MemberMethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[2] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     If @[3] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
    };
   };
   Program @["TrialStart"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [0] {
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MemberAssign @[3] { };
    };
   };
   Program @["TrialEnd"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["SettleMinus"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [3] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["qtr"] { };
      };
     };
     ForLoop @[1] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     NetUpdateView @[2] { };
    };
   };
   Program @["SettlePlus"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [3] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     ProgramCall @[1] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[2] { };
    };
   };
   Program @["Trial"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [7] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["qtr"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     ForLoop @[4] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[6] { };
    };
   };
   Program @["Quarter"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["cycle"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [7] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @["cycle_max"] { };
       ProgVar @["cyc"] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[4] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[6] { };
    };
   };
   Program @["Cycle"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
     MemberAssign @[2] { };
    };
   };
   Program @["SaveWeights"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["tag"] { };
     ProgVar @["wts_subdir"] { };
     ProgVar @["fname"] { };
     ProgVar @["epoch_str"] { };
     ProgVar @["batch_str"] { };
     ProgVar @["final_tag"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       ReturnExpr @[0] { };
      };
     };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program_Group @.gp["Monitors"] = [5] { 
    Program @["SaveLogFiles"] { 
     UserDataItem_List @*(.user_data_) {
      UserData_DocLink @["DocLink"] { };
     };

     ProgObjList @.objs = [0] {
     };

     ProgType_List @.types = [0] {
     };

     ProgVar_List @.args = [1] {
      ProgVar @["network"] { };
     };

     ProgVar_List @.vars = [6] {
      ProgVar @["tag"] { };
      ProgVar @["log_trials"] { };
      ProgVar @["log_dir"] { };
      ProgVar @["log_file_nm"] { };
      ProgVar @["epoch_output_data"] { };
      ProgVar @["trial_output_data"] { };
     };

     Function_List @.functions = [0] {
     };

     ProgEl_List @.init_code = [0] {
     };

     ProgEl_List @.prog_code = [6] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [0] {
       };
      };
      If @[1] { 
       ProgEl_List @.true_code = [1] {
	ReturnExpr @[0] { };
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      PrintVar @[4] { };
      If @[5] { 
       ProgEl_List @.true_code = [3] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [4] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	  ProgArg @[3] { };
	 };
	};
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [3] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	 };
	};
	PrintVar @[2] { };
       };
      };
     };
    };
    Program @["LeabraTrialMonitor"] { 
     UserDataItem_List @*(.user_data_) {
      UserData_DocLink @["DocLink"] { };
     };

     ProgObjList @.objs = [1] {
      NetMonitor @["trial_netmon"] { 
       NetMonItem_List @.items = [26] {
	NetMonItem @["batch"] { };
	NetMonItem @["epoch"] { };
	NetMonItem @["train_mode"] { };
	NetMonItem @["group"] { };
	NetMonItem @["trial"] { };
	NetMonItem @["tick"] { };
	NetMonItem @["time"] { };
	NetMonItem @["trial_name"] { };
	NetMonItem @["group_name"] { };
	NetMonItem @["output_name"] { };
	NetMonItem @["rt_cycles"] { };
	NetMonItem @["sse"] { };
	NetMonItem @["norm_err"] { };
	NetMonItem @["cos_err"] { };
	NetMonItem @["ext_rew"] { };
	NetMonItem @["lay_sse"] { };
	NetMonItem @["lay_bin_err"] { };
	NetMonItem @["lay_norm_err"] { };
	NetMonItem @["lay_cos_err"] { };
	NetMonItem @["lay_net_sd"] { };
	NetMonItem @["net_cos_diff"] { };
	NetMonItem @["net_trial_cos_diff"] { };
	NetMonItem @["net_avg_act_diff"] { };
	NetMonItem @["cos_diff"] { };
	NetMonItem @["trial_cos_diff"] { };
	NetMonItem @["avg_act_diff"] { };
       };
      };
     };

     ProgType_List @.types = [0] {
     };

     ProgVar_List @.args = [1] {
      ProgVar @["network"] { };
     };

     ProgVar_List @.vars = [3] {
      ProgVar @["trial_mon_data"] { };
      ProgVar @["trial_netmon"] { };
      ProgVar @["run_already"] { };
     };

     Function_List @.functions = [0] {
     };

     ProgEl_List @.init_code = [4] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      AssignExpr @[3] { };
     };

     ProgEl_List @.prog_code = [5] {
      If @[0] { 
       ProgEl_List @.true_code = [3] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
	AssignExpr @[2] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[4] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
     };
    };
    Program @["LeabraEpochMonitor"] { 
     UserDataItem_List @*(.user_data_) {
      UserData_DocLink @["DocLink"] { };
     };

     ProgObjList @.objs = [1] {
      NetMonitor @["epoch_netmon"] { 
       NetMonItem_List @.items = [30] {
	NetMonItem @["batch"] { };
	NetMonItem @["epoch"] { };
	NetMonItem @["avg_sse"] { };
	NetMonItem @["cnt_err"] { };
	NetMonItem @["pct_cor"] { };
	NetMonItem @["pct_err"] { };
	NetMonItem @["avg_norm_err"] { };
	NetMonItem @["avg_cos_err"] { };
	NetMonItem @["avg_ext_rew"] { };
	NetMonItem @["avg_cycles"] { };
	NetMonItem @["epoch_time_tot"] { };
	NetMonItem @["epoch_time_usr"] { };
	NetMonItem @["lay_avg_sse"] { };
	NetMonItem @["lay_cnt_err"] { };
	NetMonItem @["lay_pct_cor"] { };
	NetMonItem @["lay_pct_err"] { };
	NetMonItem @["lay_avg_norm_err"] { };
	NetMonItem @["lay_avg_cos_err"] { };
	NetMonItem @["net_avg_cos_diff"] { };
	NetMonItem @["net_avg_trial_cos_diff"] { };
	NetMonItem @["net_avg_avg_act_diff"] { };
	NetMonItem @["avg_cos_diff"] { };
	NetMonItem @["avg_trial_cos_diff"] { };
	NetMonItem @["avg_avg_act_diff"] { };
	NetMonItem @["avg_net_sd"] { };
	NetMonItem @["hog_pct"] { };
	NetMonItem @["dead_pct"] { };
	NetMonItem @["netmax"] { };
	NetMonItem @["avg_act"] { };
	NetMonItem @["netrel"] { };
       };
      };
     };

     ProgType_List @.types = [0] {
     };

     ProgVar_List @.args = [1] {
      ProgVar @["network"] { };
     };

     ProgVar_List @.vars = [4] {
      ProgVar @["epoch_mon_data"] { };
      ProgVar @["epoch_netmon"] { };
      ProgVar @["epoch_timer"] { };
      ProgVar @["run_already"] { };
     };

     Function_List @.functions = [0] {
     };

     ProgEl_List @.init_code = [5] {
      AssignExpr @[0] { };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      AssignExpr @[4] { };
     };

     ProgEl_List @.prog_code = [8] {
      If @[0] { 
       ProgEl_List @.true_code = [3] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
	AssignExpr @[2] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      AssignExpr @[3] { };
      MethodCall @[4] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MethodCall @[5] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MethodCall @[6] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      Comment @[7] { };
     };
    };
    Program @["LeabraTestTrialMonitor"] { 
     UserDataItem_List @*(.user_data_) {
      UserData_DocLink @["DocLink"] { };
     };

     ProgObjList @.objs = [1] {
      NetMonitor @["trial_netmon"] { 
       NetMonItem_List @.items = [26] {
	NetMonItem @["batch"] { };
	NetMonItem @["epoch"] { };
	NetMonItem @["train_mode"] { };
	NetMonItem @["group"] { };
	NetMonItem @["trial"] { };
	NetMonItem @["tick"] { };
	NetMonItem @["time"] { };
	NetMonItem @["trial_name"] { };
	NetMonItem @["group_name"] { };
	NetMonItem @["output_name"] { };
	NetMonItem @["rt_cycles"] { };
	NetMonItem @["sse"] { };
	NetMonItem @["norm_err"] { };
	NetMonItem @["cos_err"] { };
	NetMonItem @["ext_rew"] { };
	NetMonItem @["lay_sse"] { };
	NetMonItem @["lay_bin_err"] { };
	NetMonItem @["lay_norm_err"] { };
	NetMonItem @["lay_cos_err"] { };
	NetMonItem @["lay_net_sd"] { };
	NetMonItem @["net_cos_diff"] { };
	NetMonItem @["net_trial_cos_diff"] { };
	NetMonItem @["net_avg_act_diff"] { };
	NetMonItem @["cos_diff"] { };
	NetMonItem @["trial_cos_diff"] { };
	NetMonItem @["avg_act_diff"] { };
       };
      };
     };

     ProgType_List @.types = [0] {
     };

     ProgVar_List @.args = [1] {
      ProgVar @["network"] { };
     };

     ProgVar_List @.vars = [3] {
      ProgVar @["trial_mon_data"] { };
      ProgVar @["trial_netmon"] { };
      ProgVar @["run_already"] { };
     };

     Function_List @.functions = [0] {
     };

     ProgEl_List @.init_code = [4] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      AssignExpr @[3] { };
     };

     ProgEl_List @.prog_code = [5] {
      If @[0] { 
       ProgEl_List @.true_code = [3] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
	AssignExpr @[2] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[4] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
     };
    };
    Program @["LeabraTestEpochMonitor"] { 
     UserDataItem_List @*(.user_data_) {
      UserData_DocLink @["DocLink"] { };
     };

     ProgObjList @.objs = [1] {
      NetMonitor @["epoch_netmon"] { 
       NetMonItem_List @.items = [25] {
	NetMonItem @["batch"] { };
	NetMonItem @["epoch"] { };
	NetMonItem @["avg_sse"] { };
	NetMonItem @["cnt_err"] { };
	NetMonItem @["pct_cor"] { };
	NetMonItem @["pct_err"] { };
	NetMonItem @["avg_norm_err"] { };
	NetMonItem @["avg_cos_err"] { };
	NetMonItem @["avg_ext_rew"] { };
	NetMonItem @["avg_cycles"] { };
	NetMonItem @["lay_avg_sse"] { };
	NetMonItem @["lay_cnt_err"] { };
	NetMonItem @["lay_pct_cor"] { };
	NetMonItem @["lay_pct_err"] { };
	NetMonItem @["lay_avg_norm_err"] { };
	NetMonItem @["lay_avg_cos_err"] { };
	NetMonItem @["net_avg_cos_diff"] { };
	NetMonItem @["net_avg_trial_cos_diff"] { };
	NetMonItem @["net_avg_avg_act_diff"] { };
	NetMonItem @["avg_cos_diff"] { };
	NetMonItem @["avg_trial_cos_diff"] { };
	NetMonItem @["avg_avg_act_diff"] { };
	NetMonItem @["avg_net_sd"] { };
	NetMonItem @["netmax"] { };
	NetMonItem @["avg_act"] { };
       };
      };
     };

     ProgType_List @.types = [0] {
     };

     ProgVar_List @.args = [1] {
      ProgVar @["network"] { };
     };

     ProgVar_List @.vars = [3] {
      ProgVar @["epoch_mon_data"] { };
      ProgVar @["epoch_netmon"] { };
      ProgVar @["run_already"] { };
     };

     Function_List @.functions = [0] {
     };

     ProgEl_List @.init_code = [4] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      AssignExpr @[3] { };
     };

     ProgEl_List @.prog_code = [5] {
      If @[0] { 
       ProgEl_List @.true_code = [3] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
	AssignExpr @[2] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      Comment @[4] { };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser3"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["Visualizer"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [2] {
      T3Panel @["Network_0"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["Network_0_View"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [1] {
	  ScaleRange @[0] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["EpochOutputData"] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @["EpochOutputData_Graph"] { 
	 T3DataView_List @.children = [40] {
	  GraphColView @["batch"] { };
	  GraphColView @["epoch"] { };
	  GraphColView @["avg_sse"] { };
	  GraphColView @["cnt_err"] { };
	  GraphColView @["pct_cor"] { };
	  GraphColView @["pct_err"] { };
	  GraphColView @["avg_norm_err"] { };
	  GraphColView @["avg_cos_err"] { };
	  GraphColView @["avg_ext_rew"] { };
	  GraphColView @["avg_cycles"] { };
	  GraphColView @["epoch_time_tot"] { };
	  GraphColView @["epoch_time_usr"] { };
	  GraphColView @["Output_lay_avg_sse"] { };
	  GraphColView @["Output_lay_cnt_err"] { };
	  GraphColView @["Output_lay_pct_cor"] { };
	  GraphColView @["Output_lay_pct_err"] { };
	  GraphColView @["Output_lay_avg_norm_err"] { };
	  GraphColView @["Output_lay_avg_cos_err"] { };
	  GraphColView @["net_avg_cos_diff"] { };
	  GraphColView @["net_avg_trial_cos_diff"] { };
	  GraphColView @["net_avg_avg_act_diff"] { };
	  GraphColView @["Hidden_avg_cos_diff"] { };
	  GraphColView @["Output_avg_cos_diff"] { };
	  GraphColView @["Hidden_avg_trial_cos_diff"] { };
	  GraphColView @["Output_avg_trial_cos_diff"] { };
	  GraphColView @["Hidden_avg_avg_act_diff"] { };
	  GraphColView @["Output_avg_avg_act_diff"] { };
	  GraphColView @["Hidden_avg_net_sd"] { };
	  GraphColView @["Output_avg_net_sd"] { };
	  GraphColView @["Hidden_hog_pct"] { };
	  GraphColView @["Output_hog_pct"] { };
	  GraphColView @["Hidden_dead_pct"] { };
	  GraphColView @["Output_dead_pct"] { };
	  GraphColView @["Hidden_netmax"] { };
	  GraphColView @["Output_netmax"] { };
	  GraphColView @["Input_avg_act"] { };
	  GraphColView @["Hidden_avg_act"] { };
	  GraphColView @["Output_avg_act"] { };
	  GraphColView @["Hidden_netrel"] { };
	  GraphColView @["Output_netrel"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @["EpochOutputData_Graph_plot_1"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_2"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_3"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_4"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_5"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_6"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_7"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_8"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_9"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_10"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_11"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_12"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_13"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_14"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_15"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_16"] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @["EpochOutputData_Graph_err_1"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_2"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_3"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_4"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_5"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_6"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_7"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_8"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_9"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_10"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_11"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_12"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_13"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_14"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_15"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_16"] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @["Network_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["maxda"] { };
   };

   BaseSpec_Group @.specs = [4] {
    LeabraLayerSpec @["HiddenLayer"] { 
     BaseSpec_Group @.children = [1] {
      LeabraLayerSpec @["Input_Output"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] { 
     BaseSpec_Group @.children = [2] {
      LeabraBiasSpec @["LeabraBiasSpec_0"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [7] {
	SchedItem @[0] { };
	SchedItem @[1] { };
	SchedItem @[2] { };
	SchedItem @[3] { };
	SchedItem @[4] { };
	SchedItem @[5] { };
	SchedItem @[6] { };
       };
      };
      LeabraConSpec @["TopDownCons"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [7] {
	SchedItem @[0] { };
	SchedItem @[1] { };
	SchedItem @[2] { };
	SchedItem @[3] { };
	SchedItem @[4] { };
	SchedItem @[5] { };
	SchedItem @[6] { };
       };
      };
     };

     Schedule @.lrate_sched = [7] {
      SchedItem @[0] { };
      SchedItem @[1] { };
      SchedItem @[2] { };
      SchedItem @[3] { };
      SchedItem @[4] { };
      SchedItem @[5] { };
      SchedItem @[6] { };
     };
    };
    FullPrjnSpec @["FullPrjnSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   Layer_Group @.layers = [3] {
    LeabraLayer @["Input"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [25] {
     };
    };
    LeabraLayer @["Hidden"] { 
     Projection_Group @.projections = [2] {
      LeabraPrjn @["Fm_Input"] { };
      LeabraPrjn @["Fm_Output"] { };
     };

     Unit_Group @.units = [25] {
     };
    };
    LeabraLayer @["Output"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Hidden"] { };
     };

     Unit_Group @.units = [25] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects["LeabraFlex"] {
 user_data_=NULL;
 name="LeabraFlex";
 desc="flexible modular framework for Leabra Programs";
 tags="Leabra, flex";
 version {
  user_data_=NULL;
  major=8;
  minor=0;
  step=3;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 license {
  user_data_=NULL;
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2016";
  custom=;
 };
 pub_cite=;
 wiki {
  user_data_=NULL;
  wiki=;
  page_name=;
 };
 docs {
  user_data_=NULL;
  name="docs";
  el_typ=taDoc;
  el_def=0;
  taDoc @["LeabraFlexProgs"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraFlexProgs";
   desc=;
   web_doc=1;
   wiki="emergent";
   url="LeabraFlexProgs";
   full_url="https://grey.colorado.edu/emergent/index.php/LeabraFlexProgs";
   text_size=1;
   text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
   html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>LeabraFlex - emergent</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"LeabraFlex\",\"wgTitle\":\"LeabraFlex\",\"wgCurRevisionId\":11194,\"wgRevisionId\":11194,\"wgArticleId\":2315,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"bureaucrat\",\"svnadmins\",\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"LeabraFlex\",\"wgRelevantArticleId\":2315,\"wgUserId\":3,\"wgUserEditCount\":2418,\"wgUserRegistration\":1178051527000,\"wgUserNewMsgRevisionId\":null,\"wgIsProbablyEditable\":!0,
\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"wgRedirectedFrom\":\"LeabraFlexProgs\",\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/emergent/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\",\"wgInternalRedirectTargetUrl\":\"/emergent/index.php/LeabraFlex\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"ccmeonemails\":\"1\",\"enotifminoredits\":\"1\",\"imagesize\":\"0\",\"previewontop\":\"\",\"rows\":\"30\",\"thumbsize\":\"0\",\"underline\":\"0\",\"watchmoves\":\"1\",\"editsection\":\"1\",\"rememberpassword\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"14fd6c804d78e99930123181974c128b983adb9e\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"0a88836d7a7345a895c33b77c32d4c75573565c5+\\\\\",\"patrolToken\":\"23ddb841cfc4d5ea0a31b9b98522b291573565c5+\\\\\",\"watchToken\":\"e09a6a8fb5e56280ca057cc6e9e63054573565c5+\\\\\"});});mw.loader.load([\"mediawiki.action.view.redirect\",\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/emergent/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a{text-decoration:none}</style>
<script async=\"\" src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.2\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"LeabraFlex\" href=\"/emergent/index.php?title=Special:ExportRDF/LeabraFlex&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraFlex&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraFlex&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/emergent/opensearch_desc.php\" title=\"emergent (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/emergent/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"emergent Atom feed\" href=\"/emergent/index.php?title=Special:RecentChanges&amp;feed=atom\">
<link rel=\"canonical\" href=\"https://grey.colorado.edu/emergent/index.php/LeabraFlex\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/emergent/skins/Vector/csshover.min.htc\")}</style><![endif]-->
</head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-LeabraFlex skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">LeabraFlex</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From emergent</div>
								<div id=\"contentSub\"><span class=\"mw-redirectedfrom\">(Redirected from <a href=\"/emergent/index.php?title=LeabraFlexProgs&amp;redirect=no\" title=\"LeabraFlexProgs\">LeabraFlexProgs</a>)</span></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><p>Documentation for the <code>LeabraFlex</code> project template (also avail in <code>demo/leabra/leabra_flex_progs.proj</code>), which provides a different way of configuring the <a href=\"/emergent/index.php/Leabra\" title=\"Leabra\">Leabra</a> programs that is more flexible and modular -- very useful for more complex projects that require extensive novel functionality, including interactive behaviors between the network and the programs that generate inputs to the network, things that happen at different points in the settling process, and supporting multiple different ways of running the model in a more efficient, modular fashion.
</p>
<div id=\"toc\" class=\"toc\"><div id=\"toctitle\"><h2>Contents</h2></div>
<ul>
<li class=\"toclevel-1 tocsection-1\"><a href=\"#ConfigData.2FConfigTable\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">ConfigData/ConfigTable</span></a></li>
<li class=\"toclevel-1 tocsection-2\"><a href=\"#Program_Hierarchy\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Program Hierarchy</span></a></li>
<li class=\"toclevel-1 tocsection-3\"><a href=\"#UtilProgs\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">UtilProgs</span></a></li>
<li class=\"toclevel-1 tocsection-4\"><a href=\"#DMem_.28MPI.29\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">DMem (MPI)</span></a></li>
</ul>
</div>

<h1><span class=\"mw-headline\" id=\"ConfigData.2FConfigTable\">ConfigData/ConfigTable</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/emergent/index.php?title=LeabraFlex&amp;action=edit&amp;section=1\" title=\"Edit section: ConfigData/ConfigTable\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>The <a href=\"/emergent/index.php/DataTable\" title=\"DataTable\">DataTable</a> in ConfigData/ConfigTable is key for the flex progs -- each row specifies a different configuration, which can call different Init, Run, and even Startup programs, to achieve very different behavior or configurations all within the same project.  This makes it very easy to add new functionality into the system without adding spaghetti or complex conditionals in existing programs -- just add a new config and a new program at the right level, to achieve new functionality.
</p>
<h1><span class=\"mw-headline\" id=\"Program_Hierarchy\">Program Hierarchy</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/emergent/index.php?title=LeabraFlex&amp;action=edit&amp;section=2\" title=\"Edit section: Program Hierarchy\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>The call sequence is:
</p>
<ul><li> <b>MasterTrain</b></li></ul>
<dl><dd><ul><li> <b>InitProgs[init_prog]</b> (as spec'd in ConfigTable)</li>
<li> loop over <b>MasterRun</b> until stop_train is set to true</li></ul>
<dl><dd><ul><li> <b>RunProgs[run_prog]</b> (as spec'd in ConfigTable)</li></ul>
<dl><dd><ul><li> typically calls one or more <b>TaskProgs</b>, increments counters and does appropriate Epoch and higher-level housekeeping as necessary.</li></ul></dd></dl></dd></dl></dd></dl>
<p>MasterRun now has a <b>stop_step_grain</b> parameter that allows you to Step this program at different grain sizes (e.g., after an Epoch) and for different conditions -- this is completely extensible if you look at the underlying code, and very powerful.
</p>
<h1><span class=\"mw-headline\" id=\"UtilProgs\">UtilProgs</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/emergent/index.php?title=LeabraFlex&amp;action=edit&amp;section=3\" title=\"Edit section: UtilProgs\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>The UtilProgs contain all the basic functionality for training a network and monitoring, etc -- the task programs should consist of calls to these util programs in the desired order to achieve whatever form of processing is required.  The built-in BasicTrain program just does the equivalent of a standard LeabraTrial.
</p>
<h1><span class=\"mw-headline\" id=\"DMem_.28MPI.29\">DMem (MPI)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/emergent/index.php?title=LeabraFlex&amp;action=edit&amp;section=4\" title=\"Edit section: DMem (MPI)\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>The most efficient way to use multiple distributed memory (dmem) processors (via MPI) is to split different events across processors.  The standard Leabra programs do this by interleaving trials according to dmem processor (e.g., for 10 processors, proc 0 gets trials 0, 10, 20, ..; proc 1 gets 1, 11, 21, etc..).  For these flex progs, which can have interactive behavior and ill-defined sequences of events, this strategy is not always possible (the <b>ChoosePermutedEvent</b> program in EnviroProgs does implement this behavior however).  Here are some tips:
</p>
<ul><li> After version 8.0, you can add taMisc::dmem_proc to all calls to <a href=\"/emergent/index.php/Random\" title=\"Random\">Random</a> or various Permute etc functions that use random numbers and take a <b>thr_no</b> (thread number) argument -- as documented in <a href=\"/emergent/index.php/MTRnd\" title=\"MTRnd\">MTRnd</a>, this thr_no arg selects different random number sequences that are initialized from a single common seed, and will produce statistically independent sequences.  Thus, you can ensure that each node gets different random inputs and other parameters, as appropriate, without needing to have an entirely different seed for each node.  This also means that results can be fully replicable when starting from the same random seed, and that nodes can also generate the same random numbers as needed (if this is needed, it is a good idea to pass taMisc::dmem_proc + 1 to the Random calls, and reserve 0 for the common shared thread that should only be called identically from all processors -- otherwise it will diverge from the 0'th node relative to the others.</li></ul>
<ul><li> After common weight initialization etc, the <b>TrainStart</b> program has the option to generate a new random seed just before starting the Epoch -- see the <b>dmem_new_seed</b> flag -- each processor at this point will be operating with their own random seed, so any dynamic event generation code that uses random numbers (hint: it should!) will result in different things on different nodes.  However, as a result of this, <b>every run of the simulation will be different</b>, even if using common initial starting seeds.   See first note to alternative that avoids these consequences.</li></ul>
<ul><li> It is <b>essential</b> that the different nodes still end up calling <b>Compute_Weights</b> the same number of times, after roughly the same amount of overall computation -- this is where the weight changes are synchronized across processors -- the simulation will lock up and hang if these do not align.</li></ul>
<ul><li> The <b>epoch_trials</b> value gets divided by dmem_nprocs in StdGlobalsInit, such that each processor runs this reduced number of trials, <i>with the network-&gt;trial counter going from 0 to this lower epoch_trials value</i> -- it does not do the interleaving that is done in the hierarchical programs.  This also means that trial numbers will be duplicated if you merge separate trial log data tables into a single table, which is not necessarily a problem, but you may need to do things a bit differently in analyzing the data.</li></ul>
<ul><li> If you are using a traditional list of events in an input_data table, use ChoosePermutedEvent and it will work properly with dmem, just like the standard programs.  This program maintains its own internal counter, and simply iterates in a permuted order through the events and then repeats -- it does not need to be synchronized with the trial and epoch structure of the programs (to achieve this, simply ensure that the epoch_trials is the same as the number of rows in the input data table).</li></ul>

<!-- 
NewPP limit report
Cached time: 20160512214138
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.024 seconds
Real time usage: 0.026 seconds
Preprocessor visited node count: 15/1000000
Preprocessor generated node count: 20/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 - -total
-->

<!-- Saved in parser cache with key pdpwiki:pcache:idhash:2315-0!*!0!!en!*!* and timestamp 20160512214138 and revision id 11194
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/emergent/index.php?title=LeabraFlex&amp;oldid=11194\">https://grey.colorado.edu/emergent/index.php?title=LeabraFlex&amp;oldid=11194</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/emergent/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/emergent/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/emergent/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/emergent/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/emergent/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/emergent/index.php?title=Special:UserLogout&amp;returnto=LeabraFlex\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraFlex\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/emergent/index.php?title=Talk:LeabraFlex&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraFlex\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/emergent/index.php?title=LeabraFlex&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/emergent/index.php?title=LeabraFlex&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/emergent/index.php?title=LeabraFlex&amp;action=unwatch&amp;token=f494f878fd49b9bc4a42d7984fd67370573565c5%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/emergent/index.php?title=LeabraFlex&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/emergent/index.php/Special:MovePage/LeabraFlex\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/emergent/index.php?title=LeabraFlex&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/emergent/index.php?title=LeabraFlex&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/emergent/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search emergent [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-recentchanges\"><a href=\"/emergent/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-Documentation\"><a href=\"/emergent/index.php/User_hub\">Documentation</a></li><li id=\"n-Submit-a-bug\"><a href=\"/emergent/index.php/How_to_submit_a_bug_report\">Submit a bug</a></li><li id=\"n-Bug-tracker\"><a href=\"//grey.colorado.edu/cgi-bin/bugzilla/index.cgi\" rel=\"nofollow\">Bug tracker</a></li><li id=\"n-Mailing-list\"><a href=\"//grey.colorado.edu/cgi-bin/mailman/listinfo/emergent-users\" rel=\"nofollow\">Mailing list</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/emergent/index.php/Special:WhatLinksHere/LeabraFlex\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/emergent/index.php/Special:RecentChangesLinked/LeabraFlex\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/emergent/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/emergent/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/emergent/index.php?title=LeabraFlex&amp;oldid=11194\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/emergent/index.php?title=LeabraFlex&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/emergent/index.php/Special:Browse/LeabraFlex\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=LeabraFlex\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=LeabraFlex&amp;oldid=11194&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/emergent/index.php?title=LeabraFlex&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 4 September 2015, at 02:19.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-about\"><a href=\"/emergent/index.php/emergent:About\" title=\"emergent:About\">About emergent</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/emergent/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/emergent/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /emergent/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/emergent/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.toc\",\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":192});
} );</script>
	

</body></html>";
  };
  taDoc @["ChangeLog"] {
   user_data_=NULL;
   name="ChangeLog";
   desc=;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>


<li>Sat Mar  4 02:19:15 2017 version: 8.0.3 user: oreilly file_name: <code>LeabraFlexParamSetExperiment.proj</code> <br>
svn rev: 10514 update startup program



<li>Fri Feb 17 01:20:30 2017 version: 8.0.2 user: oreilly file_name: <code>LeabraFlexParamSetExperiment.proj</code> <br>
svn rev: 10489 actually remove the config table finally


<li>Fri Feb 17 01:19:23 2017 version: 8.0.1 user: oreilly file_name: <code>LeabraFlexParamSetExperiment.proj</code> <br>
leabra flex using param sets experiment project -- updated by randy from John's original, to remove the config table entirely, and use StdGlobal where relevant
</ul>
</body>
</html>
";
   html_text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>
<P>
<P>
<li>Sat Mar  4 02:19:15 2017 version: 8.0.3 user: oreilly file_name: <code>LeabraFlexParamSetExperiment.proj</code> <br>
svn rev: 10514 update startup program
<P>
<P>
<P>
<li>Fri Feb 17 01:20:30 2017 version: 8.0.2 user: oreilly file_name: <code>LeabraFlexParamSetExperiment.proj</code> <br>
svn rev: 10489 actually remove the config table finally
<P>
<P>
<li>Fri Feb 17 01:19:23 2017 version: 8.0.1 user: oreilly file_name: <code>LeabraFlexParamSetExperiment.proj</code> <br>
leabra flex using param sets experiment project -- updated by randy from John's original, to remove the config table entirely, and use StdGlobal where relevant
</ul>
</body>
</html>
";
  };
 };
 wizards {
  user_data_=NULL;
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_1"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     user_data_=NULL;
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_1";
  };
 };
 ctrl_panels {
  user_data_=NULL;
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  master_and_clones=0;
  ControlPanel @["ControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ControlPanel";
   cp_state=REGULAR;
   updt_while_running=0;
   desc="main control panel for the system";
   mbrs {
    user_data_=NULL;
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     user_data_=NULL;
     label="run_params";
     cust_label=1;
     desc="select parameters for controlling how network is run";
     cust_desc=0;
     base=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["run_params"]$$;
     mbr=ProgVar::object_val;
     data {
      user_data_=NULL;
      ctrl_type=CONTROL;
      is_numeric=0;
      is_single=1;
      saved_value=".projects[\"LeabraFlexParamSetExperiment\"].param_sets.gp[\"RunParams\"][\"SpecialTrain\"]";
      record=1;
      search=0;
      range=;
      notes="MasterTrain sets these params at start";
     };
    };
    ControlPanelMember @[1] {
     user_data_=NULL;
     label="misc_params";
     cust_label=1;
     desc="select other parameters, typically network spec params -- independent of run params";
     cust_desc=0;
     base=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["misc_params"]$$;
     mbr=ProgVar::object_val;
     data {
      user_data_=NULL;
      ctrl_type=CONTROL;
      is_numeric=0;
      is_single=1;
      saved_value=".projects[\"LeabraFlexParamSetExperiment\"].param_sets.gp[\"MiscParams\"][\"MiscOne\"]";
      record=1;
      search=0;
      range=;
      notes="add extra params as needed..";
     };
    };
    ControlPanelMember @[2] {
     user_data_=NULL;
     label="master_run_stop_step_grain";
     cust_label=0;
     desc="select grain size for Step function on MasterRun program -- can extend this functionality -- very useful!";
     cust_desc=0;
     base=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterRun"].vars["stop_step_grain"].dyn_enum_val$$;
     mbr=DynEnum::value;
     data {
      user_data_=NULL;
      ctrl_type=CONTROL;
      is_numeric=0;
      is_single=1;
      saved_value="0";
      record=0;
      search=0;
      range="0:1:0.1";
      notes="MasterRun step can do many different things -- very useful!";
     };
    };
    ControlPanelMember @[3] {
     user_data_=NULL;
     label="network_cycle_qtr";
     cust_label=1;
     desc="[Default: true]  one CycleRun runs for a full quarter number of actual cycles -- this greatly speeds up processing by reducing threading overhead, but prevents e.g., interactive viewing at the individual cycle level -- this is not saved -- have to re-engage it when needed, to prevent unintentionally slowing everything down";
     cust_desc=0;
     base=.projects["LeabraFlex"].networks["Network_0"].times$$;
     mbr=LeabraTimes::cycle_qtr;
     data {
      user_data_=NULL;
      ctrl_type=CONTROL;
      is_numeric=0;
      is_single=1;
      saved_value="true";
      record=0;
      search=0;
      range="0:1:0.1";
      notes="turn OFF to see individual cycles, ON for MUCH faster running";
     };
    };
    ControlPanelMember @[4] {
     user_data_=NULL;
     label="cycle_update_net_view";
     cust_label=0;
     desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     cust_desc=0;
     base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"].vars["update_net_view"]$$;
     mbr=ProgVar::bool_val;
     data {
      user_data_=NULL;
      ctrl_type=CONTROL;
      is_numeric=0;
      is_single=1;
      saved_value="true";
      record=0;
      search=0;
      range="0:1:0.1";
      notes="update network view at cycle level -- actual value depends on cycle_qtr";
     };
    };
    ControlPanelMember @[5] {
     user_data_=NULL;
     label="quarter_update_net_view";
     cust_label=0;
     desc="if true, will update network views at end of settling";
     cust_desc=0;
     base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"].vars["update_net_view"]$$;
     mbr=ProgVar::bool_val;
     data {
      user_data_=NULL;
      ctrl_type=CONTROL;
      is_numeric=0;
      is_single=1;
      saved_value="false";
      record=1;
      search=0;
      range=;
      notes="redundant with cycle for cycle_qtr = ON";
     };
    };
    ControlPanelMember @[6] {
     user_data_=NULL;
     label="trial_update_net_view";
     cust_label=0;
     desc="determines whether to update any network view displays after trial is completed";
     cust_desc=0;
     base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Trial"].vars["update_net_view"]$$;
     mbr=ProgVar::bool_val;
     data {
      user_data_=NULL;
      ctrl_type=CONTROL;
      is_numeric=0;
      is_single=1;
      saved_value="false";
      record=1;
      search=0;
      range=;
      notes="mostly redundant but some updates happen after trial";
     };
    };
   };
   mths {
    user_data_=NULL;
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
    ControlPanelMethod @[0] {
     user_data_=NULL;
     label="Init";
     cust_label=0;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[1] {
     user_data_=NULL;
     label="Run";
     cust_label=0;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[2] {
     user_data_=NULL;
     label="Step";
     cust_label=0;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[3] {
     user_data_=NULL;
     label="Stop";
     cust_label=0;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"]$;
     mth=Program::Stop;
    };
   };
  };
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    user_data_=NULL;
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     user_data_=NULL;
     label="run_params";
     cust_label=1;
     desc="select parameters for controlling how network is run";
     cust_desc=0;
     base=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["run_params"]$;
     mbr=ProgVar::object_val;
     data {
      user_data_=NULL;
      ctrl_type=CLUSTER_RUN;
      is_numeric=0;
      is_single=1;
      saved_value=;
      record=0;
      search=0;
      range=;
      notes=;
     };
    };
    ControlPanelMember @[1] {
     user_data_=NULL;
     label="misc_params";
     cust_label=1;
     desc="select other parameters, typically network spec params -- independent of run params";
     cust_desc=0;
     base=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["misc_params"]$;
     mbr=ProgVar::object_val;
     data {
      user_data_=NULL;
      ctrl_type=CLUSTER_RUN;
      is_numeric=0;
      is_single=1;
      saved_value=;
      record=0;
      search=0;
      range=;
      notes=;
     };
    };
   };
   mths {
    user_data_=NULL;
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    user_data_=NULL;
    name="jobs_running";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
      DataSortEl @["tag_up_0"] {
       user_data_=NULL;
       col_name="tag";
       name="tag_up_0";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_1"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_1";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_2"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_2";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_3"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_3";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_4"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_4";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_5"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_5";
       order=ASCENDING;
      };
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_done {
    user_data_=NULL;
    name="jobs_done";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
      DataSortEl @["tag_up_0"] {
       user_data_=NULL;
       col_name="tag";
       name="tag_up_0";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_1"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_1";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_2"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_2";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_3"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_3";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_4"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_4";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_5"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_5";
       order=ASCENDING;
      };
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_deleted {
    user_data_=NULL;
    name="jobs_deleted";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
      DataSortEl @["tag_up_0"] {
       user_data_=NULL;
       col_name="tag";
       name="tag_up_0";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_1"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_1";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_2"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_2";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_3"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_3";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_4"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_4";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_5"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_5";
       order=ASCENDING;
      };
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_archive {
    user_data_=NULL;
    name="jobs_archive";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
      DataSortEl @["tag_up_0"] {
       user_data_=NULL;
       col_name="tag";
       name="tag_up_0";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_1"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_1";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_2"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_2";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_3"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_3";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_4"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_4";
       order=ASCENDING;
      };
      DataSortEl @["last_svn_up_5"] {
       user_data_=NULL;
       col_name="last_svn";
       name="last_svn_up_5";
       order=ASCENDING;
      };
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   file_list {
    user_data_=NULL;
    name="file_list";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["file_name"] {
      user_data_=NULL;
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["size"] {
      user_data_=NULL;
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["kind"] {
      user_data_=NULL;
      name="kind";
      desc="type of file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["date_modified"] {
      user_data_=NULL;
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["date_created"] {
      user_data_=NULL;
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["svn_file_path"] {
      user_data_=NULL;
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["proj_file_path"] {
      user_data_=NULL;
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["file_path"] {
      user_data_=NULL;
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   cluster_info {
    user_data_=NULL;
    name="cluster_info";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["state"] {
      user_data_=NULL;
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["procs"] {
      user_data_=NULL;
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
      DataSortEl @["state_up_0"] {
       user_data_=NULL;
       col_name="state";
       name="state_up_0";
       order=ASCENDING;
      };
      DataSortEl @["start_time_up_1"] {
       user_data_=NULL;
       col_name="start_time";
       name="start_time_up_1";
       order=ASCENDING;
      };
      DataSortEl @["start_time_up_2"] {
       user_data_=NULL;
       col_name="start_time";
       name="start_time_up_2";
       order=ASCENDING;
      };
      DataSortEl @["start_time_up_3"] {
       user_data_=NULL;
       col_name="start_time";
       name="start_time_up_3";
       order=ASCENDING;
      };
      DataSortEl @["start_time_up_4"] {
       user_data_=NULL;
       col_name="start_time";
       name="start_time_up_4";
       order=ASCENDING;
      };
      DataSortEl @["start_time_up_5"] {
       user_data_=NULL;
       col_name="start_time";
       name="start_time_up_5";
       order=ASCENDING;
      };
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   clusterscript_timestamp {
    user_data_=NULL;
    name="clusterscript_timestamp";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["timestamp"] {
      user_data_=NULL;
      name="timestamp";
      desc="Timestamp of last interaction from the cluster run script";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["version"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="version";
      desc="Version number of cluster run script ";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   search_algos {
    user_data_=NULL;
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=1;
   proj_name="param_search";
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster="dream";
   clusters="dream";
   users="oreilly";
   last_submit_time="2017_02_08_21_14_24";
   notes="testing param_set config idea";
   label=;
   extra_files=;
   svn_repo="grey_run";
   repo_url="https://grey.colorado.edu/svn/clusterun";
   queue=;
   run_time="1h";
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=2;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=1;
   enable_notes=1;
  };
 };
 param_sets {
  user_data_=NULL;
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
  ParamSet_Group @.gp["RunParams"] {
   user_data_=NULL;
   name="RunParams";
   el_typ=ParamSet;
   el_def=0;
   master_and_clones=1;
   ParamSet @["RunMaster"] {
    user_data_=NULL;
    name="RunMaster";
    cp_state=MASTER;
    updt_while_running=0;
    desc="default values for basic training parameters -- this is a 'master' param set -- make changes here and all others in group will auto-update";
    mbrs {
     user_data_=NULL;
     name="mbrs";
     el_typ=ControlPanelMember;
     el_def=0;
     ControlPanelMember @[0] {
      user_data_=NULL;
      label="run_prog";
      cust_label=1;
      desc="name of run program to run -- must exist in the RunProgs group";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["run_prog"]$$;
      mbr=ProgVar::string_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="BasicRun";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[1] {
      user_data_=NULL;
      label="init_prog";
      cust_label=1;
      desc="name of init program -- must exist in the InitProgs group";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["init_prog"]$$;
      mbr=ProgVar::string_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="BasicInit";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[2] {
      user_data_=NULL;
      label="startup_prog";
      cust_label=1;
      desc="additional configuration-specific startup code to run, in the StartupProgs -- any global startup stuff should still be in MasterStartup -- this should only be for startup that is specific to a particular configuration (rare)";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs["MasterStartup"].vars["startup_prog"]$$;
      mbr=ProgVar::string_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="BasicStartup";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[3] {
      user_data_=NULL;
      label="train_epochs";
      cust_label=1;
      desc="number of epochs to train network for";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["train_epochs"]$$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="50";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[4] {
      user_data_=NULL;
      label="trials_per_epoch";
      cust_label=1;
      desc="number of trials per epoch";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["trials_per_epoch"]$$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="50";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[5] {
      user_data_=NULL;
      label="save_final_wts";
      cust_label=1;
      desc="should final weights after training is complete be saved?";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainEnd"].vars["save_final_wts"]$$;
      mbr=ProgVar::bool_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="true";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[6] {
      user_data_=NULL;
      label="save_wts_interval";
      cust_label=1;
      desc="how frequently (epochs) to save weights during training";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochEnd"].vars["save_wts_interval"]$$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="200";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[7] {
      user_data_=NULL;
      label="test_run";
      cust_label=1;
      desc="is this a testing-only run, no training?";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["test_run"]$$;
      mbr=ProgVar::bool_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="false";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[8] {
      user_data_=NULL;
      label="test_interval";
      cust_label=1;
      desc="how frequently (epochs) to run a test during training";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["test_interval"]$$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="1";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[9] {
      user_data_=NULL;
      label="log_trials";
      cust_label=1;
      desc="should trial-level data be saved to log files?";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["SaveLogFiles"].vars["log_trials"]$$;
      mbr=ProgVar::bool_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="false";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[10] {
      user_data_=NULL;
      label="load_weights";
      cust_label=1;
      desc="load initial weights from a file (specified in weights_file)";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["load_weights"]$$;
      mbr=ProgVar::bool_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="false";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[11] {
      user_data_=NULL;
      label="weights_file";
      cust_label=1;
      desc="full relative path (from project) of weights file to load -- use CRR: prefix to load from cluster run results directory";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["weights_file"]$$;
      mbr=ProgVar::string_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value=;
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[12] {
      user_data_=NULL;
      label="load_st_epc";
      cust_label=1;
      desc="after loading weights, reset epoch counter to this value (-1 = leave at value from the loaded weights)";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["load_st_epc"]$$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="1";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[13] {
      user_data_=NULL;
      label="lrs_step_epochs";
      cust_label=1;
      desc="learning rate schedule epochs per step of decrease in learning rate";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["lrs_step_epochs"]$$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="50";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[14] {
      user_data_=NULL;
      label="lrs_n_steps";
      cust_label=1;
      desc="number of steps in the learning rate schedule";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["lrs_n_steps"]$$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="7";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[15] {
      user_data_=NULL;
      label="lrs_bump_step";
      cust_label=1;
      desc="if positive (3 is typical), then bump up the learning rate at this step in the schedule -- can help improve final performance level";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["lrs_bump_step"]$$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="-1";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[16] {
      user_data_=NULL;
      label="n_batches";
      cust_label=1;
      desc="number of batches to run";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"].vars["n_batches"]$$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="1";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[17] {
      user_data_=NULL;
      label="batch_start";
      cust_label=1;
      desc="batch number to start on";
      cust_desc=0;
      base=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"].vars["batch_start"]$$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="0";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
    };
    mths {
     user_data_=NULL;
     name="mths";
     el_typ=ControlPanelMethod;
     el_def=0;
     group_type=GT_BUTTONS;
    };
    last_activated=0;
   };
   ParamSet @["RunConfig1"] {
    user_data_=NULL;
    name="RunConfig1";
    cp_state=CLONE;
    updt_while_running=0;
    desc="another configuration of run parameters to choose from.. make as many as you need!  this is a 'clone' of the master and will auto-update for any additions or changes to members";
    mbrs {
     user_data_=NULL;
     name="mbrs";
     el_typ=ControlPanelMember;
     el_def=0;
     ControlPanelMember @[0] {
      user_data_=NULL;
      label="run_prog";
      cust_label=1;
      desc="name of run program to run -- must exist in the RunProgs group";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["run_prog"]$;
      mbr=ProgVar::string_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="BasicRun";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[1] {
      user_data_=NULL;
      label="init_prog";
      cust_label=1;
      desc="name of init program -- must exist in the InitProgs group";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["init_prog"]$;
      mbr=ProgVar::string_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="BasicInit";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[2] {
      user_data_=NULL;
      label="startup_prog";
      cust_label=1;
      desc="additional configuration-specific startup code to run, in the StartupProgs -- any global startup stuff should still be in MasterStartup -- this should only be for startup that is specific to a particular configuration (rare)";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs["MasterStartup"].vars["startup_prog"]$;
      mbr=ProgVar::string_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="BasicStartup";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[3] {
      user_data_=NULL;
      label="train_epochs";
      cust_label=1;
      desc="number of epochs to train network for";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["train_epochs"]$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="5";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[4] {
      user_data_=NULL;
      label="trials_per_epoch";
      cust_label=1;
      desc="number of trials per epoch";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["trials_per_epoch"]$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="25";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[5] {
      user_data_=NULL;
      label="save_final_wts";
      cust_label=1;
      desc="should final weights after training is complete be saved?";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainEnd"].vars["save_final_wts"]$;
      mbr=ProgVar::bool_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="false";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[6] {
      user_data_=NULL;
      label="save_wts_interval";
      cust_label=1;
      desc="how frequently (epochs) to save weights during training";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochEnd"].vars["save_wts_interval"]$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="200";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[7] {
      user_data_=NULL;
      label="test_run";
      cust_label=1;
      desc="is this a testing-only run, no training?";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["test_run"]$;
      mbr=ProgVar::bool_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="false";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[8] {
      user_data_=NULL;
      label="test_interval";
      cust_label=1;
      desc="how frequently (epochs) to run a test during training";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["test_interval"]$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="1";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[9] {
      user_data_=NULL;
      label="log_trials";
      cust_label=1;
      desc="should trial-level data be saved to log files?";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["SaveLogFiles"].vars["log_trials"]$;
      mbr=ProgVar::bool_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="false";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[10] {
      user_data_=NULL;
      label="load_weights";
      cust_label=1;
      desc="load initial weights from a file (specified in weights_file)";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["load_weights"]$;
      mbr=ProgVar::bool_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value="false";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[11] {
      user_data_=NULL;
      label="weights_file";
      cust_label=1;
      desc="full relative path (from project) of weights file to load -- use CRR: prefix to load from cluster run results directory";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["weights_file"]$;
      mbr=ProgVar::string_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=0;
       is_single=1;
       saved_value=;
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[12] {
      user_data_=NULL;
      label="load_st_epc";
      cust_label=1;
      desc="after loading weights, reset epoch counter to this value (-1 = leave at value from the loaded weights)";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["load_st_epc"]$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="1";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[13] {
      user_data_=NULL;
      label="lrs_step_epochs";
      cust_label=1;
      desc="learning rate schedule epochs per step of decrease in learning rate";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["lrs_step_epochs"]$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="50";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[14] {
      user_data_=NULL;
      label="lrs_n_steps";
      cust_label=1;
      desc="number of steps in the learning rate schedule";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["lrs_n_steps"]$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="7";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[15] {
      user_data_=NULL;
      label="lrs_bump_step";
      cust_label=1;
      desc="if positive (3 is typical), then bump up the learning rate at this step in the schedule -- can help improve final performance level";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["lrs_bump_step"]$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="-1";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[16] {
      user_data_=NULL;
      label="n_batches";
      cust_label=1;
      desc="number of batches to run";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"].vars["n_batches"]$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="1";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
     ControlPanelMember @[17] {
      user_data_=NULL;
      label="batch_start";
      cust_label=1;
      desc="batch number to start on";
      cust_desc=0;
      base=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"].vars["batch_start"]$;
      mbr=ProgVar::int_val;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="0";
       record=1;
       search=0;
       range=;
       notes=;
      };
     };
    };
    mths {
     user_data_=NULL;
     name="mths";
     el_typ=ControlPanelMethod;
     el_def=0;
     group_type=GT_BUTTONS;
    };
    last_activated=0;
   };
  };
  ParamSet_Group @.gp["MiscParams"] {
   user_data_=NULL;
   name="MiscParams";
   el_typ=ParamSet;
   el_def=0;
   master_and_clones=1;
   ParamSet @["MiscMaster"] {
    user_data_=NULL;
    name="MiscMaster";
    cp_state=MASTER;
    updt_while_running=0;
    desc="default values for all params -- this is a 'master' param set -- make changes here and all others in group will auto-update";
    mbrs {
     user_data_=NULL;
     name="mbrs";
     el_typ=ControlPanelMember;
     el_def=0;
     ControlPanelMember @[0] {
      user_data_=NULL;
      label="leabra_con_spec_0_lrate";
      cust_label=0;
      desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
      cust_desc=0;
      base=.projects["LeabraFlex"].networks["Network_0"].specs["LeabraConSpec_0"]$$;
      mbr=LeabraConSpec::lrate;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="0.04";
       record=0;
       search=0;
       range="0:1:0.1";
       notes=;
      };
     };
    };
    mths {
     user_data_=NULL;
     name="mths";
     el_typ=ControlPanelMethod;
     el_def=0;
     group_type=GT_BUTTONS;
    };
    last_activated=0;
   };
   ParamSet @["MiscConfig1"] {
    user_data_=NULL;
    name="MiscConfig1";
    cp_state=CLONE;
    updt_while_running=0;
    desc="another configuration of misc parameters to choose from.. make as many as you need!  this is a 'clone' of the master and will auto-update for any additions or changes to members";
    mbrs {
     user_data_=NULL;
     name="mbrs";
     el_typ=ControlPanelMember;
     el_def=0;
     ControlPanelMember @[0] {
      user_data_=NULL;
      label="leabra_con_spec_0_lrate";
      cust_label=0;
      desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
      cust_desc=0;
      base=$.projects["LeabraFlex"].networks["Network_0"].specs["LeabraConSpec_0"]$;
      mbr=LeabraConSpec::lrate;
      data {
       user_data_=NULL;
       ctrl_type=PARAM_SET;
       is_numeric=1;
       is_single=1;
       saved_value="0.02";
       record=0;
       search=0;
       range="0:1:0.1";
       notes=;
      };
     };
    };
    mths {
     user_data_=NULL;
     name="mths";
     el_typ=ControlPanelMethod;
     el_def=0;
     group_type=GT_BUTTONS;
    };
    last_activated=0;
   };
  };
 };
 data {
  user_data_=NULL;
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   user_data_=NULL;
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["StdInputData"] {
    user_data_=NULL;
    name="StdInputData";
    desc="basic input data table";
    data {
     user_data_=NULL;
     name="data";
     el_typ=float_Data;
     el_def=0;
     String_Data @["Name"] {
      user_data_=NULL;
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [6] "checks";"mitvert";"midhoriz";"rdiag";"ldiag";"random";      };
     };
     float_Data @["Output"] {
      user_data_=NULL;
      name="Output";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [5 5 6] 1;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;1;
1;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @["Input"] {
      user_data_=NULL;
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=5;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [5 5 6] 1;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [6] 0;1;2;3;4;5;    };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
  };
  DataTable_Group @.gp["OutputData"] {
   user_data_=NULL;
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["TrialOutputData"] {
    user_data_=NULL;
    name="TrialOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      user_data_=NULL;
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["epoch"] {
      user_data_=NULL;
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["train_mode"] {
      user_data_=NULL;
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["group"] {
      user_data_=NULL;
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["trial"] {
      user_data_=NULL;
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["tick"] {
      user_data_=NULL;
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["time"] {
      user_data_=NULL;
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["trial_name"] {
      user_data_=NULL;
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["group_name"] {
      user_data_=NULL;
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["output_name"] {
      user_data_=NULL;
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @["rt_cycles"] {
      user_data_=NULL;
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     float_Data @["sse"] {
      user_data_=NULL;
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["norm_err"] {
      user_data_=NULL;
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["cos_err"] {
      user_data_=NULL;
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["ext_rew"] {
      user_data_=NULL;
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_sse"] {
      user_data_=NULL;
      name="Output_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_bin_err"] {
      user_data_=NULL;
      name="Output_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_norm_err"] {
      user_data_=NULL;
      name="Output_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_cos_err"] {
      user_data_=NULL;
      name="Output_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["Hidden_lay_net_sd"] {
      user_data_=NULL;
      name="Hidden_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_net_sd"] {
      user_data_=NULL;
      name="Output_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @["net_cos_diff"] {
      user_data_=NULL;
      name="net_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @["net_trial_cos_diff"] {
      user_data_=NULL;
      name="net_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["net_avg_act_diff"] {
      user_data_=NULL;
      name="net_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @["Hidden_cos_diff"] {
      user_data_=NULL;
      name="Hidden_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @["Output_cos_diff"] {
      user_data_=NULL;
      name="Output_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @["Hidden_trial_cos_diff"] {
      user_data_=NULL;
      name="Hidden_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @["Output_trial_cos_diff"] {
      user_data_=NULL;
      name="Output_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @["Hidden_avg_act_diff"] {
      user_data_=NULL;
      name="Hidden_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @["Output_avg_act_diff"] {
      user_data_=NULL;
      name="Output_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["EpochOutputData"] {
    user_data_=NULL;
    name="EpochOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      user_data_=NULL;
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["epoch"] {
      user_data_=NULL;
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["avg_sse"] {
      user_data_=NULL;
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["cnt_err"] {
      user_data_=NULL;
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["pct_cor"] {
      user_data_=NULL;
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["pct_err"] {
      user_data_=NULL;
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["avg_norm_err"] {
      user_data_=NULL;
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @["avg_cos_err"] {
      user_data_=NULL;
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @["avg_ext_rew"] {
      user_data_=NULL;
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @["avg_cycles"] {
      user_data_=NULL;
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @["epoch_time_tot"] {
      user_data_=NULL;
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @["epoch_time_usr"] {
      user_data_=NULL;
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_avg_sse"] {
      user_data_=NULL;
      name="Output_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_cnt_err"] {
      user_data_=NULL;
      name="Output_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_pct_cor"] {
      user_data_=NULL;
      name="Output_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_pct_err"] {
      user_data_=NULL;
      name="Output_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Output_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Output_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @["net_avg_cos_diff"] {
      user_data_=NULL;
      name="net_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @["net_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="net_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @["net_avg_avg_act_diff"] {
      user_data_=NULL;
      name="net_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @["Hidden_avg_cos_diff"] {
      user_data_=NULL;
      name="Hidden_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @["Output_avg_cos_diff"] {
      user_data_=NULL;
      name="Output_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @["Hidden_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="Hidden_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
     };
     float_Data @["Output_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="Output_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
     };
     float_Data @["Hidden_avg_avg_act_diff"] {
      user_data_=NULL;
      name="Hidden_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @["Output_avg_avg_act_diff"] {
      user_data_=NULL;
      name="Output_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @["Hidden_avg_net_sd"] {
      user_data_=NULL;
      name="Hidden_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @["Output_avg_net_sd"] {
      user_data_=NULL;
      name="Output_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @["Hidden_hog_pct"] {
      user_data_=NULL;
      name="Hidden_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @["Output_hog_pct"] {
      user_data_=NULL;
      name="Output_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @["Hidden_dead_pct"] {
      user_data_=NULL;
      name="Hidden_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @["Output_dead_pct"] {
      user_data_=NULL;
      name="Output_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @["Hidden_netmax"] {
      user_data_=NULL;
      name="Hidden_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @["Output_netmax"] {
      user_data_=NULL;
      name="Output_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @["Input_avg_act"] {
      user_data_=NULL;
      name="Input_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @["Hidden_avg_act"] {
      user_data_=NULL;
      name="Hidden_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @["Output_avg_act"] {
      user_data_=NULL;
      name="Output_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @["Hidden_netrel"] {
      user_data_=NULL;
      name="Hidden_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=13;
      matrix_col_width=10;
     };
     float_Data @["Output_netrel"] {
      user_data_=NULL;
      name="Output_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=13;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["TestTrialOutputData"] {
    user_data_=NULL;
    name="TestTrialOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      user_data_=NULL;
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["epoch"] {
      user_data_=NULL;
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["train_mode"] {
      user_data_=NULL;
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["group"] {
      user_data_=NULL;
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["trial"] {
      user_data_=NULL;
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["tick"] {
      user_data_=NULL;
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["time"] {
      user_data_=NULL;
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["trial_name"] {
      user_data_=NULL;
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["group_name"] {
      user_data_=NULL;
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["output_name"] {
      user_data_=NULL;
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @["rt_cycles"] {
      user_data_=NULL;
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     float_Data @["sse"] {
      user_data_=NULL;
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["norm_err"] {
      user_data_=NULL;
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["cos_err"] {
      user_data_=NULL;
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["ext_rew"] {
      user_data_=NULL;
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_sse"] {
      user_data_=NULL;
      name="Output_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_bin_err"] {
      user_data_=NULL;
      name="Output_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_norm_err"] {
      user_data_=NULL;
      name="Output_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_cos_err"] {
      user_data_=NULL;
      name="Output_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["Hidden_lay_net_sd"] {
      user_data_=NULL;
      name="Hidden_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_net_sd"] {
      user_data_=NULL;
      name="Output_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @["net_cos_diff"] {
      user_data_=NULL;
      name="net_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @["net_trial_cos_diff"] {
      user_data_=NULL;
      name="net_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["net_avg_act_diff"] {
      user_data_=NULL;
      name="net_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @["Hidden_cos_diff"] {
      user_data_=NULL;
      name="Hidden_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @["Output_cos_diff"] {
      user_data_=NULL;
      name="Output_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @["Hidden_trial_cos_diff"] {
      user_data_=NULL;
      name="Hidden_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @["Output_trial_cos_diff"] {
      user_data_=NULL;
      name="Output_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @["Hidden_avg_act_diff"] {
      user_data_=NULL;
      name="Hidden_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @["Output_avg_act_diff"] {
      user_data_=NULL;
      name="Output_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["TestEpochOutputData"] {
    user_data_=NULL;
    name="TestEpochOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      user_data_=NULL;
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["epoch"] {
      user_data_=NULL;
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["avg_sse"] {
      user_data_=NULL;
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["cnt_err"] {
      user_data_=NULL;
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["pct_cor"] {
      user_data_=NULL;
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["pct_err"] {
      user_data_=NULL;
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @["avg_norm_err"] {
      user_data_=NULL;
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @["avg_cos_err"] {
      user_data_=NULL;
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @["avg_ext_rew"] {
      user_data_=NULL;
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @["avg_cycles"] {
      user_data_=NULL;
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_avg_sse"] {
      user_data_=NULL;
      name="Output_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_cnt_err"] {
      user_data_=NULL;
      name="Output_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_pct_cor"] {
      user_data_=NULL;
      name="Output_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_pct_err"] {
      user_data_=NULL;
      name="Output_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Output_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @["Output_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Output_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @["net_avg_cos_diff"] {
      user_data_=NULL;
      name="net_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @["net_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="net_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @["net_avg_avg_act_diff"] {
      user_data_=NULL;
      name="net_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @["Hidden_avg_cos_diff"] {
      user_data_=NULL;
      name="Hidden_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @["Output_avg_cos_diff"] {
      user_data_=NULL;
      name="Output_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @["Hidden_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="Hidden_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
     };
     float_Data @["Output_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="Output_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
     };
     float_Data @["Hidden_avg_avg_act_diff"] {
      user_data_=NULL;
      name="Hidden_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @["Output_avg_avg_act_diff"] {
      user_data_=NULL;
      name="Output_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @["Hidden_avg_net_sd"] {
      user_data_=NULL;
      name="Hidden_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @["Output_avg_net_sd"] {
      user_data_=NULL;
      name="Output_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @["Hidden_netmax"] {
      user_data_=NULL;
      name="Hidden_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @["Output_netmax"] {
      user_data_=NULL;
      name="Output_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @["Input_avg_act"] {
      user_data_=NULL;
      name="Input_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @["Hidden_avg_act"] {
      user_data_=NULL;
      name="Hidden_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @["Output_avg_act"] {
      user_data_=NULL;
      name="Output_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] {
   user_data_=NULL;
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["ClusterRun"] {
   user_data_=NULL;
   name="ClusterRun";
   el_typ=DataTable;
   el_def=0;
   save_tables=0;
  };
 };
 programs {
  user_data_=NULL;
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @["MasterStartup"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @["DocLink"] {
     user_data_=NULL;
     name="DocLink";
     doc=.projects["LeabraFlex"].programs["MasterStartup"].doc$$;
    };
   };
   name="MasterStartup";
   short_nm="Startup";
   tags="Leabra, Startup";
   desc="run project in the background (replaces leabra_startup.css)

command line is: emergent -nowin -ni -p <project name>.proj [enviro=xxx] [tag=xxx]";
   version {
    user_data_=NULL;
    major=0;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=STARTUP_RUN;
   stop_step_cond {
    user_data_=NULL;
    expr=;
   };
   objs {
    user_data_=NULL;
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    user_data_=NULL;
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    user_data_=NULL;
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["network"] {
     user_data_=NULL;
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.projects["LeabraFlex"].networks["Network_0"]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
   };
   vars {
    user_data_=NULL;
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["batch_prog"] {
     user_data_=NULL;
     name="batch_prog";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="set this to point to your batch process";
     init_from=NULL;
    };
    ProgVar @["tag"] {
     user_data_=NULL;
     name="tag";
     var_type=T_String;
     string_val="_BasicTrain_BasicTrain_basic_train";
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["log_dir"] {
     user_data_=NULL;
     name="log_dir";
     var_type=T_String;
     string_val=;
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="log file directory";
     init_from=NULL;
    };
    ProgVar @["log_file_nm"] {
     user_data_=NULL;
     name="log_file_nm";
     var_type=T_String;
     string_val="/Users/oreilly/emergent/proj_templates/LeabraFlex_BasicTrain_BasicTrain_basic_train.args";
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @["EpochOutputData"] {
     user_data_=NULL;
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["batch_str"] {
     user_data_=NULL;
     name="batch_str";
     var_type=T_String;
     string_val="00";
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch number as a string (leading zeros)";
     init_from=NULL;
    };
    ProgVar @["batch_start"] {
     user_data_=NULL;
     name="batch_start";
     var_type=T_Int;
     int_val=0;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch starting number";
     init_from=NULL;
    };
    ProgVar @["startup_prog"] {
     user_data_=NULL;
     name="startup_prog";
     var_type=T_String;
     string_val="BasicStartup";
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="additional configuration-specific startup code to run, in the StartupProgs -- any global startup stuff should still be in MasterStartup -- this should only be for startup that is specific to a particular configuration (rare)";
     init_from=NULL;
    };
    ProgVar @["MyClusterRun"] {
     user_data_=NULL;
     name="MyClusterRun";
     var_type=T_Object;
     object_type=ClusterRun;
     object_val=.projects["LeabraFlex"].ctrl_panels["ClusterRun"]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["run_params"] {
     user_data_=NULL;
     name="run_params";
     var_type=T_Object;
     object_type=ParamSet;
     object_val=.projects["LeabraFlex"].param_sets.gp["RunParams"]["RunMaster"]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
     reference=0;
     desc="select parameters for controlling how network is run";
     init_from=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"]$;
    };
    ProgVar @["misc_params"] {
     user_data_=NULL;
     name="misc_params";
     var_type=T_Object;
     object_type=ParamSet;
     object_val=.projects["LeabraFlex"].param_sets.gp["MiscParams"]["MiscMaster"]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
     reference=0;
     desc="select other parameters, typically network spec params -- independent of run params";
     init_from=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"]$;
    };
   };
   functions {
    user_data_=NULL;
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    user_data_=NULL;
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    user_data_=NULL;
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    RegisterArgs @[0] {
     user_data_=NULL;
     desc="This is KEY!!! actually processes all args, including those from ProgVarFmArg guys below";
     flags=CAN_REVERT_TO_CODE;
     code_string="Register Args";
    };
    PrintExpr @[1] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Loaded project: \" << .projects[0].file_name";
     expr {
      user_data_=NULL;
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
     debug=0;
    };
    Comment @[2] {
     user_data_=NULL;
     desc="= Std variables in startup program itself =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Std variables in startup program itself =";
    };
    AssignExpr @[3] {
     user_data_=NULL;
     desc="start with empty tag in all cases";
     flags=CAN_REVERT_TO_CODE;
     code_string="tag = \"\"";
     result_var=.projects["LeabraFlex"].programs["MasterStartup"].vars["tag"]$$;
     expr {
      user_data_=NULL;
      expr="\"\"";
     };
    };
    ProgVarFmArg @[4] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:tag in Program:MasterStartup from Arg:tag";
     prog=.projects["LeabraFlex"].programs["MasterStartup"]$$;
     var_name="tag";
     arg_name="tag";
    };
    ProgVarFmArg @[5] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:log_dir in Program:MasterStartup from Arg:log_dir";
     prog=$.projects["LeabraFlex"].programs["MasterStartup"]$;
     var_name="log_dir";
     arg_name="log_dir";
    };
    Comment @[6] {
     user_data_=NULL;
     desc="add our special args from command line";
     flags=CAN_REVERT_TO_CODE;
     code_string="// add our special args from command line";
    };
    ControlPanelsFmArgs @[7] {
     user_data_=NULL;
     desc="sets any arg listed in the control panel -- recursive for linked control panels";
     flags=CAN_REVERT_TO_CODE;
     code_string="CtrlPanel Fm Args: var = MyClusterRun ";
     ctrl_panel_var=.projects["LeabraFlex"].programs["MasterStartup"].vars["MyClusterRun"]$$;
    };
    MethodCall @[8] {
     user_data_=NULL;
     desc="set saved values first, before processing args";
     flags=CAN_REVERT_TO_CODE;
     code_string="run_params.CopySavedToActive()";
     result_var=NULL;
     obj=.projects["LeabraFlex"].programs["MasterStartup"].vars["run_params"]$$;
     method=ParamSet::Activate;
     meth_args {
      user_data_=NULL;
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="info_msg";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="true";
       };
      };
     };
     meth_sig="void Activate(bool info_msg = false)";
     meth_desc=" copy the saved_value values to be active (live) values on the objects";
    };
    MethodCall @[9] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="run_params.CopySavedToActive()";
     result_var=NULL;
     obj=.projects["LeabraFlex"].programs["MasterStartup"].vars["misc_params"]$$;
     method=ParamSet::Activate;
     meth_args {
      user_data_=NULL;
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="info_msg";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="true";
       };
      };
     };
     meth_sig="void Activate(bool info_msg = false)";
     meth_desc=" copy the saved_value values to be active (live) values on the objects";
    };
    ControlPanelsFmArgs @[10] {
     user_data_=NULL;
     desc="sets any arg listed in the control panel";
     flags=CAN_REVERT_TO_CODE;
     code_string="CtrlPanel Fm Args: var = MyClusterRun ";
     ctrl_panel_var=$.projects["LeabraFlex"].programs["MasterStartup"].vars["run_params"]$;
    };
    ControlPanelsFmArgs @[11] {
     user_data_=NULL;
     desc="sets any arg listed in the control panel";
     flags=CAN_REVERT_TO_CODE;
     code_string="CtrlPanel Fm Args: var = MyClusterRun ";
     ctrl_panel_var=$.projects["LeabraFlex"].programs["MasterStartup"].vars["misc_params"]$;
    };
    AssignExpr @[12] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="tag = \"_\" +  config_id + tag";
     result_var=$.projects["LeabraFlex"].programs["MasterStartup"].vars["tag"]$;
     expr {
      user_data_=NULL;
      expr="\"_\" +  run_params->name + \"_\" + misc_params->name + tag";
     };
    };
    Comment @[13] {
     user_data_=NULL;
     desc="Set log files";
     flags=CAN_REVERT_TO_CODE;
     code_string="// Set log files";
    };
    If @[14] {
     user_data_=NULL;
     desc="set tag for starting batch (new code in v 8.0)";
     flags=CAN_REVERT_TO_CODE;
     code_string="if (taMisc::CheckArgByName(\"batch_start\"))";
     cond {
      user_data_=NULL;
      expr="taMisc::CheckArgByName(\"batch_start\")";
     };
     true_code {
      user_data_=NULL;
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      ProgVarFmArg @[0] {
       user_data_=NULL;
       desc="read in the arg to us too, so we can set file names based on it";
       flags=CAN_REVERT_TO_CODE;
       code_string="Set Var:batch_start in Program:MasterStartup from Arg:batch_start";
       prog=$.projects["LeabraFlex"].programs["MasterStartup"]$;
       var_name="batch_start";
       arg_name="batch_start";
      };
      MiscCall @[1] {
       user_data_=NULL;
       desc="string version with leading zeros";
       flags=CAN_REVERT_TO_CODE;
       code_string="batch_str = taMisc::LeadingZeros(batch_start, 2)";
       result_var=.projects["LeabraFlex"].programs["MasterStartup"].vars["batch_str"]$$;
       object_type=taMisc;
       method=taMisc::LeadingZeros;
       meth_args {
	user_data_=NULL;
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=int;
	 type="int";
	 name="num";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="batch_start";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=int;
	 type="int";
	 name="len";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="2";
	 };
	};
       };
      };
      VarIncr @[2] {
       user_data_=NULL;
       desc="add to tag for setting log file names";
       flags=CAN_REVERT_TO_CODE;
       code_string="tag += \".\" + batch_str";
       var=$.projects["LeabraFlex"].programs["MasterStartup"].vars["tag"]$;
       expr {
	user_data_=NULL;
	expr="\".\" + batch_str";
       };
      };
      If @[3] {
       user_data_=NULL;
       desc="save startup args: only for first job in parallel batch mode, or this should be 0 otherwise in any case";
       flags=CAN_REVERT_TO_CODE;
       code_string="if (batch_start == 0)";
       cond {
	user_data_=NULL;
	expr="batch_start == 0";
       };
       true_code {
	user_data_=NULL;
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 user_data_=NULL;
	 desc="save args to file: last arg is to include dmem proc number";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag.before(\".00\",-1), log_dir, false)";
	 result_var=.projects["LeabraFlex"].programs["MasterStartup"].vars["log_file_nm"]$$;
	 obj=.projects["LeabraFlex"].programs["MasterStartup"].vars["EpochOutputData"]$$;
	 method=taBase::GetFileNameFmProject;
	 meth_args {
	  user_data_=NULL;
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="ext";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="\".args\"";
	   };
	  };
	  ProgArg @[1] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="tag";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="tag.before(\".00\",-1)";
	   };
	  };
	  ProgArg @[2] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="subdir";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="log_dir";
	   };
	  };
	  ProgArg @[3] {
	   user_data_=NULL;
	   arg_type=bool;
	   type="bool";
	   name="dmem_proc_no";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="false";
	   };
	  };
	 };
	 meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
	 meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
	};
	MiscCall @[1] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="taMisc::FullArgStringToFile(log_file_nm)";
	 result_var=NULL;
	 object_type=taMisc;
	 method=taMisc::FullArgStringToFile;
	 meth_args {
	  user_data_=NULL;
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="fname";
	   required=1;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="log_file_nm";
	   };
	  };
	 };
	};
       };
      };
     };
    };
    Else @[15] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     cond {
      user_data_=NULL;
      expr=;
     };
     true_code {
      user_data_=NULL;
      name="else_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       user_data_=NULL;
       desc="save args to file: last arg is to include dmem proc number";
       flags=CAN_REVERT_TO_CODE;
       code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag, log_dir, false)";
       result_var=$.projects["LeabraFlex"].programs["MasterStartup"].vars["log_file_nm"]$;
       obj=$.projects["LeabraFlex"].programs["MasterStartup"].vars["EpochOutputData"]$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	user_data_=NULL;
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="\".args\"";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="tag";
	 };
	};
	ProgArg @[2] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="false";
	 };
	};
       };
       meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
       meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
      };
      MiscCall @[1] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taMisc::FullArgStringToFile(log_file_nm)";
       result_var=NULL;
       object_type=taMisc;
       method=taMisc::FullArgStringToFile;
       meth_args {
	user_data_=NULL;
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="log_file_nm";
	 };
	};
       };
      };
     };
    };
    OtherProgramVar @[16] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Vars To:  program=SaveWeights set=to  var_1=tag  var_2=?  var_3=?  var_4=? ";
     other_prog=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SaveWeights"]$$;
     set_other=1;
     var_1=$.projects["LeabraFlex"].programs["MasterStartup"].vars["tag"]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    Comment @[17] {
     user_data_=NULL;
     desc="= Call sub-startup programs =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Call sub-startup programs =";
    };
    ProgramCallVar @[18] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Call Fm: prog_group=StartupProgs prog_name_var=startup_prog (network)";
     prog_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="network";
       };
      };
     };
     prog_group=.projects["LeabraFlex"].programs.gp["StartupProgs"]$$;
     prog_name_var=$.projects["LeabraFlex"].programs["MasterStartup"].vars["startup_prog"]$;
    };
    PrintExpr @[19] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Running: \" << batch_prog.name";
     expr {
      user_data_=NULL;
      expr="\"Running: \" << batch_prog.name";
     };
     debug=0;
    };
    ProgramCall @[20] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="MasterBatch(network)";
     prog_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="network";
       };
      };
     };
     target=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"]$;
     targ_ld_init="*MasterBatch*";
    };
   };
   step_prog=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"]$$;
   step_n=1;
   doc {
    user_data_=NULL;
    name="doc";
    desc=;
    web_doc=1;
    wiki="emergent";
    url="Startup_program";
    full_url="https://grey.colorado.edu/emergent/index.php/Startup_program";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program_Group @.gp["StartupProgs"] {
   user_data_=NULL;
   name="StartupProgs";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   debug_mode=0;
   Program @["BasicStartup"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["StartupProgs"]["BasicStartup"].doc$$;
     };
    };
    name="BasicStartup";
    short_nm="BsStrt";
    tags="Leabra, Startup";
    desc="startup args specifically for fixation training parameters";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["tag"] {
      user_data_=NULL;
      name="tag";
      var_type=T_String;
      string_val="_BasicTrain_BasicTrain_basic_train";
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL;
      reference=0;
      desc=;
      init_from=$.projects["LeabraFlex"].programs["MasterStartup"]$;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     Comment @[0] {
      user_data_=NULL;
      desc="this can be used for misc startup functions for non-interactive (cluster) jobs";
      flags=CAN_REVERT_TO_CODE;
      code_string="// this can be used for misc startup functions for non-interactive (cluster) jobs";
     };
     Comment @[1] {
      user_data_=NULL;
      desc="note that saving log files should happen in SaveLogFiles program, after network is configured";
      flags=CAN_REVERT_TO_CODE;
      code_string="// note that saving log files should happen in SaveLogFiles program, after network is configured";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp["ConfigProgs"] {
   user_data_=NULL;
   name="ConfigProgs";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   debug_mode=0;
   Program @["MasterBatch"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"].doc$$;
     };
    };
    name="MasterBatch";
    short_nm="MstBtc";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["batch"] {
      user_data_=NULL;
      name="batch";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @["batch_start"] {
      user_data_=NULL;
      name="batch_start";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch number to start on";
      init_from=NULL;
     };
     ProgVar @["n_batches"] {
      user_data_=NULL;
      name="n_batches";
      var_type=T_Int;
      int_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of batches to run";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initializes local batch counter and batch field on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: batch";
      network_var=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"].args["network"]$$;
      local_ctr_var=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"].vars["batch"]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["i"] {
	user_data_=NULL;
	name="i";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="start at the start";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch = batch_start";
      result_var=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"].vars["batch"]$;
      expr {
       user_data_=NULL;
       expr="batch_start";
      };
     };
     MemberAssign @[2] {
      user_data_=NULL;
      desc="update network";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.batch = batch";
      obj=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"].args["network"]$;
      path="batch";
      expr {
       user_data_=NULL;
       expr="batch";
      };
      update_after=0;
     };
     ForLoop @[3] {
      user_data_=NULL;
      desc="main loop over training runs";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (i=0; i<n_batches; i++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the training program -- sets the network and input_data args";
	flags=CAN_REVERT_TO_CODE;
	code_string="MasterTrain(network)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr="network";
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"]$;
	targ_ld_init="*MasterTrain*";
       };
       NetCounterIncr @[1] {
	user_data_=NULL;
	desc="increment the local batch counter and copy to network";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: batch";
	network_var=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"].args["network"]$;
	local_ctr_var=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterBatch"].vars["batch"]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      init {
       user_data_=NULL;
       expr="i=0";
      };
      test {
       user_data_=NULL;
       expr="i<n_batches";
      };
      iter {
       user_data_=NULL;
       expr="i++";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraBatch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraBatch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["MasterTrain"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].doc$$;
     };
    };
    name="MasterTrain";
    short_nm="MstTrn";
    tags=;
    desc="modular event-based train program";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["run_params"] {
      user_data_=NULL;
      name="run_params";
      var_type=T_Object;
      object_type=ParamSet;
      object_val=NULL;
      object_scope=.projects["LeabraFlex"].param_sets.gp["RunParams"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="select parameters for controlling how network is run";
      init_from=NULL;
     };
     ProgVar @["misc_params"] {
      user_data_=NULL;
      name="misc_params";
      var_type=T_Object;
      object_type=ParamSet;
      object_val=$.projects["LeabraFlex"].param_sets.gp["MiscParams"]["MiscMaster"]$;
      object_scope=.projects["LeabraFlex"].param_sets.gp["MiscParams"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="select other parameters, typically network spec params -- independent of run params";
      init_from=NULL;
     };
     ProgVar @["run_prog"] {
      user_data_=NULL;
      name="run_prog";
      var_type=T_String;
      string_val="BasicRun";
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="name of run program to run -- must exist in the RunProgs group";
      init_from=NULL;
     };
     ProgVar @["init_prog"] {
      user_data_=NULL;
      name="init_prog";
      var_type=T_String;
      string_val="BasicInit";
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="name of init program -- must exist in the InitProgs group";
      init_from=NULL;
     };
     ProgVar @["stop_train"] {
      user_data_=NULL;
      name="stop_train";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set this var from any other program to stop training";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="stop_train = false";
      result_var=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["stop_train"]$$;
      expr {
       user_data_=NULL;
       expr="false";
      };
     };
     WtInitPrompt @[1] {
      user_data_=NULL;
      desc="don't initialize weights without checking";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gui && \"Do you want to Initialize Network Weights\")";
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="need to have built network by now in any case, so do it here to make double sure -- prevents errs when loading project with startup program";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	result_var=NULL;
	obj=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].args["network"]$$;
	method=Network::Build;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
       MethodCall @[1] {
	user_data_=NULL;
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 user_data_=NULL;
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="stop_train = false";
      result_var=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["stop_train"]$;
      expr {
       user_data_=NULL;
       expr="false";
      };
     };
     If @[1] {
      user_data_=NULL;
      desc="only if running interactively -- otherwise set in MasterStartup!";
      flags=CAN_REVERT_TO_CODE;
      code_string="if(taMisc::interactive)";
      cond {
       user_data_=NULL;
       expr="taMisc::interactive";
      };
      true_code {
       user_data_=NULL;
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="activate config values";
	flags=CAN_REVERT_TO_CODE;
	code_string="run_params.CopySavedToActive()";
	result_var=NULL;
	obj=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["run_params"]$;
	method=ParamSet::Activate;
	meth_args {
	 user_data_=NULL;
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=bool;
	  type="bool";
	  name="info_msg";
	  required=0;
	  def_val="false";
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="true";
	  };
	 };
	};
	meth_sig="void Activate(bool info_msg = false)";
	meth_desc=" copy the saved_value values to be active (live) values on the objects";
       };
       MethodCall @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="run_params.CopySavedToActive()";
	result_var=NULL;
	obj=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["misc_params"]$;
	method=ParamSet::Activate;
	meth_args {
	 user_data_=NULL;
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=bool;
	  type="bool";
	  name="info_msg";
	  required=0;
	  def_val="false";
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="true";
	  };
	 };
	};
	meth_sig="void Activate(bool info_msg = false)";
	meth_desc=" copy the saved_value values to be active (live) values on the objects";
       };
      };
     };
     ProgramCallVar @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Call Fm: prog_group=InitProgs prog_name_var=init_prog (network, config_id)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      prog_group=.projects["LeabraFlex"].programs.gp["ConfigProgs"].gp["InitProgs"]$$;
      prog_name_var=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"].vars["init_prog"]$;
     };
     WhileLoop @[3] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="while (!stop_train)";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="MasterRun(network, config_id, run_prog)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr="network";
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=taString;
	  type="String";
	  name="run_prog";
	  required=1;
	  def_val=;
	  prev_expr="config_id";
	  expr {
	   user_data_=NULL;
	   expr="run_prog";
	  };
	 };
	};
	target=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterRun"]$$;
	targ_ld_init="*MasterRun*";
       };
      };
      test {
       user_data_=NULL;
       expr="!stop_train";
      };
     };
    };
    step_prog=.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"]$$;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrain";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrain";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["MasterRun"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterRun"].doc$$;
     };
    };
    name="MasterRun";
    short_nm="MstrRn";
    tags=;
    desc="modular run code -- forks off to RunProgs based on run_prog -- only neccessary to provide common step point for all run progs";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr="StopStepTest()";
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @["StopStepGrain"] {
      user_data_=NULL;
      name="StopStepGrain";
      desc=;
      enums {
       user_data_=NULL;
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @["TRIAL"] {
	user_data_=NULL;
	name="TRIAL";
	value=0;
	desc="stop / step after each time through the master run program, which generally corresponds to a trial";
       };
       DynEnumItem @["EPOCH"] {
	user_data_=NULL;
	name="EPOCH";
	value=1;
	desc="stop / step after an entire epoch of processing (when network.trial is reset back to 0)";
       };
       DynEnumItem @["ERROR"] {
	user_data_=NULL;
	name="ERROR";
	value=2;
	desc="stop /step after there is an error (sse > 0)";
       };
       DynEnumItem @["CORRECT"] {
	user_data_=NULL;
	name="CORRECT";
	value=3;
	desc="stop /step after there is a correct trial (sse == 0)";
       };
      };
      bits=0;
     };
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @["run_prog"] {
      user_data_=NULL;
      name="run_prog";
      var_type=T_String;
      string_val="BasicRun";
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="name of run program";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["stop_step_grain"] {
      user_data_=NULL;
      name="stop_step_grain";
      var_type=T_DynEnum;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterRun"].types["StopStepGrain"]$$;
       value=1;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="select grain size for Step function on MasterRun program -- can extend this functionality -- very useful!";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["StopStepTest"] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="StopStepTest() returns: bool";
      name="StopStepTest";
      return_type=T_Bool;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name="ProgVar_List_1";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       user_data_=NULL;
       name="ProgEl_List_248";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 user_data_=NULL;
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       Switch @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="switch(stop_step_grain)";
	switch_var=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterRun"].vars["stop_step_grain"]$$;
	cases {
	 user_data_=NULL;
	 name="cases";
	 el_typ=CaseBlock;
	 el_def=0;
	 CaseBlock @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: TRIAL";
	  prog_code {
	   user_data_=NULL;
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   ReturnExpr @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="return true";
	    expr {
	     user_data_=NULL;
	     expr="true";
	    };
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="TRIAL";
	  };
	  is_default=0;
	 };
	 CaseBlock @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: EPOCH";
	  prog_code {
	   user_data_=NULL;
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   ReturnExpr @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="return (network->trial == 0)";
	    expr {
	     user_data_=NULL;
	     expr="(network->trial == 0)";
	    };
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="EPOCH";
	  };
	  is_default=0;
	 };
	 CaseBlock @[2] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: ERROR";
	  prog_code {
	   user_data_=NULL;
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   ReturnExpr @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="return (network->sse > 0.0f)";
	    expr {
	     user_data_=NULL;
	     expr="(network->sse > 0.0f)";
	    };
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="ERROR";
	  };
	  is_default=0;
	 };
	 CaseBlock @[3] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: CORRECT";
	  prog_code {
	   user_data_=NULL;
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   ReturnExpr @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="return (network->sse == 0.0f)";
	    expr {
	     user_data_=NULL;
	     expr="(network->sse == 0.0f)";
	    };
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="CORRECT";
	  };
	  is_default=0;
	 };
	};
       };
      };
     };
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     ProgramCallVar @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Call Fm: prog_group=RunProgs prog_name_var=run_prog (network, config_id)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      prog_group=.projects["LeabraFlex"].programs.gp["ConfigProgs"].gp["RunProgs"]$$;
      prog_name_var=.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterRun"].args["run_prog"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraFlex";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraFlex";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program_Group @.gp["InitProgs"] {
    user_data_=NULL;
    name="InitProgs";
    el_typ=Program;
    el_def=0;
    tags=;
    desc="contains specific Init programs called at start of running by RobotInit";
    debug_mode=0;
    Program @["BasicInit"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name=;
      el_typ=UserData_DocLink;
      el_def=0;
      UserData_DocLink @["DocLink"] {
       user_data_=NULL;
       name="DocLink";
       doc=.projects["LeabraFlex"].programs.gp["ConfigProgs"].gp["InitProgs"]["BasicInit"].doc$$;
      };
     };
     name="BasicInit";
     short_nm="BaseInit";
     tags=;
     desc="initialization for basic training";
     version {
      user_data_=NULL;
      major=0;
      minor=0;
      step=0;
     };
     author="Randall C. O'Reilly";
     email="emergent-users@grey.colorado.edu";
     flags=NO_STOP_STEP;
     stop_step_cond {
      user_data_=NULL;
      expr=;
     };
     objs {
      user_data_=NULL;
      name="objs";
      el_typ=taNBase;
      el_def=0;
     };
     types {
      user_data_=NULL;
      name="types";
      el_typ=DynEnumType;
      el_def=0;
     };
     args {
      user_data_=NULL;
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["network"] {
       user_data_=NULL;
       name="network";
       var_type=T_Object;
       object_type=LeabraNetwork;
       object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
       reference=0;
       desc="network to operate on -- updates batch counter on network and passes it to train program";
       init_from=NULL;
      };
     };
     vars {
      user_data_=NULL;
      name="vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["layer_group_lesion_list"] {
       user_data_=NULL;
       name="layer_group_lesion_list";
       var_type=T_String;
       string_val=;
       object_scope=NULL;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="space-separated list of layer groups to lesion for this run -- all layers unlesioned at the start";
       init_from=NULL;
      };
      ProgVar @["layer_lesion_list"] {
       user_data_=NULL;
       name="layer_lesion_list";
       var_type=T_String;
       string_val=;
       object_scope=NULL;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="space-separated list of layers outside of groups to lesion for this run";
       init_from=NULL;
      };
      ProgVar @["prjn_lesion_list"] {
       user_data_=NULL;
       name="prjn_lesion_list";
       var_type=T_String;
       string_val=;
       object_scope=NULL;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="space-separated list of projections to lesion for this run (recvlayer.Fm_sendlayer) -- prjns are NOT all unlesioned at the start, so other cases that need these on should list them in their unlesion list";
       init_from=NULL;
      };
      ProgVar @["prjn_unlesion_list"] {
       user_data_=NULL;
       name="prjn_unlesion_list";
       var_type=T_String;
       string_val=;
       object_scope=NULL;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="space-separated list of projections to UN-lesion for this run (recvlayer.Fm_sendlayer) -- prjns are NOT all unlesioned at the start, so other cases that don't need these on should list them in their lesion list";
       init_from=NULL;
      };
      ProgVar @["test_run"] {
       user_data_=NULL;
       name="test_run";
       var_type=T_Bool;
       bool_val=0;
       object_scope=NULL;
       flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
       reference=0;
       desc="is this a testing-only run, no training?";
       init_from=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"]$$;
      };
     };
     functions {
      user_data_=NULL;
      name="functions";
      el_typ=Function;
      el_def=0;
     };
     init_code {
      user_data_=NULL;
      name="init_code";
      el_typ=ProgCode;
      el_def=0;
     };
     prog_code {
      user_data_=NULL;
      name="prog_code";
      el_typ=ProgCode;
      el_def=0;
      ProgramCall @[0] {
       user_data_=NULL;
       desc="get rid of all non-essential layers";
       flags=CAN_REVERT_TO_CODE;
       code_string="ConfigNetwork(network, layer_group_lesion_list, layer_lesion_list, prjn_lesion_list, prjn_unlesion_list)";
       prog_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=LeabraNetwork;
	 type="LeabraNetwork*";
	 name="network";
	 required=1;
	 def_val=;
	 prev_expr="network";
	 expr {
	  user_data_=NULL;
	  expr="network";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=taString;
	 type="String";
	 name="lesion_layer_groups";
	 required=1;
	 def_val=;
	 prev_expr="layer_group_lesion_list";
	 expr {
	  user_data_=NULL;
	  expr="layer_group_lesion_list";
	 };
	};
	ProgArg @[2] {
	 user_data_=NULL;
	 arg_type=taString;
	 type="String";
	 name="lesion_layers";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="layer_lesion_list";
	 };
	};
	ProgArg @[3] {
	 user_data_=NULL;
	 arg_type=taString;
	 type="String";
	 name="lesion_prjns";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="prjn_lesion_list";
	 };
	};
	ProgArg @[4] {
	 user_data_=NULL;
	 arg_type=taString;
	 type="String";
	 name="un_lesion_prjns";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="prjn_unlesion_list";
	 };
	};
       };
       target=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"]$$;
       targ_ld_init="*ConfigNetwork*";
      };
      ProgramCall @[1] {
       user_data_=NULL;
       desc="standard init of training";
       flags=CAN_REVERT_TO_CODE;
       code_string="TrainStart(network)";
       prog_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=LeabraNetwork;
	 type="LeabraNetwork*";
	 name="network";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="network";
	 };
	};
       };
       target=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"]$;
       targ_ld_init="*TrainStart*";
      };
      If @[2] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (config_id.contains(\"_test\"))";
       cond {
	user_data_=NULL;
	expr="test_run";
       };
       true_code {
	user_data_=NULL;
	name=;
	el_typ=ProgCode;
	el_def=0;
	MemberAssign @[0] {
	 user_data_=NULL;
	 desc="set network to training mode";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="network.train_mode = LeabraNetwork::TEST";
	 obj=.projects["LeabraFlex"].programs.gp["ConfigProgs"].gp["InitProgs"]["BasicInit"].args["network"]$$;
	 path="train_mode";
	 expr {
	  user_data_=NULL;
	  expr="LeabraNetwork::TEST";
	 };
	 update_after=0;
	};
       };
      };
      Else @[3] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="else";
       cond {
	user_data_=NULL;
	expr=;
       };
       true_code {
	user_data_=NULL;
	name=;
	el_typ=ProgCode;
	el_def=0;
	MemberAssign @[0] {
	 user_data_=NULL;
	 desc="set network to training mode";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="network.train_mode = LeabraNetwork::TRAIN";
	 obj=$.projects["LeabraFlex"].programs.gp["ConfigProgs"].gp["InitProgs"]["BasicInit"].args["network"]$;
	 path="train_mode";
	 expr {
	  user_data_=NULL;
	  expr="LeabraNetwork::TRAIN";
	 };
	 update_after=0;
	};
       };
      };
     };
     step_prog=NULL;
     step_n=1;
     doc {
      user_data_=NULL;
      name="doc";
      desc=;
      web_doc=0;
      wiki=;
      url="local";
      full_url="local";
      text_size=1;
      text=;
      html_text=;
     };
    };
   };
   Program_Group @.gp["RunProgs"] {
    user_data_=NULL;
    name="RunProgs";
    el_typ=Program;
    el_def=0;
    tags="contains individual Run programs for specific environments -- called by RobotRun";
    desc=;
    debug_mode=0;
    Program @["BasicRun"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name=;
      el_typ=UserData_DocLink;
      el_def=0;
      UserData_DocLink @["DocLink"] {
       user_data_=NULL;
       name="DocLink";
       doc=.projects["LeabraFlex"].programs.gp["ConfigProgs"].gp["RunProgs"]["BasicRun"].doc$$;
      };
     };
     name="BasicRun";
     short_nm="BaseRun";
     tags=;
     desc="run basic training -- does ";
     version {
      user_data_=NULL;
      major=0;
      minor=0;
      step=0;
     };
     author="Randall C. O'Reilly";
     email="emergent-users@grey.colorado.edu";
     flags=NO_STOP_STEP;
     stop_step_cond {
      user_data_=NULL;
      expr=;
     };
     objs {
      user_data_=NULL;
      name="objs";
      el_typ=taNBase;
      el_def=0;
     };
     types {
      user_data_=NULL;
      name="types";
      el_typ=DynEnumType;
      el_def=0;
     };
     args {
      user_data_=NULL;
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["network"] {
       user_data_=NULL;
       name="network";
       var_type=T_Object;
       object_type=LeabraNetwork;
       object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
       reference=0;
       desc="network to operate on -- updates batch counter on network and passes it to train program";
       init_from=NULL;
      };
     };
     vars {
      user_data_=NULL;
      name="vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["train_epochs"] {
       user_data_=NULL;
       name="train_epochs";
       var_type=T_Int;
       int_val=50;
       object_scope=NULL;
       flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
       reference=0;
       desc=;
       init_from=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"]$;
      };
      ProgVar @["trials_per_epoch_eff"] {
       user_data_=NULL;
       name="trials_per_epoch_eff";
       var_type=T_Int;
       int_val=50;
       object_scope=NULL;
       flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
       reference=0;
       desc=;
       init_from=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"]$;
      };
      ProgVar @["test_interval"] {
       user_data_=NULL;
       name="test_interval";
       var_type=T_Int;
       int_val=1;
       object_scope=NULL;
       flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
       reference=0;
       desc=;
       init_from=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"]$;
      };
      ProgVar @["update_net_view"] {
       user_data_=NULL;
       name="update_net_view";
       var_type=T_Bool;
       bool_val=1;
       object_scope=NULL;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="if true, will update network views at end of settling";
       init_from=NULL;
      };
      ProgVar @["StdInputData"] {
       user_data_=NULL;
       name="StdInputData";
       var_type=T_Object;
       object_type=DataTable;
       object_val=.projects["LeabraFlex"].data.gp["InputData"]["StdInputData"]$$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     functions {
      user_data_=NULL;
      name="functions";
      el_typ=Function;
      el_def=0;
     };
     init_code {
      user_data_=NULL;
      name="init_code";
      el_typ=ProgCode;
      el_def=0;
     };
     prog_code {
      user_data_=NULL;
      name="prog_code";
      el_typ=ProgCode;
      el_def=0;
      Comment @[0] {
       user_data_=NULL;
       desc="== Execute One Trial of Basic Training ==";
       flags=CAN_REVERT_TO_CODE;
       code_string="// == Execute One Trial of Basic Training ==";
      };
      MemberAssign @[1] {
       user_data_=NULL;
       desc="always in tick 0 for this -- only one step of processing";
       flags=CAN_REVERT_TO_CODE;
       code_string="network.tick = 0";
       obj=.projects["LeabraFlex"].programs.gp["ConfigProgs"].gp["RunProgs"]["BasicRun"].args["network"]$$;
       path="tick";
       expr {
	user_data_=NULL;
	expr="0";
       };
       update_after=0;
      };
      ProgramCall @[2] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="BasicTrain(network, StdInputData, update_net_view)";
       prog_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=LeabraNetwork;
	 type="LeabraNetwork*";
	 name="network";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="network";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=DataTable;
	 type="DataTable*";
	 name="input_data";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="StdInputData";
	 };
	};
	ProgArg @[2] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="update_net_view";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="update_net_view";
	 };
	};
       };
       target=.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"]$$;
       targ_ld_init="*BasicTrain*";
      };
      Comment @[3] {
       user_data_=NULL;
       desc="== Done With One Trial ==";
       flags=CAN_REVERT_TO_CODE;
       code_string="// == Done With One Trial ==";
      };
      MemberAssign @[4] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="network.trial = network.trial + 1";
       obj=$.projects["LeabraFlex"].programs.gp["ConfigProgs"].gp["RunProgs"]["BasicRun"].args["network"]$;
       path="trial";
       expr {
	user_data_=NULL;
	expr="network.trial + 1";
       };
       update_after=0;
      };
      If @[5] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (network.trial >= trials_per_epoch)";
       cond {
	user_data_=NULL;
	expr="network.trial >= trials_per_epoch_eff";
       };
       true_code {
	user_data_=NULL;
	name=;
	el_typ=ProgCode;
	el_def=0;
	ProgramCall @[0] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="EpochEnd(network)";
	 prog_args {
	  user_data_=NULL;
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=LeabraNetwork;
	   type="LeabraNetwork*";
	   name="network";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="network";
	   };
	  };
	 };
	 target=.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochEnd"]$$;
	 targ_ld_init="*EpochEnd*";
	};
	If @[1] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="if(test_interval > 0 && network.epoch % test_interval == 0)";
	 cond {
	  user_data_=NULL;
	  expr="test_interval > 0 && network.epoch % test_interval == 0";
	 };
	 true_code {
	  user_data_=NULL;
	  name="true_code";
	  el_typ=ProgCode;
	  el_def=0;
	  ProgramCall @[0] {
	   user_data_=NULL;
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="TestAll()";
	   prog_args {
	    user_data_=NULL;
	    name="prog_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     user_data_=NULL;
	     arg_type=LeabraNetwork;
	     type="LeabraNetwork*";
	     name="network";
	     required=1;
	     def_val=;
	     prev_expr="network";
	     expr {
	      user_data_=NULL;
	      expr="network";
	     };
	    };
	   };
	   target=.projects["LeabraFlex"].programs.gp["TaskProgs"]["TestAll"]$$;
	   targ_ld_init="*TestAll*";
	  };
	 };
	};
	MemberAssign @[2] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="network.epoch = network.epoch + 1";
	 obj=$.projects["LeabraFlex"].programs.gp["ConfigProgs"].gp["RunProgs"]["BasicRun"].args["network"]$;
	 path="epoch";
	 expr {
	  user_data_=NULL;
	  expr="network.epoch + 1";
	 };
	 update_after=0;
	};
	If @[3] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="if (network.epoch >= train_epochs)";
	 cond {
	  user_data_=NULL;
	  expr="network.epoch >= train_epochs";
	 };
	 true_code {
	  user_data_=NULL;
	  name=;
	  el_typ=ProgCode;
	  el_def=0;
	  ProgramCall @[0] {
	   user_data_=NULL;
	   desc="calls stop_train and does final training stuff";
	   flags=CAN_REVERT_TO_CODE;
	   code_string="TrainEnd(network)";
	   prog_args {
	    user_data_=NULL;
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     user_data_=NULL;
	     arg_type=LeabraNetwork;
	     type="LeabraNetwork*";
	     name="network";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      user_data_=NULL;
	      expr="network";
	     };
	    };
	   };
	   target=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainEnd"]$$;
	   targ_ld_init="*TrainEnd*";
	  };
	  ReturnExpr @[1] {
	   user_data_=NULL;
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="return ";
	   expr {
	    user_data_=NULL;
	    expr=;
	   };
	  };
	 };
	};
	ProgramCall @[4] {
	 user_data_=NULL;
	 desc="time to start a new epoch!";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="EpochStart(network)";
	 prog_args {
	  user_data_=NULL;
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=LeabraNetwork;
	   type="LeabraNetwork*";
	   name="network";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="network";
	   };
	  };
	 };
	 target=.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochStart"]$$;
	 targ_ld_init="*EpochStart*";
	};
       };
      };
     };
     step_prog=NULL;
     step_n=1;
     doc {
      user_data_=NULL;
      name="doc";
      desc=;
      web_doc=0;
      wiki=;
      url="local";
      full_url="local";
      text_size=1;
      text=;
      html_text=;
     };
    };
   };
  };
  Program_Group @.gp["TaskProgs"] {
   user_data_=NULL;
   name="TaskProgs";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   debug_mode=0;
   Program @["BasicTrain"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].doc$$;
     };
    };
    name="BasicTrain";
    short_nm="BscTrn";
    tags=;
    desc="basic training -- this is a standard Leabra minus-plus trial";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=2;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
     TimeUsed @["BasicTrainTime"] {user_data_=NULL: name="BasicTrainTime": start={usr=8592: sys=464: tot=148898725667: }: end={usr=8592: sys=464: tot=148898725667: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["LeabraFlex"].data.gp["InputData"]["StdInputData"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["basic_train_time"] {
      user_data_=NULL;
      name="basic_train_time";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].objs["BasicTrainTime"]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="BasicTrainTime->ResetUsed()";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].vars["basic_train_time"]$$;
      method=TimeUsed::ResetUsed;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetUsed()";
      meth_desc=" reset time used information";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="BasicTrainTime->StartTimer(false)";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].vars["basic_train_time"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     Comment @[1] {
      user_data_=NULL;
      desc="=== Start Trial ===";
      flags=CAN_REVERT_TO_CODE;
      code_string="// === Start Trial ===";
     };
     ProgramCall @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="TrialStart(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialStart"]$$;
      targ_ld_init="*TrialStart*";
     };
     ProgramCall @[3] {
      user_data_=NULL;
      desc="pick next event permuted..";
      flags=CAN_REVERT_TO_CODE;
      code_string="ChooseNextEvent(network, input_data, true)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="permuted";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      target=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"]$$;
      targ_ld_init="*ChooseNextEvent*";
     };
     ProgramCall @[4] {
      user_data_=NULL;
      desc="apply std external input activations from the input_data table to the network";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ApplyInputs"]$$;
      targ_ld_init="*ApplyInputs*";
     };
     Comment @[5] {
      user_data_=NULL;
      desc="=== Run Minus Phase ===";
      flags=CAN_REVERT_TO_CODE;
      code_string="// === Run Minus Phase ===";
     };
     ProgramCall @[6] {
      user_data_=NULL;
      desc="settle for minus phase, using ct_time.minus as fixed number of cycles to run";
      flags=CAN_REVERT_TO_CODE;
      code_string="SettleMinus(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SettleMinus"]$$;
      targ_ld_init="*SettleMinus*";
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="compute stats appropriate for given phase";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].args["network"]$$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[8] {
      user_data_=NULL;
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].args["network"]$;
      update_var=.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].args["update_net_view"]$$;
     };
     StopStepPoint @[9] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Stop_Step Point";
      cond {
       user_data_=NULL;
       expr=;
      };
     };
     Comment @[10] {
      user_data_=NULL;
      desc="=== Run Plus Phase ===";
      flags=CAN_REVERT_TO_CODE;
      code_string="// === Run Plus Phase ===";
     };
     MethodCall @[11] {
      user_data_=NULL;
      desc="only need to re-apply if something is new!";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[12] {
      user_data_=NULL;
      desc="only need to re-apply if something is new!";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ApplyInputs"]$;
      targ_ld_init="*ApplyInputs*";
     };
     ProgramCall @[13] {
      user_data_=NULL;
      desc="settle for designated plus phase number of cycles";
      flags=CAN_REVERT_TO_CODE;
      code_string="SettlePlus(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SettlePlus"]$$;
      targ_ld_init="*Settle*";
     };
     MethodCall @[14] {
      user_data_=NULL;
      desc="compute stats appropriate for given phase";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].args["network"]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[15] {
      user_data_=NULL;
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].args["network"]$;
      update_var=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].args["update_net_view"]$;
     };
     ProgramCall @[16] {
      user_data_=NULL;
      desc="standard end of trial stuff";
      flags=CAN_REVERT_TO_CODE;
      code_string="TrialEnd(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialEnd"]$$;
      targ_ld_init="*TrialEnd*";
     };
     MethodCall @[17] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="BasicTrainTime->EndTimer()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].vars["basic_train_time"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[18] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       user_data_=NULL;
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
    };
    step_prog=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"]$;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["BasicTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].doc$;
     };
    };
    name="BasicTest";
    short_nm="BscTst";
    tags=;
    desc="basic training -- this is a standard Leabra minus-plus trial";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=2;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
     TimeUsed @["BasicTrainTime"] {user_data_=NULL: name="BasicTrainTime": start={usr=8564: sys=463: tot=148898725636: }: end={usr=8566: sys=463: tot=148898725638: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["LeabraFlex"].data.gp["InputData"]["StdInputData"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["basic_train_time"] {
      user_data_=NULL;
      name="basic_train_time";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"].objs["BasicTrainTime"]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="BasicTrainTime->ResetUsed()";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"].vars["basic_train_time"]$$;
      method=TimeUsed::ResetUsed;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetUsed()";
      meth_desc=" reset time used information";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="BasicTrainTime->StartTimer(false)";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"].vars["basic_train_time"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     Comment @[1] {
      user_data_=NULL;
      desc="=== Start Trial ===";
      flags=CAN_REVERT_TO_CODE;
      code_string="// === Start Trial ===";
     };
     ProgramCall @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="TrialStart(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialStart"]$;
      targ_ld_init="*TrialStart*";
     };
     ProgramCall @[3] {
      user_data_=NULL;
      desc="pick next event permuted..";
      flags=CAN_REVERT_TO_CODE;
      code_string="ChooseNextEvent(network, input_data, true)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="permuted";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      target=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"]$;
      targ_ld_init="*ChooseNextEvent*";
     };
     ProgramCall @[4] {
      user_data_=NULL;
      desc="apply std external input activations from the input_data table to the network";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ApplyInputs"]$;
      targ_ld_init="*ApplyInputs*";
     };
     Comment @[5] {
      user_data_=NULL;
      desc="=== Run Minus Phase ===";
      flags=CAN_REVERT_TO_CODE;
      code_string="// === Run Minus Phase ===";
     };
     ProgramCall @[6] {
      user_data_=NULL;
      desc="settle for minus phase, using ct_time.minus as fixed number of cycles to run";
      flags=CAN_REVERT_TO_CODE;
      code_string="SettleMinus(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["SettleMinus"]$;
      targ_ld_init="*SettleMinus*";
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="compute stats appropriate for given phase";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"].args["network"]$$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[8] {
      user_data_=NULL;
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"].args["network"]$;
      update_var=.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"].args["update_net_view"]$$;
     };
     StopStepPoint @[9] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Stop_Step Point";
      cond {
       user_data_=NULL;
       expr=;
      };
     };
     Comment @[10] {
      user_data_=NULL;
      desc="=== Run Plus Phase ===";
      flags=CAN_REVERT_TO_CODE;
      code_string="// === Run Plus Phase ===";
     };
     MethodCall @[11] {
      user_data_=NULL;
      desc="only need to re-apply if something is new!";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[12] {
      user_data_=NULL;
      desc="only need to re-apply if something is new!";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ApplyInputs"]$;
      targ_ld_init="*ApplyInputs*";
     };
     ProgramCall @[13] {
      user_data_=NULL;
      desc="settle for designated plus phase number of cycles";
      flags=CAN_REVERT_TO_CODE;
      code_string="SettlePlus(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["SettlePlus"]$;
      targ_ld_init="*Settle*";
     };
     MethodCall @[14] {
      user_data_=NULL;
      desc="compute stats appropriate for given phase";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"].args["network"]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[15] {
      user_data_=NULL;
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"].args["network"]$;
      update_var=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"].args["update_net_view"]$;
     };
     ProgramCall @[16] {
      user_data_=NULL;
      desc="standard end of trial stuff";
      flags=CAN_REVERT_TO_CODE;
      code_string="TrialEnd(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialEnd"]$;
      targ_ld_init="*TrialEnd*";
     };
     MethodCall @[17] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="BasicTrainTime->EndTimer()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"].vars["basic_train_time"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[18] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       user_data_=NULL;
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"]$$;
      targ_ld_init="*LeabraTestTrialMonitor*";
     };
    };
    step_prog=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"]$;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["TestAll"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["TaskProgs"]["TestAll"].doc$$;
     };
    };
    name="TestAll";
    short_nm="TesAll";
    tags="Leabra, Std";
    desc="test all items in a data table and save to a separate monitor";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["LeabraFlex"].data.gp["InputData"]["StdInputData"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @["data_loop_order"] {
      user_data_=NULL;
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      user_data_=NULL;
      name="trial";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["LeabraFlex"].data.gp["OutputData"]["TestTrialOutputData"]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["step_on_err"] {
      user_data_=NULL;
      name="step_on_err";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      user_data_=NULL;
      name="data_loop_index";
      var_type=T_Int;
      int_val=6;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @["test_updt_view"] {
      user_data_=NULL;
      name="test_updt_view";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="update display when testing items?";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.projects["LeabraFlex"].programs.gp["TaskProgs"]["TestAll"].args["network"]$$;
      local_ctr_var=.projects["LeabraFlex"].programs.gp["TaskProgs"]["TestAll"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["TestAll"].args["network"]$;
      local_ctr_var=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["TestAll"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="added in 8.0: essential for param_seqs";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_Epoch()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["TestAll"].args["network"]$;
      method=Network::Init_Epoch;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Epoch()";
      meth_desc=" Initializes network state at the start of a new epoch -- updates parameters according to param_seq for example";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["TaskProgs"]["TestAll"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[3] {
      user_data_=NULL;
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrial(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr="network";
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr="input_data";
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  user_data_=NULL;
	  arg_type=bool;
	  type="bool";
	  name="update_net_view";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="test_updt_view";
	  };
	 };
	};
	target=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTest"]$;
	targ_ld_init="*BasicTest*";
       };
       If @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (step_on_err && network.sse > 0.0)";
	cond {
	 user_data_=NULL;
	 expr="step_on_err && network.sse > 0.0";
	};
	true_code {
	 user_data_=NULL;
	 name="ProgEl_List_100";
	 el_typ=ProgCode;
	 el_def=0;
	 StopStepPoint @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Stop_Step Point";
	  cond {
	   user_data_=NULL;
	   expr=;
	  };
	 };
	};
       };
      };
      data_var=.projects["LeabraFlex"].programs.gp["TaskProgs"]["TestAll"].vars["input_data"]$$;
      index_var=.projects["LeabraFlex"].programs.gp["TaskProgs"]["TestAll"].vars["data_loop_index"]$$;
      order_var=.projects["LeabraFlex"].programs.gp["TaskProgs"]["TestAll"].vars["data_loop_order"]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["TestAll"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     ProgramCall @[5] {
      user_data_=NULL;
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"]$$;
      targ_ld_init="*LeabraTestEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp["EnviroProgs"] {
   user_data_=NULL;
   name="EnviroProgs";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   debug_mode=0;
   Program @["ChooseNextEvent"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].doc$$;
     };
    };
    name="ChooseNextEvent";
    short_nm="ChNxEvt";
    tags="InputData, Permuted, FlexProgs, ApplyInput";
    desc="choose next event in input data in either sequential or permuted order according to its own internal counter-- starts over (re-permutes) when the end is reached -- is automatically dmem compatible for allocating different events to different processors";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=DataTable;
     el_def=0;
     DataTable @["PermIdxTable"] {
      user_data_=NULL;
      name="PermIdxTable";
      desc=;
      data {
       user_data_=NULL;
       name="data";
       el_typ=int_Data;
       el_def=0;
       int_Data @["Index"] {
	user_data_=NULL;
	name="Index";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      row_height=1;
      max_col_width=50;
      keygen 4 0=0;
      last_sort_spec {
       user_data_=NULL;
       name="last_sort_spec";
       ops {
	user_data_=NULL;
	name="ops";
	el_typ=DataSortEl;
	el_def=0;
       };
      };
      row_with_hilite=-1;
      control_panel_cells {
       user_data_=NULL;
       name="control_panel_cells";
       el_typ=DataTableCell;
       el_def=0;
      };
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="Network to which to apply inputs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["LeabraFlex"].data.gp["InputData"]["StdInputData"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
     ProgVar @["permuted"] {
      user_data_=NULL;
      name="permuted";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="present events in permuted order (otherwise use sequential order)";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cur_idx"] {
      user_data_=NULL;
      name="cur_idx";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current index into permuted table ";
      init_from=NULL;
     };
     ProgVar @["input_idx"] {
      user_data_=NULL;
      name="input_idx";
      var_type=T_Int;
      int_val=2;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["dmem_rows"] {
      user_data_=NULL;
      name="dmem_rows";
      var_type=T_Int;
      int_val=6;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["perm_idx_table"] {
      user_data_=NULL;
      name="perm_idx_table";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].objs["PermIdxTable"]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["ComputeDmemRows"] {
      user_data_=NULL;
      desc="compute target number of rows, based on current dmem settings";
      flags=CAN_REVERT_TO_CODE;
      code_string="ComputeDmemRows() returns: int";
      name="ComputeDmemRows";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name="ProgVar_List_0";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       user_data_=NULL;
       name="ProgEl_List_1374";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 user_data_=NULL;
	 name="ProgVar_List_0";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       If @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (taMisc::dmem_nprocs <= 1)";
	cond {
	 user_data_=NULL;
	 expr="taMisc::dmem_nprocs <= 1";
	};
	true_code {
	 user_data_=NULL;
	 name="ProgEl_List_1376";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="dmem_rows = input_data.rows";
	  result_var=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["dmem_rows"]$$;
	  expr {
	   user_data_=NULL;
	   expr="input_data.rows";
	  };
	 };
	};
       };
       Else @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 user_data_=NULL;
	 expr=;
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="dmem_rows = input_data.rows / taMisc::dmem_nprocs";
	  result_var=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["dmem_rows"]$;
	  expr {
	   user_data_=NULL;
	   expr="input_data.rows / taMisc::dmem_nprocs";
	  };
	 };
	 WhileLoop @[1] {
	  user_data_=NULL;
	  desc="ensure that we cover all the input data";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="while (dmem_rows * taMisc::dmem_nprocs < input_data.rows)";
	  loop_code {
	   user_data_=NULL;
	   name="ProgEl_List_1382";
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="dmem_rows += 1";
	    var=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["dmem_rows"]$;
	    expr {
	     user_data_=NULL;
	     expr="1";
	    };
	   };
	  };
	  test {
	   user_data_=NULL;
	   expr="dmem_rows * taMisc::dmem_nprocs < input_data.rows";
	  };
	 };
	};
       };
      };
     };
     Function @["PermuteIndexes"] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="PermuteIndexes() returns: int";
      name="PermuteIndexes";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name="ProgVar_List_0";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       user_data_=NULL;
       name="ProgEl_List_1375";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 user_data_=NULL;
	 name="ProgVar_List_0";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       AssignExpr @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="cur_idx = -1";
	result_var=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["cur_idx"]$$;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       If @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (permuted)";
	cond {
	 user_data_=NULL;
	 expr="permuted";
	};
	true_code {
	 user_data_=NULL;
	 name="ProgEl_List_205";
	 el_typ=ProgCode;
	 el_def=0;
	 DataProcCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="taDataProc::Permute(PermIdxTable, PermIdxTable, taMisc::dmem_proc)";
	  result_var=NULL;
	  object_type=taDataProc;
	  method=taDataProc::Permute;
	  meth_args {
	   user_data_=NULL;
	   name="ProgArg_List_0";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    user_data_=NULL;
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="dest";
	    required=1;
	    def_val=;
	    prev_expr="PermIdxTable";
	    expr {
	     user_data_=NULL;
	     expr="perm_idx_table";
	    };
	   };
	   ProgArg @[1] {
	    user_data_=NULL;
	    arg_type=DataTable_ptr;
	    type="DataTable*";
	    name="src";
	    required=1;
	    def_val=;
	    prev_expr="PermIdxTable";
	    expr {
	     user_data_=NULL;
	     expr="perm_idx_table";
	    };
	   };
	   ProgArg @[2] {
	    user_data_=NULL;
	    arg_type=int;
	    type="int";
	    name="thr_no";
	    required=0;
	    def_val="-1";
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr="taMisc::dmem_proc";
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     Function @["InitIndexes"] {
      user_data_=NULL;
      desc="initialize indexes from current input data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="InitIndexes() returns: int";
      name="InitIndexes";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name="ProgVar_List_0";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       user_data_=NULL;
       name="ProgEl_List_1370";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 user_data_=NULL;
	 name="ProgVar_List_0";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       FunctionCall @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="ComputeDmemRows()";
	result_var=NULL;
	fun=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].functions["ComputeDmemRows"]$$;
	fun_args {
	 user_data_=NULL;
	 name="ProgArg_List_0";
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       MethodCall @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="PermIdxTable->EnforceRows(dmem_rows)";
	result_var=NULL;
	obj=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["perm_idx_table"]$$;
	method=DataTable::EnforceRows;
	meth_args {
	 user_data_=NULL;
	 name="ProgArg_List_0";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=int;
	  type="int";
	  name="n_rows";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="dmem_rows";
	  };
	 };
	};
	meth_sig="void EnforceRows(int n_rows)";
	meth_desc=" ensure that there are exactly n_rows in the table, removing or adding as needed";
       };
       MethodCall @[3] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="PermIdxTable->InitValsToRowNo(0)";
	result_var=NULL;
	obj=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["perm_idx_table"]$;
	method=DataTable::InitValsToRowNo;
	meth_args {
	 user_data_=NULL;
	 name="ProgArg_List_0";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=const_Variant_ref;
	  type="Variant&";
	  name="col";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="0";
	  };
	 };
	};
	meth_sig="bool InitValsToRowNo(Variant& col)";
	meth_desc=" initialize all values in given column to be equal to the row number -- only valid for scalar (not matrix) columns -- column can be specified as either integer index or a string that is then used to find the given column name";
       };
       FunctionCall @[4] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="PermuteIndexes()";
	result_var=NULL;
	fun=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].functions["PermuteIndexes"]$$;
	fun_args {
	 user_data_=NULL;
	 name="ProgArg_List_0";
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     FunctionCall @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="InitIndexes()";
      result_var=NULL;
      fun=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].functions["InitIndexes"]$$;
      fun_args {
       user_data_=NULL;
       name="ProgArg_List_0";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="start at start -- index is incremented AFTER using";
      flags=CAN_REVERT_TO_CODE;
      code_string="cur_idx = 0";
      result_var=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["cur_idx"]$;
      expr {
       user_data_=NULL;
       expr="0";
      };
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     FunctionCall @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ComputeDmemRows()";
      result_var=NULL;
      fun=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].functions["ComputeDmemRows"]$;
      fun_args {
       user_data_=NULL;
       name="ProgArg_List_0";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (dmem_rows != PermIdxTable.rows)";
      cond {
       user_data_=NULL;
       expr="dmem_rows != perm_idx_table.rows";
      };
      true_code {
       user_data_=NULL;
       name="ProgEl_List_1372";
       el_typ=ProgCode;
       el_def=0;
       FunctionCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="InitIndexes()";
	result_var=NULL;
	fun=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].functions["InitIndexes"]$;
	fun_args {
	 user_data_=NULL;
	 name="ProgArg_List_0";
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (permuted)";
      cond {
       user_data_=NULL;
       expr="permuted";
      };
      true_code {
       user_data_=NULL;
       name="ProgEl_List_207";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="input_idx = PermIdxTable->GetVal(0, cur_idx)";
	result_var=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["input_idx"]$$;
	obj=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["perm_idx_table"]$;
	method=DataTable::GetVal;
	meth_args {
	 user_data_=NULL;
	 name="ProgArg_List_0";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=const_Variant_ref;
	  type="Variant&";
	  name="col";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="0";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=int;
	  type="int";
	  name="row";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="cur_idx";
	  };
	 };
	};
	meth_sig="const_Variant GetVal(Variant& col, int row)";
	meth_desc=" get data of scalar type, in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name";
       };
      };
     };
     Else @[3] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else";
      cond {
       user_data_=NULL;
       expr=;
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="input_idx = cur_idx";
	result_var=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["input_idx"]$;
	expr {
	 user_data_=NULL;
	 expr="cur_idx";
	};
       };
      };
     };
     If @[4] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (taMisc::dmem_nprocs > 1)";
      cond {
       user_data_=NULL;
       expr="taMisc::dmem_nprocs > 1";
      };
      true_code {
       user_data_=NULL;
       name="ProgEl_List_1378";
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	user_data_=NULL;
	desc="for dmem, transform from virtual idx counter into actual row, unique to this processor";
	flags=CAN_REVERT_TO_CODE;
	code_string="input_idx = taMisc::dmem_proc + taMisc::dmem_nprocs * input_idx";
	result_var=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["input_idx"]$;
	expr {
	 user_data_=NULL;
	 expr="taMisc::dmem_proc + taMisc::dmem_nprocs * input_idx";
	};
       };
       If @[1] {
	user_data_=NULL;
	desc="choose at random if above actual input data";
	flags=CAN_REVERT_TO_CODE;
	code_string="if (input_idx > input_data.rows)";
	cond {
	 user_data_=NULL;
	 expr="input_idx > input_data.rows";
	};
	true_code {
	 user_data_=NULL;
	 name="ProgEl_List_1381";
	 el_typ=ProgCode;
	 el_def=0;
	 RandomCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="input_idx = Random::IntZeroN(input_data.rows, )";
	  result_var=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["input_idx"]$;
	  object_type=Random;
	  method=Random::IntZeroN;
	  meth_args {
	   user_data_=NULL;
	   name="ProgArg_List_0";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    user_data_=NULL;
	    arg_type=int;
	    type="int";
	    name="n";
	    required=1;
	    def_val=;
	    prev_expr="input_data.rows";
	    expr {
	     user_data_=NULL;
	     expr="input_data.rows";
	    };
	   };
	   ProgArg @[1] {
	    user_data_=NULL;
	    arg_type=int;
	    type="int";
	    name="thr_no";
	    required=0;
	    def_val="-1";
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="input_data->ReadItem(input_idx)";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].args["input_data"]$$;
      method=DataTable::ReadItem;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="idx";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_idx";
	};
       };
      };
      meth_sig="bool ReadItem(int idx)";
      meth_desc=" goes directly (random access) to row idx (- = count back from last row available, otherwise must be in range 0 <= idx < rows) so that it is now available for GetData routines (which use read_idx for their row number), returns true if row exists and was read";
     };
     If @[6] {
      user_data_=NULL;
      desc="now increment AFTER using, and wrap around..";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (cur_idx == PermIdxTable.rows -1)";
      cond {
       user_data_=NULL;
       expr="cur_idx == perm_idx_table.rows -1";
      };
      true_code {
       user_data_=NULL;
       name="ProgEl_List_1374";
       el_typ=ProgCode;
       el_def=0;
       FunctionCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="PermuteIndexes()";
	result_var=NULL;
	fun=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].functions["PermuteIndexes"]$;
	fun_args {
	 user_data_=NULL;
	 name="ProgArg_List_0";
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     Else @[7] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else";
      cond {
       user_data_=NULL;
       expr=;
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       VarIncr @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="cur_idx += 1";
	var=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseNextEvent"].vars["cur_idx"]$;
	expr {
	 user_data_=NULL;
	 expr="1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["ChooseRandomEvent"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseRandomEvent"].doc$$;
     };
    };
    name="ChooseRandomEvent";
    short_nm="ChRndm";
    tags=;
    desc="choose an event at random to present on current trial";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["LeabraFlex"].data.gp["InputData"]["StdInputData"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["event_idx"] {
      user_data_=NULL;
      name="event_idx";
      var_type=T_Int;
      int_val=2;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="event to present";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     RandomCall @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="event_idx = Random::IntZeroN(input_data.rows, taMisc::dmem_proc)";
      result_var=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseRandomEvent"].vars["event_idx"]$$;
      object_type=Random;
      method=Random::IntZeroN;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="n";
	required=1;
	def_val=;
	prev_expr="input_data.rows";
	expr {
	 user_data_=NULL;
	 expr="input_data.rows";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="thr_no";
	required=0;
	def_val="-1";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="taMisc::dmem_proc";
	};
       };
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="input_data->ReadItem(event_idx)";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ChooseRandomEvent"].args["input_data"]$$;
      method=DataTable::ReadItem;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="idx";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="event_idx";
	};
       };
      };
      meth_sig="bool ReadItem(int idx)";
      meth_desc=" goes directly (random access) to row idx (- = count back from last row available, otherwise must be in range 0 <= idx < rows) so that it is now available for GetData routines (which use read_idx for their row number), returns true if row exists and was read";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["ApplyInputs"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ApplyInputs"].doc$$;
     };
    };
    name="ApplyInputs";
    short_nm="Inputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      user_data_=NULL;
      name="LayerWriter_0";
      data=$.projects["LeabraFlex"].data.gp["InputData"]["StdInputData"]$;
      network=$.projects["LeabraFlex"].networks["Network_0"]$;
      layer_data {
       user_data_=NULL;
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	user_data_=NULL;
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {user_data_=NULL: name="RandomSpec_7": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	user_data_=NULL;
	col_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {user_data_=NULL: name="RandomSpec_8": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	user_data_=NULL;
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {user_data_=NULL: name="RandomSpec_9": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["LeabraFlex"].data.gp["InputData"]["StdInputData"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["layer_writer_0"] {
      user_data_=NULL;
      name="layer_writer_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ApplyInputs"].objs["LayerWriter_0"]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ApplyInputs"].vars["layer_writer_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->AutoConfig()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->ApplyInputData()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["EnviroProgs"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp["UtilProgs"] {
   user_data_=NULL;
   name="UtilProgs";
   el_typ=Program;
   el_def=0;
   tags="basic utility programs for doing basic operations shared across multiple programs";
   desc=;
   debug_mode=0;
   Program @["BatchRndSeed"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["BatchRndSeed"].doc$$;
     };
    };
    name="BatchRndSeed";
    short_nm="BatchSeed";
    tags=;
    desc="select random seed based on network batch number";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
     RndSeed_List @["rnd_seeds"] {
      user_data_=NULL;
      name="rnd_seeds";
      seeds {
       user_data_=NULL;
       name="seeds";
       el_typ=RndSeed;
       el_def=0;
       RndSeed @["RndSeed_1"] {
	user_data_=NULL;
	name="RndSeed_1";
	rnd_seed=2929233146;
       };
       RndSeed @["RndSeed_2"] {
	user_data_=NULL;
	name="RndSeed_2";
	rnd_seed=2929233147;
       };
       RndSeed @["RndSeed_3"] {
	user_data_=NULL;
	name="RndSeed_3";
	rnd_seed=2929233148;
       };
       RndSeed @["RndSeed_4"] {
	user_data_=NULL;
	name="RndSeed_4";
	rnd_seed=2929233149;
       };
       RndSeed @["RndSeed_5"] {
	user_data_=NULL;
	name="RndSeed_5";
	rnd_seed=2929233150;
       };
       RndSeed @["RndSeed_6"] {
	user_data_=NULL;
	name="RndSeed_6";
	rnd_seed=2929233151;
       };
       RndSeed @["RndSeed_7"] {
	user_data_=NULL;
	name="RndSeed_7";
	rnd_seed=2929233152;
       };
       RndSeed @["RndSeed_8"] {
	user_data_=NULL;
	name="RndSeed_8";
	rnd_seed=2929233153;
       };
       RndSeed @["RndSeed_9"] {
	user_data_=NULL;
	name="RndSeed_9";
	rnd_seed=2929233154;
       };
       RndSeed @["RndSeed_10"] {
	user_data_=NULL;
	name="RndSeed_10";
	rnd_seed=2929233155;
       };
       RndSeed @["RndSeed_11"] {
	user_data_=NULL;
	name="RndSeed_11";
	rnd_seed=2929233156;
       };
       RndSeed @["RndSeed_12"] {
	user_data_=NULL;
	name="RndSeed_12";
	rnd_seed=2929233157;
       };
       RndSeed @["RndSeed_13"] {
	user_data_=NULL;
	name="RndSeed_13";
	rnd_seed=2929233158;
       };
       RndSeed @["RndSeed_14"] {
	user_data_=NULL;
	name="RndSeed_14";
	rnd_seed=2929233159;
       };
       RndSeed @["RndSeed_15"] {
	user_data_=NULL;
	name="RndSeed_15";
	rnd_seed=2929233160;
       };
       RndSeed @["RndSeed_16"] {
	user_data_=NULL;
	name="RndSeed_16";
	rnd_seed=2929233161;
       };
       RndSeed @["RndSeed_17"] {
	user_data_=NULL;
	name="RndSeed_17";
	rnd_seed=2929233162;
       };
       RndSeed @["RndSeed_18"] {
	user_data_=NULL;
	name="RndSeed_18";
	rnd_seed=2929233163;
       };
       RndSeed @["RndSeed_19"] {
	user_data_=NULL;
	name="RndSeed_19";
	rnd_seed=2929233164;
       };
       RndSeed @["RndSeed_20"] {
	user_data_=NULL;
	name="RndSeed_20";
	rnd_seed=2929233165;
       };
       RndSeed @["RndSeed_21"] {
	user_data_=NULL;
	name="RndSeed_21";
	rnd_seed=2929233166;
       };
       RndSeed @["RndSeed_22"] {
	user_data_=NULL;
	name="RndSeed_22";
	rnd_seed=2929233167;
       };
       RndSeed @["RndSeed_23"] {
	user_data_=NULL;
	name="RndSeed_23";
	rnd_seed=2929233168;
       };
       RndSeed @["RndSeed_24"] {
	user_data_=NULL;
	name="RndSeed_24";
	rnd_seed=2929233169;
       };
       RndSeed @["RndSeed_25"] {
	user_data_=NULL;
	name="RndSeed_25";
	rnd_seed=2929233170;
       };
      };
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="required for the batch counter";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["rnd_seeds"] {
      user_data_=NULL;
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      object_val=.projects["LeabraFlex"].programs.gp["UtilProgs"]["BatchRndSeed"].objs["rnd_seeds"]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
      flags=CAN_REVERT_TO_CODE;
      code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["BatchRndSeed"].vars["rnd_seeds"]$$;
      method=RndSeed_List::UseSeed;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="idx";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network.batch % rnd_seeds.seeds.size";
	};
       };
      };
      meth_sig="void UseSeed(int idx)";
      meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["ConfigNetwork"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].doc$$;
     };
    };
    name="ConfigNetwork";
    short_nm="CfgNet";
    tags="Network, Configure";
    desc="configure the network -- basically selectively lesion different parts that are not needed for a given task";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=String_Matrix;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="required for the batch counter";
      init_from=NULL;
     };
     ProgVar @["lesion_layer_groups"] {
      user_data_=NULL;
      name="lesion_layer_groups";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="a space delimited list of layer group names to lesion";
      init_from=NULL;
     };
     ProgVar @["lesion_layers"] {
      user_data_=NULL;
      name="lesion_layers";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="a space delimited list of layer names to lesion";
      init_from=NULL;
     };
     ProgVar @["lesion_prjns"] {
      user_data_=NULL;
      name="lesion_prjns";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="a space delimited list of projections to lesion: synatx is recvlayer.Fm_sendlayer";
      init_from=NULL;
     };
     ProgVar @["un_lesion_prjns"] {
      user_data_=NULL;
      name="un_lesion_prjns";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="a space delimited list of projections to un-lesion: synatx is recvlayer.Fm_sendlayer";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["UnlesionAll"] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="UnlesionAll() returns: int";
      name="UnlesionAll";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name="ProgVar_List_1";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       user_data_=NULL;
       name="ProgEl_List_1759";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (2 vars)";
	local_vars {
	 user_data_=NULL;
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @["laygp"] {
	  user_data_=NULL;
	  name="laygp";
	  var_type=T_Object;
	  object_type=Layer_Group;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["lay"] {
	  user_data_=NULL;
	  name="lay";
	  var_type=T_Object;
	  object_type=Layer;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	};
       };
       ForeachLoop @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="foreach(laygp in network.layers.gp)";
	loop_code {
	 user_data_=NULL;
	 name="loop_code";
	 el_typ=ProgCode;
	 el_def=0;
	 MethodCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="laygp->UnLesionLayers()";
	  result_var=NULL;
	  obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["UnlesionAll"].fun_code[0].local_vars["laygp"]$$;
	  method=Layer_Group::UnLesionLayers;
	  meth_args {
	   user_data_=NULL;
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void UnLesionLayers()";
	  meth_desc=" un-set the lesion flag on all the layers within this group -- restores them to engage in normal processing";
	 };
	 MethodCall @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="laygp->DeIconifyLayers()";
	  result_var=NULL;
	  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["UnlesionAll"].fun_code[0].local_vars["laygp"]$;
	  method=Layer_Group::DeIconifyLayers;
	  meth_args {
	   user_data_=NULL;
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void DeIconifyLayers()";
	  meth_desc=" un-set the lesion flag on all the layers within this group";
	 };
	};
	el_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["UnlesionAll"].fun_code[0].local_vars["laygp"]$;
	in {
	 user_data_=NULL;
	 expr="network.layers.gp";
	};
       };
       ForeachLoop @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="foreach(lay in network.layers)";
	loop_code {
	 user_data_=NULL;
	 name="loop_code";
	 el_typ=ProgCode;
	 el_def=0;
	 MethodCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="lay->UnLesion()";
	  result_var=NULL;
	  obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["UnlesionAll"].fun_code[0].local_vars["lay"]$$;
	  method=Layer::UnLesion;
	  meth_args {
	   user_data_=NULL;
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void UnLesion()";
	  meth_desc=" un-set the lesion flag on layer -- restores it to engage in normal processing";
	 };
	 MethodCall @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="lay->DeIconify()";
	  result_var=NULL;
	  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["UnlesionAll"].fun_code[0].local_vars["lay"]$;
	  method=Layer::DeIconify;
	  meth_args {
	   user_data_=NULL;
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void DeIconify()";
	  meth_desc=" de-iconify this layer in the network display (make full size)";
	 };
	};
	el_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["UnlesionAll"].fun_code[0].local_vars["lay"]$;
	in {
	 user_data_=NULL;
	 expr="network.layers";
	};
       };
      };
     };
     Function @["LayerGpsOnOff"] {
      user_data_=NULL;
      desc="turn layer groups on or off (lesion when lay_gp_on=false)";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerGpsOnOff(String laygps, bool lay_gp_on) returns: int";
      name="LayerGpsOnOff";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name="ProgVar_List_1";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["laygps"] {
	user_data_=NULL;
	name="laygps";
	var_type=T_String;
	string_val=;
	object_scope=NULL;
	flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["lay_gp_on"] {
	user_data_=NULL;
	name="lay_gp_on";
	var_type=T_Bool;
	bool_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
      fun_code {
       user_data_=NULL;
       name="ProgEl_List_1760";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (3 vars)";
	local_vars {
	 user_data_=NULL;
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @["les_laygp_mat"] {
	  user_data_=NULL;
	  name="les_laygp_mat";
	  var_type=T_Object;
	  object_type=String_Matrix;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=NEW_OBJ|LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["laygp"] {
	  user_data_=NULL;
	  name="laygp";
	  var_type=T_Object;
	  object_type=Layer_Group;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["laygp_nm"] {
	  user_data_=NULL;
	  name="laygp_nm";
	  var_type=T_String;
	  string_val=;
	  object_scope=NULL;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	};
       };
       MethodCall @[1] {
	user_data_=NULL;
	desc="get into easier to use matrix format";
	flags=CAN_REVERT_TO_CODE;
	code_string="les_laygp_mat->FmDelimString(laygps, \" \")";
	result_var=NULL;
	obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayerGpsOnOff"].fun_code[0].local_vars["les_laygp_mat"]$$;
	method=String_Matrix::FmDelimString;
	meth_args {
	 user_data_=NULL;
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="str";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="laygps";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="delim";
	  required=0;
	  def_val=" ";
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="\" \"";
	  };
	 };
	};
	meth_sig="void FmDelimString(taString& str, taString& delim =  )";
	meth_desc=" fill this matrix by parsing given string using given delimiter separating strings -- increases size as necessary to fit everything";
       };
       ForeachLoop @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="foreach(laygp_nm in les_laygp_mat)";
	loop_code {
	 user_data_=NULL;
	 name="loop_code";
	 el_typ=ProgCode;
	 el_def=0;
	 MemberMethodCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="laygp = network.layers.gp.FindName(laygp_nm)";
	  obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].args["network"]$$;
	  path="layers.gp";
	  result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayerGpsOnOff"].fun_code[0].local_vars["laygp"]$$;
	  method=taGroup_Layer_::FindName;
	  meth_args {
	   user_data_=NULL;
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="item_nm";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr="laygp_nm";
	    };
	   };
	  };
	  meth_sig="Layer_ptr FindName(taString& item_nm)";
	  meth_desc=" Find element in top-level list with given name (nm) (NULL = not here)";
	 };
	 If @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (!laygp)";
	  cond {
	   user_data_=NULL;
	   expr="!laygp";
	  };
	  true_code {
	   user_data_=NULL;
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MiscCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="taMisc::Error(\"layer group named:\", laygp_nm, \"not found in network:\", network.name, , , , , )";
	    result_var=NULL;
	    object_type=taMisc;
	    method=taMisc::Error;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="a";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="\"layer group named:\"";
	      };
	     };
	     ProgArg @[1] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="b";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="laygp_nm";
	      };
	     };
	     ProgArg @[2] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="c";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="\"not found in network:\"";
	      };
	     };
	     ProgArg @[3] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="d";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="network.name";
	      };
	     };
	     ProgArg @[4] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="e";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[5] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="f";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[6] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="g";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[7] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="h";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[8] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="i";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	    };
	   };
	   IfContinue @[1] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="continue";
	    cond {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	  };
	 };
	 If @[2] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (!lay_gp_on)";
	  cond {
	   user_data_=NULL;
	   expr="!lay_gp_on";
	  };
	  true_code {
	   user_data_=NULL;
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="laygp->LesionLayers()";
	    result_var=NULL;
	    obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayerGpsOnOff"].fun_code[0].local_vars["laygp"]$;
	    method=Layer_Group::LesionLayers;
	    meth_args {
	     user_data_=NULL;
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void LesionLayers()";
	    meth_desc=" set the lesion flag on all the layers within this group -- removes them from all processing operations";
	   };
	   MethodCall @[1] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="laygp->IconifyLayers()";
	    result_var=NULL;
	    obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayerGpsOnOff"].fun_code[0].local_vars["laygp"]$;
	    method=Layer_Group::IconifyLayers;
	    meth_args {
	     user_data_=NULL;
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void IconifyLayers()";
	    meth_desc=" iconi";
	   };
	  };
	 };
	 Else @[3] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="else";
	  cond {
	   user_data_=NULL;
	   expr=;
	  };
	  true_code {
	   user_data_=NULL;
	   name="else_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="laygp->UnLesionLayers()";
	    result_var=NULL;
	    obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayerGpsOnOff"].fun_code[0].local_vars["laygp"]$;
	    method=Layer_Group::UnLesionLayers;
	    meth_args {
	     user_data_=NULL;
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void UnLesionLayers()";
	    meth_desc=" un-set the lesion flag on all the layers within this group -- restores them to engage in normal processing";
	   };
	   MethodCall @[1] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="laygp->DeIconifyLayers()";
	    result_var=NULL;
	    obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayerGpsOnOff"].fun_code[0].local_vars["laygp"]$;
	    method=Layer_Group::DeIconifyLayers;
	    meth_args {
	     user_data_=NULL;
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void DeIconifyLayers()";
	    meth_desc=" un-set the lesion flag on all the layers within this group";
	   };
	  };
	 };
	};
	el_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayerGpsOnOff"].fun_code[0].local_vars["laygp_nm"]$$;
	in {
	 user_data_=NULL;
	 expr="les_laygp_mat";
	};
       };
      };
     };
     Function @["LayersOnOff"] {
      user_data_=NULL;
      desc="turn layers on or off (lesion when lay_on=false)";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayersOnOff(String lays, bool lay_on) returns: int";
      name="LayersOnOff";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["lays"] {
	user_data_=NULL;
	name="lays";
	var_type=T_String;
	string_val=;
	object_scope=NULL;
	flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["lay_on"] {
	user_data_=NULL;
	name="lay_on";
	var_type=T_Bool;
	bool_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
      fun_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (3 vars)";
	local_vars {
	 user_data_=NULL;
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @["les_lays_mat"] {
	  user_data_=NULL;
	  name="les_lays_mat";
	  var_type=T_Object;
	  object_type=String_Matrix;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=NEW_OBJ|LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["lay"] {
	  user_data_=NULL;
	  name="lay";
	  var_type=T_Object;
	  object_type=Layer;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["lay_nm"] {
	  user_data_=NULL;
	  name="lay_nm";
	  var_type=T_String;
	  string_val=;
	  object_scope=NULL;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	};
       };
       MethodCall @[1] {
	user_data_=NULL;
	desc="get into easier to use matrix format";
	flags=CAN_REVERT_TO_CODE;
	code_string="les_lays_mat->FmDelimString(lays, \" \")";
	result_var=NULL;
	obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayersOnOff"].fun_code[0].local_vars["les_lays_mat"]$$;
	method=String_Matrix::FmDelimString;
	meth_args {
	 user_data_=NULL;
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="str";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="lays";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="delim";
	  required=0;
	  def_val=" ";
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="\" \"";
	  };
	 };
	};
	meth_sig="void FmDelimString(taString& str, taString& delim =  )";
	meth_desc=" fill this matrix by parsing given string using given delimiter separating strings -- increases size as necessary to fit everything";
       };
       ForeachLoop @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="foreach(lay_nm in les_lays_mat)";
	loop_code {
	 user_data_=NULL;
	 name="loop_code";
	 el_typ=ProgCode;
	 el_def=0;
	 MemberMethodCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="lay = network.layers.FindLeafName(lay_nm)";
	  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].args["network"]$;
	  path="layers";
	  result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayersOnOff"].fun_code[0].local_vars["lay"]$$;
	  method=taGroup_Layer_::FindLeafName;
	  meth_args {
	   user_data_=NULL;
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="item_nm";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr="lay_nm";
	    };
	   };
	  };
	  meth_sig="Layer_ptr FindLeafName(taString& item_nm)";
	  meth_desc=" Find element anywhere in full group and subgroups with given name (item_nm)";
	 };
	 If @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (!lay)";
	  cond {
	   user_data_=NULL;
	   expr="!lay";
	  };
	  true_code {
	   user_data_=NULL;
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MiscCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="taMisc::Error(\"layer named:\", lay_nm, \"not found in network:\", network.name, , , , , )";
	    result_var=NULL;
	    object_type=taMisc;
	    method=taMisc::Error;
	    meth_args {
	     user_data_=NULL;
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="a";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="\"layer named:\"";
	      };
	     };
	     ProgArg @[1] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="b";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="lay_nm";
	      };
	     };
	     ProgArg @[2] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="c";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="\"not found in network:\"";
	      };
	     };
	     ProgArg @[3] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="d";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="network.name";
	      };
	     };
	     ProgArg @[4] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="e";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[5] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="f";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[6] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="g";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[7] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="h";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[8] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="i";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	    };
	   };
	   IfContinue @[1] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="continue";
	    cond {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	  };
	 };
	 If @[2] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (!lay_on)";
	  cond {
	   user_data_=NULL;
	   expr="!lay_on";
	  };
	  true_code {
	   user_data_=NULL;
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="lay->Lesion()";
	    result_var=NULL;
	    obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayersOnOff"].fun_code[0].local_vars["lay"]$;
	    method=Layer::Lesion;
	    meth_args {
	     user_data_=NULL;
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void Lesion()";
	    meth_desc=" set the lesion flag on layer -- removes it from all processing operations";
	   };
	   MethodCall @[1] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="lay->Iconify()";
	    result_var=NULL;
	    obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayersOnOff"].fun_code[0].local_vars["lay"]$;
	    method=Layer::Iconify;
	    meth_args {
	     user_data_=NULL;
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void Iconify()";
	    meth_desc=" iconify this layer in the network display (shrink to size of 1 unit, and make them invisible if lesioned)";
	   };
	  };
	 };
	 Else @[3] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="else";
	  cond {
	   user_data_=NULL;
	   expr=;
	  };
	  true_code {
	   user_data_=NULL;
	   name="else_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="lay->UnLesion()";
	    result_var=NULL;
	    obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayersOnOff"].fun_code[0].local_vars["lay"]$;
	    method=Layer::UnLesion;
	    meth_args {
	     user_data_=NULL;
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void UnLesion()";
	    meth_desc=" un-set the lesion flag on layer -- restores it to engage in normal processing";
	   };
	   MethodCall @[1] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="lay->DeIconify()";
	    result_var=NULL;
	    obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayersOnOff"].fun_code[0].local_vars["lay"]$;
	    method=Layer::DeIconify;
	    meth_args {
	     user_data_=NULL;
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void DeIconify()";
	    meth_desc=" de-iconify this layer in the network display (make full size)";
	   };
	  };
	 };
	};
	el_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayersOnOff"].fun_code[0].local_vars["lay_nm"]$$;
	in {
	 user_data_=NULL;
	 expr="les_lays_mat";
	};
       };
      };
     };
     Function @["ProjectionsOnOff"] {
      user_data_=NULL;
      desc="turn projections on or off";
      flags=CAN_REVERT_TO_CODE;
      code_string="ProjectionsOnOff(String prjns, bool prjn_on) returns: int";
      name="ProjectionsOnOff";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["prjns"] {
	user_data_=NULL;
	name="prjns";
	var_type=T_String;
	string_val=;
	object_scope=NULL;
	flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["prjn_on"] {
	user_data_=NULL;
	name="prjn_on";
	var_type=T_Bool;
	bool_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
      fun_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (5 vars)";
	local_vars {
	 user_data_=NULL;
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @["les_prjns_mat"] {
	  user_data_=NULL;
	  name="les_prjns_mat";
	  var_type=T_Object;
	  object_type=String_Matrix;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=NEW_OBJ|LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["prjn"] {
	  user_data_=NULL;
	  name="prjn";
	  var_type=T_Object;
	  object_type=Projection;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["prjn_nm"] {
	  user_data_=NULL;
	  name="prjn_nm";
	  var_type=T_String;
	  string_val=;
	  object_scope=NULL;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["lay_nm"] {
	  user_data_=NULL;
	  name="lay_nm";
	  var_type=T_String;
	  string_val=;
	  object_scope=NULL;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["lay"] {
	  user_data_=NULL;
	  name="lay";
	  var_type=T_Object;
	  object_type=Layer;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	};
       };
       MethodCall @[1] {
	user_data_=NULL;
	desc="get into easier to use matrix format";
	flags=CAN_REVERT_TO_CODE;
	code_string="les_prjns_mat->FmDelimString(prjns, \" \")";
	result_var=NULL;
	obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["ProjectionsOnOff"].fun_code[0].local_vars["les_prjns_mat"]$$;
	method=String_Matrix::FmDelimString;
	meth_args {
	 user_data_=NULL;
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="str";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="prjns";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="delim";
	  required=0;
	  def_val=" ";
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="\" \"";
	  };
	 };
	};
	meth_sig="void FmDelimString(taString& str, taString& delim =  )";
	meth_desc=" fill this matrix by parsing given string using given delimiter separating strings -- increases size as necessary to fit everything";
       };
       ForeachLoop @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="foreach(prjn_nm in les_prjns_mat)";
	loop_code {
	 user_data_=NULL;
	 name="loop_code";
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (!prjn_nm.contains(\".\"))";
	  cond {
	   user_data_=NULL;
	   expr="!prjn_nm.contains(\".\")";
	  };
	  true_code {
	   user_data_=NULL;
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MiscCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="taMisc::Error(\"projection name must include a . between name of layer and name of projection as Fm_sendlayer\", , , , , , , , )";
	    result_var=NULL;
	    object_type=taMisc;
	    method=taMisc::Error;
	    meth_args {
	     user_data_=NULL;
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="a";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="\"projection name must include a . between name of layer and name of projection as Fm_sendlayer\"";
	      };
	     };
	     ProgArg @[1] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="b";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[2] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="c";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[3] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="d";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[4] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="e";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[5] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="f";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[6] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="g";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[7] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="h";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[8] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="i";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	    };
	   };
	   IfContinue @[1] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="continue";
	    cond {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	  };
	 };
	 MethodCall @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="lay_nm = prjn_nm->before(\".\", )";
	  result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["ProjectionsOnOff"].fun_code[0].local_vars["lay_nm"]$$;
	  obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["ProjectionsOnOff"].fun_code[0].local_vars["prjn_nm"]$$;
	  method=taString::before;
	  meth_args {
	   user_data_=NULL;
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="x";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr="\".\"";
	    };
	   };
	   ProgArg @[1] {
	    user_data_=NULL;
	    arg_type=int;
	    type="int";
	    name="startpos";
	    required=0;
	    def_val="0";
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	  };
	  meth_sig="taString before(taString& x, int startpos = 0)";
	  meth_desc=" get substring before (not including) target string. startpos = starting position (- = search from end forward)";
	 };
	 MethodCall @[2] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="prjn_nm = prjn_nm->after(\".\", )";
	  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["ProjectionsOnOff"].fun_code[0].local_vars["prjn_nm"]$;
	  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["ProjectionsOnOff"].fun_code[0].local_vars["prjn_nm"]$;
	  method=taString::after;
	  meth_args {
	   user_data_=NULL;
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="x";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr="\".\"";
	    };
	   };
	   ProgArg @[1] {
	    user_data_=NULL;
	    arg_type=int;
	    type="int";
	    name="startpos";
	    required=0;
	    def_val="0";
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	  };
	  meth_sig="taString after(taString& x, int startpos = 0)";
	  meth_desc=" get substring after (not including) target string. startpos = starting position (- = search from end forward)";
	 };
	 MemberMethodCall @[3] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="lay = network.layers.FindLeafName(lay_nm)";
	  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].args["network"]$;
	  path="layers";
	  result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["ProjectionsOnOff"].fun_code[0].local_vars["lay"]$$;
	  method=taGroup_Layer_::FindLeafName;
	  meth_args {
	   user_data_=NULL;
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="item_nm";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr="lay_nm";
	    };
	   };
	  };
	  meth_sig="Layer_ptr FindLeafName(taString& item_nm)";
	  meth_desc=" Find element anywhere in full group and subgroups with given name (item_nm)";
	 };
	 If @[4] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (!lay)";
	  cond {
	   user_data_=NULL;
	   expr="!lay";
	  };
	  true_code {
	   user_data_=NULL;
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MiscCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="taMisc::Error(\"layer named:\", lay_nm, \"not found in network:\", network.name, , , , , )";
	    result_var=NULL;
	    object_type=taMisc;
	    method=taMisc::Error;
	    meth_args {
	     user_data_=NULL;
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="a";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="\"layer named:\"";
	      };
	     };
	     ProgArg @[1] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="b";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="lay_nm";
	      };
	     };
	     ProgArg @[2] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="c";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="\"not found in network:\"";
	      };
	     };
	     ProgArg @[3] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="d";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="network.name";
	      };
	     };
	     ProgArg @[4] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="e";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[5] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="f";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[6] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="g";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[7] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="h";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[8] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="i";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	    };
	   };
	   IfContinue @[1] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="continue";
	    cond {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	  };
	 };
	 AssignExpr @[5] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="prjn = lay.projections.FindName(prjn_nm)";
	  result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["ProjectionsOnOff"].fun_code[0].local_vars["prjn"]$$;
	  expr {
	   user_data_=NULL;
	   expr="lay.projections.FindName(prjn_nm)";
	  };
	 };
	 If @[6] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (!prjn)";
	  cond {
	   user_data_=NULL;
	   expr="!prjn";
	  };
	  true_code {
	   user_data_=NULL;
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MiscCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="taMisc::Error(\"projection named:\", prjn_nm, \"not found in layer:\", lay.name, , , , , )";
	    result_var=NULL;
	    object_type=taMisc;
	    method=taMisc::Error;
	    meth_args {
	     user_data_=NULL;
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="a";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="\"projection named:\"";
	      };
	     };
	     ProgArg @[1] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="b";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="prjn_nm";
	      };
	     };
	     ProgArg @[2] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="c";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="\"not found in layer:\"";
	      };
	     };
	     ProgArg @[3] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="d";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="lay.name";
	      };
	     };
	     ProgArg @[4] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="e";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[5] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="f";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[6] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="g";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[7] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="h";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	     ProgArg @[8] {
	      user_data_=NULL;
	      arg_type=const_taString_ref;
	      type="taString&";
	      name="i";
	      required=0;
	      def_val="\"\"";
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr=;
	      };
	     };
	    };
	   };
	   IfContinue @[1] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="continue";
	    cond {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	  };
	 };
	 MemberAssign @[7] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="prjn.off = !prjn_on";
	  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["ProjectionsOnOff"].fun_code[0].local_vars["prjn"]$;
	  path="off";
	  expr {
	   user_data_=NULL;
	   expr="!prjn_on";
	  };
	  update_after=1;
	 };
	};
	el_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["ProjectionsOnOff"].fun_code[0].local_vars["prjn_nm"]$;
	in {
	 user_data_=NULL;
	 expr="les_prjns_mat";
	};
       };
      };
     };
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     FunctionCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="UnlesionAll()";
      result_var=NULL;
      fun=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["UnlesionAll"]$$;
      fun_args {
       user_data_=NULL;
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     FunctionCall @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerGpsOnOff(lesion_layer_groups, false)";
      result_var=NULL;
      fun=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayerGpsOnOff"]$$;
      fun_args {
       user_data_=NULL;
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=taString;
	type="String";
	name="laygps";
	required=1;
	def_val=;
	prev_expr="lesion_layer_groups";
	expr {
	 user_data_=NULL;
	 expr="lesion_layer_groups";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="lay_gp_on";
	required=1;
	def_val=;
	prev_expr="true";
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
     };
     FunctionCall @[3] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LayersOnOff(lesion_layers, false)";
      result_var=NULL;
      fun=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["LayersOnOff"]$$;
      fun_args {
       user_data_=NULL;
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=taString;
	type="String";
	name="lays";
	required=1;
	def_val=;
	prev_expr="lesion_layers";
	expr {
	 user_data_=NULL;
	 expr="lesion_layers";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="lay_on";
	required=1;
	def_val=;
	prev_expr="true";
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
     };
     FunctionCall @[4] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ProjectionsOnOff(lesion_prjns, false)";
      result_var=NULL;
      fun=.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["ProjectionsOnOff"]$$;
      fun_args {
       user_data_=NULL;
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=taString;
	type="String";
	name="prjns";
	required=1;
	def_val=;
	prev_expr="lesion_prjns";
	expr {
	 user_data_=NULL;
	 expr="lesion_prjns";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="prjn_on";
	required=1;
	def_val=;
	prev_expr="true";
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
     };
     FunctionCall @[5] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ProjectionsOnOff(un_lesion_prjns, true)";
      result_var=NULL;
      fun=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].functions["ProjectionsOnOff"]$;
      fun_args {
       user_data_=NULL;
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=taString;
	type="String";
	name="prjns";
	required=1;
	def_val=;
	prev_expr="un_lesion_prjns";
	expr {
	 user_data_=NULL;
	 expr="un_lesion_prjns";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="prjn_on";
	required=1;
	def_val=;
	prev_expr="false";
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
     };
     MethodCall @[6] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Build()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].args["network"]$;
      method=Network::Build;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Build()";
      meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->UpdtAfterNetMod()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["ConfigNetwork"].args["network"]$;
      method=Network::UpdtAfterNetMod;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void UpdtAfterNetMod()";
      meth_desc=" update network after any network modification (calls appropriate functions)";
     };
     PrintExpr @[8] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print \"Cons: \" << network.n_cons << \" Units: \" << network.n_units";
      expr {
       user_data_=NULL;
       expr="\"Cons: \" << network.n_cons << \" Units: \" << network.n_units";
      };
      debug=0;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["PositionLayersFromTable"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].doc$$;
     };
    };
    name="PositionLayersFromTable";
    short_nm="PstLyr";
    tags="Network, Layer, Position";
    desc="positions network layers according to a data table with positions -- can use either absolute or group-relative coordinates, including non-structural groups";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
     DataTable @["LayerLayout"] {
      user_data_=NULL;
      name="LayerLayout";
      desc=;
      data {
       user_data_=NULL;
       name="data";
       el_typ=int_Data;
       el_def=0;
       String_Data @["LayerName"] {
	user_data_=NULL;
	name="LayerName";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=16;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] "Input";"Hidden";"Output";	};
       };
       String_Data @["LayerGroup"] {
	user_data_=NULL;
	name="LayerGroup";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=16;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] ;;;	};
       };
       String_Data @["LayoutGroup"] {
	user_data_=NULL;
	name="LayoutGroup";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=16;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] ;;;	};
       };
       int_Data @["X_Abs"] {
	user_data_=NULL;
	name="X_Abs";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] 0;0;0;	};
       };
       int_Data @["Y_Abs"] {
	user_data_=NULL;
	name="Y_Abs";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] 0;0;0;	};
       };
       int_Data @["Z_Abs"] {
	user_data_=NULL;
	name="Z_Abs";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] 0;1;2;	};
       };
       int_Data @["X_Rel"] {
	user_data_=NULL;
	name="X_Rel";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] 0;0;0;	};
       };
       int_Data @["Y_Rel"] {
	user_data_=NULL;
	name="Y_Rel";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] 0;0;0;	};
       };
       int_Data @["Z_Rel"] {
	user_data_=NULL;
	name="Z_Rel";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] 0;1;2;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      row_height=1;
      max_col_width=50;
      keygen 4 0=0;
      row_indexes {
       user_data_=NULL;
       name="row_indexes";
      [3] 0;1;2;      };
      last_sort_spec {
       user_data_=NULL;
       name="last_sort_spec";
       ops {
	user_data_=NULL;
	name="ops";
	el_typ=DataSortEl;
	el_def=0;
       };
      };
      row_with_hilite=-1;
      control_panel_cells {
       user_data_=NULL;
       name="control_panel_cells";
       el_typ=DataTableCell;
       el_def=0;
      };
     };
     DataTable @["LayerLayout_previous"] {
      user_data_=NULL;
      name="LayerLayout_previous";
      desc=;
      data {
       user_data_=NULL;
       name="data";
       el_typ=int_Data;
       el_def=0;
       String_Data @["LayerName"] {
	user_data_=NULL;
	name="LayerName";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=16;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] "Input";"Hidden";"Output";	};
       };
       String_Data @["LayerGroup"] {
	user_data_=NULL;
	name="LayerGroup";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=16;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] ;;;	};
       };
       String_Data @["LayoutGroup"] {
	user_data_=NULL;
	name="LayoutGroup";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=16;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] ;;;	};
       };
       int_Data @["X_Abs"] {
	user_data_=NULL;
	name="X_Abs";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] 0;0;0;	};
       };
       int_Data @["Y_Abs"] {
	user_data_=NULL;
	name="Y_Abs";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] 0;0;0;	};
       };
       int_Data @["Z_Abs"] {
	user_data_=NULL;
	name="Z_Abs";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] 0;1;2;	};
       };
       int_Data @["X_Rel"] {
	user_data_=NULL;
	name="X_Rel";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] 0;0;0;	};
       };
       int_Data @["Y_Rel"] {
	user_data_=NULL;
	name="Y_Rel";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] 0;0;0;	};
       };
       int_Data @["Z_Rel"] {
	user_data_=NULL;
	name="Z_Rel";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 user_data_=NULL;
	 expr=;
	};
	dim_names {
	 user_data_=NULL;
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 user_data_=NULL;
	 name="ar";
	[3] 0;1;2;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      row_height=1;
      max_col_width=50;
      keygen 4 0=0;
      row_indexes {
       user_data_=NULL;
       name="row_indexes";
      [3] 0;1;2;      };
      last_sort_spec {
       user_data_=NULL;
       name="last_sort_spec";
       ops {
	user_data_=NULL;
	name="ops";
	el_typ=DataSortEl;
	el_def=0;
       };
      };
      row_with_hilite=-1;
      control_panel_cells {
       user_data_=NULL;
       name="control_panel_cells";
       el_typ=DataTableCell;
       el_def=0;
      };
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @["ActionType"] {
      user_data_=NULL;
      name="ActionType";
      desc=;
      enums {
       user_data_=NULL;
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @["GetCurrentPos"] {
	user_data_=NULL;
	name="GetCurrentPos";
	value=0;
	desc="get current layer positions into table";
       };
       DynEnumItem @["SetPositions"] {
	user_data_=NULL;
	name="SetPositions";
	value=1;
	desc="set layer positions based on table";
       };
      };
      bits=0;
     };
     DynEnumType @["UseGroup"] {
      user_data_=NULL;
      name="UseGroup";
      desc=;
      enums {
       user_data_=NULL;
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @["IgnoreGroup"] {
	user_data_=NULL;
	name="IgnoreGroup";
	value=0;
	desc="ignore any group information, and just use absolute positions";
       };
       DynEnumItem @["LayerGroup"] {
	user_data_=NULL;
	name="LayerGroup";
	value=1;
	desc="use layer-group relative positions -- X_Rel etc in table";
       };
       DynEnumItem @["LayoutGroup"] {
	user_data_=NULL;
	name="LayoutGroup";
	value=2;
	desc="use layout groups which are out side the structure of the model -- uses relative positions relative to these layout group offsets";
       };
      };
      bits=0;
     };
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["action"] {
      user_data_=NULL;
      name="action";
      var_type=T_DynEnum;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].types["ActionType"]$$;
       value=0;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["use_group"] {
      user_data_=NULL;
      name="use_group";
      var_type=T_DynEnum;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].types["UseGroup"]$$;
       value=0;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["LayerLayout"] {
      user_data_=NULL;
      name="LayerLayout";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].objs["LayerLayout"]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["LayerLayout_previous"] {
      user_data_=NULL;
      name="LayerLayout_previous";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].objs["LayerLayout_previous"]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["GetCurrent"] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="GetCurrent() returns: int";
      name="GetCurrent";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name="ProgVar_List_1";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       user_data_=NULL;
       name="ProgEl_List_62";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (4 vars)";
	local_vars {
	 user_data_=NULL;
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @["leaf"] {
	  user_data_=NULL;
	  name="leaf";
	  var_type=T_Int;
	  int_val=0;
	  object_scope=NULL;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["current_layer"] {
	  user_data_=NULL;
	  name="current_layer";
	  var_type=T_Object;
	  object_type=Layer;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc="current_layer = NULL (Layer)";
	  init_from=NULL;
	 };
	 ProgVar @["net_layers"] {
	  user_data_=NULL;
	  name="net_layers";
	  var_type=T_Object;
	  object_type=Layer_Group;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["layer_group"] {
	  user_data_=NULL;
	  name="layer_group";
	  var_type=T_Object;
	  object_type=Layer_Group;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	};
       };
       MethodCall @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LayerLayout_previous->CopyFrom(LayerLayout)";
	result_var=NULL;
	obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].vars["LayerLayout_previous"]$$;
	method=taBase::CopyFrom;
	meth_args {
	 user_data_=NULL;
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=const_taBase_ptr;
	  type="taBase*";
	  name="cpy_from";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout";
	  };
	 };
	};
	meth_sig="bool CopyFrom(taBase* cpy_from)";
	meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
       };
       MethodCall @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LayerLayout->RemoveAllRows()";
	result_var=NULL;
	obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].vars["LayerLayout"]$$;
	method=DataTable::RemoveAllRows;
	meth_args {
	 user_data_=NULL;
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void RemoveAllRows()";
	meth_desc=" remove all of the rows of data, but keep the column structure";
       };
       AssignExpr @[3] {
	user_data_=NULL;
	desc="all of the layers";
	flags=CAN_REVERT_TO_CODE;
	code_string="net_layers = network.layers";
	result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["GetCurrent"].fun_code[0].local_vars["net_layers"]$$;
	expr {
	 user_data_=NULL;
	 expr="network.layers";
	};
       };
       Comment @[4] {
	user_data_=NULL;
	desc="first get all the layer groups";
	flags=CAN_REVERT_TO_CODE;
	code_string="// first get all the layer groups";
       };
       ForeachLoop @[5] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="foreach(layer_group in net_layers.gp)";
	loop_code {
	 user_data_=NULL;
	 name="loop_code";
	 el_typ=ProgCode;
	 el_def=0;
	 MethodCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout->AddBlankRow()";
	  result_var=NULL;
	  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].vars["LayerLayout"]$;
	  method=DataTable::AddBlankRow;
	  meth_args {
	   user_data_=NULL;
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="int AddBlankRow()";
	  meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
	 };
	 CssExpr @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout[\"LayerGroup\"][-1] = layer_group.name;";
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout[\"LayerGroup\"][-1] = layer_group.name;";
	  };
	 };
	 CssExpr @[2] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout[\"X_Abs\"][-1] = layer_group.pos.x;";
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout[\"X_Abs\"][-1] = layer_group.pos.x;";
	  };
	 };
	 CssExpr @[3] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout[\"Y_Abs\"][-1] = layer_group.pos.y;";
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout[\"Y_Abs\"][-1] = layer_group.pos.y;";
	  };
	 };
	 CssExpr @[4] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout[\"Z_Abs\"][-1] = layer_group.pos.z;";
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout[\"Z_Abs\"][-1] = layer_group.pos.z;";
	  };
	 };
	};
	el_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["GetCurrent"].fun_code[0].local_vars["layer_group"]$$;
	in {
	 user_data_=NULL;
	 expr="net_layers.gp";
	};
       };
       ForLoop @[6] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="for (leaf=0; leaf <net_layers.leaves; leaf++)";
	loop_code {
	 user_data_=NULL;
	 name="loop_code";
	 el_typ=ProgCode;
	 el_def=0;
	 MethodCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout->AddBlankRow()";
	  result_var=NULL;
	  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].vars["LayerLayout"]$;
	  method=DataTable::AddBlankRow;
	  meth_args {
	   user_data_=NULL;
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="int AddBlankRow()";
	  meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
	 };
	 AssignExpr @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="current_layer = net_layers.Leaf(leaf)";
	  result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["current_layer"]$$;
	  expr {
	   user_data_=NULL;
	   expr="net_layers.Leaf(leaf)";
	  };
	 };
	 CssExpr @[2] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout[\"LayerName\"][-1] = current_layer.name;";
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout[\"LayerName\"][-1] = current_layer.name;";
	  };
	 };
	 If @[3] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (current_layer.InLayerSubGroup())";
	  cond {
	   user_data_=NULL;
	   expr="current_layer.InLayerSubGroup()";
	  };
	  true_code {
	   user_data_=NULL;
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   CssExpr @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="LayerLayout[\"LayerGroup\"][-1] = current_layer.GetOwner().name;";
	    expr {
	     user_data_=NULL;
	     expr="LayerLayout[\"LayerGroup\"][-1] = current_layer.GetOwner().name;";
	    };
	   };
	  };
	 };
	 CssExpr @[4] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout[\"X_Abs\"][-1] = current_layer.pos_abs.x;";
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout[\"X_Abs\"][-1] = current_layer.pos_abs.x;";
	  };
	 };
	 CssExpr @[5] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout[\"Y_Abs\"][-1] = current_layer.pos_abs.y;";
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout[\"Y_Abs\"][-1] = current_layer.pos_abs.y;";
	  };
	 };
	 CssExpr @[6] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout[\"Z_Abs\"][-1] = current_layer.pos_abs.z;";
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout[\"Z_Abs\"][-1] = current_layer.pos_abs.z;";
	  };
	 };
	 CssExpr @[7] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout[\"X_Rel\"][-1] = current_layer.pos.x;";
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout[\"X_Rel\"][-1] = current_layer.pos.x;";
	  };
	 };
	 CssExpr @[8] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout[\"Y_Rel\"][-1] = current_layer.pos.y;";
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout[\"Y_Rel\"][-1] = current_layer.pos.y;";
	  };
	 };
	 CssExpr @[9] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LayerLayout[\"Z_Rel\"][-1] = current_layer.pos.z;";
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout[\"Z_Rel\"][-1] = current_layer.pos.z;";
	  };
	 };
	};
	init {
	 user_data_=NULL;
	 expr="leaf=0";
	};
	test {
	 user_data_=NULL;
	 expr="leaf <net_layers.leaves";
	};
	iter {
	 user_data_=NULL;
	 expr="leaf++";
	};
       };
      };
     };
     Function @["SetPos"] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="SetPos() returns: int";
      name="SetPos";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name="ProgVar_List_1";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       user_data_=NULL;
       name="ProgEl_List_66";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (9 vars)";
	local_vars {
	 user_data_=NULL;
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	 ProgVar @["row"] {
	  user_data_=NULL;
	  name="row";
	  var_type=T_Int;
	  int_val=0;
	  object_scope=NULL;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["current_layer"] {
	  user_data_=NULL;
	  name="current_layer";
	  var_type=T_Object;
	  object_type=Layer;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["layer_name"] {
	  user_data_=NULL;
	  name="layer_name";
	  var_type=T_String;
	  string_val=;
	  object_scope=NULL;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["layer_group"] {
	  user_data_=NULL;
	  name="layer_group";
	  var_type=T_Object;
	  object_type=Layer_Group;
	  object_val=NULL;
	  object_scope=NULL;
	  objs_ptr=0;
	  flags=LOCAL_VAR|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["group_name"] {
	  user_data_=NULL;
	  name="group_name";
	  var_type=T_String;
	  string_val=;
	  object_scope=NULL;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["lgrow"] {
	  user_data_=NULL;
	  name="lgrow";
	  var_type=T_Int;
	  int_val=0;
	  object_scope=NULL;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["lg_x"] {
	  user_data_=NULL;
	  name="lg_x";
	  var_type=T_Int;
	  int_val=0;
	  object_scope=NULL;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["lg_y"] {
	  user_data_=NULL;
	  name="lg_y";
	  var_type=T_Int;
	  int_val=0;
	  object_scope=NULL;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	 ProgVar @["lg_z"] {
	  user_data_=NULL;
	  name="lg_z";
	  var_type=T_Int;
	  int_val=0;
	  object_scope=NULL;
	  flags=LOCAL_VAR|USED|EDIT_VAL;
	  reference=0;
	  desc=;
	  init_from=NULL;
	 };
	};
       };
       ForLoop @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="for (row = 0; row <LayerLayout.rows; row++)";
	loop_code {
	 user_data_=NULL;
	 name="loop_code";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="layer_name = LayerLayout[\"LayerName\"][row]";
	  result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["layer_name"]$$;
	  expr {
	   user_data_=NULL;
	   expr="LayerLayout[\"LayerName\"][row]";
	  };
	 };
	 IfContinue @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if(layer_name.empty()) continue";
	  cond {
	   user_data_=NULL;
	   expr="layer_name.empty()";
	  };
	 };
	 AssignExpr @[2] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="current_layer = network.FindLayer(layer_name)";
	  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["current_layer"]$;
	  expr {
	   user_data_=NULL;
	   expr="network.FindLayer(layer_name)";
	  };
	 };
	 If @[3] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (current_layer)";
	  cond {
	   user_data_=NULL;
	   expr="current_layer";
	  };
	  true_code {
	   user_data_=NULL;
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   Switch @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="switch(use_group)";
	    switch_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].args["use_group"]$$;
	    cases {
	     user_data_=NULL;
	     name="cases";
	     el_typ=CaseBlock;
	     el_def=0;
	     CaseBlock @[0] {
	      user_data_=NULL;
	      desc=;
	      flags=CAN_REVERT_TO_CODE;
	      code_string="case: IgnoreGroup";
	      prog_code {
	       user_data_=NULL;
	       name="prog_code";
	       el_typ=ProgCode;
	       el_def=0;
	       MethodCall @[0] {
		user_data_=NULL;
		desc=;
		flags=CAN_REVERT_TO_CODE;
		code_string="current_layer->SetAbsPos(LayerLayout[\"X_Abs\"][row], LayerLayout[\"Y_Abs\"][row], LayerLayout[\"Z_Abs\"][row])";
		result_var=NULL;
		obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["current_layer"]$;
		method=Layer::SetAbsPos;
		meth_args {
		 user_data_=NULL;
		 name="meth_args";
		 el_typ=ProgArg;
		 el_def=0;
		 ProgArg @[0] {
		  user_data_=NULL;
		  arg_type=int;
		  type="int";
		  name="x";
		  required=1;
		  def_val=;
		  prev_expr=;
		  expr {
		   user_data_=NULL;
		   expr="LayerLayout[\"X_Abs\"][row]";
		  };
		 };
		 ProgArg @[1] {
		  user_data_=NULL;
		  arg_type=int;
		  type="int";
		  name="y";
		  required=1;
		  def_val=;
		  prev_expr=;
		  expr {
		   user_data_=NULL;
		   expr="LayerLayout[\"Y_Abs\"][row]";
		  };
		 };
		 ProgArg @[2] {
		  user_data_=NULL;
		  arg_type=int;
		  type="int";
		  name="z";
		  required=1;
		  def_val=;
		  prev_expr=;
		  expr {
		   user_data_=NULL;
		   expr="LayerLayout[\"Z_Abs\"][row]";
		  };
		 };
		};
		meth_sig="void SetAbsPos(int x, int y, int z)";
		meth_desc=" set absolute position of layer, regardless of whether it is in a layer group or not - always relative to network 0,0,0";
	       };
	      };
	      case_val {
	       user_data_=NULL;
	       expr="IgnoreGroup";
	      };
	      is_default=0;
	     };
	     CaseBlock @[1] {
	      user_data_=NULL;
	      desc=;
	      flags=CAN_REVERT_TO_CODE;
	      code_string="case: LayerGroup";
	      prog_code {
	       user_data_=NULL;
	       name="prog_code";
	       el_typ=ProgCode;
	       el_def=0;
	       AssignExpr @[0] {
		user_data_=NULL;
		desc=;
		flags=CAN_REVERT_TO_CODE;
		code_string="group_name = LayerLayout[\"LayerGroup\"][row]";
		result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["group_name"]$$;
		expr {
		 user_data_=NULL;
		 expr="LayerLayout[\"LayerGroup\"][row]";
		};
	       };
	       If @[1] {
		user_data_=NULL;
		desc=;
		flags=CAN_REVERT_TO_CODE;
		code_string="if (group_name.nonempty())";
		cond {
		 user_data_=NULL;
		 expr="group_name.nonempty()";
		};
		true_code {
		 user_data_=NULL;
		 name="true_code";
		 el_typ=ProgCode;
		 el_def=0;
		 MethodCall @[0] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lgrow = LayerLayout->FindVal(group_name, \"LayerGroup\", 0, true)";
		  result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lgrow"]$$;
		  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].vars["LayerLayout"]$;
		  method=DataTable::FindVal;
		  meth_args {
		   user_data_=NULL;
		   name="meth_args";
		   el_typ=ProgArg;
		   el_def=0;
		   ProgArg @[0] {
		    user_data_=NULL;
		    arg_type=const_Variant_ref;
		    type="Variant&";
		    name="val";
		    required=1;
		    def_val=;
		    prev_expr=;
		    expr {
		     user_data_=NULL;
		     expr="group_name";
		    };
		   };
		   ProgArg @[1] {
		    user_data_=NULL;
		    arg_type=const_Variant_ref;
		    type="Variant&";
		    name="col";
		    required=1;
		    def_val=;
		    prev_expr=;
		    expr {
		     user_data_=NULL;
		     expr="\"LayerGroup\"";
		    };
		   };
		   ProgArg @[2] {
		    user_data_=NULL;
		    arg_type=int;
		    type="int";
		    name="st_row";
		    required=0;
		    def_val="0";
		    prev_expr=;
		    expr {
		     user_data_=NULL;
		     expr="0";
		    };
		   };
		   ProgArg @[3] {
		    user_data_=NULL;
		    arg_type=bool;
		    type="bool";
		    name="not_found_err";
		    required=0;
		    def_val="false";
		    prev_expr=;
		    expr {
		     user_data_=NULL;
		     expr="true";
		    };
		   };
		  };
		  meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
		  meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
		 };
		 AssignExpr @[1] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lg_x = LayerLayout[\"X_Abs\"][lgrow]";
		  result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_x"]$$;
		  expr {
		   user_data_=NULL;
		   expr="LayerLayout[\"X_Abs\"][lgrow]";
		  };
		 };
		 AssignExpr @[2] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lg_y = LayerLayout[\"Y_Abs\"][lgrow]";
		  result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_y"]$$;
		  expr {
		   user_data_=NULL;
		   expr="LayerLayout[\"Y_Abs\"][lgrow]";
		  };
		 };
		 AssignExpr @[3] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lg_z = LayerLayout[\"Z_Abs\"][lgrow]";
		  result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_z"]$$;
		  expr {
		   user_data_=NULL;
		   expr="LayerLayout[\"Z_Abs\"][lgrow]";
		  };
		 };
		};
	       };
	       Else @[2] {
		user_data_=NULL;
		desc=;
		flags=CAN_REVERT_TO_CODE;
		code_string="else";
		cond {
		 user_data_=NULL;
		 expr=;
		};
		true_code {
		 user_data_=NULL;
		 name="else_code";
		 el_typ=ProgCode;
		 el_def=0;
		 AssignExpr @[0] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lg_x = 0";
		  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_x"]$;
		  expr {
		   user_data_=NULL;
		   expr="0";
		  };
		 };
		 AssignExpr @[1] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lg_y = 0";
		  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_y"]$;
		  expr {
		   user_data_=NULL;
		   expr="0";
		  };
		 };
		 AssignExpr @[2] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lg_z = 0";
		  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_z"]$;
		  expr {
		   user_data_=NULL;
		   expr="0";
		  };
		 };
		};
	       };
	       MethodCall @[3] {
		user_data_=NULL;
		desc=;
		flags=CAN_REVERT_TO_CODE;
		code_string="current_layer->SetAbsPos(lg_x + LayerLayout[\"X_Rel\"][row], lg_y + LayerLayout[\"Y_Rel\"][row], lg_z + LayerLayout[\"Z_Rel\"][row])";
		result_var=NULL;
		obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["current_layer"]$;
		method=Layer::SetAbsPos;
		meth_args {
		 user_data_=NULL;
		 name="meth_args";
		 el_typ=ProgArg;
		 el_def=0;
		 ProgArg @[0] {
		  user_data_=NULL;
		  arg_type=int;
		  type="int";
		  name="x";
		  required=1;
		  def_val=;
		  prev_expr=;
		  expr {
		   user_data_=NULL;
		   expr="lg_x + LayerLayout[\"X_Rel\"][row]";
		  };
		 };
		 ProgArg @[1] {
		  user_data_=NULL;
		  arg_type=int;
		  type="int";
		  name="y";
		  required=1;
		  def_val=;
		  prev_expr=;
		  expr {
		   user_data_=NULL;
		   expr="lg_y + LayerLayout[\"Y_Rel\"][row]";
		  };
		 };
		 ProgArg @[2] {
		  user_data_=NULL;
		  arg_type=int;
		  type="int";
		  name="z";
		  required=1;
		  def_val=;
		  prev_expr=;
		  expr {
		   user_data_=NULL;
		   expr="lg_z + LayerLayout[\"Z_Rel\"][row]";
		  };
		 };
		};
		meth_sig="void SetAbsPos(int x, int y, int z)";
		meth_desc=" set absolute position of layer, regardless of whether it is in a layer group or not - always relative to network 0,0,0";
	       };
	      };
	      case_val {
	       user_data_=NULL;
	       expr="LayerGroup";
	      };
	      is_default=0;
	     };
	     CaseBlock @[2] {
	      user_data_=NULL;
	      desc=;
	      flags=CAN_REVERT_TO_CODE;
	      code_string="case: LayoutGroup";
	      prog_code {
	       user_data_=NULL;
	       name="prog_code";
	       el_typ=ProgCode;
	       el_def=0;
	       AssignExpr @[0] {
		user_data_=NULL;
		desc=;
		flags=CAN_REVERT_TO_CODE;
		code_string="group_name = LayerLayout[\"LayoutGroup\"][row]";
		result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["group_name"]$;
		expr {
		 user_data_=NULL;
		 expr="LayerLayout[\"LayoutGroup\"][row]";
		};
	       };
	       If @[1] {
		user_data_=NULL;
		desc=;
		flags=CAN_REVERT_TO_CODE;
		code_string="if (group_name.nonempty())";
		cond {
		 user_data_=NULL;
		 expr="group_name.nonempty()";
		};
		true_code {
		 user_data_=NULL;
		 name="true_code";
		 el_typ=ProgCode;
		 el_def=0;
		 MethodCall @[0] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lgrow = LayerLayout->FindVal(group_name, \"LayoutGroup\", 0, true)";
		  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lgrow"]$;
		  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].vars["LayerLayout"]$;
		  method=DataTable::FindVal;
		  meth_args {
		   user_data_=NULL;
		   name="meth_args";
		   el_typ=ProgArg;
		   el_def=0;
		   ProgArg @[0] {
		    user_data_=NULL;
		    arg_type=const_Variant_ref;
		    type="Variant&";
		    name="val";
		    required=1;
		    def_val=;
		    prev_expr=;
		    expr {
		     user_data_=NULL;
		     expr="group_name";
		    };
		   };
		   ProgArg @[1] {
		    user_data_=NULL;
		    arg_type=const_Variant_ref;
		    type="Variant&";
		    name="col";
		    required=1;
		    def_val=;
		    prev_expr=;
		    expr {
		     user_data_=NULL;
		     expr="\"LayoutGroup\"";
		    };
		   };
		   ProgArg @[2] {
		    user_data_=NULL;
		    arg_type=int;
		    type="int";
		    name="st_row";
		    required=0;
		    def_val="0";
		    prev_expr=;
		    expr {
		     user_data_=NULL;
		     expr="0";
		    };
		   };
		   ProgArg @[3] {
		    user_data_=NULL;
		    arg_type=bool;
		    type="bool";
		    name="not_found_err";
		    required=0;
		    def_val="false";
		    prev_expr=;
		    expr {
		     user_data_=NULL;
		     expr="true";
		    };
		   };
		  };
		  meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
		  meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
		 };
		 AssignExpr @[1] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lg_x = LayerLayout[\"X_Abs\"][lgrow]";
		  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_x"]$;
		  expr {
		   user_data_=NULL;
		   expr="LayerLayout[\"X_Abs\"][lgrow]";
		  };
		 };
		 AssignExpr @[2] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lg_y = LayerLayout[\"Y_Abs\"][lgrow]";
		  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_y"]$;
		  expr {
		   user_data_=NULL;
		   expr="LayerLayout[\"Y_Abs\"][lgrow]";
		  };
		 };
		 AssignExpr @[3] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lg_z = LayerLayout[\"Z_Abs\"][lgrow]";
		  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_z"]$;
		  expr {
		   user_data_=NULL;
		   expr="LayerLayout[\"Z_Abs\"][lgrow]";
		  };
		 };
		};
	       };
	       Else @[2] {
		user_data_=NULL;
		desc=;
		flags=CAN_REVERT_TO_CODE;
		code_string="else";
		cond {
		 user_data_=NULL;
		 expr=;
		};
		true_code {
		 user_data_=NULL;
		 name="else_code";
		 el_typ=ProgCode;
		 el_def=0;
		 AssignExpr @[0] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lg_x = 0";
		  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_x"]$;
		  expr {
		   user_data_=NULL;
		   expr="0";
		  };
		 };
		 AssignExpr @[1] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lg_y = 0";
		  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_y"]$;
		  expr {
		   user_data_=NULL;
		   expr="0";
		  };
		 };
		 AssignExpr @[2] {
		  user_data_=NULL;
		  desc=;
		  flags=CAN_REVERT_TO_CODE;
		  code_string="lg_z = 0";
		  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["lg_z"]$;
		  expr {
		   user_data_=NULL;
		   expr="0";
		  };
		 };
		};
	       };
	       MethodCall @[3] {
		user_data_=NULL;
		desc=;
		flags=CAN_REVERT_TO_CODE;
		code_string="current_layer->SetAbsPos(lg_x + LayerLayout[\"X_Rel\"][row], lg_y + LayerLayout[\"Y_Rel\"][row], lg_z + LayerLayout[\"Z_Rel\"][row])";
		result_var=NULL;
		obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"].fun_code[0].local_vars["current_layer"]$;
		method=Layer::SetAbsPos;
		meth_args {
		 user_data_=NULL;
		 name="meth_args";
		 el_typ=ProgArg;
		 el_def=0;
		 ProgArg @[0] {
		  user_data_=NULL;
		  arg_type=int;
		  type="int";
		  name="x";
		  required=1;
		  def_val=;
		  prev_expr=;
		  expr {
		   user_data_=NULL;
		   expr="lg_x + LayerLayout[\"X_Rel\"][row]";
		  };
		 };
		 ProgArg @[1] {
		  user_data_=NULL;
		  arg_type=int;
		  type="int";
		  name="y";
		  required=1;
		  def_val=;
		  prev_expr=;
		  expr {
		   user_data_=NULL;
		   expr="lg_y + LayerLayout[\"Y_Rel\"][row]";
		  };
		 };
		 ProgArg @[2] {
		  user_data_=NULL;
		  arg_type=int;
		  type="int";
		  name="z";
		  required=1;
		  def_val=;
		  prev_expr=;
		  expr {
		   user_data_=NULL;
		   expr="lg_z + LayerLayout[\"Z_Rel\"][row]";
		  };
		 };
		};
		meth_sig="void SetAbsPos(int x, int y, int z)";
		meth_desc=" set absolute position of layer, regardless of whether it is in a layer group or not - always relative to network 0,0,0";
	       };
	      };
	      case_val {
	       user_data_=NULL;
	       expr="LayoutGroup";
	      };
	      is_default=0;
	     };
	    };
	   };
	  };
	 };
	};
	init {
	 user_data_=NULL;
	 expr="row = 0";
	};
	test {
	 user_data_=NULL;
	 expr="row <LayerLayout.rows";
	};
	iter {
	 user_data_=NULL;
	 expr="row++";
	};
       };
       MethodCall @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	result_var=NULL;
	obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].args["network"]$$;
	method=LeabraNetwork::Build;
	meth_args {
	 user_data_=NULL;
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
      };
     };
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     Switch @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="switch(action)";
      switch_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].args["action"]$$;
      cases {
       user_data_=NULL;
       name="cases";
       el_typ=CaseBlock;
       el_def=0;
       CaseBlock @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="case: GetCurrentPos";
	prog_code {
	 user_data_=NULL;
	 name="prog_code";
	 el_typ=ProgCode;
	 el_def=0;
	 FunctionCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="GetCurrent()";
	  result_var=NULL;
	  fun=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["GetCurrent"]$$;
	  fun_args {
	   user_data_=NULL;
	   name="fun_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
	case_val {
	 user_data_=NULL;
	 expr="GetCurrentPos";
	};
	is_default=0;
       };
       CaseBlock @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="case: SetPositions";
	prog_code {
	 user_data_=NULL;
	 name="prog_code";
	 el_typ=ProgCode;
	 el_def=0;
	 FunctionCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="SetPos()";
	  result_var=NULL;
	  fun=.projects["LeabraFlex"].programs.gp["UtilProgs"]["PositionLayersFromTable"].functions["SetPos"]$$;
	  fun_args {
	   user_data_=NULL;
	   name="fun_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
	case_val {
	 user_data_=NULL;
	 expr="SetPositions";
	};
	is_default=0;
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["NetworkToggleLesion"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["NetworkToggleLesion"].doc$$;
     };
    };
    name="NetworkToggleLesion";
    short_nm="NtwTgg";
    tags=;
    desc="toggle lesion status on or off in network -- for dynamic speedup..";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=String_Matrix;
     el_def=0;
     String_Matrix @["les_lay_mat"] {
      user_data_=NULL;
      name="les_lay_mat";
     [4] "V1Low";"SC";"Eye";"Head";     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="required for the batch counter";
      init_from=NULL;
     };
     ProgVar @["lesion_layers"] {
      user_data_=NULL;
      name="lesion_layers";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="a space delimited list of layer group names to lesion or unlesion";
      init_from=NULL;
     };
     ProgVar @["lesion"] {
      user_data_=NULL;
      name="lesion";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="if true, lesion the layer groups, otherwise unlesion them";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["les_lay_mat"] {
      user_data_=NULL;
      name="les_lay_mat";
      var_type=T_Object;
      object_type=String_Matrix;
      object_val=.projects["LeabraFlex"].programs.gp["UtilProgs"]["NetworkToggleLesion"].objs["les_lay_mat"]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["i"] {
      user_data_=NULL;
      name="i";
      var_type=T_Int;
      int_val=4;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["laygp_nm"] {
      user_data_=NULL;
      name="laygp_nm";
      var_type=T_String;
      string_val="Head";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["laygp"] {
      user_data_=NULL;
      name="laygp";
      var_type=T_Object;
      object_type=Layer_Group;
      object_val=NULL;
      object_scope=NULL;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="get into easier to use matrix format";
      flags=CAN_REVERT_TO_CODE;
      code_string="les_lay_mat->FmDelimString(lesion_layers, \" \")";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["NetworkToggleLesion"].vars["les_lay_mat"]$$;
      method=String_Matrix::FmDelimString;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="str";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="lesion_layers";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="delim";
	required=0;
	def_val=" ";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\" \"";
	};
       };
      };
      meth_sig="void FmDelimString(taString& str, taString& delim =  )";
      meth_desc=" fill this matrix by parsing given string using given delimiter separating strings -- increases size as necessary to fit everything";
     };
     ForLoop @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (i = 0; i < les_lay_mat.size; i++)";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="laygp_nm = les_lay_mat->SafeEl_Flat(i)";
	result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["NetworkToggleLesion"].vars["laygp_nm"]$$;
	obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["NetworkToggleLesion"].vars["les_lay_mat"]$;
	method=taMatrixT_taString_::SafeEl_Flat;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=int;
	  type="int";
	  name="idx";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="i";
	  };
	 };
	};
	meth_sig="taString_ref SafeEl_Flat(int idx)";
	meth_desc=" (safely) access the matrix as if it were a flat vector, for reading";
       };
       MemberMethodCall @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="laygp = network.layers.gp.FindName(laygp_nm)";
	obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["NetworkToggleLesion"].args["network"]$$;
	path="layers.gp";
	result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["NetworkToggleLesion"].vars["laygp"]$$;
	method=taGroup_Layer_::FindName;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="item_nm";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="laygp_nm";
	  };
	 };
	};
	meth_sig="Layer_ptr FindName(taString& item_nm)";
	meth_desc=" Find element in top-level list with given name (nm) (NULL = not here)";
       };
       If @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (!laygp)";
	cond {
	 user_data_=NULL;
	 expr="!laygp";
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 MiscCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="taMisc::Error(\"layer group named:\", laygp_nm, \"not found in network:\", network.name, , , , , )";
	  result_var=NULL;
	  object_type=taMisc;
	  method=taMisc::Error;
	  meth_args {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="a";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr="\"layer group named:\"";
	    };
	   };
	   ProgArg @[1] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="b";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr="laygp_nm";
	    };
	   };
	   ProgArg @[2] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="c";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr="\"not found in network:\"";
	    };
	   };
	   ProgArg @[3] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="d";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr="network.name";
	    };
	   };
	   ProgArg @[4] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="e";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	   ProgArg @[5] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="f";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	   ProgArg @[6] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="g";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	   ProgArg @[7] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="h";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	   ProgArg @[8] {
	    user_data_=NULL;
	    arg_type=const_taString_ref;
	    type="taString&";
	    name="i";
	    required=0;
	    def_val="\"\"";
	    prev_expr=;
	    expr {
	     user_data_=NULL;
	     expr=;
	    };
	   };
	  };
	 };
	 IfContinue @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="continue";
	  cond {
	   user_data_=NULL;
	   expr=;
	  };
	 };
	};
       };
       If @[3] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (lesion)";
	cond {
	 user_data_=NULL;
	 expr="lesion";
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 MethodCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="laygp->LesionLayers()";
	  result_var=NULL;
	  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["NetworkToggleLesion"].vars["laygp"]$;
	  method=Layer_Group::LesionLayers;
	  meth_args {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void LesionLayers()";
	  meth_desc=" set the lesion flag on all the layers within this group -- removes them from all processing operations";
	 };
	};
       };
       Else @[4] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 user_data_=NULL;
	 expr=;
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 MethodCall @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="laygp->UnLesionLayers()";
	  result_var=NULL;
	  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["NetworkToggleLesion"].vars["laygp"]$;
	  method=Layer_Group::UnLesionLayers;
	  meth_args {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void UnLesionLayers()";
	  meth_desc=" un-set the lesion flag on all the layers within this group -- restores them to engage in normal processing";
	 };
	};
       };
      };
      init {
       user_data_=NULL;
       expr="i = 0";
      };
      test {
       user_data_=NULL;
       expr="i < les_lay_mat.size";
      };
      iter {
       user_data_=NULL;
       expr="i++";
      };
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->UpdtAfterNetMod()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["NetworkToggleLesion"].args["network"]$;
      method=Network::UpdtAfterNetMod;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void UpdtAfterNetMod()";
      meth_desc=" update network after any network modification (calls appropriate functions)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["TrainStart"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].doc$$;
     };
    };
    name="TrainStart";
    short_nm="TrnStart";
    tags=;
    desc="basic stuff (init weights, load weights etc) at start of training -- also calls EpochStart -- most init progs will call this";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="randy.oreilly@colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
     RndSeed @["dmem_rnd_seed"] {
      user_data_=NULL;
      name="dmem_rnd_seed";
      rnd_seed=1439355325;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["dmem_rnd_seed"] {
      user_data_=NULL;
      name="dmem_rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].objs["dmem_rnd_seed"]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["load_weights"] {
      user_data_=NULL;
      name="load_weights";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="load initial weights from a file (specified in weights_file)";
      init_from=NULL;
     };
     ProgVar @["weights_file"] {
      user_data_=NULL;
      name="weights_file";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="full relative path (from project) of weights file to load -- use CRR: prefix to load from cluster run results directory";
      init_from=NULL;
     };
     ProgVar @["load_st_epc"] {
      user_data_=NULL;
      name="load_st_epc";
      var_type=T_Int;
      int_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="after loading weights, reset epoch counter to this value (-1 = leave at value from the loaded weights)";
      init_from=NULL;
     };
     ProgVar @["lrs_step_epochs"] {
      user_data_=NULL;
      name="lrs_step_epochs";
      var_type=T_Int;
      int_val=50;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="learning rate schedule epochs per step of decrease in learning rate";
      init_from=NULL;
     };
     ProgVar @["lrs_n_steps"] {
      user_data_=NULL;
      name="lrs_n_steps";
      var_type=T_Int;
      int_val=7;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of steps in the learning rate schedule";
      init_from=NULL;
     };
     ProgVar @["lrs_bump_step"] {
      user_data_=NULL;
      name="lrs_bump_step";
      var_type=T_Int;
      int_val=-1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if positive (3 is typical), then bump up the learning rate at this step in the schedule -- can help improve final performance level";
      init_from=NULL;
     };
     ProgVar @["LRSConSpec"] {
      user_data_=NULL;
      name="LRSConSpec";
      var_type=T_Object;
      object_type=LeabraConSpec;
      object_val=$.projects["LeabraFlex"].networks["Network_0"].specs["LeabraConSpec_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["dmem_new_seed"] {
      user_data_=NULL;
      name="dmem_new_seed";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="when running under dmem (MPI), generate a new random seed for each node after common initialization, to cause each node to have different random events, etc.   It is now possible to add taMisc::dmem_proc to the thr_no args to any random functions, and achieve fully reproducible results without this randomization.";
      init_from=NULL;
     };
     ProgVar @["train_epochs"] {
      user_data_=NULL;
      name="train_epochs";
      var_type=T_Int;
      int_val=50;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="number of epochs to train network for";
      init_from=NULL;
     };
     ProgVar @["trials_per_epoch"] {
      user_data_=NULL;
      name="trials_per_epoch";
      var_type=T_Int;
      int_val=50;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of trials per epoch";
      init_from=NULL;
     };
     ProgVar @["trials_per_epoch_eff"] {
      user_data_=NULL;
      name="trials_per_epoch_eff";
      var_type=T_Int;
      int_val=50;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="effective value, taking into account number of MPI processors";
      init_from=NULL;
     };
     ProgVar @["test_run"] {
      user_data_=NULL;
      name="test_run";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="is this a testing-only run, no training?";
      init_from=NULL;
     };
     ProgVar @["test_interval"] {
      user_data_=NULL;
      name="test_interval";
      var_type=T_Int;
      int_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="how frequently (epochs) to run a test during training";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["DMemSafeTrialsPerEpoch"] {
      user_data_=NULL;
      desc=;
      flags=NEW_EL;
      code_string=;
      name="DMemSafeTrialsPerEpoch";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name="ProgVar_List_1";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       user_data_=NULL;
       name="ProgEl_List_295";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=0;
	code_string=;
	local_vars {
	 user_data_=NULL;
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       AssignExpr @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="trials_per_epoch_orig = trials_per_epoch";
	result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["trials_per_epoch_eff"]$$;
	expr {
	 user_data_=NULL;
	 expr="trials_per_epoch";
	};
       };
       If @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (taMisc::dmem_nprocs > 1)";
	cond {
	 user_data_=NULL;
	 expr="taMisc::dmem_nprocs > 1";
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  user_data_=NULL;
	  desc="dmem means that each guy does less -- uses randomization to get good mix across processors";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="trials_per_epoch = trials_per_epoch / taMisc::dmem_nprocs";
	  result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["trials_per_epoch_eff"]$;
	  expr {
	   user_data_=NULL;
	   expr="trials_per_epoch / taMisc::dmem_nprocs";
	  };
	 };
	 If @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (trials_per_epoch * taMisc::dmem_nprocs < trials_per_epoch_orig)";
	  cond {
	   user_data_=NULL;
	   expr="trials_per_epoch_eff * taMisc::dmem_nprocs < trials_per_epoch";
	  };
	  true_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    user_data_=NULL;
	    desc="round up..";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="trials_per_epoch += 1";
	    var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["trials_per_epoch_eff"]$;
	    expr {
	     user_data_=NULL;
	     expr="1";
	    };
	   };
	  };
	 };
	};
       };
      };
     };
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     FunctionCall @[0] {
      user_data_=NULL;
      desc=;
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="DMemSafeTrialsPerEpoch()";
      result_var=NULL;
      fun=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].functions["DMemSafeTrialsPerEpoch"]$$;
      fun_args {
       user_data_=NULL;
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="BatchRndSeed(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["LeabraFlex"].programs.gp["UtilProgs"]["BatchRndSeed"]$$;
      targ_ld_init="*BatchRndSeed*";
     };
     If @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if(!network->IsBuiltIntact())";
      cond {
       user_data_=NULL;
       expr="!network->IsBuiltIntact()";
      };
      true_code {
       user_data_=NULL;
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="needs to have been built by now..";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	result_var=NULL;
	obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].args["network"]$$;
	method=Network::Build;
	meth_args {
	 user_data_=NULL;
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
      };
     };
     If @[3] {
      user_data_=NULL;
      desc="save log files for background, non-interactive jobs -- after network is fully configured and built";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (!taMisc::interactive)";
      cond {
       user_data_=NULL;
       expr="!taMisc::interactive";
      };
      true_code {
       user_data_=NULL;
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="SaveLogFiles(network)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["SaveLogFiles"]$$;
	targ_ld_init="*SaveLogFiles*";
       };
      };
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="initialize network weights: could also load pre-set weights or something else here";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_Weights()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].args["network"]$;
      method=Network::Init_Weights;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Weights()";
      meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
     };
     PrintExpr @[5] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print network.name << \" Weights Initialized\"";
      expr {
       user_data_=NULL;
       expr="network.name << \" Weights Initialized\"";
      };
      debug=0;
     };
     If @[6] {
      user_data_=NULL;
      desc="Load  weights if file is specified";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (load_weights && weights_file.nonempty())";
      cond {
       user_data_=NULL;
       expr="load_weights && weights_file.nonempty()";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="Load weights from the specified file";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->LoadWeights(weights_file, false)";
	result_var=NULL;
	obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].args["network"]$;
	method=Network::LoadWeights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="fname";
	  required=0;
	  def_val="\"\"";
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="weights_file";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=bool;
	  type="bool";
	  name="quiet";
	  required=0;
	  def_val="false";
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="false";
	  };
	 };
	};
	meth_sig="bool LoadWeights(taString& fname, bool quiet = false)";
	meth_desc=" read weight values in from a simple ordered list of weights (fmt is read from file) (leave fname empty to pull up file chooser)";
       };
       PrintVar @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print  \"loaded weights file:\" weights_file";
	message="loaded weights file:";
	print_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["weights_file"]$;
	print_var2=NULL;
	print_var3=NULL;
	print_var4=NULL;
	print_var5=NULL;
	print_var6=NULL;
	debug=0;
       };
       If @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if(load_st_epc >= 0)";
	cond {
	 user_data_=NULL;
	 expr="load_st_epc >= 0";
	};
	true_code {
	 user_data_=NULL;
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 MemberAssign @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="network.epoch = load_st_epc";
	  obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].args["network"]$;
	  path="epoch";
	  expr {
	   user_data_=NULL;
	   expr="load_st_epc";
	  };
	  update_after=1;
	 };
	};
       };
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LRSConSpec->LogLrateSched(lrs_step_epochs, 7)";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["LRSConSpec"]$$;
      method=LeabraConSpec::LogLrateSched;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="epcs_per_step";
	required=0;
	def_val="50";
	prev_expr="lrs_step_epochs";
	expr {
	 user_data_=NULL;
	 expr="lrs_step_epochs";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="n_steps";
	required=0;
	def_val="5";
	prev_expr="7";
	expr {
	 user_data_=NULL;
	 expr="lrs_n_steps";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="bump_step";
	required=0;
	def_val="-1";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="lrs_bump_step";
	};
       };
      };
      meth_sig="void LogLrateSched(int epcs_per_step = 50, int n_steps = 5, int bump_step = -1)";
      meth_desc=" establish a logarithmic learning rate schedule with given total number of steps (including first step at lrate) and epochs per step: numbers go down in sequence: 1, .5, .2, .1, .05, .02, .01, etc.. this is a particularly good lrate schedule for large nets on hard tasks -- if bump_step > 0 (3 is a good default), the lrate bumps back up to 1 and back down to that step level, and then proceeds from there -- this can pop a model out of a local minimum and result in better final performance";
     };
     If @[8] {
      user_data_=NULL;
      desc="if dmem, then from here on out, processors diverge so that lists of objs per processor are different!";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (dmem_new_seed && taMisc::dmem_nprocs > 1)";
      cond {
       user_data_=NULL;
       expr="dmem_new_seed && taMisc::dmem_nprocs > 1";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	flags=CAN_REVERT_TO_CODE;
	code_string="dmem_rnd_seed->NewSeed()";
	result_var=NULL;
	obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainStart"].vars["dmem_rnd_seed"]$$;
	method=RndSeed::NewSeed;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void NewSeed()";
	meth_desc=" set the seed to a new random value (based on time and process id)";
       };
      };
     };
     ProgramCall @[9] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="EpochStart(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochStart"]$;
      targ_ld_init="*EpochStart*";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrain";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrain";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["TrainEnd"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainEnd"].doc$$;
     };
    };
    name="TrainEnd";
    short_nm="TrnEnd";
    tags=;
    desc="end training -- save weights if needed, compute final summary stats -- and set stop_train";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["save_final_wts"] {
      user_data_=NULL;
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="should final weights after training is complete be saved?";
      init_from=NULL;
     };
     ProgVar @["Train"] {
      user_data_=NULL;
      name="Train";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["LeabraFlex"].programs.gp["ConfigProgs"]["MasterTrain"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (save_final_wts)";
      cond {
       user_data_=NULL;
       expr="save_final_wts";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="Always save weights at the end";
	flags=CAN_REVERT_TO_CODE;
	code_string="SaveWeights(network)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["SaveWeights"]$;
	targ_ld_init="*SaveWeights*";
       };
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="stop training!";
      flags=CAN_REVERT_TO_CODE;
      code_string="Train->SetVar(\"stop_train\", true)";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrainEnd"].vars["Train"]$$;
      method=Program::SetVar;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="var_nm";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"stop_train\"";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="value";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="bool SetVar(taString& var_nm, Variant& value)";
      meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrain";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrain";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["EpochStart"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochStart"].doc$$;
     };
    };
    name="EpochStart";
    short_nm="EpcStart";
    tags=;
    desc="Start a new epoch";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["LeabraFlex"].data.gp["OutputData"]["TrialOutputData"]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["BasicTrainTime"] {
      user_data_=NULL;
      name="BasicTrainTime";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["LeabraFlex"].programs.gp["TaskProgs"]["BasicTrain"].objs["BasicTrainTime"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MemberAssign @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network.trial = 0";
      obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochStart"].args["network"]$$;
      path="trial";
      expr {
       user_data_=NULL;
       expr="0";
      };
      update_after=0;
     };
     MemberMethodCall @[1] {
      user_data_=NULL;
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.epoch_time.StartTimer(true)";
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochStart"].args["network"]$;
      path="epoch_time";
      result_var=NULL;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="keep other time info on an epoch basis";
      flags=CAN_REVERT_TO_CODE;
      code_string="BasicTrainTime->ResetUsed()";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochStart"].vars["BasicTrainTime"]$$;
      method=TimeUsed::ResetUsed;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetUsed()";
      meth_desc=" reset time used information";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochStart"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="added in 8.0: essential for param_seqs";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network->Init_Epoch()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochStart"].args["network"]$;
      method=Network::Init_Epoch;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Epoch()";
      meth_desc=" Initializes network state at the start of a new epoch -- updates parameters according to param_seq for example";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["EpochEnd"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochEnd"].doc$$;
     };
    };
    name="EpochEnd";
    short_nm="EpcEnd";
    tags=;
    desc="end of epoch -- relnet and basic stats compute, calls only the core standard monitor, save weights if doing that";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["save_wts_interval"] {
      user_data_=NULL;
      name="save_wts_interval";
      var_type=T_Int;
      int_val=200;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how frequently (epochs) to save weights during training";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochEnd"].args["network"]$$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MemberMethodCall @[1] {
      user_data_=NULL;
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.epoch_time.EndTimer()";
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["EpochEnd"].args["network"]$;
      path="epoch_time";
      result_var=NULL;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     If @[3] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network->epoch % save_wts_interval == 0 && network->epoch > 0)";
      cond {
       user_data_=NULL;
       expr="network->epoch % save_wts_interval == 0 && network->epoch > 0";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="SaveWeights(network)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["SaveWeights"]$;
	targ_ld_init="*SaveWeightsSpecs*";
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["TrialStart"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialStart"].doc$$;
     };
    };
    name="TrialStart";
    short_nm="TrStrt";
    tags=;
    desc="start of trial before any input data applied -- prepares for input data to be applied (Init_InputData)";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialStart"].args["network"]$$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     If @[1] {
      user_data_=NULL;
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       user_data_=NULL;
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       user_data_=NULL;
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="update the weight values -- do this at start so that dwt value is valid at end of trial";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialStart"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialStart"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     MemberAssign @[3] {
      user_data_=NULL;
      desc="start at 0 cycle";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.cycle = 0";
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialStart"].args["network"]$;
      path="cycle";
      expr {
       user_data_=NULL;
       expr="0";
      };
      update_after=0;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["TrialEnd"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialEnd"].doc$$;
     };
    };
    name="TrialEnd";
    short_nm="TrlEnd";
    tags=;
    desc="standard end-of-trial code -- no monitor calls at all";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="after the trial is over, do final computations: Compute_AbsRelNetin";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialEnd"].args["network"]$$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     NetUpdateView @[1] {
      user_data_=NULL;
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialEnd"].args["network"]$;
      update_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["TrialEnd"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["SettleMinus"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SettleMinus"].doc$$;
     };
    };
    name="SettleMinus";
    short_nm="SetlMin";
    tags=;
    desc="settle network in the minus phase -- enough different logic in two phases to warrant making them separate";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on settles";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["qtr"] {
	user_data_=NULL;
	name="qtr";
	var_type=T_Int;
	int_val=1;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     ForLoop @[1] {
      user_data_=NULL;
      desc=;
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 3; qtr++)";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the cycle program, which computes one cycle of activations";
	flags=CAN_REVERT_TO_CODE;
	code_string="Quarter(network)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr="network";
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"]$$;
	targ_ld_init="*Quarter*";
       };
      };
      init {
       user_data_=NULL;
       expr="qtr = 0";
      };
      test {
       user_data_=NULL;
       expr="qtr < 3";
      };
      iter {
       user_data_=NULL;
       expr="qtr++";
      };
     };
     NetUpdateView @[2] {
      user_data_=NULL;
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SettleMinus"].args["network"]$$;
      update_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SettleMinus"].vars["update_net_view"]$$;
     };
    };
    step_prog=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"]$;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["SettlePlus"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SettlePlus"].doc$$;
     };
    };
    name="SettlePlus";
    short_nm="SttPls";
    tags=;
    desc="settle network in the minus phase -- enough different logic in two phases to warrant making them separate";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on settles";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     ProgramCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Quarter(network)";
      prog_args {
       user_data_=NULL;
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"]$;
      targ_ld_init="*Quarter*";
     };
     NetUpdateView @[2] {
      user_data_=NULL;
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SettlePlus"].args["network"]$$;
      update_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SettlePlus"].vars["update_net_view"]$$;
     };
    };
    step_prog=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"]$;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["Trial"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Trial"].doc$$;
     };
    };
    name="Trial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["qtr"] {
	user_data_=NULL;
	name="qtr";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      user_data_=NULL;
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       user_data_=NULL;
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Trial"].args["network"]$$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Trial"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     ForLoop @[4] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="Quarter(network)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr="network";
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"]$;
	targ_ld_init="*Quarter*";
       };
      };
      init {
       user_data_=NULL;
       expr="qtr = 0";
      };
      test {
       user_data_=NULL;
       expr="qtr < 4";
      };
      iter {
       user_data_=NULL;
       expr="qtr++";
      };
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Trial"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     NetUpdateView @[6] {
      user_data_=NULL;
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Trial"].args["network"]$;
      update_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Trial"].vars["update_net_view"]$;
     };
    };
    step_prog=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"]$;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["Quarter"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"].doc$$;
     };
    };
    name="Quarter";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      user_data_=NULL;
      name="cycle";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"].args["network"]$$;
      local_ctr_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["cycle_max"] {
	user_data_=NULL;
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cyc"] {
	user_data_=NULL;
	name="cyc";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"].args["network"]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"].prog_code[0].local_vars["cycle_max"]$$;
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"].args["network"]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[4] {
      user_data_=NULL;
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="Cycle(network)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"]$;
	targ_ld_init="*Cycle*";
       };
       AssignExpr @[1] {
	user_data_=NULL;
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"].vars["cycle"]$;
	expr {
	 user_data_=NULL;
	 expr="network.cycle";
	};
       };
      };
      init {
       user_data_=NULL;
       expr="cyc=0";
      };
      test {
       user_data_=NULL;
       expr="cyc<cycle_max";
      };
      iter {
       user_data_=NULL;
       expr="cyc++";
      };
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"].args["network"]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     NetUpdateView @[6] {
      user_data_=NULL;
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"].args["network"]$;
      update_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Quarter"].vars["update_net_view"]$;
     };
    };
    step_prog=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"]$;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["Cycle"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"].doc$$;
     };
    };
    name="Cycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      user_data_=NULL;
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"].args["network"]$;
      update_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"].vars["update_net_view"]$;
     };
     MemberAssign @[2] {
      user_data_=NULL;
      desc="IMPORTANT: Cycle_Run() now updates cycle by itself, and can run multiple cycles!";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network.cycle = network.cycle + 1";
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["Cycle"].args["network"]$;
      path="cycle";
      expr {
       user_data_=NULL;
       expr="network.cycle + 1";
      };
      update_after=0;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["SaveWeights"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SaveWeights"].doc$$;
     };
    };
    name="SaveWeights";
    short_nm="SWghts";
    tags="Weights, Specs";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values

also save specs.";
    version {
     user_data_=NULL;
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["tag"] {
      user_data_=NULL;
      name="tag";
      var_type=T_String;
      string_val="_BasicTrain_BasicTrain_basic_train";
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user defined tag (set by startup script)";
      init_from=NULL;
     };
     ProgVar @["wts_subdir"] {
      user_data_=NULL;
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @["fname"] {
      user_data_=NULL;
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/emergent/test/LeabraFlexParamSetExperiment_basic_train.00_0050.wts.gz";
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["epoch_str"] {
      user_data_=NULL;
      name="epoch_str";
      var_type=T_String;
      string_val="0050";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["batch_str"] {
      user_data_=NULL;
      name="batch_str";
      var_type=T_String;
      string_val="00";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["final_tag"] {
      user_data_=NULL;
      name="final_tag";
      var_type=T_String;
      string_val="_basic_train.00_0050";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      user_data_=NULL;
      desc=;
      flags=0;
      code_string=;
      cond {
       user_data_=NULL;
       expr="taMisc::dmem_proc > 0";
      };
      true_code {
       user_data_=NULL;
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ReturnExpr @[0] {
	user_data_=NULL;
	desc=;
	flags=0;
	code_string=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
     };
     MiscCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="batch_str = taMisc::LeadingZeros(network.batch, 2)";
      result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SaveWeights"].vars["batch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_str = taMisc::LeadingZeros(network.epoch, 4)";
      result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SaveWeights"].vars["epoch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="final_tag = tag + \".\" + batch_str + \"_\" + epoch_str";
      result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SaveWeights"].vars["final_tag"]$$;
      expr {
       user_data_=NULL;
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="fname = network->GetFileNameFmProject(\".wts.gz\", final_tag, wts_subdir, false)";
      result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SaveWeights"].vars["fname"]$$;
      obj=.projects["LeabraFlex"].programs.gp["UtilProgs"]["SaveWeights"].args["network"]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->SaveWeights(fname, Network::NET_FMT)";
      result_var=NULL;
      obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"]["SaveWeights"].args["network"]$;
      method=Network::SaveWeights;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="fname";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="SaveWeights";
     full_url="https://grey.colorado.edu/emergent/index.php/SaveWeights";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program_Group @.gp["Monitors"] {
    user_data_=NULL;
    name="Monitors";
    el_typ=Program;
    el_def=0;
    tags=;
    desc=;
    debug_mode=0;
    Program @["SaveLogFiles"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name=;
      el_typ=UserData_DocLink;
      el_def=0;
      UserData_DocLink @["DocLink"] {
       user_data_=NULL;
       name="DocLink";
       doc=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["SaveLogFiles"].doc$$;
      };
     };
     name="SaveLogFiles";
     short_nm="SLFls";
     tags="Leabra, Startup";
     desc="startup args specifically for fixation training parameters";
     version {
      user_data_=NULL;
      major=0;
      minor=0;
      step=0;
     };
     author=;
     email=;
     flags=NO_STOP_STEP;
     stop_step_cond {
      user_data_=NULL;
      expr=;
     };
     objs {
      user_data_=NULL;
      name="objs";
      el_typ=taNBase;
      el_def=0;
     };
     types {
      user_data_=NULL;
      name="types";
      el_typ=DynEnumType;
      el_def=0;
     };
     args {
      user_data_=NULL;
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["network"] {
       user_data_=NULL;
       name="network";
       var_type=T_Object;
       object_type=LeabraNetwork;
       object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
       reference=0;
       desc="network to operate on -- updates batch counter on network and passes it to train program";
       init_from=NULL;
      };
     };
     vars {
      user_data_=NULL;
      name="vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["tag"] {
       user_data_=NULL;
       name="tag";
       var_type=T_String;
       string_val="_BasicTrain_BasicTrain_basic_train";
       object_scope=NULL;
       flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
       reference=0;
       desc=;
       init_from=$.projects["LeabraFlex"].programs["MasterStartup"]$;
      };
      ProgVar @["log_trials"] {
       user_data_=NULL;
       name="log_trials";
       var_type=T_Bool;
       bool_val=0;
       object_scope=NULL;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="should trial-level data be saved to log files?";
       init_from=NULL;
      };
      ProgVar @["log_dir"] {
       user_data_=NULL;
       name="log_dir";
       var_type=T_String;
       string_val=;
       object_scope=NULL;
       flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="log file directory";
       init_from=NULL;
      };
      ProgVar @["log_file_nm"] {
       user_data_=NULL;
       name="log_file_nm";
       var_type=T_String;
       string_val=;
       object_scope=NULL;
       flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="name of log file";
       init_from=NULL;
      };
      ProgVar @["epoch_output_data"] {
       user_data_=NULL;
       name="epoch_output_data";
       var_type=T_Object;
       object_type=DataTable;
       object_val=$.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @["trial_output_data"] {
       user_data_=NULL;
       name="trial_output_data";
       var_type=T_Object;
       object_type=DataTable;
       object_val=$.projects["LeabraFlex"].data.gp["OutputData"]["TrialOutputData"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     functions {
      user_data_=NULL;
      name="functions";
      el_typ=Function;
      el_def=0;
     };
     init_code {
      user_data_=NULL;
      name="init_code";
      el_typ=ProgCode;
      el_def=0;
     };
     prog_code {
      user_data_=NULL;
      name="prog_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (0 vars)";
       local_vars {
	user_data_=NULL;
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
       };
      };
      If @[1] {
       user_data_=NULL;
       desc=;
       flags=0;
       code_string=;
       cond {
	user_data_=NULL;
	expr="epoch_output_data.IsSavingDataLog()";
       };
       true_code {
	user_data_=NULL;
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	ReturnExpr @[0] {
	 user_data_=NULL;
	 desc=;
	 flags=0;
	 code_string=;
	 expr {
	  user_data_=NULL;
	  expr=;
	 };
	};
       };
      };
      MethodCall @[2] {
       user_data_=NULL;
       desc="last arg is to include dmem proc number";
       flags=CAN_REVERT_TO_CODE;
       code_string="log_file_nm = epoch_output_data->GetFileNameFmProject(\".trn_epc.dat\", tag, log_dir, false)";
       result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["SaveLogFiles"].vars["log_file_nm"]$$;
       obj=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["SaveLogFiles"].vars["epoch_output_data"]$$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	user_data_=NULL;
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="\".trn_epc.dat\"";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="tag";
	 };
	};
	ProgArg @[2] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="false";
	 };
	};
       };
       meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
       meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
      };
      MethodCall @[3] {
       user_data_=NULL;
       desc="last arg is to restrict log to dmem_proc = 0";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_output_data->SaveDataLog(log_file_nm, false, true)";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["SaveLogFiles"].vars["epoch_output_data"]$;
       method=DataTable::SaveDataLog;
       meth_args {
	user_data_=NULL;
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="log_file_nm";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="append";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="false";
	 };
	};
	ProgArg @[2] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_0";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="true";
	 };
	};
       };
       meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
       meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
      };
      PrintVar @[4] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print  \"Saving epoch log data to:\" log_file_nm";
       message="Saving epoch log data to:";
       print_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["SaveLogFiles"].vars["log_file_nm"]$;
       print_var2=NULL;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
       debug=0;
      };
      If @[5] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (log_trials)";
       cond {
	user_data_=NULL;
	expr="log_trials";
       };
       true_code {
	user_data_=NULL;
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 user_data_=NULL;
	 desc="last arg is to include dmem proc number";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="log_file_nm = trial_output_data->GetFileNameFmProject(\".trn_trl.dat\", tag, log_dir, true)";
	 result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["SaveLogFiles"].vars["log_file_nm"]$;
	 obj=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["SaveLogFiles"].vars["trial_output_data"]$$;
	 method=taBase::GetFileNameFmProject;
	 meth_args {
	  user_data_=NULL;
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="ext";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="\".trn_trl.dat\"";
	   };
	  };
	  ProgArg @[1] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="tag";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="tag";
	   };
	  };
	  ProgArg @[2] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="subdir";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="log_dir";
	   };
	  };
	  ProgArg @[3] {
	   user_data_=NULL;
	   arg_type=bool;
	   type="bool";
	   name="dmem_proc_no";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="true";
	   };
	  };
	 };
	 meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
	 meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
	};
	MethodCall @[1] {
	 user_data_=NULL;
	 desc="last arg is to restrict log to dmem_proc = 0";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="trial_output_data->SaveDataLog(log_file_nm, false, false)";
	 result_var=NULL;
	 obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["SaveLogFiles"].vars["trial_output_data"]$;
	 method=DataTable::SaveDataLog;
	 meth_args {
	  user_data_=NULL;
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="fname";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="log_file_nm";
	   };
	  };
	  ProgArg @[1] {
	   user_data_=NULL;
	   arg_type=bool;
	   type="bool";
	   name="append";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="false";
	   };
	  };
	  ProgArg @[2] {
	   user_data_=NULL;
	   arg_type=bool;
	   type="bool";
	   name="dmem_proc_0";
	   required=0;
	   def_val="true";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="false";
	   };
	  };
	 };
	 meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
	 meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
	};
	PrintVar @[2] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="Print  \"Saving trial log data to:\" log_file_nm";
	 message="Saving trial log data to:";
	 print_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["SaveLogFiles"].vars["log_file_nm"]$;
	 print_var2=NULL;
	 print_var3=NULL;
	 print_var4=NULL;
	 print_var5=NULL;
	 print_var6=NULL;
	 debug=0;
	};
       };
      };
     };
     step_prog=NULL;
     step_n=1;
     doc {
      user_data_=NULL;
      name="doc";
      desc=;
      web_doc=0;
      wiki=;
      url="local";
      full_url="local";
      text_size=1;
      text=;
      html_text=;
     };
    };
    Program @["LeabraTrialMonitor"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name=;
      el_typ=UserData_DocLink;
      el_def=0;
      UserData_DocLink @["DocLink"] {
       user_data_=NULL;
       name="DocLink";
       doc=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].doc$$;
      };
     };
     name="LeabraTrialMonitor";
     short_nm="TrialMon";
     tags="Leabra, Std, Monitor";
     desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
     version {
      user_data_=NULL;
      major=0;
      minor=0;
      step=0;
     };
     author="Randall C. O'Reilly";
     email="emergent-users@grey.colorado.edu";
     flags=NO_STOP_STEP;
     stop_step_cond {
      user_data_=NULL;
      expr=;
     };
     objs {
      user_data_=NULL;
      name="objs";
      el_typ=NetMonitor;
      el_def=0;
      NetMonitor @["trial_netmon"] {
       user_data_=NULL;
       name="trial_netmon";
       items {
	user_data_=NULL;
	name="items";
	el_typ=NetMonItem;
	el_def=0;
	NetMonItem @["batch"] {
	 user_data_=NULL;
	 name="batch";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="batch";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["epoch"] {
	 user_data_=NULL;
	 name="epoch";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="epoch";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["train_mode"] {
	 user_data_=NULL;
	 name="train_mode";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="train_mode";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["group"] {
	 user_data_=NULL;
	 name="group";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="group";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["trial"] {
	 user_data_=NULL;
	 name="trial";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="trial";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["tick"] {
	 user_data_=NULL;
	 name="tick";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="tick";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["time"] {
	 user_data_=NULL;
	 name="time";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="time";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["trial_name"] {
	 user_data_=NULL;
	 name="trial_name";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="trial_name";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["group_name"] {
	 user_data_=NULL;
	 name="group_name";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="group_name";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["output_name"] {
	 user_data_=NULL;
	 name="output_name";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="minus_output_name";
	 var_label=;
	 name_style=MY_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["rt_cycles"] {
	 user_data_=NULL;
	 name="rt_cycles";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="rt_cycles";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["sse"] {
	 user_data_=NULL;
	 name="sse";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="sse";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["norm_err"] {
	 user_data_=NULL;
	 name="norm_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="norm_err";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["cos_err"] {
	 user_data_=NULL;
	 name="cos_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="cos_err";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["ext_rew"] {
	 user_data_=NULL;
	 name="ext_rew";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="ext_rew";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_sse"] {
	 user_data_=NULL;
	 name="lay_sse";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.sse";
	 var_label="lay_sse";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_bin_err"] {
	 user_data_=NULL;
	 name="lay_bin_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.bin_err";
	 var_label="lay_bin_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_norm_err"] {
	 user_data_=NULL;
	 name="lay_norm_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.norm_err";
	 var_label="lay_norm_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_cos_err"] {
	 user_data_=NULL;
	 name="lay_cos_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.cos_err";
	 var_label="lay_cos_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_net_sd"] {
	 user_data_=NULL;
	 name="lay_net_sd";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.net_sd";
	 var_label="lay_net_sd";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["net_cos_diff"] {
	 user_data_=NULL;
	 name="net_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="cos_diff";
	 var_label="net_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["net_trial_cos_diff"] {
	 user_data_=NULL;
	 name="net_trial_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="trial_cos_diff";
	 var_label="net_trial_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["net_avg_act_diff"] {
	 user_data_=NULL;
	 name="net_avg_act_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_act_diff";
	 var_label="net_avg_act_diff";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["cos_diff"] {
	 user_data_=NULL;
	 name="cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.cos_diff";
	 var_label="cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["trial_cos_diff"] {
	 user_data_=NULL;
	 name="trial_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.trial_cos_diff";
	 var_label="trial_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_act_diff"] {
	 user_data_=NULL;
	 name="avg_act_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_act_diff";
	 var_label="avg_act_diff";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
       };
       network=$.projects["LeabraFlex"].networks["Network_0"]$;
       data=$.projects["LeabraFlex"].data.gp["OutputData"]["TrialOutputData"]$;
       rmv_orphan_cols=1;
      };
     };
     types {
      user_data_=NULL;
      name="types";
      el_typ=DynEnumType;
      el_def=0;
     };
     args {
      user_data_=NULL;
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["network"] {
       user_data_=NULL;
       name="network";
       var_type=T_Object;
       object_type=Network;
       object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
       reference=0;
       desc="network to record data from";
       init_from=NULL;
      };
     };
     vars {
      user_data_=NULL;
      name="vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["trial_mon_data"] {
       user_data_=NULL;
       name="trial_mon_data";
       var_type=T_Object;
       object_type=DataTable;
       object_val=$.projects["LeabraFlex"].data.gp["OutputData"]["TrialOutputData"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="data table to record trial-level data to (this program writes new data to this table!)";
       init_from=NULL;
      };
      ProgVar @["trial_netmon"] {
       user_data_=NULL;
       name="trial_netmon";
       var_type=T_Object;
       object_type=NetMonitor;
       object_val=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].objs["trial_netmon"]$$;
       object_scope=NULL;
       objs_ptr=1;
       flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
       init_from=NULL;
      };
      ProgVar @["run_already"] {
       user_data_=NULL;
       name="run_already";
       var_type=T_Bool;
       bool_val=0;
       object_scope=NULL;
       flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     functions {
      user_data_=NULL;
      name="functions";
      el_typ=Function;
      el_def=0;
     };
     init_code {
      user_data_=NULL;
      name="init_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       user_data_=NULL;
       desc="set the network and datatable for the NetMonitor";
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
       result_var=NULL;
       obj=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].vars["trial_netmon"]$$;
       method=NetMonitor::SetDataNetwork;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="dt";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="trial_mon_data";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=Network_ptr;
	 type="Network*";
	 name="net";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="network";
	 };
	};
       };
       meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
       meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
      };
      MethodCall @[1] {
       user_data_=NULL;
       desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_netmon->CheckConfig(false)";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
       method=taBase::CheckConfig;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="quiet";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="false";
	 };
	};
       };
       meth_sig="bool CheckConfig(bool quiet = false)";
       meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
      };
      MethodCall @[2] {
       user_data_=NULL;
       desc="update the monitor items and data schema based on current settings of the NetMonitor object";
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_netmon->UpdateMonitors(true)";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
       method=NetMonitor::UpdateMonitors;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="reset_first";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="true";
	 };
	};
       };
       meth_sig="void UpdateMonitors(bool reset_first = false)";
       meth_desc=" old name for UpdateDataTable";
      };
      AssignExpr @[3] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="run_already = false";
       result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].vars["run_already"]$$;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
     };
     prog_code {
      user_data_=NULL;
      name="prog_code";
      el_typ=ProgCode;
      el_def=0;
      If @[0] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (!run_already)";
       cond {
	user_data_=NULL;
	expr="!run_already";
       };
       true_code {
	user_data_=NULL;
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 user_data_=NULL;
	 desc="set the network and datatable for the NetMonitor";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
	 result_var=NULL;
	 obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
	 method=NetMonitor::SetDataNetwork;
	 meth_args {
	  user_data_=NULL;
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="dt";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="trial_mon_data";
	   };
	  };
	  ProgArg @[1] {
	   user_data_=NULL;
	   arg_type=Network_ptr;
	   type="Network*";
	   name="net";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="network";
	   };
	  };
	 };
	 meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
	 meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
	};
	MethodCall @[1] {
	 user_data_=NULL;
	 desc="update the monitor items and data schema based on current settings of the NetMonitor object";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="trial_netmon->UpdateMonitors(true)";
	 result_var=NULL;
	 obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
	 method=NetMonitor::UpdateMonitors;
	 meth_args {
	  user_data_=NULL;
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=bool;
	   type="bool";
	   name="reset_first";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="true";
	   };
	  };
	 };
	 meth_sig="void UpdateMonitors(bool reset_first = false)";
	 meth_desc=" old name for UpdateDataTable";
	};
	AssignExpr @[2] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="run_already = true";
	 result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].vars["run_already"]$;
	 expr {
	  user_data_=NULL;
	  expr="true";
	 };
	};
       };
      };
      MethodCall @[1] {
       user_data_=NULL;
       desc="add a new blank row to the data";
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_mon_data->AddBlankRow()";
       result_var=NULL;
       obj=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].vars["trial_mon_data"]$$;
       method=DataTable::AddBlankRow;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="int AddBlankRow()";
       meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
      };
      MethodCall @[2] {
       user_data_=NULL;
       desc="get the new monitor data from the network and other sources -- this does the main work";
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_netmon->GetMonVals()";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
       method=NetMonitor::GetMonVals;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void GetMonVals()";
       meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
      };
      MethodCall @[3] {
       user_data_=NULL;
       desc="update views and other things after writing new data to monitor data table";
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_mon_data->WriteClose()";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].vars["trial_mon_data"]$;
       method=DataTable::WriteClose;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void WriteClose()";
       meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
      };
      MethodCall @[4] {
       user_data_=NULL;
       desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
       flags=CAN_REVERT_TO_CODE;
       code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
       result_var=NULL;
       obj=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].args["network"]$$;
       method=Network::DMem_ShareTrialData;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="dt";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="trial_mon_data";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=int;
	 type="int";
	 name="n_rows";
	 required=0;
	 def_val="1";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="1";
	 };
	};
       };
       meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
       meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
      };
     };
     step_prog=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"]$;
     step_n=1;
     doc {
      user_data_=NULL;
      name="doc";
      desc=;
      web_doc=1;
      wiki="emergent";
      url="Monitor_Data";
      full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
      text_size=1;
      text=;
      html_text=;
     };
    };
    Program @["LeabraEpochMonitor"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name=;
      el_typ=UserData_DocLink;
      el_def=0;
      UserData_DocLink @["DocLink"] {
       user_data_=NULL;
       name="DocLink";
       doc=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].doc$$;
      };
     };
     name="LeabraEpochMonitor";
     short_nm="EpcMon";
     tags="Leabra, Std, Monitor";
     desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
     version {
      user_data_=NULL;
      major=0;
      minor=0;
      step=0;
     };
     author=;
     email=;
     flags=NO_STOP_STEP;
     stop_step_cond {
      user_data_=NULL;
      expr=;
     };
     objs {
      user_data_=NULL;
      name="objs";
      el_typ=NetMonitor;
      el_def=0;
      NetMonitor @["epoch_netmon"] {
       user_data_=NULL;
       name="epoch_netmon";
       items {
	user_data_=NULL;
	name="items";
	el_typ=NetMonItem;
	el_def=0;
	NetMonItem @["batch"] {
	 user_data_=NULL;
	 name="batch";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="batch";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["epoch"] {
	 user_data_=NULL;
	 name="epoch";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="epoch";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_sse"] {
	 user_data_=NULL;
	 name="avg_sse";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_sse";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["cnt_err"] {
	 user_data_=NULL;
	 name="cnt_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="cnt_err";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["pct_cor"] {
	 user_data_=NULL;
	 name="pct_cor";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="pct_cor";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["pct_err"] {
	 user_data_=NULL;
	 name="pct_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="pct_err";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_norm_err"] {
	 user_data_=NULL;
	 name="avg_norm_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_norm_err";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_cos_err"] {
	 user_data_=NULL;
	 name="avg_cos_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_cos_err";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_ext_rew"] {
	 user_data_=NULL;
	 name="avg_ext_rew";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_ext_rew";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_cycles"] {
	 user_data_=NULL;
	 name="avg_cycles";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_cycles";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["epoch_time_tot"] {
	 user_data_=NULL;
	 name="epoch_time_tot";
	 computed=1;
	 object_type=NULL;
	 object=NULL;
	 variable="act";
	 var_label=;
	 name_style=MY_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["epoch_time_usr"] {
	 user_data_=NULL;
	 name="epoch_time_usr";
	 computed=1;
	 object_type=NULL;
	 object=NULL;
	 variable="act";
	 var_label=;
	 name_style=MY_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_avg_sse"] {
	 user_data_=NULL;
	 name="lay_avg_sse";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_sse";
	 var_label="lay_avg_sse";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_cnt_err"] {
	 user_data_=NULL;
	 name="lay_cnt_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.cnt_err";
	 var_label="lay_cnt_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_pct_cor"] {
	 user_data_=NULL;
	 name="lay_pct_cor";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.pct_cor";
	 var_label="lay_pct_cor";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_pct_err"] {
	 user_data_=NULL;
	 name="lay_pct_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.pct_err";
	 var_label="lay_pct_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_avg_norm_err"] {
	 user_data_=NULL;
	 name="lay_avg_norm_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_norm_err";
	 var_label="lay_avg_norm_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_avg_cos_err"] {
	 user_data_=NULL;
	 name="lay_avg_cos_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_cos_err";
	 var_label="lay_avg_cos_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["net_avg_cos_diff"] {
	 user_data_=NULL;
	 name="net_avg_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_cos_diff";
	 var_label="net_avg_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["net_avg_trial_cos_diff"] {
	 user_data_=NULL;
	 name="net_avg_trial_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_trial_cos_diff";
	 var_label="net_avg_trial_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["net_avg_avg_act_diff"] {
	 user_data_=NULL;
	 name="net_avg_avg_act_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_avg_act_diff";
	 var_label="net_avg_avg_act_diff";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_cos_diff"] {
	 user_data_=NULL;
	 name="avg_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_cos_diff";
	 var_label="avg_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_trial_cos_diff"] {
	 user_data_=NULL;
	 name="avg_trial_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_trial_cos_diff";
	 var_label="avg_trial_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_avg_act_diff"] {
	 user_data_=NULL;
	 name="avg_avg_act_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_avg_act_diff";
	 var_label="avg_avg_act_diff";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_net_sd"] {
	 user_data_=NULL;
	 name="avg_net_sd";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_net_sd";
	 var_label="avg_net_sd";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["hog_pct"] {
	 user_data_=NULL;
	 name="hog_pct";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.hog_pct";
	 var_label="hog_pct";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["dead_pct"] {
	 user_data_=NULL;
	 name="dead_pct";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.dead_pct";
	 var_label="dead_pct";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["netmax"] {
	 user_data_=NULL;
	 name="netmax";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_netin.max";
	 var_label="netmax";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 2 0=0;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_act"] {
	 user_data_=NULL;
	 name="avg_act";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable=".layers.acts_p_avg";
	 var_label="avg_act";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 2 0=0;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["netrel"] {
	 user_data_=NULL;
	 name="netrel";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="prjns.avg_netin_rel";
	 var_label="netrel";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 2 0=0;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
       };
       network=$.projects["LeabraFlex"].networks["Network_0"]$;
       data=$.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"]$;
       rmv_orphan_cols=1;
      };
     };
     types {
      user_data_=NULL;
      name="types";
      el_typ=DynEnumType;
      el_def=0;
     };
     args {
      user_data_=NULL;
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["network"] {
       user_data_=NULL;
       name="network";
       var_type=T_Object;
       object_type=Network;
       object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
       reference=0;
       desc="network to get data from";
       init_from=NULL;
      };
     };
     vars {
      user_data_=NULL;
      name="vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["epoch_mon_data"] {
       user_data_=NULL;
       name="epoch_mon_data";
       var_type=T_Object;
       object_type=DataTable;
       object_val=$.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="data table to write the epoch data to";
       init_from=NULL;
      };
      ProgVar @["epoch_netmon"] {
       user_data_=NULL;
       name="epoch_netmon";
       var_type=T_Object;
       object_type=NetMonitor;
       object_val=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].objs["epoch_netmon"]$$;
       object_scope=NULL;
       objs_ptr=1;
       flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="network monitor object that contains full specs for what to record and where to get it";
       init_from=NULL;
      };
      ProgVar @["epoch_timer"] {
       user_data_=NULL;
       name="epoch_timer";
       var_type=T_Object;
       object_type=TimeUsed;
       object_val=.projects["LeabraFlex"].networks["Network_0"].epoch_time$$;
       object_scope=NULL;
       objs_ptr=0;
       flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
       init_from=NULL;
      };
      ProgVar @["run_already"] {
       user_data_=NULL;
       name="run_already";
       var_type=T_Bool;
       bool_val=0;
       object_scope=NULL;
       flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     functions {
      user_data_=NULL;
      name="functions";
      el_typ=Function;
      el_def=0;
     };
     init_code {
      user_data_=NULL;
      name="init_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       user_data_=NULL;
       desc="get the epoch timer from current network";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_timer = network.epoch_time";
       result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["epoch_timer"]$$;
       expr {
	user_data_=NULL;
	expr="network.epoch_time";
       };
      };
      MethodCall @[1] {
       user_data_=NULL;
       desc="set data and network on NetMonitor object";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
       result_var=NULL;
       obj=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["epoch_netmon"]$$;
       method=NetMonitor::SetDataNetwork;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="dt";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="epoch_mon_data";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=Network_ptr;
	 type="Network*";
	 name="net";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="network";
	 };
	};
       };
       meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
       meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
      };
      MethodCall @[2] {
       user_data_=NULL;
       desc="check configuration and emit errors/warnings for problems";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_netmon->CheckConfig(false)";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
       method=taBase::CheckConfig;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="quiet";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="false";
	 };
	};
       };
       meth_sig="bool CheckConfig(bool quiet = false)";
       meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
      };
      MethodCall @[3] {
       user_data_=NULL;
       desc="update the monitor items and data schema based on current settings of NetMonitor";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_netmon->UpdateMonitors(true)";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
       method=NetMonitor::UpdateMonitors;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="reset_first";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="true";
	 };
	};
       };
       meth_sig="void UpdateMonitors(bool reset_first = false)";
       meth_desc=" old name for UpdateDataTable";
      };
      AssignExpr @[4] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="run_already = false";
       result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["run_already"]$$;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
     };
     prog_code {
      user_data_=NULL;
      name="prog_code";
      el_typ=ProgCode;
      el_def=0;
      If @[0] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (!run_already)";
       cond {
	user_data_=NULL;
	expr="!run_already";
       };
       true_code {
	user_data_=NULL;
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 user_data_=NULL;
	 desc="set data and network on NetMonitor object";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
	 result_var=NULL;
	 obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
	 method=NetMonitor::SetDataNetwork;
	 meth_args {
	  user_data_=NULL;
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="dt";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="epoch_mon_data";
	   };
	  };
	  ProgArg @[1] {
	   user_data_=NULL;
	   arg_type=Network_ptr;
	   type="Network*";
	   name="net";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="network";
	   };
	  };
	 };
	 meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
	 meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
	};
	MethodCall @[1] {
	 user_data_=NULL;
	 desc="update the monitor items and data schema based on current settings of NetMonitor";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="epoch_netmon->UpdateMonitors(true)";
	 result_var=NULL;
	 obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
	 method=NetMonitor::UpdateMonitors;
	 meth_args {
	  user_data_=NULL;
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=bool;
	   type="bool";
	   name="reset_first";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="true";
	   };
	  };
	 };
	 meth_sig="void UpdateMonitors(bool reset_first = false)";
	 meth_desc=" old name for UpdateDataTable";
	};
	AssignExpr @[2] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="run_already = true";
	 result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["run_already"]$;
	 expr {
	  user_data_=NULL;
	  expr="true";
	 };
	};
       };
      };
      MethodCall @[1] {
       user_data_=NULL;
       desc="add a new blank row to the data";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_mon_data->AddBlankRow()";
       result_var=NULL;
       obj=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$$;
       method=DataTable::AddBlankRow;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="int AddBlankRow()";
       meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
      };
      MethodCall @[2] {
       user_data_=NULL;
       desc="get the new monitor data and stor it into the data table -- this does the main job here";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_netmon->GetMonVals()";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
       method=NetMonitor::GetMonVals;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void GetMonVals()";
       meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
      };
      AssignExpr @[3] {
       user_data_=NULL;
       desc="get the epoch timer from current network";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_timer = network.epoch_time";
       result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["epoch_timer"]$;
       expr {
	user_data_=NULL;
	expr="network.epoch_time";
       };
      };
      MethodCall @[4] {
       user_data_=NULL;
       desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
       method=DataTable::SetValColName;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="epoch_timer.used.GetTotSecs()";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_name";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="\"epoch_time_tot\"";
	 };
	};
	ProgArg @[2] {
	 user_data_=NULL;
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="-1";
	 };
	};
	ProgArg @[3] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="quiet";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr=;
	 };
	};
       };
       meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
       meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
      };
      MethodCall @[5] {
       user_data_=NULL;
       desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
       method=DataTable::SetValColName;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="epoch_timer.used.GetUsrSecs()";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_name";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="\"epoch_time_usr\"";
	 };
	};
	ProgArg @[2] {
	 user_data_=NULL;
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="-1";
	 };
	};
	ProgArg @[3] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="quiet";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr=;
	 };
	};
       };
       meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
       meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
      };
      MethodCall @[6] {
       user_data_=NULL;
       desc="update after writing new data to monitor data table";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_mon_data->WriteClose()";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
       method=DataTable::WriteClose;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void WriteClose()";
       meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
      };
      Comment @[7] {
       user_data_=NULL;
       desc="NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
       flags=CAN_REVERT_TO_CODE;
       code_string="// NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
      };
     };
     step_prog=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"]$;
     step_n=1;
     doc {
      user_data_=NULL;
      name="doc";
      desc=;
      web_doc=1;
      wiki="emergent";
      url="Monitor_Data";
      full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
      text_size=1;
      text=;
      html_text=;
     };
    };
    Program @["LeabraTestTrialMonitor"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name=;
      el_typ=UserData_DocLink;
      el_def=0;
      UserData_DocLink @["DocLink"] {
       user_data_=NULL;
       name="DocLink";
       doc=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTrialMonitor"].doc$;
      };
     };
     name="LeabraTestTrialMonitor";
     short_nm="TsTrMn";
     tags="Leabra, Std, Monitor";
     desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
     version {
      user_data_=NULL;
      major=0;
      minor=0;
      step=0;
     };
     author="Randall C. O'Reilly";
     email="emergent-users@grey.colorado.edu";
     flags=NO_STOP_STEP;
     stop_step_cond {
      user_data_=NULL;
      expr=;
     };
     objs {
      user_data_=NULL;
      name="objs";
      el_typ=NetMonitor;
      el_def=0;
      NetMonitor @["trial_netmon"] {
       user_data_=NULL;
       name="trial_netmon";
       items {
	user_data_=NULL;
	name="items";
	el_typ=NetMonItem;
	el_def=0;
	NetMonItem @["batch"] {
	 user_data_=NULL;
	 name="batch";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="batch";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["epoch"] {
	 user_data_=NULL;
	 name="epoch";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="epoch";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["train_mode"] {
	 user_data_=NULL;
	 name="train_mode";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="train_mode";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["group"] {
	 user_data_=NULL;
	 name="group";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="group";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["trial"] {
	 user_data_=NULL;
	 name="trial";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="trial";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["tick"] {
	 user_data_=NULL;
	 name="tick";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="tick";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["time"] {
	 user_data_=NULL;
	 name="time";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="time";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["trial_name"] {
	 user_data_=NULL;
	 name="trial_name";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="trial_name";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["group_name"] {
	 user_data_=NULL;
	 name="group_name";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="group_name";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["output_name"] {
	 user_data_=NULL;
	 name="output_name";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="minus_output_name";
	 var_label=;
	 name_style=MY_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["rt_cycles"] {
	 user_data_=NULL;
	 name="rt_cycles";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="rt_cycles";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["sse"] {
	 user_data_=NULL;
	 name="sse";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="sse";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["norm_err"] {
	 user_data_=NULL;
	 name="norm_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="norm_err";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["cos_err"] {
	 user_data_=NULL;
	 name="cos_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="cos_err";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["ext_rew"] {
	 user_data_=NULL;
	 name="ext_rew";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="ext_rew";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_sse"] {
	 user_data_=NULL;
	 name="lay_sse";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.sse";
	 var_label="lay_sse";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_bin_err"] {
	 user_data_=NULL;
	 name="lay_bin_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.bin_err";
	 var_label="lay_bin_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_norm_err"] {
	 user_data_=NULL;
	 name="lay_norm_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.norm_err";
	 var_label="lay_norm_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_cos_err"] {
	 user_data_=NULL;
	 name="lay_cos_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.cos_err";
	 var_label="lay_cos_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_net_sd"] {
	 user_data_=NULL;
	 name="lay_net_sd";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.net_sd";
	 var_label="lay_net_sd";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["net_cos_diff"] {
	 user_data_=NULL;
	 name="net_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="cos_diff";
	 var_label="net_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["net_trial_cos_diff"] {
	 user_data_=NULL;
	 name="net_trial_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="trial_cos_diff";
	 var_label="net_trial_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["net_avg_act_diff"] {
	 user_data_=NULL;
	 name="net_avg_act_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_act_diff";
	 var_label="net_avg_act_diff";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["cos_diff"] {
	 user_data_=NULL;
	 name="cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.cos_diff";
	 var_label="cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["trial_cos_diff"] {
	 user_data_=NULL;
	 name="trial_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.trial_cos_diff";
	 var_label="trial_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_act_diff"] {
	 user_data_=NULL;
	 name="avg_act_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_act_diff";
	 var_label="avg_act_diff";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
       };
       network=$.projects["LeabraFlex"].networks["Network_0"]$;
       data=$.projects["LeabraFlex"].data.gp["OutputData"]["TestTrialOutputData"]$;
       rmv_orphan_cols=1;
      };
     };
     types {
      user_data_=NULL;
      name="types";
      el_typ=DynEnumType;
      el_def=0;
     };
     args {
      user_data_=NULL;
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["network"] {
       user_data_=NULL;
       name="network";
       var_type=T_Object;
       object_type=Network;
       object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
       reference=0;
       desc="network to record data from";
       init_from=NULL;
      };
     };
     vars {
      user_data_=NULL;
      name="vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["trial_mon_data"] {
       user_data_=NULL;
       name="trial_mon_data";
       var_type=T_Object;
       object_type=DataTable;
       object_val=$.projects["LeabraFlex"].data.gp["OutputData"]["TestTrialOutputData"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="data table to record trial-level data to (this program writes new data to this table!)";
       init_from=NULL;
      };
      ProgVar @["trial_netmon"] {
       user_data_=NULL;
       name="trial_netmon";
       var_type=T_Object;
       object_type=NetMonitor;
       object_val=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"].objs["trial_netmon"]$$;
       object_scope=NULL;
       objs_ptr=1;
       flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
       init_from=NULL;
      };
      ProgVar @["run_already"] {
       user_data_=NULL;
       name="run_already";
       var_type=T_Bool;
       bool_val=0;
       object_scope=NULL;
       flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     functions {
      user_data_=NULL;
      name="functions";
      el_typ=Function;
      el_def=0;
     };
     init_code {
      user_data_=NULL;
      name="init_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       user_data_=NULL;
       desc="set the network and datatable for the NetMonitor";
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
       result_var=NULL;
       obj=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"].vars["trial_netmon"]$$;
       method=NetMonitor::SetDataNetwork;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="dt";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="trial_mon_data";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=Network_ptr;
	 type="Network*";
	 name="net";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="network";
	 };
	};
       };
       meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
       meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
      };
      MethodCall @[1] {
       user_data_=NULL;
       desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_netmon->CheckConfig(false)";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"].vars["trial_netmon"]$;
       method=taBase::CheckConfig;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="quiet";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="false";
	 };
	};
       };
       meth_sig="bool CheckConfig(bool quiet = false)";
       meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
      };
      MethodCall @[2] {
       user_data_=NULL;
       desc="update the monitor items and data schema based on current settings of the NetMonitor object";
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_netmon->UpdateMonitors(true)";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"].vars["trial_netmon"]$;
       method=NetMonitor::UpdateMonitors;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="reset_first";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="true";
	 };
	};
       };
       meth_sig="void UpdateMonitors(bool reset_first = false)";
       meth_desc=" old name for UpdateDataTable";
      };
      AssignExpr @[3] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="run_already = false";
       result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"].vars["run_already"]$$;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
     };
     prog_code {
      user_data_=NULL;
      name="prog_code";
      el_typ=ProgCode;
      el_def=0;
      If @[0] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (!run_already)";
       cond {
	user_data_=NULL;
	expr="!run_already";
       };
       true_code {
	user_data_=NULL;
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 user_data_=NULL;
	 desc="set the network and datatable for the NetMonitor";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
	 result_var=NULL;
	 obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"].vars["trial_netmon"]$;
	 method=NetMonitor::SetDataNetwork;
	 meth_args {
	  user_data_=NULL;
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="dt";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="trial_mon_data";
	   };
	  };
	  ProgArg @[1] {
	   user_data_=NULL;
	   arg_type=Network_ptr;
	   type="Network*";
	   name="net";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="network";
	   };
	  };
	 };
	 meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
	 meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
	};
	MethodCall @[1] {
	 user_data_=NULL;
	 desc="update the monitor items and data schema based on current settings of the NetMonitor object";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="trial_netmon->UpdateMonitors(true)";
	 result_var=NULL;
	 obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"].vars["trial_netmon"]$;
	 method=NetMonitor::UpdateMonitors;
	 meth_args {
	  user_data_=NULL;
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=bool;
	   type="bool";
	   name="reset_first";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="true";
	   };
	  };
	 };
	 meth_sig="void UpdateMonitors(bool reset_first = false)";
	 meth_desc=" old name for UpdateDataTable";
	};
	AssignExpr @[2] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="run_already = true";
	 result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"].vars["run_already"]$;
	 expr {
	  user_data_=NULL;
	  expr="true";
	 };
	};
       };
      };
      MethodCall @[1] {
       user_data_=NULL;
       desc="add a new blank row to the data";
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_mon_data->AddBlankRow()";
       result_var=NULL;
       obj=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"].vars["trial_mon_data"]$$;
       method=DataTable::AddBlankRow;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="int AddBlankRow()";
       meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
      };
      MethodCall @[2] {
       user_data_=NULL;
       desc="get the new monitor data from the network and other sources -- this does the main work";
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_netmon->GetMonVals()";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"].vars["trial_netmon"]$;
       method=NetMonitor::GetMonVals;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void GetMonVals()";
       meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
      };
      MethodCall @[3] {
       user_data_=NULL;
       desc="update views and other things after writing new data to monitor data table";
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_mon_data->WriteClose()";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"].vars["trial_mon_data"]$;
       method=DataTable::WriteClose;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void WriteClose()";
       meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
      };
      MethodCall @[4] {
       user_data_=NULL;
       desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
       flags=CAN_REVERT_TO_CODE;
       code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
       result_var=NULL;
       obj=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"].args["network"]$$;
       method=Network::DMem_ShareTrialData;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="dt";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="trial_mon_data";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=int;
	 type="int";
	 name="n_rows";
	 required=0;
	 def_val="1";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="1";
	 };
	};
       };
       meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
       meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
      };
     };
     step_prog=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestTrialMonitor"]$;
     step_n=1;
     doc {
      user_data_=NULL;
      name="doc";
      desc=;
      web_doc=1;
      wiki="emergent";
      url="Monitor_Data";
      full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
      text_size=1;
      text=;
      html_text=;
     };
    };
    Program @["LeabraTestEpochMonitor"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name=;
      el_typ=UserData_DocLink;
      el_def=0;
      UserData_DocLink @["DocLink"] {
       user_data_=NULL;
       name="DocLink";
       doc=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraEpochMonitor"].doc$;
      };
     };
     name="LeabraTestEpochMonitor";
     short_nm="TstMnt";
     tags="Leabra, Std, Monitor";
     desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
     version {
      user_data_=NULL;
      major=0;
      minor=0;
      step=0;
     };
     author="Randall C. O'Reilly";
     email="emergent-users@grey.colorado.edu";
     flags=NO_STOP_STEP;
     stop_step_cond {
      user_data_=NULL;
      expr=;
     };
     objs {
      user_data_=NULL;
      name="objs";
      el_typ=NetMonitor;
      el_def=0;
      NetMonitor @["epoch_netmon"] {
       user_data_=NULL;
       name="epoch_netmon";
       items {
	user_data_=NULL;
	name="items";
	el_typ=NetMonItem;
	el_def=0;
	NetMonItem @["batch"] {
	 user_data_=NULL;
	 name="batch";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="batch";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["epoch"] {
	 user_data_=NULL;
	 name="epoch";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="epoch";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_sse"] {
	 user_data_=NULL;
	 name="avg_sse";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_sse";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["cnt_err"] {
	 user_data_=NULL;
	 name="cnt_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="cnt_err";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["pct_cor"] {
	 user_data_=NULL;
	 name="pct_cor";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="pct_cor";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["pct_err"] {
	 user_data_=NULL;
	 name="pct_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="pct_err";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_norm_err"] {
	 user_data_=NULL;
	 name="avg_norm_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_norm_err";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_cos_err"] {
	 user_data_=NULL;
	 name="avg_cos_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_cos_err";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_ext_rew"] {
	 user_data_=NULL;
	 name="avg_ext_rew";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_ext_rew";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_cycles"] {
	 user_data_=NULL;
	 name="avg_cycles";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_cycles";
	 var_label=;
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_avg_sse"] {
	 user_data_=NULL;
	 name="lay_avg_sse";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_sse";
	 var_label="lay_avg_sse";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_cnt_err"] {
	 user_data_=NULL;
	 name="lay_cnt_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.cnt_err";
	 var_label="lay_cnt_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_pct_cor"] {
	 user_data_=NULL;
	 name="lay_pct_cor";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.pct_cor";
	 var_label="lay_pct_cor";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_pct_err"] {
	 user_data_=NULL;
	 name="lay_pct_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.pct_err";
	 var_label="lay_pct_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_avg_norm_err"] {
	 user_data_=NULL;
	 name="lay_avg_norm_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_norm_err";
	 var_label="lay_avg_norm_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["lay_avg_cos_err"] {
	 user_data_=NULL;
	 name="lay_avg_cos_err";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_cos_err";
	 var_label="lay_avg_cos_err";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name="agg_col";
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name="select_spec";
	  name="select_spec_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["net_avg_cos_diff"] {
	 user_data_=NULL;
	 name="net_avg_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_cos_diff";
	 var_label="net_avg_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["net_avg_trial_cos_diff"] {
	 user_data_=NULL;
	 name="net_avg_trial_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_trial_cos_diff";
	 var_label="net_avg_trial_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["net_avg_avg_act_diff"] {
	 user_data_=NULL;
	 name="net_avg_avg_act_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="avg_avg_act_diff";
	 var_label="net_avg_avg_act_diff";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_cos_diff"] {
	 user_data_=NULL;
	 name="avg_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_cos_diff";
	 var_label="avg_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_trial_cos_diff"] {
	 user_data_=NULL;
	 name="avg_trial_cos_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_trial_cos_diff";
	 var_label="avg_trial_cos_diff";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_avg_act_diff"] {
	 user_data_=NULL;
	 name="avg_avg_act_diff";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_avg_act_diff";
	 var_label="avg_avg_act_diff";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_net_sd"] {
	 user_data_=NULL;
	 name="avg_net_sd";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_net_sd";
	 var_label="avg_net_sd";
	 name_style=AUTO_NAME;
	 max_name_len=8;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 0 1;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["netmax"] {
	 user_data_=NULL;
	 name="netmax";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable="layers.avg_netin.max";
	 var_label="netmax";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 2 0=0;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
	NetMonItem @["avg_act"] {
	 user_data_=NULL;
	 name="avg_act";
	 computed=0;
	 object_type=LeabraNetwork;
	 object=$.projects["LeabraFlex"].networks["Network_0"]$;
	 variable=".layers.acts_p_avg";
	 var_label="avg_act";
	 name_style=AUTO_NAME;
	 max_name_len=6;
	 options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	 val_type=VT_FLOAT;
	 matrix=0;
	 matrix_geom{ 	 };
	 data_agg=0;
	 data_src=NULL;
	 agg_col {
	  user_data_=NULL;
	  col_name=;
	 };
	 agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 select_rows=0;
	 select_spec {
	  user_data_=NULL;
	  col_name=;
	  name="_EQUAL_";
	  on=1;
	  rel=EQUAL;
	  use_var=0;
	  cmp 2 0=0;
	  var=NULL;
	  enable_var=NULL;
	 };
	 pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	 pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
	};
       };
       network=$.projects["LeabraFlex"].networks["Network_0"]$;
       data=.projects["LeabraFlex"].data.gp["OutputData"]["TestEpochOutputData"]$$;
       rmv_orphan_cols=1;
      };
     };
     types {
      user_data_=NULL;
      name="types";
      el_typ=DynEnumType;
      el_def=0;
     };
     args {
      user_data_=NULL;
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["network"] {
       user_data_=NULL;
       name="network";
       var_type=T_Object;
       object_type=Network;
       object_val=$.projects["LeabraFlex"].networks["Network_0"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
       reference=0;
       desc="network to get data from";
       init_from=NULL;
      };
     };
     vars {
      user_data_=NULL;
      name="vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @["epoch_mon_data"] {
       user_data_=NULL;
       name="epoch_mon_data";
       var_type=T_Object;
       object_type=DataTable;
       object_val=$.projects["LeabraFlex"].data.gp["OutputData"]["TestEpochOutputData"]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="data table to write the epoch data to";
       init_from=NULL;
      };
      ProgVar @["epoch_netmon"] {
       user_data_=NULL;
       name="epoch_netmon";
       var_type=T_Object;
       object_type=NetMonitor;
       object_val=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"].objs["epoch_netmon"]$$;
       object_scope=NULL;
       objs_ptr=1;
       flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc="network monitor object that contains full specs for what to record and where to get it";
       init_from=NULL;
      };
      ProgVar @["run_already"] {
       user_data_=NULL;
       name="run_already";
       var_type=T_Bool;
       bool_val=0;
       object_scope=NULL;
       flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     functions {
      user_data_=NULL;
      name="functions";
      el_typ=Function;
      el_def=0;
     };
     init_code {
      user_data_=NULL;
      name="init_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       user_data_=NULL;
       desc="set data and network on NetMonitor object";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
       result_var=NULL;
       obj=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"].vars["epoch_netmon"]$$;
       method=NetMonitor::SetDataNetwork;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="dt";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="epoch_mon_data";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=Network_ptr;
	 type="Network*";
	 name="net";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="network";
	 };
	};
       };
       meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
       meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
      };
      MethodCall @[1] {
       user_data_=NULL;
       desc="check configuration and emit errors/warnings for problems";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_netmon->CheckConfig(false)";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"].vars["epoch_netmon"]$;
       method=taBase::CheckConfig;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="quiet";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="false";
	 };
	};
       };
       meth_sig="bool CheckConfig(bool quiet = false)";
       meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
      };
      MethodCall @[2] {
       user_data_=NULL;
       desc="update the monitor items and data schema based on current settings of NetMonitor";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_netmon->UpdateMonitors(true)";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"].vars["epoch_netmon"]$;
       method=NetMonitor::UpdateMonitors;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="reset_first";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="true";
	 };
	};
       };
       meth_sig="void UpdateMonitors(bool reset_first = false)";
       meth_desc=" old name for UpdateDataTable";
      };
      AssignExpr @[3] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="run_already = false";
       result_var=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"].vars["run_already"]$$;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
     };
     prog_code {
      user_data_=NULL;
      name="prog_code";
      el_typ=ProgCode;
      el_def=0;
      If @[0] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (!run_already)";
       cond {
	user_data_=NULL;
	expr="!run_already";
       };
       true_code {
	user_data_=NULL;
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 user_data_=NULL;
	 desc="set data and network on NetMonitor object";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
	 result_var=NULL;
	 obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"].vars["epoch_netmon"]$;
	 method=NetMonitor::SetDataNetwork;
	 meth_args {
	  user_data_=NULL;
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="dt";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="epoch_mon_data";
	   };
	  };
	  ProgArg @[1] {
	   user_data_=NULL;
	   arg_type=Network_ptr;
	   type="Network*";
	   name="net";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="network";
	   };
	  };
	 };
	 meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
	 meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
	};
	MethodCall @[1] {
	 user_data_=NULL;
	 desc="update the monitor items and data schema based on current settings of NetMonitor";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="epoch_netmon->UpdateMonitors(true)";
	 result_var=NULL;
	 obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"].vars["epoch_netmon"]$;
	 method=NetMonitor::UpdateMonitors;
	 meth_args {
	  user_data_=NULL;
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=bool;
	   type="bool";
	   name="reset_first";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="true";
	   };
	  };
	 };
	 meth_sig="void UpdateMonitors(bool reset_first = false)";
	 meth_desc=" old name for UpdateDataTable";
	};
	AssignExpr @[2] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="run_already = true";
	 result_var=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"].vars["run_already"]$;
	 expr {
	  user_data_=NULL;
	  expr="true";
	 };
	};
       };
      };
      MethodCall @[1] {
       user_data_=NULL;
       desc="add a new blank row to the data";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_mon_data->AddBlankRow()";
       result_var=NULL;
       obj=.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"].vars["epoch_mon_data"]$$;
       method=DataTable::AddBlankRow;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="int AddBlankRow()";
       meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
      };
      MethodCall @[2] {
       user_data_=NULL;
       desc="get the new monitor data and stor it into the data table -- this does the main job here";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_netmon->GetMonVals()";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"].vars["epoch_netmon"]$;
       method=NetMonitor::GetMonVals;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void GetMonVals()";
       meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
      };
      MethodCall @[3] {
       user_data_=NULL;
       desc="update after writing new data to monitor data table";
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_mon_data->WriteClose()";
       result_var=NULL;
       obj=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"].vars["epoch_mon_data"]$;
       method=DataTable::WriteClose;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void WriteClose()";
       meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
      };
      Comment @[4] {
       user_data_=NULL;
       desc="NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
       flags=CAN_REVERT_TO_CODE;
       code_string="// NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
      };
     };
     step_prog=$.projects["LeabraFlex"].programs.gp["UtilProgs"].gp["Monitors"]["LeabraTestEpochMonitor"]$;
     step_n=1;
     doc {
      user_data_=NULL;
      name="doc";
      desc=;
      web_doc=1;
      wiki="emergent";
      url="Monitor_Data";
      full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
      text_size=1;
      text=;
      html_text=;
     };
    };
   };
  };
 };
 viewers {
  user_data_=NULL;
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser3"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name="UserDataItem_List_130";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     user_data_=NULL;
     name="view_win_lft";
     value 8 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     user_data_=NULL;
     name="view_win_top";
     value 8 0=0.04842821;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     user_data_=NULL;
     name="view_win_wd";
     value 8 0=0.9962825;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     user_data_=NULL;
     name="view_win_ht";
     value 8 0=0.7986406;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     user_data_=NULL;
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     user_data_=NULL;
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAABFwAAAfwAAAKMAf////8BAAAAAQA=";
     val_type_fixed=0;
    };
   };
   name="Browser3";
   m_data=.projects["LeabraFlex"]$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"LeabraFlex\"] - LeabraFlex.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    user_data_=NULL;
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name="UserDataItem_List_131";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       user_data_=NULL;
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    user_data_=NULL;
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     user_data_=NULL;
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["LeabraFlex"]$;
    };
    PanelViewer @["Editor"] {
     user_data_=NULL;
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @["Visualizer"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name="UserDataItem_List_132";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       user_data_=NULL;
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Visualizer";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      user_data_=NULL;
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["Network_0"] {
       user_data_=NULL;
       name="Network_0";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	user_data_=NULL;
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["Network_0_View"] {
	  user_data_=NULL;
	  name="Network_0_View";
	  m_data=$.projects["LeabraFlex"].networks["Network_0"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.7: y=0.7: z=0.7: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=0: y=1: z=-1: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  hot_vars{ targ;ext;act;net;bias_wt;bias_dwt;act_eq;act_m;act_p;act_dif;avg_m;avg_l;act_avg;r.wt;r.wt*act;s.wt;r.dwt;s.dwt;	  };
	  unit_src_path=".layers[2].units[0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=5: y=5: z=2.333333: };
	  max_size2d {x=5: y=18: z=1: };
	  eff_max_size {x=5: y=5: z=2.333333: };
	  font_sizes {
	   user_data_=NULL;
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   user_data_=NULL;
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.4;
	   unit_trans=0.4;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   user_data_=NULL;
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   user_data_=NULL;
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    user_data_=NULL;
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=-1;Hidden=-1;Output=-1;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.9155772: z=2.325743: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.528059;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["EpochOutputData"] {
       user_data_=NULL;
       name="EpochOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	user_data_=NULL;
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @["EpochOutputData_Graph"] {
	  user_data_=NULL;
	  name="EpochOutputData_Graph";
	  m_data=$.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["batch"] {
	    user_data_=NULL;
	    name="batch";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["batch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["epoch"] {
	    user_data_=NULL;
	    name="epoch";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["epoch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=15: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_sse"] {
	    user_data_=NULL;
	    name="avg_sse";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["avg_sse"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=4.77555: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["cnt_err"] {
	    user_data_=NULL;
	    name="cnt_err";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["cnt_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=50: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["pct_cor"] {
	    user_data_=NULL;
	    name="pct_cor";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["pct_cor"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["pct_err"] {
	    user_data_=NULL;
	    name="pct_err";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["pct_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_norm_err"] {
	    user_data_=NULL;
	    name="avg_norm_err";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["avg_norm_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.632: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_cos_err"] {
	    user_data_=NULL;
	    name="avg_cos_err";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["avg_cos_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_ext_rew"] {
	    user_data_=NULL;
	    name="avg_ext_rew";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["avg_ext_rew"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_cycles"] {
	    user_data_=NULL;
	    name="avg_cycles";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["avg_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["epoch_time_tot"] {
	    user_data_=NULL;
	    name="epoch_time_tot";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_tot"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["epoch_time_usr"] {
	    user_data_=NULL;
	    name="epoch_time_usr";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_usr"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Output_lay_avg_sse";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_lay_avg_sse"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Output_lay_cnt_err";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_lay_cnt_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Output_lay_pct_cor";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_lay_pct_cor"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_lay_pct_err"] {
	    user_data_=NULL;
	    name="Output_lay_pct_err";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_lay_pct_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Output_lay_avg_norm_err";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_lay_avg_norm_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Output_lay_avg_cos_err";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_lay_avg_cos_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["net_avg_cos_diff"] {
	    user_data_=NULL;
	    name="net_avg_cos_diff";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["net_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="net_avg_trial_cos_diff";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_trial_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["net_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="net_avg_avg_act_diff";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_avg_act_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Hidden_avg_cos_diff";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.962046: fix_max=0: max=0.999009: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Output_avg_cos_diff";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_avg_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Hidden_avg_trial_cos_diff";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_trial_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Output_avg_trial_cos_diff";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_avg_trial_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Hidden_avg_avg_act_diff";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_avg_act_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Output_avg_avg_act_diff";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_avg_avg_act_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_net_sd"] {
	    user_data_=NULL;
	    name="Hidden_avg_net_sd";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_net_sd"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.281181: fix_max=0: max=0.466438: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_avg_net_sd"] {
	    user_data_=NULL;
	    name="Output_avg_net_sd";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_avg_net_sd"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_hog_pct"] {
	    user_data_=NULL;
	    name="Hidden_hog_pct";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_hog_pct"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_hog_pct"] {
	    user_data_=NULL;
	    name="Output_hog_pct";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_hog_pct"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_dead_pct"] {
	    user_data_=NULL;
	    name="Hidden_dead_pct";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_dead_pct"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_dead_pct"] {
	    user_data_=NULL;
	    name="Output_dead_pct";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_dead_pct"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_netmax"] {
	    user_data_=NULL;
	    name="Hidden_netmax";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_netmax"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_netmax"] {
	    user_data_=NULL;
	    name="Output_netmax";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_netmax"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Input_avg_act"] {
	    user_data_=NULL;
	    name="Input_avg_act";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Input_avg_act"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_act"] {
	    user_data_=NULL;
	    name="Hidden_avg_act";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_act"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_avg_act"] {
	    user_data_=NULL;
	    name="Output_avg_act";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_avg_act"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_netrel"] {
	    user_data_=NULL;
	    name="Hidden_netrel";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_netrel"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Output_netrel"] {
	    user_data_=NULL;
	    name="Output_netrel";
	    m_data=.projects["LeabraFlex"].data.gp["OutputData"]["EpochOutputData"].data["Output_netrel"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=-8017975;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   user_data_=NULL;
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  z_axis {
	   user_data_=NULL;
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  tot_plots=16;
	  plots {
	   user_data_=NULL;
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["EpochOutputData_Graph_plot_1"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_sse";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_2"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_norm_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_3"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="cnt_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=1;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_4"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_avg_net_sd";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.281181: fix_max=0: max=0.466438: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_5"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_avg_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.962046: fix_max=0: max=0.999009: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_6"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_7"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_8"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_9"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_10"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_11"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_12"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_13"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_14"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_15"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_16"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	   };
	  };
	  errbars {
	   user_data_=NULL;
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["EpochOutputData_Graph_err_1"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_2"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_3"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_4"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_5"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_6"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_7"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_8"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_9"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_10"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_11"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_12"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_13"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_14"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_15"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_16"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   user_data_=NULL;
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  colorscale {
	   user_data_=NULL;
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   user_data_=NULL;
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.475278: y=0.4989999: z=1.70049: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.71299;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    user_data_=NULL;
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name="UserDataItem_List_133";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       user_data_=NULL;
       name="view_win_lft";
       value 8 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       user_data_=NULL;
       name="view_win_top";
       value 8 0=0.008496176;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       user_data_=NULL;
       name="view_win_wd";
       value 8 0=0.04354753;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       user_data_=NULL;
       name="view_win_ht";
       value 8 0=0.7349193;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       user_data_=NULL;
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       user_data_=NULL;
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc="svn rev: 10514 update startup program";
 tree_state{ .;.docs;.wizards;.ctrl_panels;.param_sets;.param_sets.gp[0];.param_sets.gp[1];.data;.data.gp[0];.data.gp[1];.data.gp[2];.data.gp[3];.programs;.programs.gp[0];.programs.gp[1];.programs.gp[1].gp[0];.programs.gp[1].gp[1];.programs.gp[2];.programs.gp[3];.programs.gp[4];.programs.gp[4].gp[0];.networks;.networks[0];.networks[0].specs;.networks[0].layers; };
 networks {
  user_data_=NULL;
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @["Network_0"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     user_data_=NULL;
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     user_data_=NULL;
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     user_data_=NULL;
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     user_data_=NULL;
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     user_data_=NULL;
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     user_data_=NULL;
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     user_data_=NULL;
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     user_data_=NULL;
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     user_data_=NULL;
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     user_data_=NULL;
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     user_data_=NULL;
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     user_data_=NULL;
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     user_data_=NULL;
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     user_data_=NULL;
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     user_data_=NULL;
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     user_data_=NULL;
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     user_data_=NULL;
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     user_data_=NULL;
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     user_data_=NULL;
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     user_data_=NULL;
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_cos_diff"] {
     user_data_=NULL;
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     user_data_=NULL;
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     user_data_=NULL;
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     user_data_=NULL;
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     user_data_=NULL;
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     user_data_=NULL;
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     user_data_=NULL;
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="Network_0";
   desc=;
   specs {
    user_data_=NULL;
    name="specs";
    el_typ=LeabraLayerSpec;
    el_def=0;
    LeabraLayerSpec @["HiddenLayer"] {
     user_data_=NULL;
     name="HiddenLayer";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @["Input_Output"] {
       user_data_=NULL;
       name="Input_Output";
       is_used=1;
       used_status=USED;
       desc=;
       unique{        };
       children {
	user_data_=NULL;
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {user_data_=NULL: on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
       lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {user_data_=NULL: targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
       decay {user_data_=NULL: trial=1: };
       del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
       lay_lrate=1;
       cos_diff {
	user_data_=NULL;
	avg_tau=100;
	lrate_mod=0;
	lrmod_fm_trc=0;
	lrmod_z_thr=-1.5;
	set_net_unlrn=0;
	avg_dt=0.01;
	avg_dt_c=0.99;
       };
       lstats {
	user_data_=NULL;
	hog_thr=0.3;
	dead_thr=0.01;
       };
      };
     };
     lay_inhib {user_data_=NULL: on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {user_data_=NULL: targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
     decay {user_data_=NULL: trial=1: };
     del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
     lay_lrate=1;
     cos_diff {
      user_data_=NULL;
      avg_tau=100;
      lrate_mod=0;
      lrmod_fm_trc=0;
      lrmod_z_thr=-1.5;
      set_net_unlrn=0;
      avg_dt=0.01;
      avg_dt_c=0.99;
     };
     lstats {
      user_data_=NULL;
      hog_thr=0.3;
      dead_thr=0.01;
     };
    };
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     user_data_=NULL;
     name="LeabraUnitSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
     bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=.projects["LeabraFlex"].networks["Network_0"].specs["LeabraConSpec_0"].children["LeabraBiasSpec_0"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {user_data_=NULL: thr=0.5: gain=20: nvar=0.01: };
     act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      user_data_=NULL;
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0.3;
      t_r=3;
      clamp_max_p=0.12;
      clamp_type=REGULAR;
      eff_spk_thr=0.5;
     };
     opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
     init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
     dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
     act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
     avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
     avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
     g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
     e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
     adapt {
      user_data_=NULL;
      on=0;
      tau=144;
      vm_gain=0.04;
      spike_gain=0.00805;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {
      user_data_=NULL;
      on=0;
      delay=4;
     };
     deep_raw_qtr=0;
     deep {user_data_=NULL: on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
     da_mod {user_data_=NULL: on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
     noise_sched {
      user_data_=NULL;
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] {
     user_data_=NULL;
     name="LeabraConSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @["LeabraBiasSpec_0"] {
       user_data_=NULL;
       name="LeabraBiasSpec_0";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;learn;       };
       children {
	user_data_=NULL;
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {user_data_=NULL: type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0.04;
       use_lrate_sched=1;
       cur_lrate=0.04;
       lrs_mult=1;
       lrate_sched {
	user_data_=NULL;
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
	SchedItem @[0] {
	 user_data_=NULL;
	 start_ctr=0;
	 start_val=1;
	 duration=50;
	 step=-0.01;
	};
	SchedItem @[1] {
	 user_data_=NULL;
	 start_ctr=50;
	 start_val=0.5;
	 duration=50;
	 step=-0.006;
	};
	SchedItem @[2] {
	 user_data_=NULL;
	 start_ctr=100;
	 start_val=0.2;
	 duration=50;
	 step=-0.002;
	};
	SchedItem @[3] {
	 user_data_=NULL;
	 start_ctr=150;
	 start_val=0.1;
	 duration=50;
	 step=-0.001;
	};
	SchedItem @[4] {
	 user_data_=NULL;
	 start_ctr=200;
	 start_val=0.05;
	 duration=50;
	 step=-0.0006;
	};
	SchedItem @[5] {
	 user_data_=NULL;
	 start_ctr=250;
	 start_val=0.02;
	 duration=50;
	 step=-0.0002;
	};
	SchedItem @[6] {
	 user_data_=NULL;
	 start_ctr=300;
	 start_val=0.01;
	 duration=1;
	 step=1;
	};
       };
       use_unlearnable=1;
       xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
       dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
       wt_bal {
	user_data_=NULL;
	on=1;
	hi_thr=0.4;
	hi_gain=4;
	lo_thr=0.2;
	lo_gain=4;
       };
       adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       dwt_thresh=0.1;
      };
      LeabraConSpec @["TopDownCons"] {
       user_data_=NULL;
       name="TopDownCons";
       is_used=1;
       used_status=USED;
       desc="top-down connections from output layers down to hidden etc typically need to be weaker than bottom-up";
       unique{ wt_scale;       };
       children {
	user_data_=NULL;
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
       inhib=0;
       wt_scale {user_data_=NULL: abs=1: rel=0.2: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       use_lrate_sched=1;
       cur_lrate=0.04;
       lrs_mult=1;
       lrate_sched {
	user_data_=NULL;
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
	SchedItem @[0] {
	 user_data_=NULL;
	 start_ctr=0;
	 start_val=1;
	 duration=50;
	 step=-0.01;
	};
	SchedItem @[1] {
	 user_data_=NULL;
	 start_ctr=50;
	 start_val=0.5;
	 duration=50;
	 step=-0.006;
	};
	SchedItem @[2] {
	 user_data_=NULL;
	 start_ctr=100;
	 start_val=0.2;
	 duration=50;
	 step=-0.002;
	};
	SchedItem @[3] {
	 user_data_=NULL;
	 start_ctr=150;
	 start_val=0.1;
	 duration=50;
	 step=-0.001;
	};
	SchedItem @[4] {
	 user_data_=NULL;
	 start_ctr=200;
	 start_val=0.05;
	 duration=50;
	 step=-0.0006;
	};
	SchedItem @[5] {
	 user_data_=NULL;
	 start_ctr=250;
	 start_val=0.02;
	 duration=50;
	 step=-0.0002;
	};
	SchedItem @[6] {
	 user_data_=NULL;
	 start_ctr=300;
	 start_val=0.01;
	 duration=1;
	 step=1;
	};
       };
       use_unlearnable=1;
       xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
       dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
       wt_bal {
	user_data_=NULL;
	on=1;
	hi_thr=0.4;
	hi_gain=4;
	lo_thr=0.2;
	lo_gain=4;
       };
       adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
      };
     };
     rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.04;
     use_lrate_sched=1;
     cur_lrate=0.04;
     lrs_mult=1;
     lrate_sched {
      user_data_=NULL;
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
      SchedItem @[0] {
       user_data_=NULL;
       start_ctr=0;
       start_val=1;
       duration=50;
       step=-0.01;
      };
      SchedItem @[1] {
       user_data_=NULL;
       start_ctr=50;
       start_val=0.5;
       duration=50;
       step=-0.006;
      };
      SchedItem @[2] {
       user_data_=NULL;
       start_ctr=100;
       start_val=0.2;
       duration=50;
       step=-0.002;
      };
      SchedItem @[3] {
       user_data_=NULL;
       start_ctr=150;
       start_val=0.1;
       duration=50;
       step=-0.001;
      };
      SchedItem @[4] {
       user_data_=NULL;
       start_ctr=200;
       start_val=0.05;
       duration=50;
       step=-0.0006;
      };
      SchedItem @[5] {
       user_data_=NULL;
       start_ctr=250;
       start_val=0.02;
       duration=50;
       step=-0.0002;
      };
      SchedItem @[6] {
       user_data_=NULL;
       start_ctr=300;
       start_val=0.01;
       duration=1;
       step=1;
      };
     };
     use_unlearnable=1;
     xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
     dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
     wt_bal {
      user_data_=NULL;
      on=1;
      hi_thr=0.4;
      hi_gain=4;
      lo_thr=0.2;
      lo_gain=4;
     };
     adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
    };
    FullPrjnSpec @["FullPrjnSpec_0"] {
     user_data_=NULL;
     name="FullPrjnSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     init_wt_val=1;
     add_rnd_var=0;
     renorm_wts {user_data_=NULL: on=0: mult_norm=1: avg_wt=0.5: };
    };
   };
   param_seqs {
    user_data_=NULL;
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   layers {
    user_data_=NULL;
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=5: y=5: z=3: };
    max_disp_size2d {x=5: y=18: };
    LeabraLayer @["Input"] {
     user_data_=NULL;
     name="Input";
     desc=;
     flags=ABS_POS;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=1;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["LeabraFlex"].networks["Network_0"].layers["Hidden"].projections["Fm_Input"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=.projects["LeabraFlex"].networks["Network_0"].specs["LeabraUnitSpec_0"]$$: };
     dist {
      user_data_=NULL;
      fm_input=0;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=.projects["LeabraFlex"].networks["Network_0"].specs["HiddenLayer"].children["Input_Output"]$$: };
     adapt_gi=1;
    };
    LeabraLayer @["Hidden"] {
     user_data_=NULL;
     name="Hidden";
     desc=;
     flags=ABS_POS;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     pos_abs {x=0: y=0: z=1: };
     pos2d {x=0: y=13: };
     pos2d_abs {x=0: y=13: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
     n_recv_prjns=2;
     n_send_prjns=1;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Input"] {
       user_data_=NULL;
       name="Fm_Input";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["LeabraFlex"].networks["Network_0"].layers["Input"]$$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=.projects["LeabraFlex"].networks["Network_0"].specs["FullPrjnSpec_0"]$$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["LeabraFlex"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_Output"] {
       user_data_=NULL;
       name="Fm_Output";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["LeabraFlex"].networks["Network_0"].layers["Output"]$$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["LeabraFlex"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=.projects["LeabraFlex"].networks["Network_0"].specs["LeabraConSpec_0"].children["TopDownCons"]$$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["LeabraFlex"].networks["Network_0"].layers["Output"].projections["Fm_Hidden"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=$.projects["LeabraFlex"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
     dist {
      user_data_=NULL;
      fm_input=1;
      fm_output=1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=.projects["LeabraFlex"].networks["Network_0"].specs["HiddenLayer"]$$: };
     adapt_gi=1;
    };
    LeabraLayer @["Output"] {
     user_data_=NULL;
     name="Output";
     desc=;
     flags=ABS_POS;
     layer_type=TARGET;
     pos {x=0: y=0: z=2: };
     pos_abs {x=0: y=0: z=2: };
     pos2d {x=0: y=6: };
     pos2d_abs {x=0: y=6: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=1;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Hidden"] {
       user_data_=NULL;
       name="Fm_Hidden";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["LeabraFlex"].networks["Network_0"].layers["Hidden"]$$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["LeabraFlex"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["LeabraFlex"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["LeabraFlex"].networks["Network_0"].layers["Hidden"].projections["Fm_Output"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=$.projects["LeabraFlex"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
     dist {
      user_data_=NULL;
      fm_input=2;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.15;
     acts_p_avg=0.15;
     acts_p_avg_eff=0.15;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["LeabraFlex"].networks["Network_0"].specs["HiddenLayer"].children["Input_Output"]$: };
     adapt_gi=1;
    };
   };
   weights {
    user_data_=NULL;
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=MANUAL_POS|ABS_POS|BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    user_data_=NULL;
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    user_data_=NULL;
    run_time {user_data_=NULL: name="TimeUsedHR_6": s_used=0: n_used=0: avg_used={user_data_=NULL: avg=0: sum=0: n=0: }: };
    sync_time {user_data_=NULL: name="TimeUsedHR_7": s_used=0: n_used=0: avg_used={user_data_=NULL: avg=0: sum=0: n=0: }: };
    total_time {user_data_=NULL: name="TimeUsedHR_8": s_used=0: n_used=0: avg_used={user_data_=NULL: avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=1.216681899864304e+285;
   };
   cuda {
    user_data_=NULL;
    sync_units=0;
    sync_cons=0;
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
    n_threads=32;
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=76;
   n_cons=1875;
   max_prjns=2;
   max_disp_size {x=5: y=5: z=3: };
   max_disp_size2d {x=5: y=18: };
   times {
    user_data_=NULL;
    quarter=25;
    gate_cyc=18;
    deep_cyc=5;
    time_inc=0.001;
    wt_bal_int=10;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    user_data_=NULL;
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    agg_unlearnable=0;
    wt_bal=0;
   };
   net_misc {
    user_data_=NULL;
    spike=0;
    deep=0;
    bias_learn=0;
    trial_decay=1;
    diff_scale_p=0;
    diff_scale_q1=0;
    wt_bal=1;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   deep {
    user_data_=NULL;
    on=0;
    ctxt=0;
    raw_net=0;
    mod_net=0;
    raw_qtr=0;
   };
   rel_netin {
    user_data_=NULL;
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
 };
};

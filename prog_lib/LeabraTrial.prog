// ta_Dump File v3.0 -- code v7.0.2.0 rev7646
Program .projects[0].programs.gp[0][3] { 
 ProgObjList @.objs = [0] {
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [2] {
  ProgVar @[0] { };
  ProgVar @[1] { };
 };

 ProgVar_List @.vars = [1] {
  ProgVar @[0] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [0] {
 };

 ProgEl_List @.prog_code = [10] {
  LocalVars @[0] { 
   ProgVar_List @.local_vars = [1] {
    ProgVar @[0] { };
   };
  };
  If @[1] { 
   ProgEl_List @.true_code = [1] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };
  };
  MethodCall @[2] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  Comment @[3] { };
  MethodCall @[4] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  ProgramCall @[5] { 
   ProgArg_List @.prog_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  ForLoop @[6] { 
   ProgEl_List @.loop_code = [1] {
    ProgramCall @[0] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  MethodCall @[7] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  ProgramCall @[8] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
  NetUpdateView @[9] { };
 };
};
Program .projects[0].programs.gp[0][3] {
 name="LeabraTrial";
 short_nm="Trial";
 tags="Leabra, Std";
 desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
 flags=0;
 objs {
  name="objs";
  el_typ=taNBase;
  el_def=0;
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$$<LeabraNetwork,Network_0>;
   objs_ptr=0;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="network to operate on -- typically set by higher-level calling programs";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$$<DataTable,StdInputData>;
   objs_ptr=0;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="datatable containing training input/output patterns";
   init_from=NULL;
  };
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="update_net_view";
   var_type=T_Bool;
   bool_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="determines whether to update any network view displays after trial is completed";
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  LocalVars @[0] {
   desc=;
   flags=0;
   orig_prog_code=;
   local_vars {
    name="local_vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="qtr";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
  };
  If @[1] {
   desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
   flags=0;
   orig_prog_code=;
   cond {
    expr="network.Compute_Weights_Test(network.trial+1)";
   };
   true_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     desc="update weights -- do this at start instead of end, so that dwt is valid";
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     obj=.projects[0].programs.gp[0][3].args[0]$$;
     method=Network::Compute_Weights;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Compute_Weights()";
     meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
    };
   };
  };
  MethodCall @[2] {
   desc="initializes various counters at start of trial";
   flags=0;
   orig_prog_code=;
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][3].args[0]$;
   method=LeabraNetwork::Trial_Init;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void Trial_Init()";
   meth_desc=" initialize at start of trial (init specs, Decay state)";
  };
  Comment @[3] {
   desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
   flags=CAN_REVERT_TO_CODE;
   orig_prog_code="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
  };
  MethodCall @[4] {
   desc="resets input data, before getting new external inputs data from apply inputs call";
   flags=0;
   orig_prog_code=;
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][3].args[0]$;
   method=Network::Init_InputData;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void Init_InputData()";
   meth_desc=" Initializes external and target inputs";
  };
  ProgramCall @[5] {
   desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
   flags=0;
   orig_prog_code=;
   prog_args {
    name="prog_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type="LeabraNetwork*";
     name="network";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network";
     };
    };
    ProgArg @[1] {
     arg_type=DataTable;
     type="DataTable*";
     name="input_data";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="input_data";
     };
    };
   };
   target=.projects[0].programs.gp[0][6]$$<Program,ApplyInputs>;
   targ_ld_init="*ApplyInputs*";
  };
  ForLoop @[6] {
   desc=;
   flags=0;
   orig_prog_code="for(qtr = 0; qtr < 4; qtr++)";
   loop_code {
    name="loop_code";
    el_typ=ProgCode;
    el_def=0;
    ProgramCall @[0] {
     desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
     flags=0;
     orig_prog_code=;
     prog_args {
      name="prog_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="input_data";
       };
      };
     };
     target=.projects[0].programs.gp[0][4]$$<Program,LeabraQuarter>;
     targ_ld_init="*LeabraQuarter*";
    };
   };
   init {
    expr="qtr = 0";
   };
   test {
    expr="qtr < 4";
   };
   iter {
    expr="qtr++";
   };
  };
  MethodCall @[7] {
   desc="after the trial is over, do final computations";
   flags=0;
   orig_prog_code=;
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][3].args[0]$;
   method=LeabraNetwork::Trial_Final;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void Trial_Final()";
   meth_desc=" do final processing after trial: Compute_AbsRelNetin";
  };
  ProgramCall @[8] {
   desc="records data about the trial-level processing to a datatable for graphing/processing";
   flags=0;
   orig_prog_code=;
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type="LeabraNetwork*";
     name="network";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network";
     };
    };
   };
   target=.projects[0].programs.gp[0][7]$$<Program,LeabraTrialMonitor>;
   targ_ld_init="*LeabraTrialMonitor*";
  };
  NetUpdateView @[9] {
   desc="update the network view(s) (only if update_net_view is true)";
   flags=0;
   orig_prog_code=;
   network_var=$.projects[0].programs.gp[0][3].args[0]$;
   update_var=.projects[0].programs.gp[0][3].vars[0]$$;
  };
 };
 step_prog=.projects[0].programs.gp[0][5]$$<Program,LeabraCycle>;
 step_n=1;
};

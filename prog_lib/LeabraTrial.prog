// ta_Dump File v2.0
Program .projects[0].programs.gp[0][3] { 
  ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  ProgVar_List @.vars = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
  };

  ProgEl_List @.init_code = [1] {
    NetCounterInit @[0] { };
  };

  ProgEl_List @.prog_code = [7] {
    NetCounterInit @[0] { };
    MethodCall @[1] { };
    WhileLoop @[2] { 
      ProgEl_List @.loop_code = [3] {
	ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	NetCounterIncr @[1] { };
	MethodCall @[2] { };
      };
    };
    MethodCall @[3] { };
    If @[4] { 
      ProgEl_List @.true_code = [1] {
	MethodCall @[0] { };
      };
    };
    ProgramCall @[5] { 
      ProgArg_List @.prog_args = [1] {
	ProgArg @[0] { };
      };
    };
    NetUpdateView @[6] { };
  };
};
Program .projects[0].programs.gp[0][3] {
 name="LeabraTrial";
 tags="Leabra, Std";
 desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
 flags=SHOW_STEP;
 objs {
  name=;
  el_typ=taOBase;
  el_def=0;
 };
 types {
  name=;
  el_typ=ProgType;
  el_def=0;
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$0$;
   objs_ptr=0;
   flags=NULL_CHECK;
   desc="network to operate on -- typically set by higher-level calling programs";
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$1$;
   objs_ptr=0;
   flags=NULL_CHECK;
   desc="datatable containing training input/output patterns";
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="phase_no";
   var_type=T_Int;
   int_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
   desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
  };
  ProgVar @[1] {
   name="update_net_view";
   var_type=T_Bool;
   bool_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="determines whether to update any network view displays after trial is completed";
  };
  ProgVar @[2] {
   name="trial";
   var_type=T_Int;
   int_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
   desc="current trial (event) within the epoch -- increments automatically";
  };
 };
 functions {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 load_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc="initialize the local phase_no counter, and corresponding network one";
   flags=;
   network_var=.projects[0].programs.gp[0][3].args[0]$2$;
   local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$3$;
   counter=LeabraNetwork::phase_no;
  };
 };
 prog_code {
  name=;
  el_typ=MethodCall;
  el_def=0;
  NetCounterInit @[0] {
   desc="initialize the local phase_no counter, and corresponding network one";
   flags=;
   network_var=$2$;
   local_ctr_var=$3$;
   counter=LeabraNetwork::phase_no;
  };
  MethodCall @[1] {
   desc="initializes various counters at start of trial";
   flags=;
   result_var=NULL;
   obj=$2$;
   method=LeabraNetwork::Trial_Init;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  WhileLoop @[2] {
   desc="loop over phases of settling in the network";
   flags=;
   loop_code {
    name=;
    el_typ=ProgramCall;
    el_def=0;
    ProgramCall @[0] {
     desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
     flags=;
     target=.projects[0].programs.gp[0][4]$4$;
     targ_ld_init="*LeabraSettle*";
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       expr {
	expr="input_data";
       };
      };
     };
    };
    NetCounterIncr @[1] {
     desc="increment the phase number (also on network)";
     flags=;
     network_var=$2$;
     local_ctr_var=$3$;
     counter=LeabraNetwork::phase_no;
    };
    MethodCall @[2] {
     desc="increments other phase state information to prepare for the next phase of settling";
     flags=;
     result_var=NULL;
     obj=$2$;
     method=LeabraNetwork::Trial_UpdatePhase;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
   test {
    expr="phase_no < network.phase_max";
   };
  };
  MethodCall @[3] {
   desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
   flags=;
   result_var=NULL;
   obj=$2$;
   method=LeabraNetwork::Trial_Final;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  If @[4] {
   desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
   flags=;
   cond {
    expr="network.Compute_Weights_Test(network.trial+1)";
   };
   true_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc="update the weight values based on changes computed by trial program";
     flags=;
     result_var=NULL;
     obj=$2$;
     method=Network::Compute_Weights;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
  };
  ProgramCall @[5] {
   desc="records data about the trial-level processing to a datatable for graphing/processing";
   flags=;
   target=.projects[0].programs.gp[0][7]$5$;
   targ_ld_init="*LeabraTrialMonitor*";
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type="LeabraNetwork*";
     name="network";
     required=1;
     def_val=;
     expr {
      expr="network";
     };
    };
   };
  };
  NetUpdateView @[6] {
   desc="update the network view(s) (only if update_net_view is true)";
   flags=;
   network_var=$2$;
   update_var=.projects[0].programs.gp[0][3].vars[1]$6$;
  };
 };
};

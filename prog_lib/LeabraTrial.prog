// ta_Dump File v2.0
Program .projects[0].programs.gp[0][3] { 
  ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  ProgVar_List @.vars = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  ProgEl_List @.init_code = [1] {
    NetCounterInit @[0] { };
  };

  ProgEl_List @.prog_code = [6] {
    NetCounterInit @[0] { };
    MethodCall @[1] { };
    WhileLoop @[2] { 
      ProgEl_List @.loop_code = [3] {
	ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	NetCounterIncr @[1] { };
	MethodCall @[2] { };
      };
    };
    MethodCall @[3] { };
    ProgramCall @[4] { 
      ProgArg_List @.prog_args = [1] {
	ProgArg @[0] { };
      };
    };
    NetUpdateView @[5] { };
  };
};
Program .projects[0].programs.gp[0][3] {
 name="LeabraTrial";
 desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
 flags=PF_NONE;
 objs {
  name=;
  el_typ=taOBase;
  el_def=0;
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$0$;
   objs_ptr=0;
   desc=;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$1$;
   objs_ptr=0;
   desc=;
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="phase_no";
   var_type=T_Int;
   int_val=0;
   objs_ptr=0;
   desc=;
  };
  ProgVar @[1] {
   name="update_net_view";
   var_type=T_Bool;
   bool_val=1;
   objs_ptr=0;
   desc=;
  };
 };
 functions {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc=;
   off=0;
   network_var=.projects[0].programs.gp[0][3].args[0]$2$;
   local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$3$;
   counter=LeabraNetwork::phase_no;
  };
 };
 prog_code {
  name=;
  el_typ=MethodCall;
  el_def=0;
  NetCounterInit @[0] {
   desc=;
   off=0;
   network_var=$2$;
   local_ctr_var=$3$;
   counter=LeabraNetwork::phase_no;
  };
  MethodCall @[1] {
   desc=;
   off=0;
   result_var=NULL;
   obj=$2$;
   method=LeabraNetwork::Trial_Init;
   args{ };
{    };
  };
  WhileLoop @[2] {
   desc=;
   off=0;
   loop_code {
    name=;
    el_typ=ProgramCall;
    el_def=0;
    ProgramCall @[0] {
     desc=;
     off=0;
     target=.projects[0].programs.gp[0][4]$4$;
     call_init=0;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       name="network";
       value="network";
      };
     };
    };
    NetCounterIncr @[1] {
     desc=;
     off=0;
     network_var=$2$;
     local_ctr_var=$3$;
     counter=LeabraNetwork::phase_no;
    };
    MethodCall @[2] {
     desc=;
     off=0;
     result_var=NULL;
     obj=$2$;
     method=LeabraNetwork::Trial_UpdatePhase;
     args{ };
{      };
    };
   };
   loop_test="phase_no < network->phase_max";
  };
  MethodCall @[3] {
   desc="does Compute_dWt etc";
   off=0;
   result_var=NULL;
   obj=$2$;
   method=LeabraNetwork::Trial_Final;
   args{ };
{    };
  };
  ProgramCall @[4] {
   desc=;
   off=0;
   target=.projects[0].programs.gp[0][7]$5$;
   call_init=0;
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     name="network";
     value="network";
    };
   };
  };
  NetUpdateView @[5] {
   desc=;
   off=0;
   network_var=$2$;
   update_var=.projects[0].programs.gp[0][3].vars[1]$6$;
  };
 };
};

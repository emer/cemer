// ta_Dump File v3.0 -- code v7.0.4.0 rev7939
Program .projects[0].programs.gp[1][7] { 
 ProgObjList @.objs = [3] {
  DataTable @[0] { 
   DataTableCols @.data = [2] {
    float_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
   };
  };
  WtBasedRF @[1] { };
  DataTable @[2] { 
   DataTableCols @.data = [1] {
    float_Data @[0] { };
   };
  };
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [0] {
 };

 ProgVar_List @.vars = [7] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
  ProgVar @[3] { };
  ProgVar @[4] { };
  ProgVar @[5] { };
  ProgVar @[6] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [1] {
  LocalVars @[0] { 
   ProgVar_List @.local_vars = [0] {
   };
  };
 };

 ProgEl_List @.prog_code = [2] {
  LocalVars @[0] { 
   ProgVar_List @.local_vars = [0] {
   };
  };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [6] {
    ProgArg @[0] { };
    ProgArg @[1] { };
    ProgArg @[2] { };
    ProgArg @[3] { };
    ProgArg @[4] { };
    ProgArg @[5] { };
   };
  };
 };
};
Program .projects[0].programs.gp[1][7] {
 name="WtBasedRField_V3";
 short_nm="WBsRFl";
 tags="Statistic, Receptive Field";
 desc="Computes a weight based receptive field (RF) using WtBasedRF object type -- The calculation is based on V3 or V4 wts that are developed during training in combination with the RF data previously generated for layer V2 (see the program WtBasedRField_V2)";
 flags=0;
 objs {
  name="objs";
  el_typ=ActBasedRF;
  el_def=0;
  DataTable @[0] {
   name="WtRFData";
   desc="receptive field data -- could move this into AnalysisData if you want..";
   data {
    name="data";
    el_typ=float_Data;
    el_def=0;
    float_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_770";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 6 0=0.156739816069603;
       val_type_fixed=0;
      };
     };
     name="values";
     col_flags=SAVE_ROWS|SAVE_DATA;
     is_matrix=1;
     cell_geom{ 24;24;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name=;
     [2] ;;     };
     width=0;
    };
    int_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_769";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 6 0=0.156739816069603;
       val_type_fixed=0;
      };
     };
     name="count";
     col_flags=SAVE_ROWS|SAVE_DATA;
     is_matrix=1;
     cell_geom{ 24;24;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name=;
     [2] ;;     };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [576] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;   };
  };
  WtBasedRF @[1] {
   name="WtBasedRF_Analysis";
   network=.projects[0].networks[1]$$<LeabraNetwork,EmerTINetRet24>;
   trg_layer=.projects[0].networks[1].layers.gp[7][0]$$<LeabraLayer,V3>;
   snd_layer=.projects[0].networks[1].layers.gp[5][0]$$<LeabraLayer,V2h>;
   dt_trg_rf=.projects[0].programs.gp[1][7].objs[0]$$;
   dt_snd_rf=.projects[0].programs.gp[1][6].objs[0]$$<DataTable,WtRFData>;
  };
  DataTable @[2] {
   name="trg_layer_wts";
   desc=;
   data {
    name="data";
    el_typ=float_Data;
    el_def=0;
    float_Data @[0] {
     name="V2h";
     col_flags=SAVE_ROWS|SAVE_DATA;
     is_matrix=1;
     cell_geom{ 5;5;6;6;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name=;
     [2] ;;     };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [576] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;   };
  };
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=$.projects[0].networks[1]$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[1] {
   name="trg_layer";
   var_type=T_Object;
   object_type=LeabraLayer;
   object_val=$.projects[0].networks[1].layers.gp[7][0]$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="target layer to get receptive field data - will usually be V3 or V4 and must be receiving from a layer for which the RF Data has already been generated.";
   init_from=NULL;
  };
  ProgVar @[2] {
   name="snd_layer";
   var_type=T_Object;
   object_type=LeabraLayer;
   object_val=$.projects[0].networks[1].layers.gp[5][0]$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="the layer sending to target layer - for this analysis the sending layer must have been a previous target layer as you must have the RF Data for the sending layer";
   init_from=NULL;
  };
  ProgVar @[3] {
   name="snd_rf_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=$.projects[0].programs.gp[1][6].objs[0]$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="This is the RF Data previously generated for the sending layer (when it was a target layer)";
   init_from=NULL;
  };
  ProgVar @[4] {
   name="WtBasedRF_Analysis";
   var_type=T_Object;
   object_type=WtBasedRF;
   object_val=.projects[0].programs.gp[1][7].objs[1]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="This is the object on which to call the compute method";
   init_from=NULL;
  };
  ProgVar @[5] {
   name="WtRFData";
   var_type=T_Object;
   object_type=DataTable;
   object_val=$.projects[0].programs.gp[1][7].objs[0]$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="data table to record weight based receptive field values - the columns and rows will be generated by the underlying code";
   init_from=NULL;
  };
  ProgVar @[6] {
   name="trg_layer_wts";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[1][7].objs[2]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="these are the weights for each projection to each unit of the target layer";
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
  LocalVars @[0] {
   desc=;
   flags=0;
   orig_prog_code=;
   local_vars {
    name="local_vars";
    el_typ=ProgVar;
    el_def=0;
   };
  };
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  LocalVars @[0] {
   desc=;
   flags=0;
   orig_prog_code=;
   local_vars {
    name="local_vars";
    el_typ=ProgVar;
    el_def=0;
   };
  };
  MethodCall @[1] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   orig_prog_code="WtBasedRF_Analysis->ComputeHigherLayerRF()";
   result_var=NULL;
   obj=.projects[0].programs.gp[1][7].vars[4]$$;
   method=WtBasedRF::ComputeHigherLayerRF;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network_ptr;
     type="Network*";
     name="net";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network";
     };
    };
    ProgArg @[1] {
     arg_type=DataTable_ptr;
     type="DataTable*";
     name="dt_trg";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="WtRFData";
     };
    };
    ProgArg @[2] {
     arg_type=DataTable_ptr;
     type="DataTable*";
     name="dt_snd";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="snd_rf_data";
     };
    };
    ProgArg @[3] {
     arg_type=DataTable_ptr;
     type="DataTable*";
     name="wts";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="trg_layer_wts";
     };
    };
    ProgArg @[4] {
     arg_type=Layer_ptr;
     type="Layer*";
     name="tlay";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="trg_layer";
     };
    };
    ProgArg @[5] {
     arg_type=Layer_ptr;
     type="Layer*";
     name="slay";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="snd_layer";
     };
    };
   };
   meth_sig="bool ComputeHigherLayerRF(Network* net, DataTable* dt_trg, DataTable* dt_snd, DataTable* wts, Layer* tlay, Layer* slay)";
   meth_desc=" compute the rf_data for layers beyond V2. These calculations use the RF computations from all layers below (e.g. the V3 representational analysis uses the values computed for V2)";
  };
 };
 step_prog=NULL;
 step_n=1;
};

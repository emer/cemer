// ta_Dump File v3.0 -- code v7.8.4.0 rev8672
Program .projects[0].programs[0] { 
 ProgObjList @.objs = [0] {
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [2] {
  ProgVar @[0] { };
  ProgVar @[1] { };
 };

 ProgVar_List @.vars = [12] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
  ProgVar @[3] { };
  ProgVar @[4] { };
  ProgVar @[5] { };
  ProgVar @[6] { };
  ProgVar @[7] { };
  ProgVar @[8] { };
  ProgVar @[9] { };
  ProgVar @[10] { };
  ProgVar @[11] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [0] {
 };

 ProgEl_List @.prog_code = [31] {
  IfReturn @[0] { };
  RegisterArgs @[1] { };
  PrintExpr @[2] { };
  Comment @[3] { };
  ProgVarFmArg @[4] { };
  ProgVarFmArg @[5] { };
  ProgVarFmArg @[6] { };
  ProgVarFmArg @[7] { };
  ProgVarFmArg @[8] { };
  ProgVarFmArg @[9] { };
  ProgVarFmArg @[10] { };
  ProgVarFmArg @[11] { };
  ProgVarFmArg @[12] { };
  ControlPanelsFmArgs @[13] { };
  If @[14] { 
   ProgEl_List @.true_code = [1] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Comment @[15] { };
  Comment @[16] { };
  If @[17] { 
   ProgEl_List @.true_code = [4] {
    ProgVarFmArg @[0] { };
    MiscCall @[1] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    VarIncr @[2] { };
    If @[3] { 
     ProgEl_List @.true_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
   };
  };
  Else @[18] { 
   ProgEl_List @.else_code = [2] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MiscCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  MiscCall @[19] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  Comment @[20] { };
  MethodCall @[21] { 
   ProgArg_List @.meth_args = [4] {
    ProgArg @[0] { };
    ProgArg @[1] { };
    ProgArg @[2] { };
    ProgArg @[3] { };
   };
  };
  MethodCall @[22] { 
   ProgArg_List @.meth_args = [3] {
    ProgArg @[0] { };
    ProgArg @[1] { };
    ProgArg @[2] { };
   };
  };
  PrintVar @[23] { };
  Comment @[24] { };
  MethodCall @[25] { 
   ProgArg_List @.meth_args = [4] {
    ProgArg @[0] { };
    ProgArg @[1] { };
    ProgArg @[2] { };
    ProgArg @[3] { };
   };
  };
  MethodCall @[26] { 
   ProgArg_List @.meth_args = [3] {
    ProgArg @[0] { };
    ProgArg @[1] { };
    ProgArg @[2] { };
   };
  };
  PrintVar @[27] { };
  OtherProgramVar @[28] { };
  PrintExpr @[29] { };
  ProgramCall @[30] { 
   ProgArg_List @.prog_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
 };
};
Program .projects[0].programs[0] {
 name="LeabraStartup";
 short_nm="Startup";
 tags="Leabra, Startup, Parallel Batch";
 desc="run project in the background command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batches=xxx] [tag=xxx] | [b_start=xxx] [b_end=xxx] for parallel-batch mode";
 flags=STARTUP_RUN;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=taNBase;
  el_def=0;
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$$<LeabraNetwork,Network_0>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="network to operate on -- updates batch counter on network and passes it to train program";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$$<DataTable,StdInputData>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="datatable with training patterns -- not used by this program, but passed to train program";
   init_from=NULL;
  };
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="train_prog";
   var_type=T_Object;
   object_type=Program;
   object_val=.projects[0].programs.gp[0][1]$$<Program,LeabraTrain>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
   reference=0;
   desc="set this to point to your train process";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="batch_prog";
   var_type=T_Object;
   object_type=Program;
   object_val=.projects[0].programs.gp[0][0]$$<Program,LeabraBatch>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="set this to point to your batch process";
   init_from=NULL;
  };
  ProgVar @[2] {
   name="param_set";
   var_type=T_String;
   string_val=;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="name of saved parameter set to apply at startup";
   init_from=NULL;
  };
  ProgVar @[3] {
   name="tag";
   var_type=T_String;
   string_val="_gui";
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[4] {
   name="batch_str";
   var_type=T_String;
   string_val="00";
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="batch number as a string (leading zeros)";
   init_from=NULL;
  };
  ProgVar @[5] {
   name="log_dir";
   var_type=T_String;
   string_val=;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="log file directory";
   init_from=NULL;
  };
  ProgVar @[6] {
   name="log_file_nm";
   var_type=T_String;
   string_val=;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="name of log file";
   init_from=NULL;
  };
  ProgVar @[7] {
   name="batch_start";
   var_type=T_Int;
   int_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="batch starting number";
   init_from=NULL;
  };
  ProgVar @[8] {
   name="EpochOutputData";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[1][1]$$<DataTable,EpochOutputData>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[9] {
   name="TrialOutputData";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[1][0]$$<DataTable,TrialOutputData>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[10] {
   name="MyClusterRun";
   var_type=T_Object;
   object_type=ClusterRun;
   object_val=.projects[0].ctrl_panels[1]$$<ClusterRun,ClusterRun>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[11] {
   name="param_sets";
   var_type=T_Object;
   object_type=ParamSet_Group;
   object_val=.projects[0].param_sets$$<ParamSet_Group,param_sets>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  IfReturn @[0] {
   desc="don't run if running in the gui!";
   flags=0;
   orig_prog_code=;
   cond {
    expr="taMisc::gui_active";
   };
  };
  RegisterArgs @[1] {
   desc="This is KEY!!! actually processes all args, including those from ProgVarFmArg guys below";
   flags=0;
   orig_prog_code=;
  };
  PrintExpr @[2] {
   desc=;
   flags=0;
   orig_prog_code=;
   expr {
    expr="\"Loaded project: \" << .projects[0].file_name";
   };
   debug=0;
  };
  Comment @[3] {
   desc="= Std variables in startup program itself =";
   flags=0;
   orig_prog_code=;
  };
  ProgVarFmArg @[4] {
   desc=;
   flags=0;
   orig_prog_code=;
   prog=.projects[0].programs[0]$$;
   var_name="tag";
   arg_name="tag";
  };
  ProgVarFmArg @[5] {
   desc=;
   flags=0;
   orig_prog_code=;
   prog=$.projects[0].programs[0]$;
   var_name="log_dir";
   arg_name="log_dir";
  };
  ProgVarFmArg @[6] {
   desc=;
   flags=0;
   orig_prog_code=;
   prog=$.projects[0].programs[0]$;
   var_name="param_set";
   arg_name="param_set";
  };
  ProgVarFmArg @[7] {
   desc=;
   flags=0;
   orig_prog_code=;
   prog=$.projects[0].programs.gp[0][1]$;
   var_name="max_epoch";
   arg_name="epochs";
  };
  ProgVarFmArg @[8] {
   desc=;
   flags=0;
   orig_prog_code=;
   prog=$.projects[0].programs.gp[0][1]$;
   var_name="rnd_init";
   arg_name="rnd_init";
  };
  ProgVarFmArg @[9] {
   desc="starting batch -- replaces b_start";
   flags=NEW_EL;
   orig_prog_code=;
   prog=$.projects[0].programs.gp[0][0]$;
   var_name="batch_start";
   arg_name="batch_start";
  };
  ProgVarFmArg @[10] {
   desc="number of batches to run";
   flags=NEW_EL;
   orig_prog_code=;
   prog=$.projects[0].programs.gp[0][0]$;
   var_name="n_batches";
   arg_name="n_batches";
  };
  ProgVarFmArg @[11] {
   desc=;
   flags=0;
   orig_prog_code=;
   prog=$.projects[0].programs.gp[0][1]$;
   var_name="save_wts_interval";
   arg_name="save_wts_interval";
  };
  ProgVarFmArg @[12] {
   desc=;
   flags=0;
   orig_prog_code=;
   prog=$.projects[0].programs.gp[0][1]$;
   var_name="save_final_wts";
   arg_name="save_final_wts";
  };
  ControlPanelsFmArgs @[13] {
   desc="sets any arg listed in the control panel";
   flags=NEW_EL;
   orig_prog_code=;
   ctrl_panel_var=.projects[0].programs[0].vars[10]$$;
  };
  If @[14] {
   desc="set variables to values stored in a param set";
   flags=0;
   orig_prog_code="if (Act";
   cond {
    expr="param_set.nonempty()";
   };
   true_code {
    name="true_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     orig_prog_code="ActiveParamSet->CopySavedToActive()";
     result_var=NULL;
     obj=.projects[0].programs[0].vars[11]$$;
     method=ParamSet_Group::LoadParamSet;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="set_name";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="param_set";
       };
      };
     };
     meth_sig="bool LoadParamSet(taString& set_name)";
     meth_desc=;
    };
   };
  };
  Comment @[15] {
   desc="= Add your own variables here =";
   flags=0;
   orig_prog_code=;
  };
  Comment @[16] {
   desc="= Below saves log files of standard data tables =";
   flags=0;
   orig_prog_code=;
  };
  If @[17] {
   desc="set tag for starting batch (new code in v 8.0)";
   flags=NEW_EL;
   orig_prog_code=;
   cond {
    expr="taMisc::CheckArgByName(\"batch_start\")";
   };
   true_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    ProgVarFmArg @[0] {
     desc="read in the arg to us too, so we can set file names based on it";
     flags=0;
     orig_prog_code=;
     prog=$.projects[0].programs[0]$;
     var_name="batch_start";
     arg_name="batch_start";
    };
    MiscCall @[1] {
     desc="string version with leading zeros";
     flags=0;
     orig_prog_code=;
     result_var=.projects[0].programs[0].vars[4]$$;
     object_type=taMisc;
     method=taMisc::LeadingZeros;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="num";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="batch_start";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="len";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="2";
       };
      };
     };
    };
    VarIncr @[2] {
     desc="add to tag for setting log file names";
     flags=0;
     orig_prog_code=;
     var=.projects[0].programs[0].vars[3]$$;
     expr {
      expr="\".\" + batch_str";
     };
    };
    If @[3] {
     desc="save startup args: only for first job in parallel batch mode, or this should be 0 otherwise in any case";
     flags=0;
     orig_prog_code=;
     cond {
      expr="batch_start == 0";
     };
     true_code {
      name=;
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc="save args to file: last arg is to include dmem proc number";
       flags=0;
       orig_prog_code=;
       result_var=.projects[0].programs[0].vars[6]$$;
       obj=.projects[0].programs[0].vars[8]$$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\".args\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="tag.before(\".00\",-1)";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
       meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
      };
      MiscCall @[1] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=NULL;
       object_type=taMisc;
       method=taMisc::FullArgStringToFile;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_file_nm";
	 };
	};
       };
      };
     };
    };
   };
  };
  Else @[18] {
   desc=;
   flags=0;
   orig_prog_code=;
   else_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     desc="save args to file: last arg is to include dmem proc number";
     flags=0;
     orig_prog_code=;
     result_var=$.projects[0].programs[0].vars[6]$;
     obj=$.projects[0].programs[0].vars[8]$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".args\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MiscCall @[1] {
     desc=;
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::FullArgStringToFile;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_file_nm";
       };
      };
     };
    };
   };
  };
  MiscCall @[19] {
   desc="report any args that didn't get used!";
   flags=NEW_EL|CAN_REVERT_TO_CODE;
   orig_prog_code="taMisc::ReportUnusedArgs()";
   result_var=NULL;
   object_type=taMisc;
   method=taMisc::ReportUnusedArgs;
   meth_args {
    name="ProgArg_List_0";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="err";
     required=0;
     def_val="true";
     prev_expr=;
     expr {
      expr="true";
     };
    };
   };
  };
  Comment @[20] {
   desc="== Save epoch log -- on by default ==";
   flags=0;
   orig_prog_code=;
  };
  MethodCall @[21] {
   desc="last arg is to include dmem proc number";
   flags=0;
   orig_prog_code=;
   result_var=$.projects[0].programs[0].vars[6]$;
   obj=$.projects[0].programs[0].vars[8]$;
   method=taBase::GetFileNameFmProject;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_taString_ref;
     type="taString&";
     name="ext";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="\".epc.dat\"";
     };
    };
    ProgArg @[1] {
     arg_type=const_taString_ref;
     type="taString&";
     name="tag";
     required=0;
     def_val="\"\"";
     prev_expr=;
     expr {
      expr="tag";
     };
    };
    ProgArg @[2] {
     arg_type=const_taString_ref;
     type="taString&";
     name="subdir";
     required=0;
     def_val="\"\"";
     prev_expr=;
     expr {
      expr="log_dir";
     };
    };
    ProgArg @[3] {
     arg_type=bool;
     type="bool";
     name="dmem_proc_no";
     required=0;
     def_val="false";
     prev_expr=;
     expr {
      expr="false";
     };
    };
   };
   meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
   meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
  };
  MethodCall @[22] {
   desc="last arg is to restrict log to dmem_proc = 0";
   flags=0;
   orig_prog_code=;
   result_var=NULL;
   obj=$.projects[0].programs[0].vars[8]$;
   method=DataTable::SaveDataLog;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_taString_ref;
     type="taString&";
     name="fname";
     required=0;
     def_val="\"\"";
     prev_expr=;
     expr {
      expr="log_file_nm";
     };
    };
    ProgArg @[1] {
     arg_type=bool;
     type="bool";
     name="append";
     required=0;
     def_val="false";
     prev_expr=;
     expr {
      expr="false";
     };
    };
    ProgArg @[2] {
     arg_type=bool;
     type="bool";
     name="dmem_proc_0";
     required=0;
     def_val="true";
     prev_expr=;
     expr {
      expr="true";
     };
    };
   };
   meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
   meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
  };
  PrintVar @[23] {
   desc=;
   flags=0;
   orig_prog_code=;
   message="Saving epoch log data to:";
   print_var=$.projects[0].programs[0].vars[6]$;
   print_var2=NULL;
   print_var3=NULL;
   print_var4=NULL;
   print_var5=NULL;
   print_var6=NULL;
   debug=0;
  };
  Comment @[24] {
   desc="== Save trial log -- OFF by default ==";
   flags=0;
   orig_prog_code=;
  };
  MethodCall @[25] {
   desc="last arg is to include dmem proc number";
   flags=OFF;
   orig_prog_code=;
   result_var=$.projects[0].programs[0].vars[6]$;
   obj=.projects[0].programs[0].vars[9]$$;
   method=taBase::GetFileNameFmProject;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_taString_ref;
     type="taString&";
     name="ext";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="\".trl.dat\"";
     };
    };
    ProgArg @[1] {
     arg_type=const_taString_ref;
     type="taString&";
     name="tag";
     required=0;
     def_val="\"\"";
     prev_expr=;
     expr {
      expr="tag";
     };
    };
    ProgArg @[2] {
     arg_type=const_taString_ref;
     type="taString&";
     name="subdir";
     required=0;
     def_val="\"\"";
     prev_expr=;
     expr {
      expr="log_dir";
     };
    };
    ProgArg @[3] {
     arg_type=bool;
     type="bool";
     name="dmem_proc_no";
     required=0;
     def_val="false";
     prev_expr=;
     expr {
      expr="true";
     };
    };
   };
   meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
   meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
  };
  MethodCall @[26] {
   desc="last arg is to restrict log to dmem_proc = 0";
   flags=OFF;
   orig_prog_code=;
   result_var=NULL;
   obj=$.projects[0].programs[0].vars[9]$;
   method=DataTable::SaveDataLog;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_taString_ref;
     type="taString&";
     name="fname";
     required=0;
     def_val="\"\"";
     prev_expr=;
     expr {
      expr="log_file_nm";
     };
    };
    ProgArg @[1] {
     arg_type=bool;
     type="bool";
     name="append";
     required=0;
     def_val="false";
     prev_expr=;
     expr {
      expr="false";
     };
    };
    ProgArg @[2] {
     arg_type=bool;
     type="bool";
     name="dmem_proc_0";
     required=0;
     def_val="true";
     prev_expr=;
     expr {
      expr="false";
     };
    };
   };
   meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
   meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
  };
  PrintVar @[27] {
   desc=;
   flags=OFF;
   orig_prog_code=;
   message="Saving trial log data to:";
   print_var=$.projects[0].programs[0].vars[6]$;
   print_var2=NULL;
   print_var3=NULL;
   print_var4=NULL;
   print_var5=NULL;
   print_var6=NULL;
   debug=0;
  };
  OtherProgramVar @[28] {
   desc="propagate the tag";
   flags=0;
   orig_prog_code=;
   other_prog=.projects[0].programs.gp[0][9]$$<Program,SaveWeights>;
   set_other=1;
   var_1=$.projects[0].programs[0].vars[3]$;
   var_2=NULL;
   var_3=NULL;
   var_4=NULL;
  };
  PrintExpr @[29] {
   desc=;
   flags=0;
   orig_prog_code=;
   expr {
    expr="\"Running: \" << batch_prog.name";
   };
   debug=0;
  };
  ProgramCall @[30] {
   desc=;
   flags=0;
   orig_prog_code=;
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type="LeabraNetwork*";
     name="network";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network";
     };
    };
    ProgArg @[1] {
     arg_type=DataTable;
     type="DataTable*";
     name="input_data";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="input_data";
     };
    };
   };
   target=$.projects[0].programs.gp[0][0]$;
   targ_ld_init="*LeabraBatch*";
  };
 };
 step_prog=NULL;
 step_n=1;
};

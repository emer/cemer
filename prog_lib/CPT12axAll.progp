// ta_Dump File v2.0
Program_Group .projects[0].programs.gp[1] { 
  Program_Group .projects[0].programs.gp[1] = [2] {
    Program @[0] { 
      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgVar_List @.vars = [1] {
	ProgVar @[0] { };
      };

      ProgEl_List @.prog_code = [2] {
	MethodCall @[0] { };
	ForLoop @[1] { 
	  ProgEl_List @.loop_code = [1] {
	    ProgramCall @[0] { 
	      ProgArg_List @.prog_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	  };
	};
      };
    };
    Program @[1] { 
      ProgType_List @.types = [3] {
	DynEnumType @[0] { 
	  DynEnumItem_List @.enums = [9] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	    DynEnumItem @[2] { };
	    DynEnumItem @[3] { };
	    DynEnumItem @[4] { };
	    DynEnumItem @[5] { };
	    DynEnumItem @[6] { };
	    DynEnumItem @[7] { };
	    DynEnumItem @[8] { };
	  };
	};
	DynEnumType @[1] { 
	  DynEnumItem_List @.enums = [2] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	  };
	};
	DynEnumType @[2] { 
	  DynEnumItem_List @.enums = [1] {
	    DynEnumItem @[0] { };
	  };
	};
      };

      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgVar_List @.vars = [12] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
      };

      Function_List @.functions = [1] {
	Function @[0] { 
	  ProgVar_List @.args = [4] {
	    ProgVar @[0] { };
	    ProgVar @[1] { };
	    ProgVar @[2] { };
	    ProgVar @[3] { };
	  };

	  ProgEl_List @.fun_code = [5] {
	    AddNewDataRow @[0] { };
	    MethodCall @[1] { 
	      ProgArg_List @.meth_args = [3] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
	      };
	    };
	    SetUnitsVar @[2] { };
	    SetUnitsVar @[3] { };
	    IfElse @[4] { 
	      ProgEl_List @.true_code = [1] {
		SetUnitsLit @[0] { };
	      };
	    };
	  };
	};
      };

      ProgEl_List @.init_code = [1] {
	InitNamedUnits @[0] { };
      };

      ProgEl_List @.prog_code = [6] {
	RandomCall @[0] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	VarIncr @[1] { };
	RandomCall @[2] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	AssignExpr @[3] { };
	FunctionCall @[4] { 
	  ProgArg_List @.fun_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	ForLoop @[5] { 
	  ProgEl_List @.loop_code = [7] {
	    ProgVars @[0] { 
	      ProgVar_List @.local_vars = [3] {
		ProgVar @[0] { };
		ProgVar @[1] { };
		ProgVar @[2] { };
	      };
	    };
	    RandomCall @[1] { };
	    IfElse @[2] { 
	      ProgEl_List @.true_code = [3] {
		RandomCall @[0] { 
		  ProgArg_List @.meth_args = [1] {
		    ProgArg @[0] { };
		  };
		};
		AssignExpr @[1] { };
		AssignExpr @[2] { };
	      };

	      ProgEl_List @.false_code = [2] {
		RandomCall @[0] { 
		  ProgArg_List @.meth_args = [2] {
		    ProgArg @[0] { };
		    ProgArg @[1] { };
		  };
		};
		RandomCall @[1] { 
		  ProgArg_List @.meth_args = [2] {
		    ProgArg @[0] { };
		    ProgArg @[1] { };
		  };
		};
	      };
	    };
	    IfElse @[3] { 
	      ProgEl_List @.true_code = [1] {
		AssignExpr @[0] { };
	      };

	      ProgEl_List @.false_code = [1] {
		AssignExpr @[0] { };
	      };
	    };
	    FunctionCall @[4] { 
	      ProgArg_List @.fun_args = [4] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
		ProgArg @[3] { };
	      };
	    };
	    FunctionCall @[5] { 
	      ProgArg_List @.fun_args = [4] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
		ProgArg @[3] { };
	      };
	    };
	    DoneWritingDataRow @[6] { };
	  };
	};
      };
    };
  };
};
Program_Group .projects[0].programs.gp[1] {
 name="CPT12axAll";
 el_typ=Program;
 el_def=0;
 step_prog=.projects[0].programs.gp[1][1]$0$;
 tags=;
 desc="Generate InputData for 12-AX CPT task: Epoch + Trial";
 Program @[0] {
  name="CPT12axEpoch";
  tags=;
  desc="Generate a full epoch's worth of trials for the 12-AX CPT task";
  flags=;
  objs {
   name=;
   el_typ=taOBase;
   el_def=0;
  };
  types {
   name=;
   el_typ=ProgType;
   el_def=0;
  };
  args {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=.projects[0].data.gp[0][0]$1$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc=;
   };
   ProgVar @[1] {
    name="n_per_epc";
    var_type=T_Int;
    int_val=25;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="number of trials (cue-probe pairs) per epoch";
   };
  };
  vars {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="trial_no";
    var_type=T_Int;
    int_val=25;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc=;
   };
  };
  functions {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  load_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  init_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  prog_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
   MethodCall @[0] {
    desc=;
    flags=;
    result_var=NULL;
    obj=.projects[0].programs.gp[1][0].args[0]$2$;
    method=DataTable::ResetData;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   ForLoop @[1] {
    desc=;
    flags=;
    loop_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     ProgramCall @[0] {
      desc=;
      flags=;
      target=$0$;
      targ_ld_init="*12axTrial*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ input_data;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="trial_no";
	required=1;
	def_val=;
	expr {
	 expr="trial_no";
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ trial_no;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
    init {
     expr="trial_no = 0";
     var_expr="$#0#$ = 0";
     vars {
     };
     var_names{ trial_no;     };
     bad_vars{      };
    };
    test {
     expr="trial_no < n_per_epc";
     var_expr="$#0#$ < $#1#$";
     vars {
     };
     var_names{ trial_no;n_per_epc;     };
     bad_vars{      };
    };
    iter {
     expr="trial_no++";
     var_expr="$#0#$++";
     vars {
     };
     var_names{ trial_no;     };
     bad_vars{      };
    };
   };
  };
 };
 Program @[1] {
  name="CPT12axTrial";
  tags=;
  desc="Generate one trial (outer loop with multiple inner loops) of the 12-AX CPT Task";
  flags=;
  objs {
   name=;
   el_typ=taOBase;
   el_def=0;
  };
  types {
   name=;
   el_typ=DynEnumType;
   el_def=0;
   DynEnumType @[0] {
    name="Input";
    desc=;
    enums {
     name=;
     el_typ=DynEnumItem;
     el_def=0;
     DynEnumItem @[0] {
      name="I_A";
      value=0;
      desc=;
     };
     DynEnumItem @[1] {
      name="I_B";
      value=1;
      desc=;
     };
     DynEnumItem @[2] {
      name="I_C";
      value=2;
      desc=;
     };
     DynEnumItem @[3] {
      name="I_X";
      value=3;
      desc=;
     };
     DynEnumItem @[4] {
      name="I_Y";
      value=4;
      desc=;
     };
     DynEnumItem @[5] {
      name="I_Z";
      value=5;
      desc=;
     };
     DynEnumItem @[6] {
      name="I_ONE";
      value=6;
      desc=;
     };
     DynEnumItem @[7] {
      name="I_TWO";
      value=7;
      desc=;
     };
     DynEnumItem @[8] {
      name="I_THREE";
      value=8;
      desc=;
     };
    };
    bits=0;
   };
   DynEnumType @[1] {
    name="Output";
    desc=;
    enums {
     name=;
     el_typ=DynEnumItem;
     el_def=0;
     DynEnumItem @[0] {
      name="O_L";
      value=0;
      desc=;
     };
     DynEnumItem @[1] {
      name="O_R";
      value=1;
      desc=;
     };
    };
    bits=0;
   };
   DynEnumType @[2] {
    name="RewTarg";
    desc=;
    enums {
     name=;
     el_typ=DynEnumItem;
     el_def=0;
     DynEnumItem @[0] {
      name="R_rew_targ";
      value=0;
      desc=;
     };
    };
    bits=0;
   };
  };
  args {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=$1$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc=;
   };
   ProgVar @[1] {
    name="trial_no";
    var_type=T_Int;
    int_val=25;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="trial number, for making group names unique";
   };
  };
  vars {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="max_maint";
    var_type=T_Int;
    int_val=4;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="maximum maintenance duration for outer loop";
   };
   ProgVar @[1] {
    name="targ_pct";
    var_type=T_Real;
    real_val=0.5;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="percent (proportion) of trials that are targets";
   };
   ProgVar @[2] {
    name="n_stims";
    var_type=T_Int;
    int_val=3;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="number of different stimulus types (cues, probes, tasks) -- must match current input config!";
   };
   ProgVar @[3] {
    name="n_inner_trials";
    var_type=T_Int;
    int_val=2;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="number of inner-loop trials";
   };
   ProgVar @[4] {
    name="task";
    var_type=T_DynEnum;
    dyn_enum_val {
     enum_type=.projects[0].programs.gp[1][1].types[0]$3$;
     value=7;
    };
    objs_ptr=0;
    flags=NULL_CHECK;
    desc="outer-loop task stimulus";
   };
   ProgVar @[5] {
    name="cue";
    var_type=T_DynEnum;
    dyn_enum_val {
     enum_type=$3$;
     value=1;
    };
    objs_ptr=0;
    flags=NULL_CHECK;
    desc="first stimulus in cue-probe pair";
   };
   ProgVar @[6] {
    name="probe";
    var_type=T_DynEnum;
    dyn_enum_val {
     enum_type=$3$;
     value=4;
    };
    objs_ptr=0;
    flags=NULL_CHECK;
    desc="second stimulus in cue-probe pair";
   };
   ProgVar @[7] {
    name="output";
    var_type=T_DynEnum;
    dyn_enum_val {
     enum_type=.projects[0].programs.gp[1][1].types[1]$4$;
     value=0;
    };
    objs_ptr=0;
    flags=NULL_CHECK;
    desc="output responses";
   };
   ProgVar @[8] {
    name="group_name";
    var_type=T_String;
    string_val="24_I_TWO";
    objs_ptr=0;
    flags=NULL_CHECK;
    desc="name of current group of trials";
   };
   ProgVar @[9] {
    name="unit_names";
    var_type=T_Object;
    object_type=taOBase;
    object_val=.projects[0].data.gp[0][1]$5$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc=;
   };
   ProgVar @[10] {
    name="network";
    var_type=T_Object;
    object_type=LeabraNetwork;
    object_val=.projects[0].networks[0]$6$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc=;
   };
   ProgVar @[11] {
    name="i";
    var_type=T_Int;
    int_val=0;
    objs_ptr=0;
    flags=NULL_CHECK;
    desc=;
   };
  };
  functions {
   name=;
   el_typ=Function;
   el_def=0;
   Function @[0] {
    desc=;
    flags=;
    return_val {
     name="rval";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    name="MakeEvent";
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="group";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="name for the group column";
     };
     ProgVar @[1] {
      name="in_idx";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=$3$;
       value=-1;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="Index of input unit to turn on";
     };
     ProgVar @[2] {
      name="out_idx";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=$4$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="Index of output unit to turn on";
     };
     ProgVar @[3] {
      name="rew_targ";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="is this a reward target trial?";
     };
    };
    fun_code {
     name=;
     el_typ=AddNewDataRow;
     el_def=0;
     AddNewDataRow @[0] {
      desc=;
      flags=;
      data_var=.projects[0].programs.gp[1][1].args[0]$7$;
     };
     MethodCall @[1] {
      desc="set the task name ";
      flags=;
      result_var=NULL;
      obj=$7$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="group";
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ group;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"Group\"";
	 var_expr="\"Group\"";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	 var_expr="-1";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     SetUnitsVar @[2] {
      desc=;
      flags=;
      input_data_var=$7$;
      set_nm=1;
      offset=NULL;
      unit_1=.projects[0].programs.gp[1][1].functions[0].args[1]$8$;
      unit_2=NULL;
      unit_3=NULL;
      unit_4=NULL;
     };
     SetUnitsVar @[3] {
      desc=;
      flags=;
      input_data_var=$7$;
      set_nm=1;
      offset=NULL;
      unit_1=.projects[0].programs.gp[1][1].functions[0].args[2]$9$;
      unit_2=NULL;
      unit_3=NULL;
      unit_4=NULL;
     };
     IfElse @[4] {
      desc=;
      flags=;
      cond {
       expr="rew_targ";
       var_expr="$#0#$";
       vars {
       };
       var_names{ rew_targ;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=SetUnitsLit;
       el_def=0;
       SetUnitsLit @[0] {
	desc=;
	flags=;
	input_data_var=$7$;
	set_nm=0;
	offset=0;
	unit_1 {
	 enum_type=.projects[0].programs.gp[1][1].types[2]$10$;
	 value=0;
	};
	unit_2 {
	 enum_type=NULL;
	 value=-1;
	};
	unit_3 {
	 enum_type=NULL;
	 value=-1;
	};
	unit_4 {
	 enum_type=NULL;
	 value=-1;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
    };
   };
  };
  load_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  init_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
   InitNamedUnits @[0] {
    desc=;
    flags=;
    input_data_var=$7$;
    unit_names_var=.projects[0].programs.gp[1][1].vars[9]$11$;
    network_var=.projects[0].programs.gp[1][1].vars[10]$12$;
    init_label_net=1;
    n_lay_name_chars=1;
   };
  };
  prog_code {
   name=;
   el_typ=UserScript;
   el_def=0;
   RandomCall @[0] {
    desc=;
    flags=;
    result_var=.projects[0].programs.gp[1][1].vars[4]$13$;
    object_type=Random;
    method=Random::IntZeroN;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=int;
      type="int";
      name="n";
      required=0;
      def_val=;
      expr {
       expr="2";
       var_expr="2";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   VarIncr @[1] {
    desc="add starting task offset";
    flags=;
    var=$13$;
    expr {
     expr="I_ONE";
     var_expr="I_ONE";
     vars {
     };
     var_names{      };
     bad_vars{      };
    };
   };
   RandomCall @[2] {
    desc=;
    flags=;
    result_var=.projects[0].programs.gp[1][1].vars[3]$14$;
    object_type=Random;
    method=Random::IntMinMax;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=int;
      type="int";
      name="min";
      required=0;
      def_val=;
      expr {
       expr="1";
       var_expr="1";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=int;
      type="int";
      name="max";
      required=0;
      def_val=;
      expr {
       expr="max_maint";
       var_expr="$#0#$";
       vars {
       };
       var_names{ max_maint;       };
       bad_vars{        };
      };
     };
    };
   };
   AssignExpr @[3] {
    desc=;
    flags=;
    result_var=.projects[0].programs.gp[1][1].vars[8]$15$;
    expr {
     expr="(String)trial_no + \"_\" + (String)task";
     var_expr="(String)$#0#$ + \"_\" + (String)$#1#$";
     vars {
     };
     var_names{ trial_no;task;     };
     bad_vars{      };
    };
   };
   FunctionCall @[4] {
    desc="Create the Task Event";
    flags=;
    result_var=NULL;
    fun=.projects[0].programs.gp[1][1].functions[0]$16$;
    fun_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=taString;
      type="String";
      name="group";
      required=1;
      def_val=;
      expr {
       expr="group_name";
       var_expr="$#0#$";
       vars {
       };
       var_names{ group_name;       };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=DynEnum;
      type="Input";
      name="in_idx";
      required=1;
      def_val=;
      expr {
       expr="task";
       var_expr="$#0#$";
       vars {
       };
       var_names{ task;       };
       bad_vars{        };
      };
     };
     ProgArg @[2] {
      arg_type=DynEnum;
      type="Output";
      name="out_idx";
      required=1;
      def_val=;
      expr {
       expr="O_L";
       var_expr="O_L";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[3] {
      arg_type=bool;
      type="bool";
      name="rew_targ";
      required=1;
      def_val=;
      expr {
       expr="false";
       var_expr="false";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   ForLoop @[5] {
    desc="generate the cue-probe trials";
    flags=;
    loop_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     ProgVars @[0] {
      desc=;
      flags=;
      local_vars {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="trg_rnd_prob";
	var_type=T_Real;
	real_val=0;
	objs_ptr=0;
	flags=CTRL_PANEL|NULL_CHECK|LOCAL_VAR;
	desc="random probability value for generating a target";
       };
       ProgVar @[1] {
	name="a_or_b";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=CTRL_PANEL|NULL_CHECK|LOCAL_VAR;
	desc="random A or B cue/probe value";
       };
       ProgVar @[2] {
	name="probe_output";
	var_type=T_DynEnum;
	dyn_enum_val {
	 enum_type=$4$;
	 value=-1;
	};
	objs_ptr=0;
	flags=CTRL_PANEL|NULL_CHECK|LOCAL_VAR;
	desc="output value for the probe trial: depends on whether this is a target cue-probe sequence for given task";
       };
      };
     };
     RandomCall @[1] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][1].prog_code[5].loop_code[0].local_vars[0]$17$;
      object_type=Random;
      method=Random::ZeroOne;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[2] {
      desc=;
      flags=;
      cond {
       expr="trg_rnd_prob < targ_pct";
       var_expr="$#0#$ < $#1#$";
       vars {
       };
       var_names{ trg_rnd_prob;targ_pct;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       RandomCall @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].prog_code[5].loop_code[0].local_vars[1]$18$;
	object_type=Random;
	method=Random::IntZeroN;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="n";
	  required=0;
	  def_val=;
	  expr {
	   expr="2";
	   var_expr="2";
	   vars {
	   };
	   var_names{ 	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       AssignExpr @[1] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].vars[5]$19$;
	expr {
	 expr="I_A + a_or_b";
	 var_expr="I_A + $#0#$";
	 vars {
	 };
	 var_names{ a_or_b;	 };
	 bad_vars{ 	 };
	};
       };
       AssignExpr @[2] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].vars[6]$20$;
	expr {
	 expr="I_X + a_or_b";
	 var_expr="I_X + $#0#$";
	 vars {
	 };
	 var_names{ a_or_b;	 };
	 bad_vars{ 	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       RandomCall @[0] {
	desc=;
	flags=;
	result_var=$19$;
	object_type=Random;
	method=Random::IntMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="min";
	  required=0;
	  def_val=;
	  expr {
	   expr="I_A";
	   var_expr="I_A";
	   vars {
	   };
	   var_names{ 	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="max";
	  required=0;
	  def_val=;
	  expr {
	   expr="I_C+1";
	   var_expr="I_C+1";
	   vars {
	   };
	   var_names{ 	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       RandomCall @[1] {
	desc=;
	flags=;
	result_var=$20$;
	object_type=Random;
	method=Random::IntMinMax;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="min";
	  required=0;
	  def_val=;
	  expr {
	   expr="I_X";
	   var_expr="I_X";
	   vars {
	   };
	   var_names{ 	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[1] {
	  arg_type=int;
	  type="int";
	  name="max";
	  required=0;
	  def_val=;
	  expr {
	   expr="I_Z+1";
	   var_expr="I_Z+1";
	   vars {
	   };
	   var_names{ 	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
      };
     };
     IfElse @[3] {
      desc="check for targets";
      flags=;
      cond {
       expr="((task == I_ONE) && (cue == I_A) && (probe == I_X)) 
  || ((task == I_TWO) && (cue == I_B) && (probe == I_Y))";
       var_expr="(($#0#$ == I_ONE) && ($#1#$ == I_A) && ($#2#$ == I_X)) 
  || (($#0#$ == I_TWO) && ($#1#$ == I_B) && ($#2#$ == I_Y))";
       vars {
       };
       var_names{ task;cue;probe;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=.projects[0].programs.gp[1][1].prog_code[5].loop_code[0].local_vars[2]$21$;
	expr {
	 expr="O_R";
	 var_expr="O_R";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=;
	result_var=$21$;
	expr {
	 expr="O_L";
	 var_expr="O_L";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     FunctionCall @[4] {
      desc="Create the Cue Event";
      flags=;
      result_var=NULL;
      fun=$16$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="group";
	required=1;
	def_val=;
	expr {
	 expr="group_name";
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ group_name;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=DynEnum;
	type="Input";
	name="in_idx";
	required=1;
	def_val=;
	expr {
	 expr="cue";
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ cue;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=DynEnum;
	type="Output";
	name="out_idx";
	required=1;
	def_val=;
	expr {
	 expr="O_L";
	 var_expr="O_L";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="rew_targ";
	required=1;
	def_val=;
	expr {
	 expr="false";
	 var_expr="false";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     FunctionCall @[5] {
      desc="Create the Probe Event";
      flags=;
      result_var=NULL;
      fun=$16$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="group";
	required=1;
	def_val=;
	expr {
	 expr="group_name";
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ group_name;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=DynEnum;
	type="Input";
	name="in_idx";
	required=1;
	def_val=;
	expr {
	 expr="probe";
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ probe;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=DynEnum;
	type="Output";
	name="out_idx";
	required=1;
	def_val=;
	expr {
	 expr="probe_output";
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ probe_output;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="rew_targ";
	required=1;
	def_val=;
	expr {
	 expr="true";
	 var_expr="true";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     DoneWritingDataRow @[6] {
      desc=;
      flags=;
      data_var=$7$;
     };
    };
    init {
     expr="i = 0";
     var_expr="$#0#$ = 0";
     vars {
     };
     var_names{ i;     };
     bad_vars{      };
    };
    test {
     expr="i < n_inner_trials";
     var_expr="$#0#$ < $#1#$";
     vars {
     };
     var_names{ i;n_inner_trials;     };
     bad_vars{      };
    };
    iter {
     expr="i++";
     var_expr="$#0#$++";
     vars {
     };
     var_names{ i;     };
     bad_vars{      };
    };
   };
  };
 };
};

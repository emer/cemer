// ta_Dump File v2.0
Program .projects[0].programs.gp[0][1] { 
  ProgObjList @.objs = [1] {
    RndSeed @[0] { };
  };

  ProgType_List @.types = [1] {
    DynEnumType @[0] { 
      DynEnumItem_List @.enums = [2] {
	DynEnumItem @[0] { };
	DynEnumItem @[1] { };
      };
    };
  };

  ProgVar_List @.args = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
  };

  ProgVar_List @.vars = [7] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
  };

  ProgEl_List @.init_code = [5] {
    AssignExpr @[0] { };
    MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
      };
    };
    AssignExpr @[2] { };
    IfElse @[3] { 
      ProgEl_List @.true_code = [1] {
	MethodCall @[0] { };
      };

      ProgEl_List @.false_code = [1] {
	MethodCall @[0] { };
      };
    };
    IfGuiPrompt @[4] { 
      ProgEl_List @.yes_code = [2] {
	MethodCall @[0] { };
	PrintExpr @[1] { };
      };
    };
  };

  ProgEl_List @.prog_code = [7] {
    AssignExpr @[0] { };
    MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
      };
    };
    MemberAssign @[2] { };
    IfElse @[3] { 
      ProgEl_List @.true_code = [2] {
	MethodCall @[0] { };
	PrintExpr @[1] { };
      };
    };
    AssignExpr @[4] { };
    WhileLoop @[5] { 
      ProgEl_List @.loop_code = [3] {
	ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	NetCounterIncr @[1] { };
	IfBreak @[2] { };
      };
    };
    MethodCall @[6] { };
  };
};
Program .projects[0].programs.gp[0][1] {
 name="CsTrain";
 tags="Cs, Std";
 desc="A complete training run of a constraint satisfaction network: iterating over epochs until the network has learned the task";
 flags=;
 objs {
  name=;
  el_typ=RndSeed;
  el_def=0;
  RndSeed @[0] {
   name="rnd_seed";
   seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;   };
   mti=156;
  };
 };
 types {
  name=;
  el_typ=DynEnumType;
  el_def=0;
  DynEnumType @[0] {
   name="RndInitType";
   desc=;
   enums {
    name=;
    el_typ=DynEnumItem;
    el_def=0;
    DynEnumItem @[0] {
     name="OLD_SEED";
     value=0;
     desc="use stored random seed value (recreates same sequence every time)";
    };
    DynEnumItem @[1] {
     name="NEW_SEED";
     value=1;
     desc="generate new random seed (new sequence of random numbers)";
    };
   };
   bits=0;
  };
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$0$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="network to train";
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$1$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="datatable with training patterns";
  };
  ProgVar @[2] {
   name="no_prompts";
   var_type=T_Bool;
   bool_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="max_epoch";
   var_type=T_Int;
   int_val=500;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="maximum number of epochs to run";
  };
  ProgVar @[1] {
   name="train_mode";
   var_type=T_HardEnum;
   int_val=1;
   hard_enum_type=Network::TrainMode;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
  };
  ProgVar @[2] {
   name="rnd_init";
   var_type=T_DynEnum;
   dyn_enum_val {
    enum_type=.projects[0].programs.gp[0][1].types[0]$2$;
    value=0;
   };
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="how to initialize the random numbers when the Init button is pressed";
  };
  ProgVar @[3] {
   name="epoch";
   var_type=T_Int;
   int_val=16;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="current epoch -- local copy, which is used to update network's epoch counter";
  };
  ProgVar @[4] {
   name="err_stopcrit";
   var_type=T_Real;
   real_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
  };
  ProgVar @[5] {
   name="rnd_seed";
   var_type=T_Object;
   object_type=RndSeed;
   object_val=.projects[0].programs.gp[0][1].objs[0]$3$;
   objs_ptr=1;
   flags=NULL_CHECK;
   desc="random seed that is used at start of training -- if OldSeed is called";
  };
  ProgVar @[6] {
   name="train_timer";
   var_type=T_Object;
   object_type=TimeUsed;
   object_val=.projects[0].networks[0].train_time$4$;
   objs_ptr=0;
   flags=NULL_CHECK;
   desc="records time used to train network (object lives on network -- this is a pointer to it)";
  };
 };
 functions {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 load_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=MethodCall;
  el_def=0;
  AssignExpr @[0] {
   desc=;
   flags=;
   result_var=.projects[0].programs.gp[0][1].args[2]$5$;
   expr {
    expr="false";
    flags=;
    var_expr="false";
    vars {
    };
    var_names{     };
    bad_vars{     };
   };
  };
  MethodCall @[1] {
   desc="check network to make sure it is ready to be run";
   flags=;
   result_var=NULL;
   obj=.projects[0].programs.gp[0][1].args[0]$6$;
   method=taBase::CheckConfig;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="quiet";
     required=0;
     def_val="false";
     expr {
      expr="false";
      flags=;
      var_expr="false";
      vars {
      };
      var_names{       };
      bad_vars{       };
     };
    };
   };
  };
  AssignExpr @[2] {
   desc="get our pointer to the network training time object";
   flags=;
   result_var=.projects[0].programs.gp[0][1].vars[6]$7$;
   expr {
    expr="network.train_time";
    flags=;
    var_expr="$#0#$.train_time";
    vars {
    };
    var_names{ network;    };
    bad_vars{     };
   };
  };
  IfElse @[3] {
   desc="initialize random seed (either old or new)";
   flags=;
   cond {
    expr="rnd_init == OLD_SEED";
    flags=;
    var_expr="$#0#$ == OLD_SEED";
    vars {
    };
    var_names{ rnd_init;    };
    bad_vars{     };
   };
   true_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc="restore previous random seed (all runs produce same results)";
     flags=;
     result_var=NULL;
     obj=.projects[0].programs.gp[0][1].vars[5]$8$;
     method=RndSeed::OldSeed;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
   false_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc="new random numbers each time";
     flags=;
     result_var=NULL;
     obj=$8$;
     method=RndSeed::NewSeed;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
  };
  IfGuiPrompt @[4] {
   desc="don't initialize weights without checking";
   flags=;
   prompt="Do you want to Initialize Network Weights";
   yes_label="Yes";
   no_label="No";
   yes_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc="initialize network weights: could also load pre-set weights or something else here";
     flags=;
     result_var=NULL;
     obj=$6$;
     method=Network::Init_Weights;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    PrintExpr @[1] {
     desc=;
     flags=;
     expr {
      expr="network.name << \" Weights Initialized\"";
      flags=;
      var_expr="$#0#$.name << \" Weights Initialized\"";
      vars {
      };
      var_names{ network;      };
      bad_vars{       };
     };
    };
   };
  };
 };
 prog_code {
  name=;
  el_typ=MethodCall;
  el_def=0;
  AssignExpr @[0] {
   desc="get our pointer to the network training time object";
   flags=;
   result_var=$7$;
   expr {
    expr="network.train_time";
    flags=;
    var_expr="$#0#$.train_time";
    vars {
    };
    var_names{ network;    };
    bad_vars{     };
   };
  };
  MethodCall @[1] {
   desc="start timer to keep track of how long it takes to run entire training run";
   flags=;
   result_var=NULL;
   obj=$7$;
   method=TimeUsed::StartTimer;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="reset_used";
     required=0;
     def_val="true";
     expr {
      expr="true";
      flags=;
      var_expr="true";
      vars {
      };
      var_names{       };
      bad_vars{       };
     };
    };
   };
  };
  MemberAssign @[2] {
   desc="set network's training mode to our local value";
   flags=;
   obj=$6$;
   path="train_mode";
   expr {
    expr="train_mode";
    flags=;
    var_expr="$#0#$";
    vars {
    };
    var_names{ train_mode;    };
    bad_vars{     };
   };
   update_after=0;
  };
  IfElse @[3] {
   desc=;
   flags=;
   cond {
    expr="no_prompts";
    flags=;
    var_expr="$#0#$";
    vars {
    };
    var_names{ no_prompts;    };
    bad_vars{     };
   };
   true_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc="initialize network weights: could also load pre-set weights or something else here";
     flags=;
     result_var=NULL;
     obj=$6$;
     method=Network::Init_Weights;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    PrintExpr @[1] {
     desc=;
     flags=;
     expr {
      expr="network.name << \" Weights Initialized\"";
      flags=;
      var_expr="$#0#$.name << \" Weights Initialized\"";
      vars {
      };
      var_names{ network;      };
      bad_vars{       };
     };
    };
   };
   false_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
  };
  AssignExpr @[4] {
   desc="grab the official network epoch counter: will be initialized if needed by now";
   flags=;
   result_var=.projects[0].programs.gp[0][1].vars[3]$9$;
   expr {
    expr="network.epoch";
    flags=;
    var_expr="$#0#$.epoch";
    vars {
    };
    var_names{ network;    };
    bad_vars{     };
   };
  };
  WhileLoop @[5] {
   desc="main loop over epochs of training";
   flags=;
   loop_code {
    name=;
    el_typ=ProgramCall;
    el_def=0;
    ProgramCall @[0] {
     desc="run the epoch program (one epoch), passes our network and input_data";
     flags=;
     target=.projects[0].programs.gp[0][2]$10$;
     targ_ld_init="*CsEpoch*";
     call_init=0;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=CsNetwork;
       type="CsNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
	flags=;
	var_expr="$#0#$";
	vars {
	};
	var_names{ network;	};
	bad_vars{ 	};
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       expr {
	expr="input_data";
	flags=;
	var_expr="$#0#$";
	vars {
	};
	var_names{ input_data;	};
	bad_vars{ 	};
       };
      };
     };
    };
    NetCounterIncr @[1] {
     desc="increment the epoch counter (locally and on network)";
     flags=;
     network_var=$6$;
     local_ctr_var=$9$;
     counter=Network::epoch;
    };
    IfBreak @[2] {
     desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
     flags=;
     cond {
      expr="network.cnt_err <= err_stopcrit";
      flags=;
      var_expr="$#0#$.cnt_err <= $#1#$";
      vars {
      };
      var_names{ network;err_stopcrit;      };
      bad_vars{       };
     };
    };
   };
   test {
    expr="epoch < max_epoch";
    flags=;
    var_expr="$#0#$ < $#1#$";
    vars {
    };
    var_names{ epoch;max_epoch;    };
    bad_vars{     };
   };
  };
  MethodCall @[6] {
   desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
   flags=;
   result_var=NULL;
   obj=$7$;
   method=TimeUsed::EndTimer;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
 };
};

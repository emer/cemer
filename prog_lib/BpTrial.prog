// ta_Dump File v3.0 -- code v8.0.0.0 rev9717
Program .projects[0].programs.gp[0][3] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [0] {
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [2] {
  ProgVar @[0] { };
  ProgVar @[1] { };
 };

 ProgVar_List @.vars = [2] {
  ProgVar @[0] { };
  ProgVar @[1] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [0] {
 };

 ProgEl_List @.prog_code = [7] {
  If @[0] { 
   ProgEl_List @.true_code = [1] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };
  };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  ProgramCall @[2] { 
   ProgArg_List @.prog_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  MethodCall @[3] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  MethodCall @[4] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  ProgramCall @[5] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
  NetUpdateView @[6] { };
 };
};
Program .projects[0].programs.gp[0][3] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {
   name="DocLink";
   doc=.projects[0].programs.gp[0][3].doc$$;
  };
 };
 name="BpTrial";
 short_nm="Trial";
 tags="Bp, Std";
 desc="Backpropagation processing of a single input/output event or external information";
 version {
  major=8;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="randy.oreilly@colorado.edu";
 flags=0;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=taNBase;
  el_def=0;
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=BpNetwork;
   object_val=.projects[0].networks[0]$$<BpNetwork,Network_0>;
   objs_ptr=0;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="network to operate on -- typically set by higher-level calling programs";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$$<DataTable,StdInputData>;
   objs_ptr=0;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="datatable containing training input/output patterns";
   init_from=NULL;
  };
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="update_net_view";
   var_type=T_Bool;
   bool_val=1;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="determines whether to update any network view displays after trial is completed";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="trial";
   var_type=T_Int;
   int_val=1;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="current trial (event) within the epoch -- increments automatically";
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  If @[0] {
   desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
   flags=CAN_REVERT_TO_CODE;
   code_string="if (network.Compute_Weights_Test(trial+1))";
   pre_compile_code_string="if (network.Compute_Weights_Test(trial+1))";
   cond {
    expr="network.Compute_Weights_Test(trial+1)";
   };
   true_code {
    name="true_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     desc="update the weight values based on changes computed by trial program";
     flags=CAN_REVERT_TO_CODE;
     code_string="network->Compute_Weights()";
     pre_compile_code_string="network->Compute_Weights()";
     result_var=NULL;
     obj=.projects[0].programs.gp[0][3].args[0]$$;
     method=Network::Compute_Weights;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Compute_Weights()";
     meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
    };
   };
  };
  MethodCall @[1] {
   desc="resets input data, before getting new external inputs data from apply inputs call";
   flags=CAN_REVERT_TO_CODE;
   code_string="network->Init_InputData()";
   pre_compile_code_string="network->Init_InputData()";
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][3].args[0]$;
   method=Network::Init_InputData;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void Init_InputData()";
   meth_desc=" Initializes external and target inputs";
  };
  ProgramCall @[2] {
   desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
   flags=CAN_REVERT_TO_CODE;
   code_string="ApplyInputs(network, input_data)";
   pre_compile_code_string="ApplyInputs(network, input_data)";
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type="BpNetwork*";
     name="network";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network";
     };
    };
    ProgArg @[1] {
     arg_type=DataTable;
     type="DataTable*";
     name="input_data";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="input_data";
     };
    };
   };
   target=.projects[0].programs.gp[0][4]$$<Program,ApplyInputs>;
   targ_ld_init="*ApplyInputs*";
  };
  MethodCall @[3] {
   desc="run the trial: compute net, act (one pass), then backprop to dEdA,dEdNet (second pass), then Compute_dWt (third pass)";
   flags=CAN_REVERT_TO_CODE;
   code_string="network->Trial_Run()";
   pre_compile_code_string="network->Trial_Run()";
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][3].args[0]$;
   method=BpNetwork::Trial_Run;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void Trial_Run()";
   meth_desc=" run one trial of Bp: calls SetCurLrate, Compute_NetinAct, Compute_dEdA_dEdNet, and, if train_mode == TRAIN, Compute_dWt. If you want to save some speed just for testing, you can just call Compute_NetinAct and skip the other two (esp Compute_dEdA_dEdNet, which does a full backprop and is expensive, but often useful for visualization & testing)";
  };
  MethodCall @[4] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="network->Compute_TrialStats()";
   pre_compile_code_string="network->Compute_TrialStats()";
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][3].args[0]$;
   method=LeabraNetwork::Compute_TrialStats;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void Compute_TrialStats()";
   meth_desc=" compute trial-level statistics (SSE and others defined by specific algorithms) do not call this function anymore -- it is obsolete -- please use Compute_PhaseStats or Compute_MinusStats / Compute_PlusStats for more appropriate stats computation at the right time";
  };
  ProgramCall @[5] {
   desc="records data about the trial-level processing to a datatable for graphing/processing";
   flags=CAN_REVERT_TO_CODE;
   code_string="BpTrialMonitor(network)";
   pre_compile_code_string="BpTrialMonitor(network)";
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type="BpNetwork*";
     name="network";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network";
     };
    };
   };
   target=.projects[0].programs.gp[0][5]$$<Program,BpTrialMonitor>;
   targ_ld_init="*BpTrialMonitor*";
  };
  NetUpdateView @[6] {
   desc="update the network view(s) (only if update_net_view is true)";
   flags=CAN_REVERT_TO_CODE;
   code_string="Net Update View";
   pre_compile_code_string="Net Update View";
   network_var=$.projects[0].programs.gp[0][3].args[0]$;
   update_var=.projects[0].programs.gp[0][3].vars[0]$$;
  };
 };
 step_prog=NULL;
 step_n=1;
 doc {
  name="doc";
  desc=;
  web_doc=1;
  wiki="emergent";
  url="BpTrial";
  full_url="https://grey.colorado.edu/emergent/index.php/BpTrial";
  text_size=1;
  text=;
  html_text=;
 };
};

// ta_Dump File v3.0 -- code v5.0.2.0
Program .projects[0].programs.gp[0][3] { 
  ProgObjList @.objs = [0] {
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  ProgVar_List @.vars = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.load_code = [0] {
  };

  ProgEl_List @.init_code = [1] {
    NetCounterInit @[0] { };
  };

  ProgEl_List @.prog_code = [6] {
    NetCounterInit @[0] { };
    MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
    };
    WhileLoop @[2] { 
      ProgEl_List @.loop_code = [3] {
	ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	NetCounterIncr @[1] { };
	MethodCall @[2] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	};
      };
    };
    MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
    };
    ProgramCall @[4] { 
      ProgArg_List @.prog_args = [1] {
	ProgArg @[0] { };
      };
    };
    NetUpdateView @[5] { };
  };
};
Program .projects[0].programs.gp[0][3] {
 name="CsTrial";
 short_nm="Trial";
 tags="Cs, Std";
 desc="Constraint Satisfaction processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
 flags=;
 objs {
  name=;
  el_typ=taOBase;
  el_def=0;
 };
 types {
  name=;
  el_typ=ProgType;
  el_def=0;
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=CsNetwork;
   object_val=.projects[0].networks[0]$$<CsNetwork,Network_0>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="network to operate on -- typically set by higher-level calling programs";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$$<DataTable,StdInputData>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="datatable containing training input/output patterns";
   init_from=NULL;
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="phase_no";
   var_type=T_Int;
   int_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="update_net_view";
   var_type=T_Bool;
   bool_val=1;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="determines whether to update any network view displays after trial is completed";
   init_from=NULL;
  };
 };
 functions {
  name=;
  el_typ=Function;
  el_def=0;
 };
 load_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc="initialize the local phase_no counter, and corresponding network one";
   flags=;
   network_var=.projects[0].programs.gp[0][3].args[0]$$;
   local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$$;
   counter=LeabraNetwork::phase_no;
   update_after=0;
  };
 };
 prog_code {
  name=;
  el_typ=MethodCall;
  el_def=0;
  NetCounterInit @[0] {
   desc="initialize the local phase_no counter, and corresponding network one";
   flags=;
   network_var=$.projects[0].programs.gp[0][3].args[0]$;
   local_ctr_var=$.projects[0].programs.gp[0][3].vars[0]$;
   counter=LeabraNetwork::phase_no;
   update_after=0;
  };
  MethodCall @[1] {
   desc="initializes various counters at start of trial";
   flags=;
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][3].args[0]$;
   method=CsNetwork::Trial_Init;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  WhileLoop @[2] {
   desc="loop over phases of settling in the network";
   flags=;
   loop_code {
    name=;
    el_typ=ProgramCall;
    el_def=0;
    ProgramCall @[0] {
     desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
     flags=;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=CsNetwork;
       type="CsNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       expr {
	expr="input_data";
       };
      };
     };
     target=.projects[0].programs.gp[0][4]$$<Program,CsSettle>;
     targ_ld_init="*CsSettle*";
    };
    NetCounterIncr @[1] {
     desc="increment the phase number (also on network)";
     flags=;
     network_var=$.projects[0].programs.gp[0][3].args[0]$;
     local_ctr_var=$.projects[0].programs.gp[0][3].vars[0]$;
     counter=LeabraNetwork::phase_no;
     update_after=0;
    };
    MethodCall @[2] {
     desc="increments other phase state information to prepare for the next phase of settling";
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs.gp[0][3].args[0]$;
     method=CsNetwork::Trial_UpdatePhase;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
   test {
    expr="phase_no < network.phase_max";
   };
  };
  MethodCall @[3] {
   desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
   flags=;
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][3].args[0]$;
   method=CsNetwork::Trial_Final;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  ProgramCall @[4] {
   desc="records data about the trial-level processing to a datatable for graphing/processing";
   flags=;
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type="CsNetwork*";
     name="network";
     required=1;
     def_val=;
     expr {
      expr="network";
     };
    };
   };
   target=.projects[0].programs.gp[0][7]$$<Program,CsTrialMonitor>;
   targ_ld_init="*CsTrialMonitor*";
  };
  NetUpdateView @[5] {
   desc="update the network view(s) (only if update_net_view is true)";
   flags=;
   network_var=$.projects[0].programs.gp[0][3].args[0]$;
   update_var=.projects[0].programs.gp[0][3].vars[1]$$;
  };
 };
 step_prog=.projects[0].programs.gp[0][5]$$<Program,CsCycle>;
 step_n=1;
};

// ta_Dump File v3.0 -- code v8.0.10.0 rev10813
Program .projects[0].programs.gp[0][3] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [0] {
 };

 ProgVar_List @.objs_vars = [0] {
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [2] {
  ProgVar @[0] { };
  ProgVar @[1] { };
 };

 ProgVar_List @.vars = [2] {
  ProgVar @[0] { };
  ProgVar @[1] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [1] {
  NetCounterInit @[0] { };
 };

 ProgEl_List @.prog_code = [6] {
  NetCounterInit @[0] { };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  WhileLoop @[2] { 
   ProgEl_List @.loop_code = [3] {
    ProgramCall @[0] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    NetCounterIncr @[1] { };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };
  };
  MethodCall @[3] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  ProgramCall @[4] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
  NetUpdateView @[5] { };
 };
};
Program .projects[0].programs.gp[0][3] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {name="DocLink": doc=.doc$$: };
 };
 name="CsTrial";
 short_nm="Trial";
 tags="Cs, Std";
 desc="Constraint Satisfaction processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
 version {
  major=8;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 flags=OBJS_UPDT_GUI;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=taNBase;
  el_def=0;
 };
 objs_vars {
  name="objs_vars";
  el_typ=ProgVar;
  el_def=0;
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=CsNetwork;
   object_val=.networks["Network_0"]$$<CsNetwork,Network_0>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="network to operate on -- typically set by higher-level calling programs";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.data.gp["InputData"]["StdInputData"]$$<DataTable,StdInputData>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="datatable containing training input/output patterns";
   init_from=NULL;
  };
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="phase_no";
   var_type=T_Int;
   int_val=0;
   object_scope=NULL;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="update_net_view";
   var_type=T_Bool;
   bool_val=1;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="determines whether to update any network view displays after trial is completed";
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
  NetCounterInit @[0] {
   name="NetCounterInit_NetCounterInitphaseno";
   desc="initialize the local phase_no counter, and corresponding network one";
   flags=CAN_REVERT_TO_CODE;
   code_string="Net Counter Init: phase_no";
   network_var=.args[0]$$;
   local_ctr_var=.vars[0]$$;
   counter=CsNetwork::phase_no;
   update_after=0;
  };
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  NetCounterInit @[0] {
   name="NetCounterInit_NetCounterInitphaseno";
   desc="initialize the local phase_no counter, and corresponding network one";
   flags=CAN_REVERT_TO_CODE;
   code_string="Net Counter Init: phase_no";
   network_var=$.args[0]$;
   local_ctr_var=$.vars[0]$;
   counter=CsNetwork::phase_no;
   update_after=0;
  };
  MethodCall @[1] {
   name="MethodCall_networkTrialInit";
   desc="initializes various counters at start of trial";
   flags=CAN_REVERT_TO_CODE;
   code_string="network->Trial_Init()";
   result_var=NULL;
   obj=$.args[0]$;
   method=CsNetwork::Trial_Init;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void Trial_Init()";
   meth_desc=" initialize at start of trial: initializes activations and phase counters";
  };
  WhileLoop @[2] {
   name="WhileLoop_whilephasenonetworkphasemax";
   desc="loop over phases of settling in the network";
   flags=CAN_REVERT_TO_CODE;
   code_string="while (phase_no < network.phase_max)";
   loop_code {
    name="loop_code";
    el_typ=ProgCode;
    el_def=0;
    ProgramCall @[0] {
     name="ProgramCall_CsSettlenetworkinputdata";
     desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
     flags=CAN_REVERT_TO_CODE;
     code_string="CsSettle(network, input_data)";
     prog_args {
      name="prog_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=CsNetwork;
       type="CsNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="input_data";
       };
      };
     };
     target=.programs.gp["CsAll_Std"]["CsSettle"]$$<Program,CsSettle>;
     targ_ld_init="*CsSettle*";
    };
    NetCounterIncr @[1] {
     name="NetCounterIncr_NetCounterIncrphaseno";
     desc="increment the phase number (also on network)";
     flags=CAN_REVERT_TO_CODE;
     code_string="Net Counter Incr: phase_no";
     network_var=$.args[0]$;
     local_ctr_var=$.vars[0]$;
     counter=CsNetwork::phase_no;
     update_after=0;
    };
    MethodCall @[2] {
     name="MethodCall_networkTrialUpdatePhase";
     desc="increments other phase state information to prepare for the next phase of settling";
     flags=CAN_REVERT_TO_CODE;
     code_string="network->Trial_UpdatePhase()";
     result_var=NULL;
     obj=$.args[0]$;
     method=CsNetwork::Trial_UpdatePhase;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Trial_UpdatePhase()";
     meth_desc=" update phase after one settle -- just sets phase to plus phase";
    };
   };
   test {
    expr="phase_no < network.phase_max";
   };
  };
  MethodCall @[3] {
   name="MethodCall_networkTrialFinal";
   desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
   flags=CAN_REVERT_TO_CODE;
   code_string="network->Trial_Final()";
   result_var=NULL;
   obj=$.args[0]$;
   method=CsNetwork::Trial_Final;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void Trial_Final()";
   meth_desc=" at end of trial, calls Compute_dWt if not testing";
  };
  ProgramCall @[4] {
   name="ProgramCall_CsTrialMonitornetwork";
   desc="records data about the trial-level processing to a datatable for graphing/processing";
   flags=CAN_REVERT_TO_CODE;
   code_string="CsTrialMonitor(network)";
   prog_args {
    name="prog_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type="CsNetwork*";
     name="network";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network";
     };
    };
   };
   target=.programs.gp["CsAll_Std"]["CsTrialMonitor"]$$<Program,CsTrialMonitor>;
   targ_ld_init="*CsTrialMonitor*";
  };
  NetUpdateView @[5] {
   name="NetUpdateView_NetUpdateView";
   desc="update the network view(s) (only if update_net_view is true)";
   flags=CAN_REVERT_TO_CODE;
   code_string="Net Update View";
   network_var=$.args[0]$;
   update_var=.vars[1]$$;
  };
 };
 step_prog=NULL;
 step_n=1;
 doc {
  name="doc";
  desc=;
  web_doc=1;
  wiki="emergent";
  url="LeabraTrial";
  full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
  text_size=1;
  text=;
  html_text=;
 };
};

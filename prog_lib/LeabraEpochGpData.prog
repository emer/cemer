// ta_Dump File v2.0
Program .projects[0].programs[0] { 
  ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  ProgVar_List @.vars = [5] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
  };

  ProgEl_List @.init_code = [2] {
    NetCounterInit @[0] { };
    AssignExpr @[1] { };
  };

  ProgEl_List @.prog_code = [9] {
    NetCounterInit @[0] { };
    AssignExpr @[1] { };
    MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
      };
    };
    MethodCall @[3] { };
    GroupedDataLoop @[4] { 
      ProgEl_List @.loop_code = [3] {
	UserScript @[0] { };
	ProgramCall @[1] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	IfElse @[2] { 
	  ProgEl_List @.true_code = [1] {
	    MethodCall @[0] { };
	  };
	};
      };
    };
    IfElse @[5] { 
      ProgEl_List @.true_code = [1] {
	MethodCall @[0] { };
      };
    };
    MethodCall @[6] { };
    MethodCall @[7] { };
    ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
	ProgArg @[0] { };
      };
    };
  };
};
Program .projects[0].programs[0] {
 name="LeabraEpochGpData";
 desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
 flags=;
 objs {
  name=;
  el_typ=taOBase;
  el_def=0;
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$0$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc=;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$1$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc=;
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="group_order";
   var_type=T_HardEnum;
   int_val=0;
   hard_enum_type=GroupedDataLoop::Order;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc=;
  };
  ProgVar @[1] {
   name="item_order";
   var_type=T_HardEnum;
   int_val=0;
   hard_enum_type=GroupedDataLoop::Order;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc=;
  };
  ProgVar @[2] {
   name="trial";
   var_type=T_Int;
   int_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc=;
  };
  ProgVar @[3] {
   name="trial_mon_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[1][0]$2$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="trial-level output data -- if we want to reset it every epoch";
  };
  ProgVar @[4] {
   name="epoch_timer";
   var_type=T_Object;
   object_type=TimeUsed;
   object_val=.projects[0].networks[0].epoch_time$3$;
   objs_ptr=0;
   flags=NULL_CHECK;
   desc=;
  };
 };
 functions {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 load_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc="initialize trial counter: note also needs to do this in regular running program";
   flags=;
   network_var=.projects[0].programs[0].args[0]$4$;
   local_ctr_var=.projects[0].programs[0].vars[2]$5$;
   counter=Network::trial;
  };
  AssignExpr @[1] {
   desc=;
   flags=;
   result_var=.projects[0].programs[0].vars[4]$6$;
   expr {
    expr="network.epoch_time";
    flags=;
    var_expr="$#0#$.epoch_time";
    vars {
    };
    var_names{ network;    };
    bad_vars{     };
   };
  };
 };
 prog_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc="initialize trial counter";
   flags=;
   network_var=$4$;
   local_ctr_var=$5$;
   counter=Network::trial;
  };
  AssignExpr @[1] {
   desc=;
   flags=;
   result_var=$6$;
   expr {
    expr="network.epoch_time";
    flags=;
    var_expr="$#0#$.epoch_time";
    vars {
    };
    var_names{ network;    };
    bad_vars{     };
   };
  };
  MethodCall @[2] {
   desc=;
   flags=;
   result_var=NULL;
   obj=$6$;
   method=TimeUsed::StartTimer;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="reset_used";
     expr {
      expr="true";
      flags=;
      var_expr="true";
      vars {
      };
      var_names{       };
      bad_vars{       };
     };
    };
   };
  };
  MethodCall @[3] {
   desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn OFF if not wanted)";
   flags=;
   result_var=NULL;
   obj=.projects[0].programs[0].vars[3]$7$;
   method=DataTable::ResetData;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  GroupedDataLoop @[4] {
   desc=;
   flags=;
   loop_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    UserScript @[0] {
     desc="set trial to list_idx of data loop -- for dmem code this is the correct trial number";
     flags=OFF;
     script {
      expr="trial = list_idx; network.trial = list_idx;";
      flags=NO_VAR_ERRS;
      var_expr="$#0#$ = list_idx; $#1#$.trial = list_idx;";
      vars {
      };
      var_names{ trial;network;      };
      bad_vars{ list_idx;      };
     };
    };
    ProgramCall @[1] {
     desc="call the trial process";
     flags=;
     target=.projects[0].programs.gp[0][3]$8$;
     targ_ld_init="*LeabraTrial*";
     call_init=0;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       expr {
	expr="network";
	flags=;
	var_expr="$#0#$";
	vars {
	};
	var_names{ network;	};
	bad_vars{ 	};
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       expr {
	expr="input_data";
	flags=;
	var_expr="$#0#$";
	vars {
	};
	var_names{ input_data;	};
	bad_vars{ 	};
       };
      };
     };
    };
    IfElse @[2] {
     desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
     flags=;
     cond {
      expr="network.Compute_Weights_Test(trial+1)";
      flags=;
      var_expr="$#0#$.Compute_Weights_Test($#1#$+1)";
      vars {
      };
      var_names{ network;trial;      };
      bad_vars{       };
     };
     true_code {
      name=;
      el_typ=MethodCall;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=;
       result_var=NULL;
       obj=$4$;
       method=Network::Compute_Weights;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
      };
     };
     false_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
     };
    };
   };
   data_var=.projects[0].programs[0].args[1]$9$;
   group_order_var=.projects[0].programs[0].vars[0]$10$;
   item_order_var=.projects[0].programs[0].vars[1]$11$;
   group_order=SEQUENTIAL;
   item_order=SEQUENTIAL;
   group_col=0;
   group_idx_list{ 63;11;72;123;0;51;128;42;79;105;98;   };
   item_idx_list{ 11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;   };
  };
  IfElse @[5] {
   desc="if full batch mode, update only at end of epoch";
   flags=;
   cond {
    expr="network.wt_update == Network::BATCH";
    flags=;
    var_expr="$#0#$.wt_update == Network::BATCH";
    vars {
    };
    var_names{ network;    };
    bad_vars{     };
   };
   true_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$4$;
     method=Network::Compute_Weights;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
   false_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
  };
  MethodCall @[6] {
   desc=;
   flags=;
   result_var=NULL;
   obj=$4$;
   method=LeabraNetwork::Compute_EpochStats;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  MethodCall @[7] {
   desc=;
   flags=;
   result_var=NULL;
   obj=$6$;
   method=TimeUsed::EndTimer;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  ProgramCall @[8] {
   desc="call the epoch monitor";
   flags=;
   target=.projects[0].programs.gp[0][8]$12$;
   targ_ld_init="*LeabraEpochMonitor*";
   call_init=0;
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type="LeabraNetwork*";
     name="network";
     expr {
      expr="network";
      flags=;
      var_expr="$#0#$";
      vars {
      };
      var_names{ network;      };
      bad_vars{       };
     };
    };
   };
  };
 };
};

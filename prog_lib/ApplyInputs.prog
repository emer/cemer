// ta_Dump File v3.0 -- code v8.0.10.0 rev10813
Program .projects[0].programs.gp[0][6] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [1] {
  LayerWriter @[0] { 
   LayerDataEl_List @.layer_data = [3] {
    LayerWriterEl @[0] { };
    LayerWriterEl @[1] { };
    LayerWriterEl @[2] { };
   };
  };
 };

 ProgVar_List @.objs_vars = [0] {
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [2] {
  ProgVar @[0] { };
  ProgVar @[1] { };
 };

 ProgVar_List @.vars = [1] {
  ProgVar @[0] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [3] {
  MethodCall @[0] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  MethodCall @[2] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
 };

 ProgEl_List @.prog_code = [2] {
  MethodCall @[0] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
 };
};
Program .projects[0].programs.gp[0][6] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {name="DocLink": doc=.doc$$: };
 };
 name="ApplyInputs";
 short_nm="Inputs";
 tags="Network, InputData, Apply";
 desc="apply the current input data to the network as external input and target values";
 version {
  major=8;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 flags=NO_STOP_STEP|OBJS_UPDT_GUI;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=LayerWriter;
  el_def=0;
  LayerWriter @[0] {
   name="LayerWriter_0";
   data=.data.gp["InputData"]["StdInputData"]$$<DataTable,StdInputData>;
   network=.networks["Network_0"]$$<LeabraNetwork,Network_0>;
   layer_data {
    name="layer_data";
    el_typ=LayerWriterEl;
    el_def=0;
    LayerWriterEl @[0] {
     col_name="Input";
     net_target=LAYER;
     layer_name="Input";
     offset {x=0: y=0: };
     use_layer_type=1;
     quiet=0;
     na_by_range=0;
     ext_flags=EXT;
     noise {name="RandomSpec_7": type=NONE: mean=0: var=0.5: par=1: };
    };
    LayerWriterEl @[1] {
     col_name="Name";
     net_target=TRIAL_NAME;
     layer_name="Name";
     offset {x=0: y=0: };
     use_layer_type=1;
     quiet=0;
     na_by_range=0;
     ext_flags=0;
     noise {name="RandomSpec_9": type=NONE: mean=0: var=0.5: par=1: };
    };
    LayerWriterEl @[2] {
     col_name="Output";
     net_target=LAYER;
     layer_name="Output";
     offset {x=0: y=0: };
     use_layer_type=1;
     quiet=0;
     na_by_range=0;
     ext_flags=TARG;
     noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
    };
   };
  };
 };
 objs_vars {
  name="objs_vars";
  el_typ=ProgVar;
  el_def=0;
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=Network;
   object_val=$.networks["Network_0"]$;
   object_scope=NULL;
   objs_ptr=0;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="network to apply inputs to -- typically set by calling program";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=$.data.gp["InputData"]["StdInputData"]$;
   object_scope=NULL;
   objs_ptr=0;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="input datatable containing input/output patterns";
   init_from=NULL;
  };
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="layer_writer_0";
   var_type=T_Object;
   object_type=LayerWriter;
   object_val=.objs[0]$$;
   object_scope=NULL;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
  MethodCall @[0] {
   name="MethodCall_layerwriter0SetD_nputdatanetwork";
   desc="sets the datatable and network for the layer writer, so it knows what to write to";
   flags=CAN_REVERT_TO_CODE;
   code_string="layer_writer_0->SetDataNetwork(input_data, network)";
   result_var=NULL;
   obj=.vars[0]$$;
   method=LayerWriter::SetDataNetwork;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=DataTable_ptr;
     type="DataTable*";
     name="db";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="input_data";
     };
    };
    ProgArg @[1] {
     arg_type=Network_ptr;
     type="Network*";
     name="net";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network";
     };
    };
   };
   meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
   meth_desc=" set the data table and network pointers -- convenience function for programs ";
  };
  MethodCall @[1] {
   name="MethodCall_layerwriter0AutoConfig";
   desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
   flags=CAN_REVERT_TO_CODE;
   code_string="layer_writer_0->AutoConfig()";
   result_var=NULL;
   obj=$.vars[0]$;
   method=LayerWriter::AutoConfig;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="remove_unused";
     required=0;
     def_val="true";
     prev_expr=;
     expr {
      expr=;
     };
    };
   };
   meth_sig="void AutoConfig(bool remove_unused = true)";
   meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
  };
  MethodCall @[2] {
   name="MethodCall_layerwriter0CheckConfigfalse";
   desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
   flags=CAN_REVERT_TO_CODE;
   code_string="layer_writer_0->CheckConfig(false)";
   result_var=NULL;
   obj=$.vars[0]$;
   method=taList_impl::CheckConfig;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="quiet";
     required=0;
     def_val="false";
     prev_expr=;
     expr {
      expr="false";
     };
    };
   };
   meth_sig="bool CheckConfig(bool quiet = false)";
   meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
  };
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  MethodCall @[0] {
   name="MethodCall_layerwriter0SetD_nputdatanetwork";
   desc="sets the datatable and network for the layer writer, so it knows what to write to";
   flags=CAN_REVERT_TO_CODE;
   code_string="layer_writer_0->SetDataNetwork(input_data, network)";
   result_var=NULL;
   obj=$.vars[0]$;
   method=LayerWriter::SetDataNetwork;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=DataTable_ptr;
     type="DataTable*";
     name="db";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="input_data";
     };
    };
    ProgArg @[1] {
     arg_type=Network_ptr;
     type="Network*";
     name="net";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network";
     };
    };
   };
   meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
   meth_desc=" set the data table and network pointers -- convenience function for programs ";
  };
  MethodCall @[1] {
   name="MethodCall_layerwriter0ApplyInputData";
   desc="apply inputs to the network!  layer writer has all the key specs";
   flags=CAN_REVERT_TO_CODE;
   code_string="layer_writer_0->ApplyInputData()";
   result_var=NULL;
   obj=$.vars[0]$;
   method=LayerWriter::ApplyInputData;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="bool ApplyInputData()";
   meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
  };
 };
 step_prog=NULL;
 step_n=1;
 doc {
  name="doc";
  desc=;
  web_doc=1;
  wiki="emergent";
  url="ApplyInputs";
  full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
  text_size=1;
  text=;
  html_text=;
 };
};

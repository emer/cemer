// ta_Dump File v3.0 -- code v7.0.2.0 rev7546
Program .projects[0].programs.gp[0][0] { 
 ProgObjList @.objs = [0] {
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [2] {
  ProgVar @[0] { };
  ProgVar @[1] { };
 };

 ProgVar_List @.vars = [3] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [1] {
  NetCounterInit @[0] { };
 };

 ProgEl_List @.prog_code = [3] {
  If @[0] { 
   ProgEl_List @.true_code = [1] {
    NetCounterInit @[0] { };
   };
  };
  Else @[1] { 
   ProgEl_List @.else_code = [1] {
    MemberAssign @[0] { };
   };
  };
  WhileLoop @[2] { 
   ProgEl_List @.loop_code = [2] {
    ProgramCall @[0] { 
     ProgArg_List @.prog_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    NetCounterIncr @[1] { };
   };
  };
 };
};
Program .projects[0].programs.gp[0][0] {
 name="LeabraBatch";
 short_nm="Batch";
 tags="Leabra, Std";
 desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
 flags=0;
 objs {
  name="objs";
  el_typ=taNBase;
  el_def=0;
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$$<LeabraNetwork,Network_0>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="network to operate on -- updates batch counter on network and passes it to train program";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$$<DataTable,StdInputData>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="datatable with training patterns -- not used by this program, but passed to train program";
   init_from=NULL;
  };
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="batch";
   var_type=T_Int;
   int_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="batch counter";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="init_batch";
   var_type=T_Bool;
   bool_val=1;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="initialize batch counter at start of run -- turn off if using \"parallel batch\" mode to run different batches on different processes";
   init_from=NULL;
  };
  ProgVar @[2] {
   name="max_batch";
   var_type=T_Int;
   int_val=10;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="maximum number of batch runs to perform";
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
  NetCounterInit @[0] {
   desc="initializes local batch counter and batch field on network";
   flags=0;
   orig_prog_code=;
   network_var=.projects[0].programs.gp[0][0].args[0]$$;
   local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$$;
   counter=Network::batch;
   update_after=0;
  };
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  If @[0] {
   desc=;
   flags=0;
   orig_prog_code=;
   cond {
    expr="init_batch";
   };
   true_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    NetCounterInit @[0] {
     desc="initializes local batch counter and batch field on network";
     flags=0;
     orig_prog_code=;
     network_var=$.projects[0].programs.gp[0][0].args[0]$;
     local_ctr_var=$.projects[0].programs.gp[0][0].vars[0]$;
     counter=Network::batch;
     update_after=0;
    };
   };
  };
  Else @[1] {
   desc=;
   flags=0;
   orig_prog_code=;
   else_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    MemberAssign @[0] {
     desc="just set directly to current batch value";
     flags=0;
     orig_prog_code=;
     obj=$.projects[0].programs.gp[0][0].args[0]$;
     path="batch";
     expr {
      expr="batch";
     };
     update_after=0;
    };
   };
  };
  WhileLoop @[2] {
   desc="the main loop over training runs";
   flags=0;
   orig_prog_code=;
   loop_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    ProgramCall @[0] {
     desc="run the training program -- sets the network and input_data args";
     flags=0;
     orig_prog_code=;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       expr {
	expr="input_data";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="no_prompts";
       required=1;
       def_val=;
       expr {
	expr="true";
       };
      };
     };
     target=.projects[0].programs.gp[0][1]$$<Program,LeabraTrain>;
     targ_ld_init="*LeabraTrain*";
    };
    NetCounterIncr @[1] {
     desc="increment the local batch counter and copy to network";
     flags=0;
     orig_prog_code=;
     network_var=$.projects[0].programs.gp[0][0].args[0]$;
     local_ctr_var=$.projects[0].programs.gp[0][0].vars[0]$;
     counter=Network::batch;
     update_after=0;
    };
   };
   test {
    expr="batch < max_batch";
   };
  };
 };
 step_prog=NULL;
 step_n=1;
};

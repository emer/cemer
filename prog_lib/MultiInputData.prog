// ta_Dump File v2.0
Program .projects[0].programs[2] { 
  ProgVar_List @.args = [1] {
    ProgVar @[0] { };
  };

  ProgVar_List @.vars = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  ProgEl_List @.init_code = [1] {
    AssignExpr @[0] { };
  };

  ProgEl_List @.prog_code = [2] {
    ProgVars @[0] { 
      ProgVar_List @.local_vars = [1] {
	ProgVar @[0] { };
      };
    };
    ForLoop @[1] { 
      ProgEl_List @.loop_code = [2] {
	AssignExpr @[0] { };
	ProgramCall @[1] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
      };
    };
  };
};
Program .projects[0].programs[2] {
 name="MultiInputData";
 desc="iterate over multiple input data tables (e.g., multiple different types of training)";
 flags=;
 objs {
  name=;
  el_typ=taOBase;
  el_def=0;
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$0$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc=;
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="data_table_group";
   var_type=T_Object;
   object_type=DataTable_Group;
   object_val=.projects[0].data.gp[0]$1$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc=;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$2$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc=;
  };
 };
 functions {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 load_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
  AssignExpr @[0] {
   desc="get first data table";
   flags=;
   result_var=.projects[0].programs[2].vars[1]$3$;
   expr {
    expr="data_table_group[0]";
    flags=;
    var_expr="$#0#$[0]";
    vars {
    };
    var_names{ data_table_group;    };
    bad_vars{     };
   };
  };
 };
 prog_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
  ProgVars @[0] {
   desc=;
   flags=;
   local_vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="i";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
   };
  };
  ForLoop @[1] {
   desc="iterate over elements of the data table group";
   flags=;
   loop_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    AssignExpr @[0] {
     desc="get current data table";
     flags=;
     result_var=$3$;
     expr {
      expr="data_table_group[i]";
      flags=;
      var_expr="$#0#$[$#1#$]";
      vars {
      };
      var_names{ data_table_group;i;      };
      bad_vars{       };
     };
    };
    ProgramCall @[1] {
     desc="call the program with current data table";
     flags=;
     target=.projects[0].programs.gp[0][1]$4$;
     targ_ld_init="*LeabraTrain*";
     call_init=0;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       expr {
	expr="network";
	flags=;
	var_expr="$#0#$";
	vars {
	};
	var_names{ network;	};
	bad_vars{ 	};
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       expr {
	expr="input_data";
	flags=;
	var_expr="$#0#$";
	vars {
	};
	var_names{ input_data;	};
	bad_vars{ 	};
       };
      };
     };
    };
   };
   init {
    expr="i = 0";
    flags=NO_VAR_ERRS;
    var_expr="$#0#$ = 0";
    vars {
    };
    var_names{ i;    };
    bad_vars{     };
   };
   test {
    expr="i < data_table_group.size";
    flags=NO_VAR_ERRS;
    var_expr="$#0#$ < $#1#$.size";
    vars {
    };
    var_names{ i;data_table_group;    };
    bad_vars{     };
   };
   iter {
    expr="i++";
    flags=NO_VAR_ERRS;
    var_expr="$#0#$++";
    vars {
    };
    var_names{ i;    };
    bad_vars{     };
   };
  };
 };
};

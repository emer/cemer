// ta_Dump File v2.0
Program .projects[0].programs.gp[0][4] { 
  ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  ProgVar_List @.vars = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
  };

  ProgEl_List @.init_code = [1] {
    NetCounterInit @[0] { };
  };

  ProgEl_List @.prog_code = [10] {
    NetCounterInit @[0] { };
    MethodCall @[1] { };
    ProgramCall @[2] { 
      ProgArg_List @.prog_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
      };
    };
    MethodCall @[3] { };
    UserScript @[4] { };
    WhileLoop @[5] { 
      ProgEl_List @.loop_code = [4] {
	ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	NetCounterIncr @[1] { };
	IfContinue @[2] { };
	IfBreak @[3] { };
      };
    };
    MethodCall @[6] { };
    IfElse @[7] { 
      ProgEl_List @.true_code = [1] {
	MethodCall @[0] { };
      };
    };
    IfElse @[8] { 
      ProgEl_List @.true_code = [1] {
	MethodCall @[0] { };
      };
    };
    NetUpdateView @[9] { };
  };
};
Program .projects[0].programs.gp[0][4] {
 name="LeabraSettle";
 desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
 flags=PF_NONE;
 objs {
  name=;
  el_typ=taOBase;
  el_def=0;
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$0$;
   objs_ptr=0;
   flags=NO_CTRL_PANEL;
   desc=;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$1$;
   objs_ptr=0;
   flags=NO_CTRL_PANEL;
   desc=;
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="cycle";
   var_type=T_Int;
   int_val=0;
   objs_ptr=0;
   flags=PV_NONE;
   desc=;
  };
  ProgVar @[1] {
   name="min_cycles";
   var_type=T_Int;
   int_val=15;
   objs_ptr=0;
   flags=PV_NONE;
   desc=;
  };
  ProgVar @[2] {
   name="update_net_view";
   var_type=T_Bool;
   bool_val=1;
   objs_ptr=0;
   flags=PV_NONE;
   desc=;
  };
 };
 functions {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 load_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc=;
   flags=PEF_NONE;
   network_var=.projects[0].programs.gp[0][4].args[0]$2$;
   local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$3$;
   counter=Network::cycle;
  };
 };
 prog_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc=;
   flags=PEF_NONE;
   network_var=$2$;
   local_ctr_var=$3$;
   counter=Network::cycle;
  };
  MethodCall @[1] {
   desc="resets input data, before getting new external inputs data from apply inputs call";
   flags=PEF_NONE;
   result_var=NULL;
   obj=$2$;
   method=Network::Init_InputData;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  ProgramCall @[2] {
   desc="this program can be extended to do arbitrary things to generate data and apply it to network layers";
   flags=PEF_NONE;
   target=.projects[0].programs.gp[0][6]$4$;
   targ_ld_init="*ApplyInputs*";
   call_init=0;
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type="LeabraNetwork*";
     name="network";
     expr {
      expr="network";
      var_expr="$#0";
      vars {
      };
      var_names{ network;      };
      bad_vars{       };
     };
    };
    ProgArg @[1] {
     arg_type=DataTable;
     type="DataTable*";
     name="input_data";
     expr {
      expr="input_data";
      var_expr="$#0";
      vars {
      };
      var_names{ input_data;      };
      bad_vars{       };
     };
    };
   };
  };
  MethodCall @[3] {
   desc="initializes various counters at start of settling";
   flags=PEF_NONE;
   result_var=NULL;
   obj=$2$;
   method=LeabraNetwork::Settle_Init;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  UserScript @[4] {
   desc="get min cycles";
   flags=PEF_NONE;
   user_script="if(network->phase_no <= 1) min_cycles = network->min_cycles;
else min_cycles = network->min_cycles_phase2;

";
  };
  WhileLoop @[5] {
   desc=;
   flags=PEF_NONE;
   loop_code {
    name=;
    el_typ=ProgramCall;
    el_def=0;
    ProgramCall @[0] {
     desc=;
     flags=PEF_NONE;
     target=.projects[0].programs.gp[0][5]$5$;
     targ_ld_init="*LeabraCycle*";
     call_init=0;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       expr {
	expr="network";
	var_expr="$#0";
	vars {
	};
	var_names{ network;	};
	bad_vars{ 	};
       };
      };
     };
    };
    NetCounterIncr @[1] {
     desc=;
     flags=PEF_NONE;
     network_var=$2$;
     local_ctr_var=$3$;
     counter=Network::cycle;
    };
    IfContinue @[2] {
     desc="avoid subsequent stopping criteria";
     flags=PEF_NONE;
     condition="cycle < min_cycles";
    };
    IfBreak @[3] {
     desc="stopping criterion for settling";
     flags=PEF_NONE;
     condition="(network->maxda < network->maxda_stopcrit) ||
 (network->trg_max_act > network->trg_max_act_stopcrit)";
    };
   };
   loop_test="cycle < network->cycle_max";
  };
  MethodCall @[6] {
   desc=;
   flags=PEF_NONE;
   result_var=NULL;
   obj=$2$;
   method=LeabraNetwork::Settle_Final;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  IfElse @[7] {
   desc="only run sse in minus phase";
   flags=PEF_NONE;
   condition="network->phase == LeabraNetwork::MINUS_PHASE";
   true_code {
    name=;
    el_typ=MethodCall;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=PEF_NONE;
     result_var=NULL;
     obj=$2$;
     method=LeabraNetwork::Compute_TrialStats;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
   false_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
  };
  IfElse @[8] {
   desc="this stat must be called in plus phase when reward information is avail";
   flags=PEF_NONE;
   condition="network->phase_no == 1";
   true_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=PEF_NONE;
     result_var=NULL;
     obj=$2$;
     method=LeabraNetwork::Compute_ExtRew;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
   false_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
  };
  NetUpdateView @[9] {
   desc=;
   flags=PEF_NONE;
   network_var=$2$;
   update_var=.projects[0].programs.gp[0][4].vars[2]$6$;
  };
 };
};

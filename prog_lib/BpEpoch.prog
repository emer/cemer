// ta_Dump File v3.0 -- code v8.0.10.0 rev10813
Program .projects[0].programs.gp[0][2] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [0] {
 };

 ProgVar_List @.objs_vars = [0] {
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [2] {
  ProgVar @[0] { };
  ProgVar @[1] { };
 };

 ProgVar_List @.vars = [5] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
  ProgVar @[3] { };
  ProgVar @[4] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [2] {
  NetCounterInit @[0] { };
  AssignExpr @[1] { };
 };

 ProgEl_List @.prog_code = [10] {
  NetCounterInit @[0] { };
  AssignExpr @[1] { };
  MethodCall @[2] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  MethodCall @[3] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  MethodCall @[4] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  NetDataLoop @[5] { 
   ProgEl_List @.loop_code = [1] {
    ProgramCall @[0] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  If @[6] { 
   ProgEl_List @.true_code = [1] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };
  };
  MethodCall @[7] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  MethodCall @[8] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  ProgramCall @[9] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
 };
};
Program .projects[0].programs.gp[0][2] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {name="DocLink": doc=.doc$$: };
 };
 name="BpEpoch";
 short_nm="Epoch";
 tags="Bp, Std";
 desc="iterates over all of the items in a data table and calls BpTrial process on them";
 version {
  major=8;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 flags=OBJS_UPDT_GUI;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=taNBase;
  el_def=0;
 };
 objs_vars {
  name="objs_vars";
  el_typ=ProgVar;
  el_def=0;
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=BpNetwork;
   object_val=.networks["Network_0"]$$<BpNetwork,Network_0>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="network to operate on";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.data.gp["InputData"]["StdInputData"]$$<DataTable,StdInputData>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="table of patterns to present to the network, one row at a time";
   init_from=NULL;
  };
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="data_loop_order";
   var_type=T_HardEnum;
   int_val=1;
   object_scope=NULL;
   hard_enum_type=DataLoop::Order;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="trial";
   var_type=T_Int;
   int_val=0;
   object_scope=NULL;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="current trial (event) within the epoch -- increments automatically";
   init_from=NULL;
  };
  ProgVar @[2] {
   name="trial_mon_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.data.gp["OutputData"]["TrialOutputData"]$$<DataTable,TrialOutputData>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
   init_from=NULL;
  };
  ProgVar @[3] {
   name="epoch_timer";
   var_type=T_Object;
   object_type=TimeUsed;
   object_val=.networks["Network_0"].epoch_time$$<TimeUsed,epoch_time>;
   object_scope=NULL;
   objs_ptr=0;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
   init_from=NULL;
  };
  ProgVar @[4] {
   name="data_loop_index";
   var_type=T_Int;
   int_val=5;
   object_scope=NULL;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
  NetCounterInit @[0] {
   name="NetCounterInit_NetCounterInittrial";
   desc="initialize trial counter (local variable and in the network)";
   flags=CAN_REVERT_TO_CODE;
   code_string="Net Counter Init: trial";
   network_var=.args[0]$$;
   local_ctr_var=.vars[1]$$;
   counter=Network::trial;
   update_after=0;
  };
  AssignExpr @[1] {
   name="AssignExpr_epochtimernetworkepochtime";
   desc="get pointer to epoch timer object on network";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_timer = network.epoch_time";
   result_var=.vars[3]$$;
   expr {
    expr="network.epoch_time";
   };
  };
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  NetCounterInit @[0] {
   name="NetCounterInit_NetCounterInittrial";
   desc="initialize trial counter (local variable and in the network)";
   flags=CAN_REVERT_TO_CODE;
   code_string="Net Counter Init: trial";
   network_var=$.args[0]$;
   local_ctr_var=$.vars[1]$;
   counter=Network::trial;
   update_after=0;
  };
  AssignExpr @[1] {
   name="AssignExpr_epochtimernetworkepochtime";
   desc="get pointer to epoch timer object on network";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_timer = network.epoch_time";
   result_var=$.vars[3]$;
   expr {
    expr="network.epoch_time";
   };
  };
  MethodCall @[2] {
   name="MethodCall_epochtimerStartTimertrue";
   desc="start the epoch timer to record computation time per epoch";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_timer->StartTimer(true)";
   result_var=NULL;
   obj=$.vars[3]$;
   method=TimeUsed::StartTimer;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="reset_used";
     required=0;
     def_val="true";
     prev_expr=;
     expr {
      expr="true";
     };
    };
   };
   meth_sig="void StartTimer(bool reset_used = true)";
   meth_desc=" record the current time as the starting time, and optionally reset the time used information";
  };
  MethodCall @[3] {
   name="MethodCall_networkInitEpoch";
   desc="added in 8.0: essential for param_seqs";
   flags=NEW_EL|CAN_REVERT_TO_CODE;
   code_string="network->Init_Epoch()";
   result_var=NULL;
   obj=$.args[0]$;
   method=Network::Init_Epoch;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void Init_Epoch()";
   meth_desc=" Initializes network state at the start of a new epoch -- updates parameters according to param_seq for example";
  };
  MethodCall @[4] {
   name="MethodCall_trialmondataResetData";
   desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
   flags=CAN_REVERT_TO_CODE;
   code_string="trial_mon_data->ResetData()";
   result_var=NULL;
   obj=.vars[2]$$;
   method=DataTable::ResetData;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void ResetData()";
   meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
  };
  NetDataLoop @[5] {
   name="NetDataLoop_NetDataLoopPERMU_ardatalooporder";
   desc="iterates over the events/rows of input_data, according to data_loop_order variable";
   flags=CAN_REVERT_TO_CODE;
   code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
   loop_code {
    name="loop_code";
    el_typ=ProgCode;
    el_def=0;
    ProgramCall @[0] {
     name="ProgramCall_BpTrialnetworkinputdata";
     desc="run the trial program, passing network and input_data";
     flags=CAN_REVERT_TO_CODE;
     code_string="BpTrial(network, input_data)";
     prog_args {
      name="prog_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=BpNetwork;
       type="BpNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="input_data";
       };
      };
     };
     target=.programs.gp["BpAll_Std"]["BpTrial"]$$<Program,BpTrial>;
     targ_ld_init="*BpTrial*";
    };
   };
   data_var=.args[1]$$;
   index_var=.vars[4]$$;
   order_var=.vars[0]$$;
   order=PERMUTED;
   update_after=0;
   dmem_nprocs=1;
   dmem_this_proc=0;
   grouped=0;
   group_col 9 0="Group";
   group_index_var=NULL;
   group_order_var=NULL;
   group_order=PERMUTED;
   group_idx_list{    };
  };
  If @[6] {
   name="If_ifnetworkwtupdateNetworkBATCH";
   desc="if full batch mode, update only at end of epoch";
   flags=CAN_REVERT_TO_CODE;
   code_string="if (network.wt_update == Network::BATCH)";
   cond {
    expr="network.wt_update == Network::BATCH";
   };
   true_code {
    name="true_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_networkComputeWeights";
     desc="final update of weights based on accumulated changes";
     flags=CAN_REVERT_TO_CODE;
     code_string="network->Compute_Weights()";
     result_var=NULL;
     obj=$.args[0]$;
     method=Network::Compute_Weights;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Compute_Weights()";
     meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
    };
   };
  };
  MethodCall @[7] {
   name="MethodCall_networkComputeEpochStats";
   desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
   flags=CAN_REVERT_TO_CODE;
   code_string="network->Compute_EpochStats()";
   result_var=NULL;
   obj=$.args[0]$;
   method=LeabraNetwork::Compute_EpochStats;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void Compute_EpochStats()";
   meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
  };
  MethodCall @[8] {
   name="MethodCall_epochtimerEndTimer";
   desc="done with the computation in the epoch -- record time it took";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_timer->EndTimer()";
   result_var=NULL;
   obj=$.vars[3]$;
   method=TimeUsed::EndTimer;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void EndTimer()";
   meth_desc=" record the current time as the ending time, and compute difference as the time used";
  };
  ProgramCall @[9] {
   name="ProgramCall_BpEpochMonitornetwork";
   desc="run program that records data from network and possibly other sources about the epoch";
   flags=CAN_REVERT_TO_CODE;
   code_string="BpEpochMonitor(network)";
   prog_args {
    name="prog_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type="BpNetwork*";
     name="network";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network";
     };
    };
   };
   target=.programs.gp["BpAll_Std"]["BpEpochMonitor"]$$<Program,BpEpochMonitor>;
   targ_ld_init="*BpEpochMonitor*";
  };
 };
 step_prog=NULL;
 step_n=1;
 doc {
  name="doc";
  desc=;
  web_doc=1;
  wiki="emergent";
  url="BpEpoch";
  full_url="https://grey.colorado.edu/emergent/index.php/BpEpoch";
  text_size=1;
  text=;
  html_text=;
 };
};

// ta_Dump File v2.0 -- code v5.0.1.0
Program .projects[0].programs.gp[0][5] { 
  ProgObjList @.objs = [1] {
    NetMonitor @[0] { 
      NetMonItem_List @.items = [6] {
	NetMonItem @[0] { };
	NetMonItem @[1] { };
	NetMonItem @[2] { };
	NetMonItem @[3] { };
	NetMonItem @[4] { };
	NetMonItem @[5] { };
      };
    };
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [1] {
    ProgVar @[0] { };
  };

  ProgVar_List @.vars = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.load_code = [0] {
  };

  ProgEl_List @.init_code = [3] {
    MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
      };
    };
    MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
      };
    };
    MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
      };
    };
  };

  ProgEl_List @.prog_code = [4] {
    MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
    };
    MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
    };
    MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
    };
    MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
      };
    };
  };
};
Program .projects[0].programs.gp[0][5] {
 name="BpTrialMonitor";
 tags="Bp, Std, Monitor";
 desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
 flags=;
 objs {
  name=;
  el_typ=NetMonitor;
  el_def=0;
  NetMonitor @[0] {
   name="trial_netmon";
   items {
    name=;
    el_typ=NetMonItem;
    el_def=0;
    NetMonItem @[0] {
     name="batch";
     computed=0;
     object_type=LeabraNetwork;
     object=.projects[0].networks[0]$0$;
     variable="batch";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[1] {
     name="epoch";
     computed=0;
     object_type=LeabraNetwork;
     object=$0$;
     variable="epoch";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[2] {
     name="trial";
     computed=0;
     object_type=LeabraNetwork;
     object=$0$;
     variable="trial";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[3] {
     name="trial_name";
     computed=0;
     object_type=LeabraNetwork;
     object=$0$;
     variable="trial_name";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[4] {
     name="group_name";
     computed=0;
     object_type=LeabraNetwork;
     object=$0$;
     variable="group_name";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[5] {
     name="sse";
     computed=0;
     object_type=LeabraNetwork;
     object=$0$;
     variable="sse";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
    };
   };
   network=$0$;
   data=.projects[0].data.gp[1][0]$1$;
   rmv_orphan_cols=1;
  };
 };
 types {
  name=;
  el_typ=ProgType;
  el_def=0;
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=Network;
   object_val=$0$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="network to record data from";
   init_from=NULL;
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="trial_mon_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=$1$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="data table to record trial-level data to (this program writes new data to this table!)";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="trial_netmon";
   var_type=T_Object;
   object_type=NetMonitor;
   object_val=.projects[0].programs.gp[0][5].objs[0]$2$;
   objs_ptr=1;
   flags=NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
   init_from=NULL;
  };
 };
 functions {
  name=;
  el_typ=Function;
  el_def=0;
 };
 load_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=MethodCall;
  el_def=0;
  MethodCall @[0] {
   desc="set the network and datatable for the NetMonitor";
   flags=;
   result_var=NULL;
   obj=.projects[0].programs.gp[0][5].vars[1]$3$;
   method=NetMonitor::SetDataNetwork;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=DataTable_ptr;
     type="DataTable*";
     name="dt";
     required=0;
     def_val=;
     expr {
      expr="trial_mon_data";
     };
    };
    ProgArg @[1] {
     arg_type=Network_ptr;
     type="Network*";
     name="net";
     required=0;
     def_val=;
     expr {
      expr="network";
     };
    };
   };
  };
  MethodCall @[1] {
   desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
   flags=;
   result_var=NULL;
   obj=$3$;
   method=taBase::CheckConfig;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="quiet";
     required=0;
     def_val="false";
     expr {
      expr="false";
     };
    };
   };
  };
  MethodCall @[2] {
   desc="update the monitor items and data schema based on current settings of the NetMonitor object";
   flags=;
   result_var=NULL;
   obj=$3$;
   method=NetMonitor::UpdateMonitors;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="reset_first";
     required=0;
     def_val="false";
     expr {
      expr="true";
     };
    };
   };
  };
 };
 prog_code {
  name=;
  el_typ=MethodCall;
  el_def=0;
  MethodCall @[0] {
   desc="add a new blank row to the data";
   flags=;
   result_var=NULL;
   obj=.projects[0].programs.gp[0][5].vars[0]$4$;
   method=DataTable::AddBlankRow;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  MethodCall @[1] {
   desc="get the new monitor data from the network and other sources -- this does the main work";
   flags=;
   result_var=NULL;
   obj=$3$;
   method=NetMonitor::GetMonVals;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  MethodCall @[2] {
   desc="update views and other things after writing new data to monitor data table";
   flags=;
   result_var=NULL;
   obj=$4$;
   method=DataBlock::WriteClose;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  MethodCall @[3] {
   desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
   flags=;
   result_var=NULL;
   obj=.projects[0].programs.gp[0][5].args[0]$5$;
   method=Network::DMem_ShareTrialData;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=DataTable_ptr;
     type="DataTable*";
     name="dt";
     required=1;
     def_val=;
     expr {
      expr="trial_mon_data";
     };
    };
    ProgArg @[1] {
     arg_type=int;
     type="int";
     name="n_rows";
     required=0;
     def_val="1";
     expr {
      expr="1";
     };
    };
   };
  };
 };
};

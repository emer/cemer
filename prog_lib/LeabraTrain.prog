// ta_Dump File v3.0 -- code v8.0.0.0 rev9717
Program .projects[0].programs.gp[0][1] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [2] {
  RndSeed_List @[0] { 
   taList @.seeds = [25] {
    RndSeed @[0] { };
    RndSeed @[1] { };
    RndSeed @[2] { };
    RndSeed @[3] { };
    RndSeed @[4] { };
    RndSeed @[5] { };
    RndSeed @[6] { };
    RndSeed @[7] { };
    RndSeed @[8] { };
    RndSeed @[9] { };
    RndSeed @[10] { };
    RndSeed @[11] { };
    RndSeed @[12] { };
    RndSeed @[13] { };
    RndSeed @[14] { };
    RndSeed @[15] { };
    RndSeed @[16] { };
    RndSeed @[17] { };
    RndSeed @[18] { };
    RndSeed @[19] { };
    RndSeed @[20] { };
    RndSeed @[21] { };
    RndSeed @[22] { };
    RndSeed @[23] { };
    RndSeed @[24] { };
   };
  };
  RndSeed @[1] { };
 };

 ProgType_List @.types = [1] {
  DynEnumType @[0] { 
   DynEnumItem_List @.enums = [3] {
    DynEnumItem @[0] { };
    DynEnumItem @[1] { };
    DynEnumItem @[2] { };
   };
  };
 };

 ProgVar_List @.args = [3] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
 };

 ProgVar_List @.vars = [12] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
  ProgVar @[3] { };
  ProgVar @[4] { };
  ProgVar @[5] { };
  ProgVar @[6] { };
  ProgVar @[7] { };
  ProgVar @[8] { };
  ProgVar @[9] { };
  ProgVar @[10] { };
  ProgVar @[11] { };
 };

 Function_List @.functions = [1] {
  Function @[0] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [2] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    Switch @[1] { 
     ProgEl_List @.cases = [3] {
      CaseBlock @[0] { 
       ProgEl_List @.prog_code = [1] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [0] {
	 };
	};
       };
      };
      CaseBlock @[1] { 
       ProgEl_List @.prog_code = [1] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [0] {
	 };
	};
       };
      };
      CaseBlock @[2] { 
       ProgEl_List @.prog_code = [1] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
   };
  };
 };

 ProgEl_List @.init_code = [7] {
  AssignExpr @[0] { };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  AssignExpr @[2] { };
  AssignExpr @[3] { };
  FunctionCall @[4] { 
   ProgArg_List @.fun_args = [0] {
   };
  };
  WtInitPrompt @[5] { 
   ProgEl_List @.yes_code = [3] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    PrintExpr @[2] { };
   };
  };
  AssignExpr @[6] { };
 };

 ProgEl_List @.prog_code = [10] {
  AssignExpr @[0] { };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  AssignExpr @[2] { };
  MemberAssign @[3] { };
  FunctionCall @[4] { 
   ProgArg_List @.fun_args = [0] {
   };
  };
  If @[5] { 
   ProgEl_List @.true_code = [2] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    PrintExpr @[1] { };
   };
  };
  AssignExpr @[6] { };
  WhileLoop @[7] { 
   ProgEl_List @.loop_code = [5] {
    ProgramCall @[0] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    NetCounterIncr @[1] { };
    If @[2] { 
     ProgEl_List @.true_code = [2] {
      VarIncr @[0] { };
      IfBreak @[1] { };
     };
    };
    Else @[3] { 
     ProgEl_List @.else_code = [1] {
      AssignExpr @[0] { };
     };
    };
    If @[4] { 
     ProgEl_List @.true_code = [1] {
      If @[0] { 
       ProgEl_List @.true_code = [1] {
	ProgramCall @[0] { 
	 ProgArg_List @.prog_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
   };
  };
  If @[8] { 
   ProgEl_List @.true_code = [1] {
    ProgramCall @[0] { 
     ProgArg_List @.prog_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  MethodCall @[9] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
 };
};
Program .projects[0].programs.gp[0][1] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {
   name="DocLink";
   doc=.projects[0].programs.gp[0][1].doc$$;
  };
 };
 name="LeabraTrain";
 short_nm="Train";
 tags="Leabra, Train, RndSeedList";
 desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task.  Also has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
 version {
  major=8;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 flags=0;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=RndSeed;
  el_def=0;
  RndSeed_List @[0] {
   name="rnd_seeds";
   seeds {
    name="seeds";
    el_typ=RndSeed;
    el_def=0;
    RndSeed @[0] {
     name="RndSeed_1";
     rnd_seed=2878175685;
    };
    RndSeed @[1] {
     name="RndSeed_2";
     rnd_seed=2878175686;
    };
    RndSeed @[2] {
     name="RndSeed_3";
     rnd_seed=2878175687;
    };
    RndSeed @[3] {
     name="RndSeed_4";
     rnd_seed=2878175688;
    };
    RndSeed @[4] {
     name="RndSeed_5";
     rnd_seed=2878175689;
    };
    RndSeed @[5] {
     name="RndSeed_6";
     rnd_seed=2878175690;
    };
    RndSeed @[6] {
     name="RndSeed_7";
     rnd_seed=2878175691;
    };
    RndSeed @[7] {
     name="RndSeed_8";
     rnd_seed=2878175692;
    };
    RndSeed @[8] {
     name="RndSeed_9";
     rnd_seed=2878175693;
    };
    RndSeed @[9] {
     name="RndSeed_10";
     rnd_seed=2878175694;
    };
    RndSeed @[10] {
     name="RndSeed_11";
     rnd_seed=2878175695;
    };
    RndSeed @[11] {
     name="RndSeed_12";
     rnd_seed=2878175696;
    };
    RndSeed @[12] {
     name="RndSeed_13";
     rnd_seed=2878175697;
    };
    RndSeed @[13] {
     name="RndSeed_14";
     rnd_seed=2878175698;
    };
    RndSeed @[14] {
     name="RndSeed_15";
     rnd_seed=2878175699;
    };
    RndSeed @[15] {
     name="RndSeed_16";
     rnd_seed=2878175700;
    };
    RndSeed @[16] {
     name="RndSeed_17";
     rnd_seed=2878175701;
    };
    RndSeed @[17] {
     name="RndSeed_18";
     rnd_seed=2878175702;
    };
    RndSeed @[18] {
     name="RndSeed_19";
     rnd_seed=2878175703;
    };
    RndSeed @[19] {
     name="RndSeed_20";
     rnd_seed=2878175704;
    };
    RndSeed @[20] {
     name="RndSeed_21";
     rnd_seed=2878175705;
    };
    RndSeed @[21] {
     name="RndSeed_22";
     rnd_seed=2878175706;
    };
    RndSeed @[22] {
     name="RndSeed_23";
     rnd_seed=2878175707;
    };
    RndSeed @[23] {
     name="RndSeed_24";
     rnd_seed=2878175708;
    };
    RndSeed @[24] {
     name="RndSeed_25";
     rnd_seed=2878175709;
    };
   };
  };
  RndSeed @[1] {
   name="rnd_seed";
   rnd_seed=1208639044;
  };
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
  DynEnumType @[0] {
   name="RndInitType";
   desc=;
   enums {
    name=;
    el_typ=DynEnumItem;
    el_def=0;
    DynEnumItem @[0] {
     name="OLD_SEED";
     value=0;
     desc="use stored random seed value (recreates same sequence every time)";
    };
    DynEnumItem @[1] {
     name="NEW_SEED";
     value=1;
     desc="generate new random seed (new sequence of random numbers)";
    };
    DynEnumItem @[2] {
     name="BATCH_SEEDS";
     value=2;
     desc="use a fixed list of random seeds with the current batch number selecting the seed to use -- provides a consistent set of initial conditions for each batch regardless..";
    };
   };
   bits=0;
  };
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$$<LeabraNetwork,Network_0>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$$<DataTable,StdInputData>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[2] {
   name="no_prompts";
   var_type=T_Bool;
   bool_val=0;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
   init_from=NULL;
  };
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="max_epoch";
   var_type=T_Int;
   int_val=500;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[1] {
   name="epoch";
   var_type=T_Int;
   int_val=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[2] {
   name="train_mode";
   var_type=T_HardEnum;
   int_val=1;
   hard_enum_type=Network::TrainMode;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[3] {
   name="rnd_init";
   var_type=T_DynEnum;
   dyn_enum_val {
    user_data_=NULL;
    enum_type=.projects[0].programs.gp[0][1].types[0]$$;
    value=2;
   };
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="how to initialize the random numbers when the Init button is pressed";
   init_from=NULL;
  };
  ProgVar @[4] {
   name="err_stopcrit";
   var_type=T_Real;
   real_val=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="stopping criterion for training, in terms of count of trials with errors in the epoch (nework cnt_err)";
   init_from=NULL;
  };
  ProgVar @[5] {
   name="n_under_thr";
   var_type=T_Int;
   int_val=2;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="number of times network needs to be under stopcrit threshold to actually stop";
   init_from=NULL;
  };
  ProgVar @[6] {
   name="save_final_wts";
   var_type=T_Bool;
   bool_val=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="save the network's weights at the end of training?  ";
   init_from=NULL;
  };
  ProgVar @[7] {
   name="save_wts_interval";
   var_type=T_Int;
   int_val=-1;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="save the weights every this many epochs, if number is >= 1 (otherwise do not save weights)";
   init_from=NULL;
  };
  ProgVar @[8] {
   name="n_under_cnt";
   var_type=T_Int;
   int_val=0;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="current under threshold counter";
   init_from=NULL;
  };
  ProgVar @[9] {
   name="rnd_seeds";
   var_type=T_Object;
   object_type=RndSeed_List;
   object_val=.projects[0].programs.gp[0][1].objs[0]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[10] {
   name="train_timer";
   var_type=T_Object;
   object_type=TimeUsed;
   object_val=.projects[0].networks[0].train_time$$<TimeUsed,train_time>;
   objs_ptr=0;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[11] {
   name="rnd_seed";
   var_type=T_Object;
   object_type=RndSeed;
   object_val=.projects[0].programs.gp[0][1].objs[1]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
  Function @[0] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="GetRandomSeed() returns: int";
   pre_compile_code_string="GetRandomSeed() returns: int";
   name="GetRandomSeed";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name=;
      el_typ=ProgVar;
      el_def=0;
     };
    };
    Switch @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="switch(rnd_init)";
     pre_compile_code_string="switch(rnd_init)";
     switch_var=.projects[0].programs.gp[0][1].vars[3]$$;
     cases {
      name=;
      el_typ=CaseBlock;
      el_def=0;
      CaseBlock @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="case: OLD_SEED";
       pre_compile_code_string="case: OLD_SEED";
       prog_code {
	name=;
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc="restore previous random seed (all runs produce same results) -- click on rnd_seed object to generate a new seed to use for this if you want";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="rnd_seed->OldSeed()";
	 pre_compile_code_string="rnd_seed->OldSeed()";
	 result_var=NULL;
	 obj=.projects[0].programs.gp[0][1].vars[11]$$;
	 method=RndSeed::OldSeed;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	 };
	 meth_sig="void OldSeed()";
	 meth_desc=" restore current seed to random num generator";
	};
       };
       case_val {
	expr="OLD_SEED";
       };
       is_default=0;
      };
      CaseBlock @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="case: NEW_SEED";
       pre_compile_code_string="case: NEW_SEED";
       prog_code {
	name=;
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc="new random numbers each time";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="rnd_seed->NewSeed()";
	 pre_compile_code_string="rnd_seed->NewSeed()";
	 result_var=NULL;
	 obj=$.projects[0].programs.gp[0][1].vars[11]$;
	 method=RndSeed::NewSeed;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	 };
	 meth_sig="void NewSeed()";
	 meth_desc=" set the seed to a new random value (based on time and process id)";
	};
       };
       case_val {
	expr="NEW_SEED";
       };
       is_default=0;
      };
      CaseBlock @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="case: BATCH_SEEDS";
       pre_compile_code_string="case: BATCH_SEEDS";
       prog_code {
	name=;
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
	 pre_compile_code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
	 result_var=NULL;
	 obj=.projects[0].programs.gp[0][1].vars[9]$$;
	 method=RndSeed_List::UseSeed;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=int;
	   type="int";
	   name="idx";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="network.batch % rnd_seeds.seeds.size";
	   };
	  };
	 };
	 meth_sig="void UseSeed(int idx)";
	 meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
	};
       };
       case_val {
	expr="BATCH_SEEDS";
       };
       is_default=0;
      };
     };
    };
   };
  };
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
  AssignExpr @[0] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="no_prompts = false";
   pre_compile_code_string="no_prompts = false";
   result_var=.projects[0].programs.gp[0][1].args[2]$$;
   expr {
    expr="false";
   };
  };
  MethodCall @[1] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="network->CheckConfig(false)";
   pre_compile_code_string="network->CheckConfig(false)";
   result_var=NULL;
   obj=.projects[0].programs.gp[0][1].args[0]$$;
   method=taBase::CheckConfig;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="quiet";
     required=0;
     def_val="false";
     prev_expr=;
     expr {
      expr="false";
     };
    };
   };
   meth_sig="bool CheckConfig(bool quiet = false)";
   meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
  };
  AssignExpr @[2] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="train_timer = network.train_time";
   pre_compile_code_string="train_timer = network.train_time";
   result_var=.projects[0].programs.gp[0][1].vars[10]$$;
   expr {
    expr="network.train_time";
   };
  };
  AssignExpr @[3] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="n_under_cnt = 0";
   pre_compile_code_string="n_under_cnt = 0";
   result_var=.projects[0].programs.gp[0][1].vars[8]$$;
   expr {
    expr="0";
   };
  };
  FunctionCall @[4] {
   desc="initialize random seed";
   flags=CAN_REVERT_TO_CODE;
   code_string="GetRandomSeed()";
   pre_compile_code_string="GetRandomSeed()";
   result_var=NULL;
   fun=.projects[0].programs.gp[0][1].functions[0]$$;
   fun_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  WtInitPrompt @[5] {
   desc="don't initialize weights without checking";
   flags=CAN_REVERT_TO_CODE;
   code_string="if (gui && \"Do you want to Initialize Network Weights\")";
   pre_compile_code_string="if (gui && \"Do you want to Initialize Network Weights\")";
   prompt="Do you want to Initialize Network Weights";
   yes_label="Yes";
   no_label="No";
   yes_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     desc="need to have built network by now in any case, so do it here to make double sure -- prevents errs when loading project with startup program";
     flags=CAN_REVERT_TO_CODE;
     code_string="network->Build()";
     pre_compile_code_string="network->Build()";
     result_var=NULL;
     obj=$.projects[0].programs.gp[0][1].args[0]$;
     method=Network::Build;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Build()";
     meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
    };
    MethodCall @[1] {
     desc="initialize network weights: could also load pre-set weights or something else here";
     flags=CAN_REVERT_TO_CODE;
     code_string="network->Init_Weights()";
     pre_compile_code_string="network->Init_Weights()";
     result_var=NULL;
     obj=$.projects[0].programs.gp[0][1].args[0]$;
     method=Network::Init_Weights;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Init_Weights()";
     meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
    };
    PrintExpr @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print network.name << \" Weights Initialized\"";
     pre_compile_code_string="Print network.name << \" Weights Initialized\"";
     expr {
      expr="network.name << \" Weights Initialized\"";
     };
     debug=0;
    };
   };
  };
  AssignExpr @[6] {
   desc="grab the official network epoch counter: will be initialized if needed by now";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch = network.epoch";
   pre_compile_code_string="epoch = network.epoch";
   result_var=.projects[0].programs.gp[0][1].vars[1]$$;
   expr {
    expr="network.epoch";
   };
  };
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  AssignExpr @[0] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="train_timer = network.train_time";
   pre_compile_code_string="train_timer = network.train_time";
   result_var=$.projects[0].programs.gp[0][1].vars[10]$;
   expr {
    expr="network.train_time";
   };
  };
  MethodCall @[1] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="train_timer->StartTimer(true)";
   pre_compile_code_string="train_timer->StartTimer(true)";
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][1].vars[10]$;
   method=TimeUsed::StartTimer;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="reset_used";
     required=0;
     def_val="true";
     prev_expr=;
     expr {
      expr="true";
     };
    };
   };
   meth_sig="void StartTimer(bool reset_used = true)";
   meth_desc=" record the current time as the starting time, and optionally reset the time used information";
  };
  AssignExpr @[2] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="n_under_cnt = 0";
   pre_compile_code_string="n_under_cnt = 0";
   result_var=$.projects[0].programs.gp[0][1].vars[8]$;
   expr {
    expr="0";
   };
  };
  MemberAssign @[3] {
   desc="set network's training mode to our local value";
   flags=CAN_REVERT_TO_CODE;
   code_string="network.train_mode = train_mode";
   pre_compile_code_string="network.train_mode = train_mode";
   obj=$.projects[0].programs.gp[0][1].args[0]$;
   path="train_mode";
   expr {
    expr="train_mode";
   };
   update_after=0;
  };
  FunctionCall @[4] {
   desc="initialize random seed";
   flags=CAN_REVERT_TO_CODE;
   code_string="GetRandomSeed()";
   pre_compile_code_string="GetRandomSeed()";
   result_var=NULL;
   fun=$.projects[0].programs.gp[0][1].functions[0]$;
   fun_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  If @[5] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="if (no_prompts)";
   pre_compile_code_string="if (no_prompts)";
   cond {
    expr="no_prompts";
   };
   true_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     desc="initialize network weights: could also load pre-set weights or something else here";
     flags=CAN_REVERT_TO_CODE;
     code_string="network->Init_Weights()";
     pre_compile_code_string="network->Init_Weights()";
     result_var=NULL;
     obj=$.projects[0].programs.gp[0][1].args[0]$;
     method=Network::Init_Weights;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Init_Weights()";
     meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
    };
    PrintExpr @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print network.name << \" Weights Initialized\"";
     pre_compile_code_string="Print network.name << \" Weights Initialized\"";
     expr {
      expr="network.name << \" Weights Initialized\"";
     };
     debug=0;
    };
   };
  };
  AssignExpr @[6] {
   desc="grab the official network epoch counter: will be initialized if needed by now";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch = network.epoch";
   pre_compile_code_string="epoch = network.epoch";
   result_var=$.projects[0].programs.gp[0][1].vars[1]$;
   expr {
    expr="network.epoch";
   };
  };
  WhileLoop @[7] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="while (epoch < max_epoch)";
   pre_compile_code_string="while (epoch < max_epoch)";
   loop_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    ProgramCall @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraEpoch(network, input_data)";
     pre_compile_code_string="LeabraEpoch(network, input_data)";
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="input_data";
       };
      };
     };
     target=.projects[0].programs.gp[0][2]$$<Program,LeabraEpoch>;
     targ_ld_init="*LeabraEpoch*";
    };
    NetCounterIncr @[1] {
     desc="increment the epoch counter";
     flags=CAN_REVERT_TO_CODE;
     code_string="Net Counter Incr: epoch";
     pre_compile_code_string="Net Counter Incr: epoch";
     network_var=$.projects[0].programs.gp[0][1].args[0]$;
     local_ctr_var=$.projects[0].programs.gp[0][1].vars[1]$;
     counter=Network::epoch;
     update_after=0;
    };
    If @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (network.cnt_err <= err_stopcrit)";
     pre_compile_code_string="if (network.cnt_err <= err_stopcrit)";
     cond {
      expr="network.cnt_err <= err_stopcrit";
     };
     true_code {
      name=;
      el_typ=ProgCode;
      el_def=0;
      VarIncr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="n_under_cnt += 1";
       pre_compile_code_string="n_under_cnt += 1";
       var=$.projects[0].programs.gp[0][1].vars[8]$;
       expr {
	expr="1";
       };
      };
      IfBreak @[1] {
       desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
       flags=CAN_REVERT_TO_CODE;
       code_string="if(n_under_cnt >=  n_under_thr) break";
       pre_compile_code_string="if(n_under_cnt >=  n_under_thr) break";
       cond {
	expr="n_under_cnt >=  n_under_thr";
       };
      };
     };
    };
    Else @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     pre_compile_code_string="else";
     else_code {
      name=;
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="n_under_cnt = 0";
       pre_compile_code_string="n_under_cnt = 0";
       result_var=$.projects[0].programs.gp[0][1].vars[8]$;
       expr {
	expr="0";
       };
      };
     };
    };
    If @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (save_wts_interval >= 1)";
     pre_compile_code_string="if (save_wts_interval >= 1)";
     cond {
      expr="save_wts_interval >= 1";
     };
     true_code {
      name=;
      el_typ=ProgCode;
      el_def=0;
      If @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (epoch % save_wts_interval == 0)";
       pre_compile_code_string="if (epoch % save_wts_interval == 0)";
       cond {
	expr="epoch % save_wts_interval == 0";
       };
       true_code {
	name=;
	el_typ=ProgCode;
	el_def=0;
	ProgramCall @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="SaveWeights(network)";
	 pre_compile_code_string="SaveWeights(network)";
	 prog_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=Network;
	   type="LeabraNetwork*";
	   name="network";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="network";
	   };
	  };
	 };
	 target=.projects[0].programs.gp[0][9]$$<Program,SaveWeights>;
	 targ_ld_init="*SaveWeights*";
	};
       };
      };
     };
    };
   };
   test {
    expr="epoch < max_epoch";
   };
  };
  If @[8] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="if (save_final_wts)";
   pre_compile_code_string="if (save_final_wts)";
   cond {
    expr="save_final_wts";
   };
   true_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    ProgramCall @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="SaveWeights(network)";
     pre_compile_code_string="SaveWeights(network)";
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=Network;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
     };
     target=$.projects[0].programs.gp[0][9]$;
     targ_ld_init="*SaveWeights*";
    };
   };
  };
  MethodCall @[9] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="train_timer->EndTimer()";
   pre_compile_code_string="train_timer->EndTimer()";
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][1].vars[10]$;
   method=TimeUsed::EndTimer;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void EndTimer()";
   meth_desc=" record the current time as the ending time, and compute difference as the time used";
  };
 };
 step_prog=NULL;
 step_n=1;
 doc {
  name="doc";
  desc=;
  web_doc=1;
  wiki="emergent";
  url="LeabraTrain";
  full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrain";
  text_size=1;
  text=;
  html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>LeabraTrain - emergent</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"LeabraTrain\",\"wgTitle\":\"LeabraTrain\",\"wgCurRevisionId\":11266,\"wgRevisionId\":11266,\"wgArticleId\":2767,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"bureaucrat\",\"svnadmins\",\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"LeabraTrain\",\"wgRelevantArticleId\":2767,\"wgUserId\":3,\"wgUserEditCount\":2418,\"wgUserRegistration\":1178051527000,\"wgUserNewMsgRevisionId\":null,\"wgIsProbablyEditable\":!0,
\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/emergent/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"ccmeonemails\":\"1\",\"enotifminoredits\":\"1\",\"imagesize\":\"0\",\"previewontop\":\"\",\"rows\":\"30\",\"thumbsize\":\"0\",\"underline\":\"0\",\"watchmoves\":\"1\",\"editsection\":\"1\",\"rememberpassword\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"14fd6c804d78e99930123181974c128b983adb9e\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"3b26cf5f182fe7fb29af6a6ca01dd6cb57342b95+\\\\\",\"patrolToken\":\"6f879f5a78cf8bf62c088b26f37a826a57342b95+\\\\\",\"watchToken\":\"0f5971aae38fcb23ba50cc900260a01757342b95+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/emergent/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a{text-decoration:none}</style>
<script async=\"\" src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.2\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"LeabraTrain\" href=\"/emergent/index.php?title=Special:ExportRDF/LeabraTrain&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/emergent/opensearch_desc.php\" title=\"emergent (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/emergent/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"emergent Atom feed\" href=\"/emergent/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/emergent/skins/Vector/csshover.min.htc\")}</style><![endif]-->
<script src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=EaPOpX%2FG\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-LeabraTrain skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">LeabraTrain</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From emergent</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><p>LeabraTrain is the standard <a href=\"/emergent/index.php/Program\" title=\"Program\">Program</a> for training <a href=\"/emergent/index.php/Leabra\" title=\"Leabra\">Leabra</a> networks.  It iterates over <a href=\"/emergent/index.php?title=LeabraEpoch&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"LeabraEpoch (page does not exist)\">LeabraEpoch</a> epochs, optionally until a training criterion has been met, or for a specified maximum number of epochs.
</p><p>You can easily customize this program to do different things at different points in the training process, for example by examining the network.epoch value (or the local copy of that value, epoch).
</p>
<!-- 
NewPP limit report
Cached time: 20160512070701
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.011 seconds
Real time usage: 0.014 seconds
Preprocessor visited node count: 1/1000000
Preprocessor generated node count: 4/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 1/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 - -total
-->

<!-- Saved in parser cache with key pdpwiki:pcache:idhash:2767-0!*!0!*!*!*!* and timestamp 20160512070701 and revision id 11266
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266\">https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/emergent/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/emergent/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/emergent/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/emergent/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/emergent/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/emergent/index.php?title=Special:UserLogout&amp;returnto=LeabraTrain\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/emergent/index.php?title=Talk:LeabraTrain&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=unwatch&amp;token=c6d7363e22d4c0d44ac7ca2a8c59165157342b95%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/emergent/index.php/Special:MovePage/LeabraTrain\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/emergent/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search emergent [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-recentchanges\"><a href=\"/emergent/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-Documentation\"><a href=\"/emergent/index.php/User_hub\">Documentation</a></li><li id=\"n-Submit-a-bug\"><a href=\"/emergent/index.php/How_to_submit_a_bug_report\">Submit a bug</a></li><li id=\"n-Bug-tracker\"><a href=\"//grey.colorado.edu/cgi-bin/bugzilla/index.cgi\" rel=\"nofollow\">Bug tracker</a></li><li id=\"n-Mailing-list\"><a href=\"//grey.colorado.edu/cgi-bin/mailman/listinfo/emergent-users\" rel=\"nofollow\">Mailing list</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/emergent/index.php/Special:WhatLinksHere/LeabraTrain\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/emergent/index.php/Special:RecentChangesLinked/LeabraTrain\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/emergent/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/emergent/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;oldid=11266\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/emergent/index.php/Special:Browse/LeabraTrain\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=LeabraTrain\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=LeabraTrain&amp;oldid=11266&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 12 May 2016, at 01:07.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-about\"><a href=\"/emergent/index.php/emergent:About\" title=\"emergent:About\">About emergent</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/emergent/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/emergent/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /emergent/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/emergent/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":155});
} );</script>
	

</body></html>";
 };
};

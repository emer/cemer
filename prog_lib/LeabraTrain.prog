// ta_Dump File v2.0
Program .projects[0].programs.gp[0][0] { 
ProgVar_List @.vars = [3] {
ProgVar @[0] { };
ProgVar @[1] { };
ProgVar @[2] { };
};

ProgEl_List @.init_code = [3] {
MethodCall @[0] { };
NetCounterInit @[1] { };
MethodCall @[2] { };
};

ProgEl_List @.prog_code = [2] {
UserScript @[0] { };
WhileLoop @[1] { 
ProgEl_List @.loop_code = [3] {
ProgramCall @[0] { };
NetCounterIncr @[1] { };
IfBreak @[2] { };
};
};
};
};
Program .projects[0].programs.gp[0][0] {
name="LeabraTrain";
desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
flags=PF_NONE;
objs {
name=;
el_typ=taOBase;
el_def=0;
};
args {
name=;
el_typ=ProgVar;
el_def=0;
};
vars {
name=;
el_typ=ProgVar;
el_def=0;
ProgVar @[0] {
name="max_epoch";
var_type=T_Int;
int_val=500;
};
ProgVar @[1] {
name="epoch";
var_type=T_Int;
int_val=0;
};
ProgVar @[2] {
name="err_stopcrit";
var_type=T_Real;
real_val=0;
};
};
init_code {
name=;
el_typ=MethodCall;
el_def=0;
MethodCall @[0] {
desc=;
off=0;
result_var=;
method_spec {
script_obj=.projects[0].programs.gp[0].global_vars[0]$0$;
method=Network::CheckConfig;
};
args{ false;};
{ bool quiet;};
};
NetCounterInit @[1] {
desc="initialize epoch counter ";
off=0;
network_var=$0$;
local_ctr_var=.projects[0].programs.gp[0][0].vars[1]$1$;
counter=Network::epoch;
};
MethodCall @[2] {
desc=;
off=0;
result_var=;
method_spec {
script_obj=$0$;
method=Network::InitWtState;
};
args{ };
{ };
};
};
prog_code {
name=;
el_typ=UserScript;
el_def=0;
UserScript @[0] {
desc="update network's context to be same as ours";
off=0;
user_script="network->context = context;";
};
WhileLoop @[1] {
desc=;
off=0;
loop_code {
name=;
el_typ=ProgramCall;
el_def=0;
ProgramCall @[0] {
desc=;
off=0;
target=.projects[0].programs.gp[0][1]$2$;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
NetCounterIncr @[1] {
desc="increment the epoch counter";
off=0;
network_var=$0$;
local_ctr_var=$1$;
counter=Network::epoch;
};
IfBreak @[2] {
desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
off=0;
condition="network->cnt_err <= err_stopcrit";
};
};
loop_test="epoch < max_epoch";
};
};
};

// ta_Dump File v3.0 -- code v8.0.0.0 rev9697
Program .projects[0].programs.gp[0][5] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [0] {
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [1] {
  ProgVar @[0] { };
 };

 ProgVar_List @.vars = [1] {
  ProgVar @[0] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [0] {
 };

 ProgEl_List @.prog_code = [2] {
  MethodCall @[0] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  NetUpdateView @[1] { };
 };
};
Program .projects[0].programs.gp[0][5] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {
   name="DocLink";
   doc=.projects[0].programs.gp[0][5].doc$$;
  };
 };
 name="LeabraCycle";
 short_nm="Cycle";
 tags="Leabra, Std";
 desc="runs one cycle of leabra processing (updating net inputs and activations)";
 flags=0;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=taNBase;
  el_def=0;
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$$<LeabraNetwork,Network_0>;
   objs_ptr=0;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="update_net_view";
   var_type=T_Bool;
   bool_val=1;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  MethodCall @[0] {
   desc="this does all the standard leabra processing of activation updating -- either 1 cycle (1 msec) or 25 cycles if times.cycle_qtr is TRUE (default)";
   flags=CAN_REVERT_TO_CODE;
   code_string="network->Cycle_Run()";
   pre_compile_code_string="network->Cycle_Run()";
   result_var=NULL;
   obj=.projects[0].programs.gp[0][5].args[0]$$;
   method=LeabraNetwork::Cycle_Run;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void Cycle_Run()";
   meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
  };
  NetUpdateView @[1] {
   desc="update network views if update_net_view == true";
   flags=CAN_REVERT_TO_CODE;
   code_string="Net Update View";
   pre_compile_code_string="Net Update View";
   network_var=$.projects[0].programs.gp[0][5].args[0]$;
   update_var=.projects[0].programs.gp[0][5].vars[0]$$;
  };
 };
 step_prog=NULL;
 step_n=1;
 doc {
  name="doc";
  desc=;
  web_doc=1;
  wiki="emergent";
  url="LeabraCycle";
  full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
  text_size=1;
  text=;
  html_text=;
 };
};

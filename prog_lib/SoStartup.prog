// ta_Dump File v3.0 -- code v5.0.2.0
Program .projects[0].programs[0] { 
  ProgObjList @.objs = [0] {
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  ProgVar_List @.vars = [9] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.load_code = [0] {
  };

  ProgEl_List @.init_code = [0] {
  };

  ProgEl_List @.prog_code = [26] {
    IfReturn @[0] { };
    RegisterArgs @[1] { };
    PrintExpr @[2] { };
    MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
    };
    Comment @[4] { };
    ProgVarFmArg @[5] { };
    ProgVarFmArg @[6] { };
    ProgVarFmArg @[7] { };
    ProgVarFmArg @[8] { };
    ProgVarFmArg @[9] { };
    ProgVarFmArg @[10] { };
    ProgVarFmArg @[11] { };
    Comment @[12] { };
    Comment @[13] { };
    IfElse @[14] { 
      ProgEl_List @.true_code = [5] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	ProgVarFmArg @[1] { };
	MiscCall @[2] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	VarIncr @[3] { };
	If @[4] { 
	  ProgEl_List @.true_code = [2] {
	    MethodCall @[0] { 
	      ProgArg_List @.meth_args = [4] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
		ProgArg @[3] { };
	      };
	    };
	    MiscCall @[1] { 
	      ProgArg_List @.meth_args = [1] {
		ProgArg @[0] { };
	      };
	    };
	  };
	};
      };

      ProgEl_List @.false_code = [2] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MiscCall @[1] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
      };
    };
    Comment @[15] { };
    MethodCall @[16] { 
      ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
      };
    };
    MethodCall @[17] { 
      ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
      };
    };
    PrintVar @[18] { };
    Comment @[19] { };
    MethodCall @[20] { 
      ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
      };
    };
    MethodCall @[21] { 
      ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
      };
    };
    PrintVar @[22] { };
    OtherProgramVar @[23] { };
    PrintExpr @[24] { };
    ProgramCall @[25] { 
      ProgArg_List @.prog_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
      };
    };
  };
};
Program .projects[0].programs[0] {
 name="SoStartup";
 short_nm="Startup";
 tags="So, Startup, Parallel Batch";
 desc="run project in the background command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batches=xxx] [tag=xxx] | [b_start=xxx] [b_end=xxx] for parallel-batch mode";
 flags=NO_STOP_STEP|STARTUP_RUN;
 objs {
  name=;
  el_typ=taNBase;
  el_def=0;
 };
 types {
  name=;
  el_typ=ProgType;
  el_def=0;
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=SoNetwork;
   object_val=.projects[0].networks[0]$$<SoNetwork,Network_0>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="network to operate on -- updates batch counter on network and passes it to train program";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$$<DataTable,StdInputData>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="datatable with training patterns -- not used by this program, but passed to train program";
   init_from=NULL;
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="train";
   var_type=T_Object;
   object_type=Program;
   object_val=.projects[0].programs.gp[0][1]$$<Program,SoTrain>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="set this to point to your train process";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="batch";
   var_type=T_Object;
   object_type=Program;
   object_val=.projects[0].programs.gp[0][0]$$<Program,SoBatch>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="set this to point to your batch process";
   init_from=NULL;
  };
  ProgVar @[2] {
   name="tag";
   var_type=T_String;
   string_val="_gui";
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[3] {
   name="batch_str";
   var_type=T_String;
   string_val="00";
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="batch number as a string (leading zeros)";
   init_from=NULL;
  };
  ProgVar @[4] {
   name="log_dir";
   var_type=T_String;
   string_val=;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="log file directory";
   init_from=NULL;
  };
  ProgVar @[5] {
   name="log_file_nm";
   var_type=T_String;
   string_val=;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="name of log file";
   init_from=NULL;
  };
  ProgVar @[6] {
   name="batch_start";
   var_type=T_Int;
   int_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="batch starting number";
   init_from=NULL;
  };
  ProgVar @[7] {
   name="EpochOutputData";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[1][1]$$<DataTable,EpochOutputData>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[8] {
   name="TrialOutputData";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[1][0]$$<DataTable,TrialOutputData>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 functions {
  name=;
  el_typ=Function;
  el_def=0;
 };
 load_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 prog_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
  IfReturn @[0] {
   desc="don't run if running in the gui!";
   flags=;
   cond {
    expr="taMisc::gui_active";
   };
  };
  RegisterArgs @[1] {
   desc="This is KEY!!! actually processes all args, including those from ProgVarFmArg guys below";
   flags=;
  };
  PrintExpr @[2] {
   desc=;
   flags=;
   expr {
    expr="\"Loaded project: \" << .projects[0].file_name";
   };
  };
  MethodCall @[3] {
   desc="initialize process hierarchy prior to setting variables, etc";
   flags=;
   result_var=NULL;
   obj=.projects[0].programs[0].vars[1]$$;
   method=Program::Init;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  Comment @[4] {
   desc="= Std variables in startup program itself =";
   flags=;
  };
  ProgVarFmArg @[5] {
   desc=;
   flags=;
   prog=.projects[0].programs[0]$$;
   var_name="tag";
   arg_name="tag";
  };
  ProgVarFmArg @[6] {
   desc=;
   flags=;
   prog=$.projects[0].programs[0]$;
   var_name="log_dir";
   arg_name="log_dir";
  };
  ProgVarFmArg @[7] {
   desc=;
   flags=;
   prog=$.projects[0].programs.gp[0][1]$;
   var_name="max_epoch";
   arg_name="epochs";
  };
  ProgVarFmArg @[8] {
   desc=;
   flags=;
   prog=$.projects[0].programs.gp[0][1]$;
   var_name="rnd_init";
   arg_name="rnd_init";
  };
  ProgVarFmArg @[9] {
   desc=;
   flags=;
   prog=$.projects[0].programs.gp[0][0]$;
   var_name="max_batch";
   arg_name="batches";
  };
  ProgVarFmArg @[10] {
   desc="b_end is parallel-batch mode of operation (see b_start)";
   flags=;
   prog=$.projects[0].programs.gp[0][0]$;
   var_name="max_batch";
   arg_name="b_end";
  };
  ProgVarFmArg @[11] {
   desc="b_start is parallel-batch mode of operation (see also b_end)";
   flags=;
   prog=$.projects[0].programs.gp[0][0]$;
   var_name="batch";
   arg_name="b_start";
  };
  Comment @[12] {
   desc="= Add your own variables here =";
   flags=;
  };
  Comment @[13] {
   desc="= Below saves log files of standard data tables =";
   flags=;
  };
  IfElse @[14] {
   desc="if passed b_start, then turn off init_batch in Batch program, so it starts here instead of 0";
   flags=;
   cond {
    expr="taMisc::CheckArgByName(\"b_start\")";
   };
   true_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc="directly set variable on batch program";
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[0].vars[1]$;
     method=Program::SetVar;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"init_batch\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="value";
       required=1;
       def_val=;
       expr {
	expr="false";
       };
      };
     };
    };
    ProgVarFmArg @[1] {
     desc="read in the arg to us too, so we can set file names based on it";
     flags=;
     prog=$.projects[0].programs[0]$;
     var_name="batch_start";
     arg_name="b_start";
    };
    MiscCall @[2] {
     desc="string version with leading zeros";
     flags=;
     result_var=.projects[0].programs[0].vars[3]$$;
     object_type=taMisc;
     method=taMisc::LeadingZeros;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="num";
       required=1;
       def_val=;
       expr {
	expr="batch_start";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="len";
       required=1;
       def_val=;
       expr {
	expr="2";
       };
      };
     };
    };
    VarIncr @[3] {
     desc="add to tag for setting log file names";
     flags=;
     var=.projects[0].programs[0].vars[2]$$;
     expr {
      expr="\".\" + batch_str";
     };
    };
    If @[4] {
     desc="save startup args: only for first job in parallel batch mode, or this should be 0 otherwise in any case";
     flags=;
     cond {
      expr="batch_start == 0";
     };
     true_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      MethodCall @[0] {
       desc="save args to file: last arg is to include dmem proc number";
       flags=;
       result_var=.projects[0].programs[0].vars[5]$$;
       obj=.projects[0].programs[0].vars[7]$$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="const taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 expr {
	  expr="\".args\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="const taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 expr {
	  expr="tag.before(\".00\",-1)";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_taString_ref;
	 type="const taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 expr {
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 expr {
	  expr="false";
	 };
	};
       };
      };
      MiscCall @[1] {
       desc=;
       flags=;
       result_var=NULL;
       object_type=taMisc;
       method=taMisc::FullArgStringToFile;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="const taString&";
	 name="fname";
	 required=1;
	 def_val="\"\"";
	 expr {
	  expr="log_file_nm";
	 };
	};
       };
      };
     };
    };
   };
   false_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc="save args to file: last arg is to include dmem proc number";
     flags=;
     result_var=$.projects[0].programs[0].vars[5]$;
     obj=$.projects[0].programs[0].vars[7]$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".args\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MiscCall @[1] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::FullArgStringToFile;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=1;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
     };
    };
   };
  };
  Comment @[15] {
   desc="== Save epoch log -- on by default ==";
   flags=;
  };
  MethodCall @[16] {
   desc="last arg is to include dmem proc number";
   flags=;
   result_var=$.projects[0].programs[0].vars[5]$;
   obj=$.projects[0].programs[0].vars[7]$;
   method=taBase::GetFileNameFmProject;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_taString_ref;
     type="const taString&";
     name="ext";
     required=1;
     def_val=;
     expr {
      expr="\".epc.dat\"";
     };
    };
    ProgArg @[1] {
     arg_type=const_taString_ref;
     type="const taString&";
     name="tag";
     required=0;
     def_val="\"\"";
     expr {
      expr="tag";
     };
    };
    ProgArg @[2] {
     arg_type=const_taString_ref;
     type="const taString&";
     name="subdir";
     required=0;
     def_val="\"\"";
     expr {
      expr="log_dir";
     };
    };
    ProgArg @[3] {
     arg_type=bool;
     type="bool";
     name="dmem_proc_no";
     required=0;
     def_val="false";
     expr {
      expr="false";
     };
    };
   };
  };
  MethodCall @[17] {
   desc="last arg is to restrict log to dmem_proc = 0";
   flags=;
   result_var=NULL;
   obj=$.projects[0].programs[0].vars[7]$;
   method=DataTable::SaveDataLog;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_taString_ref;
     type="const taString&";
     name="fname";
     required=0;
     def_val="\"\"";
     expr {
      expr="log_file_nm";
     };
    };
    ProgArg @[1] {
     arg_type=bool;
     type="bool";
     name="append";
     required=0;
     def_val="false";
     expr {
      expr="false";
     };
    };
    ProgArg @[2] {
     arg_type=bool;
     type="bool";
     name="dmem_proc_0";
     required=0;
     def_val="true";
     expr {
      expr="true";
     };
    };
   };
  };
  PrintVar @[18] {
   desc=;
   flags=;
   message="Saving epoch log data to:";
   print_var=$.projects[0].programs[0].vars[5]$;
   print_var2=NULL;
   print_var3=NULL;
   print_var4=NULL;
   print_var5=NULL;
   print_var6=NULL;
  };
  Comment @[19] {
   desc="== Save trial log -- OFF by default ==";
   flags=;
  };
  MethodCall @[20] {
   desc="last arg is to include dmem proc number";
   flags=OFF;
   result_var=$.projects[0].programs[0].vars[5]$;
   obj=.projects[0].programs[0].vars[8]$$;
   method=taBase::GetFileNameFmProject;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_taString_ref;
     type="const taString&";
     name="ext";
     required=1;
     def_val=;
     expr {
      expr="\".trl.dat\"";
     };
    };
    ProgArg @[1] {
     arg_type=const_taString_ref;
     type="const taString&";
     name="tag";
     required=0;
     def_val="\"\"";
     expr {
      expr="tag";
     };
    };
    ProgArg @[2] {
     arg_type=const_taString_ref;
     type="const taString&";
     name="subdir";
     required=0;
     def_val="\"\"";
     expr {
      expr="log_dir";
     };
    };
    ProgArg @[3] {
     arg_type=bool;
     type="bool";
     name="dmem_proc_no";
     required=0;
     def_val="false";
     expr {
      expr="true";
     };
    };
   };
  };
  MethodCall @[21] {
   desc="last arg is to restrict log to dmem_proc = 0";
   flags=OFF;
   result_var=NULL;
   obj=$.projects[0].programs[0].vars[8]$;
   method=DataTable::SaveDataLog;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_taString_ref;
     type="const taString&";
     name="fname";
     required=0;
     def_val="\"\"";
     expr {
      expr="log_file_nm";
     };
    };
    ProgArg @[1] {
     arg_type=bool;
     type="bool";
     name="append";
     required=0;
     def_val="false";
     expr {
      expr="false";
     };
    };
    ProgArg @[2] {
     arg_type=bool;
     type="bool";
     name="dmem_proc_0";
     required=0;
     def_val="true";
     expr {
      expr="false";
     };
    };
   };
  };
  PrintVar @[22] {
   desc=;
   flags=OFF;
   message="Saving trial log data to:";
   print_var=$.projects[0].programs[0].vars[5]$;
   print_var2=NULL;
   print_var3=NULL;
   print_var4=NULL;
   print_var5=NULL;
   print_var6=NULL;
  };
  OtherProgramVar @[23] {
   desc="propagate the tag";
   flags=;
   other_prog=.projects[0].programs.gp[0][7]$$<Program,SaveWeights>;
   set_other=1;
   var_1=$.projects[0].programs[0].vars[2]$;
   var_2=NULL;
   var_3=NULL;
   var_4=NULL;
  };
  PrintExpr @[24] {
   desc=;
   flags=;
   expr {
    expr="\"Running: \" << batch.name";
   };
  };
  ProgramCall @[25] {
   desc=;
   flags=;
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=SoNetwork;
     type="SoNetwork*";
     name="network";
     required=1;
     def_val=;
     expr {
      expr="network";
     };
    };
    ProgArg @[1] {
     arg_type=DataTable;
     type="DataTable*";
     name="input_data";
     required=1;
     def_val=;
     expr {
      expr="input_data";
     };
    };
   };
   target=$.projects[0].programs.gp[0][0]$;
   targ_ld_init="*SoBatch*";
  };
 };
 step_prog=NULL;
 step_n=1;
};

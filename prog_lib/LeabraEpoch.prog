// ta_Dump File v2.0
Program .projects[0].programs.gp[0][2] { 
  ProgVar_List @.args = [1] {
    ProgVar @[0] { };
  };

  ProgVar_List @.vars = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  ProgEl_List @.init_code = [1] {
    NetCounterInit @[0] { };
  };

  ProgEl_List @.prog_code = [5] {
    NetCounterInit @[0] { };
    ProgramCall @[1] { 
      ProgArg_List @.prog_args = [1] {
	ProgArg @[0] { };
      };
    };
    BasicDataLoop @[2] { 
      ProgEl_List @.loop_code = [4] {
	ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[1] { };
	IfElse @[2] { 
	  ProgEl_List @.true_code = [2] {
	    MethodCall @[0] { };
	    MethodCall @[1] { };
	  };
	};
	NetCounterIncr @[3] { };
      };
    };
    MethodCall @[3] { };
    ProgramCall @[4] { 
      ProgArg_List @.prog_args = [1] {
	ProgArg @[0] { };
      };
    };
  };
};
Program .projects[0].programs.gp[0][2] {
 name="LeabraEpoch";
 desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
 flags=PF_NONE;
 objs {
  name=;
  el_typ=taOBase;
  el_def=0;
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$0$;
   objs_ptr=0;
   desc=;
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="trial";
   var_type=T_Int;
   int_val=6;
   objs_ptr=0;
   desc=;
  };
  ProgVar @[1] {
   name="train_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$1$;
   objs_ptr=0;
   desc=;
  };
 };
 functions {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc="initialize trial counter: note also needs to do this in regular running program";
   off=0;
   network_var=.projects[0].programs.gp[0][2].args[0]$2$;
   local_ctr_var=.projects[0].programs.gp[0][2].vars[0]$3$;
   counter=Network::trial;
  };
 };
 prog_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc="initialize trial counter";
   off=0;
   network_var=$2$;
   local_ctr_var=$3$;
   counter=Network::trial;
  };
  ProgramCall @[1] {
   desc=;
   off=0;
   target=.projects[0].programs.gp[0][7]$4$;
   call_init=1;
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     name="network";
     value="network";
    };
   };
  };
  BasicDataLoop @[2] {
   desc=;
   off=0;
   loop_code {
    name=;
    el_typ=ProgramCall;
    el_def=0;
    ProgramCall @[0] {
     desc=;
     off=0;
     target=.projects[0].programs.gp[0][3]$5$;
     call_init=0;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       name="network";
       value="network";
      };
     };
    };
    MethodCall @[1] {
     desc="sync the network stats variables (only used for dmem -- else ignored)";
     off=0;
     result_var=NULL;
     obj=$2$;
     method=Network::DMem_TrialSync_NetStats;
     args{ };
{      };
    };
    IfElse @[2] {
     desc="Update weights in epoch -- allows for batching of weight changes if desired";
     off=0;
     condition="network->context == Network::TRAIN";
     true_code {
      name=;
      el_typ=MethodCall;
      el_def=0;
      MethodCall @[0] {
       desc="sync the network weight changes from distributed trial procs -- only used for dmem;";
       off=0;
       result_var=NULL;
       obj=$2$;
       method=Network::DMem_TrialSync_dWt;
       args{ };
{        };
      };
      MethodCall @[1] {
       desc=;
       off=0;
       result_var=NULL;
       obj=.projects[0].programs.gp[0][3].args[0]$6$;
       method=Network::UpdateWeights;
       args{ };
{        };
      };
     };
     false_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
     };
    };
    NetCounterIncr @[3] {
     desc="increment trial counter";
     off=0;
     network_var=$2$;
     local_ctr_var=$3$;
     counter=Network::trial;
    };
   };
   loop_test="This is not used here";
   data_var=.projects[0].programs.gp[0][2].vars[1]$7$;
   order=PERMUTED;
   item_idx_list{ 5;4;2;1;0;3;   };
   dmem_nprocs=1;
   dmem_this_proc=0;
  };
  MethodCall @[3] {
   desc=;
   off=0;
   result_var=NULL;
   obj=$2$;
   method=LeabraNetwork::Compute_EpochSSE;
   args{ };
{    };
  };
  ProgramCall @[4] {
   desc=;
   off=0;
   target=.projects[0].programs.gp[0][8]$8$;
   call_init=0;
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     name="network";
     value="network";
    };
   };
  };
 };
};

// ta_Dump File v2.0
Program .projects[0].programs.gp[0][2] { 
  ProgObjList @.objs = [1] {
    TimeUsed @[0] { };
  };

  ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  ProgVar_List @.vars = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  ProgEl_List @.init_code = [1] {
    NetCounterInit @[0] { };
  };

  ProgEl_List @.prog_code = [8] {
    NetCounterInit @[0] { };
    ProgramCall @[1] { 
      ProgArg_List @.prog_args = [1] {
	ProgArg @[0] { };
      };
    };
    MethodCall @[2] { };
    BasicDataLoop @[3] { 
      ProgEl_List @.loop_code = [3] {
	UserScript @[0] { };
	ProgramCall @[1] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	IfElse @[2] { 
	  ProgEl_List @.true_code = [1] {
	    MethodCall @[0] { };
	  };
	};
      };
    };
    IfElse @[4] { 
      ProgEl_List @.true_code = [1] {
	MethodCall @[0] { };
      };
    };
    MethodCall @[5] { };
    MethodCall @[6] { };
    ProgramCall @[7] { 
      ProgArg_List @.prog_args = [1] {
	ProgArg @[0] { };
      };
    };
  };
};
Program .projects[0].programs.gp[0][2] {
 name="LeabraEpoch";
 desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
 flags=PF_NONE;
 objs {
  name=;
  el_typ=taOBase;
  el_def=0;
  TimeUsed @[0] {name="epoch_timer": start={usr=11978: sys=1577: tot=889940437: }: end={usr=11973: sys=1577: tot=889940431: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.projects[0].networks[0]$0$;
   objs_ptr=0;
   desc=;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$1$;
   objs_ptr=0;
   desc=;
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="trial";
   var_type=T_Int;
   int_val=2;
   objs_ptr=0;
   desc=;
  };
  ProgVar @[1] {
   name="epoch_timer";
   var_type=T_Object;
   object_type=TimeUsed;
   object_val=.projects[0].programs.gp[0][2].objs[0]$2$;
   objs_ptr=1;
   desc=;
  };
 };
 functions {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc="initialize trial counter: note also needs to do this in regular running program";
   flags=PEF_NONE;
   network_var=.projects[0].programs.gp[0][2].args[0]$3$;
   local_ctr_var=.projects[0].programs.gp[0][2].vars[0]$4$;
   counter=Network::trial;
  };
 };
 prog_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc="initialize trial counter";
   flags=PEF_NONE;
   network_var=$3$;
   local_ctr_var=$4$;
   counter=Network::trial;
  };
  ProgramCall @[1] {
   desc="initialize the trial monitor data so trial log only has most recent epoch's worth of data (can turn off to keep all data)";
   flags=PEF_NONE;
   target=.projects[0].programs.gp[0][7]$5$;
   call_init=1;
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     name="network";
     value="network";
    };
   };
  };
  MethodCall @[2] {
   desc=;
   flags=PEF_NONE;
   result_var=NULL;
   obj=.projects[0].programs.gp[0][2].vars[1]$6$;
   method=TimeUsed::StartTimer;
   args{ true;};
{ bool reset_used;   };
  };
  BasicDataLoop @[3] {
   desc=;
   flags=PEF_NONE;
   loop_code {
    name=;
    el_typ=ProgramCall;
    el_def=0;
    UserScript @[0] {
     desc="set trial to list_idx of data loop -- for dmem code this is the correct trial number";
     flags=PEF_NONE;
     user_script="trial = list_idx; network->trial = list_idx;";
    };
    ProgramCall @[1] {
     desc=;
     flags=PEF_NONE;
     target=.projects[0].programs.gp[0][3]$7$;
     call_init=0;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       name="network";
       value="network";
      };
      ProgArg @[1] {
       name="input_data";
       value="input_data";
      };
     };
    };
    IfElse @[2] {
     desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
     flags=PEF_NONE;
     condition="network->Compute_Weights_Test(trial+1)";
     true_code {
      name=;
      el_typ=MethodCall;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=PEF_NONE;
       result_var=NULL;
       obj=.projects[0].programs.gp[0][3].args[0]$8$;
       method=Network::Compute_Weights;
       args{ };
{        };
      };
     };
     false_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
     };
    };
   };
   loop_test="This is not used here";
   data_var=.projects[0].programs.gp[0][2].args[1]$9$;
   order=PERMUTED;
   item_idx_list{ 4;0;1;5;2;3;   };
   dmem_nprocs=1;
   dmem_this_proc=0;
  };
  IfElse @[4] {
   desc="if full batch mode, update only at end of epoch";
   flags=PEF_NONE;
   condition="network->wt_update == Network::BATCH";
   true_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=PEF_NONE;
     result_var=NULL;
     obj=$8$;
     method=Network::Compute_Weights;
     args{ };
{      };
    };
   };
   false_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
  };
  MethodCall @[5] {
   desc=;
   flags=PEF_NONE;
   result_var=NULL;
   obj=$3$;
   method=LeabraNetwork::Compute_EpochStats;
   args{ };
{    };
  };
  MethodCall @[6] {
   desc=;
   flags=PEF_NONE;
   result_var=NULL;
   obj=$6$;
   method=TimeUsed::EndTimer;
   args{ };
{    };
  };
  ProgramCall @[7] {
   desc=;
   flags=PEF_NONE;
   target=.projects[0].programs.gp[0][8]$10$;
   call_init=0;
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     name="network";
     value="network";
    };
   };
  };
 };
};

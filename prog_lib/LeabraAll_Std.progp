// ta_Dump File v3.0 -- code v7.8.4.0 rev8672
Program_Group .projects[0].programs.gp[0] { 
 Program @[0] { 
  ProgObjList @.objs = [0] {
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [2] {
   ProgVar @[0] { };
   ProgVar @[1] { };
  };

  ProgVar_List @.vars = [3] {
   ProgVar @[0] { };
   ProgVar @[1] { };
   ProgVar @[2] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.init_code = [1] {
   NetCounterInit @[0] { };
  };

  ProgEl_List @.prog_code = [4] {
   LocalVars @[0] { 
    ProgVar_List @.local_vars = [1] {
     ProgVar @[0] { };
    };
   };
   AssignExpr @[1] { };
   MemberAssign @[2] { };
   ForLoop @[3] { 
    ProgEl_List @.loop_code = [2] {
     ProgramCall @[0] { 
      ProgArg_List @.prog_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     NetCounterIncr @[1] { };
    };
   };
  };
 };
 Program @[1] { 
  ProgObjList @.objs = [2] {
   RndSeed_List @[0] { 
    taList @.seeds = [25] {
     RndSeed @[0] { };
     RndSeed @[1] { };
     RndSeed @[2] { };
     RndSeed @[3] { };
     RndSeed @[4] { };
     RndSeed @[5] { };
     RndSeed @[6] { };
     RndSeed @[7] { };
     RndSeed @[8] { };
     RndSeed @[9] { };
     RndSeed @[10] { };
     RndSeed @[11] { };
     RndSeed @[12] { };
     RndSeed @[13] { };
     RndSeed @[14] { };
     RndSeed @[15] { };
     RndSeed @[16] { };
     RndSeed @[17] { };
     RndSeed @[18] { };
     RndSeed @[19] { };
     RndSeed @[20] { };
     RndSeed @[21] { };
     RndSeed @[22] { };
     RndSeed @[23] { };
     RndSeed @[24] { };
    };
   };
   RndSeed @[1] { };
  };

  ProgType_List @.types = [1] {
   DynEnumType @[0] { 
    DynEnumItem_List @.enums = [3] {
     DynEnumItem @[0] { };
     DynEnumItem @[1] { };
     DynEnumItem @[2] { };
    };
   };
  };

  ProgVar_List @.args = [3] {
   ProgVar @[0] { };
   ProgVar @[1] { };
   ProgVar @[2] { };
  };

  ProgVar_List @.vars = [12] {
   ProgVar @[0] { };
   ProgVar @[1] { };
   ProgVar @[2] { };
   ProgVar @[3] { };
   ProgVar @[4] { };
   ProgVar @[5] { };
   ProgVar @[6] { };
   ProgVar @[7] { };
   ProgVar @[8] { };
   ProgVar @[9] { };
   ProgVar @[10] { };
   ProgVar @[11] { };
  };

  Function_List @.functions = [1] {
   Function @[0] { 
    ProgVar_List @.args = [0] {
    };

    ProgEl_List @.fun_code = [2] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     Switch @[1] { 
      ProgEl_List @.cases = [3] {
       CaseBlock @[0] { 
	ProgEl_List @.prog_code = [1] {
	 MethodCall @[0] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	};
       };
       CaseBlock @[1] { 
	ProgEl_List @.prog_code = [1] {
	 MethodCall @[0] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	};
       };
       CaseBlock @[2] { 
	ProgEl_List @.prog_code = [1] {
	 MethodCall @[0] { 
	  ProgArg_List @.meth_args = [1] {
	   ProgArg @[0] { };
	  };
	 };
	};
       };
      };
     };
    };
   };
  };

  ProgEl_List @.init_code = [7] {
   AssignExpr @[0] { };
   MethodCall @[1] { 
    ProgArg_List @.meth_args = [1] {
     ProgArg @[0] { };
    };
   };
   AssignExpr @[2] { };
   AssignExpr @[3] { };
   FunctionCall @[4] { 
    ProgArg_List @.fun_args = [0] {
    };
   };
   WtInitPrompt @[5] { 
    ProgEl_List @.yes_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     PrintExpr @[2] { };
    };
   };
   AssignExpr @[6] { };
  };

  ProgEl_List @.prog_code = [10] {
   AssignExpr @[0] { };
   MethodCall @[1] { 
    ProgArg_List @.meth_args = [1] {
     ProgArg @[0] { };
    };
   };
   AssignExpr @[2] { };
   MemberAssign @[3] { };
   FunctionCall @[4] { 
    ProgArg_List @.fun_args = [0] {
    };
   };
   If @[5] { 
    ProgEl_List @.true_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     PrintExpr @[1] { };
    };
   };
   AssignExpr @[6] { };
   WhileLoop @[7] { 
    ProgEl_List @.loop_code = [5] {
     ProgramCall @[0] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     NetCounterIncr @[1] { };
     If @[2] { 
      ProgEl_List @.true_code = [2] {
       VarIncr @[0] { };
       IfBreak @[1] { };
      };
     };
     Else @[3] { 
      ProgEl_List @.else_code = [1] {
       AssignExpr @[0] { };
      };
     };
     If @[4] { 
      ProgEl_List @.true_code = [1] {
       If @[0] { 
	ProgEl_List @.true_code = [1] {
	 ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [1] {
	   ProgArg @[0] { };
	  };
	 };
	};
       };
      };
     };
    };
   };
   If @[8] { 
    ProgEl_List @.true_code = [1] {
     ProgramCall @[0] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   MethodCall @[9] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
  };
 };
 Program @[2] { 
  ProgObjList @.objs = [0] {
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [2] {
   ProgVar @[0] { };
   ProgVar @[1] { };
  };

  ProgVar_List @.vars = [6] {
   ProgVar @[0] { };
   ProgVar @[1] { };
   ProgVar @[2] { };
   ProgVar @[3] { };
   ProgVar @[4] { };
   ProgVar @[5] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.init_code = [2] {
   NetCounterInit @[0] { };
   AssignExpr @[1] { };
  };

  ProgEl_List @.prog_code = [9] {
   NetCounterInit @[0] { };
   AssignExpr @[1] { };
   MethodCall @[2] { 
    ProgArg_List @.meth_args = [1] {
     ProgArg @[0] { };
    };
   };
   MethodCall @[3] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   NetDataLoop @[4] { 
    ProgEl_List @.loop_code = [2] {
     ProgramCall @[0] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       StopStepPoint @[0] { };
      };
     };
    };
   };
   If @[5] { 
    ProgEl_List @.true_code = [1] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   MethodCall @[6] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   MethodCall @[7] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   ProgramCall @[8] { 
    ProgArg_List @.prog_args = [1] {
     ProgArg @[0] { };
    };
   };
  };
 };
 Program @[3] { 
  ProgObjList @.objs = [0] {
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [2] {
   ProgVar @[0] { };
   ProgVar @[1] { };
  };

  ProgVar_List @.vars = [1] {
   ProgVar @[0] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.init_code = [0] {
  };

  ProgEl_List @.prog_code = [10] {
   LocalVars @[0] { 
    ProgVar_List @.local_vars = [1] {
     ProgVar @[0] { };
    };
   };
   If @[1] { 
    ProgEl_List @.true_code = [1] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   MethodCall @[2] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   Comment @[3] { };
   MethodCall @[4] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   ProgramCall @[5] { 
    ProgArg_List @.prog_args = [2] {
     ProgArg @[0] { };
     ProgArg @[1] { };
    };
   };
   ForLoop @[6] { 
    ProgEl_List @.loop_code = [1] {
     ProgramCall @[0] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   MethodCall @[7] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   ProgramCall @[8] { 
    ProgArg_List @.prog_args = [1] {
     ProgArg @[0] { };
    };
   };
   NetUpdateView @[9] { };
  };
 };
 Program @[4] { 
  ProgObjList @.objs = [0] {
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [2] {
   ProgVar @[0] { };
   ProgVar @[1] { };
  };

  ProgVar_List @.vars = [2] {
   ProgVar @[0] { };
   ProgVar @[1] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.init_code = [1] {
   NetCounterInit @[0] { };
  };

  ProgEl_List @.prog_code = [10] {
   LocalVars @[0] { 
    ProgVar_List @.local_vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };
   };
   Comment @[1] { };
   MethodCall @[2] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   ProgramCall @[3] { 
    ProgArg_List @.prog_args = [2] {
     ProgArg @[0] { };
     ProgArg @[1] { };
    };
   };
   MethodCall @[4] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   MethodCall @[5] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   ForLoop @[6] { 
    ProgEl_List @.loop_code = [2] {
     ProgramCall @[0] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[1] { };
    };
   };
   MethodCall @[7] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   MethodCall @[8] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   NetUpdateView @[9] { };
  };
 };
 Program @[5] { 
  ProgObjList @.objs = [0] {
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [1] {
   ProgVar @[0] { };
  };

  ProgVar_List @.vars = [1] {
   ProgVar @[0] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.init_code = [0] {
  };

  ProgEl_List @.prog_code = [2] {
   MethodCall @[0] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   NetUpdateView @[1] { };
  };
 };
 Program @[6] { 
  ProgObjList @.objs = [1] {
   LayerWriter @[0] { 
    LayerDataEl_List @.layer_data = [3] {
     LayerWriterEl @[0] { };
     LayerWriterEl @[1] { };
     LayerWriterEl @[2] { };
    };
   };
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [2] {
   ProgVar @[0] { };
   ProgVar @[1] { };
  };

  ProgVar_List @.vars = [1] {
   ProgVar @[0] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.init_code = [3] {
   MethodCall @[0] { 
    ProgArg_List @.meth_args = [2] {
     ProgArg @[0] { };
     ProgArg @[1] { };
    };
   };
   MethodCall @[1] { 
    ProgArg_List @.meth_args = [1] {
     ProgArg @[0] { };
    };
   };
   MethodCall @[2] { 
    ProgArg_List @.meth_args = [1] {
     ProgArg @[0] { };
    };
   };
  };

  ProgEl_List @.prog_code = [2] {
   MethodCall @[0] { 
    ProgArg_List @.meth_args = [2] {
     ProgArg @[0] { };
     ProgArg @[1] { };
    };
   };
   MethodCall @[1] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
  };
 };
 Program @[7] { 
  ProgObjList @.objs = [1] {
   NetMonitor @[0] { 
    NetMonItem_List @.items = [25] {
     NetMonItem @[0] { };
     NetMonItem @[1] { };
     NetMonItem @[2] { };
     NetMonItem @[3] { };
     NetMonItem @[4] { };
     NetMonItem @[5] { };
     NetMonItem @[6] { };
     NetMonItem @[7] { };
     NetMonItem @[8] { };
     NetMonItem @[9] { };
     NetMonItem @[10] { };
     NetMonItem @[11] { };
     NetMonItem @[12] { };
     NetMonItem @[13] { };
     NetMonItem @[14] { };
     NetMonItem @[15] { };
     NetMonItem @[16] { };
     NetMonItem @[17] { };
     NetMonItem @[18] { };
     NetMonItem @[19] { };
     NetMonItem @[20] { };
     NetMonItem @[21] { };
     NetMonItem @[22] { };
     NetMonItem @[23] { };
     NetMonItem @[24] { };
    };
   };
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [1] {
   ProgVar @[0] { };
  };

  ProgVar_List @.vars = [2] {
   ProgVar @[0] { };
   ProgVar @[1] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.init_code = [3] {
   MethodCall @[0] { 
    ProgArg_List @.meth_args = [2] {
     ProgArg @[0] { };
     ProgArg @[1] { };
    };
   };
   MethodCall @[1] { 
    ProgArg_List @.meth_args = [1] {
     ProgArg @[0] { };
    };
   };
   MethodCall @[2] { 
    ProgArg_List @.meth_args = [1] {
     ProgArg @[0] { };
    };
   };
  };

  ProgEl_List @.prog_code = [4] {
   MethodCall @[0] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   MethodCall @[1] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   MethodCall @[2] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   MethodCall @[3] { 
    ProgArg_List @.meth_args = [2] {
     ProgArg @[0] { };
     ProgArg @[1] { };
    };
   };
  };
 };
 Program @[8] { 
  ProgObjList @.objs = [1] {
   NetMonitor @[0] { 
    NetMonItem_List @.items = [30] {
     NetMonItem @[0] { };
     NetMonItem @[1] { };
     NetMonItem @[2] { };
     NetMonItem @[3] { };
     NetMonItem @[4] { };
     NetMonItem @[5] { };
     NetMonItem @[6] { };
     NetMonItem @[7] { };
     NetMonItem @[8] { };
     NetMonItem @[9] { };
     NetMonItem @[10] { };
     NetMonItem @[11] { };
     NetMonItem @[12] { };
     NetMonItem @[13] { };
     NetMonItem @[14] { };
     NetMonItem @[15] { };
     NetMonItem @[16] { };
     NetMonItem @[17] { };
     NetMonItem @[18] { };
     NetMonItem @[19] { };
     NetMonItem @[20] { };
     NetMonItem @[21] { };
     NetMonItem @[22] { };
     NetMonItem @[23] { };
     NetMonItem @[24] { };
     NetMonItem @[25] { };
     NetMonItem @[26] { };
     NetMonItem @[27] { };
     NetMonItem @[28] { };
     NetMonItem @[29] { };
    };
   };
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [1] {
   ProgVar @[0] { };
  };

  ProgVar_List @.vars = [3] {
   ProgVar @[0] { };
   ProgVar @[1] { };
   ProgVar @[2] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.init_code = [4] {
   AssignExpr @[0] { };
   MethodCall @[1] { 
    ProgArg_List @.meth_args = [2] {
     ProgArg @[0] { };
     ProgArg @[1] { };
    };
   };
   MethodCall @[2] { 
    ProgArg_List @.meth_args = [1] {
     ProgArg @[0] { };
    };
   };
   MethodCall @[3] { 
    ProgArg_List @.meth_args = [1] {
     ProgArg @[0] { };
    };
   };
  };

  ProgEl_List @.prog_code = [7] {
   MethodCall @[0] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   MethodCall @[1] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   AssignExpr @[2] { };
   MethodCall @[3] { 
    ProgArg_List @.meth_args = [4] {
     ProgArg @[0] { };
     ProgArg @[1] { };
     ProgArg @[2] { };
     ProgArg @[3] { };
    };
   };
   MethodCall @[4] { 
    ProgArg_List @.meth_args = [4] {
     ProgArg @[0] { };
     ProgArg @[1] { };
     ProgArg @[2] { };
     ProgArg @[3] { };
    };
   };
   MethodCall @[5] { 
    ProgArg_List @.meth_args = [0] {
    };
   };
   Comment @[6] { };
  };
 };
 Program @[9] { 
  ProgObjList @.objs = [0] {
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [1] {
   ProgVar @[0] { };
  };

  ProgVar_List @.vars = [6] {
   ProgVar @[0] { };
   ProgVar @[1] { };
   ProgVar @[2] { };
   ProgVar @[3] { };
   ProgVar @[4] { };
   ProgVar @[5] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.init_code = [0] {
  };

  ProgEl_List @.prog_code = [6] {
   IfReturn @[0] { };
   MiscCall @[1] { 
    ProgArg_List @.meth_args = [2] {
     ProgArg @[0] { };
     ProgArg @[1] { };
    };
   };
   MiscCall @[2] { 
    ProgArg_List @.meth_args = [2] {
     ProgArg @[0] { };
     ProgArg @[1] { };
    };
   };
   AssignExpr @[3] { };
   MethodCall @[4] { 
    ProgArg_List @.meth_args = [4] {
     ProgArg @[0] { };
     ProgArg @[1] { };
     ProgArg @[2] { };
     ProgArg @[3] { };
    };
   };
   MethodCall @[5] { 
    ProgArg_List @.meth_args = [2] {
     ProgArg @[0] { };
     ProgArg @[1] { };
    };
   };
  };
 };
};
Program_Group .projects[0].programs.gp[0] {
 name="LeabraAll_Std";
 el_typ=Program;
 el_def=0;
 tags="Leabra, Std, All";
 desc="The full set of programs for training a standard Leabra network";
 debug_mode=0;
 Program @[0] {
  name="LeabraBatch";
  short_nm="Batch";
  tags="Leabra, Std";
  desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
  flags=0;
  stop_step_cond {
   expr=;
  };
  objs {
   name="objs";
   el_typ=taNBase;
   el_def=0;
  };
  types {
   name="types";
   el_typ=DynEnumType;
   el_def=0;
  };
  args {
   name="args";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=LeabraNetwork;
    object_val=.projects[0].networks[0]$$<LeabraNetwork,Network_0>;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc="network to operate on -- updates batch counter on network and passes it to train program";
    init_from=NULL;
   };
   ProgVar @[1] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=.projects[0].data.gp[0][0]$$<DataTable,StdInputData>;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc="datatable with training patterns -- not used by this program, but passed to train program";
    init_from=NULL;
   };
  };
  vars {
   name="vars";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="batch";
    var_type=T_Int;
    int_val=0;
    objs_ptr=0;
    flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="batch counter";
    init_from=NULL;
   };
   ProgVar @[1] {
    name="batch_start";
    var_type=T_Int;
    int_val=0;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="batch number to start on";
    init_from=NULL;
   };
   ProgVar @[2] {
    name="n_batches";
    var_type=T_Int;
    int_val=10;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="number of batches to run";
    init_from=NULL;
   };
  };
  functions {
   name="functions";
   el_typ=Function;
   el_def=0;
  };
  init_code {
   name="init_code";
   el_typ=ProgCode;
   el_def=0;
   NetCounterInit @[0] {
    desc="initializes local batch counter and batch field on network";
    flags=0;
    orig_prog_code=;
    network_var=.projects[0].programs.gp[0][0].args[0]$$;
    local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$$;
    counter=Network::batch;
    update_after=0;
   };
  };
  prog_code {
   name="prog_code";
   el_typ=ProgCode;
   el_def=0;
   LocalVars @[0] {
    desc=;
    flags=0;
    orig_prog_code=;
    local_vars {
     name="local_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="i";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
   };
   AssignExpr @[1] {
    desc="start at the start";
    flags=CAN_REVERT_TO_CODE;
    orig_prog_code="batch = batch_start";
    result_var=$.projects[0].programs.gp[0][0].vars[0]$;
    expr {
     expr="batch_start";
    };
   };
   MemberAssign @[2] {
    desc="update network";
    flags=0;
    orig_prog_code=;
    obj=$.projects[0].programs.gp[0][0].args[0]$;
    path="batch";
    expr {
     expr="batch";
    };
    update_after=0;
   };
   ForLoop @[3] {
    desc="main loop over training runs";
    flags=0;
    orig_prog_code="for(i=0; i<n_batches; i++)";
    loop_code {
     name="loop_code";
     el_typ=ProgCode;
     el_def=0;
     ProgramCall @[0] {
      desc="run the training program -- sets the network and input_data args";
      flags=0;
      orig_prog_code=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[2] {
	arg_type=bool;
	type="bool";
	name="no_prompts";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      target=.projects[0].programs.gp[0][1]$$;
      targ_ld_init="*LeabraTrain*";
     };
     NetCounterIncr @[1] {
      desc="increment the local batch counter and copy to network";
      flags=0;
      orig_prog_code=;
      network_var=$.projects[0].programs.gp[0][0].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][0].vars[0]$;
      counter=Network::batch;
      update_after=0;
     };
    };
    init {
     expr="i=0";
    };
    test {
     expr="i<n_batches";
    };
    iter {
     expr="i++";
    };
   };
  };
  step_prog=NULL;
  step_n=1;
 };
 Program @[1] {
  name="LeabraTrain";
  short_nm="Train";
  tags="Leabra, Train, RndSeedList";
  desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task.  Also has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
  flags=0;
  stop_step_cond {
   expr=;
  };
  objs {
   name="objs";
   el_typ=RndSeed;
   el_def=0;
   RndSeed_List @[0] {
    name="rnd_seeds";
    seeds {
     name="seeds";
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="RndSeed_1";
      rnd_seed=2878175685;
     };
     RndSeed @[1] {
      name="RndSeed_2";
      rnd_seed=2878175686;
     };
     RndSeed @[2] {
      name="RndSeed_3";
      rnd_seed=2878175687;
     };
     RndSeed @[3] {
      name="RndSeed_4";
      rnd_seed=2878175688;
     };
     RndSeed @[4] {
      name="RndSeed_5";
      rnd_seed=2878175689;
     };
     RndSeed @[5] {
      name="RndSeed_6";
      rnd_seed=2878175690;
     };
     RndSeed @[6] {
      name="RndSeed_7";
      rnd_seed=2878175691;
     };
     RndSeed @[7] {
      name="RndSeed_8";
      rnd_seed=2878175692;
     };
     RndSeed @[8] {
      name="RndSeed_9";
      rnd_seed=2878175693;
     };
     RndSeed @[9] {
      name="RndSeed_10";
      rnd_seed=2878175694;
     };
     RndSeed @[10] {
      name="RndSeed_11";
      rnd_seed=2878175695;
     };
     RndSeed @[11] {
      name="RndSeed_12";
      rnd_seed=2878175696;
     };
     RndSeed @[12] {
      name="RndSeed_13";
      rnd_seed=2878175697;
     };
     RndSeed @[13] {
      name="RndSeed_14";
      rnd_seed=2878175698;
     };
     RndSeed @[14] {
      name="RndSeed_15";
      rnd_seed=2878175699;
     };
     RndSeed @[15] {
      name="RndSeed_16";
      rnd_seed=2878175700;
     };
     RndSeed @[16] {
      name="RndSeed_17";
      rnd_seed=2878175701;
     };
     RndSeed @[17] {
      name="RndSeed_18";
      rnd_seed=2878175702;
     };
     RndSeed @[18] {
      name="RndSeed_19";
      rnd_seed=2878175703;
     };
     RndSeed @[19] {
      name="RndSeed_20";
      rnd_seed=2878175704;
     };
     RndSeed @[20] {
      name="RndSeed_21";
      rnd_seed=2878175705;
     };
     RndSeed @[21] {
      name="RndSeed_22";
      rnd_seed=2878175706;
     };
     RndSeed @[22] {
      name="RndSeed_23";
      rnd_seed=2878175707;
     };
     RndSeed @[23] {
      name="RndSeed_24";
      rnd_seed=2878175708;
     };
     RndSeed @[24] {
      name="RndSeed_25";
      rnd_seed=2878175709;
     };
    };
   };
   RndSeed @[1] {
    name="rnd_seed";
    rnd_seed=1208639044;
   };
  };
  types {
   name="types";
   el_typ=DynEnumType;
   el_def=0;
   DynEnumType @[0] {
    name="RndInitType";
    desc=;
    enums {
     name=;
     el_typ=DynEnumItem;
     el_def=0;
     DynEnumItem @[0] {
      name="OLD_SEED";
      value=0;
      desc="use stored random seed value (recreates same sequence every time)";
     };
     DynEnumItem @[1] {
      name="NEW_SEED";
      value=1;
      desc="generate new random seed (new sequence of random numbers)";
     };
     DynEnumItem @[2] {
      name="BATCH_SEEDS";
      value=2;
      desc="use a fixed list of random seeds with the current batch number selecting the seed to use -- provides a consistent set of initial conditions for each batch regardless..";
     };
    };
    bits=0;
   };
  };
  args {
   name="args";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=LeabraNetwork;
    object_val=$.projects[0].networks[0]$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc=;
    init_from=NULL;
   };
   ProgVar @[1] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=$.projects[0].data.gp[0][0]$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc=;
    init_from=NULL;
   };
   ProgVar @[2] {
    name="no_prompts";
    var_type=T_Bool;
    bool_val=0;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
    init_from=NULL;
   };
  };
  vars {
   name="vars";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="max_epoch";
    var_type=T_Int;
    int_val=500;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc=;
    init_from=NULL;
   };
   ProgVar @[1] {
    name="epoch";
    var_type=T_Int;
    int_val=0;
    objs_ptr=0;
    flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc=;
    init_from=NULL;
   };
   ProgVar @[2] {
    name="train_mode";
    var_type=T_HardEnum;
    int_val=1;
    hard_enum_type=Network::TrainMode;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc=;
    init_from=NULL;
   };
   ProgVar @[3] {
    name="rnd_init";
    var_type=T_DynEnum;
    dyn_enum_val {
     enum_type=.projects[0].programs.gp[0][1].types[0]$$;
     value=2;
    };
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="how to initialize the random numbers when the Init button is pressed";
    init_from=NULL;
   };
   ProgVar @[4] {
    name="err_stopcrit";
    var_type=T_Real;
    real_val=0;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="stopping criterion for training, in terms of count of trials with errors in the epoch (nework cnt_err)";
    init_from=NULL;
   };
   ProgVar @[5] {
    name="n_under_thr";
    var_type=T_Int;
    int_val=2;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="number of times network needs to be under stopcrit threshold to actually stop";
    init_from=NULL;
   };
   ProgVar @[6] {
    name="save_final_wts";
    var_type=T_Bool;
    bool_val=0;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="save the network's weights at the end of training?  ";
    init_from=NULL;
   };
   ProgVar @[7] {
    name="save_wts_interval";
    var_type=T_Int;
    int_val=-1;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="save the weights every this many epochs, if number is >= 1 (otherwise do not save weights)";
    init_from=NULL;
   };
   ProgVar @[8] {
    name="n_under_cnt";
    var_type=T_Int;
    int_val=0;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="current under threshold counter";
    init_from=NULL;
   };
   ProgVar @[9] {
    name="rnd_seeds";
    var_type=T_Object;
    object_type=RndSeed_List;
    object_val=.projects[0].programs.gp[0][1].objs[0]$$;
    objs_ptr=1;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc=;
    init_from=NULL;
   };
   ProgVar @[10] {
    name="train_timer";
    var_type=T_Object;
    object_type=TimeUsed;
    object_val=.projects[0].networks[0].train_time$$<TimeUsed,train_time>;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc=;
    init_from=NULL;
   };
   ProgVar @[11] {
    name="rnd_seed";
    var_type=T_Object;
    object_type=RndSeed;
    object_val=.projects[0].programs.gp[0][1].objs[1]$$;
    objs_ptr=1;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc=;
    init_from=NULL;
   };
  };
  functions {
   name="functions";
   el_typ=Function;
   el_def=0;
   Function @[0] {
    desc=;
    flags=0;
    orig_prog_code=;
    name="GetRandomSeed";
    return_type=T_Int;
    object_type=taOBase;
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    fun_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      local_vars {
       name=;
       el_typ=ProgVar;
       el_def=0;
      };
     };
     Switch @[1] {
      desc=;
      flags=0;
      orig_prog_code=;
      switch_var=.projects[0].programs.gp[0][1].vars[3]$$;
      cases {
       name=;
       el_typ=CaseBlock;
       el_def=0;
       CaseBlock @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	prog_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 MethodCall @[0] {
	  desc="restore previous random seed (all runs produce same results) -- click on rnd_seed object to generate a new seed to use for this if you want";
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=.projects[0].programs.gp[0][1].vars[11]$$;
	  method=RndSeed::OldSeed;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void OldSeed()";
	  meth_desc=" restore current seed to random num generator";
	 };
	};
	case_val {
	 expr="OLD_SEED";
	};
	is_default=0;
       };
       CaseBlock @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	prog_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 MethodCall @[0] {
	  desc="new random numbers each time";
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=$.projects[0].programs.gp[0][1].vars[11]$;
	  method=RndSeed::NewSeed;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void NewSeed()";
	  meth_desc=" set the seed to a new random value (based on time and process id)";
	 };
	};
	case_val {
	 expr="NEW_SEED";
	};
	is_default=0;
       };
       CaseBlock @[2] {
	desc=;
	flags=0;
	orig_prog_code=;
	prog_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 MethodCall @[0] {
	  desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	  flags=0;
	  orig_prog_code=;
	  result_var=NULL;
	  obj=.projects[0].programs.gp[0][1].vars[9]$$;
	  method=RndSeed_List::UseSeed;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=int;
	    type="int";
	    name="idx";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="network.batch % rnd_seeds.seeds.size";
	    };
	   };
	  };
	  meth_sig="void UseSeed(int idx)";
	  meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
	 };
	};
	case_val {
	 expr="BATCH_SEEDS";
	};
	is_default=0;
       };
      };
     };
    };
   };
  };
  init_code {
   name="init_code";
   el_typ=ProgCode;
   el_def=0;
   AssignExpr @[0] {
    desc=;
    flags=0;
    orig_prog_code=;
    result_var=.projects[0].programs.gp[0][1].args[2]$$;
    expr {
     expr="false";
    };
   };
   MethodCall @[1] {
    desc=;
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=.projects[0].programs.gp[0][1].args[0]$$;
    method=taBase::CheckConfig;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="quiet";
      required=0;
      def_val="false";
      prev_expr=;
      expr {
       expr="false";
      };
     };
    };
    meth_sig="bool CheckConfig(bool quiet = false)";
    meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
   };
   AssignExpr @[2] {
    desc=;
    flags=0;
    orig_prog_code=;
    result_var=.projects[0].programs.gp[0][1].vars[10]$$;
    expr {
     expr="network.train_time";
    };
   };
   AssignExpr @[3] {
    desc=;
    flags=0;
    orig_prog_code=;
    result_var=.projects[0].programs.gp[0][1].vars[8]$$;
    expr {
     expr="0";
    };
   };
   FunctionCall @[4] {
    desc="initialize random seed";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    fun=.projects[0].programs.gp[0][1].functions[0]$$;
    fun_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   WtInitPrompt @[5] {
    desc="don't initialize weights without checking";
    flags=0;
    orig_prog_code=;
    prompt="Do you want to Initialize Network Weights";
    yes_label="Yes";
    no_label="No";
    yes_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="need to have built network by now in any case, so do it here to make double sure -- prevents errs when loading project with startup program";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].args[0]$;
      method=Network::Build;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Build()";
      meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
     };
     MethodCall @[1] {
      desc="initialize network weights: could also load pre-set weights or something else here";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].args[0]$;
      method=Network::Init_Weights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Weights()";
      meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
     };
     PrintExpr @[2] {
      desc=;
      flags=0;
      orig_prog_code=;
      expr {
       expr="network.name << \" Weights Initialized\"";
      };
      debug=0;
     };
    };
   };
   AssignExpr @[6] {
    desc="grab the official network epoch counter: will be initialized if needed by now";
    flags=0;
    orig_prog_code=;
    result_var=.projects[0].programs.gp[0][1].vars[1]$$;
    expr {
     expr="network.epoch";
    };
   };
  };
  prog_code {
   name="prog_code";
   el_typ=ProgCode;
   el_def=0;
   AssignExpr @[0] {
    desc=;
    flags=0;
    orig_prog_code=;
    result_var=$.projects[0].programs.gp[0][1].vars[10]$;
    expr {
     expr="network.train_time";
    };
   };
   MethodCall @[1] {
    desc=;
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][1].vars[10]$;
    method=TimeUsed::StartTimer;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="reset_used";
      required=0;
      def_val="true";
      prev_expr=;
      expr {
       expr="true";
      };
     };
    };
    meth_sig="void StartTimer(bool reset_used = true)";
    meth_desc=" record the current time as the starting time, and optionally reset the time used information";
   };
   AssignExpr @[2] {
    desc=;
    flags=0;
    orig_prog_code=;
    result_var=$.projects[0].programs.gp[0][1].vars[8]$;
    expr {
     expr="0";
    };
   };
   MemberAssign @[3] {
    desc="set network's training mode to our local value";
    flags=0;
    orig_prog_code=;
    obj=$.projects[0].programs.gp[0][1].args[0]$;
    path="train_mode";
    expr {
     expr="train_mode";
    };
    update_after=0;
   };
   FunctionCall @[4] {
    desc="initialize random seed";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    fun=$.projects[0].programs.gp[0][1].functions[0]$;
    fun_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   If @[5] {
    desc=;
    flags=0;
    orig_prog_code=;
    cond {
     expr="no_prompts";
    };
    true_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="initialize network weights: could also load pre-set weights or something else here";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].args[0]$;
      method=Network::Init_Weights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Weights()";
      meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
     };
     PrintExpr @[1] {
      desc=;
      flags=0;
      orig_prog_code=;
      expr {
       expr="network.name << \" Weights Initialized\"";
      };
      debug=0;
     };
    };
   };
   AssignExpr @[6] {
    desc="grab the official network epoch counter: will be initialized if needed by now";
    flags=0;
    orig_prog_code=;
    result_var=$.projects[0].programs.gp[0][1].vars[1]$;
    expr {
     expr="network.epoch";
    };
   };
   WhileLoop @[7] {
    desc=;
    flags=0;
    orig_prog_code=;
    loop_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     ProgramCall @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects[0].programs.gp[0][2]$$;
      targ_ld_init="*LeabraEpoch*";
     };
     NetCounterIncr @[1] {
      desc="increment the epoch counter";
      flags=0;
      orig_prog_code=;
      network_var=$.projects[0].programs.gp[0][1].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][1].vars[1]$;
      counter=Network::epoch;
      update_after=0;
     };
     If @[2] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.cnt_err <= err_stopcrit";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       VarIncr @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	var=$.projects[0].programs.gp[0][1].vars[8]$;
	expr {
	 expr="1";
	};
       };
       IfBreak @[1] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	flags=0;
	orig_prog_code=;
	cond {
	 expr="n_under_cnt >=  n_under_thr";
	};
       };
      };
     };
     Else @[3] {
      desc=;
      flags=0;
      orig_prog_code=;
      else_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	result_var=$.projects[0].programs.gp[0][1].vars[8]$;
	expr {
	 expr="0";
	};
       };
      };
     };
     If @[4] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="save_wts_interval >= 1";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       If @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	cond {
	 expr="epoch % save_wts_interval == 0";
	};
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 ProgramCall @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=Network;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="network";
	    };
	   };
	  };
	  target=.projects[0].programs.gp[0][9]$$;
	  targ_ld_init="*SaveWeights*";
	 };
	};
       };
      };
     };
    };
    test {
     expr="epoch < max_epoch";
    };
   };
   If @[8] {
    desc=;
    flags=0;
    orig_prog_code=;
    cond {
     expr="save_final_wts";
    };
    true_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     ProgramCall @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=$.projects[0].programs.gp[0][9]$;
      targ_ld_init="*SaveWeights*";
     };
    };
   };
   MethodCall @[9] {
    desc=;
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][1].vars[10]$;
    method=TimeUsed::EndTimer;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void EndTimer()";
    meth_desc=" record the current time as the ending time, and compute difference as the time used";
   };
  };
  step_prog=.projects[0].programs.gp[0][4]$$;
  step_n=1;
 };
 Program @[2] {
  name="LeabraEpoch";
  short_nm="Epoch";
  tags="Leabra, Std";
  desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
  flags=2;
  stop_step_cond {
   expr=;
  };
  objs {
   name="objs";
   el_typ=taNBase;
   el_def=0;
  };
  types {
   name="types";
   el_typ=DynEnumType;
   el_def=0;
  };
  args {
   name="args";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=LeabraNetwork;
    object_val=$.projects[0].networks[0]$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc="network to operate on";
    init_from=NULL;
   };
   ProgVar @[1] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=$.projects[0].data.gp[0][0]$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc="table of patterns to present to the network, one row at a time";
    init_from=NULL;
   };
  };
  vars {
   name="vars";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="data_loop_order";
    var_type=T_HardEnum;
    int_val=1;
    hard_enum_type=DataLoop::Order;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
    init_from=NULL;
   };
   ProgVar @[1] {
    name="trial";
    var_type=T_Int;
    int_val=0;
    objs_ptr=0;
    flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="current trial (event) within the epoch -- increments automatically";
    init_from=NULL;
   };
   ProgVar @[2] {
    name="trial_mon_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=.projects[0].data.gp[1][0]$$<DataTable,TrialOutputData>;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
    init_from=NULL;
   };
   ProgVar @[3] {
    name="step_on_err";
    var_type=T_Bool;
    bool_val=0;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend";
    init_from=NULL;
   };
   ProgVar @[4] {
    name="epoch_timer";
    var_type=T_Object;
    object_type=TimeUsed;
    object_val=.projects[0].networks[0].epoch_time$$<TimeUsed,epoch_time>;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
    init_from=NULL;
   };
   ProgVar @[5] {
    name="data_loop_index";
    var_type=T_Int;
    int_val=6;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
    init_from=NULL;
   };
  };
  functions {
   name="functions";
   el_typ=Function;
   el_def=0;
  };
  init_code {
   name="init_code";
   el_typ=ProgCode;
   el_def=0;
   NetCounterInit @[0] {
    desc="initialize trial counter (local variable and in the network)";
    flags=0;
    orig_prog_code=;
    network_var=.projects[0].programs.gp[0][2].args[0]$$;
    local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$$;
    counter=Network::trial;
    update_after=0;
   };
   AssignExpr @[1] {
    desc="get pointer to epoch timer object on network";
    flags=0;
    orig_prog_code=;
    result_var=.projects[0].programs.gp[0][2].vars[4]$$;
    expr {
     expr="network.epoch_time";
    };
   };
  };
  prog_code {
   name="prog_code";
   el_typ=ProgCode;
   el_def=0;
   NetCounterInit @[0] {
    desc="initialize trial counter (local variable and in the network)";
    flags=0;
    orig_prog_code=;
    network_var=$.projects[0].programs.gp[0][2].args[0]$;
    local_ctr_var=$.projects[0].programs.gp[0][2].vars[1]$;
    counter=Network::trial;
    update_after=0;
   };
   AssignExpr @[1] {
    desc="get pointer to epoch timer object on network";
    flags=0;
    orig_prog_code=;
    result_var=$.projects[0].programs.gp[0][2].vars[4]$;
    expr {
     expr="network.epoch_time";
    };
   };
   MethodCall @[2] {
    desc="start the epoch timer to record computation time per epoch";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][2].vars[4]$;
    method=TimeUsed::StartTimer;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="reset_used";
      required=0;
      def_val="true";
      prev_expr=;
      expr {
       expr="true";
      };
     };
    };
    meth_sig="void StartTimer(bool reset_used = true)";
    meth_desc=" record the current time as the starting time, and optionally reset the time used information";
   };
   MethodCall @[3] {
    desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=.projects[0].programs.gp[0][2].vars[2]$$;
    method=DataTable::ResetData;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void ResetData()";
    meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
   };
   NetDataLoop @[4] {
    desc="iterates over the events/rows of input_data, according to data_loop_order variable";
    flags=0;
    orig_prog_code=;
    loop_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     ProgramCall @[0] {
      desc="run the trial program, passing network and input_data";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects[0].programs.gp[0][3]$$;
      targ_ld_init="*LeabraTrial*";
     };
     If @[1] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="step_on_err && network.sse > 0.0";
      };
      true_code {
       name="ProgEl_List_100";
       el_typ=ProgCode;
       el_def=0;
       StopStepPoint @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	cond {
	 expr=;
	};
       };
      };
     };
    };
    data_var=.projects[0].programs.gp[0][2].args[1]$$;
    index_var=.projects[0].programs.gp[0][2].vars[5]$$;
    order_var=.projects[0].programs.gp[0][2].vars[0]$$;
    order=PERMUTED;
    update_after=0;
    dmem_nprocs=1;
    dmem_this_proc=0;
    grouped=0;
    group_col 9 0="Group";
    group_index_var=NULL;
    group_order_var=NULL;
    group_order=PERMUTED;
    group_idx_list{     };
   };
   If @[5] {
    desc="if full batch mode, update only at end of epoch";
    flags=0;
    orig_prog_code=;
    cond {
     expr="network.wt_update == Network::BATCH";
    };
    true_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="final update of weights based on accumulated changes";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].args[0]$;
      method=Network::Compute_Weights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_Weights()";
      meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
     };
    };
   };
   MethodCall @[6] {
    desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][2].args[0]$;
    method=LeabraNetwork::Compute_EpochStats;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void Compute_EpochStats()";
    meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
   };
   MethodCall @[7] {
    desc="done with the computation in the epoch -- record time it took";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][2].vars[4]$;
    method=TimeUsed::EndTimer;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void EndTimer()";
    meth_desc=" record the current time as the ending time, and compute difference as the time used";
   };
   ProgramCall @[8] {
    desc="run program that records data from network and possibly other sources about the epoch";
    flags=0;
    orig_prog_code=;
    prog_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=Network;
      type="LeabraNetwork*";
      name="network";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="network";
      };
     };
    };
    target=.projects[0].programs.gp[0][8]$$;
    targ_ld_init="*LeabraEpochMonitor*";
   };
  };
  step_prog=$.projects[0].programs.gp[0][2]$;
  step_n=1;
 };
 Program @[3] {
  name="LeabraTrial";
  short_nm="Trial";
  tags="Leabra, Std";
  desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
  flags=0;
  stop_step_cond {
   expr=;
  };
  objs {
   name="objs";
   el_typ=taNBase;
   el_def=0;
  };
  types {
   name="types";
   el_typ=DynEnumType;
   el_def=0;
  };
  args {
   name="args";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=LeabraNetwork;
    object_val=$.projects[0].networks[0]$;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc="network to operate on -- typically set by higher-level calling programs";
    init_from=NULL;
   };
   ProgVar @[1] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=$.projects[0].data.gp[0][0]$;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc="datatable containing training input/output patterns";
    init_from=NULL;
   };
  };
  vars {
   name="vars";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="update_net_view";
    var_type=T_Bool;
    bool_val=0;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="determines whether to update any network view displays after trial is completed";
    init_from=NULL;
   };
  };
  functions {
   name="functions";
   el_typ=Function;
   el_def=0;
  };
  init_code {
   name="init_code";
   el_typ=ProgCode;
   el_def=0;
  };
  prog_code {
   name="prog_code";
   el_typ=ProgCode;
   el_def=0;
   LocalVars @[0] {
    desc=;
    flags=0;
    orig_prog_code=;
    local_vars {
     name="local_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="qtr";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
   };
   If @[1] {
    desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
    flags=0;
    orig_prog_code=;
    cond {
     expr="network.Compute_Weights_Test(network.trial+1)";
    };
    true_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="update weights -- do this at start instead of end, so that dwt is valid";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][3].args[0]$$;
      method=Network::Compute_Weights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_Weights()";
      meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
     };
    };
   };
   MethodCall @[2] {
    desc="initializes various counters at start of trial";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][3].args[0]$;
    method=LeabraNetwork::Trial_Init;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void Trial_Init()";
    meth_desc=" initialize at start of trial (init specs, Decay state)";
   };
   Comment @[3] {
    desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
    flags=CAN_REVERT_TO_CODE;
    orig_prog_code="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
   };
   MethodCall @[4] {
    desc="resets input data, before getting new external inputs data from apply inputs call";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][3].args[0]$;
    method=Network::Init_InputData;
    meth_args {
     name="meth_args";
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void Init_InputData()";
    meth_desc=" Initializes external and target inputs";
   };
   ProgramCall @[5] {
    desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
    flags=0;
    orig_prog_code=;
    prog_args {
     name="prog_args";
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=Network;
      type="LeabraNetwork*";
      name="network";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="network";
      };
     };
     ProgArg @[1] {
      arg_type=DataTable;
      type="DataTable*";
      name="input_data";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="input_data";
      };
     };
    };
    target=.projects[0].programs.gp[0][6]$$;
    targ_ld_init="*ApplyInputs*";
   };
   ForLoop @[6] {
    desc=;
    flags=0;
    orig_prog_code="for(qtr = 0; qtr < 4; qtr++)";
    loop_code {
     name="loop_code";
     el_typ=ProgCode;
     el_def=0;
     ProgramCall @[0] {
      desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
      flags=0;
      orig_prog_code=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.projects[0].programs.gp[0][4]$;
      targ_ld_init="*LeabraQuarter*";
     };
    };
    init {
     expr="qtr = 0";
    };
    test {
     expr="qtr < 4";
    };
    iter {
     expr="qtr++";
    };
   };
   MethodCall @[7] {
    desc="after the trial is over, do final computations";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][3].args[0]$;
    method=LeabraNetwork::Trial_Final;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void Trial_Final()";
    meth_desc=" do final processing after trial: Compute_AbsRelNetin";
   };
   ProgramCall @[8] {
    desc="records data about the trial-level processing to a datatable for graphing/processing";
    flags=0;
    orig_prog_code=;
    prog_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=Network;
      type="LeabraNetwork*";
      name="network";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="network";
      };
     };
    };
    target=.projects[0].programs.gp[0][7]$$;
    targ_ld_init="*LeabraTrialMonitor*";
   };
   NetUpdateView @[9] {
    desc="update the network view(s) (only if update_net_view is true)";
    flags=0;
    orig_prog_code=;
    network_var=$.projects[0].programs.gp[0][3].args[0]$;
    update_var=.projects[0].programs.gp[0][3].vars[0]$$;
   };
  };
  step_prog=.projects[0].programs.gp[0][5]$$;
  step_n=1;
 };
 Program @[4] {
  name="LeabraQuarter";
  short_nm="Quarter";
  tags="Leabra, Std";
  desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
  flags=0;
  stop_step_cond {
   expr=;
  };
  objs {
   name="objs";
   el_typ=taNBase;
   el_def=0;
  };
  types {
   name="types";
   el_typ=DynEnumType;
   el_def=0;
  };
  args {
   name="args";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=LeabraNetwork;
    object_val=$.projects[0].networks[0]$;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc=;
    init_from=NULL;
   };
   ProgVar @[1] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=$.projects[0].data.gp[0][0]$;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc=;
    init_from=NULL;
   };
  };
  vars {
   name="vars";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="cycle";
    var_type=T_Int;
    int_val=0;
    objs_ptr=0;
    flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="current cycle of settling (local loop counter)";
    init_from=NULL;
   };
   ProgVar @[1] {
    name="update_net_view";
    var_type=T_Bool;
    bool_val=1;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="if true, will update network views at end of settling";
    init_from=NULL;
   };
  };
  functions {
   name="functions";
   el_typ=Function;
   el_def=0;
  };
  init_code {
   name="init_code";
   el_typ=ProgCode;
   el_def=0;
   NetCounterInit @[0] {
    desc="initialize local cycle counter and corresponding counter on network";
    flags=0;
    orig_prog_code=;
    network_var=.projects[0].programs.gp[0][4].args[0]$$;
    local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$$;
    counter=Network::cycle;
    update_after=0;
   };
  };
  prog_code {
   name="prog_code";
   el_typ=ProgCode;
   el_def=0;
   LocalVars @[0] {
    desc=;
    flags=0;
    orig_prog_code=;
    local_vars {
     name="local_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle_max";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="cyc";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
   };
   Comment @[1] {
    desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
    flags=CAN_REVERT_TO_CODE;
    orig_prog_code="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
   };
   MethodCall @[2] {
    desc="resets input data, before getting new external inputs data from apply inputs call";
    flags=OFF;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][4].args[0]$;
    method=Network::Init_InputData;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void Init_InputData()";
    meth_desc=" Initializes external and target inputs";
   };
   ProgramCall @[3] {
    desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
    flags=OFF;
    orig_prog_code=;
    prog_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=Network;
      type="LeabraNetwork*";
      name="network";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="network";
      };
     };
     ProgArg @[1] {
      arg_type=DataTable;
      type="DataTable*";
      name="input_data";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="input_data";
      };
     };
    };
    target=$.projects[0].programs.gp[0][6]$;
    targ_ld_init="*ApplyInputs*";
   };
   MethodCall @[4] {
    desc="initializes various counters at start of settling";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][4].args[0]$;
    method=LeabraNetwork::Quarter_Init;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void Quarter_Init()";
    meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
   };
   MethodCall @[5] {
    desc=;
    flags=CAN_REVERT_TO_CODE;
    orig_prog_code="cycle_max = network.CycleRunMax()";
    result_var=.projects[0].programs.gp[0][4].prog_code[0].local_vars[0]$$;
    obj=$.projects[0].programs.gp[0][4].args[0]$;
    method=LeabraNetwork::CycleRunMax;
    meth_args {
     name="meth_args";
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="int CycleRunMax()";
    meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
   };
   ForLoop @[6] {
    desc="// the main loop over cycles of updating";
    flags=0;
    orig_prog_code="for(cyc=0; cyc<cycle_max; cyc++)";
    loop_code {
     name="loop_code";
     el_typ=ProgCode;
     el_def=0;
     ProgramCall @[0] {
      desc="run the cycle program -- can run multiple cycles at a time due to threading";
      flags=0;
      orig_prog_code=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=$.projects[0].programs.gp[0][5]$;
      targ_ld_init="*LeabraCycle*";
     };
     AssignExpr @[1] {
      desc="grab the updated cycle count";
      flags=CAN_REVERT_TO_CODE;
      orig_prog_code="cycle = network.cycle";
      result_var=$.projects[0].programs.gp[0][4].vars[0]$;
      expr {
       expr="network.cycle";
      };
     };
    };
    init {
     expr="cyc=0";
    };
    test {
     expr="cyc<cycle_max";
    };
    iter {
     expr="cyc++";
    };
   };
   MethodCall @[7] {
    desc="perform final operations at end of settling (storing final activations, etc)";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][4].args[0]$;
    method=LeabraNetwork::Quarter_Final;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void Quarter_Final()";
    meth_desc=" do final processing after each quarter: ";
   };
   MethodCall @[8] {
    desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][4].args[0]$;
    method=LeabraNetwork::Compute_PhaseStats;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void Compute_PhaseStats()";
    meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
   };
   NetUpdateView @[9] {
    desc="update network views, if update_net_view == true";
    flags=0;
    orig_prog_code=;
    network_var=$.projects[0].programs.gp[0][4].args[0]$;
    update_var=.projects[0].programs.gp[0][4].vars[1]$$;
   };
  };
  step_prog=NULL;
  step_n=1;
 };
 Program @[5] {
  name="LeabraCycle";
  short_nm="Cycle";
  tags="Leabra, Std";
  desc="runs one cycle of leabra processing (updating net inputs and activations)";
  flags=0;
  stop_step_cond {
   expr=;
  };
  objs {
   name="objs";
   el_typ=taNBase;
   el_def=0;
  };
  types {
   name="types";
   el_typ=DynEnumType;
   el_def=0;
  };
  args {
   name="args";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=LeabraNetwork;
    object_val=$.projects[0].networks[0]$;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc=;
    init_from=NULL;
   };
  };
  vars {
   name="vars";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="update_net_view";
    var_type=T_Bool;
    bool_val=1;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
    init_from=NULL;
   };
  };
  functions {
   name="functions";
   el_typ=Function;
   el_def=0;
  };
  init_code {
   name="init_code";
   el_typ=ProgCode;
   el_def=0;
  };
  prog_code {
   name="prog_code";
   el_typ=ProgCode;
   el_def=0;
   MethodCall @[0] {
    desc="this does all the standard leabra processing lthreads.n_cycles cycles of activation updating";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=.projects[0].programs.gp[0][5].args[0]$$;
    method=LeabraNetwork::Cycle_Run;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void Cycle_Run()";
    meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
   };
   NetUpdateView @[1] {
    desc="update network views if update_net_view == true";
    flags=0;
    orig_prog_code=;
    network_var=$.projects[0].programs.gp[0][5].args[0]$;
    update_var=.projects[0].programs.gp[0][5].vars[0]$$;
   };
  };
  step_prog=NULL;
  step_n=1;
 };
 Program @[6] {
  name="ApplyInputs";
  short_nm="Inputs";
  tags="Network, InputData, Apply";
  desc="apply the current input data to the network as external input and target values";
  flags=NO_STOP_STEP;
  stop_step_cond {
   expr=;
  };
  objs {
   name="objs";
   el_typ=LayerWriter;
   el_def=0;
   LayerWriter @[0] {
    name="LayerWriter_0";
    data=$.projects[0].data.gp[0][0]$;
    network=$.projects[0].networks[0]$;
    layer_data {
     name="layer_data";
     el_typ=LayerWriterEl;
     el_def=0;
     LayerWriterEl @[0] {
      col_name="Input";
      net_target=LAYER;
      layer_name="Input";
      offset {x=0: y=0: };
      use_layer_type=1;
      quiet=0;
      na_by_range=0;
      ext_flags=EXT;
      noise {name="RandomSpec_7": type=NONE: mean=0: var=0.5: par=1: };
     };
     LayerWriterEl @[1] {
      col_name="Output";
      net_target=LAYER;
      layer_name="Output";
      offset {x=0: y=0: };
      use_layer_type=1;
      quiet=0;
      na_by_range=0;
      ext_flags=TARG;
      noise {name="RandomSpec_8": type=NONE: mean=0: var=0.5: par=1: };
     };
     LayerWriterEl @[2] {
      col_name="Name";
      net_target=TRIAL_NAME;
      layer_name="Name";
      offset {x=0: y=0: };
      use_layer_type=1;
      quiet=0;
      na_by_range=0;
      ext_flags=0;
      noise {name="RandomSpec_9": type=NONE: mean=0: var=0.5: par=1: };
     };
    };
   };
  };
  types {
   name="types";
   el_typ=DynEnumType;
   el_def=0;
  };
  args {
   name="args";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=Network;
    object_val=$.projects[0].networks[0]$;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc="network to apply inputs to -- typically set by calling program";
    init_from=NULL;
   };
   ProgVar @[1] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=$.projects[0].data.gp[0][0]$;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc="input datatable containing input/output patterns";
    init_from=NULL;
   };
  };
  vars {
   name="vars";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="LayerWriter_0";
    var_type=T_Object;
    object_type=LayerWriter;
    object_val=.projects[0].programs.gp[0][6].objs[0]$$;
    objs_ptr=1;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
    init_from=NULL;
   };
  };
  functions {
   name="functions";
   el_typ=Function;
   el_def=0;
  };
  init_code {
   name="init_code";
   el_typ=ProgCode;
   el_def=0;
   MethodCall @[0] {
    desc="sets the datatable and network for the layer writer, so it knows what to write to";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=.projects[0].programs.gp[0][6].vars[0]$$;
    method=LayerWriter::SetDataNetwork;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=DataTable_ptr;
      type="DataTable*";
      name="db";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="input_data";
      };
     };
     ProgArg @[1] {
      arg_type=Network_ptr;
      type="Network*";
      name="net";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="network";
      };
     };
    };
    meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
    meth_desc=" set the data table and network pointers -- convenience function for programs ";
   };
   MethodCall @[1] {
    desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][6].vars[0]$;
    method=LayerWriter::AutoConfig;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="remove_unused";
      required=0;
      def_val="true";
      prev_expr=;
      expr {
       expr=;
      };
     };
    };
    meth_sig="void AutoConfig(bool remove_unused = true)";
    meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
   };
   MethodCall @[2] {
    desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][6].vars[0]$;
    method=taList_impl::CheckConfig;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="quiet";
      required=0;
      def_val="false";
      prev_expr=;
      expr {
       expr="false";
      };
     };
    };
    meth_sig="bool CheckConfig(bool quiet = false)";
    meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
   };
  };
  prog_code {
   name="prog_code";
   el_typ=ProgCode;
   el_def=0;
   MethodCall @[0] {
    desc="sets the datatable and network for the layer writer, so it knows what to write to";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][6].vars[0]$;
    method=LayerWriter::SetDataNetwork;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=DataTable_ptr;
      type="DataTable*";
      name="db";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="input_data";
      };
     };
     ProgArg @[1] {
      arg_type=Network_ptr;
      type="Network*";
      name="net";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="network";
      };
     };
    };
    meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
    meth_desc=" set the data table and network pointers -- convenience function for programs ";
   };
   MethodCall @[1] {
    desc="apply inputs to the network!  layer writer has all the key specs";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][6].vars[0]$;
    method=LayerWriter::ApplyInputData;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="bool ApplyInputData()";
    meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
   };
  };
  step_prog=NULL;
  step_n=1;
 };
 Program @[7] {
  name="LeabraTrialMonitor";
  short_nm="TrialMon";
  tags="Leabra, Std, Monitor";
  desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
  flags=NO_STOP_STEP;
  stop_step_cond {
   expr=;
  };
  objs {
   name="objs";
   el_typ=NetMonitor;
   el_def=0;
   NetMonitor @[0] {
    name="trial_netmon";
    items {
     name="items";
     el_typ=NetMonItem;
     el_def=0;
     NetMonItem @[0] {
      name="batch";
      monitor=.projects[0].programs.gp[0][7].objs[0]$$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="batch";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[1] {
      name="epoch";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="epoch";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[2] {
      name="train_mode";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="train_mode";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[3] {
      name="group";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="group";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[4] {
      name="trial";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="trial";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[5] {
      name="tick";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="tick";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[6] {
      name="time";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="time";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[7] {
      name="trial_name";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="trial_name";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[8] {
      name="group_name";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="group_name";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[9] {
      name="output_name";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="minus_output_name";
      var_label=;
      name_style=MY_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[10] {
      name="rt_cycles";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="rt_cycles";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[11] {
      name="sse";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="sse";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[12] {
      name="norm_err";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="norm_err";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[13] {
      name="cos_err";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="cos_err";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[14] {
      name="ext_rew";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="ext_rew";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[15] {
      name="lay_sse";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.sse";
      var_label="lay_sse";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[16] {
      name="lay_norm_err";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.norm_err";
      var_label="lay_norm_err";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[17] {
      name="lay_cos_err";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.cos_err";
      var_label="lay_cos_err";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[18] {
      name="lay_net_sd";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.net_sd";
      var_label="lay_net_sd";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[19] {
      name="net_cos_diff";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="cos_diff";
      var_label="net_cos_diff";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[20] {
      name="net_trial_cos_diff";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="trial_cos_diff";
      var_label="net_trial_cos_diff";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[21] {
      name="net_avg_act_diff";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="avg_act_diff";
      var_label="net_avg_act_diff";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[22] {
      name="cos_diff";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.cos_diff";
      var_label="cos_diff";
      name_style=AUTO_NAME;
      max_name_len=8;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[23] {
      name="trial_cos_diff";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.trial_cos_diff";
      var_label="trial_cos_diff";
      name_style=AUTO_NAME;
      max_name_len=8;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[24] {
      name="avg_act_diff";
      monitor=$.projects[0].programs.gp[0][7].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.avg_act_diff";
      var_label="avg_act_diff";
      name_style=AUTO_NAME;
      max_name_len=8;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
    };
    network=$.projects[0].networks[0]$;
    data=$.projects[0].data.gp[1][0]$;
    rmv_orphan_cols=1;
   };
  };
  types {
   name="types";
   el_typ=DynEnumType;
   el_def=0;
  };
  args {
   name="args";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=Network;
    object_val=$.projects[0].networks[0]$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc="network to record data from";
    init_from=NULL;
   };
  };
  vars {
   name="vars";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="trial_mon_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=$.projects[0].data.gp[1][0]$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="data table to record trial-level data to (this program writes new data to this table!)";
    init_from=NULL;
   };
   ProgVar @[1] {
    name="trial_netmon";
    var_type=T_Object;
    object_type=NetMonitor;
    object_val=$.projects[0].programs.gp[0][7].objs[0]$;
    objs_ptr=1;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
    init_from=NULL;
   };
  };
  functions {
   name="functions";
   el_typ=Function;
   el_def=0;
  };
  init_code {
   name="init_code";
   el_typ=ProgCode;
   el_def=0;
   MethodCall @[0] {
    desc="set the network and datatable for the NetMonitor";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=.projects[0].programs.gp[0][7].vars[1]$$;
    method=NetMonitor::SetDataNetwork;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=DataTable_ptr;
      type="DataTable*";
      name="dt";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="trial_mon_data";
      };
     };
     ProgArg @[1] {
      arg_type=Network_ptr;
      type="Network*";
      name="net";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="network";
      };
     };
    };
    meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
    meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
   };
   MethodCall @[1] {
    desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][7].vars[1]$;
    method=taBase::CheckConfig;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="quiet";
      required=0;
      def_val="false";
      prev_expr=;
      expr {
       expr="false";
      };
     };
    };
    meth_sig="bool CheckConfig(bool quiet = false)";
    meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
   };
   MethodCall @[2] {
    desc="update the monitor items and data schema based on current settings of the NetMonitor object";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][7].vars[1]$;
    method=NetMonitor::UpdateMonitors;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="reset_first";
      required=0;
      def_val="false";
      prev_expr=;
      expr {
       expr="true";
      };
     };
    };
    meth_sig="void UpdateMonitors(bool reset_first = false)";
    meth_desc=" old name for UpdateDataTable";
   };
  };
  prog_code {
   name="prog_code";
   el_typ=ProgCode;
   el_def=0;
   MethodCall @[0] {
    desc="add a new blank row to the data";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=.projects[0].programs.gp[0][7].vars[0]$$;
    method=DataTable::AddBlankRow;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="int AddBlankRow()";
    meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
   };
   MethodCall @[1] {
    desc="get the new monitor data from the network and other sources -- this does the main work";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][7].vars[1]$;
    method=NetMonitor::GetMonVals;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void GetMonVals()";
    meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
   };
   MethodCall @[2] {
    desc="update views and other things after writing new data to monitor data table";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][7].vars[0]$;
    method=DataTable::WriteClose;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void WriteClose()";
    meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
   };
   MethodCall @[3] {
    desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=.projects[0].programs.gp[0][7].args[0]$$;
    method=Network::DMem_ShareTrialData;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=DataTable_ptr;
      type="DataTable*";
      name="dt";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="trial_mon_data";
      };
     };
     ProgArg @[1] {
      arg_type=int;
      type="int";
      name="n_rows";
      required=0;
      def_val="1";
      prev_expr=;
      expr {
       expr="1";
      };
     };
    };
    meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
    meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
   };
  };
  step_prog=$.projects[0].programs.gp[0][7]$;
  step_n=1;
 };
 Program @[8] {
  name="LeabraEpochMonitor";
  short_nm="EpcMon";
  tags="Leabra, Std, Monitor";
  desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
  flags=NO_STOP_STEP;
  stop_step_cond {
   expr=;
  };
  objs {
   name="objs";
   el_typ=NetMonitor;
   el_def=0;
   NetMonitor @[0] {
    name="epoch_netmon";
    items {
     name="items";
     el_typ=NetMonItem;
     el_def=0;
     NetMonItem @[0] {
      name="batch";
      monitor=.projects[0].programs.gp[0][8].objs[0]$$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="batch";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[1] {
      name="epoch";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="epoch";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[2] {
      name="avg_sse";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="avg_sse";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[3] {
      name="cnt_err";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="cnt_err";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[4] {
      name="pct_cor";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="pct_cor";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[5] {
      name="pct_err";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="pct_err";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[6] {
      name="avg_norm_err";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="avg_norm_err";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[7] {
      name="avg_cos_err";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="avg_cos_err";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[8] {
      name="avg_ext_rew";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="avg_ext_rew";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[9] {
      name="avg_cycles";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="avg_cycles";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[10] {
      name="epoch_time_tot";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=1;
      object_type=NULL;
      object=NULL;
      variable="act";
      var_label=;
      name_style=MY_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[11] {
      name="epoch_time_usr";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=1;
      object_type=NULL;
      object=NULL;
      variable="act";
      var_label=;
      name_style=MY_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[12] {
      name="lay_avg_sse";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.avg_sse";
      var_label="lay_avg_sse";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[13] {
      name="lay_cnt_err";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.cnt_err";
      var_label="lay_cnt_err";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[14] {
      name="lay_pct_cor";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.pct_cor";
      var_label="lay_pct_cor";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[15] {
      name="lay_pct_err";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.pct_err";
      var_label="lay_pct_err";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[16] {
      name="lay_avg_norm_err";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.avg_norm_err";
      var_label="lay_avg_norm_err";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[17] {
      name="lay_avg_cos_err";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.avg_cos_err";
      var_label="lay_avg_cos_err";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name="agg_col";
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name="select_spec";
       name="select_spec_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[18] {
      name="net_avg_cos_diff";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="avg_cos_diff";
      var_label="net_avg_cos_diff";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[19] {
      name="net_avg_trial_cos_diff";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="avg_trial_cos_diff";
      var_label="net_avg_trial_cos_diff";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[20] {
      name="net_avg_avg_act_diff";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="avg_avg_act_diff";
      var_label="net_avg_avg_act_diff";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[21] {
      name="avg_cos_diff";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.avg_cos_diff";
      var_label="avg_cos_diff";
      name_style=AUTO_NAME;
      max_name_len=8;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[22] {
      name="avg_trial_cos_diff";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.avg_trial_cos_diff";
      var_label="avg_trial_cos_diff";
      name_style=AUTO_NAME;
      max_name_len=8;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[23] {
      name="avg_avg_act_diff";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.avg_avg_act_diff";
      var_label="avg_avg_act_diff";
      name_style=AUTO_NAME;
      max_name_len=8;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[24] {
      name="avg_net_sd";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.avg_net_sd";
      var_label="avg_net_sd";
      name_style=AUTO_NAME;
      max_name_len=8;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[25] {
      name="hog_pct";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.hog_pct";
      var_label="hog_pct";
      name_style=AUTO_NAME;
      max_name_len=8;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[26] {
      name="dead_pct";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.dead_pct";
      var_label="dead_pct";
      name_style=AUTO_NAME;
      max_name_len=8;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 0 1;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[27] {
      name="netmax";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="layers.avg_netin.max";
      var_label="netmax";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 2 0=0;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[28] {
      name="avg_act";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable=".layers.acts_p_avg";
      var_label="avg_act";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 2 0=0;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[29] {
      name="netrel";
      monitor=$.projects[0].programs.gp[0][8].objs[0]$;
      computed=0;
      object_type=LeabraNetwork;
      object=$.projects[0].networks[0]$;
      variable="prjns.avg_netin_rel";
      var_label="netrel";
      name_style=AUTO_NAME;
      max_name_len=6;
      options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      data_agg=0;
      data_src=NULL;
      agg_col {
       col_name=;
      };
      agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
      select_rows=0;
      select_spec {
       col_name=;
       name="_EQUAL_";
       on=1;
       rel=EQUAL;
       use_var=0;
       cmp 2 0=0;
       var=NULL;
       enable_var=NULL;
      };
      pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
     };
    };
    network=$.projects[0].networks[0]$;
    data=.projects[0].data.gp[1][1]$$<DataTable,EpochOutputData>;
    rmv_orphan_cols=1;
   };
  };
  types {
   name="types";
   el_typ=DynEnumType;
   el_def=0;
  };
  args {
   name="args";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=Network;
    object_val=$.projects[0].networks[0]$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc="network to get data from";
    init_from=NULL;
   };
  };
  vars {
   name="vars";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="epoch_mon_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=$.projects[0].data.gp[1][1]$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="data table to write the epoch data to";
    init_from=NULL;
   };
   ProgVar @[1] {
    name="epoch_netmon";
    var_type=T_Object;
    object_type=NetMonitor;
    object_val=$.projects[0].programs.gp[0][8].objs[0]$;
    objs_ptr=1;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="network monitor object that contains full specs for what to record and where to get it";
    init_from=NULL;
   };
   ProgVar @[2] {
    name="epoch_timer";
    var_type=T_Object;
    object_type=TimeUsed;
    object_val=$.projects[0].networks[0].epoch_time$;
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
    init_from=NULL;
   };
  };
  functions {
   name="functions";
   el_typ=Function;
   el_def=0;
  };
  init_code {
   name="init_code";
   el_typ=ProgCode;
   el_def=0;
   AssignExpr @[0] {
    desc="get the epoch timer from current network";
    flags=0;
    orig_prog_code=;
    result_var=.projects[0].programs.gp[0][8].vars[2]$$;
    expr {
     expr="network.epoch_time";
    };
   };
   MethodCall @[1] {
    desc="set data and network on NetMonitor object";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=.projects[0].programs.gp[0][8].vars[1]$$;
    method=NetMonitor::SetDataNetwork;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=DataTable_ptr;
      type="DataTable*";
      name="dt";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="epoch_mon_data";
      };
     };
     ProgArg @[1] {
      arg_type=Network_ptr;
      type="Network*";
      name="net";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="network";
      };
     };
    };
    meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
    meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
   };
   MethodCall @[2] {
    desc="check configuration and emit errors/warnings for problems";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][8].vars[1]$;
    method=taBase::CheckConfig;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="quiet";
      required=0;
      def_val="false";
      prev_expr=;
      expr {
       expr="false";
      };
     };
    };
    meth_sig="bool CheckConfig(bool quiet = false)";
    meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
   };
   MethodCall @[3] {
    desc="update the monitor items and data schema based on current settings of NetMonitor";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][8].vars[1]$;
    method=NetMonitor::UpdateMonitors;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="reset_first";
      required=0;
      def_val="false";
      prev_expr=;
      expr {
       expr="true";
      };
     };
    };
    meth_sig="void UpdateMonitors(bool reset_first = false)";
    meth_desc=" old name for UpdateDataTable";
   };
  };
  prog_code {
   name="prog_code";
   el_typ=ProgCode;
   el_def=0;
   MethodCall @[0] {
    desc="add a new blank row to the data";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=.projects[0].programs.gp[0][8].vars[0]$$;
    method=DataTable::AddBlankRow;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="int AddBlankRow()";
    meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
   };
   MethodCall @[1] {
    desc="get the new monitor data and stor it into the data table -- this does the main job here";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][8].vars[1]$;
    method=NetMonitor::GetMonVals;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void GetMonVals()";
    meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
   };
   AssignExpr @[2] {
    desc="get the epoch timer from current network";
    flags=0;
    orig_prog_code=;
    result_var=$.projects[0].programs.gp[0][8].vars[2]$;
    expr {
     expr="network.epoch_time";
    };
   };
   MethodCall @[3] {
    desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][8].vars[0]$;
    method=DataTable::SetValColName;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=const_Variant_ref;
      type="Variant&";
      name="val";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="epoch_timer.used.GetTotSecs()";
      };
     };
     ProgArg @[1] {
      arg_type=const_taString_ref;
      type="taString&";
      name="col_name";
      required=1;
      def_val="\"\"";
      prev_expr=;
      expr {
       expr="\"epoch_time_tot\"";
      };
     };
     ProgArg @[2] {
      arg_type=int;
      type="int";
      name="row";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="-1";
      };
     };
     ProgArg @[3] {
      arg_type=bool;
      type="bool";
      name="quiet";
      required=0;
      def_val="false";
      prev_expr=;
      expr {
       expr=;
      };
     };
    };
    meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
    meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
   };
   MethodCall @[4] {
    desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][8].vars[0]$;
    method=DataTable::SetValColName;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=const_Variant_ref;
      type="Variant&";
      name="val";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="epoch_timer.used.GetUsrSecs()";
      };
     };
     ProgArg @[1] {
      arg_type=const_taString_ref;
      type="taString&";
      name="col_name";
      required=1;
      def_val="\"\"";
      prev_expr=;
      expr {
       expr="\"epoch_time_usr\"";
      };
     };
     ProgArg @[2] {
      arg_type=int;
      type="int";
      name="row";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="-1";
      };
     };
     ProgArg @[3] {
      arg_type=bool;
      type="bool";
      name="quiet";
      required=0;
      def_val="false";
      prev_expr=;
      expr {
       expr=;
      };
     };
    };
    meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
    meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
   };
   MethodCall @[5] {
    desc="update after writing new data to monitor data table";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][8].vars[0]$;
    method=DataTable::WriteClose;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
    meth_sig="void WriteClose()";
    meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
   };
   Comment @[6] {
    desc="NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
    flags=0;
    orig_prog_code=;
   };
  };
  step_prog=$.projects[0].programs.gp[0][8]$;
  step_n=1;
 };
 Program @[9] {
  name="SaveWeights";
  short_nm="SavWts";
  tags="Network, Weights";
  desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
  flags=NO_STOP_STEP;
  stop_step_cond {
   expr=;
  };
  objs {
   name="objs";
   el_typ=taNBase;
   el_def=0;
  };
  types {
   name="types";
   el_typ=DynEnumType;
   el_def=0;
  };
  args {
   name="args";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=Network;
    object_val=$.projects[0].networks[0]$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
    reference=0;
    desc=;
    init_from=NULL;
   };
  };
  vars {
   name="vars";
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="tag";
    var_type=T_String;
    string_val="_gui";
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="user-provided tag (startup script will set this!)";
    init_from=NULL;
   };
   ProgVar @[1] {
    name="wts_subdir";
    var_type=T_String;
    string_val=;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="user-provided subdirectory to save weights in";
    init_from=NULL;
   };
   ProgVar @[2] {
    name="fname";
    var_type=T_String;
    string_val="/Users/oreilly/emergent/test/leabra_std.00_0010.wts.gz";
    objs_ptr=0;
    flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="final generated file name -- do not edit!";
    init_from=NULL;
   };
   ProgVar @[3] {
    name="epoch_str";
    var_type=T_String;
    string_val="0010";
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="string rep of epoch with leading zeros";
    init_from=NULL;
   };
   ProgVar @[4] {
    name="batch_str";
    var_type=T_String;
    string_val="00";
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="string rep of batch with leading zeros";
    init_from=NULL;
   };
   ProgVar @[5] {
    name="final_tag";
    var_type=T_String;
    string_val=".00_0010";
    objs_ptr=0;
    flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
    reference=0;
    desc="batch + epoch";
    init_from=NULL;
   };
  };
  functions {
   name="functions";
   el_typ=Function;
   el_def=0;
  };
  init_code {
   name="init_code";
   el_typ=ProgCode;
   el_def=0;
  };
  prog_code {
   name="prog_code";
   el_typ=ProgCode;
   el_def=0;
   IfReturn @[0] {
    desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
    flags=0;
    orig_prog_code=;
    cond {
     expr="taMisc::dmem_proc > 0";
    };
   };
   MiscCall @[1] {
    desc="get current batch counter for file name, with leading zeros to length 3";
    flags=0;
    orig_prog_code=;
    result_var=.projects[0].programs.gp[0][9].vars[4]$$;
    object_type=taMisc;
    method=taMisc::LeadingZeros;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=int;
      type="int";
      name="num";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="network.batch";
      };
     };
     ProgArg @[1] {
      arg_type=int;
      type="int";
      name="len";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="2";
      };
     };
    };
   };
   MiscCall @[2] {
    desc="get current epoch counter with leading zeros to length 4";
    flags=0;
    orig_prog_code=;
    result_var=.projects[0].programs.gp[0][9].vars[3]$$;
    object_type=taMisc;
    method=taMisc::LeadingZeros;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=int;
      type="int";
      name="num";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="network.epoch";
      };
     };
     ProgArg @[1] {
      arg_type=int;
      type="int";
      name="len";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="4";
      };
     };
    };
   };
   AssignExpr @[3] {
    desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
    flags=0;
    orig_prog_code=;
    result_var=.projects[0].programs.gp[0][9].vars[5]$$;
    expr {
     expr="tag + \".\" + batch_str + \"_\" + epoch_str";
    };
   };
   MethodCall @[4] {
    desc="get a file name based on the project's current file name, for saving the weights";
    flags=0;
    orig_prog_code=;
    result_var=.projects[0].programs.gp[0][9].vars[2]$$;
    obj=.projects[0].programs.gp[0][9].args[0]$$;
    method=taBase::GetFileNameFmProject;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=const_taString_ref;
      type="taString&";
      name="ext";
      required=1;
      def_val=;
      prev_expr=;
      expr {
       expr="\".wts.gz\"";
      };
     };
     ProgArg @[1] {
      arg_type=const_taString_ref;
      type="taString&";
      name="tag";
      required=0;
      def_val="\"\"";
      prev_expr=;
      expr {
       expr="final_tag";
      };
     };
     ProgArg @[2] {
      arg_type=const_taString_ref;
      type="taString&";
      name="subdir";
      required=0;
      def_val="\"\"";
      prev_expr=;
      expr {
       expr="wts_subdir";
      };
     };
     ProgArg @[3] {
      arg_type=bool;
      type="bool";
      name="dmem_proc_no";
      required=0;
      def_val="false";
      prev_expr=;
      expr {
       expr="false";
      };
     };
    };
    meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
    meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
   };
   MethodCall @[5] {
    desc="save the weights to that file name";
    flags=0;
    orig_prog_code=;
    result_var=NULL;
    obj=$.projects[0].programs.gp[0][9].args[0]$;
    method=Network::SaveWeights;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=const_taString_ref;
      type="taString&";
      name="fname";
      required=0;
      def_val="\"\"";
      prev_expr=;
      expr {
       expr="fname";
      };
     };
     ProgArg @[1] {
      arg_type=Network::WtSaveFormat;
      type="Network::WtSaveFormat";
      name="fmt";
      required=0;
      def_val="Network::NET_FMT";
      prev_expr=;
      expr {
       expr="Network::NET_FMT";
      };
     };
    };
    meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
    meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
   };
  };
  step_prog=NULL;
  step_n=1;
 };
};

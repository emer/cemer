// ta_Dump File v3.0 -- code v7.8.6.0 rev9310
Program .projects[0].programs[1] { 
 UserDataItem_List @*(.user_data_) {
  UserDataItem @[0] { };
 };

 ProgObjList @.objs = [0] {
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [0] {
 };

 ProgVar_List @.vars = [7] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
  ProgVar @[3] { };
  ProgVar @[4] { };
  ProgVar @[5] { };
  ProgVar @[6] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [0] {
 };

 ProgEl_List @.prog_code = [13] {
  LocalVars @[0] { 
   ProgVar_List @.local_vars = [4] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
   };
  };
  AssignExpr @[1] { };
  AssignExpr @[2] { };
  Comment @[3] { };
  AssignExpr @[4] { };
  AssignExpr @[5] { };
  Comment @[6] { };
  AssignExpr @[7] { };
  AssignExpr @[8] { };
  Comment @[9] { };
  AssignExpr @[10] { };
  AssignExpr @[11] { };
  PrintVar @[12] { };
 };
};
Program .projects[0].programs[1] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserDataItem;
  el_def=0;
  UserDataItem @[0] {
   name="user_pinned";
   value 1 0=1;
   val_type_fixed=0;
  };
 };
 name="RotatePointAroundPoint";
 short_nm="RtPntP";
 tags=;
 desc=;
 flags=NO_STOP_STEP;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=taNBase;
  el_def=0;
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="cx";
   var_type=T_Int;
   flags=CTRL_PANEL|USED|EDIT_VAL;
   reference=0;
   desc="x value for pivot point";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="cy";
   var_type=T_Int;
   int_val=20;
   flags=CTRL_PANEL|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="y value for pivot point";
   init_from=NULL;
  };
  ProgVar @[2] {
   name="x";
   var_type=T_Int;
   int_val=2;
   flags=CTRL_PANEL|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="x value of point that will be rotated around pivot";
   init_from=NULL;
  };
  ProgVar @[3] {
   name="y";
   var_type=T_Int;
   int_val=23;
   flags=CTRL_PANEL|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="y value of point that will be rotated around pivot";
   init_from=NULL;
  };
  ProgVar @[4] {
   name="x_new";
   var_type=T_Int;
   int_val=23;
   flags=CTRL_PANEL|CTRL_READ_ONLY|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="the new x value";
   init_from=NULL;
  };
  ProgVar @[5] {
   name="y_new";
   var_type=T_Int;
   int_val=37;
   flags=CTRL_PANEL|CTRL_READ_ONLY|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="the new y value";
   init_from=NULL;
  };
  ProgVar @[6] {
   name="degrees_to_rotate";
   var_type=T_Real;
   real_val=-90;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="minus for counter-clockwise";
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  LocalVars @[0] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="LocalVars (4 vars)";
   pre_compile_code_string="LocalVars (4 vars)";
   local_vars {
    name="local_vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="s";
     var_type=T_Real;
     real_val=0;
     flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
     reference=0;
     desc="sine calculated from degrees";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="c";
     var_type=T_Real;
     real_val=0;
     flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
     reference=0;
     desc="cosine calculated from degrees";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="x_temp";
     var_type=T_Int;
     int_val=0;
     flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="y_temp";
     var_type=T_Int;
     int_val=0;
     flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
  };
  AssignExpr @[1] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="s = taMath_float::sin_deg(degrees_to_rotate)";
   pre_compile_code_string="s = taMath_float::sin_deg(degrees_to_rotate)";
   result_var=.projects[0].programs[1].prog_code[0].local_vars[0]$$;
   expr {
    expr="taMath_float::sin_deg(degrees_to_rotate)";
   };
  };
  AssignExpr @[2] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="c = taMath_float::cos_deg(degrees_to_rotate)";
   pre_compile_code_string="c = taMath_float::cos_deg(degrees_to_rotate)";
   result_var=.projects[0].programs[1].prog_code[0].local_vars[1]$$;
   expr {
    expr="taMath_float::cos_deg(degrees_to_rotate)";
   };
  };
  Comment @[3] {
   desc="translate point back to origin";
   flags=CAN_REVERT_TO_CODE;
   code_string="// translate point back to origin";
   pre_compile_code_string="// translate point back to origin";
  };
  AssignExpr @[4] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="x_temp = x - cx";
   pre_compile_code_string="x_temp = x - cx";
   result_var=.projects[0].programs[1].prog_code[0].local_vars[2]$$;
   expr {
    expr="x - cx";
   };
  };
  AssignExpr @[5] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="y_temp = y - cy";
   pre_compile_code_string="y_temp = y - cy";
   result_var=.projects[0].programs[1].prog_code[0].local_vars[3]$$;
   expr {
    expr="y - cy";
   };
  };
  Comment @[6] {
   desc="rotate point";
   flags=CAN_REVERT_TO_CODE;
   code_string="// rotate point";
   pre_compile_code_string="// rotate point";
  };
  AssignExpr @[7] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="x_new = x_temp* c - y_temp * s";
   pre_compile_code_string="x_new = x_temp* c - y_temp * s";
   result_var=.projects[0].programs[1].vars[4]$$;
   expr {
    expr="x_temp* c - y_temp * s";
   };
  };
  AssignExpr @[8] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="y_new = x_temp * s + y_temp * c";
   pre_compile_code_string="y_new = x_temp * s + y_temp * c";
   result_var=.projects[0].programs[1].vars[5]$$;
   expr {
    expr="x_temp * s + y_temp * c";
   };
  };
  Comment @[9] {
   desc="translate back";
   flags=CAN_REVERT_TO_CODE;
   code_string="// translate back";
   pre_compile_code_string="// translate back";
  };
  AssignExpr @[10] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="x_new = x_new + cx";
   pre_compile_code_string="x_new = x_new + cx";
   result_var=$.projects[0].programs[1].vars[4]$;
   expr {
    expr="x_new + cx";
   };
  };
  AssignExpr @[11] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="y_new = y_new + cy";
   pre_compile_code_string="y_new = y_new + cy";
   result_var=$.projects[0].programs[1].vars[5]$;
   expr {
    expr="y_new + cy";
   };
  };
  PrintVar @[12] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="Print  x_new y_new";
   pre_compile_code_string="Print  x_new y_new";
   message=;
   print_var=$.projects[0].programs[1].vars[4]$;
   print_var2=$.projects[0].programs[1].vars[5]$;
   print_var3=NULL;
   print_var4=NULL;
   print_var5=NULL;
   print_var6=NULL;
   debug=0;
  };
 };
 step_prog=NULL;
 step_n=1;
};

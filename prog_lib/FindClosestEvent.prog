// ta_Dump File v2.0
Program .projects[0].programs[2] { 
  ProgObjList @.objs = [2] {
    float_Matrix @[0] { };
    DataTable @[1] { 
      DataTableCols @.data = [9] {
	int_Data @[0] { 
     UserDataItem_List @*(.user_data_) { 
	    UserDataItem @[0] { };
     };
};
	int_Data @[1] { 
     UserDataItem_List @*(.user_data_) { 
	    UserDataItem @[0] { };
     };
};
	int_Data @[2] { 
     UserDataItem_List @*(.user_data_) { 
	    UserDataItem @[0] { };
     };
};
	String_Data @[3] { };
	float_Data @[4] { };
	String_Data @[5] { };
	float_Data @[6] { };
	float_Data @[7] { };
	float_Data @[8] { };
      };
    };
  };

  ProgVar_List @.args = [4] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
  };

  ProgVar_List @.vars = [13] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
    ProgVar @[12] { };
  };

  ProgEl_List @.prog_code = [9] {
    MethodCall @[0] { 
      ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
      };
    };
    AddNewDataRow @[1] { };
    MethodCall @[2] { 
      ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
      };
    };
    DataAnalCall @[3] { 
      ProgArg_List @.meth_args = [8] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
	ProgArg @[7] { };
      };
    };
    MathCall @[4] { 
      ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
      };
    };
    DataVarProg @[5] { };
    AssignExpr @[6] { };
    DataVarProg @[7] { };
    IfElse @[8] { 
      ProgEl_List @.true_code = [1] {
	AssignExpr @[0] { };
      };

      ProgEl_List @.false_code = [1] {
	AssignExpr @[0] { };
      };
    };
  };
};
Program .projects[0].programs[2] {
 name="FindClosestEvent";
 tags="Statistic, Error ";
 desc="find closest event from list of input data compared to recorded output data from network -- replaces ClosestEventStat from PDP++";
 flags=;
 objs {
  name=;
  el_typ=float_Matrix;
  el_def=0;
  float_Matrix @[0] {
   name="OutputTargetDistMatrix";
    [26 1] 6.7681551;7.8604913;8.4941406;7.2077856;6.8041344;6.6891508;8.2777309;8.484375;10.266846;6.474678;6.585701;7.1165552;0;10.272941;6.6615076;8.6317806;8.3459635;5.9359255;7.301331;8.3796177;6.474678;8.587162;8.5191193;9.0339851;5.8333011;6.3505263;  };
  DataTable @[1] {
   name="CurTrialData";
   desc=;
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    int_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
      };
     };
     name="batch";
     col_flags=SAVE_ROWS|SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     ar {
      name=;
	  [1] 0;     };
    };
    int_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
      };
     };
     name="epoch";
     col_flags=SAVE_ROWS|SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     ar {
      name=;
	  [1] 50;     };
    };
    int_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
      };
     };
     name="trial";
     col_flags=SAVE_ROWS|SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     ar {
      name=;
	  [1] 12;     };
    };
    String_Data @[3] {
     name="trial_name";
     col_flags=SAVE_ROWS|SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     ar {
      name=;
	  [1] "12_b";     };
    };
    float_Data @[4] {
     name="min_dist";
     col_flags=SAVE_ROWS|SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     ar {
      name=;
	  [1] 0;     };
    };
    String_Data @[5] {
     name="closest_name";
     col_flags=SAVE_ROWS|SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     ar {
      name=;
	  [1] ;     };
    };
    float_Data @[6] {
     name="name_err";
     col_flags=SAVE_ROWS|SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     ar {
      name=;
	  [1] 0;     };
    };
    float_Data @[7] {
     name="both_err";
     col_flags=SAVE_ROWS|SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     ar {
      name=;
	  [1] 0;     };
    };
    float_Data @[8] {
     name="Output_act_m";
     col_flags=SAVE_ROWS|SAVE_DATA;
     is_matrix=1;
     cell_geom{ 5;5;     };
     calc_expr {
      expr=;
     };
     ar {
      name=;
	  [5 5 1] 5.5287498e-17;0.8996771;0.96325439;0;9.6345998e-10;0.017105836;0.82021612;0.0011627716;0.010350553;0;0.028698351;0.85832769;2.109538e-05;0.0065543121;2.7503931e-15;0;5.7586002e-18;0.0086058136;4.7180304e-13;0.50574511;3.2250097e-07;0.9509809;0.46785235;3.6486291e-15;7.3400756e-08;     };
    };
   };
   data_flags=SAVE_ROWS|AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
  };
 };
 types {
  name=;
  el_typ=ProgType;
  el_def=0;
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="trial_output_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[1][2]$0$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="the data table containing the monitored activation values to use in the comparison";
  };
  ProgVar @[1] {
   name="output_col_name";
   var_type=T_String;
   string_val="Output_act_m";
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="name of the column in the trial_output_data that contains the activations to compare";
  };
  ProgVar @[2] {
   name="target_input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$1$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="target input data with full list of events to compare output data pattern to";
  };
  ProgVar @[3] {
   name="target_col_name";
   var_type=T_String;
   string_val="Output";
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="name of the column in the target_input_data that contains the activations to compare";
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="OutputTargetDistMatrix";
   var_type=T_Object;
   object_type=float_Matrix;
   object_val=.projects[0].programs[2].objs[0]$2$;
   objs_ptr=1;
   flags=NULL_CHECK;
   desc="computed distances between output and targets";
  };
  ProgVar @[1] {
   name="CurTrialData";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs[2].objs[1]$3$;
   objs_ptr=1;
   flags=NULL_CHECK;
   desc="pointer for holding the data from the current trial";
  };
  ProgVar @[2] {
   name="dist_metric";
   var_type=T_HardEnum;
   int_val=0;
   hard_enum_type=taMath::DistMetric;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="parameter: distance metric to use in computing distances";
  };
  ProgVar @[3] {
   name="dist_norm";
   var_type=T_Bool;
   bool_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="parameter: whether to normalize distance value";
  };
  ProgVar @[4] {
   name="dist_tol";
   var_type=T_Real;
   real_val=0.5;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK;
   desc="parameter: tolerance to use for computing distances -- values < this count as zero";
  };
  ProgVar @[5] {
   name="min_dist";
   var_type=T_Real;
   real_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
   desc="result: minimum distance between current output pattern and any of the target patterns";
  };
  ProgVar @[6] {
   name="min_idx";
   var_type=T_Int;
   int_val=12;
   objs_ptr=0;
   flags=CTRL_READ_ONLY|NULL_CHECK;
   desc="row index of what produced the min val";
  };
  ProgVar @[7] {
   name="Name";
   var_type=T_String;
   string_val="12_a";
   objs_ptr=0;
   flags=CTRL_READ_ONLY|NULL_CHECK;
   desc="name of the minimum input/output pair that produced the minimum value";
  };
  ProgVar @[8] {
   name="closest_name";
   var_type=T_String;
   string_val="12_a";
   objs_ptr=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
   desc="result: name of input pattern with closest distance";
  };
  ProgVar @[9] {
   name="trial_name";
   var_type=T_String;
   string_val="12_b";
   objs_ptr=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
   desc="the current trial name";
  };
  ProgVar @[10] {
   name="name_err";
   var_type=T_Real;
   real_val=1;
   objs_ptr=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
   desc="error value for whether the full trial names match: 0 = they match, 1 = they don't match";
  };
  ProgVar @[11] {
   name="row_zero";
   var_type=T_Int;
   int_val=0;
   objs_ptr=0;
   flags=NULL_CHECK;
   desc="always 0";
  };
  ProgVar @[12] {
   name="last_row";
   var_type=T_Int;
   int_val=-1;
   objs_ptr=0;
   flags=;
   desc="always -1";
  };
 };
 functions {
  name=;
  el_typ=Function;
  el_def=0;
 };
 load_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 prog_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
  MethodCall @[0] {
   desc="ensure cur trial has same structure as source";
   flags=;
   result_var=NULL;
   obj=.projects[0].programs[2].vars[1]$4$;
   method=DataTable::Copy_NoData;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_DataTable_ref;
     type="const DataTable&";
     name="cp";
     required=0;
     def_val=;
     expr {
      expr="trial_output_data";
     };
    };
   };
  };
  AddNewDataRow @[1] {
   desc=;
   flags=;
   data_var=$4$;
  };
  MethodCall @[2] {
   desc="grab last row of source data";
   flags=;
   result_var=NULL;
   obj=$4$;
   method=DataTable::CopyFromRow;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=int;
     type="int";
     name="dest_row";
     required=0;
     def_val=;
     expr {
      expr="0";
     };
    };
    ProgArg @[1] {
     arg_type=const_DataTable_ref;
     type="const DataTable&";
     name="cp";
     required=0;
     def_val=;
     expr {
      expr="trial_output_data";
     };
    };
    ProgArg @[2] {
     arg_type=int;
     type="int";
     name="src_row";
     required=0;
     def_val=;
     expr {
      expr="trial_output_data.rows-1";
     };
    };
   };
  };
  DataAnalCall @[3] {
   desc="compute the appropriate distances";
   flags=;
   result_var=NULL;
   object_type=taDataAnal;
   method=taDataAnal::CrossDistMatrix;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=float_Matrix_ptr;
     type="float_Matrix*";
     name="dist_mat";
     required=1;
     def_val=;
     expr {
      expr="OutputTargetDistMatrix";
     };
    };
    ProgArg @[1] {
     arg_type=DataTable_ptr;
     type="DataTable*";
     name="src_data_a";
     required=1;
     def_val=;
     expr {
      expr="CurTrialData";
     };
    };
    ProgArg @[2] {
     arg_type=const_taString_ref;
     type="const taString&";
     name="data_col_nm_a";
     required=1;
     def_val=;
     expr {
      expr="output_col_name";
     };
    };
    ProgArg @[3] {
     arg_type=DataTable_ptr;
     type="DataTable*";
     name="src_data_b";
     required=1;
     def_val=;
     expr {
      expr="target_input_data";
     };
    };
    ProgArg @[4] {
     arg_type=const_taString_ref;
     type="const taString&";
     name="data_col_nm_b";
     required=1;
     def_val=;
     expr {
      expr="target_col_name";
     };
    };
    ProgArg @[5] {
     arg_type=taMath::DistMetric;
     type="taMath::DistMetric";
     name="metric";
     required=1;
     def_val=;
     expr {
      expr="dist_metric";
     };
    };
    ProgArg @[6] {
     arg_type=bool;
     type="bool";
     name="norm";
     required=0;
     def_val="false";
     expr {
      expr="dist_norm";
     };
    };
    ProgArg @[7] {
     arg_type=float;
     type="float";
     name="tol";
     required=0;
     def_val="0.0f";
     expr {
      expr="dist_tol";
     };
    };
   };
  };
  MathCall @[4] {
   desc="find min dist val and index";
   flags=;
   result_var=.projects[0].programs[2].vars[5]$5$;
   object_type=taMath_float;
   method=taMath_float::vec_min;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_float_Matrix_ptr;
     type="const float_Matrix*";
     name="vec";
     required=0;
     def_val=;
     expr {
      expr="OutputTargetDistMatrix";
     };
    };
    ProgArg @[1] {
     arg_type=int_ref;
     type="int&";
     name="idx";
     required=0;
     def_val=;
     expr {
      expr="min_idx";
     };
    };
   };
  };
  DataVarProg @[5] {
   desc="get name of the minimum input/output pair";
   flags=;
   data_var=.projects[0].programs[2].args[2]$6$;
   set_data=0;
   row_spec=ROW_NUM;
   row_var=.projects[0].programs[2].vars[6]$7$;
   var_1=.projects[0].programs[2].vars[7]$8$;
   var_2=NULL;
   var_3=NULL;
   var_4=NULL;
  };
  AssignExpr @[6] {
   desc="actually gets the input part of the name";
   flags=;
   result_var=.projects[0].programs[2].vars[8]$9$;
   expr {
    expr="Name";
   };
  };
  DataVarProg @[7] {
   desc="gets the trial name of the current trial";
   flags=;
   data_var=$4$;
   set_data=0;
   row_spec=ROW_NUM;
   row_var=.projects[0].programs[2].vars[11]$10$;
   var_1=.projects[0].programs[2].vars[9]$11$;
   var_2=NULL;
   var_3=NULL;
   var_4=NULL;
  };
  IfElse @[8] {
   desc="computes err based on whether it was the same or not";
   flags=;
   cond {
    expr="trial_name == closest_name";
   };
   true_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    AssignExpr @[0] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[10]$12$;
     expr {
      expr="0.0";
     };
    };
   };
   false_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    AssignExpr @[0] {
     desc=;
     flags=;
     result_var=$12$;
     expr {
      expr="1.0";
     };
    };
   };
  };
 };
};

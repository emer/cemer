// ta_Dump File v3.0 -- code v8.0.0.0 rev9717
Program .projects[0].programs.gp[0][8] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [1] {
  NetMonitor @[0] { 
   NetMonItem_List @.items = [8] {
    NetMonItem @[0] { };
    NetMonItem @[1] { };
    NetMonItem @[2] { };
    NetMonItem @[3] { };
    NetMonItem @[4] { };
    NetMonItem @[5] { };
    NetMonItem @[6] { };
    NetMonItem @[7] { };
   };
  };
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [1] {
  ProgVar @[0] { };
 };

 ProgVar_List @.vars = [3] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [4] {
  AssignExpr @[0] { };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  MethodCall @[2] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  MethodCall @[3] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
 };

 ProgEl_List @.prog_code = [6] {
  MethodCall @[0] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  AssignExpr @[2] { };
  MethodCall @[3] { 
   ProgArg_List @.meth_args = [4] {
    ProgArg @[0] { };
    ProgArg @[1] { };
    ProgArg @[2] { };
    ProgArg @[3] { };
   };
  };
  MethodCall @[4] { 
   ProgArg_List @.meth_args = [4] {
    ProgArg @[0] { };
    ProgArg @[1] { };
    ProgArg @[2] { };
    ProgArg @[3] { };
   };
  };
  MethodCall @[5] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
 };
};
Program .projects[0].programs.gp[0][8] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {
   name="DocLink";
   doc=.projects[0].programs.gp[0][8].doc$$;
  };
 };
 name="CsEpochMonitor";
 short_nm="EpcMon";
 tags="Cs, Std, Monitor";
 desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
 version {
  major=8;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@colorado.edu";
 flags=NO_STOP_STEP;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=NetMonitor;
  el_def=0;
  NetMonitor @[0] {
   name="epoch_netmon";
   items {
    name="items";
    el_typ=NetMonItem;
    el_def=0;
    NetMonItem @[0] {
     name="batch";
     monitor=.projects[0].programs.gp[0][8].objs[0]$$;
     computed=0;
     object_type=LeabraNetwork;
     object=.projects[0].networks[0]$$<CsNetwork,Network_0>;
     variable="batch";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name="agg_col";
     };
     agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name="select_spec";
      name="select_spec_EQUAL_";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[1] {
     name="epoch";
     monitor=$.projects[0].programs.gp[0][8].objs[0]$;
     computed=0;
     object_type=LeabraNetwork;
     object=$.projects[0].networks[0]$;
     variable="epoch";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name="agg_col";
     };
     agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name="select_spec";
      name="select_spec_EQUAL_";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[2] {
     name="avg_sse";
     monitor=$.projects[0].programs.gp[0][8].objs[0]$;
     computed=0;
     object_type=LeabraNetwork;
     object=$.projects[0].networks[0]$;
     variable="avg_sse";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name="agg_col";
     };
     agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name="select_spec";
      name="select_spec_EQUAL_";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[3] {
     name="cnt_err";
     monitor=$.projects[0].programs.gp[0][8].objs[0]$;
     computed=0;
     object_type=LeabraNetwork;
     object=$.projects[0].networks[0]$;
     variable="cnt_err";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name="agg_col";
     };
     agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name="select_spec";
      name="select_spec_EQUAL_";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[4] {
     name="avg_ext_rew";
     monitor=$.projects[0].programs.gp[0][8].objs[0]$;
     computed=0;
     object_type=LeabraNetwork;
     object=$.projects[0].networks[0]$;
     variable="avg_ext_rew";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name="agg_col";
     };
     agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name="select_spec";
      name="select_spec_EQUAL_";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[5] {
     name="avg_cycles";
     monitor=$.projects[0].programs.gp[0][8].objs[0]$;
     computed=0;
     object_type=LeabraNetwork;
     object=$.projects[0].networks[0]$;
     variable="avg_cycles";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name="agg_col";
     };
     agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name="select_spec";
      name="select_spec_EQUAL_";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[6] {
     name="epoch_time_tot";
     monitor=$.projects[0].programs.gp[0][8].objs[0]$;
     computed=1;
     object_type=NULL;
     object=NULL;
     variable="act";
     var_label=;
     name_style=MY_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name="agg_col";
     };
     agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name="select_spec";
      name="select_spec_EQUAL_";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[7] {
     name="epoch_time_usr";
     monitor=$.projects[0].programs.gp[0][8].objs[0]$;
     computed=1;
     object_type=NULL;
     object=NULL;
     variable="act";
     var_label=;
     name_style=MY_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name="agg_col";
     };
     agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name="select_spec";
      name="select_spec_EQUAL_";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
    };
   };
   network=$.projects[0].networks[0]$;
   data=.projects[0].data.gp[1][1]$$<DataTable,EpochOutputData>;
   rmv_orphan_cols=1;
  };
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=Network;
   object_val=$.projects[0].networks[0]$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="network to get data from";
   init_from=NULL;
  };
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="epoch_mon_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=$.projects[0].data.gp[1][1]$;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="data table to write the epoch data to";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="epoch_netmon";
   var_type=T_Object;
   object_type=NetMonitor;
   object_val=$.projects[0].programs.gp[0][8].objs[0]$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="network monitor object that contains full specs for what to record and where to get it";
   init_from=NULL;
  };
  ProgVar @[2] {
   name="epoch_timer";
   var_type=T_Object;
   object_type=TimeUsed;
   object_val=.projects[0].networks[0].epoch_time$$<TimeUsed,epoch_time>;
   objs_ptr=0;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
  AssignExpr @[0] {
   desc="get the epoch timer from current network";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_timer = network.epoch_time";
   pre_compile_code_string="epoch_timer = network.epoch_time";
   result_var=.projects[0].programs.gp[0][8].vars[2]$$;
   expr {
    expr="network.epoch_time";
   };
  };
  MethodCall @[1] {
   desc="set data and network on NetMonitor object";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
   pre_compile_code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
   result_var=NULL;
   obj=.projects[0].programs.gp[0][8].vars[1]$$;
   method=NetMonitor::SetDataNetwork;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=DataTable_ptr;
     type="DataTable*";
     name="dt";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="epoch_mon_data";
     };
    };
    ProgArg @[1] {
     arg_type=Network_ptr;
     type="Network*";
     name="net";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network";
     };
    };
   };
   meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
   meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
  };
  MethodCall @[2] {
   desc="check configuration and emit errors/warnings for problems";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_netmon->CheckConfig(false)";
   pre_compile_code_string="epoch_netmon->CheckConfig(false)";
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][8].vars[1]$;
   method=taBase::CheckConfig;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="quiet";
     required=0;
     def_val="false";
     prev_expr=;
     expr {
      expr="false";
     };
    };
   };
   meth_sig="bool CheckConfig(bool quiet = false)";
   meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
  };
  MethodCall @[3] {
   desc="update the monitor items and data schema based on current settings of NetMonitor";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_netmon->UpdateMonitors(true)";
   pre_compile_code_string="epoch_netmon->UpdateMonitors(true)";
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][8].vars[1]$;
   method=NetMonitor::UpdateMonitors;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="reset_first";
     required=0;
     def_val="false";
     prev_expr=;
     expr {
      expr="true";
     };
    };
   };
   meth_sig="void UpdateMonitors(bool reset_first = false)";
   meth_desc=" old name for UpdateDataTable";
  };
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  MethodCall @[0] {
   desc="add a new blank row to the data";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_mon_data->AddBlankRow()";
   pre_compile_code_string="epoch_mon_data->AddBlankRow()";
   result_var=NULL;
   obj=.projects[0].programs.gp[0][8].vars[0]$$;
   method=DataTable::AddBlankRow;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="int AddBlankRow()";
   meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
  };
  MethodCall @[1] {
   desc="get the new monitor data and stor it into the data table -- this does the main job here";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_netmon->GetMonVals()";
   pre_compile_code_string="epoch_netmon->GetMonVals()";
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][8].vars[1]$;
   method=NetMonitor::GetMonVals;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void GetMonVals()";
   meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
  };
  AssignExpr @[2] {
   desc="get the epoch timer from current network";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_timer = network.epoch_time";
   pre_compile_code_string="epoch_timer = network.epoch_time";
   result_var=$.projects[0].programs.gp[0][8].vars[2]$;
   expr {
    expr="network.epoch_time";
   };
  };
  MethodCall @[3] {
   desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
   pre_compile_code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][8].vars[0]$;
   method=DataTable::SetValColName;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_Variant_ref;
     type="Variant&";
     name="val";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="epoch_timer.used.GetTotSecs()";
     };
    };
    ProgArg @[1] {
     arg_type=const_taString_ref;
     type="taString&";
     name="col_name";
     required=1;
     def_val="\"\"";
     prev_expr=;
     expr {
      expr="\"epoch_time_tot\"";
     };
    };
    ProgArg @[2] {
     arg_type=int;
     type="int";
     name="row";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="-1";
     };
    };
    ProgArg @[3] {
     arg_type=bool;
     type="bool";
     name="quiet";
     required=0;
     def_val="false";
     prev_expr=;
     expr {
      expr=;
     };
    };
   };
   meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
   meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
  };
  MethodCall @[4] {
   desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
   pre_compile_code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][8].vars[0]$;
   method=DataTable::SetValColName;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_Variant_ref;
     type="Variant&";
     name="val";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="epoch_timer.used.GetUsrSecs()";
     };
    };
    ProgArg @[1] {
     arg_type=const_taString_ref;
     type="taString&";
     name="col_name";
     required=1;
     def_val="\"\"";
     prev_expr=;
     expr {
      expr="\"epoch_time_usr\"";
     };
    };
    ProgArg @[2] {
     arg_type=int;
     type="int";
     name="row";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="-1";
     };
    };
    ProgArg @[3] {
     arg_type=bool;
     type="bool";
     name="quiet";
     required=0;
     def_val="false";
     prev_expr=;
     expr {
      expr=;
     };
    };
   };
   meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
   meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
  };
  MethodCall @[5] {
   desc="update after writing new data to monitor data table";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_mon_data->WriteClose()";
   pre_compile_code_string="epoch_mon_data->WriteClose()";
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][8].vars[0]$;
   method=DataTable::WriteClose;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void WriteClose()";
   meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
  };
 };
 step_prog=NULL;
 step_n=1;
 doc {
  name="doc";
  desc=;
  web_doc=1;
  wiki="emergent";
  url="Monitor_Data";
  full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
  text_size=1;
  text=;
  html_text=;
 };
};

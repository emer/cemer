// ta_Dump File v3.0 -- code v7.8.7.0 rev9502
Program .projects[0].programs.gp[3][0] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
  UserDataItem @[1] { };
 };

 ProgObjList @.objs = [32] {
  DataTable @[0] { 
   DataTableCols @.data = [11] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[3] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[7] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    int_Data @[8] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    int_Data @[9] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    bool_Data @[10] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   DataTableCols @.data = [6] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    int_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    int_Data @[3] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    bool_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[2] { 
   DataTableCols @.data = [11] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[3] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[7] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    int_Data @[8] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    int_Data @[9] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    bool_Data @[10] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[3] { 
   DataTableCols @.data = [6] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    String_Data @[3] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    int_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[4] { 
   DataTableCols @.data = [7] {
    String_Data @[0] { };
    String_Data @[1] { };
    String_Data @[2] { };
    String_Data @[3] { };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [2] {
    DataSortEl @[0] { };
    DataSortEl @[1] { };
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[5] { 
   DataTableCols @.data = [5] {
    String_Data @[0] { };
    String_Data @[1] { };
    String_Data @[2] { };
    String_Data @[3] { };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [2] {
    DataSortEl @[0] { };
    DataSortEl @[1] { };
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[6] { 
   DataTableCols @.data = [2] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[7] { 
   DataTableCols @.data = [2] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[8] { 
   DataTableCols @.data = [4] {
    String_Data @[0] { };
    String_Data @[1] { };
    int_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[3] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[9] { 
   DataTableCols @.data = [4] {
    String_Data @[0] { };
    String_Data @[1] { };
    int_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[3] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[10] { 
   DataTableCols @.data = [2] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[11] { 
   DataTableCols @.data = [2] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[12] { 
   DataTableCols @.data = [2] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[13] { 
   DataTableCols @.data = [7] {
    String_Data @[0] { };
    String_Data @[1] { };
    String_Data @[2] { };
    String_Data @[3] { };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[14] { 
   DataTableCols @.data = [7] {
    String_Data @[0] { };
    String_Data @[1] { };
    String_Data @[2] { };
    String_Data @[3] { };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[15] { 
   DataTableCols @.data = [7] {
    String_Data @[0] { };
    String_Data @[1] { };
    String_Data @[2] { };
    String_Data @[3] { };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[16] { 
   DataTableCols @.data = [7] {
    String_Data @[0] { };
    String_Data @[1] { };
    String_Data @[2] { };
    String_Data @[3] { };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[17] { 
   DataTableCols @.data = [7] {
    String_Data @[0] { };
    String_Data @[1] { };
    String_Data @[2] { };
    String_Data @[3] { };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[18] { 
   DataTableCols @.data = [7] {
    String_Data @[0] { };
    String_Data @[1] { };
    String_Data @[2] { };
    String_Data @[3] { };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[19] { 
   DataTableCols @.data = [2] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[20] { 
   DataTableCols @.data = [7] {
    String_Data @[0] { };
    String_Data @[1] { };
    String_Data @[2] { };
    String_Data @[3] { };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [6] {
    DataSortEl @[0] { };
    DataSortEl @[1] { };
    DataSortEl @[2] { };
    DataSortEl @[3] { };
    DataSortEl @[4] { };
    DataSortEl @[5] { };
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[21] { 
   DataTableCols @.data = [7] {
    String_Data @[0] { };
    String_Data @[1] { };
    String_Data @[2] { };
    String_Data @[3] { };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [6] {
    DataSortEl @[0] { };
    DataSortEl @[1] { };
    DataSortEl @[2] { };
    DataSortEl @[3] { };
    DataSortEl @[4] { };
    DataSortEl @[5] { };
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[22] { 
   DataTableCols @.data = [2] {
    String_Data @[0] { };
    int_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[23] { 
   DataTableCols @.data = [7] {
    String_Data @[0] { };
    String_Data @[1] { };
    String_Data @[2] { };
    String_Data @[3] { };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[24] { 
   DataTableCols @.data = [2] {
    String_Data @[0] { };
    int_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[25] { 
   DataTableCols @.data = [7] {
    String_Data @[0] { };
    String_Data @[1] { };
    String_Data @[2] { };
    String_Data @[3] { };
    int_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataGroupSpec @[26] { 
   DataOpList @.ops = [1] {
    DataGroupEl @[0] { };
   };
  };
  DataGroupSpec @[27] { 
   DataOpList @.ops = [2] {
    DataGroupEl @[0] { };
    DataGroupEl @[1] { };
   };
  };
  DataGroupSpec @[28] { 
   DataOpList @.ops = [2] {
    DataGroupEl @[0] { };
    DataGroupEl @[1] { };
   };
  };
  DataGroupSpec @[29] { 
   DataOpList @.ops = [4] {
    DataGroupEl @[0] { };
    DataGroupEl @[1] { };
    DataGroupEl @[2] { };
    DataGroupEl @[3] { };
   };
  };
  DataSelectSpec @[30] { 
   DataOpList @.ops = [1] {
    DataSelectEl @[0] { };
   };
  };
  DataSelectSpec @[31] { 
   DataOpList @.ops = [1] {
    DataSelectEl @[0] { };
   };
  };
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [1] {
  ProgVar @[0] { };
 };

 ProgVar_List @.vars = [50] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
  ProgVar @[3] { };
  ProgVar @[4] { };
  ProgVar @[5] { };
  ProgVar @[6] { };
  ProgVar @[7] { };
  ProgVar @[8] { };
  ProgVar @[9] { };
  ProgVar @[10] { };
  ProgVar @[11] { };
  ProgVar @[12] { };
  ProgVar @[13] { };
  ProgVar @[14] { };
  ProgVar @[15] { };
  ProgVar @[16] { };
  ProgVar @[17] { };
  ProgVar @[18] { };
  ProgVar @[19] { };
  ProgVar @[20] { };
  ProgVar @[21] { };
  ProgVar @[22] { };
  ProgVar @[23] { };
  ProgVar @[24] { };
  ProgVar @[25] { };
  ProgVar @[26] { };
  ProgVar @[27] { };
  ProgVar @[28] { };
  ProgVar @[29] { };
  ProgVar @[30] { };
  ProgVar @[31] { };
  ProgVar @[32] { };
  ProgVar @[33] { };
  ProgVar @[34] { };
  ProgVar @[35] { };
  ProgVar @[36] { };
  ProgVar @[37] { };
  ProgVar @[38] { };
  ProgVar @[39] { };
  ProgVar @[40] { };
  ProgVar @[41] { };
  ProgVar @[42] { };
  ProgVar @[43] { };
  ProgVar @[44] { };
  ProgVar @[45] { };
  ProgVar @[46] { };
  ProgVar @[47] { };
  ProgVar @[48] { };
  ProgVar @[49] { };
 };

 Function_List @.functions = [23] {
  Function @[0] { 
   ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgEl_List @.fun_code = [10] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [5] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
     };
    };
    Comment @[4] { };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [10] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
      ProgArg @[6] { };
      ProgArg @[7] { };
      ProgArg @[8] { };
      ProgArg @[9] { };
     };
    };
    MethodCall @[6] { 
     ProgArg_List @.meth_args = [12] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
      ProgArg @[6] { };
      ProgArg @[7] { };
      ProgArg @[8] { };
      ProgArg @[9] { };
      ProgArg @[10] { };
      ProgArg @[11] { };
     };
    };
    MethodCall @[7] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[8] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[9] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Function @[1] { 
   ProgVar_List @.args = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   ProgEl_List @.fun_code = [17] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [3] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    DataProcCall @[3] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    UserScript @[6] { };
    Comment @[7] { };
    DataProcCall @[8] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    MethodCall @[9] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[10] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    Comment @[11] { };
    MethodCall @[12] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    ForLoop @[13] { 
     ProgEl_List @.loop_code = [3] {
      AssignExpr @[0] { };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MatrixAssign @[2] { };
     };
    };
    UserScript @[14] { };
    MethodCall @[15] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[16] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Function @[2] { 
   ProgVar_List @.args = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   ProgEl_List @.fun_code = [10] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [3] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    DataProcCall @[3] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    UserScript @[4] { };
    Comment @[5] { };
    DataProcCall @[6] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    UserScript @[7] { };
    MethodCall @[8] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[9] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Function @[3] { 
   ProgVar_List @.args = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   ProgEl_List @.fun_code = [7] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [5] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    ForLoop @[5] { 
     ProgEl_List @.loop_code = [6] {
      AssignExpr @[0] { };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MatrixAssign @[2] { };
      AssignExpr @[3] { };
      MethodCall @[4] { 
       ProgArg_List @.meth_args = [13] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
	ProgArg @[7] { };
	ProgArg @[8] { };
	ProgArg @[9] { };
	ProgArg @[10] { };
	ProgArg @[11] { };
	ProgArg @[12] { };
       };
      };
      MatrixAssign @[5] { };
     };
    };
    MethodCall @[6] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Function @[4] { 
   ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgEl_List @.fun_code = [8] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    Comment @[1] { };
    PrintVar @[2] { };
    FunctionCall @[3] { 
     ProgArg_List @.fun_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    If @[4] { 
     ProgEl_List @.true_code = [2] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      FunctionCall @[1] { 
       ProgArg_List @.fun_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
     };
    };
    Else @[5] { 
     ProgEl_List @.else_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
     };
    };
    FunctionCall @[6] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[7] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
   };
  };
  Function @[5] { 
   ProgVar_List @.args = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   ProgEl_List @.fun_code = [8] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [6] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
      ProgVar @[5] { };
     };
    };
    AssignExpr @[1] { };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    ForLoop @[6] { 
     ProgEl_List @.loop_code = [9] {
      AssignExpr @[0] { };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      AssignExpr @[3] { };
      MethodCall @[4] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[5] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[6] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MatrixAssign @[7] { };
      MatrixAssign @[8] { };
     };
    };
    MethodCall @[7] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Function @[6] { 
   ProgVar_List @.args = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   ProgEl_List @.fun_code = [4] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [6] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
      ProgVar @[5] { };
     };
    };
    AssignExpr @[1] { };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    ForLoop @[3] { 
     ProgEl_List @.loop_code = [4] {
      AssignExpr @[0] { };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      AssignExpr @[2] { };
      MatrixAssign @[3] { };
     };
    };
   };
  };
  Function @[7] { 
   ProgVar_List @.args = [5] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
   };

   ProgEl_List @.fun_code = [4] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
     };
    };
    If @[3] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
     };
    };
   };
  };
  Function @[8] { 
   ProgVar_List @.args = [4] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
   };

   ProgEl_List @.fun_code = [2] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    DataGenCall @[1] { 
     ProgArg_List @.meth_args = [7] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
      ProgArg @[6] { };
     };
    };
   };
  };
  Function @[9] { 
   ProgVar_List @.args = [7] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
   };

   ProgEl_List @.fun_code = [7] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [1] {
      ProgVar @[0] { };
     };
    };
    AssignExpr @[1] { };
    FunctionCall @[2] { 
     ProgArg_List @.fun_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    FunctionCall @[3] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[4] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    If @[5] { 
     ProgEl_List @.true_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [5] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
       };
      };
     };
    };
    Else @[6] { 
     ProgEl_List @.else_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
   };
  };
  Function @[10] { 
   ProgVar_List @.args = [5] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
   };

   ProgEl_List @.fun_code = [8] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [10] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
      ProgArg @[6] { };
      ProgArg @[7] { };
      ProgArg @[8] { };
      ProgArg @[9] { };
     };
    };
    DataProcCall @[3] { 
     ProgArg_List @.meth_args = [15] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
      ProgArg @[6] { };
      ProgArg @[7] { };
      ProgArg @[8] { };
      ProgArg @[9] { };
      ProgArg @[10] { };
      ProgArg @[11] { };
      ProgArg @[12] { };
      ProgArg @[13] { };
      ProgArg @[14] { };
     };
    };
    DataProcCall @[4] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    DataProcCall @[6] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    MethodCall @[7] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Function @[11] { 
   ProgVar_List @.args = [5] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
   };

   ProgEl_List @.fun_code = [17] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [10] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
      ProgArg @[6] { };
      ProgArg @[7] { };
      ProgArg @[8] { };
      ProgArg @[9] { };
     };
    };
    DataGroupProg @[3] { 
     DataOpList @.group_spec.ops = [2] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
     };
    };
    DataProcCall @[4] { 
     ProgArg_List @.meth_args = [15] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
      ProgArg @[6] { };
      ProgArg @[7] { };
      ProgArg @[8] { };
      ProgArg @[9] { };
      ProgArg @[10] { };
      ProgArg @[11] { };
      ProgArg @[12] { };
      ProgArg @[13] { };
      ProgArg @[14] { };
     };
    };
    DataJoinProg @[5] { };
    DataJoinProg @[6] { };
    MethodCall @[7] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[8] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[9] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[10] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[11] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[12] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    DataProcCall @[13] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    MethodCall @[14] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    DataProcCall @[15] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    MethodCall @[16] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Function @[12] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [5] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    AssignExpr @[3] { };
    If @[4] { 
     ProgEl_List @.true_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
     };
    };
   };
  };
  Function @[13] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [5] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    AssignExpr @[3] { };
    If @[4] { 
     ProgEl_List @.true_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
     };
    };
   };
  };
  Function @[14] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [6] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    FunctionCall @[1] { 
     ProgArg_List @.fun_args = [0] {
     };
    };
    FunctionCall @[2] { 
     ProgArg_List @.fun_args = [0] {
     };
    };
    If @[3] { 
     ProgEl_List @.true_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [0] {
       };
      };
     };
    };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Function @[15] { 
   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgEl_List @.fun_code = [17] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [8] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
      ProgVar @[5] { };
      ProgVar @[6] { };
      ProgVar @[7] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    AssignExpr @[2] { };
    AssignExpr @[3] { };
    AssignExpr @[4] { };
    AssignExpr @[5] { };
    AssignExpr @[6] { };
    AssignExpr @[7] { };
    AssignExpr @[8] { };
    AssignExpr @[9] { };
    AssignExpr @[10] { };
    FunctionCall @[11] { 
     ProgArg_List @.fun_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MiscCall @[12] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    If @[13] { 
     ProgEl_List @.true_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [7] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
       };
      };
     };
    };
    If @[14] { 
     ProgEl_List @.true_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [5] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
       };
      };
     };
    };
    Else @[15] { 
     ProgEl_List @.else_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [5] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
       };
      };
     };
    };
    FunctionCall @[16] { 
     ProgArg_List @.fun_args = [0] {
     };
    };
   };
  };
  Function @[16] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [2] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    FunctionCall @[1] { 
     ProgArg_List @.fun_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Function @[17] { 
   ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgEl_List @.fun_code = [7] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [10] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
      ProgArg @[6] { };
      ProgArg @[7] { };
      ProgArg @[8] { };
      ProgArg @[9] { };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    If @[4] { 
     ProgEl_List @.true_code = [2] {
      CssExpr @[0] { };
      AssignExpr @[1] { };
     };
    };
    Else @[5] { 
     ProgEl_List @.else_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
     };
    };
    ReturnExpr @[6] { };
   };
  };
  Function @[18] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [2] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    ReturnExpr @[1] { };
   };
  };
  Function @[19] { 
   ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgEl_List @.fun_code = [9] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [1] {
      ProgVar @[0] { };
     };
    };
    If @[1] { 
     ProgEl_List @.true_code = [1] {
      MiscCall @[0] { 
       ProgArg_List @.meth_args = [9] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
	ProgArg @[7] { };
	ProgArg @[8] { };
       };
      };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    Comment @[5] { };
    ForLoop @[6] { 
     ProgEl_List @.loop_code = [4] {
      If @[0] { 
       ProgEl_List @.true_code = [2] {
	AssignExpr @[0] { };
	If @[1] { 
	 ProgEl_List @.true_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	   };
	  };
	 };
	};
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      AssignExpr @[3] { };
     };
    };
    MethodCall @[7] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    AssignExpr @[8] { };
   };
  };
  Function @[20] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [3] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    If @[1] { 
     ProgEl_List @.true_code = [2] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      AssignExpr @[1] { };
     };
    };
    Else @[2] { 
     ProgEl_List @.else_code = [2] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      AssignExpr @[1] { };
     };
    };
   };
  };
  Function @[21] { 
   ProgVar_List @.args = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   ProgEl_List @.fun_code = [13] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    If @[1] { 
     ProgEl_List @.true_code = [1] {
      MiscCall @[0] { 
       ProgArg_List @.meth_args = [9] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
	ProgArg @[7] { };
	ProgArg @[8] { };
       };
      };
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [2] {
      AssignExpr @[0] { };
      If @[1] { 
       ProgEl_List @.true_code = [1] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[6] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[7] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[8] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    If @[9] { 
     ProgEl_List @.true_code = [1] {
      AssignExpr @[0] { };
     };
    };
    MethodCall @[10] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[11] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    AssignExpr @[12] { };
   };
  };
  Function @[22] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [4] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    If @[1] { 
     ProgEl_List @.true_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
     };
    };
    ElseIf @[2] { 
     ProgEl_List @.true_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
     };
    };
    Else @[3] { 
     ProgEl_List @.else_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
     };
    };
   };
  };
 };

 ProgEl_List @.init_code = [4] {
  AssignExpr @[0] { };
  AssignExpr @[1] { };
  AssignExpr @[2] { };
  MemberMethodCall @[3] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
 };

 ProgEl_List @.prog_code = [3] {
  LocalVars @[0] { 
   ProgVar_List @.local_vars = [0] {
   };
  };
  If @[1] { 
   ProgEl_List @.true_code = [1] {
    FunctionCall @[0] { 
     ProgArg_List @.fun_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  FunctionCall @[2] { 
   ProgArg_List @.fun_args = [0] {
   };
  };
 };
};
Program .projects[0].programs.gp[3][0] {
 UserDataItem_List @*(.user_data_) {
  name="UserDataItem_List_1977";
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {
   name="DocLink";
   doc=.projects[0].programs.gp[3][0].doc$$;
  };
  UserDataItem @[1] {
   name="user_pinned";
   value 1 0=1;
   val_type_fixed=0;
  };
 };
 name="ObjectsEnv";
 short_nm="bjctsn";
 tags="Environment, Objects";
 desc="manages lists of objects, with training and testing lists, for object recognition models";
 flags=NO_STOP_STEP;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=taNBase;
  el_def=0;
  DataTable @[0] {
   name="ObjLists";
   desc="named object lists and associated parameters -- configurations can specify simple name";
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.3033854;
       val_type_fixed=0;
      };
     };
     name="objlist_id";
     desc="identifier for this type of configuration";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=233;
     ar {
      name="ar";
     [84] "CU3D_debug";"CU3D_debug_server";"TI20_saliency";"TI20_saliency_xform";"CU3D_100_plus_lr20_u20_nb";"CU3D_100_std_train_v2pre_test";"CU3D_100_std_train_v4pre";"CU3D_100_std_train_v4pre_nov2";"CU3D_100_std_train_f1";"CU3D_100_std_train_f2";
"CU3D_100_std_train_f2_sc_1_tr15";"CU3D_100_std_train_f4";"CU3D_100_std_train_f8";"CU3D_100_std_train_f8_v2trc";"CU3D_100_std_train_f8_v4trc";"CU3D_100_std_train_f8_3alpha";"CU3D_100_std_train_f8_sc3_tr15";"CU3D_100_std_train_f8_sc3_tr15_gaus";"CU3D_100_std_train_f8_sc5_tr3";"CU3D_100_std_train_f8_sc5_tr3_gaus";
"CU3D_100_std_train_f8_sc5_tr3g_long";"CU3D_100_std_train_f8_sc5_tr15_gaus";"CU3D_100_std_train_f8_sc5_tr3_sem";"CU3D_100_std_train_f4_v2trc";"CU3D_100_std_train_f4_v4trc";"CU3D_100_std_train_f4_v2trc_pre";"CU3D_100_std_train_f4_3alpha";"CU3D_100_std_train_f4_sc5_tr15";"CU3D_100_std_train_f4_sc3_tr3_gaus";"CU3D_100_std_train_f4_sc3_tr15";
"CU3D_100_std_train_f4_sc3_tr15_gaus";"CU3D_100_std_train_f4_sc5_tr25";"CU3D_100_std_train_f4_te16_qtr";"CU3D_100_std_train_fmv4";"CU3D_100_std_train_fmv2";"CU3D_100_std_train_100";"CU3D_100_std_train_100cont";"CU3D_100_orig_trans_bg";"CU3D_100_figgr_test";"CU3D_100_std_train_context";
"CU3D_100_semantics_nooutput";"CU3D_100_std_train_identification";"CU3D_100_std_test_train_all";"CU3D_100_std_test_all";"CU3D_100_IT_attractor_test";"CU3D_100_IT_category_mask_test";"CU3D_100_blobo_test";"CU3D_100_blobo_ctxt_bias";"CU3D_100_blobo_cycletraj";"CU3D_100_ffa_train";
"TI46_digits";"TI46_full_speaker_recognition";"CU3D_100_orig_50trn_50tst";"CU3D_100_50trn_50tst_MetaTest";"CU3D_100_50trn_50tst_server";"CU3D_100_50trn_50tst_MetaTest_perirhinal";"CU3D_100_actrf_test";"CU3D_multiobj_train";"CU3D_multiobj_test";"CU3D_multiobj_binding";
"TI46_digits_actrf";"creatures_train";"Kreiman_IFP_train";"Kreiman_IFP_test";"Kreiman_IFP_bubbles";"Folstein_cars_morph";"Folstein_cars_morph_test";"maskxblob";"maskxblob_test";"pubfig83";
"pubfig83_test";"blur_debug";"CU3D_100_blur_test";"probe_Hegde_all";"probe_Hegde_All_f8_untrained";"probe_Hegde_contour";"probe_Hegde_contour_f8_untrained";"probe_Hegde_gradient";"probe_Hegde_gradient_f8_untrained";"CU3D_100_orig_lr20_u20_nb";
"CU3D_20_easy_orig";"CU3D_30_easy_orig";"CU3D_40_easy_orig";"CU3D_50_easy_orig";     };
    };
    String_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.4088542;
       val_type_fixed=0;
      };
     };
     name="description";
     desc="description of this configuration";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=314;
     ar {
      name="ar";
     [84] "CU3D debug lesson -- 5 cats, 5 exemplars each for training set. frequent testing variables so we don't have to wait for CU3D_100_std to load, split items, etc. (slow!)";"CU3D debug lesson with server interface (uses special OID that preallocates output units)";"TI20 using saliency feats from telluride";"TI20 using saliency feats from telluride with transformsm";"standard CU3D 100, left-right 20 deg, up 20, no backgrounds, plus extra exemplars added in 2016";"standard CU3D 100 -- train on all categs -- pretrain v2 reps only";"standard CU3D 100 -- train on all categs -- pretrain v4 reps -- loading v2 weights";"standard CU3D 100 -- train on all categs -- pretrain v4 reps -- random v2 weights";"standard CU3D 100 -- train on all categs, 2 leave out test indivs";"standard CU3D 100 -- train on all categs, 2 leave out test indivs";
"standard CU3D 100 -- train on all categs, 2 leave out test indivs";"standard CU3D 100 -- train on all categs, 2 leave out test indivs";"standard CU3D 100 -- train on all categs, 2 leave out test indivs";"simultaneous v2trc and objrec training!";"simultaneous v2trc, v4trc, and objrec training!";"same as v2trc, without the trc.. control condition";"standard, scale .3:1.1, trans .15";"standard, scale .3:1.1, trans .15";"standard, scale .5:1.1, trans .3";"standard, scale .5:1.1, trans .3, gaussian";
"standard, scale .5:1.1, trans .3, gaussian, long-train case (2000 epcs)";"standard, scale .5:1.1, trans .15, gaussian";"standard, scale .5:1.1, trans .3, semantics";"simultaneous v2trc and objrec training!";"simultaneous v2trc, v4trc, and objrec training!";"simultaneous v2trc and objrec training -- pretrained weights";"same as v2trc, without the trc.. control condition";"standard CU3D 100 -- train on all categs, 2 leave out test indivs";"standard, scale .3:1.1, trans .3, gaussian";"standard CU3D 100 -- train on all categs, 2 leave out test indivs";
"standard CU3D 100 -- train on all categs, 2 leave out test indivs";"standard CU3D 100 -- train on all categs, 2 leave out test indivs";"standard CU3D 100 -- train on all categs, 2 leave out test indivs -- use TE16_qtr transforms";"standard CU3D 100 -- train on all categs -- loading v4 weights";"standard CU3D 100 -- train on all categs -- loading v4 weights";"standard CU3D 100 -- train on all categs, 2 leave out test indivs -- just for 100 epochs";"standard CU3D 100 -- train on all categs, 2 leave out test indivs -- continue after 100 epochs";"orig + transparent backgrounds -- useful for composing object images aginst backgrounds";"figure-ground testing";"standard CU3D 100 -- train on all categs, 2 leave out test indivs";
"standard CU3D 100 -- train on all categs, 2 leave out test indivs";"standard CU3D 100 -- train on all categs, 2 leave out test indivs";"standard CU3D 100 -- test on all testing AND training items";"standard CU3D 100 -- test on all testing AND training items";"standard CU3D 100 -- test on all testing AND training items";"does category masked cycle-wise IT recording. uses blobo trials";"CU3D 100 blobo test";"CU3D 100 blobo test with context bias from resp-set";"CU3D 100 blobo test with cycletraj (use cmp trial)";"CU3D 100 training with FFA activated";
"TI-46 speaker-invariant digit recognition 0-9";"TI46 invariant speaker recognition";"orig CU3D 100 3d objs with 50 trained categs and 50 test categs";"metacognitive testing with 50/50 guys -- most params don't matter -- JUST runs test on given weights file";"metacognitive testing with 50/50 guys -- most params don't matter -- for server mode";"metacognitive testing with 50/50 guys -- most params don't matter -- JUST runs test on given weights file";"CU3D actrf test -- special run prog, load train wts, no semantics, no transforms";"CU3D multiple object recognition training -- 6x5 hard training items";"CU3D multiple object recognition test on everything";"CU3D multiple object recognition binding test";
"TI-46 actrf";"creature training -- multiple OIDs that counterbalance basic/subord across families so just use one here and specify from command line otherwise";"Stimuli from Gabriel Kreiman's IFP experiments";"Load Kreiman IFP trained weights and record IT";"Load Kreiman IFP trained weights and do BubbleMask experiment ";"Jonathan Folstein's car morph dataset -- one dimension relevant, one irrelevant (specified by OID). NOTE: OID fully specifies training/testing";"Jonathan Folstein's car morph dataset -- one dimension relevant, one irrelevant (specified by OID). Testing only";"orig 3d objs, with maskxblob stimuli -- test on 2 like std_test";"train on actual maskxblob stimuli -- test on 2 like std_test";"pubfig83 ??";
"pubfig83 testing";"CU3D blur with just a few items to make the turnaround time short";"CU3D 100 blur test";"all Hegde and Van Essen probe stimuli";"collect activations for all Hegde and Van Essen probe stimuli - trials should equal number of different probes";"only the Hegde and Van Essen contour stimuli";"only the Hegde and Van Essen \"contour stimuli\" - trials should equal number of different probes";"only the Hegde and Van Essen gradient stimuli";"only the Hegde and Van Essen \"gradient stimuli\" - trials should equal number of different probes";"standard CU3D 100, left-right 20 deg, up 20, no backgrounds -- original exemplars from before 2016";
"Subset of 20 easier items from original set";"Subset of 30 easier items from original set";"Subset of 40 easier items from original set";"Subset of 50 easier items from original set";     };
    };
    String_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.5989583;
       val_type_fixed=0;
      };
     };
     name="oid_filename";
     desc="full relative path (from project) to OID file containing list of objects and other parameters";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=460;
     ar {
      name="ar";
     [84] "images/CU3D_100_renders_lr20_u30_nb/CU3D_debug.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_debug_prealloc.dat";"images/sound/TI-46/ti20/ti20_telluride_saliency/all-data.dat";"images/sound/TI-46/ti20/ti20_telluride_saliency_110x110/all-data.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";
"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";
"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";
"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_renders_lr20_u30_transbg/CU3D_100_renders_lr20_u30_transbg.dat";"images/CU3D_100_renders_lr20_u30_transbg/CU3D_100_renders_lr20_u30_transbg.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";
"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";
"images/sound/TI-46/TI46_fm_emergent_DataTable_format_img_centered/TI46_digits.dat";"images/sound/TI-46/TI46_fm_emergent_DataTable_format_img_centered/TI46_speaker_recognition.oid";"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb_50_train50_test50.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb_50_train50_test50.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb_50_train50_test50.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb_50_train50_test50.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_multiobj/CU3D_6x5_hard_train/CU3D_6x5_hard_train.dat";"images/CU3D_multiobj/CU3D_6x5_hard_test/CU3D_6x5_hard_test.dat";"images/CU3D_multiobj/CU3D_6x5_hard_test/CU3D_6x5_hard_test.dat";
"images/sound/TI-46/TI46_fm_emergent_DataTable_format_img_centered/TI46_digits.dat";"images/creatures/master/creatures_train_a_basic_s_subord_nsc_oid.dat";"images/Kreiman_IFP/images_norm/Kreiman_IFP_categorization_train_all.dat";"images/Kreiman_IFP/images_norm/Kreiman_IFP_categorization.dat";"images/Kreiman_IFP/images_norm/Kreiman_IFP_categorization.dat";"images/cars_morph_folstein/CombinedSpaceHorizBoundary.dat";"images/cars_morph_folstein/CombinedSpaceHorizBoundary.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb_maskxblob.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb_maskxblob.dat";"images/pubfig83/pubfig83_oid.dat";
"images/pubfig83/pubfig83_oid.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_debug.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/probes/probes.dat";"images/probes/probes.dat";"images/probes/probes_contour_only.dat";"images/probes/probes_contour_only.dat";"images/probes/probes_gradient_only.dat";"images/probes/probes_gradient_only.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb.dat";
"images/CU3D_100_renders_lr20_u30_nb/CU3D_20_easy.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_30_easy.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_40_easy.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_50_easy.dat";     };
    };
    String_Data @[3] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.3268229;
       val_type_fixed=0;
      };
     };
     name="oid_filename_categs";
     desc="OID file to use for defining the full list of categories and individuals -- leave blank to use the basic oid_filename for this -- this is useful for keeping output units consistent while using subsets of items";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=251;
     ar {
      name="ar";
     [84] "images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_models/CU3D_100_models.dat";;;"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_plus_models/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";
"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";
"images/CU3D_100_plus_models/CU3D_100_models.dat";"images/CU3D_100_plus_models/CU3D_100_models.dat";;;;;;;;;
;;;;;;;"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";
"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";
;;"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";;;"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";
"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";;;;"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";;"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";;
"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_plus_renders/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb.dat";
"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb.dat";"images/CU3D_100_renders_lr20_u30_nb/CU3D_100_renders_lr20_u30_nb.dat";     };
    };
    String_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1822917;
       val_type_fixed=0;
      };
     };
     name="sound_file_path";
     desc="path for finding sound files for the names of the objects";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=140;
     ar {
      name="ar";
     [84] ;;;;;;;;;;
;;"./images/sound/cu3d_100";"./images/sound/cu3d_100";"./images/sound/cu3d_100";"./images/sound/cu3d_100";;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;     };
    };
    String_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1770833;
       val_type_fixed=0;
      };
     };
     name="sound_include_filter";
     desc="list of strings (space separated) to include in list -- file names that contain ANY of these strings will be include (OR logical op)";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=136;
     ar {
      name="ar";
     [84] ;;;;;;;;;;
;;"_ro.wav";"_ro.wav";"_ro.wav _jr.wav";"_ro.wav _jr.wav _pm.wav";;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;     };
    };
    String_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1940104;
       val_type_fixed=0;
      };
     };
     name="sound_exclude_filter";
     desc="list of strings (space separated) to exclude in active list -- file names that contain ANY of these strings will be excluded";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=149;
     ar {
      name="ar";
     [84] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;     };
    };
    int_Data @[7] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.1210938;
       val_type_fixed=0;
      };
     };
     name="objs_per_epc";
     desc="total number of distinct object models per epoch -- must keep this reasonably small to take advantage of preloading the objects";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=93;
     ar {
      name="ar";
     [84] -1;25;-1;-1;-1;25;25;25;25;25;
25;25;25;25;25;25;25;10;10;10;
1;20;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;-1;0;0;
0;0;0;0;0;0;0;0;0;0;
-1;-1;-1;0;0;0;0;-1;-1;0;
0;-1;-1;-1;0;-1;0;-1;0;-1;
0;0;0;-1;0;-1;0;-1;0;-1;
-1;-1;-1;-1;     };
    };
    int_Data @[8] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.08984375;
       val_type_fixed=0;
      };
     };
     name="train_size";
     desc="number of items to include in the training set: set to -1 to include all the remainder after the specified number of testing items is taken out (note: train_size and test_size cannot both be -1!)";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=69;
     ar {
      name="ar";
     [84] -1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;-1;0;0;
0;0;0;0;0;0;0;0;0;0;
-1;-1;-1;0;0;0;0;-1;-1;0;
0;-1;-1;-1;0;-1;0;-1;0;-1;
0;0;0;-1;0;-1;0;-1;0;-1;
-1;-1;-1;-1;     };
    };
    int_Data @[9] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.06770834;
       val_type_fixed=0;
      };
     };
     name="test_size";
     desc="number of items to include in the testing set: set to -1 to include all the remainder after the specified number of training items is taken out (note: train_size and test_size cannot both be -1!)";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=52;
     ar {
      name="ar";
     [84] 2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;2;0;0;
0;0;0;0;0;0;0;0;0;0;
2;2;2;0;0;0;0;1;1;0;
0;2;1;1;0;2;0;2;0;10;
0;0;0;0;0;0;0;0;0;2;
2;2;2;2;     };
    };
    bool_Data @[10] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_1989";
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.1315104;
       val_type_fixed=0;
      };
     };
     name="split_on_indivs";
     desc="perform train/test split in terms of individual objects within category+subcat, not individual images (can be multiple images per individual object)";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=101;
     ar {
      name="ar";
     [84] true;true;true;true;true;true;true;true;true;true;
true;true;true;true;true;true;true;false;false;false;
false;false;false;false;false;false;false;false;false;false;
false;false;false;false;false;false;false;true;false;false;
false;false;false;false;false;false;false;false;false;false;
true;true;true;false;false;false;false;true;true;false;
false;true;true;true;false;true;false;true;false;true;
false;false;false;true;false;true;false;true;false;true;
true;true;true;true;     };
    };
   };
   data_flags=SAVE_ROWS|AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [24] 4;79;80;81;82;83;0;37;52;57;
58;2;3;50;51;61;62;63;65;67;
69;73;75;77;   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[1] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_916";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="user_pinned";
     value 1 0=0;
     val_type_fixed=0;
    };
   };
   name="ConfigTable";
   desc="different configurations of the system";
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.3043995;
       val_type_fixed=0;
      };
     };
     name="config_id";
     desc="identifier for this type of configuration";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=256;
     ar {
      name="ar";
     [80] "CU3D_debug";"CU3D_debug_server";"TI20_saliency";"TI20_saliency_xform";"CU3D_100_std_train_v2pre";"CU3D_100_std_train_v2pre_test";"CU3D_100_std_train_v4pre";"CU3D_100_std_train_v4pre_nov2";"CU3D_100_std_train_f1";"CU3D_100_std_train_f2";
"CU3D_100_std_train_f2_sc_1_tr15";"CU3D_100_std_train_f4";"CU3D_100_std_train_f8";"CU3D_100_std_train_f8_v2trc";"CU3D_100_std_train_f8_v4trc";"CU3D_100_std_train_f8_3alpha";"CU3D_100_std_train_f8_sc3_tr15";"CU3D_100_std_train_f8_sc3_tr15_gaus";"CU3D_100_std_train_f8_sc5_tr3";"CU3D_100_std_train_f8_sc5_tr3_gaus";
"CU3D_100_std_train_f8_sc5_tr3g_long";"CU3D_100_std_train_f8_sc5_tr15_gaus";"CU3D_100_std_train_f8_sc5_tr3_sem";"CU3D_100_std_train_f4_v2trc";"CU3D_100_std_train_f4_v4trc";"CU3D_100_std_train_f4_v2trc_pre";"CU3D_100_std_train_f4_3alpha";"CU3D_100_std_train_f4_sc5_tr15";"CU3D_100_std_train_f4_sc3_tr3_gaus";"CU3D_100_std_train_f4_sc3_tr15";
"CU3D_100_std_train_f4_sc3_tr15_gaus";"CU3D_100_std_train_f4_sc5_tr25";"CU3D_100_std_train_f4_te16_qtr";"CU3D_100_std_train_fmv4";"CU3D_100_std_train_fmv2";"CU3D_100_std_train_100";"CU3D_100_std_train_100cont";"CU3D_100_figgr_train";"CU3D_100_figgr_test";"CU3D_100_std_train_context";
"CU3D_100_semantics_nooutput";"CU3D_100_std_train_identification";"CU3D_100_std_test_train_all";"CU3D_100_std_test_all";"CU3D_100_IT_attractor_test";"CU3D_100_IT_category_mask_test";"CU3D_100_blobo_test";"CU3D_100_blobo_ctxt_bias";"CU3D_100_blobo_cycletraj";"CU3D_100_ffa_train";
"TI46_digits";"TI46_full_speaker_recognition";"CU3D_100_50trn_50tst";"CU3D_100_50trn_50tst_MetaTest";"CU3D_100_50trn_50tst_server";"CU3D_100_50trn_50tst_MetaTest_perirhinal";"CU3D_100_actrf_test";"CU3D_multiobj_train";"CU3D_multiobj_test";"CU3D_multiobj_binding";
"TI46_digits_actrf";"creatures_train";"Kreiman_IFP_train";"Kreiman_IFP_test";"Kreiman_IFP_bubbles";"Folstein_cars_morph_train";"Folstein_cars_morph_test";"maskxblob_train";"maskxblob_test";"pubfig83_train";
"pubfig83_test";"blur_debug";"CU3D_100_blur_test";"probe_Hegde_All_f8_trained";"probe_Hegde_All_f8_untrained";"probe_Hegde_contour_f8_trained";"probe_Hegde_contour_f8_untrained";"probe_Hegde_gradient_f8_trained";"probe_Hegde_gradient_f8_untrained";"CU3D_100_std_train_v2pre";
     };
    };
    int_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.08085612;
       val_type_fixed=0;
      };
     };
     name="train_size";
     desc="number of items to include in the training set: set to -1 to include all the remainder after the specified number of testing items is taken out (note: train_size and test_size cannot both be -1!)";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=68;
     ar {
      name="ar";
     [80] -1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
     };
    };
    int_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.07491082;
       val_type_fixed=0;
      };
     };
     name="test_size";
     desc="number of items to include in the testing set: set to -1 to include all the remainder after the specified number of training items is taken out (note: train_size and test_size cannot both be -1!)";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=63;
     ar {
      name="ar";
     [80] 2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;1;1;1;
2;2;1;1;1;2;2;2;2;10;
10;2;2;0;0;0;0;0;0;2;
     };
    };
    int_Data @[3] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.09155767;
       val_type_fixed=0;
      };
     };
     name="train_ncats";
     desc="how many categories to use for training -- useful if you have an OID with a large number of categories but want to randomly choose a subset to train on. NOTE: default interleaved testing will test from same N categories. -1 (default) denotes use all categories";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=77;
     ar {
      name="ar";
     [80] -1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
     };
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.08680142;
       val_type_fixed=0;
      };
     };
     name="test_nreps";
     desc="number of repetitions per image with different transform params to run during testing -- the response for each such transform acts as an individual vote, and a weighted majority rule is used to decide networks overall output -- this is like making multiple saccades to an object, and integrating over them -- typically improves accuracy significantly, but costs in time, so typically just used in testing and not training.";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=73;
     ar {
      name="ar";
     [80] 7;2;1;1;7;7;7;7;7;7;
7;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;7;7;7;7;7;7;7;7;
7;7;1;7;1;1;7;7;1;7;
7;7;7;7;7;7;1;7;1;1;
1;7;7;25;25;1;2;7;7;7;
1;7;7;0;0;0;0;0;0;7;
     };
    };
    bool_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_1989";
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.1200951;
       val_type_fixed=0;
      };
     };
     name="split_on_indivs";
     desc="perform train/test split in terms of individual objects within category+subcat, not individual images (can be multiple images per individual object)";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=101;
     ar {
      name="ar";
     [80] true;true;true;true;true;true;true;true;true;true;
true;true;true;true;true;true;true;true;true;true;
true;true;true;true;true;true;true;true;true;true;
true;true;true;true;true;true;true;true;true;true;
true;true;true;true;true;true;true;true;true;true;
true;true;true;true;true;true;true;true;true;true;
true;true;true;true;true;true;true;true;true;true;
true;true;true;false;false;false;false;false;false;true;
     };
    };
   };
   data_flags=SAVE_ROWS|AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [20] 4;79;0;2;3;37;50;51;52;57;
58;61;62;63;65;67;69;73;75;77;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[2] {
   name="ObjLists_3Dobjs";
   desc="named object lists and associated parameters -- configurations can specify simple name";
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1926278;
       val_type_fixed=0;
      };
     };
     name="objlist_id";
     desc="unique identifier used to select list of objects";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=162;
     ar {
      name="ar";
     [22] "CU3D_100_models";"CU3D_100_plus_models";"CU3D_90_models";"CU3D_80_models";"CU3D_70_models";"CU3D_60_models";"CU3D_50_models";"CU3D_50_plus_models";"CU3D_40_models";"CU3D_35_fg3";
"CU3D_30_fg4";"CU3D_20_fg";"CU3D_10_fg";"CU3D_10_fg_1spk";"CU3D_10_fg_2spk";"CU3D_10_fg_3spk";"CU3D_10_fg_allspk";"CU3D_2_fg";"CU3D_car";"CU3D_car_motorcycle";
"sphere";"CU3D_10_HighSim";     };
    };
    String_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.3840666;
       val_type_fixed=0;
      };
     };
     name="description";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=323;
     ar {
      name="ar";
     [22] "CU3D 100 good models";"CU3D 100 good models with new exemplars";"CU3D 90 good models";"CU3D 80 good models";"CU3D 70 good models";"CU3D 60 good models";"CU3D 50 good models";"CU3D 50 good models";"CU3D 40 good models";"specifically selected to have good surfaces for figure ground";
"specifically selected to have good surfaces for figure ground";"specifically selected to have good surfaces for figure ground";"specifically selected to have good surfaces for figure ground";"1 speaker of names (ro)";"2 speakers of names (ro, jr)";"3 speakers of names (ro, jr, pm)";"all available speakers";"specifically selected to have good surfaces for figure ground";"just 1 category (cars)";"2 categories";
"sphere";"10 random categories - 2 random exemplars";     };
    };
    String_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.4791915;
       val_type_fixed=0;
      };
     };
     name="oid_filename";
     desc="full relative path (from project) to OID file containing list of objects and other parameters";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=403;
     ar {
      name="ar";
     [22] "images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_plus_models/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_90_models.dat";"images/CU3D_100_models/good/CU3D_80_models.dat";"images/CU3D_100_models/good/CU3D_70_models.dat";"images/CU3D_100_models/good/CU3D_60_models.dat";"images/CU3D_100_models/good/CU3D_50_models.dat";"images/CU3D_100_plus_models/CU3D_50_models.dat";"images/CU3D_100_models/good/CU3D_40_models.dat";"images/CU3D_100_models/good/CU3D_35_fg3_models.dat";
"images/CU3D_100_models/good/CU3D_30_fg4_models.dat";"images/CU3D_100_models/good/CU3D_20_fg_models.dat";"images/CU3D_100_models/good/CU3D_10_fg_models.dat";"images/CU3D_100_models/good/CU3D_10_fg_models.dat";"images/CU3D_100_models/good/CU3D_10_fg_models.dat";"images/CU3D_100_models/good/CU3D_10_fg_models.dat";"images/CU3D_100_models/good/CU3D_10_fg_models.dat";"images/CU3D_100_models/good/CU3D_2_fg_models.dat";"images/CU3D_100_models/good/CU3D_car.dat";"images/CU3D_100_models/good/CU3D_car_motorcycle.dat";
"images/shape_models/sphere.dat";"images/CU3D_100_models/good/CU3D_10_HighSim_models.dat";     };
    };
    String_Data @[3] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.3590963;
       val_type_fixed=0;
      };
     };
     name="oid_filename_categs";
     desc="OID file to use for defining the full list of categories and individuals -- leave blank to use the basic oid_filename for this -- this is useful for keeping output units consistent while using subsets of items";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=302;
     ar {
      name="ar";
     [22] "images/CU3D_100_plus_models/CU3D_100_models.dat";"images/CU3D_100_plus_models/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_plus_models/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";
"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";"images/CU3D_100_models/good/CU3D_100_models.dat";
"images/CU3D_100_plus_models/CU3D_100_models.dat";"images/CU3D_100_plus_models/CU3D_100_models.dat";     };
    };
    String_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.3590963;
       val_type_fixed=0;
      };
     };
     name="sound_file_path";
     desc="path for finding sound files for the names of the objects";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=302;
     ar {
      name="ar";
     [22] ;;;;;;;;;;
;;"./images/sound/cu3d_100";"./images/sound/cu3d_100";"./images/sound/cu3d_100";"./images/sound/cu3d_100";;;;;
;;     };
    };
    String_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.2187872;
       val_type_fixed=0;
      };
     };
     name="sound_include_filter";
     desc="list of strings (space separated) to include in list -- file names that contain ANY of these strings will be include (OR logical op)";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=184;
     ar {
      name="ar";
     [22] ;;;;;;;;;;
;;"_ro.wav";"_ro.wav";"_ro.wav _jr.wav";"_ro.wav _jr.wav _pm.wav";;;;;
;;     };
    };
    String_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.17717;
       val_type_fixed=0;
      };
     };
     name="sound_exclude_filter";
     desc="list of strings (space separated) to exclude in active list -- file names that contain ANY of these strings will be excluded";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=149;
     ar {
      name="ar";
     [22] ;;;;;;;;;;
;;;;;;;;;;
;;     };
    };
    int_Data @[7] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.1105826;
       val_type_fixed=0;
      };
     };
     name="objs_per_epc";
     desc="total number of distinct object models per epoch -- must keep this reasonably small to take advantage of preloading the objects";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=93;
     ar {
      name="ar";
     [22] 25;25;25;25;25;25;25;25;25;25;
25;25;25;25;25;25;25;10;10;10;
1;20;     };
    };
    int_Data @[8] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.08204518;
       val_type_fixed=0;
      };
     };
     name="train_size";
     desc="number of items to include in the training set: set to -1 to include all the remainder after the specified number of testing items is taken out (note: train_size and test_size cannot both be -1!)";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=69;
     ar {
      name="ar";
     [22] -1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;     };
    };
    int_Data @[9] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.06183115;
       val_type_fixed=0;
      };
     };
     name="test_size";
     desc="number of items to include in the testing set: set to -1 to include all the remainder after the specified number of training items is taken out (note: train_size and test_size cannot both be -1!)";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=52;
     ar {
      name="ar";
     [22] 2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
0;0;     };
    };
    bool_Data @[10] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_1989";
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.1200951;
       val_type_fixed=0;
      };
     };
     name="split_on_indivs";
     desc="perform train/test split in terms of individual objects within category+subcat, not individual images (can be multiple images per individual object)";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=101;
     ar {
      name="ar";
     [22] false;false;false;false;false;false;false;false;false;false;
false;false;false;false;false;false;false;false;false;false;
false;false;     };
    };
   };
   data_flags=SAVE_ROWS|AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [22] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[3] {
   name="ObjectMiscData";
   desc="object specific parameters etc -- these are hardcoded from 3d render studio, probably best not to change";
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1129608;
       val_type_fixed=0;
      };
     };
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=95;
     ar {
      name="ar";
     [101] "airplane";"anchor";"autogun";"banana";"basinsink";"bed";"bicycle";"blade";"blender";"blimp";
"boombox";"bottle";"bow";"candle";"car";"chair";"chandelier";"chessboard";"chesspiece";"compactcamera";
"cross";"cup";"dice";"domestictree";"donut";"doorhandle";"doorknob";"dresser";"drums";"dutchwindmill";
"elephant";"fan";"fireplace";"fish";"flashlight";"fryingpan";"globe";"grenade";"guitar";"hammer";
"handgun";"hat";"headphones";"heavycannon";"helicopter";"hotairballoon";"hourglass";"hydrant";"key";"ladder";
"laptop";"layercake";"lightcannon";"lock";"locomotive";"longgun";"mailbox";"microwave";"motorcycle";"pckeyboard";
"pedestalsink";"person";"piano";"plant";"plate";"pliers";"propellor";"remote";"rolltopdesk";"sailboat";
"scissors";"screwdriver";"sectionalcouch";"simpledesk";"skateboard";"skull";"slrcamera";"speaker";"spotlightlamp";"stapler";
"submarine";"synthesizer";"tablelamp";"tank";"telephone";"television";"toaster";"toilet";"trafficcone";"trafficlight";
"trex";"trombone";"tropicaltree";"trumpet";"turntable";"umbrella";"wallclock";"warningsign";"wrench";"yacht";
"sphere";     };
    };
    String_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1022592;
       val_type_fixed=0;
      };
     };
     name="new_category";
     desc="if nonempty, then reassign the category label in the OID file to this";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr="\"\"";
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=86;
     ar {
      name="ar";
     [101] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;     };
    };
    int_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.06183115;
       val_type_fixed=0;
      };
     };
     name="exclude";
     desc="whether to exclude this object category from generation";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr="1";
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=52;
     ar {
      name="ar";
     [101] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;     };
    };
    String_Data @[3] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.06539834;
       val_type_fixed=0;
      };
     };
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr="\"\"";
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=55;
     ar {
      name="ar";
     [101] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;     };
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.06302021;
       val_type_fixed=0;
      };
     };
     name="z_offset";
     desc="additional z_offset for camera (need to take care of volumetric artifacts)";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=53;
     ar {
      name="ar";
     [101] -10;-15;0;0;0;0;-10;0;0;0;
0;5;5;0;0;0;-10;0;0;0;
0;0;0;-25;-20;0;-10;0;-15;-10;
-15;0;0;-5;5;0;-10;-10;0;0;
0;-15;-20;0;-10;-10;0;0;0;5;
0;-5;0;0;0;0;0;0;0;0;
-10;0;0;-15;-20;0;-15;0;0;-5;
0;5;0;0;0;-5;-15;0;0;0;
0;0;-5;0;0;0;0;-10;0;0;
0;0;-25;5;0;-25;-20;0;5;0;
0;     };
    };
    int_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_310";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.09393579;
       val_type_fixed=0;
      };
     };
     name="y_rot_mirror";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=79;
     ar {
      name="ar";
     [101] 1;1;1;1;0;1;1;1;1;1;
0;0;1;0;1;1;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
1;0;0;1;1;1;1;1;0;1;
1;0;0;1;1;1;0;0;1;0;
0;0;1;0;1;1;1;0;1;0;
0;0;0;0;0;1;0;0;0;1;
1;1;0;0;1;0;0;0;1;1;
1;0;0;1;0;0;0;0;0;0;
1;1;0;1;0;0;0;0;1;1;
0;     };
    };
   };
   data_flags=SAVE_ROWS|AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [101] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[4] {
   name="CurFullObjectList";
   desc="current full list of objects with: category, individual, ctrlflags, and filename fields -- can have other optional data after that -- can have multiple rows for each category+individual (multiple different images / renders)";
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[2] {
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[3] {
     name="filename";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="oid_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [3780] 13;14;12;10;11;18;19;17;15;16;
3;4;2;0;1;8;9;7;5;6;
33;34;32;30;31;38;39;37;35;36;
23;24;22;20;21;28;29;27;25;26;
53;54;52;50;51;58;59;57;55;56;
43;44;42;40;41;48;49;47;45;46;
73;74;72;70;71;78;79;77;75;76;
63;64;62;60;61;68;69;67;65;66;
93;94;92;90;91;98;99;97;95;96;
83;84;82;80;81;88;89;87;85;86;
113;114;112;110;111;118;119;117;115;116;
103;104;102;100;101;108;109;107;105;106;
133;134;132;130;131;138;139;137;135;136;
123;124;122;120;121;128;129;127;125;126;
153;154;152;150;151;158;159;157;155;156;
143;144;142;140;141;148;149;147;145;146;
173;174;172;170;171;178;179;177;175;176;
163;164;162;160;161;168;169;167;165;166;
193;194;192;190;191;198;199;197;195;196;
183;184;182;180;181;188;189;187;185;186;
213;214;212;210;211;218;219;217;215;216;
203;204;202;200;201;208;209;207;205;206;
233;234;232;230;231;238;239;237;235;236;
223;224;222;220;221;228;229;227;225;226;
253;254;252;250;251;258;259;257;255;256;
243;244;242;240;241;248;249;247;245;246;
273;274;272;270;271;278;279;277;275;276;
263;264;262;260;261;268;269;267;265;266;
293;294;292;290;291;298;299;297;295;296;
283;284;282;280;281;288;289;287;285;286;
313;314;312;310;311;318;319;317;315;316;
303;304;302;300;301;308;309;307;305;306;
333;334;332;330;331;338;339;337;335;336;
323;324;322;320;321;328;329;327;325;326;
353;354;352;350;351;358;359;357;355;356;
343;344;342;340;341;348;349;347;345;346;
373;374;372;370;371;378;379;377;375;376;
363;364;362;360;361;368;369;367;365;366;
393;394;392;390;391;398;399;397;395;396;
383;384;382;380;381;388;389;387;385;386;
413;414;412;410;411;418;419;417;415;416;
403;404;402;400;401;408;409;407;405;406;
433;434;432;430;431;438;439;437;435;436;
423;424;422;420;421;428;429;427;425;426;
453;454;452;450;451;458;459;457;455;456;
443;444;442;440;441;448;449;447;445;446;
473;474;472;470;471;478;479;477;475;476;
463;464;462;460;461;468;469;467;465;466;
493;494;492;490;491;498;499;497;495;496;
483;484;482;480;481;488;489;487;485;486;
513;514;512;510;511;518;519;517;515;516;
503;504;502;500;501;508;509;507;505;506;
533;534;532;530;531;538;539;537;535;536;
523;524;522;520;521;528;529;527;525;526;
553;554;552;550;551;558;559;557;555;556;
543;544;542;540;541;548;549;547;545;546;
573;574;572;570;571;578;579;577;575;576;
563;564;562;560;561;568;569;567;565;566;
593;594;592;590;591;598;599;597;595;596;
583;584;582;580;581;588;589;587;585;586;
613;614;612;610;611;618;619;617;615;616;
603;604;602;600;601;608;609;607;605;606;
633;634;632;630;631;638;639;637;635;636;
623;624;622;620;621;628;629;627;625;626;
653;654;652;650;651;658;659;657;655;656;
643;644;642;640;641;648;649;647;645;646;
673;674;672;670;671;678;679;677;675;676;
663;664;662;660;661;668;669;667;665;666;
693;694;692;690;691;698;699;697;695;696;
683;684;682;680;681;688;689;687;685;686;
713;714;712;710;711;718;719;717;715;716;
703;704;702;700;701;708;709;707;705;706;
733;734;732;730;731;738;739;737;735;736;
723;724;722;720;721;728;729;727;725;726;
753;754;752;750;751;758;759;757;755;756;
743;744;742;740;741;748;749;747;745;746;
773;774;772;770;771;778;779;777;775;776;
763;764;762;760;761;768;769;767;765;766;
793;794;792;790;791;798;799;797;795;796;
783;784;782;780;781;788;789;787;785;786;
813;814;812;810;811;818;819;817;815;816;
803;804;802;800;801;808;809;807;805;806;
833;834;832;830;831;838;839;837;835;836;
823;824;822;820;821;828;829;827;825;826;
853;854;852;850;851;858;859;857;855;856;
843;844;842;840;841;848;849;847;845;846;
873;874;872;870;871;878;879;877;875;876;
863;864;862;860;861;868;869;867;865;866;
893;894;892;890;891;898;899;897;895;896;
883;884;882;880;881;888;889;887;885;886;
913;914;912;910;911;918;919;917;915;916;
903;904;902;900;901;908;909;907;905;906;
933;934;932;930;931;938;939;937;935;936;
923;924;922;920;921;928;929;927;925;926;
953;954;952;950;951;958;959;957;955;956;
943;944;942;940;941;948;949;947;945;946;
973;974;972;970;971;978;979;977;975;976;
963;964;962;960;961;968;969;967;965;966;
993;994;992;990;991;998;999;997;995;996;
983;984;982;980;981;988;989;987;985;986;
1013;1014;1012;1010;1011;1018;1019;1017;1015;1016;
1003;1004;1002;1000;1001;1008;1009;1007;1005;1006;
1033;1034;1032;1030;1031;1038;1039;1037;1035;1036;
1023;1024;1022;1020;1021;1028;1029;1027;1025;1026;
1053;1054;1052;1050;1051;1058;1059;1057;1055;1056;
1043;1044;1042;1040;1041;1048;1049;1047;1045;1046;
1073;1074;1072;1070;1071;1078;1079;1077;1075;1076;
1063;1064;1062;1060;1061;1068;1069;1067;1065;1066;
1093;1094;1092;1090;1091;1098;1099;1097;1095;1096;
1083;1084;1082;1080;1081;1088;1089;1087;1085;1086;
1113;1114;1112;1110;1111;1118;1119;1117;1115;1116;
1103;1104;1102;1100;1101;1108;1109;1107;1105;1106;
1133;1134;1132;1130;1131;1138;1139;1137;1135;1136;
1123;1124;1122;1120;1121;1128;1129;1127;1125;1126;
1153;1154;1152;1150;1151;1158;1159;1157;1155;1156;
1143;1144;1142;1140;1141;1148;1149;1147;1145;1146;
1173;1174;1172;1170;1171;1178;1179;1177;1175;1176;
1163;1164;1162;1160;1161;1168;1169;1167;1165;1166;
1193;1194;1192;1190;1191;1198;1199;1197;1195;1196;
1183;1184;1182;1180;1181;1188;1189;1187;1185;1186;
1213;1214;1212;1210;1211;1218;1219;1217;1215;1216;
1203;1204;1202;1200;1201;1208;1209;1207;1205;1206;
1233;1234;1232;1230;1231;1238;1239;1237;1235;1236;
1223;1224;1222;1220;1221;1228;1229;1227;1225;1226;
1253;1254;1252;1250;1251;1258;1259;1257;1255;1256;
1243;1244;1242;1240;1241;1248;1249;1247;1245;1246;
1273;1274;1272;1270;1271;1278;1279;1277;1275;1276;
1263;1264;1262;1260;1261;1268;1269;1267;1265;1266;
1293;1294;1292;1290;1291;1298;1299;1297;1295;1296;
1283;1284;1282;1280;1281;1288;1289;1287;1285;1286;
1313;1314;1312;1310;1311;1318;1319;1317;1315;1316;
1303;1304;1302;1300;1301;1308;1309;1307;1305;1306;
1333;1334;1332;1330;1331;1338;1339;1337;1335;1336;
1323;1324;1322;1320;1321;1328;1329;1327;1325;1326;
1353;1354;1352;1350;1351;1358;1359;1357;1355;1356;
1343;1344;1342;1340;1341;1348;1349;1347;1345;1346;
1373;1374;1372;1370;1371;1378;1379;1377;1375;1376;
1363;1364;1362;1360;1361;1368;1369;1367;1365;1366;
1393;1394;1392;1390;1391;1398;1399;1397;1395;1396;
1383;1384;1382;1380;1381;1388;1389;1387;1385;1386;
1413;1414;1412;1410;1411;1418;1419;1417;1415;1416;
1403;1404;1402;1400;1401;1408;1409;1407;1405;1406;
1433;1434;1432;1430;1431;1438;1439;1437;1435;1436;
1423;1424;1422;1420;1421;1428;1429;1427;1425;1426;
1453;1454;1452;1450;1451;1458;1459;1457;1455;1456;
1443;1444;1442;1440;1441;1448;1449;1447;1445;1446;
1473;1474;1472;1470;1471;1478;1479;1477;1475;1476;
1463;1464;1462;1460;1461;1468;1469;1467;1465;1466;
1493;1494;1492;1490;1491;1498;1499;1497;1495;1496;
1483;1484;1482;1480;1481;1488;1489;1487;1485;1486;
1513;1514;1512;1510;1511;1518;1519;1517;1515;1516;
1503;1504;1502;1500;1501;1508;1509;1507;1505;1506;
1533;1534;1532;1530;1531;1538;1539;1537;1535;1536;
1523;1524;1522;1520;1521;1528;1529;1527;1525;1526;
1553;1554;1552;1550;1551;1558;1559;1557;1555;1556;
1543;1544;1542;1540;1541;1548;1549;1547;1545;1546;
1573;1574;1572;1570;1571;1578;1579;1577;1575;1576;
1563;1564;1562;1560;1561;1568;1569;1567;1565;1566;
1593;1594;1592;1590;1591;1598;1599;1597;1595;1596;
1583;1584;1582;1580;1581;1588;1589;1587;1585;1586;
1613;1614;1612;1610;1611;1618;1619;1617;1615;1616;
1603;1604;1602;1600;1601;1608;1609;1607;1605;1606;
1633;1634;1632;1630;1631;1638;1639;1637;1635;1636;
1623;1624;1622;1620;1621;1628;1629;1627;1625;1626;
1653;1654;1652;1650;1651;1658;1659;1657;1655;1656;
1643;1644;1642;1640;1641;1648;1649;1647;1645;1646;
1673;1674;1672;1670;1671;1678;1679;1677;1675;1676;
1663;1664;1662;1660;1661;1668;1669;1667;1665;1666;
1693;1694;1692;1690;1691;1698;1699;1697;1695;1696;
1683;1684;1682;1680;1681;1688;1689;1687;1685;1686;
1713;1714;1712;1710;1711;1718;1719;1717;1715;1716;
1703;1704;1702;1700;1701;1708;1709;1707;1705;1706;
1733;1734;1732;1730;1731;1738;1739;1737;1735;1736;
1723;1724;1722;1720;1721;1728;1729;1727;1725;1726;
1753;1754;1752;1750;1751;1758;1759;1757;1755;1756;
1743;1744;1742;1740;1741;1748;1749;1747;1745;1746;
1773;1774;1772;1770;1771;1778;1779;1777;1775;1776;
1763;1764;1762;1760;1761;1768;1769;1767;1765;1766;
1793;1794;1792;1790;1791;1798;1799;1797;1795;1796;
1783;1784;1782;1780;1781;1788;1789;1787;1785;1786;
1813;1814;1812;1810;1811;1818;1819;1817;1815;1816;
1803;1804;1802;1800;1801;1808;1809;1807;1805;1806;
1833;1834;1832;1830;1831;1838;1839;1837;1835;1836;
1823;1824;1822;1820;1821;1828;1829;1827;1825;1826;
1853;1854;1852;1850;1851;1858;1859;1857;1855;1856;
1843;1844;1842;1840;1841;1848;1849;1847;1845;1846;
1873;1874;1872;1870;1871;1878;1879;1877;1875;1876;
1863;1864;1862;1860;1861;1868;1869;1867;1865;1866;
1893;1894;1892;1890;1891;1898;1899;1897;1895;1896;
1883;1884;1882;1880;1881;1888;1889;1887;1885;1886;
1913;1914;1912;1910;1911;1918;1919;1917;1915;1916;
1903;1904;1902;1900;1901;1908;1909;1907;1905;1906;
1933;1934;1932;1930;1931;1938;1939;1937;1935;1936;
1923;1924;1922;1920;1921;1928;1929;1927;1925;1926;
1953;1954;1952;1950;1951;1958;1959;1957;1955;1956;
1943;1944;1942;1940;1941;1948;1949;1947;1945;1946;
1973;1974;1972;1970;1971;1978;1979;1977;1975;1976;
1963;1964;1962;1960;1961;1968;1969;1967;1965;1966;
1993;1994;1992;1990;1991;1998;1999;1997;1995;1996;
1983;1984;1982;1980;1981;1988;1989;1987;1985;1986;
2013;2014;2012;2010;2011;2018;2019;2017;2015;2016;
2003;2004;2002;2000;2001;2008;2009;2007;2005;2006;
2033;2034;2032;2030;2031;2038;2039;2037;2035;2036;
2023;2024;2022;2020;2021;2028;2029;2027;2025;2026;
2053;2054;2052;2050;2051;2058;2059;2057;2055;2056;
2043;2044;2042;2040;2041;2048;2049;2047;2045;2046;
2073;2074;2072;2070;2071;2078;2079;2077;2075;2076;
2063;2064;2062;2060;2061;2068;2069;2067;2065;2066;
2093;2094;2092;2090;2091;2098;2099;2097;2095;2096;
2083;2084;2082;2080;2081;2088;2089;2087;2085;2086;
2113;2114;2112;2110;2111;2118;2119;2117;2115;2116;
2103;2104;2102;2100;2101;2108;2109;2107;2105;2106;
2133;2134;2132;2130;2131;2138;2139;2137;2135;2136;
2123;2124;2122;2120;2121;2128;2129;2127;2125;2126;
2153;2154;2152;2150;2151;2158;2159;2157;2155;2156;
2143;2144;2142;2140;2141;2148;2149;2147;2145;2146;
2173;2174;2172;2170;2171;2178;2179;2177;2175;2176;
2163;2164;2162;2160;2161;2168;2169;2167;2165;2166;
2193;2194;2192;2190;2191;2198;2199;2197;2195;2196;
2183;2184;2182;2180;2181;2188;2189;2187;2185;2186;
2213;2214;2212;2210;2211;2218;2219;2217;2215;2216;
2203;2204;2202;2200;2201;2208;2209;2207;2205;2206;
2233;2234;2232;2230;2231;2238;2239;2237;2235;2236;
2223;2224;2222;2220;2221;2228;2229;2227;2225;2226;
2253;2254;2252;2250;2251;2258;2259;2257;2255;2256;
2243;2244;2242;2240;2241;2248;2249;2247;2245;2246;
2273;2274;2272;2270;2271;2278;2279;2277;2275;2276;
2263;2264;2262;2260;2261;2268;2269;2267;2265;2266;
2293;2294;2292;2290;2291;2298;2299;2297;2295;2296;
2283;2284;2282;2280;2281;2288;2289;2287;2285;2286;
2313;2314;2312;2310;2311;2318;2319;2317;2315;2316;
2303;2304;2302;2300;2301;2308;2309;2307;2305;2306;
2333;2334;2332;2330;2331;2338;2339;2337;2335;2336;
2323;2324;2322;2320;2321;2328;2329;2327;2325;2326;
2353;2354;2352;2350;2351;2358;2359;2357;2355;2356;
2343;2344;2342;2340;2341;2348;2349;2347;2345;2346;
2373;2374;2372;2370;2371;2378;2379;2377;2375;2376;
2363;2364;2362;2360;2361;2368;2369;2367;2365;2366;
2393;2394;2392;2390;2391;2398;2399;2397;2395;2396;
2383;2384;2382;2380;2381;2388;2389;2387;2385;2386;
2413;2414;2412;2410;2411;2418;2419;2417;2415;2416;
2403;2404;2402;2400;2401;2408;2409;2407;2405;2406;
2433;2434;2432;2430;2431;2438;2439;2437;2435;2436;
2423;2424;2422;2420;2421;2428;2429;2427;2425;2426;
2453;2454;2452;2450;2451;2458;2459;2457;2455;2456;
2443;2444;2442;2440;2441;2448;2449;2447;2445;2446;
2473;2474;2472;2470;2471;2478;2479;2477;2475;2476;
2463;2464;2462;2460;2461;2468;2469;2467;2465;2466;
2493;2494;2492;2490;2491;2498;2499;2497;2495;2496;
2483;2484;2482;2480;2481;2488;2489;2487;2485;2486;
2513;2514;2512;2510;2511;2518;2519;2517;2515;2516;
2503;2504;2502;2500;2501;2508;2509;2507;2505;2506;
2533;2534;2532;2530;2531;2538;2539;2537;2535;2536;
2523;2524;2522;2520;2521;2528;2529;2527;2525;2526;
2553;2554;2552;2550;2551;2558;2559;2557;2555;2556;
2543;2544;2542;2540;2541;2548;2549;2547;2545;2546;
2573;2574;2572;2570;2571;2578;2579;2577;2575;2576;
2563;2564;2562;2560;2561;2568;2569;2567;2565;2566;
2593;2594;2592;2590;2591;2598;2599;2597;2595;2596;
2583;2584;2582;2580;2581;2588;2589;2587;2585;2586;
2613;2614;2612;2610;2611;2618;2619;2617;2615;2616;
2603;2604;2602;2600;2601;2608;2609;2607;2605;2606;
2633;2634;2632;2630;2631;2638;2639;2637;2635;2636;
2623;2624;2622;2620;2621;2628;2629;2627;2625;2626;
2653;2654;2652;2650;2651;2658;2659;2657;2655;2656;
2643;2644;2642;2640;2641;2648;2649;2647;2645;2646;
2673;2674;2672;2670;2671;2678;2679;2677;2675;2676;
2663;2664;2662;2660;2661;2668;2669;2667;2665;2666;
2693;2694;2692;2690;2691;2698;2699;2697;2695;2696;
2683;2684;2682;2680;2681;2688;2689;2687;2685;2686;
2713;2714;2712;2710;2711;2718;2719;2717;2715;2716;
2703;2704;2702;2700;2701;2708;2709;2707;2705;2706;
2733;2734;2732;2730;2731;2738;2739;2737;2735;2736;
2723;2724;2722;2720;2721;2728;2729;2727;2725;2726;
2753;2754;2752;2750;2751;2758;2759;2757;2755;2756;
2743;2744;2742;2740;2741;2748;2749;2747;2745;2746;
2773;2774;2772;2770;2771;2778;2779;2777;2775;2776;
2763;2764;2762;2760;2761;2768;2769;2767;2765;2766;
2793;2794;2792;2790;2791;2798;2799;2797;2795;2796;
2783;2784;2782;2780;2781;2788;2789;2787;2785;2786;
2813;2814;2812;2810;2811;2818;2819;2817;2815;2816;
2803;2804;2802;2800;2801;2808;2809;2807;2805;2806;
2833;2834;2832;2830;2831;2838;2839;2837;2835;2836;
2823;2824;2822;2820;2821;2828;2829;2827;2825;2826;
2853;2854;2852;2850;2851;2858;2859;2857;2855;2856;
2843;2844;2842;2840;2841;2848;2849;2847;2845;2846;
2873;2874;2872;2870;2871;2878;2879;2877;2875;2876;
2863;2864;2862;2860;2861;2868;2869;2867;2865;2866;
2893;2894;2892;2890;2891;2898;2899;2897;2895;2896;
2883;2884;2882;2880;2881;2888;2889;2887;2885;2886;
2913;2914;2912;2910;2911;2918;2919;2917;2915;2916;
2903;2904;2902;2900;2901;2908;2909;2907;2905;2906;
2933;2934;2932;2930;2931;2938;2939;2937;2935;2936;
2923;2924;2922;2920;2921;2928;2929;2927;2925;2926;
2953;2954;2952;2950;2951;2958;2959;2957;2955;2956;
2943;2944;2942;2940;2941;2948;2949;2947;2945;2946;
2973;2974;2972;2970;2971;2978;2979;2977;2975;2976;
2963;2964;2962;2960;2961;2968;2969;2967;2965;2966;
2993;2994;2992;2990;2991;2998;2999;2997;2995;2996;
2983;2984;2982;2980;2981;2988;2989;2987;2985;2986;
3013;3014;3012;3010;3011;3018;3019;3017;3015;3016;
3003;3004;3002;3000;3001;3008;3009;3007;3005;3006;
3033;3034;3032;3030;3031;3038;3039;3037;3035;3036;
3023;3024;3022;3020;3021;3028;3029;3027;3025;3026;
3053;3054;3052;3050;3051;3058;3059;3057;3055;3056;
3043;3044;3042;3040;3041;3048;3049;3047;3045;3046;
3073;3074;3072;3070;3071;3078;3079;3077;3075;3076;
3063;3064;3062;3060;3061;3068;3069;3067;3065;3066;
3093;3094;3092;3090;3091;3098;3099;3097;3095;3096;
3083;3084;3082;3080;3081;3088;3089;3087;3085;3086;
3113;3114;3112;3110;3111;3118;3119;3117;3115;3116;
3103;3104;3102;3100;3101;3108;3109;3107;3105;3106;
3133;3134;3132;3130;3131;3138;3139;3137;3135;3136;
3123;3124;3122;3120;3121;3128;3129;3127;3125;3126;
3153;3154;3152;3150;3151;3158;3159;3157;3155;3156;
3143;3144;3142;3140;3141;3148;3149;3147;3145;3146;
3173;3174;3172;3170;3171;3178;3179;3177;3175;3176;
3163;3164;3162;3160;3161;3168;3169;3167;3165;3166;
3193;3194;3192;3190;3191;3198;3199;3197;3195;3196;
3183;3184;3182;3180;3181;3188;3189;3187;3185;3186;
3213;3214;3212;3210;3211;3218;3219;3217;3215;3216;
3203;3204;3202;3200;3201;3208;3209;3207;3205;3206;
3233;3234;3232;3230;3231;3238;3239;3237;3235;3236;
3223;3224;3222;3220;3221;3228;3229;3227;3225;3226;
3253;3254;3252;3250;3251;3258;3259;3257;3255;3256;
3243;3244;3242;3240;3241;3248;3249;3247;3245;3246;
3273;3274;3272;3270;3271;3278;3279;3277;3275;3276;
3263;3264;3262;3260;3261;3268;3269;3267;3265;3266;
3293;3294;3292;3290;3291;3298;3299;3297;3295;3296;
3283;3284;3282;3280;3281;3288;3289;3287;3285;3286;
3313;3314;3312;3310;3311;3318;3319;3317;3315;3316;
3303;3304;3302;3300;3301;3308;3309;3307;3305;3306;
3333;3334;3332;3330;3331;3338;3339;3337;3335;3336;
3323;3324;3322;3320;3321;3328;3329;3327;3325;3326;
3353;3354;3352;3350;3351;3358;3359;3357;3355;3356;
3343;3344;3342;3340;3341;3348;3349;3347;3345;3346;
3373;3374;3372;3370;3371;3378;3379;3377;3375;3376;
3363;3364;3362;3360;3361;3368;3369;3367;3365;3366;
3393;3394;3392;3390;3391;3398;3399;3397;3395;3396;
3383;3384;3382;3380;3381;3388;3389;3387;3385;3386;
3413;3414;3412;3410;3411;3418;3419;3417;3415;3416;
3403;3404;3402;3400;3401;3408;3409;3407;3405;3406;
3433;3434;3432;3430;3431;3438;3439;3437;3435;3436;
3423;3424;3422;3420;3421;3428;3429;3427;3425;3426;
3453;3454;3452;3450;3451;3458;3459;3457;3455;3456;
3443;3444;3442;3440;3441;3448;3449;3447;3445;3446;
3473;3474;3472;3470;3471;3478;3479;3477;3475;3476;
3463;3464;3462;3460;3461;3468;3469;3467;3465;3466;
3493;3494;3492;3490;3491;3498;3499;3497;3495;3496;
3483;3484;3482;3480;3481;3488;3489;3487;3485;3486;
3513;3514;3512;3510;3511;3518;3519;3517;3515;3516;
3503;3504;3502;3500;3501;3508;3509;3507;3505;3506;
3533;3534;3532;3530;3531;3538;3539;3537;3535;3536;
3523;3524;3522;3520;3521;3528;3529;3527;3525;3526;
3553;3554;3552;3550;3551;3558;3559;3557;3555;3556;
3543;3544;3542;3540;3541;3548;3549;3547;3545;3546;
3573;3574;3572;3570;3571;3578;3579;3577;3575;3576;
3563;3564;3562;3560;3561;3568;3569;3567;3565;3566;
3593;3594;3592;3590;3591;3598;3599;3597;3595;3596;
3583;3584;3582;3580;3581;3588;3589;3587;3585;3586;
3613;3614;3612;3610;3611;3618;3619;3617;3615;3616;
3603;3604;3602;3600;3601;3608;3609;3607;3605;3606;
3633;3634;3632;3630;3631;3638;3639;3637;3635;3636;
3623;3624;3622;3620;3621;3628;3629;3627;3625;3626;
3653;3654;3652;3650;3651;3658;3659;3657;3655;3656;
3643;3644;3642;3640;3641;3648;3649;3647;3645;3646;
3673;3674;3672;3670;3671;3678;3679;3677;3675;3676;
3663;3664;3662;3660;3661;3668;3669;3667;3665;3666;
3693;3694;3692;3690;3691;3698;3699;3697;3695;3696;
3683;3684;3682;3680;3681;3688;3689;3687;3685;3686;
3713;3714;3712;3710;3711;3718;3719;3717;3715;3716;
3703;3704;3702;3700;3701;3708;3709;3707;3705;3706;
3733;3734;3732;3730;3731;3738;3739;3737;3735;3736;
3723;3724;3722;3720;3721;3728;3729;3727;3725;3726;
3753;3754;3752;3750;3751;3758;3759;3757;3755;3756;
3743;3744;3742;3740;3741;3748;3749;3747;3745;3746;
3773;3774;3772;3770;3771;3778;3779;3777;3775;3776;
3763;3764;3762;3760;3761;3768;3769;3767;3765;3766;
   };
   last_sort_spec {
    name="DataSortSpec_416";
    ops {
     name="DataOpList_940";
     el_typ=DataSortEl;
     el_def=0;
     DataSortEl @[0] {
      col_name="category";
      name="category_up_0";
      order=ASCENDING;
     };
     DataSortEl @[1] {
      col_name="individual";
      name="individual_up_1";
      order=ASCENDING;
     };
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[5] {
   name="CategObjectList";
   desc="object list used for generating categories and individuals -- optional";
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[2] {
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[3] {
     name="filename";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="oid_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [18840] 13;14;12;10;11;18;19;17;15;16;
3;4;2;0;1;8;9;7;5;6;
33;34;32;30;31;38;39;37;35;36;
23;24;22;20;21;28;29;27;25;26;
53;54;52;50;51;58;59;57;55;56;
43;44;42;40;41;48;49;47;45;46;
73;74;72;70;71;78;79;77;75;76;
63;64;62;60;61;68;69;67;65;66;
93;94;92;90;91;98;99;97;95;96;
83;84;82;80;81;88;89;87;85;86;
113;114;112;110;111;118;119;117;115;116;
103;104;102;100;101;108;109;107;105;106;
133;134;132;130;131;138;139;137;135;136;
123;124;122;120;121;128;129;127;125;126;
153;154;152;150;151;158;159;157;155;156;
143;144;142;140;141;148;149;147;145;146;
173;174;172;170;171;178;179;177;175;176;
163;164;162;160;161;168;169;167;165;166;
193;194;192;190;191;198;199;197;195;196;
183;184;182;180;181;188;189;187;185;186;
213;214;212;210;211;218;219;217;215;216;
203;204;202;200;201;208;209;207;205;206;
233;234;232;230;231;238;239;237;235;236;
223;224;222;220;221;228;229;227;225;226;
253;254;252;250;251;258;259;257;255;256;
243;244;242;240;241;248;249;247;245;246;
273;274;272;270;271;278;279;277;275;276;
263;264;262;260;261;268;269;267;265;266;
293;294;292;290;291;298;299;297;295;296;
283;284;282;280;281;288;289;287;285;286;
313;314;312;310;311;318;319;317;315;316;
303;304;302;300;301;308;309;307;305;306;
333;334;332;330;331;338;339;337;335;336;
323;324;322;320;321;328;329;327;325;326;
353;354;352;350;351;358;359;357;355;356;
343;344;342;340;341;348;349;347;345;346;
373;374;372;370;371;378;379;377;375;376;
363;364;362;360;361;368;369;367;365;366;
393;394;392;390;391;398;399;397;395;396;
383;384;382;380;381;388;389;387;385;386;
413;414;412;410;411;418;419;417;415;416;
403;404;402;400;401;408;409;407;405;406;
433;434;432;430;431;438;439;437;435;436;
423;424;422;420;421;428;429;427;425;426;
453;454;452;450;451;458;459;457;455;456;
443;444;442;440;441;448;449;447;445;446;
473;474;472;470;471;478;479;477;475;476;
463;464;462;460;461;468;469;467;465;466;
493;494;492;490;491;498;499;497;495;496;
483;484;482;480;481;488;489;487;485;486;
513;514;512;510;511;518;519;517;515;516;
503;504;502;500;501;508;509;507;505;506;
533;534;532;530;531;538;539;537;535;536;
523;524;522;520;521;528;529;527;525;526;
553;554;552;550;551;558;559;557;555;556;
543;544;542;540;541;548;549;547;545;546;
573;574;572;570;571;578;579;577;575;576;
563;564;562;560;561;568;569;567;565;566;
593;594;592;590;591;598;599;597;595;596;
583;584;582;580;581;588;589;587;585;586;
613;614;612;610;611;618;619;617;615;616;
603;604;602;600;601;608;609;607;605;606;
633;634;632;630;631;638;639;637;635;636;
623;624;622;620;621;628;629;627;625;626;
653;654;652;650;651;658;659;657;655;656;
643;644;642;640;641;648;649;647;645;646;
673;674;672;670;671;678;679;677;675;676;
663;664;662;660;661;668;669;667;665;666;
693;694;692;690;691;698;699;697;695;696;
683;684;682;680;681;688;689;687;685;686;
713;714;712;710;711;718;719;717;715;716;
703;704;702;700;701;708;709;707;705;706;
733;734;732;730;731;738;739;737;735;736;
723;724;722;720;721;728;729;727;725;726;
753;754;752;750;751;758;759;757;755;756;
743;744;742;740;741;748;749;747;745;746;
773;774;772;770;771;778;779;777;775;776;
763;764;762;760;761;768;769;767;765;766;
793;794;792;790;791;798;799;797;795;796;
783;784;782;780;781;788;789;787;785;786;
813;814;812;810;811;818;819;817;815;816;
803;804;802;800;801;808;809;807;805;806;
833;834;832;830;831;838;839;837;835;836;
823;824;822;820;821;828;829;827;825;826;
853;854;852;850;851;858;859;857;855;856;
843;844;842;840;841;848;849;847;845;846;
873;874;872;870;871;878;879;877;875;876;
863;864;862;860;861;868;869;867;865;866;
893;894;892;890;891;898;899;897;895;896;
883;884;882;880;881;888;889;887;885;886;
913;914;912;910;911;918;919;917;915;916;
903;904;902;900;901;908;909;907;905;906;
933;934;932;930;931;938;939;937;935;936;
923;924;922;920;921;928;929;927;925;926;
953;954;952;950;951;958;959;957;955;956;
943;944;942;940;941;948;949;947;945;946;
973;974;972;970;971;978;979;977;975;976;
963;964;962;960;961;968;969;967;965;966;
993;994;992;990;991;998;999;997;995;996;
983;984;982;980;981;988;989;987;985;986;
1013;1014;1012;1010;1011;1018;1019;1017;1015;1016;
1003;1004;1002;1000;1001;1008;1009;1007;1005;1006;
1033;1034;1032;1030;1031;1038;1039;1037;1035;1036;
1023;1024;1022;1020;1021;1028;1029;1027;1025;1026;
1053;1054;1052;1050;1051;1058;1059;1057;1055;1056;
1043;1044;1042;1040;1041;1048;1049;1047;1045;1046;
1073;1074;1072;1070;1071;1078;1079;1077;1075;1076;
1063;1064;1062;1060;1061;1068;1069;1067;1065;1066;
1093;1094;1092;1090;1091;1098;1099;1097;1095;1096;
1083;1084;1082;1080;1081;1088;1089;1087;1085;1086;
1113;1114;1112;1110;1111;1118;1119;1117;1115;1116;
1103;1104;1102;1100;1101;1108;1109;1107;1105;1106;
1133;1134;1132;1130;1131;1138;1139;1137;1135;1136;
1123;1124;1122;1120;1121;1128;1129;1127;1125;1126;
1153;1154;1152;1150;1151;1158;1159;1157;1155;1156;
1143;1144;1142;1140;1141;1148;1149;1147;1145;1146;
1173;1174;1172;1170;1171;1178;1179;1177;1175;1176;
1163;1164;1162;1160;1161;1168;1169;1167;1165;1166;
1193;1194;1192;1190;1191;1198;1199;1197;1195;1196;
1183;1184;1182;1180;1181;1188;1189;1187;1185;1186;
1213;1214;1212;1210;1211;1218;1219;1217;1215;1216;
1203;1204;1202;1200;1201;1208;1209;1207;1205;1206;
1233;1234;1232;1230;1231;1238;1239;1237;1235;1236;
1223;1224;1222;1220;1221;1228;1229;1227;1225;1226;
1253;1254;1252;1250;1251;1258;1259;1257;1255;1256;
1243;1244;1242;1240;1241;1248;1249;1247;1245;1246;
1273;1274;1272;1270;1271;1278;1279;1277;1275;1276;
1263;1264;1262;1260;1261;1268;1269;1267;1265;1266;
1293;1294;1292;1290;1291;1298;1299;1297;1295;1296;
1283;1284;1282;1280;1281;1288;1289;1287;1285;1286;
1313;1314;1312;1310;1311;1318;1319;1317;1315;1316;
1303;1304;1302;1300;1301;1308;1309;1307;1305;1306;
1333;1334;1332;1330;1331;1338;1339;1337;1335;1336;
1323;1324;1322;1320;1321;1328;1329;1327;1325;1326;
1353;1354;1352;1350;1351;1358;1359;1357;1355;1356;
1343;1344;1342;1340;1341;1348;1349;1347;1345;1346;
1373;1374;1372;1370;1371;1378;1379;1377;1375;1376;
1363;1364;1362;1360;1361;1368;1369;1367;1365;1366;
1393;1394;1392;1390;1391;1398;1399;1397;1395;1396;
1383;1384;1382;1380;1381;1388;1389;1387;1385;1386;
1413;1414;1412;1410;1411;1418;1419;1417;1415;1416;
1403;1404;1402;1400;1401;1408;1409;1407;1405;1406;
1433;1434;1432;1430;1431;1438;1439;1437;1435;1436;
1423;1424;1422;1420;1421;1428;1429;1427;1425;1426;
1453;1454;1452;1450;1451;1458;1459;1457;1455;1456;
1443;1444;1442;1440;1441;1448;1449;1447;1445;1446;
1473;1474;1472;1470;1471;1478;1479;1477;1475;1476;
1463;1464;1462;1460;1461;1468;1469;1467;1465;1466;
1493;1494;1492;1490;1491;1498;1499;1497;1495;1496;
1483;1484;1482;1480;1481;1488;1489;1487;1485;1486;
1513;1514;1512;1510;1511;1518;1519;1517;1515;1516;
1503;1504;1502;1500;1501;1508;1509;1507;1505;1506;
1533;1534;1532;1530;1531;1538;1539;1537;1535;1536;
1523;1524;1522;1520;1521;1528;1529;1527;1525;1526;
1553;1554;1552;1550;1551;1558;1559;1557;1555;1556;
1543;1544;1542;1540;1541;1548;1549;1547;1545;1546;
1573;1574;1572;1570;1571;1578;1579;1577;1575;1576;
1563;1564;1562;1560;1561;1568;1569;1567;1565;1566;
1593;1594;1592;1590;1591;1598;1599;1597;1595;1596;
1583;1584;1582;1580;1581;1588;1589;1587;1585;1586;
1613;1614;1612;1610;1611;1618;1619;1617;1615;1616;
1603;1604;1602;1600;1601;1608;1609;1607;1605;1606;
1633;1634;1632;1630;1631;1638;1639;1637;1635;1636;
1623;1624;1622;1620;1621;1628;1629;1627;1625;1626;
1653;1654;1652;1650;1651;1658;1659;1657;1655;1656;
1643;1644;1642;1640;1641;1648;1649;1647;1645;1646;
1673;1674;1672;1670;1671;1678;1679;1677;1675;1676;
1663;1664;1662;1660;1661;1668;1669;1667;1665;1666;
1693;1694;1692;1690;1691;1698;1699;1697;1695;1696;
1683;1684;1682;1680;1681;1688;1689;1687;1685;1686;
1713;1714;1712;1710;1711;1718;1719;1717;1715;1716;
1703;1704;1702;1700;1701;1708;1709;1707;1705;1706;
1733;1734;1732;1730;1731;1738;1739;1737;1735;1736;
1723;1724;1722;1720;1721;1728;1729;1727;1725;1726;
1753;1754;1752;1750;1751;1758;1759;1757;1755;1756;
1743;1744;1742;1740;1741;1748;1749;1747;1745;1746;
1773;1774;1772;1770;1771;1778;1779;1777;1775;1776;
1763;1764;1762;1760;1761;1768;1769;1767;1765;1766;
1793;1794;1792;1790;1791;1798;1799;1797;1795;1796;
1783;1784;1782;1780;1781;1788;1789;1787;1785;1786;
1813;1814;1812;1810;1811;1818;1819;1817;1815;1816;
1803;1804;1802;1800;1801;1808;1809;1807;1805;1806;
1833;1834;1832;1830;1831;1838;1839;1837;1835;1836;
1823;1824;1822;1820;1821;1828;1829;1827;1825;1826;
1853;1854;1852;1850;1851;1858;1859;1857;1855;1856;
1843;1844;1842;1840;1841;1848;1849;1847;1845;1846;
1873;1874;1872;1870;1871;1878;1879;1877;1875;1876;
1863;1864;1862;1860;1861;1868;1869;1867;1865;1866;
1893;1894;1892;1890;1891;1898;1899;1897;1895;1896;
1883;1884;1882;1880;1881;1888;1889;1887;1885;1886;
1913;1914;1912;1910;1911;1918;1919;1917;1915;1916;
1903;1904;1902;1900;1901;1908;1909;1907;1905;1906;
1933;1934;1932;1930;1931;1938;1939;1937;1935;1936;
1923;1924;1922;1920;1921;1928;1929;1927;1925;1926;
1953;1954;1952;1950;1951;1958;1959;1957;1955;1956;
1943;1944;1942;1940;1941;1948;1949;1947;1945;1946;
1973;1974;1972;1970;1971;1978;1979;1977;1975;1976;
1963;1964;1962;1960;1961;1968;1969;1967;1965;1966;
1993;1994;1992;1990;1991;1998;1999;1997;1995;1996;
1983;1984;1982;1980;1981;1988;1989;1987;1985;1986;
2013;2014;2012;2010;2011;2018;2019;2017;2015;2016;
2003;2004;2002;2000;2001;2008;2009;2007;2005;2006;
2033;2034;2032;2030;2031;2038;2039;2037;2035;2036;
2023;2024;2022;2020;2021;2028;2029;2027;2025;2026;
2053;2054;2052;2050;2051;2058;2059;2057;2055;2056;
2043;2044;2042;2040;2041;2048;2049;2047;2045;2046;
2073;2074;2072;2070;2071;2078;2079;2077;2075;2076;
2063;2064;2062;2060;2061;2068;2069;2067;2065;2066;
2093;2094;2092;2090;2091;2098;2099;2097;2095;2096;
2083;2084;2082;2080;2081;2088;2089;2087;2085;2086;
2113;2114;2112;2110;2111;2118;2119;2117;2115;2116;
2103;2104;2102;2100;2101;2108;2109;2107;2105;2106;
2133;2134;2132;2130;2131;2138;2139;2137;2135;2136;
2123;2124;2122;2120;2121;2128;2129;2127;2125;2126;
2153;2154;2152;2150;2151;2158;2159;2157;2155;2156;
2143;2144;2142;2140;2141;2148;2149;2147;2145;2146;
2173;2174;2172;2170;2171;2178;2179;2177;2175;2176;
2163;2164;2162;2160;2161;2168;2169;2167;2165;2166;
2193;2194;2192;2190;2191;2198;2199;2197;2195;2196;
2183;2184;2182;2180;2181;2188;2189;2187;2185;2186;
2213;2214;2212;2210;2211;2218;2219;2217;2215;2216;
2203;2204;2202;2200;2201;2208;2209;2207;2205;2206;
2233;2234;2232;2230;2231;2238;2239;2237;2235;2236;
2223;2224;2222;2220;2221;2228;2229;2227;2225;2226;
2253;2254;2252;2250;2251;2258;2259;2257;2255;2256;
2243;2244;2242;2240;2241;2248;2249;2247;2245;2246;
2273;2274;2272;2270;2271;2278;2279;2277;2275;2276;
2263;2264;2262;2260;2261;2268;2269;2267;2265;2266;
2293;2294;2292;2290;2291;2298;2299;2297;2295;2296;
2283;2284;2282;2280;2281;2288;2289;2287;2285;2286;
2313;2314;2312;2310;2311;2318;2319;2317;2315;2316;
2303;2304;2302;2300;2301;2308;2309;2307;2305;2306;
2333;2334;2332;2330;2331;2338;2339;2337;2335;2336;
2323;2324;2322;2320;2321;2328;2329;2327;2325;2326;
2353;2354;2352;2350;2351;2358;2359;2357;2355;2356;
2343;2344;2342;2340;2341;2348;2349;2347;2345;2346;
2373;2374;2372;2370;2371;2378;2379;2377;2375;2376;
2363;2364;2362;2360;2361;2368;2369;2367;2365;2366;
2393;2394;2392;2390;2391;2398;2399;2397;2395;2396;
2383;2384;2382;2380;2381;2388;2389;2387;2385;2386;
2413;2414;2412;2410;2411;2418;2419;2417;2415;2416;
2403;2404;2402;2400;2401;2408;2409;2407;2405;2406;
2433;2434;2432;2430;2431;2438;2439;2437;2435;2436;
2423;2424;2422;2420;2421;2428;2429;2427;2425;2426;
2453;2454;2452;2450;2451;2458;2459;2457;2455;2456;
2443;2444;2442;2440;2441;2448;2449;2447;2445;2446;
2473;2474;2472;2470;2471;2478;2479;2477;2475;2476;
2463;2464;2462;2460;2461;2468;2469;2467;2465;2466;
2493;2494;2492;2490;2491;2498;2499;2497;2495;2496;
2483;2484;2482;2480;2481;2488;2489;2487;2485;2486;
2513;2514;2512;2510;2511;2518;2519;2517;2515;2516;
2503;2504;2502;2500;2501;2508;2509;2507;2505;2506;
2533;2534;2532;2530;2531;2538;2539;2537;2535;2536;
2523;2524;2522;2520;2521;2528;2529;2527;2525;2526;
2553;2554;2552;2550;2551;2558;2559;2557;2555;2556;
2543;2544;2542;2540;2541;2548;2549;2547;2545;2546;
2573;2574;2572;2570;2571;2578;2579;2577;2575;2576;
2563;2564;2562;2560;2561;2568;2569;2567;2565;2566;
2593;2594;2592;2590;2591;2598;2599;2597;2595;2596;
2583;2584;2582;2580;2581;2588;2589;2587;2585;2586;
2613;2614;2612;2610;2611;2618;2619;2617;2615;2616;
2603;2604;2602;2600;2601;2608;2609;2607;2605;2606;
2633;2634;2632;2630;2631;2638;2639;2637;2635;2636;
2623;2624;2622;2620;2621;2628;2629;2627;2625;2626;
2653;2654;2652;2650;2651;2658;2659;2657;2655;2656;
2643;2644;2642;2640;2641;2648;2649;2647;2645;2646;
2673;2674;2672;2670;2671;2678;2679;2677;2675;2676;
2663;2664;2662;2660;2661;2668;2669;2667;2665;2666;
2693;2694;2692;2690;2691;2698;2699;2697;2695;2696;
2683;2684;2682;2680;2681;2688;2689;2687;2685;2686;
2713;2714;2712;2710;2711;2718;2719;2717;2715;2716;
2703;2704;2702;2700;2701;2708;2709;2707;2705;2706;
2733;2734;2732;2730;2731;2738;2739;2737;2735;2736;
2723;2724;2722;2720;2721;2728;2729;2727;2725;2726;
2753;2754;2752;2750;2751;2758;2759;2757;2755;2756;
2743;2744;2742;2740;2741;2748;2749;2747;2745;2746;
2773;2774;2772;2770;2771;2778;2779;2777;2775;2776;
2763;2764;2762;2760;2761;2768;2769;2767;2765;2766;
2793;2794;2792;2790;2791;2798;2799;2797;2795;2796;
2783;2784;2782;2780;2781;2788;2789;2787;2785;2786;
2813;2814;2812;2810;2811;2818;2819;2817;2815;2816;
2803;2804;2802;2800;2801;2808;2809;2807;2805;2806;
2833;2834;2832;2830;2831;2838;2839;2837;2835;2836;
2823;2824;2822;2820;2821;2828;2829;2827;2825;2826;
2853;2854;2852;2850;2851;2858;2859;2857;2855;2856;
2843;2844;2842;2840;2841;2848;2849;2847;2845;2846;
2873;2874;2872;2870;2871;2878;2879;2877;2875;2876;
2863;2864;2862;2860;2861;2868;2869;2867;2865;2866;
2893;2894;2892;2890;2891;2898;2899;2897;2895;2896;
2883;2884;2882;2880;2881;2888;2889;2887;2885;2886;
2913;2914;2912;2910;2911;2918;2919;2917;2915;2916;
2903;2904;2902;2900;2901;2908;2909;2907;2905;2906;
2933;2934;2932;2930;2931;2938;2939;2937;2935;2936;
2923;2924;2922;2920;2921;2928;2929;2927;2925;2926;
2953;2954;2952;2950;2951;2958;2959;2957;2955;2956;
2943;2944;2942;2940;2941;2948;2949;2947;2945;2946;
2973;2974;2972;2970;2971;2978;2979;2977;2975;2976;
2963;2964;2962;2960;2961;2968;2969;2967;2965;2966;
2993;2994;2992;2990;2991;2998;2999;2997;2995;2996;
2983;2984;2982;2980;2981;2988;2989;2987;2985;2986;
3013;3014;3012;3010;3011;3018;3019;3017;3015;3016;
3003;3004;3002;3000;3001;3008;3009;3007;3005;3006;
3033;3034;3032;3030;3031;3038;3039;3037;3035;3036;
3023;3024;3022;3020;3021;3028;3029;3027;3025;3026;
3053;3054;3052;3050;3051;3058;3059;3057;3055;3056;
3043;3044;3042;3040;3041;3048;3049;3047;3045;3046;
3073;3074;3072;3070;3071;3078;3079;3077;3075;3076;
3063;3064;3062;3060;3061;3068;3069;3067;3065;3066;
3093;3094;3092;3090;3091;3098;3099;3097;3095;3096;
3083;3084;3082;3080;3081;3088;3089;3087;3085;3086;
3113;3114;3112;3110;3111;3118;3119;3117;3115;3116;
3103;3104;3102;3100;3101;3108;3109;3107;3105;3106;
3133;3134;3132;3130;3131;3138;3139;3137;3135;3136;
3123;3124;3122;3120;3121;3128;3129;3127;3125;3126;
3153;3154;3152;3150;3151;3158;3159;3157;3155;3156;
3143;3144;3142;3140;3141;3148;3149;3147;3145;3146;
3173;3174;3172;3170;3171;3178;3179;3177;3175;3176;
3163;3164;3162;3160;3161;3168;3169;3167;3165;3166;
3193;3194;3192;3190;3191;3198;3199;3197;3195;3196;
3183;3184;3182;3180;3181;3188;3189;3187;3185;3186;
3213;3214;3212;3210;3211;3218;3219;3217;3215;3216;
3203;3204;3202;3200;3201;3208;3209;3207;3205;3206;
3233;3234;3232;3230;3231;3238;3239;3237;3235;3236;
3223;3224;3222;3220;3221;3228;3229;3227;3225;3226;
3253;3254;3252;3250;3251;3258;3259;3257;3255;3256;
3243;3244;3242;3240;3241;3248;3249;3247;3245;3246;
3273;3274;3272;3270;3271;3278;3279;3277;3275;3276;
3263;3264;3262;3260;3261;3268;3269;3267;3265;3266;
3293;3294;3292;3290;3291;3298;3299;3297;3295;3296;
3283;3284;3282;3280;3281;3288;3289;3287;3285;3286;
3313;3314;3312;3310;3311;3318;3319;3317;3315;3316;
3303;3304;3302;3300;3301;3308;3309;3307;3305;3306;
3333;3334;3332;3330;3331;3338;3339;3337;3335;3336;
3323;3324;3322;3320;3321;3328;3329;3327;3325;3326;
3353;3354;3352;3350;3351;3358;3359;3357;3355;3356;
3343;3344;3342;3340;3341;3348;3349;3347;3345;3346;
3373;3374;3372;3370;3371;3378;3379;3377;3375;3376;
3363;3364;3362;3360;3361;3368;3369;3367;3365;3366;
3393;3394;3392;3390;3391;3398;3399;3397;3395;3396;
3383;3384;3382;3380;3381;3388;3389;3387;3385;3386;
3413;3414;3412;3410;3411;3418;3419;3417;3415;3416;
3403;3404;3402;3400;3401;3408;3409;3407;3405;3406;
3433;3434;3432;3430;3431;3438;3439;3437;3435;3436;
3423;3424;3422;3420;3421;3428;3429;3427;3425;3426;
3453;3454;3452;3450;3451;3458;3459;3457;3455;3456;
3443;3444;3442;3440;3441;3448;3449;3447;3445;3446;
3473;3474;3472;3470;3471;3478;3479;3477;3475;3476;
3463;3464;3462;3460;3461;3468;3469;3467;3465;3466;
3493;3494;3492;3490;3491;3498;3499;3497;3495;3496;
3483;3484;3482;3480;3481;3488;3489;3487;3485;3486;
3513;3514;3512;3510;3511;3518;3519;3517;3515;3516;
3503;3504;3502;3500;3501;3508;3509;3507;3505;3506;
3533;3534;3532;3530;3531;3538;3539;3537;3535;3536;
3523;3524;3522;3520;3521;3528;3529;3527;3525;3526;
3553;3554;3552;3550;3551;3558;3559;3557;3555;3556;
3543;3544;3542;3540;3541;3548;3549;3547;3545;3546;
3573;3574;3572;3570;3571;3578;3579;3577;3575;3576;
3563;3564;3562;3560;3561;3568;3569;3567;3565;3566;
3593;3594;3592;3590;3591;3598;3599;3597;3595;3596;
3583;3584;3582;3580;3581;3588;3589;3587;3585;3586;
3613;3614;3612;3610;3611;3618;3619;3617;3615;3616;
3603;3604;3602;3600;3601;3608;3609;3607;3605;3606;
3633;3634;3632;3630;3631;3638;3639;3637;3635;3636;
3623;3624;3622;3620;3621;3628;3629;3627;3625;3626;
3653;3654;3652;3650;3651;3658;3659;3657;3655;3656;
3643;3644;3642;3640;3641;3648;3649;3647;3645;3646;
3673;3674;3672;3670;3671;3678;3679;3677;3675;3676;
3663;3664;3662;3660;3661;3668;3669;3667;3665;3666;
3693;3694;3692;3690;3691;3698;3699;3697;3695;3696;
3683;3684;3682;3680;3681;3688;3689;3687;3685;3686;
3713;3714;3712;3710;3711;3718;3719;3717;3715;3716;
3703;3704;3702;3700;3701;3708;3709;3707;3705;3706;
3733;3734;3732;3730;3731;3738;3739;3737;3735;3736;
3723;3724;3722;3720;3721;3728;3729;3727;3725;3726;
3753;3754;3752;3750;3751;3758;3759;3757;3755;3756;
3743;3744;3742;3740;3741;3748;3749;3747;3745;3746;
3773;3774;3772;3770;3771;3778;3779;3777;3775;3776;
3763;3764;3762;3760;3761;3768;3769;3767;3765;3766;
3793;3794;3792;3790;3791;3798;3799;3797;3795;3796;
3783;3784;3782;3780;3781;3788;3789;3787;3785;3786;
3813;3814;3812;3810;3811;3818;3819;3817;3815;3816;
3803;3804;3802;3800;3801;3808;3809;3807;3805;3806;
3833;3834;3832;3830;3831;3838;3839;3837;3835;3836;
3823;3824;3822;3820;3821;3828;3829;3827;3825;3826;
3853;3854;3852;3850;3851;3858;3859;3857;3855;3856;
3843;3844;3842;3840;3841;3848;3849;3847;3845;3846;
3873;3874;3872;3870;3871;3878;3879;3877;3875;3876;
3863;3864;3862;3860;3861;3868;3869;3867;3865;3866;
3893;3894;3892;3890;3891;3898;3899;3897;3895;3896;
3883;3884;3882;3880;3881;3888;3889;3887;3885;3886;
3913;3914;3912;3910;3911;3918;3919;3917;3915;3916;
3903;3904;3902;3900;3901;3908;3909;3907;3905;3906;
3933;3934;3932;3930;3931;3938;3939;3937;3935;3936;
3923;3924;3922;3920;3921;3928;3929;3927;3925;3926;
3953;3954;3952;3950;3951;3958;3959;3957;3955;3956;
3943;3944;3942;3940;3941;3948;3949;3947;3945;3946;
3973;3974;3972;3970;3971;3978;3979;3977;3975;3976;
3963;3964;3962;3960;3961;3968;3969;3967;3965;3966;
3993;3994;3992;3990;3991;3998;3999;3997;3995;3996;
3983;3984;3982;3980;3981;3988;3989;3987;3985;3986;
4013;4014;4012;4010;4011;4018;4019;4017;4015;4016;
4003;4004;4002;4000;4001;4008;4009;4007;4005;4006;
4033;4034;4032;4030;4031;4038;4039;4037;4035;4036;
4023;4024;4022;4020;4021;4028;4029;4027;4025;4026;
4053;4054;4052;4050;4051;4058;4059;4057;4055;4056;
4043;4044;4042;4040;4041;4048;4049;4047;4045;4046;
4073;4074;4072;4070;4071;4078;4079;4077;4075;4076;
4063;4064;4062;4060;4061;4068;4069;4067;4065;4066;
4093;4094;4092;4090;4091;4098;4099;4097;4095;4096;
4083;4084;4082;4080;4081;4088;4089;4087;4085;4086;
4113;4114;4112;4110;4111;4118;4119;4117;4115;4116;
4103;4104;4102;4100;4101;4108;4109;4107;4105;4106;
4133;4134;4132;4130;4131;4138;4139;4137;4135;4136;
4123;4124;4122;4120;4121;4128;4129;4127;4125;4126;
4153;4154;4152;4150;4151;4158;4159;4157;4155;4156;
4143;4144;4142;4140;4141;4148;4149;4147;4145;4146;
4173;4174;4172;4170;4171;4178;4179;4177;4175;4176;
4163;4164;4162;4160;4161;4168;4169;4167;4165;4166;
4193;4194;4192;4190;4191;4198;4199;4197;4195;4196;
4183;4184;4182;4180;4181;4188;4189;4187;4185;4186;
4213;4214;4212;4210;4211;4218;4219;4217;4215;4216;
4203;4204;4202;4200;4201;4208;4209;4207;4205;4206;
4233;4234;4232;4230;4231;4238;4239;4237;4235;4236;
4223;4224;4222;4220;4221;4228;4229;4227;4225;4226;
4253;4254;4252;4250;4251;4258;4259;4257;4255;4256;
4243;4244;4242;4240;4241;4248;4249;4247;4245;4246;
4273;4274;4272;4270;4271;4278;4279;4277;4275;4276;
4263;4264;4262;4260;4261;4268;4269;4267;4265;4266;
4293;4294;4292;4290;4291;4298;4299;4297;4295;4296;
4283;4284;4282;4280;4281;4288;4289;4287;4285;4286;
4313;4314;4312;4310;4311;4318;4319;4317;4315;4316;
4303;4304;4302;4300;4301;4308;4309;4307;4305;4306;
4333;4334;4332;4330;4331;4338;4339;4337;4335;4336;
4323;4324;4322;4320;4321;4328;4329;4327;4325;4326;
4353;4354;4352;4350;4351;4358;4359;4357;4355;4356;
4343;4344;4342;4340;4341;4348;4349;4347;4345;4346;
4373;4374;4372;4370;4371;4378;4379;4377;4375;4376;
4363;4364;4362;4360;4361;4368;4369;4367;4365;4366;
4393;4394;4392;4390;4391;4398;4399;4397;4395;4396;
4383;4384;4382;4380;4381;4388;4389;4387;4385;4386;
4413;4414;4412;4410;4411;4418;4419;4417;4415;4416;
4403;4404;4402;4400;4401;4408;4409;4407;4405;4406;
4433;4434;4432;4430;4431;4438;4439;4437;4435;4436;
4423;4424;4422;4420;4421;4428;4429;4427;4425;4426;
4453;4454;4452;4450;4451;4458;4459;4457;4455;4456;
4443;4444;4442;4440;4441;4448;4449;4447;4445;4446;
4473;4474;4472;4470;4471;4478;4479;4477;4475;4476;
4463;4464;4462;4460;4461;4468;4469;4467;4465;4466;
4493;4494;4492;4490;4491;4498;4499;4497;4495;4496;
4483;4484;4482;4480;4481;4488;4489;4487;4485;4486;
4513;4514;4512;4510;4511;4518;4519;4517;4515;4516;
4503;4504;4502;4500;4501;4508;4509;4507;4505;4506;
4533;4534;4532;4530;4531;4538;4539;4537;4535;4536;
4523;4524;4522;4520;4521;4528;4529;4527;4525;4526;
4553;4554;4552;4550;4551;4558;4559;4557;4555;4556;
4543;4544;4542;4540;4541;4548;4549;4547;4545;4546;
4573;4574;4572;4570;4571;4578;4579;4577;4575;4576;
4563;4564;4562;4560;4561;4568;4569;4567;4565;4566;
4593;4594;4592;4590;4591;4598;4599;4597;4595;4596;
4583;4584;4582;4580;4581;4588;4589;4587;4585;4586;
4613;4614;4612;4610;4611;4618;4619;4617;4615;4616;
4603;4604;4602;4600;4601;4608;4609;4607;4605;4606;
4633;4634;4632;4630;4631;4638;4639;4637;4635;4636;
4623;4624;4622;4620;4621;4628;4629;4627;4625;4626;
4653;4654;4652;4650;4651;4658;4659;4657;4655;4656;
4643;4644;4642;4640;4641;4648;4649;4647;4645;4646;
4673;4674;4672;4670;4671;4678;4679;4677;4675;4676;
4663;4664;4662;4660;4661;4668;4669;4667;4665;4666;
4693;4694;4692;4690;4691;4698;4699;4697;4695;4696;
4683;4684;4682;4680;4681;4688;4689;4687;4685;4686;
4713;4714;4712;4710;4711;4718;4719;4717;4715;4716;
4703;4704;4702;4700;4701;4708;4709;4707;4705;4706;
4733;4734;4732;4730;4731;4738;4739;4737;4735;4736;
4723;4724;4722;4720;4721;4728;4729;4727;4725;4726;
4753;4754;4752;4750;4751;4758;4759;4757;4755;4756;
4743;4744;4742;4740;4741;4748;4749;4747;4745;4746;
4773;4774;4772;4770;4771;4778;4779;4777;4775;4776;
4763;4764;4762;4760;4761;4768;4769;4767;4765;4766;
4793;4794;4792;4790;4791;4798;4799;4797;4795;4796;
4783;4784;4782;4780;4781;4788;4789;4787;4785;4786;
4813;4814;4812;4810;4811;4818;4819;4817;4815;4816;
4803;4804;4802;4800;4801;4808;4809;4807;4805;4806;
4833;4834;4832;4830;4831;4838;4839;4837;4835;4836;
4823;4824;4822;4820;4821;4828;4829;4827;4825;4826;
4853;4854;4852;4850;4851;4858;4859;4857;4855;4856;
4843;4844;4842;4840;4841;4848;4849;4847;4845;4846;
4873;4874;4872;4870;4871;4878;4879;4877;4875;4876;
4863;4864;4862;4860;4861;4868;4869;4867;4865;4866;
4893;4894;4892;4890;4891;4898;4899;4897;4895;4896;
4883;4884;4882;4880;4881;4888;4889;4887;4885;4886;
4913;4914;4912;4910;4911;4918;4919;4917;4915;4916;
4903;4904;4902;4900;4901;4908;4909;4907;4905;4906;
4933;4934;4932;4930;4931;4938;4939;4937;4935;4936;
4923;4924;4922;4920;4921;4928;4929;4927;4925;4926;
4953;4954;4952;4950;4951;4958;4959;4957;4955;4956;
4943;4944;4942;4940;4941;4948;4949;4947;4945;4946;
4973;4974;4972;4970;4971;4978;4979;4977;4975;4976;
4963;4964;4962;4960;4961;4968;4969;4967;4965;4966;
4993;4994;4992;4990;4991;4998;4999;4997;4995;4996;
4983;4984;4982;4980;4981;4988;4989;4987;4985;4986;
5013;5014;5012;5010;5011;5018;5019;5017;5015;5016;
5003;5004;5002;5000;5001;5008;5009;5007;5005;5006;
5033;5034;5032;5030;5031;5038;5039;5037;5035;5036;
5023;5024;5022;5020;5021;5028;5029;5027;5025;5026;
5053;5054;5052;5050;5051;5058;5059;5057;5055;5056;
5043;5044;5042;5040;5041;5048;5049;5047;5045;5046;
5073;5074;5072;5070;5071;5078;5079;5077;5075;5076;
5063;5064;5062;5060;5061;5068;5069;5067;5065;5066;
5093;5094;5092;5090;5091;5098;5099;5097;5095;5096;
5083;5084;5082;5080;5081;5088;5089;5087;5085;5086;
5113;5114;5112;5110;5111;5118;5119;5117;5115;5116;
5103;5104;5102;5100;5101;5108;5109;5107;5105;5106;
5133;5134;5132;5130;5131;5138;5139;5137;5135;5136;
5123;5124;5122;5120;5121;5128;5129;5127;5125;5126;
5153;5154;5152;5150;5151;5158;5159;5157;5155;5156;
5143;5144;5142;5140;5141;5148;5149;5147;5145;5146;
5173;5174;5172;5170;5171;5178;5179;5177;5175;5176;
5163;5164;5162;5160;5161;5168;5169;5167;5165;5166;
5193;5194;5192;5190;5191;5198;5199;5197;5195;5196;
5183;5184;5182;5180;5181;5188;5189;5187;5185;5186;
5213;5214;5212;5210;5211;5218;5219;5217;5215;5216;
5203;5204;5202;5200;5201;5208;5209;5207;5205;5206;
5233;5234;5232;5230;5231;5238;5239;5237;5235;5236;
5223;5224;5222;5220;5221;5228;5229;5227;5225;5226;
5253;5254;5252;5250;5251;5258;5259;5257;5255;5256;
5243;5244;5242;5240;5241;5248;5249;5247;5245;5246;
5273;5274;5272;5270;5271;5278;5279;5277;5275;5276;
5263;5264;5262;5260;5261;5268;5269;5267;5265;5266;
5293;5294;5292;5290;5291;5298;5299;5297;5295;5296;
5283;5284;5282;5280;5281;5288;5289;5287;5285;5286;
5313;5314;5312;5310;5311;5318;5319;5317;5315;5316;
5303;5304;5302;5300;5301;5308;5309;5307;5305;5306;
5333;5334;5332;5330;5331;5338;5339;5337;5335;5336;
5323;5324;5322;5320;5321;5328;5329;5327;5325;5326;
5353;5354;5352;5350;5351;5358;5359;5357;5355;5356;
5343;5344;5342;5340;5341;5348;5349;5347;5345;5346;
5373;5374;5372;5370;5371;5378;5379;5377;5375;5376;
5363;5364;5362;5360;5361;5368;5369;5367;5365;5366;
5393;5394;5392;5390;5391;5398;5399;5397;5395;5396;
5383;5384;5382;5380;5381;5388;5389;5387;5385;5386;
5413;5414;5412;5410;5411;5418;5419;5417;5415;5416;
5403;5404;5402;5400;5401;5408;5409;5407;5405;5406;
5433;5434;5432;5430;5431;5438;5439;5437;5435;5436;
5423;5424;5422;5420;5421;5428;5429;5427;5425;5426;
5453;5454;5452;5450;5451;5458;5459;5457;5455;5456;
5443;5444;5442;5440;5441;5448;5449;5447;5445;5446;
5473;5474;5472;5470;5471;5478;5479;5477;5475;5476;
5463;5464;5462;5460;5461;5468;5469;5467;5465;5466;
5493;5494;5492;5490;5491;5498;5499;5497;5495;5496;
5483;5484;5482;5480;5481;5488;5489;5487;5485;5486;
5513;5514;5512;5510;5511;5518;5519;5517;5515;5516;
5503;5504;5502;5500;5501;5508;5509;5507;5505;5506;
5533;5534;5532;5530;5531;5538;5539;5537;5535;5536;
5523;5524;5522;5520;5521;5528;5529;5527;5525;5526;
5553;5554;5552;5550;5551;5558;5559;5557;5555;5556;
5543;5544;5542;5540;5541;5548;5549;5547;5545;5546;
5573;5574;5572;5570;5571;5578;5579;5577;5575;5576;
5563;5564;5562;5560;5561;5568;5569;5567;5565;5566;
5593;5594;5592;5590;5591;5598;5599;5597;5595;5596;
5583;5584;5582;5580;5581;5588;5589;5587;5585;5586;
5613;5614;5612;5610;5611;5618;5619;5617;5615;5616;
5603;5604;5602;5600;5601;5608;5609;5607;5605;5606;
5633;5634;5632;5630;5631;5638;5639;5637;5635;5636;
5623;5624;5622;5620;5621;5628;5629;5627;5625;5626;
5653;5654;5652;5650;5651;5658;5659;5657;5655;5656;
5643;5644;5642;5640;5641;5648;5649;5647;5645;5646;
5673;5674;5672;5670;5671;5678;5679;5677;5675;5676;
5663;5664;5662;5660;5661;5668;5669;5667;5665;5666;
5693;5694;5692;5690;5691;5698;5699;5697;5695;5696;
5683;5684;5682;5680;5681;5688;5689;5687;5685;5686;
5713;5714;5712;5710;5711;5718;5719;5717;5715;5716;
5703;5704;5702;5700;5701;5708;5709;5707;5705;5706;
5733;5734;5732;5730;5731;5738;5739;5737;5735;5736;
5723;5724;5722;5720;5721;5728;5729;5727;5725;5726;
5753;5754;5752;5750;5751;5758;5759;5757;5755;5756;
5743;5744;5742;5740;5741;5748;5749;5747;5745;5746;
5773;5774;5772;5770;5771;5778;5779;5777;5775;5776;
5763;5764;5762;5760;5761;5768;5769;5767;5765;5766;
5793;5794;5792;5790;5791;5798;5799;5797;5795;5796;
5783;5784;5782;5780;5781;5788;5789;5787;5785;5786;
5813;5814;5812;5810;5811;5818;5819;5817;5815;5816;
5803;5804;5802;5800;5801;5808;5809;5807;5805;5806;
5833;5834;5832;5830;5831;5838;5839;5837;5835;5836;
5823;5824;5822;5820;5821;5828;5829;5827;5825;5826;
5853;5854;5852;5850;5851;5858;5859;5857;5855;5856;
5843;5844;5842;5840;5841;5848;5849;5847;5845;5846;
5873;5874;5872;5870;5871;5878;5879;5877;5875;5876;
5863;5864;5862;5860;5861;5868;5869;5867;5865;5866;
5893;5894;5892;5890;5891;5898;5899;5897;5895;5896;
5883;5884;5882;5880;5881;5888;5889;5887;5885;5886;
5913;5914;5912;5910;5911;5918;5919;5917;5915;5916;
5903;5904;5902;5900;5901;5908;5909;5907;5905;5906;
5933;5934;5932;5930;5931;5938;5939;5937;5935;5936;
5923;5924;5922;5920;5921;5928;5929;5927;5925;5926;
5953;5954;5952;5950;5951;5958;5959;5957;5955;5956;
5943;5944;5942;5940;5941;5948;5949;5947;5945;5946;
5973;5974;5972;5970;5971;5978;5979;5977;5975;5976;
5963;5964;5962;5960;5961;5968;5969;5967;5965;5966;
5993;5994;5992;5990;5991;5998;5999;5997;5995;5996;
5983;5984;5982;5980;5981;5988;5989;5987;5985;5986;
6013;6014;6012;6010;6011;6018;6019;6017;6015;6016;
6003;6004;6002;6000;6001;6008;6009;6007;6005;6006;
6033;6034;6032;6030;6031;6038;6039;6037;6035;6036;
6023;6024;6022;6020;6021;6028;6029;6027;6025;6026;
6053;6054;6052;6050;6051;6058;6059;6057;6055;6056;
6043;6044;6042;6040;6041;6048;6049;6047;6045;6046;
6073;6074;6072;6070;6071;6078;6079;6077;6075;6076;
6063;6064;6062;6060;6061;6068;6069;6067;6065;6066;
6093;6094;6092;6090;6091;6098;6099;6097;6095;6096;
6083;6084;6082;6080;6081;6088;6089;6087;6085;6086;
6113;6114;6112;6110;6111;6118;6119;6117;6115;6116;
6103;6104;6102;6100;6101;6108;6109;6107;6105;6106;
6133;6134;6132;6130;6131;6138;6139;6137;6135;6136;
6123;6124;6122;6120;6121;6128;6129;6127;6125;6126;
6153;6154;6152;6150;6151;6158;6159;6157;6155;6156;
6143;6144;6142;6140;6141;6148;6149;6147;6145;6146;
6173;6174;6172;6170;6171;6178;6179;6177;6175;6176;
6163;6164;6162;6160;6161;6168;6169;6167;6165;6166;
6193;6194;6192;6190;6191;6198;6199;6197;6195;6196;
6183;6184;6182;6180;6181;6188;6189;6187;6185;6186;
6213;6214;6212;6210;6211;6218;6219;6217;6215;6216;
6203;6204;6202;6200;6201;6208;6209;6207;6205;6206;
6233;6234;6232;6230;6231;6238;6239;6237;6235;6236;
6223;6224;6222;6220;6221;6228;6229;6227;6225;6226;
6253;6254;6252;6250;6251;6258;6259;6257;6255;6256;
6243;6244;6242;6240;6241;6248;6249;6247;6245;6246;
6273;6274;6272;6270;6271;6278;6279;6277;6275;6276;
6263;6264;6262;6260;6261;6268;6269;6267;6265;6266;
6293;6294;6292;6290;6291;6298;6299;6297;6295;6296;
6283;6284;6282;6280;6281;6288;6289;6287;6285;6286;
6313;6314;6312;6310;6311;6318;6319;6317;6315;6316;
6303;6304;6302;6300;6301;6308;6309;6307;6305;6306;
6333;6334;6332;6330;6331;6338;6339;6337;6335;6336;
6323;6324;6322;6320;6321;6328;6329;6327;6325;6326;
6353;6354;6352;6350;6351;6358;6359;6357;6355;6356;
6343;6344;6342;6340;6341;6348;6349;6347;6345;6346;
6373;6374;6372;6370;6371;6378;6379;6377;6375;6376;
6363;6364;6362;6360;6361;6368;6369;6367;6365;6366;
6393;6394;6392;6390;6391;6398;6399;6397;6395;6396;
6383;6384;6382;6380;6381;6388;6389;6387;6385;6386;
6413;6414;6412;6410;6411;6418;6419;6417;6415;6416;
6403;6404;6402;6400;6401;6408;6409;6407;6405;6406;
6433;6434;6432;6430;6431;6438;6439;6437;6435;6436;
6423;6424;6422;6420;6421;6428;6429;6427;6425;6426;
6453;6454;6452;6450;6451;6458;6459;6457;6455;6456;
6443;6444;6442;6440;6441;6448;6449;6447;6445;6446;
6473;6474;6472;6470;6471;6478;6479;6477;6475;6476;
6463;6464;6462;6460;6461;6468;6469;6467;6465;6466;
6493;6494;6492;6490;6491;6498;6499;6497;6495;6496;
6483;6484;6482;6480;6481;6488;6489;6487;6485;6486;
6513;6514;6512;6510;6511;6518;6519;6517;6515;6516;
6503;6504;6502;6500;6501;6508;6509;6507;6505;6506;
6533;6534;6532;6530;6531;6538;6539;6537;6535;6536;
6523;6524;6522;6520;6521;6528;6529;6527;6525;6526;
6553;6554;6552;6550;6551;6558;6559;6557;6555;6556;
6543;6544;6542;6540;6541;6548;6549;6547;6545;6546;
6573;6574;6572;6570;6571;6578;6579;6577;6575;6576;
6563;6564;6562;6560;6561;6568;6569;6567;6565;6566;
6593;6594;6592;6590;6591;6598;6599;6597;6595;6596;
6583;6584;6582;6580;6581;6588;6589;6587;6585;6586;
6613;6614;6612;6610;6611;6618;6619;6617;6615;6616;
6603;6604;6602;6600;6601;6608;6609;6607;6605;6606;
6633;6634;6632;6630;6631;6638;6639;6637;6635;6636;
6623;6624;6622;6620;6621;6628;6629;6627;6625;6626;
6653;6654;6652;6650;6651;6658;6659;6657;6655;6656;
6643;6644;6642;6640;6641;6648;6649;6647;6645;6646;
6673;6674;6672;6670;6671;6678;6679;6677;6675;6676;
6663;6664;6662;6660;6661;6668;6669;6667;6665;6666;
6693;6694;6692;6690;6691;6698;6699;6697;6695;6696;
6683;6684;6682;6680;6681;6688;6689;6687;6685;6686;
6713;6714;6712;6710;6711;6718;6719;6717;6715;6716;
6703;6704;6702;6700;6701;6708;6709;6707;6705;6706;
6733;6734;6732;6730;6731;6738;6739;6737;6735;6736;
6723;6724;6722;6720;6721;6728;6729;6727;6725;6726;
6753;6754;6752;6750;6751;6758;6759;6757;6755;6756;
6743;6744;6742;6740;6741;6748;6749;6747;6745;6746;
6773;6774;6772;6770;6771;6778;6779;6777;6775;6776;
6763;6764;6762;6760;6761;6768;6769;6767;6765;6766;
6793;6794;6792;6790;6791;6798;6799;6797;6795;6796;
6783;6784;6782;6780;6781;6788;6789;6787;6785;6786;
6813;6814;6812;6810;6811;6818;6819;6817;6815;6816;
6803;6804;6802;6800;6801;6808;6809;6807;6805;6806;
6833;6834;6832;6830;6831;6838;6839;6837;6835;6836;
6823;6824;6822;6820;6821;6828;6829;6827;6825;6826;
6853;6854;6852;6850;6851;6858;6859;6857;6855;6856;
6843;6844;6842;6840;6841;6848;6849;6847;6845;6846;
6873;6874;6872;6870;6871;6878;6879;6877;6875;6876;
6863;6864;6862;6860;6861;6868;6869;6867;6865;6866;
6893;6894;6892;6890;6891;6898;6899;6897;6895;6896;
6883;6884;6882;6880;6881;6888;6889;6887;6885;6886;
6913;6914;6912;6910;6911;6918;6919;6917;6915;6916;
6903;6904;6902;6900;6901;6908;6909;6907;6905;6906;
6933;6934;6932;6930;6931;6938;6939;6937;6935;6936;
6923;6924;6922;6920;6921;6928;6929;6927;6925;6926;
6953;6954;6952;6950;6951;6958;6959;6957;6955;6956;
6943;6944;6942;6940;6941;6948;6949;6947;6945;6946;
6973;6974;6972;6970;6971;6978;6979;6977;6975;6976;
6963;6964;6962;6960;6961;6968;6969;6967;6965;6966;
6993;6994;6992;6990;6991;6998;6999;6997;6995;6996;
6983;6984;6982;6980;6981;6988;6989;6987;6985;6986;
7013;7014;7012;7010;7011;7018;7019;7017;7015;7016;
7003;7004;7002;7000;7001;7008;7009;7007;7005;7006;
7033;7034;7032;7030;7031;7038;7039;7037;7035;7036;
7023;7024;7022;7020;7021;7028;7029;7027;7025;7026;
7053;7054;7052;7050;7051;7058;7059;7057;7055;7056;
7043;7044;7042;7040;7041;7048;7049;7047;7045;7046;
7073;7074;7072;7070;7071;7078;7079;7077;7075;7076;
7063;7064;7062;7060;7061;7068;7069;7067;7065;7066;
7093;7094;7092;7090;7091;7098;7099;7097;7095;7096;
7083;7084;7082;7080;7081;7088;7089;7087;7085;7086;
7113;7114;7112;7110;7111;7118;7119;7117;7115;7116;
7103;7104;7102;7100;7101;7108;7109;7107;7105;7106;
7133;7134;7132;7130;7131;7138;7139;7137;7135;7136;
7123;7124;7122;7120;7121;7128;7129;7127;7125;7126;
7153;7154;7152;7150;7151;7158;7159;7157;7155;7156;
7143;7144;7142;7140;7141;7148;7149;7147;7145;7146;
7173;7174;7172;7170;7171;7178;7179;7177;7175;7176;
7163;7164;7162;7160;7161;7168;7169;7167;7165;7166;
7193;7194;7192;7190;7191;7198;7199;7197;7195;7196;
7183;7184;7182;7180;7181;7188;7189;7187;7185;7186;
7213;7214;7212;7210;7211;7218;7219;7217;7215;7216;
7203;7204;7202;7200;7201;7208;7209;7207;7205;7206;
7233;7234;7232;7230;7231;7238;7239;7237;7235;7236;
7223;7224;7222;7220;7221;7228;7229;7227;7225;7226;
7253;7254;7252;7250;7251;7258;7259;7257;7255;7256;
7243;7244;7242;7240;7241;7248;7249;7247;7245;7246;
7273;7274;7272;7270;7271;7278;7279;7277;7275;7276;
7263;7264;7262;7260;7261;7268;7269;7267;7265;7266;
7293;7294;7292;7290;7291;7298;7299;7297;7295;7296;
7283;7284;7282;7280;7281;7288;7289;7287;7285;7286;
7313;7314;7312;7310;7311;7318;7319;7317;7315;7316;
7303;7304;7302;7300;7301;7308;7309;7307;7305;7306;
7333;7334;7332;7330;7331;7338;7339;7337;7335;7336;
7323;7324;7322;7320;7321;7328;7329;7327;7325;7326;
7353;7354;7352;7350;7351;7358;7359;7357;7355;7356;
7343;7344;7342;7340;7341;7348;7349;7347;7345;7346;
7373;7374;7372;7370;7371;7378;7379;7377;7375;7376;
7363;7364;7362;7360;7361;7368;7369;7367;7365;7366;
7393;7394;7392;7390;7391;7398;7399;7397;7395;7396;
7383;7384;7382;7380;7381;7388;7389;7387;7385;7386;
7413;7414;7412;7410;7411;7418;7419;7417;7415;7416;
7403;7404;7402;7400;7401;7408;7409;7407;7405;7406;
7433;7434;7432;7430;7431;7438;7439;7437;7435;7436;
7423;7424;7422;7420;7421;7428;7429;7427;7425;7426;
7453;7454;7452;7450;7451;7458;7459;7457;7455;7456;
7443;7444;7442;7440;7441;7448;7449;7447;7445;7446;
7473;7474;7472;7470;7471;7478;7479;7477;7475;7476;
7463;7464;7462;7460;7461;7468;7469;7467;7465;7466;
7493;7494;7492;7490;7491;7498;7499;7497;7495;7496;
7483;7484;7482;7480;7481;7488;7489;7487;7485;7486;
7513;7514;7512;7510;7511;7518;7519;7517;7515;7516;
7503;7504;7502;7500;7501;7508;7509;7507;7505;7506;
7533;7534;7532;7530;7531;7538;7539;7537;7535;7536;
7523;7524;7522;7520;7521;7528;7529;7527;7525;7526;
7553;7554;7552;7550;7551;7558;7559;7557;7555;7556;
7543;7544;7542;7540;7541;7548;7549;7547;7545;7546;
7573;7574;7572;7570;7571;7578;7579;7577;7575;7576;
7563;7564;7562;7560;7561;7568;7569;7567;7565;7566;
7593;7594;7592;7590;7591;7598;7599;7597;7595;7596;
7583;7584;7582;7580;7581;7588;7589;7587;7585;7586;
7613;7614;7612;7610;7611;7618;7619;7617;7615;7616;
7603;7604;7602;7600;7601;7608;7609;7607;7605;7606;
7633;7634;7632;7630;7631;7638;7639;7637;7635;7636;
7623;7624;7622;7620;7621;7628;7629;7627;7625;7626;
7653;7654;7652;7650;7651;7658;7659;7657;7655;7656;
7643;7644;7642;7640;7641;7648;7649;7647;7645;7646;
7673;7674;7672;7670;7671;7678;7679;7677;7675;7676;
7663;7664;7662;7660;7661;7668;7669;7667;7665;7666;
7693;7694;7692;7690;7691;7698;7699;7697;7695;7696;
7683;7684;7682;7680;7681;7688;7689;7687;7685;7686;
7713;7714;7712;7710;7711;7718;7719;7717;7715;7716;
7703;7704;7702;7700;7701;7708;7709;7707;7705;7706;
7733;7734;7732;7730;7731;7738;7739;7737;7735;7736;
7723;7724;7722;7720;7721;7728;7729;7727;7725;7726;
7753;7754;7752;7750;7751;7758;7759;7757;7755;7756;
7743;7744;7742;7740;7741;7748;7749;7747;7745;7746;
7773;7774;7772;7770;7771;7778;7779;7777;7775;7776;
7763;7764;7762;7760;7761;7768;7769;7767;7765;7766;
7793;7794;7792;7790;7791;7798;7799;7797;7795;7796;
7783;7784;7782;7780;7781;7788;7789;7787;7785;7786;
7813;7814;7812;7810;7811;7818;7819;7817;7815;7816;
7803;7804;7802;7800;7801;7808;7809;7807;7805;7806;
7833;7834;7832;7830;7831;7838;7839;7837;7835;7836;
7823;7824;7822;7820;7821;7828;7829;7827;7825;7826;
7853;7854;7852;7850;7851;7858;7859;7857;7855;7856;
7843;7844;7842;7840;7841;7848;7849;7847;7845;7846;
7873;7874;7872;7870;7871;7878;7879;7877;7875;7876;
7863;7864;7862;7860;7861;7868;7869;7867;7865;7866;
7893;7894;7892;7890;7891;7898;7899;7897;7895;7896;
7883;7884;7882;7880;7881;7888;7889;7887;7885;7886;
7913;7914;7912;7910;7911;7918;7919;7917;7915;7916;
7903;7904;7902;7900;7901;7908;7909;7907;7905;7906;
7933;7934;7932;7930;7931;7938;7939;7937;7935;7936;
7923;7924;7922;7920;7921;7928;7929;7927;7925;7926;
7953;7954;7952;7950;7951;7958;7959;7957;7955;7956;
7943;7944;7942;7940;7941;7948;7949;7947;7945;7946;
7973;7974;7972;7970;7971;7978;7979;7977;7975;7976;
7963;7964;7962;7960;7961;7968;7969;7967;7965;7966;
7993;7994;7992;7990;7991;7998;7999;7997;7995;7996;
7983;7984;7982;7980;7981;7988;7989;7987;7985;7986;
8013;8014;8012;8010;8011;8018;8019;8017;8015;8016;
8003;8004;8002;8000;8001;8008;8009;8007;8005;8006;
8033;8034;8032;8030;8031;8038;8039;8037;8035;8036;
8023;8024;8022;8020;8021;8028;8029;8027;8025;8026;
8053;8054;8052;8050;8051;8058;8059;8057;8055;8056;
8043;8044;8042;8040;8041;8048;8049;8047;8045;8046;
8073;8074;8072;8070;8071;8078;8079;8077;8075;8076;
8063;8064;8062;8060;8061;8068;8069;8067;8065;8066;
8093;8094;8092;8090;8091;8098;8099;8097;8095;8096;
8083;8084;8082;8080;8081;8088;8089;8087;8085;8086;
8113;8114;8112;8110;8111;8118;8119;8117;8115;8116;
8103;8104;8102;8100;8101;8108;8109;8107;8105;8106;
8133;8134;8132;8130;8131;8138;8139;8137;8135;8136;
8123;8124;8122;8120;8121;8128;8129;8127;8125;8126;
8153;8154;8152;8150;8151;8158;8159;8157;8155;8156;
8143;8144;8142;8140;8141;8148;8149;8147;8145;8146;
8173;8174;8172;8170;8171;8178;8179;8177;8175;8176;
8163;8164;8162;8160;8161;8168;8169;8167;8165;8166;
8193;8194;8192;8190;8191;8198;8199;8197;8195;8196;
8183;8184;8182;8180;8181;8188;8189;8187;8185;8186;
8213;8214;8212;8210;8211;8218;8219;8217;8215;8216;
8203;8204;8202;8200;8201;8208;8209;8207;8205;8206;
8233;8234;8232;8230;8231;8238;8239;8237;8235;8236;
8223;8224;8222;8220;8221;8228;8229;8227;8225;8226;
8253;8254;8252;8250;8251;8258;8259;8257;8255;8256;
8243;8244;8242;8240;8241;8248;8249;8247;8245;8246;
8273;8274;8272;8270;8271;8278;8279;8277;8275;8276;
8263;8264;8262;8260;8261;8268;8269;8267;8265;8266;
8293;8294;8292;8290;8291;8298;8299;8297;8295;8296;
8283;8284;8282;8280;8281;8288;8289;8287;8285;8286;
8313;8314;8312;8310;8311;8318;8319;8317;8315;8316;
8303;8304;8302;8300;8301;8308;8309;8307;8305;8306;
8333;8334;8332;8330;8331;8338;8339;8337;8335;8336;
8323;8324;8322;8320;8321;8328;8329;8327;8325;8326;
8353;8354;8352;8350;8351;8358;8359;8357;8355;8356;
8343;8344;8342;8340;8341;8348;8349;8347;8345;8346;
8373;8374;8372;8370;8371;8378;8379;8377;8375;8376;
8363;8364;8362;8360;8361;8368;8369;8367;8365;8366;
8393;8394;8392;8390;8391;8398;8399;8397;8395;8396;
8383;8384;8382;8380;8381;8388;8389;8387;8385;8386;
8413;8414;8412;8410;8411;8418;8419;8417;8415;8416;
8403;8404;8402;8400;8401;8408;8409;8407;8405;8406;
8433;8434;8432;8430;8431;8438;8439;8437;8435;8436;
8423;8424;8422;8420;8421;8428;8429;8427;8425;8426;
8453;8454;8452;8450;8451;8458;8459;8457;8455;8456;
8443;8444;8442;8440;8441;8448;8449;8447;8445;8446;
8473;8474;8472;8470;8471;8478;8479;8477;8475;8476;
8463;8464;8462;8460;8461;8468;8469;8467;8465;8466;
8493;8494;8492;8490;8491;8498;8499;8497;8495;8496;
8483;8484;8482;8480;8481;8488;8489;8487;8485;8486;
8513;8514;8512;8510;8511;8518;8519;8517;8515;8516;
8503;8504;8502;8500;8501;8508;8509;8507;8505;8506;
8533;8534;8532;8530;8531;8538;8539;8537;8535;8536;
8523;8524;8522;8520;8521;8528;8529;8527;8525;8526;
8553;8554;8552;8550;8551;8558;8559;8557;8555;8556;
8543;8544;8542;8540;8541;8548;8549;8547;8545;8546;
8573;8574;8572;8570;8571;8578;8579;8577;8575;8576;
8563;8564;8562;8560;8561;8568;8569;8567;8565;8566;
8593;8594;8592;8590;8591;8598;8599;8597;8595;8596;
8583;8584;8582;8580;8581;8588;8589;8587;8585;8586;
8613;8614;8612;8610;8611;8618;8619;8617;8615;8616;
8603;8604;8602;8600;8601;8608;8609;8607;8605;8606;
8633;8634;8632;8630;8631;8638;8639;8637;8635;8636;
8623;8624;8622;8620;8621;8628;8629;8627;8625;8626;
8653;8654;8652;8650;8651;8658;8659;8657;8655;8656;
8643;8644;8642;8640;8641;8648;8649;8647;8645;8646;
8673;8674;8672;8670;8671;8678;8679;8677;8675;8676;
8663;8664;8662;8660;8661;8668;8669;8667;8665;8666;
8693;8694;8692;8690;8691;8698;8699;8697;8695;8696;
8683;8684;8682;8680;8681;8688;8689;8687;8685;8686;
8713;8714;8712;8710;8711;8718;8719;8717;8715;8716;
8703;8704;8702;8700;8701;8708;8709;8707;8705;8706;
8733;8734;8732;8730;8731;8738;8739;8737;8735;8736;
8723;8724;8722;8720;8721;8728;8729;8727;8725;8726;
8753;8754;8752;8750;8751;8758;8759;8757;8755;8756;
8743;8744;8742;8740;8741;8748;8749;8747;8745;8746;
8773;8774;8772;8770;8771;8778;8779;8777;8775;8776;
8763;8764;8762;8760;8761;8768;8769;8767;8765;8766;
8793;8794;8792;8790;8791;8798;8799;8797;8795;8796;
8783;8784;8782;8780;8781;8788;8789;8787;8785;8786;
8813;8814;8812;8810;8811;8818;8819;8817;8815;8816;
8803;8804;8802;8800;8801;8808;8809;8807;8805;8806;
8833;8834;8832;8830;8831;8838;8839;8837;8835;8836;
8823;8824;8822;8820;8821;8828;8829;8827;8825;8826;
8853;8854;8852;8850;8851;8858;8859;8857;8855;8856;
8843;8844;8842;8840;8841;8848;8849;8847;8845;8846;
8873;8874;8872;8870;8871;8878;8879;8877;8875;8876;
8863;8864;8862;8860;8861;8868;8869;8867;8865;8866;
8893;8894;8892;8890;8891;8898;8899;8897;8895;8896;
8883;8884;8882;8880;8881;8888;8889;8887;8885;8886;
8913;8914;8912;8910;8911;8918;8919;8917;8915;8916;
8903;8904;8902;8900;8901;8908;8909;8907;8905;8906;
8933;8934;8932;8930;8931;8938;8939;8937;8935;8936;
8923;8924;8922;8920;8921;8928;8929;8927;8925;8926;
8953;8954;8952;8950;8951;8958;8959;8957;8955;8956;
8943;8944;8942;8940;8941;8948;8949;8947;8945;8946;
8973;8974;8972;8970;8971;8978;8979;8977;8975;8976;
8963;8964;8962;8960;8961;8968;8969;8967;8965;8966;
8993;8994;8992;8990;8991;8998;8999;8997;8995;8996;
8983;8984;8982;8980;8981;8988;8989;8987;8985;8986;
9013;9014;9012;9010;9011;9018;9019;9017;9015;9016;
9003;9004;9002;9000;9001;9008;9009;9007;9005;9006;
9033;9034;9032;9030;9031;9038;9039;9037;9035;9036;
9023;9024;9022;9020;9021;9028;9029;9027;9025;9026;
9053;9054;9052;9050;9051;9058;9059;9057;9055;9056;
9043;9044;9042;9040;9041;9048;9049;9047;9045;9046;
9073;9074;9072;9070;9071;9078;9079;9077;9075;9076;
9063;9064;9062;9060;9061;9068;9069;9067;9065;9066;
9093;9094;9092;9090;9091;9098;9099;9097;9095;9096;
9083;9084;9082;9080;9081;9088;9089;9087;9085;9086;
9113;9114;9112;9110;9111;9118;9119;9117;9115;9116;
9103;9104;9102;9100;9101;9108;9109;9107;9105;9106;
9133;9134;9132;9130;9131;9138;9139;9137;9135;9136;
9123;9124;9122;9120;9121;9128;9129;9127;9125;9126;
9153;9154;9152;9150;9151;9158;9159;9157;9155;9156;
9143;9144;9142;9140;9141;9148;9149;9147;9145;9146;
9173;9174;9172;9170;9171;9178;9179;9177;9175;9176;
9163;9164;9162;9160;9161;9168;9169;9167;9165;9166;
9193;9194;9192;9190;9191;9198;9199;9197;9195;9196;
9183;9184;9182;9180;9181;9188;9189;9187;9185;9186;
9213;9214;9212;9210;9211;9218;9219;9217;9215;9216;
9203;9204;9202;9200;9201;9208;9209;9207;9205;9206;
9233;9234;9232;9230;9231;9238;9239;9237;9235;9236;
9223;9224;9222;9220;9221;9228;9229;9227;9225;9226;
9253;9254;9252;9250;9251;9258;9259;9257;9255;9256;
9243;9244;9242;9240;9241;9248;9249;9247;9245;9246;
9273;9274;9272;9270;9271;9278;9279;9277;9275;9276;
9263;9264;9262;9260;9261;9268;9269;9267;9265;9266;
9293;9294;9292;9290;9291;9298;9299;9297;9295;9296;
9283;9284;9282;9280;9281;9288;9289;9287;9285;9286;
9313;9314;9312;9310;9311;9318;9319;9317;9315;9316;
9303;9304;9302;9300;9301;9308;9309;9307;9305;9306;
9333;9334;9332;9330;9331;9338;9339;9337;9335;9336;
9323;9324;9322;9320;9321;9328;9329;9327;9325;9326;
9353;9354;9352;9350;9351;9358;9359;9357;9355;9356;
9343;9344;9342;9340;9341;9348;9349;9347;9345;9346;
9373;9374;9372;9370;9371;9378;9379;9377;9375;9376;
9363;9364;9362;9360;9361;9368;9369;9367;9365;9366;
9393;9394;9392;9390;9391;9398;9399;9397;9395;9396;
9383;9384;9382;9380;9381;9388;9389;9387;9385;9386;
9413;9414;9412;9410;9411;9418;9419;9417;9415;9416;
9403;9404;9402;9400;9401;9408;9409;9407;9405;9406;
9433;9434;9432;9430;9431;9438;9439;9437;9435;9436;
9423;9424;9422;9420;9421;9428;9429;9427;9425;9426;
9453;9454;9452;9450;9451;9458;9459;9457;9455;9456;
9443;9444;9442;9440;9441;9448;9449;9447;9445;9446;
9473;9474;9472;9470;9471;9478;9479;9477;9475;9476;
9463;9464;9462;9460;9461;9468;9469;9467;9465;9466;
9493;9494;9492;9490;9491;9498;9499;9497;9495;9496;
9483;9484;9482;9480;9481;9488;9489;9487;9485;9486;
9513;9514;9512;9510;9511;9518;9519;9517;9515;9516;
9503;9504;9502;9500;9501;9508;9509;9507;9505;9506;
9533;9534;9532;9530;9531;9538;9539;9537;9535;9536;
9523;9524;9522;9520;9521;9528;9529;9527;9525;9526;
9553;9554;9552;9550;9551;9558;9559;9557;9555;9556;
9543;9544;9542;9540;9541;9548;9549;9547;9545;9546;
9573;9574;9572;9570;9571;9578;9579;9577;9575;9576;
9563;9564;9562;9560;9561;9568;9569;9567;9565;9566;
9593;9594;9592;9590;9591;9598;9599;9597;9595;9596;
9583;9584;9582;9580;9581;9588;9589;9587;9585;9586;
9613;9614;9612;9610;9611;9618;9619;9617;9615;9616;
9603;9604;9602;9600;9601;9608;9609;9607;9605;9606;
9633;9634;9632;9630;9631;9638;9639;9637;9635;9636;
9623;9624;9622;9620;9621;9628;9629;9627;9625;9626;
9653;9654;9652;9650;9651;9658;9659;9657;9655;9656;
9643;9644;9642;9640;9641;9648;9649;9647;9645;9646;
9673;9674;9672;9670;9671;9678;9679;9677;9675;9676;
9663;9664;9662;9660;9661;9668;9669;9667;9665;9666;
9693;9694;9692;9690;9691;9698;9699;9697;9695;9696;
9683;9684;9682;9680;9681;9688;9689;9687;9685;9686;
9713;9714;9712;9710;9711;9718;9719;9717;9715;9716;
9703;9704;9702;9700;9701;9708;9709;9707;9705;9706;
9733;9734;9732;9730;9731;9738;9739;9737;9735;9736;
9723;9724;9722;9720;9721;9728;9729;9727;9725;9726;
9753;9754;9752;9750;9751;9758;9759;9757;9755;9756;
9743;9744;9742;9740;9741;9748;9749;9747;9745;9746;
9773;9774;9772;9770;9771;9778;9779;9777;9775;9776;
9763;9764;9762;9760;9761;9768;9769;9767;9765;9766;
9793;9794;9792;9790;9791;9798;9799;9797;9795;9796;
9783;9784;9782;9780;9781;9788;9789;9787;9785;9786;
9813;9814;9812;9810;9811;9818;9819;9817;9815;9816;
9803;9804;9802;9800;9801;9808;9809;9807;9805;9806;
9833;9834;9832;9830;9831;9838;9839;9837;9835;9836;
9823;9824;9822;9820;9821;9828;9829;9827;9825;9826;
9853;9854;9852;9850;9851;9858;9859;9857;9855;9856;
9843;9844;9842;9840;9841;9848;9849;9847;9845;9846;
9873;9874;9872;9870;9871;9878;9879;9877;9875;9876;
9863;9864;9862;9860;9861;9868;9869;9867;9865;9866;
9893;9894;9892;9890;9891;9898;9899;9897;9895;9896;
9883;9884;9882;9880;9881;9888;9889;9887;9885;9886;
9913;9914;9912;9910;9911;9918;9919;9917;9915;9916;
9903;9904;9902;9900;9901;9908;9909;9907;9905;9906;
9933;9934;9932;9930;9931;9938;9939;9937;9935;9936;
9923;9924;9922;9920;9921;9928;9929;9927;9925;9926;
9953;9954;9952;9950;9951;9958;9959;9957;9955;9956;
9943;9944;9942;9940;9941;9948;9949;9947;9945;9946;
9973;9974;9972;9970;9971;9978;9979;9977;9975;9976;
9963;9964;9962;9960;9961;9968;9969;9967;9965;9966;
9993;9994;9992;9990;9991;9998;9999;9997;9995;9996;
9983;9984;9982;9980;9981;9988;9989;9987;9985;9986;
10013;10014;10012;10010;10011;10018;10019;10017;10015;10016;
10003;10004;10002;10000;10001;10008;10009;10007;10005;10006;
10033;10034;10032;10030;10031;10038;10039;10037;10035;10036;
10023;10024;10022;10020;10021;10028;10029;10027;10025;10026;
10053;10054;10052;10050;10051;10058;10059;10057;10055;10056;
10043;10044;10042;10040;10041;10048;10049;10047;10045;10046;
10073;10074;10072;10070;10071;10078;10079;10077;10075;10076;
10063;10064;10062;10060;10061;10068;10069;10067;10065;10066;
10093;10094;10092;10090;10091;10098;10099;10097;10095;10096;
10083;10084;10082;10080;10081;10088;10089;10087;10085;10086;
10113;10114;10112;10110;10111;10118;10119;10117;10115;10116;
10103;10104;10102;10100;10101;10108;10109;10107;10105;10106;
10133;10134;10132;10130;10131;10138;10139;10137;10135;10136;
10123;10124;10122;10120;10121;10128;10129;10127;10125;10126;
10153;10154;10152;10150;10151;10158;10159;10157;10155;10156;
10143;10144;10142;10140;10141;10148;10149;10147;10145;10146;
10173;10174;10172;10170;10171;10178;10179;10177;10175;10176;
10163;10164;10162;10160;10161;10168;10169;10167;10165;10166;
10193;10194;10192;10190;10191;10198;10199;10197;10195;10196;
10183;10184;10182;10180;10181;10188;10189;10187;10185;10186;
10213;10214;10212;10210;10211;10218;10219;10217;10215;10216;
10203;10204;10202;10200;10201;10208;10209;10207;10205;10206;
10233;10234;10232;10230;10231;10238;10239;10237;10235;10236;
10223;10224;10222;10220;10221;10228;10229;10227;10225;10226;
10253;10254;10252;10250;10251;10258;10259;10257;10255;10256;
10243;10244;10242;10240;10241;10248;10249;10247;10245;10246;
10273;10274;10272;10270;10271;10278;10279;10277;10275;10276;
10263;10264;10262;10260;10261;10268;10269;10267;10265;10266;
10293;10294;10292;10290;10291;10298;10299;10297;10295;10296;
10283;10284;10282;10280;10281;10288;10289;10287;10285;10286;
10313;10314;10312;10310;10311;10318;10319;10317;10315;10316;
10303;10304;10302;10300;10301;10308;10309;10307;10305;10306;
10333;10334;10332;10330;10331;10338;10339;10337;10335;10336;
10323;10324;10322;10320;10321;10328;10329;10327;10325;10326;
10353;10354;10352;10350;10351;10358;10359;10357;10355;10356;
10343;10344;10342;10340;10341;10348;10349;10347;10345;10346;
10373;10374;10372;10370;10371;10378;10379;10377;10375;10376;
10363;10364;10362;10360;10361;10368;10369;10367;10365;10366;
10393;10394;10392;10390;10391;10398;10399;10397;10395;10396;
10383;10384;10382;10380;10381;10388;10389;10387;10385;10386;
10413;10414;10412;10410;10411;10418;10419;10417;10415;10416;
10403;10404;10402;10400;10401;10408;10409;10407;10405;10406;
10433;10434;10432;10430;10431;10438;10439;10437;10435;10436;
10423;10424;10422;10420;10421;10428;10429;10427;10425;10426;
10453;10454;10452;10450;10451;10458;10459;10457;10455;10456;
10443;10444;10442;10440;10441;10448;10449;10447;10445;10446;
10473;10474;10472;10470;10471;10478;10479;10477;10475;10476;
10463;10464;10462;10460;10461;10468;10469;10467;10465;10466;
10493;10494;10492;10490;10491;10498;10499;10497;10495;10496;
10483;10484;10482;10480;10481;10488;10489;10487;10485;10486;
10513;10514;10512;10510;10511;10518;10519;10517;10515;10516;
10503;10504;10502;10500;10501;10508;10509;10507;10505;10506;
10533;10534;10532;10530;10531;10538;10539;10537;10535;10536;
10523;10524;10522;10520;10521;10528;10529;10527;10525;10526;
10553;10554;10552;10550;10551;10558;10559;10557;10555;10556;
10543;10544;10542;10540;10541;10548;10549;10547;10545;10546;
10573;10574;10572;10570;10571;10578;10579;10577;10575;10576;
10563;10564;10562;10560;10561;10568;10569;10567;10565;10566;
10593;10594;10592;10590;10591;10598;10599;10597;10595;10596;
10583;10584;10582;10580;10581;10588;10589;10587;10585;10586;
10613;10614;10612;10610;10611;10618;10619;10617;10615;10616;
10603;10604;10602;10600;10601;10608;10609;10607;10605;10606;
10633;10634;10632;10630;10631;10638;10639;10637;10635;10636;
10623;10624;10622;10620;10621;10628;10629;10627;10625;10626;
10653;10654;10652;10650;10651;10658;10659;10657;10655;10656;
10643;10644;10642;10640;10641;10648;10649;10647;10645;10646;
10673;10674;10672;10670;10671;10678;10679;10677;10675;10676;
10663;10664;10662;10660;10661;10668;10669;10667;10665;10666;
10693;10694;10692;10690;10691;10698;10699;10697;10695;10696;
10683;10684;10682;10680;10681;10688;10689;10687;10685;10686;
10713;10714;10712;10710;10711;10718;10719;10717;10715;10716;
10703;10704;10702;10700;10701;10708;10709;10707;10705;10706;
10733;10734;10732;10730;10731;10738;10739;10737;10735;10736;
10723;10724;10722;10720;10721;10728;10729;10727;10725;10726;
10753;10754;10752;10750;10751;10758;10759;10757;10755;10756;
10743;10744;10742;10740;10741;10748;10749;10747;10745;10746;
10773;10774;10772;10770;10771;10778;10779;10777;10775;10776;
10763;10764;10762;10760;10761;10768;10769;10767;10765;10766;
10793;10794;10792;10790;10791;10798;10799;10797;10795;10796;
10783;10784;10782;10780;10781;10788;10789;10787;10785;10786;
10813;10814;10812;10810;10811;10818;10819;10817;10815;10816;
10803;10804;10802;10800;10801;10808;10809;10807;10805;10806;
10833;10834;10832;10830;10831;10838;10839;10837;10835;10836;
10823;10824;10822;10820;10821;10828;10829;10827;10825;10826;
10853;10854;10852;10850;10851;10858;10859;10857;10855;10856;
10843;10844;10842;10840;10841;10848;10849;10847;10845;10846;
10873;10874;10872;10870;10871;10878;10879;10877;10875;10876;
10863;10864;10862;10860;10861;10868;10869;10867;10865;10866;
10893;10894;10892;10890;10891;10898;10899;10897;10895;10896;
10883;10884;10882;10880;10881;10888;10889;10887;10885;10886;
10913;10914;10912;10910;10911;10918;10919;10917;10915;10916;
10903;10904;10902;10900;10901;10908;10909;10907;10905;10906;
10933;10934;10932;10930;10931;10938;10939;10937;10935;10936;
10923;10924;10922;10920;10921;10928;10929;10927;10925;10926;
10953;10954;10952;10950;10951;10958;10959;10957;10955;10956;
10943;10944;10942;10940;10941;10948;10949;10947;10945;10946;
10973;10974;10972;10970;10971;10978;10979;10977;10975;10976;
10963;10964;10962;10960;10961;10968;10969;10967;10965;10966;
10993;10994;10992;10990;10991;10998;10999;10997;10995;10996;
10983;10984;10982;10980;10981;10988;10989;10987;10985;10986;
11013;11014;11012;11010;11011;11018;11019;11017;11015;11016;
11003;11004;11002;11000;11001;11008;11009;11007;11005;11006;
11033;11034;11032;11030;11031;11038;11039;11037;11035;11036;
11023;11024;11022;11020;11021;11028;11029;11027;11025;11026;
11053;11054;11052;11050;11051;11058;11059;11057;11055;11056;
11043;11044;11042;11040;11041;11048;11049;11047;11045;11046;
11073;11074;11072;11070;11071;11078;11079;11077;11075;11076;
11063;11064;11062;11060;11061;11068;11069;11067;11065;11066;
11093;11094;11092;11090;11091;11098;11099;11097;11095;11096;
11083;11084;11082;11080;11081;11088;11089;11087;11085;11086;
11113;11114;11112;11110;11111;11118;11119;11117;11115;11116;
11103;11104;11102;11100;11101;11108;11109;11107;11105;11106;
11133;11134;11132;11130;11131;11138;11139;11137;11135;11136;
11123;11124;11122;11120;11121;11128;11129;11127;11125;11126;
11153;11154;11152;11150;11151;11158;11159;11157;11155;11156;
11143;11144;11142;11140;11141;11148;11149;11147;11145;11146;
11173;11174;11172;11170;11171;11178;11179;11177;11175;11176;
11163;11164;11162;11160;11161;11168;11169;11167;11165;11166;
11193;11194;11192;11190;11191;11198;11199;11197;11195;11196;
11183;11184;11182;11180;11181;11188;11189;11187;11185;11186;
11213;11214;11212;11210;11211;11218;11219;11217;11215;11216;
11203;11204;11202;11200;11201;11208;11209;11207;11205;11206;
11233;11234;11232;11230;11231;11238;11239;11237;11235;11236;
11223;11224;11222;11220;11221;11228;11229;11227;11225;11226;
11253;11254;11252;11250;11251;11258;11259;11257;11255;11256;
11243;11244;11242;11240;11241;11248;11249;11247;11245;11246;
11273;11274;11272;11270;11271;11278;11279;11277;11275;11276;
11263;11264;11262;11260;11261;11268;11269;11267;11265;11266;
11293;11294;11292;11290;11291;11298;11299;11297;11295;11296;
11283;11284;11282;11280;11281;11288;11289;11287;11285;11286;
11313;11314;11312;11310;11311;11318;11319;11317;11315;11316;
11303;11304;11302;11300;11301;11308;11309;11307;11305;11306;
11333;11334;11332;11330;11331;11338;11339;11337;11335;11336;
11323;11324;11322;11320;11321;11328;11329;11327;11325;11326;
11353;11354;11352;11350;11351;11358;11359;11357;11355;11356;
11343;11344;11342;11340;11341;11348;11349;11347;11345;11346;
11373;11374;11372;11370;11371;11378;11379;11377;11375;11376;
11363;11364;11362;11360;11361;11368;11369;11367;11365;11366;
11393;11394;11392;11390;11391;11398;11399;11397;11395;11396;
11383;11384;11382;11380;11381;11388;11389;11387;11385;11386;
11413;11414;11412;11410;11411;11418;11419;11417;11415;11416;
11403;11404;11402;11400;11401;11408;11409;11407;11405;11406;
11433;11434;11432;11430;11431;11438;11439;11437;11435;11436;
11423;11424;11422;11420;11421;11428;11429;11427;11425;11426;
11453;11454;11452;11450;11451;11458;11459;11457;11455;11456;
11443;11444;11442;11440;11441;11448;11449;11447;11445;11446;
11473;11474;11472;11470;11471;11478;11479;11477;11475;11476;
11463;11464;11462;11460;11461;11468;11469;11467;11465;11466;
11493;11494;11492;11490;11491;11498;11499;11497;11495;11496;
11483;11484;11482;11480;11481;11488;11489;11487;11485;11486;
11513;11514;11512;11510;11511;11518;11519;11517;11515;11516;
11503;11504;11502;11500;11501;11508;11509;11507;11505;11506;
11533;11534;11532;11530;11531;11538;11539;11537;11535;11536;
11523;11524;11522;11520;11521;11528;11529;11527;11525;11526;
11553;11554;11552;11550;11551;11558;11559;11557;11555;11556;
11543;11544;11542;11540;11541;11548;11549;11547;11545;11546;
11573;11574;11572;11570;11571;11578;11579;11577;11575;11576;
11563;11564;11562;11560;11561;11568;11569;11567;11565;11566;
11593;11594;11592;11590;11591;11598;11599;11597;11595;11596;
11583;11584;11582;11580;11581;11588;11589;11587;11585;11586;
11613;11614;11612;11610;11611;11618;11619;11617;11615;11616;
11603;11604;11602;11600;11601;11608;11609;11607;11605;11606;
11633;11634;11632;11630;11631;11638;11639;11637;11635;11636;
11623;11624;11622;11620;11621;11628;11629;11627;11625;11626;
11653;11654;11652;11650;11651;11658;11659;11657;11655;11656;
11643;11644;11642;11640;11641;11648;11649;11647;11645;11646;
11673;11674;11672;11670;11671;11678;11679;11677;11675;11676;
11663;11664;11662;11660;11661;11668;11669;11667;11665;11666;
11693;11694;11692;11690;11691;11698;11699;11697;11695;11696;
11683;11684;11682;11680;11681;11688;11689;11687;11685;11686;
11713;11714;11712;11710;11711;11718;11719;11717;11715;11716;
11703;11704;11702;11700;11701;11708;11709;11707;11705;11706;
11733;11734;11732;11730;11731;11738;11739;11737;11735;11736;
11723;11724;11722;11720;11721;11728;11729;11727;11725;11726;
11753;11754;11752;11750;11751;11758;11759;11757;11755;11756;
11743;11744;11742;11740;11741;11748;11749;11747;11745;11746;
11773;11774;11772;11770;11771;11778;11779;11777;11775;11776;
11763;11764;11762;11760;11761;11768;11769;11767;11765;11766;
11793;11794;11792;11790;11791;11798;11799;11797;11795;11796;
11783;11784;11782;11780;11781;11788;11789;11787;11785;11786;
11813;11814;11812;11810;11811;11818;11819;11817;11815;11816;
11803;11804;11802;11800;11801;11808;11809;11807;11805;11806;
11833;11834;11832;11830;11831;11838;11839;11837;11835;11836;
11823;11824;11822;11820;11821;11828;11829;11827;11825;11826;
11853;11854;11852;11850;11851;11858;11859;11857;11855;11856;
11843;11844;11842;11840;11841;11848;11849;11847;11845;11846;
11873;11874;11872;11870;11871;11878;11879;11877;11875;11876;
11863;11864;11862;11860;11861;11868;11869;11867;11865;11866;
11893;11894;11892;11890;11891;11898;11899;11897;11895;11896;
11883;11884;11882;11880;11881;11888;11889;11887;11885;11886;
11913;11914;11912;11910;11911;11918;11919;11917;11915;11916;
11903;11904;11902;11900;11901;11908;11909;11907;11905;11906;
11933;11934;11932;11930;11931;11938;11939;11937;11935;11936;
11923;11924;11922;11920;11921;11928;11929;11927;11925;11926;
11953;11954;11952;11950;11951;11958;11959;11957;11955;11956;
11943;11944;11942;11940;11941;11948;11949;11947;11945;11946;
11973;11974;11972;11970;11971;11978;11979;11977;11975;11976;
11963;11964;11962;11960;11961;11968;11969;11967;11965;11966;
11993;11994;11992;11990;11991;11998;11999;11997;11995;11996;
11983;11984;11982;11980;11981;11988;11989;11987;11985;11986;
12013;12014;12012;12010;12011;12018;12019;12017;12015;12016;
12003;12004;12002;12000;12001;12008;12009;12007;12005;12006;
12033;12034;12032;12030;12031;12038;12039;12037;12035;12036;
12023;12024;12022;12020;12021;12028;12029;12027;12025;12026;
12053;12054;12052;12050;12051;12058;12059;12057;12055;12056;
12043;12044;12042;12040;12041;12048;12049;12047;12045;12046;
12073;12074;12072;12070;12071;12078;12079;12077;12075;12076;
12063;12064;12062;12060;12061;12068;12069;12067;12065;12066;
12093;12094;12092;12090;12091;12098;12099;12097;12095;12096;
12083;12084;12082;12080;12081;12088;12089;12087;12085;12086;
12113;12114;12112;12110;12111;12118;12119;12117;12115;12116;
12103;12104;12102;12100;12101;12108;12109;12107;12105;12106;
12133;12134;12132;12130;12131;12138;12139;12137;12135;12136;
12123;12124;12122;12120;12121;12128;12129;12127;12125;12126;
12153;12154;12152;12150;12151;12158;12159;12157;12155;12156;
12143;12144;12142;12140;12141;12148;12149;12147;12145;12146;
12173;12174;12172;12170;12171;12178;12179;12177;12175;12176;
12163;12164;12162;12160;12161;12168;12169;12167;12165;12166;
12193;12194;12192;12190;12191;12198;12199;12197;12195;12196;
12183;12184;12182;12180;12181;12188;12189;12187;12185;12186;
12213;12214;12212;12210;12211;12218;12219;12217;12215;12216;
12203;12204;12202;12200;12201;12208;12209;12207;12205;12206;
12233;12234;12232;12230;12231;12238;12239;12237;12235;12236;
12223;12224;12222;12220;12221;12228;12229;12227;12225;12226;
12253;12254;12252;12250;12251;12258;12259;12257;12255;12256;
12243;12244;12242;12240;12241;12248;12249;12247;12245;12246;
12273;12274;12272;12270;12271;12278;12279;12277;12275;12276;
12263;12264;12262;12260;12261;12268;12269;12267;12265;12266;
12293;12294;12292;12290;12291;12298;12299;12297;12295;12296;
12283;12284;12282;12280;12281;12288;12289;12287;12285;12286;
12313;12314;12312;12310;12311;12318;12319;12317;12315;12316;
12303;12304;12302;12300;12301;12308;12309;12307;12305;12306;
12333;12334;12332;12330;12331;12338;12339;12337;12335;12336;
12323;12324;12322;12320;12321;12328;12329;12327;12325;12326;
12353;12354;12352;12350;12351;12358;12359;12357;12355;12356;
12343;12344;12342;12340;12341;12348;12349;12347;12345;12346;
12373;12374;12372;12370;12371;12378;12379;12377;12375;12376;
12363;12364;12362;12360;12361;12368;12369;12367;12365;12366;
12393;12394;12392;12390;12391;12398;12399;12397;12395;12396;
12383;12384;12382;12380;12381;12388;12389;12387;12385;12386;
12413;12414;12412;12410;12411;12418;12419;12417;12415;12416;
12403;12404;12402;12400;12401;12408;12409;12407;12405;12406;
12433;12434;12432;12430;12431;12438;12439;12437;12435;12436;
12423;12424;12422;12420;12421;12428;12429;12427;12425;12426;
12453;12454;12452;12450;12451;12458;12459;12457;12455;12456;
12443;12444;12442;12440;12441;12448;12449;12447;12445;12446;
12473;12474;12472;12470;12471;12478;12479;12477;12475;12476;
12463;12464;12462;12460;12461;12468;12469;12467;12465;12466;
12493;12494;12492;12490;12491;12498;12499;12497;12495;12496;
12483;12484;12482;12480;12481;12488;12489;12487;12485;12486;
12513;12514;12512;12510;12511;12518;12519;12517;12515;12516;
12503;12504;12502;12500;12501;12508;12509;12507;12505;12506;
12533;12534;12532;12530;12531;12538;12539;12537;12535;12536;
12523;12524;12522;12520;12521;12528;12529;12527;12525;12526;
12553;12554;12552;12550;12551;12558;12559;12557;12555;12556;
12543;12544;12542;12540;12541;12548;12549;12547;12545;12546;
12573;12574;12572;12570;12571;12578;12579;12577;12575;12576;
12563;12564;12562;12560;12561;12568;12569;12567;12565;12566;
12593;12594;12592;12590;12591;12598;12599;12597;12595;12596;
12583;12584;12582;12580;12581;12588;12589;12587;12585;12586;
12613;12614;12612;12610;12611;12618;12619;12617;12615;12616;
12603;12604;12602;12600;12601;12608;12609;12607;12605;12606;
12633;12634;12632;12630;12631;12638;12639;12637;12635;12636;
12623;12624;12622;12620;12621;12628;12629;12627;12625;12626;
12653;12654;12652;12650;12651;12658;12659;12657;12655;12656;
12643;12644;12642;12640;12641;12648;12649;12647;12645;12646;
12673;12674;12672;12670;12671;12678;12679;12677;12675;12676;
12663;12664;12662;12660;12661;12668;12669;12667;12665;12666;
12693;12694;12692;12690;12691;12698;12699;12697;12695;12696;
12683;12684;12682;12680;12681;12688;12689;12687;12685;12686;
12713;12714;12712;12710;12711;12718;12719;12717;12715;12716;
12703;12704;12702;12700;12701;12708;12709;12707;12705;12706;
12733;12734;12732;12730;12731;12738;12739;12737;12735;12736;
12723;12724;12722;12720;12721;12728;12729;12727;12725;12726;
12753;12754;12752;12750;12751;12758;12759;12757;12755;12756;
12743;12744;12742;12740;12741;12748;12749;12747;12745;12746;
12773;12774;12772;12770;12771;12778;12779;12777;12775;12776;
12763;12764;12762;12760;12761;12768;12769;12767;12765;12766;
12793;12794;12792;12790;12791;12798;12799;12797;12795;12796;
12783;12784;12782;12780;12781;12788;12789;12787;12785;12786;
12813;12814;12812;12810;12811;12818;12819;12817;12815;12816;
12803;12804;12802;12800;12801;12808;12809;12807;12805;12806;
12833;12834;12832;12830;12831;12838;12839;12837;12835;12836;
12823;12824;12822;12820;12821;12828;12829;12827;12825;12826;
12853;12854;12852;12850;12851;12858;12859;12857;12855;12856;
12843;12844;12842;12840;12841;12848;12849;12847;12845;12846;
12873;12874;12872;12870;12871;12878;12879;12877;12875;12876;
12863;12864;12862;12860;12861;12868;12869;12867;12865;12866;
12893;12894;12892;12890;12891;12898;12899;12897;12895;12896;
12883;12884;12882;12880;12881;12888;12889;12887;12885;12886;
12913;12914;12912;12910;12911;12918;12919;12917;12915;12916;
12903;12904;12902;12900;12901;12908;12909;12907;12905;12906;
12933;12934;12932;12930;12931;12938;12939;12937;12935;12936;
12923;12924;12922;12920;12921;12928;12929;12927;12925;12926;
12953;12954;12952;12950;12951;12958;12959;12957;12955;12956;
12943;12944;12942;12940;12941;12948;12949;12947;12945;12946;
12973;12974;12972;12970;12971;12978;12979;12977;12975;12976;
12963;12964;12962;12960;12961;12968;12969;12967;12965;12966;
12993;12994;12992;12990;12991;12998;12999;12997;12995;12996;
12983;12984;12982;12980;12981;12988;12989;12987;12985;12986;
13013;13014;13012;13010;13011;13018;13019;13017;13015;13016;
13003;13004;13002;13000;13001;13008;13009;13007;13005;13006;
13033;13034;13032;13030;13031;13038;13039;13037;13035;13036;
13023;13024;13022;13020;13021;13028;13029;13027;13025;13026;
13053;13054;13052;13050;13051;13058;13059;13057;13055;13056;
13043;13044;13042;13040;13041;13048;13049;13047;13045;13046;
13073;13074;13072;13070;13071;13078;13079;13077;13075;13076;
13063;13064;13062;13060;13061;13068;13069;13067;13065;13066;
13093;13094;13092;13090;13091;13098;13099;13097;13095;13096;
13083;13084;13082;13080;13081;13088;13089;13087;13085;13086;
13113;13114;13112;13110;13111;13118;13119;13117;13115;13116;
13103;13104;13102;13100;13101;13108;13109;13107;13105;13106;
13133;13134;13132;13130;13131;13138;13139;13137;13135;13136;
13123;13124;13122;13120;13121;13128;13129;13127;13125;13126;
13153;13154;13152;13150;13151;13158;13159;13157;13155;13156;
13143;13144;13142;13140;13141;13148;13149;13147;13145;13146;
13173;13174;13172;13170;13171;13178;13179;13177;13175;13176;
13163;13164;13162;13160;13161;13168;13169;13167;13165;13166;
13193;13194;13192;13190;13191;13198;13199;13197;13195;13196;
13183;13184;13182;13180;13181;13188;13189;13187;13185;13186;
13213;13214;13212;13210;13211;13218;13219;13217;13215;13216;
13203;13204;13202;13200;13201;13208;13209;13207;13205;13206;
13233;13234;13232;13230;13231;13238;13239;13237;13235;13236;
13223;13224;13222;13220;13221;13228;13229;13227;13225;13226;
13253;13254;13252;13250;13251;13258;13259;13257;13255;13256;
13243;13244;13242;13240;13241;13248;13249;13247;13245;13246;
13273;13274;13272;13270;13271;13278;13279;13277;13275;13276;
13263;13264;13262;13260;13261;13268;13269;13267;13265;13266;
13293;13294;13292;13290;13291;13298;13299;13297;13295;13296;
13283;13284;13282;13280;13281;13288;13289;13287;13285;13286;
13313;13314;13312;13310;13311;13318;13319;13317;13315;13316;
13303;13304;13302;13300;13301;13308;13309;13307;13305;13306;
13333;13334;13332;13330;13331;13338;13339;13337;13335;13336;
13323;13324;13322;13320;13321;13328;13329;13327;13325;13326;
13353;13354;13352;13350;13351;13358;13359;13357;13355;13356;
13343;13344;13342;13340;13341;13348;13349;13347;13345;13346;
13373;13374;13372;13370;13371;13378;13379;13377;13375;13376;
13363;13364;13362;13360;13361;13368;13369;13367;13365;13366;
13393;13394;13392;13390;13391;13398;13399;13397;13395;13396;
13383;13384;13382;13380;13381;13388;13389;13387;13385;13386;
13413;13414;13412;13410;13411;13418;13419;13417;13415;13416;
13403;13404;13402;13400;13401;13408;13409;13407;13405;13406;
13433;13434;13432;13430;13431;13438;13439;13437;13435;13436;
13423;13424;13422;13420;13421;13428;13429;13427;13425;13426;
13453;13454;13452;13450;13451;13458;13459;13457;13455;13456;
13443;13444;13442;13440;13441;13448;13449;13447;13445;13446;
13473;13474;13472;13470;13471;13478;13479;13477;13475;13476;
13463;13464;13462;13460;13461;13468;13469;13467;13465;13466;
13493;13494;13492;13490;13491;13498;13499;13497;13495;13496;
13483;13484;13482;13480;13481;13488;13489;13487;13485;13486;
13513;13514;13512;13510;13511;13518;13519;13517;13515;13516;
13503;13504;13502;13500;13501;13508;13509;13507;13505;13506;
13533;13534;13532;13530;13531;13538;13539;13537;13535;13536;
13523;13524;13522;13520;13521;13528;13529;13527;13525;13526;
13553;13554;13552;13550;13551;13558;13559;13557;13555;13556;
13543;13544;13542;13540;13541;13548;13549;13547;13545;13546;
13573;13574;13572;13570;13571;13578;13579;13577;13575;13576;
13563;13564;13562;13560;13561;13568;13569;13567;13565;13566;
13593;13594;13592;13590;13591;13598;13599;13597;13595;13596;
13583;13584;13582;13580;13581;13588;13589;13587;13585;13586;
13613;13614;13612;13610;13611;13618;13619;13617;13615;13616;
13603;13604;13602;13600;13601;13608;13609;13607;13605;13606;
13633;13634;13632;13630;13631;13638;13639;13637;13635;13636;
13623;13624;13622;13620;13621;13628;13629;13627;13625;13626;
13653;13654;13652;13650;13651;13658;13659;13657;13655;13656;
13643;13644;13642;13640;13641;13648;13649;13647;13645;13646;
13673;13674;13672;13670;13671;13678;13679;13677;13675;13676;
13663;13664;13662;13660;13661;13668;13669;13667;13665;13666;
13693;13694;13692;13690;13691;13698;13699;13697;13695;13696;
13683;13684;13682;13680;13681;13688;13689;13687;13685;13686;
13713;13714;13712;13710;13711;13718;13719;13717;13715;13716;
13703;13704;13702;13700;13701;13708;13709;13707;13705;13706;
13733;13734;13732;13730;13731;13738;13739;13737;13735;13736;
13723;13724;13722;13720;13721;13728;13729;13727;13725;13726;
13753;13754;13752;13750;13751;13758;13759;13757;13755;13756;
13743;13744;13742;13740;13741;13748;13749;13747;13745;13746;
13773;13774;13772;13770;13771;13778;13779;13777;13775;13776;
13763;13764;13762;13760;13761;13768;13769;13767;13765;13766;
13793;13794;13792;13790;13791;13798;13799;13797;13795;13796;
13783;13784;13782;13780;13781;13788;13789;13787;13785;13786;
13813;13814;13812;13810;13811;13818;13819;13817;13815;13816;
13803;13804;13802;13800;13801;13808;13809;13807;13805;13806;
13833;13834;13832;13830;13831;13838;13839;13837;13835;13836;
13823;13824;13822;13820;13821;13828;13829;13827;13825;13826;
13853;13854;13852;13850;13851;13858;13859;13857;13855;13856;
13843;13844;13842;13840;13841;13848;13849;13847;13845;13846;
13873;13874;13872;13870;13871;13878;13879;13877;13875;13876;
13863;13864;13862;13860;13861;13868;13869;13867;13865;13866;
13893;13894;13892;13890;13891;13898;13899;13897;13895;13896;
13883;13884;13882;13880;13881;13888;13889;13887;13885;13886;
13913;13914;13912;13910;13911;13918;13919;13917;13915;13916;
13903;13904;13902;13900;13901;13908;13909;13907;13905;13906;
13933;13934;13932;13930;13931;13938;13939;13937;13935;13936;
13923;13924;13922;13920;13921;13928;13929;13927;13925;13926;
13953;13954;13952;13950;13951;13958;13959;13957;13955;13956;
13943;13944;13942;13940;13941;13948;13949;13947;13945;13946;
13973;13974;13972;13970;13971;13978;13979;13977;13975;13976;
13963;13964;13962;13960;13961;13968;13969;13967;13965;13966;
13993;13994;13992;13990;13991;13998;13999;13997;13995;13996;
13983;13984;13982;13980;13981;13988;13989;13987;13985;13986;
14013;14014;14012;14010;14011;14018;14019;14017;14015;14016;
14003;14004;14002;14000;14001;14008;14009;14007;14005;14006;
14033;14034;14032;14030;14031;14038;14039;14037;14035;14036;
14023;14024;14022;14020;14021;14028;14029;14027;14025;14026;
14053;14054;14052;14050;14051;14058;14059;14057;14055;14056;
14043;14044;14042;14040;14041;14048;14049;14047;14045;14046;
14073;14074;14072;14070;14071;14078;14079;14077;14075;14076;
14063;14064;14062;14060;14061;14068;14069;14067;14065;14066;
14093;14094;14092;14090;14091;14098;14099;14097;14095;14096;
14083;14084;14082;14080;14081;14088;14089;14087;14085;14086;
14113;14114;14112;14110;14111;14118;14119;14117;14115;14116;
14103;14104;14102;14100;14101;14108;14109;14107;14105;14106;
14133;14134;14132;14130;14131;14138;14139;14137;14135;14136;
14123;14124;14122;14120;14121;14128;14129;14127;14125;14126;
14153;14154;14152;14150;14151;14158;14159;14157;14155;14156;
14143;14144;14142;14140;14141;14148;14149;14147;14145;14146;
14173;14174;14172;14170;14171;14178;14179;14177;14175;14176;
14163;14164;14162;14160;14161;14168;14169;14167;14165;14166;
14193;14194;14192;14190;14191;14198;14199;14197;14195;14196;
14183;14184;14182;14180;14181;14188;14189;14187;14185;14186;
14213;14214;14212;14210;14211;14218;14219;14217;14215;14216;
14203;14204;14202;14200;14201;14208;14209;14207;14205;14206;
14233;14234;14232;14230;14231;14238;14239;14237;14235;14236;
14223;14224;14222;14220;14221;14228;14229;14227;14225;14226;
14253;14254;14252;14250;14251;14258;14259;14257;14255;14256;
14243;14244;14242;14240;14241;14248;14249;14247;14245;14246;
14273;14274;14272;14270;14271;14278;14279;14277;14275;14276;
14263;14264;14262;14260;14261;14268;14269;14267;14265;14266;
14293;14294;14292;14290;14291;14298;14299;14297;14295;14296;
14283;14284;14282;14280;14281;14288;14289;14287;14285;14286;
14313;14314;14312;14310;14311;14318;14319;14317;14315;14316;
14303;14304;14302;14300;14301;14308;14309;14307;14305;14306;
14333;14334;14332;14330;14331;14338;14339;14337;14335;14336;
14323;14324;14322;14320;14321;14328;14329;14327;14325;14326;
14353;14354;14352;14350;14351;14358;14359;14357;14355;14356;
14343;14344;14342;14340;14341;14348;14349;14347;14345;14346;
14373;14374;14372;14370;14371;14378;14379;14377;14375;14376;
14363;14364;14362;14360;14361;14368;14369;14367;14365;14366;
14393;14394;14392;14390;14391;14398;14399;14397;14395;14396;
14383;14384;14382;14380;14381;14388;14389;14387;14385;14386;
14413;14414;14412;14410;14411;14418;14419;14417;14415;14416;
14403;14404;14402;14400;14401;14408;14409;14407;14405;14406;
14433;14434;14432;14430;14431;14438;14439;14437;14435;14436;
14423;14424;14422;14420;14421;14428;14429;14427;14425;14426;
14453;14454;14452;14450;14451;14458;14459;14457;14455;14456;
14443;14444;14442;14440;14441;14448;14449;14447;14445;14446;
14473;14474;14472;14470;14471;14478;14479;14477;14475;14476;
14463;14464;14462;14460;14461;14468;14469;14467;14465;14466;
14493;14494;14492;14490;14491;14498;14499;14497;14495;14496;
14483;14484;14482;14480;14481;14488;14489;14487;14485;14486;
14513;14514;14512;14510;14511;14518;14519;14517;14515;14516;
14503;14504;14502;14500;14501;14508;14509;14507;14505;14506;
14533;14534;14532;14530;14531;14538;14539;14537;14535;14536;
14523;14524;14522;14520;14521;14528;14529;14527;14525;14526;
14553;14554;14552;14550;14551;14558;14559;14557;14555;14556;
14543;14544;14542;14540;14541;14548;14549;14547;14545;14546;
14573;14574;14572;14570;14571;14578;14579;14577;14575;14576;
14563;14564;14562;14560;14561;14568;14569;14567;14565;14566;
14593;14594;14592;14590;14591;14598;14599;14597;14595;14596;
14583;14584;14582;14580;14581;14588;14589;14587;14585;14586;
14613;14614;14612;14610;14611;14618;14619;14617;14615;14616;
14603;14604;14602;14600;14601;14608;14609;14607;14605;14606;
14633;14634;14632;14630;14631;14638;14639;14637;14635;14636;
14623;14624;14622;14620;14621;14628;14629;14627;14625;14626;
14653;14654;14652;14650;14651;14658;14659;14657;14655;14656;
14643;14644;14642;14640;14641;14648;14649;14647;14645;14646;
14673;14674;14672;14670;14671;14678;14679;14677;14675;14676;
14663;14664;14662;14660;14661;14668;14669;14667;14665;14666;
14693;14694;14692;14690;14691;14698;14699;14697;14695;14696;
14683;14684;14682;14680;14681;14688;14689;14687;14685;14686;
14713;14714;14712;14710;14711;14718;14719;14717;14715;14716;
14703;14704;14702;14700;14701;14708;14709;14707;14705;14706;
14733;14734;14732;14730;14731;14738;14739;14737;14735;14736;
14723;14724;14722;14720;14721;14728;14729;14727;14725;14726;
14753;14754;14752;14750;14751;14758;14759;14757;14755;14756;
14743;14744;14742;14740;14741;14748;14749;14747;14745;14746;
14773;14774;14772;14770;14771;14778;14779;14777;14775;14776;
14763;14764;14762;14760;14761;14768;14769;14767;14765;14766;
14793;14794;14792;14790;14791;14798;14799;14797;14795;14796;
14783;14784;14782;14780;14781;14788;14789;14787;14785;14786;
14813;14814;14812;14810;14811;14818;14819;14817;14815;14816;
14803;14804;14802;14800;14801;14808;14809;14807;14805;14806;
14833;14834;14832;14830;14831;14838;14839;14837;14835;14836;
14823;14824;14822;14820;14821;14828;14829;14827;14825;14826;
14853;14854;14852;14850;14851;14858;14859;14857;14855;14856;
14843;14844;14842;14840;14841;14848;14849;14847;14845;14846;
14873;14874;14872;14870;14871;14878;14879;14877;14875;14876;
14863;14864;14862;14860;14861;14868;14869;14867;14865;14866;
14893;14894;14892;14890;14891;14898;14899;14897;14895;14896;
14883;14884;14882;14880;14881;14888;14889;14887;14885;14886;
14913;14914;14912;14910;14911;14918;14919;14917;14915;14916;
14903;14904;14902;14900;14901;14908;14909;14907;14905;14906;
14933;14934;14932;14930;14931;14938;14939;14937;14935;14936;
14923;14924;14922;14920;14921;14928;14929;14927;14925;14926;
14953;14954;14952;14950;14951;14958;14959;14957;14955;14956;
14943;14944;14942;14940;14941;14948;14949;14947;14945;14946;
14973;14974;14972;14970;14971;14978;14979;14977;14975;14976;
14963;14964;14962;14960;14961;14968;14969;14967;14965;14966;
14993;14994;14992;14990;14991;14998;14999;14997;14995;14996;
14983;14984;14982;14980;14981;14988;14989;14987;14985;14986;
15013;15014;15012;15010;15011;15018;15019;15017;15015;15016;
15003;15004;15002;15000;15001;15008;15009;15007;15005;15006;
15033;15034;15032;15030;15031;15038;15039;15037;15035;15036;
15023;15024;15022;15020;15021;15028;15029;15027;15025;15026;
15053;15054;15052;15050;15051;15058;15059;15057;15055;15056;
15043;15044;15042;15040;15041;15048;15049;15047;15045;15046;
15073;15074;15072;15070;15071;15078;15079;15077;15075;15076;
15063;15064;15062;15060;15061;15068;15069;15067;15065;15066;
15093;15094;15092;15090;15091;15098;15099;15097;15095;15096;
15083;15084;15082;15080;15081;15088;15089;15087;15085;15086;
15113;15114;15112;15110;15111;15118;15119;15117;15115;15116;
15103;15104;15102;15100;15101;15108;15109;15107;15105;15106;
15133;15134;15132;15130;15131;15138;15139;15137;15135;15136;
15123;15124;15122;15120;15121;15128;15129;15127;15125;15126;
15153;15154;15152;15150;15151;15158;15159;15157;15155;15156;
15143;15144;15142;15140;15141;15148;15149;15147;15145;15146;
15173;15174;15172;15170;15171;15178;15179;15177;15175;15176;
15163;15164;15162;15160;15161;15168;15169;15167;15165;15166;
15193;15194;15192;15190;15191;15198;15199;15197;15195;15196;
15183;15184;15182;15180;15181;15188;15189;15187;15185;15186;
15213;15214;15212;15210;15211;15218;15219;15217;15215;15216;
15203;15204;15202;15200;15201;15208;15209;15207;15205;15206;
15233;15234;15232;15230;15231;15238;15239;15237;15235;15236;
15223;15224;15222;15220;15221;15228;15229;15227;15225;15226;
15253;15254;15252;15250;15251;15258;15259;15257;15255;15256;
15243;15244;15242;15240;15241;15248;15249;15247;15245;15246;
15273;15274;15272;15270;15271;15278;15279;15277;15275;15276;
15263;15264;15262;15260;15261;15268;15269;15267;15265;15266;
15293;15294;15292;15290;15291;15298;15299;15297;15295;15296;
15283;15284;15282;15280;15281;15288;15289;15287;15285;15286;
15313;15314;15312;15310;15311;15318;15319;15317;15315;15316;
15303;15304;15302;15300;15301;15308;15309;15307;15305;15306;
15333;15334;15332;15330;15331;15338;15339;15337;15335;15336;
15323;15324;15322;15320;15321;15328;15329;15327;15325;15326;
15353;15354;15352;15350;15351;15358;15359;15357;15355;15356;
15343;15344;15342;15340;15341;15348;15349;15347;15345;15346;
15373;15374;15372;15370;15371;15378;15379;15377;15375;15376;
15363;15364;15362;15360;15361;15368;15369;15367;15365;15366;
15393;15394;15392;15390;15391;15398;15399;15397;15395;15396;
15383;15384;15382;15380;15381;15388;15389;15387;15385;15386;
15413;15414;15412;15410;15411;15418;15419;15417;15415;15416;
15403;15404;15402;15400;15401;15408;15409;15407;15405;15406;
15433;15434;15432;15430;15431;15438;15439;15437;15435;15436;
15423;15424;15422;15420;15421;15428;15429;15427;15425;15426;
15453;15454;15452;15450;15451;15458;15459;15457;15455;15456;
15443;15444;15442;15440;15441;15448;15449;15447;15445;15446;
15473;15474;15472;15470;15471;15478;15479;15477;15475;15476;
15463;15464;15462;15460;15461;15468;15469;15467;15465;15466;
15493;15494;15492;15490;15491;15498;15499;15497;15495;15496;
15483;15484;15482;15480;15481;15488;15489;15487;15485;15486;
15513;15514;15512;15510;15511;15518;15519;15517;15515;15516;
15503;15504;15502;15500;15501;15508;15509;15507;15505;15506;
15533;15534;15532;15530;15531;15538;15539;15537;15535;15536;
15523;15524;15522;15520;15521;15528;15529;15527;15525;15526;
15553;15554;15552;15550;15551;15558;15559;15557;15555;15556;
15543;15544;15542;15540;15541;15548;15549;15547;15545;15546;
15573;15574;15572;15570;15571;15578;15579;15577;15575;15576;
15563;15564;15562;15560;15561;15568;15569;15567;15565;15566;
15593;15594;15592;15590;15591;15598;15599;15597;15595;15596;
15583;15584;15582;15580;15581;15588;15589;15587;15585;15586;
15613;15614;15612;15610;15611;15618;15619;15617;15615;15616;
15603;15604;15602;15600;15601;15608;15609;15607;15605;15606;
15633;15634;15632;15630;15631;15638;15639;15637;15635;15636;
15623;15624;15622;15620;15621;15628;15629;15627;15625;15626;
15653;15654;15652;15650;15651;15658;15659;15657;15655;15656;
15643;15644;15642;15640;15641;15648;15649;15647;15645;15646;
15673;15674;15672;15670;15671;15678;15679;15677;15675;15676;
15663;15664;15662;15660;15661;15668;15669;15667;15665;15666;
15693;15694;15692;15690;15691;15698;15699;15697;15695;15696;
15683;15684;15682;15680;15681;15688;15689;15687;15685;15686;
15713;15714;15712;15710;15711;15718;15719;15717;15715;15716;
15703;15704;15702;15700;15701;15708;15709;15707;15705;15706;
15733;15734;15732;15730;15731;15738;15739;15737;15735;15736;
15723;15724;15722;15720;15721;15728;15729;15727;15725;15726;
15753;15754;15752;15750;15751;15758;15759;15757;15755;15756;
15743;15744;15742;15740;15741;15748;15749;15747;15745;15746;
15773;15774;15772;15770;15771;15778;15779;15777;15775;15776;
15763;15764;15762;15760;15761;15768;15769;15767;15765;15766;
15793;15794;15792;15790;15791;15798;15799;15797;15795;15796;
15783;15784;15782;15780;15781;15788;15789;15787;15785;15786;
15813;15814;15812;15810;15811;15818;15819;15817;15815;15816;
15803;15804;15802;15800;15801;15808;15809;15807;15805;15806;
15833;15834;15832;15830;15831;15838;15839;15837;15835;15836;
15823;15824;15822;15820;15821;15828;15829;15827;15825;15826;
15853;15854;15852;15850;15851;15858;15859;15857;15855;15856;
15843;15844;15842;15840;15841;15848;15849;15847;15845;15846;
15873;15874;15872;15870;15871;15878;15879;15877;15875;15876;
15863;15864;15862;15860;15861;15868;15869;15867;15865;15866;
15893;15894;15892;15890;15891;15898;15899;15897;15895;15896;
15883;15884;15882;15880;15881;15888;15889;15887;15885;15886;
15913;15914;15912;15910;15911;15918;15919;15917;15915;15916;
15903;15904;15902;15900;15901;15908;15909;15907;15905;15906;
15933;15934;15932;15930;15931;15938;15939;15937;15935;15936;
15923;15924;15922;15920;15921;15928;15929;15927;15925;15926;
15953;15954;15952;15950;15951;15958;15959;15957;15955;15956;
15943;15944;15942;15940;15941;15948;15949;15947;15945;15946;
15973;15974;15972;15970;15971;15978;15979;15977;15975;15976;
15963;15964;15962;15960;15961;15968;15969;15967;15965;15966;
15993;15994;15992;15990;15991;15998;15999;15997;15995;15996;
15983;15984;15982;15980;15981;15988;15989;15987;15985;15986;
16013;16014;16012;16010;16011;16018;16019;16017;16015;16016;
16003;16004;16002;16000;16001;16008;16009;16007;16005;16006;
16033;16034;16032;16030;16031;16038;16039;16037;16035;16036;
16023;16024;16022;16020;16021;16028;16029;16027;16025;16026;
16053;16054;16052;16050;16051;16058;16059;16057;16055;16056;
16043;16044;16042;16040;16041;16048;16049;16047;16045;16046;
16073;16074;16072;16070;16071;16078;16079;16077;16075;16076;
16063;16064;16062;16060;16061;16068;16069;16067;16065;16066;
16093;16094;16092;16090;16091;16098;16099;16097;16095;16096;
16083;16084;16082;16080;16081;16088;16089;16087;16085;16086;
16113;16114;16112;16110;16111;16118;16119;16117;16115;16116;
16103;16104;16102;16100;16101;16108;16109;16107;16105;16106;
16133;16134;16132;16130;16131;16138;16139;16137;16135;16136;
16123;16124;16122;16120;16121;16128;16129;16127;16125;16126;
16153;16154;16152;16150;16151;16158;16159;16157;16155;16156;
16143;16144;16142;16140;16141;16148;16149;16147;16145;16146;
16173;16174;16172;16170;16171;16178;16179;16177;16175;16176;
16163;16164;16162;16160;16161;16168;16169;16167;16165;16166;
16193;16194;16192;16190;16191;16198;16199;16197;16195;16196;
16183;16184;16182;16180;16181;16188;16189;16187;16185;16186;
16213;16214;16212;16210;16211;16218;16219;16217;16215;16216;
16203;16204;16202;16200;16201;16208;16209;16207;16205;16206;
16233;16234;16232;16230;16231;16238;16239;16237;16235;16236;
16223;16224;16222;16220;16221;16228;16229;16227;16225;16226;
16253;16254;16252;16250;16251;16258;16259;16257;16255;16256;
16243;16244;16242;16240;16241;16248;16249;16247;16245;16246;
16273;16274;16272;16270;16271;16278;16279;16277;16275;16276;
16263;16264;16262;16260;16261;16268;16269;16267;16265;16266;
16293;16294;16292;16290;16291;16298;16299;16297;16295;16296;
16283;16284;16282;16280;16281;16288;16289;16287;16285;16286;
16313;16314;16312;16310;16311;16318;16319;16317;16315;16316;
16303;16304;16302;16300;16301;16308;16309;16307;16305;16306;
16333;16334;16332;16330;16331;16338;16339;16337;16335;16336;
16323;16324;16322;16320;16321;16328;16329;16327;16325;16326;
16353;16354;16352;16350;16351;16358;16359;16357;16355;16356;
16343;16344;16342;16340;16341;16348;16349;16347;16345;16346;
16373;16374;16372;16370;16371;16378;16379;16377;16375;16376;
16363;16364;16362;16360;16361;16368;16369;16367;16365;16366;
16393;16394;16392;16390;16391;16398;16399;16397;16395;16396;
16383;16384;16382;16380;16381;16388;16389;16387;16385;16386;
16413;16414;16412;16410;16411;16418;16419;16417;16415;16416;
16403;16404;16402;16400;16401;16408;16409;16407;16405;16406;
16433;16434;16432;16430;16431;16438;16439;16437;16435;16436;
16423;16424;16422;16420;16421;16428;16429;16427;16425;16426;
16453;16454;16452;16450;16451;16458;16459;16457;16455;16456;
16443;16444;16442;16440;16441;16448;16449;16447;16445;16446;
16473;16474;16472;16470;16471;16478;16479;16477;16475;16476;
16463;16464;16462;16460;16461;16468;16469;16467;16465;16466;
16493;16494;16492;16490;16491;16498;16499;16497;16495;16496;
16483;16484;16482;16480;16481;16488;16489;16487;16485;16486;
16513;16514;16512;16510;16511;16518;16519;16517;16515;16516;
16503;16504;16502;16500;16501;16508;16509;16507;16505;16506;
16533;16534;16532;16530;16531;16538;16539;16537;16535;16536;
16523;16524;16522;16520;16521;16528;16529;16527;16525;16526;
16553;16554;16552;16550;16551;16558;16559;16557;16555;16556;
16543;16544;16542;16540;16541;16548;16549;16547;16545;16546;
16573;16574;16572;16570;16571;16578;16579;16577;16575;16576;
16563;16564;16562;16560;16561;16568;16569;16567;16565;16566;
16593;16594;16592;16590;16591;16598;16599;16597;16595;16596;
16583;16584;16582;16580;16581;16588;16589;16587;16585;16586;
16613;16614;16612;16610;16611;16618;16619;16617;16615;16616;
16603;16604;16602;16600;16601;16608;16609;16607;16605;16606;
16633;16634;16632;16630;16631;16638;16639;16637;16635;16636;
16623;16624;16622;16620;16621;16628;16629;16627;16625;16626;
16653;16654;16652;16650;16651;16658;16659;16657;16655;16656;
16643;16644;16642;16640;16641;16648;16649;16647;16645;16646;
16673;16674;16672;16670;16671;16678;16679;16677;16675;16676;
16663;16664;16662;16660;16661;16668;16669;16667;16665;16666;
16693;16694;16692;16690;16691;16698;16699;16697;16695;16696;
16683;16684;16682;16680;16681;16688;16689;16687;16685;16686;
16713;16714;16712;16710;16711;16718;16719;16717;16715;16716;
16703;16704;16702;16700;16701;16708;16709;16707;16705;16706;
16733;16734;16732;16730;16731;16738;16739;16737;16735;16736;
16723;16724;16722;16720;16721;16728;16729;16727;16725;16726;
16753;16754;16752;16750;16751;16758;16759;16757;16755;16756;
16743;16744;16742;16740;16741;16748;16749;16747;16745;16746;
16773;16774;16772;16770;16771;16778;16779;16777;16775;16776;
16763;16764;16762;16760;16761;16768;16769;16767;16765;16766;
16793;16794;16792;16790;16791;16798;16799;16797;16795;16796;
16783;16784;16782;16780;16781;16788;16789;16787;16785;16786;
16813;16814;16812;16810;16811;16818;16819;16817;16815;16816;
16803;16804;16802;16800;16801;16808;16809;16807;16805;16806;
16833;16834;16832;16830;16831;16838;16839;16837;16835;16836;
16823;16824;16822;16820;16821;16828;16829;16827;16825;16826;
16853;16854;16852;16850;16851;16858;16859;16857;16855;16856;
16843;16844;16842;16840;16841;16848;16849;16847;16845;16846;
16873;16874;16872;16870;16871;16878;16879;16877;16875;16876;
16863;16864;16862;16860;16861;16868;16869;16867;16865;16866;
16893;16894;16892;16890;16891;16898;16899;16897;16895;16896;
16883;16884;16882;16880;16881;16888;16889;16887;16885;16886;
16913;16914;16912;16910;16911;16918;16919;16917;16915;16916;
16903;16904;16902;16900;16901;16908;16909;16907;16905;16906;
16933;16934;16932;16930;16931;16938;16939;16937;16935;16936;
16923;16924;16922;16920;16921;16928;16929;16927;16925;16926;
16953;16954;16952;16950;16951;16958;16959;16957;16955;16956;
16943;16944;16942;16940;16941;16948;16949;16947;16945;16946;
16973;16974;16972;16970;16971;16978;16979;16977;16975;16976;
16963;16964;16962;16960;16961;16968;16969;16967;16965;16966;
16993;16994;16992;16990;16991;16998;16999;16997;16995;16996;
16983;16984;16982;16980;16981;16988;16989;16987;16985;16986;
17013;17014;17012;17010;17011;17018;17019;17017;17015;17016;
17003;17004;17002;17000;17001;17008;17009;17007;17005;17006;
17033;17034;17032;17030;17031;17038;17039;17037;17035;17036;
17023;17024;17022;17020;17021;17028;17029;17027;17025;17026;
17053;17054;17052;17050;17051;17058;17059;17057;17055;17056;
17043;17044;17042;17040;17041;17048;17049;17047;17045;17046;
17073;17074;17072;17070;17071;17078;17079;17077;17075;17076;
17063;17064;17062;17060;17061;17068;17069;17067;17065;17066;
17093;17094;17092;17090;17091;17098;17099;17097;17095;17096;
17083;17084;17082;17080;17081;17088;17089;17087;17085;17086;
17113;17114;17112;17110;17111;17118;17119;17117;17115;17116;
17103;17104;17102;17100;17101;17108;17109;17107;17105;17106;
17133;17134;17132;17130;17131;17138;17139;17137;17135;17136;
17123;17124;17122;17120;17121;17128;17129;17127;17125;17126;
17153;17154;17152;17150;17151;17158;17159;17157;17155;17156;
17143;17144;17142;17140;17141;17148;17149;17147;17145;17146;
17173;17174;17172;17170;17171;17178;17179;17177;17175;17176;
17163;17164;17162;17160;17161;17168;17169;17167;17165;17166;
17193;17194;17192;17190;17191;17198;17199;17197;17195;17196;
17183;17184;17182;17180;17181;17188;17189;17187;17185;17186;
17213;17214;17212;17210;17211;17218;17219;17217;17215;17216;
17203;17204;17202;17200;17201;17208;17209;17207;17205;17206;
17233;17234;17232;17230;17231;17238;17239;17237;17235;17236;
17223;17224;17222;17220;17221;17228;17229;17227;17225;17226;
17253;17254;17252;17250;17251;17258;17259;17257;17255;17256;
17243;17244;17242;17240;17241;17248;17249;17247;17245;17246;
17273;17274;17272;17270;17271;17278;17279;17277;17275;17276;
17263;17264;17262;17260;17261;17268;17269;17267;17265;17266;
17293;17294;17292;17290;17291;17298;17299;17297;17295;17296;
17283;17284;17282;17280;17281;17288;17289;17287;17285;17286;
17313;17314;17312;17310;17311;17318;17319;17317;17315;17316;
17303;17304;17302;17300;17301;17308;17309;17307;17305;17306;
17333;17334;17332;17330;17331;17338;17339;17337;17335;17336;
17323;17324;17322;17320;17321;17328;17329;17327;17325;17326;
17353;17354;17352;17350;17351;17358;17359;17357;17355;17356;
17343;17344;17342;17340;17341;17348;17349;17347;17345;17346;
17373;17374;17372;17370;17371;17378;17379;17377;17375;17376;
17363;17364;17362;17360;17361;17368;17369;17367;17365;17366;
17393;17394;17392;17390;17391;17398;17399;17397;17395;17396;
17383;17384;17382;17380;17381;17388;17389;17387;17385;17386;
17413;17414;17412;17410;17411;17418;17419;17417;17415;17416;
17403;17404;17402;17400;17401;17408;17409;17407;17405;17406;
17433;17434;17432;17430;17431;17438;17439;17437;17435;17436;
17423;17424;17422;17420;17421;17428;17429;17427;17425;17426;
17453;17454;17452;17450;17451;17458;17459;17457;17455;17456;
17443;17444;17442;17440;17441;17448;17449;17447;17445;17446;
17473;17474;17472;17470;17471;17478;17479;17477;17475;17476;
17463;17464;17462;17460;17461;17468;17469;17467;17465;17466;
17493;17494;17492;17490;17491;17498;17499;17497;17495;17496;
17483;17484;17482;17480;17481;17488;17489;17487;17485;17486;
17513;17514;17512;17510;17511;17518;17519;17517;17515;17516;
17503;17504;17502;17500;17501;17508;17509;17507;17505;17506;
17533;17534;17532;17530;17531;17538;17539;17537;17535;17536;
17523;17524;17522;17520;17521;17528;17529;17527;17525;17526;
17553;17554;17552;17550;17551;17558;17559;17557;17555;17556;
17543;17544;17542;17540;17541;17548;17549;17547;17545;17546;
17573;17574;17572;17570;17571;17578;17579;17577;17575;17576;
17563;17564;17562;17560;17561;17568;17569;17567;17565;17566;
17593;17594;17592;17590;17591;17598;17599;17597;17595;17596;
17583;17584;17582;17580;17581;17588;17589;17587;17585;17586;
17613;17614;17612;17610;17611;17618;17619;17617;17615;17616;
17603;17604;17602;17600;17601;17608;17609;17607;17605;17606;
17633;17634;17632;17630;17631;17638;17639;17637;17635;17636;
17623;17624;17622;17620;17621;17628;17629;17627;17625;17626;
17653;17654;17652;17650;17651;17658;17659;17657;17655;17656;
17643;17644;17642;17640;17641;17648;17649;17647;17645;17646;
17673;17674;17672;17670;17671;17678;17679;17677;17675;17676;
17663;17664;17662;17660;17661;17668;17669;17667;17665;17666;
17693;17694;17692;17690;17691;17698;17699;17697;17695;17696;
17683;17684;17682;17680;17681;17688;17689;17687;17685;17686;
17713;17714;17712;17710;17711;17718;17719;17717;17715;17716;
17703;17704;17702;17700;17701;17708;17709;17707;17705;17706;
17733;17734;17732;17730;17731;17738;17739;17737;17735;17736;
17723;17724;17722;17720;17721;17728;17729;17727;17725;17726;
17753;17754;17752;17750;17751;17758;17759;17757;17755;17756;
17743;17744;17742;17740;17741;17748;17749;17747;17745;17746;
17773;17774;17772;17770;17771;17778;17779;17777;17775;17776;
17763;17764;17762;17760;17761;17768;17769;17767;17765;17766;
17793;17794;17792;17790;17791;17798;17799;17797;17795;17796;
17783;17784;17782;17780;17781;17788;17789;17787;17785;17786;
17813;17814;17812;17810;17811;17818;17819;17817;17815;17816;
17803;17804;17802;17800;17801;17808;17809;17807;17805;17806;
17833;17834;17832;17830;17831;17838;17839;17837;17835;17836;
17823;17824;17822;17820;17821;17828;17829;17827;17825;17826;
17853;17854;17852;17850;17851;17858;17859;17857;17855;17856;
17843;17844;17842;17840;17841;17848;17849;17847;17845;17846;
17873;17874;17872;17870;17871;17878;17879;17877;17875;17876;
17863;17864;17862;17860;17861;17868;17869;17867;17865;17866;
17893;17894;17892;17890;17891;17898;17899;17897;17895;17896;
17883;17884;17882;17880;17881;17888;17889;17887;17885;17886;
17913;17914;17912;17910;17911;17918;17919;17917;17915;17916;
17903;17904;17902;17900;17901;17908;17909;17907;17905;17906;
17933;17934;17932;17930;17931;17938;17939;17937;17935;17936;
17923;17924;17922;17920;17921;17928;17929;17927;17925;17926;
17953;17954;17952;17950;17951;17958;17959;17957;17955;17956;
17943;17944;17942;17940;17941;17948;17949;17947;17945;17946;
17973;17974;17972;17970;17971;17978;17979;17977;17975;17976;
17963;17964;17962;17960;17961;17968;17969;17967;17965;17966;
17993;17994;17992;17990;17991;17998;17999;17997;17995;17996;
17983;17984;17982;17980;17981;17988;17989;17987;17985;17986;
18013;18014;18012;18010;18011;18018;18019;18017;18015;18016;
18003;18004;18002;18000;18001;18008;18009;18007;18005;18006;
18033;18034;18032;18030;18031;18038;18039;18037;18035;18036;
18023;18024;18022;18020;18021;18028;18029;18027;18025;18026;
18053;18054;18052;18050;18051;18058;18059;18057;18055;18056;
18043;18044;18042;18040;18041;18048;18049;18047;18045;18046;
18073;18074;18072;18070;18071;18078;18079;18077;18075;18076;
18063;18064;18062;18060;18061;18068;18069;18067;18065;18066;
18093;18094;18092;18090;18091;18098;18099;18097;18095;18096;
18083;18084;18082;18080;18081;18088;18089;18087;18085;18086;
18113;18114;18112;18110;18111;18118;18119;18117;18115;18116;
18103;18104;18102;18100;18101;18108;18109;18107;18105;18106;
18133;18134;18132;18130;18131;18138;18139;18137;18135;18136;
18123;18124;18122;18120;18121;18128;18129;18127;18125;18126;
18153;18154;18152;18150;18151;18158;18159;18157;18155;18156;
18143;18144;18142;18140;18141;18148;18149;18147;18145;18146;
18173;18174;18172;18170;18171;18178;18179;18177;18175;18176;
18163;18164;18162;18160;18161;18168;18169;18167;18165;18166;
18193;18194;18192;18190;18191;18198;18199;18197;18195;18196;
18183;18184;18182;18180;18181;18188;18189;18187;18185;18186;
18213;18214;18212;18210;18211;18218;18219;18217;18215;18216;
18203;18204;18202;18200;18201;18208;18209;18207;18205;18206;
18233;18234;18232;18230;18231;18238;18239;18237;18235;18236;
18223;18224;18222;18220;18221;18228;18229;18227;18225;18226;
18253;18254;18252;18250;18251;18258;18259;18257;18255;18256;
18243;18244;18242;18240;18241;18248;18249;18247;18245;18246;
18273;18274;18272;18270;18271;18278;18279;18277;18275;18276;
18263;18264;18262;18260;18261;18268;18269;18267;18265;18266;
18293;18294;18292;18290;18291;18298;18299;18297;18295;18296;
18283;18284;18282;18280;18281;18288;18289;18287;18285;18286;
18313;18314;18312;18310;18311;18318;18319;18317;18315;18316;
18303;18304;18302;18300;18301;18308;18309;18307;18305;18306;
18333;18334;18332;18330;18331;18338;18339;18337;18335;18336;
18323;18324;18322;18320;18321;18328;18329;18327;18325;18326;
18353;18354;18352;18350;18351;18358;18359;18357;18355;18356;
18343;18344;18342;18340;18341;18348;18349;18347;18345;18346;
18373;18374;18372;18370;18371;18378;18379;18377;18375;18376;
18363;18364;18362;18360;18361;18368;18369;18367;18365;18366;
18393;18394;18392;18390;18391;18398;18399;18397;18395;18396;
18383;18384;18382;18380;18381;18388;18389;18387;18385;18386;
18413;18414;18412;18410;18411;18418;18419;18417;18415;18416;
18403;18404;18402;18400;18401;18408;18409;18407;18405;18406;
18433;18434;18432;18430;18431;18438;18439;18437;18435;18436;
18423;18424;18422;18420;18421;18428;18429;18427;18425;18426;
18453;18454;18452;18450;18451;18458;18459;18457;18455;18456;
18443;18444;18442;18440;18441;18448;18449;18447;18445;18446;
18473;18474;18472;18470;18471;18478;18479;18477;18475;18476;
18463;18464;18462;18460;18461;18468;18469;18467;18465;18466;
18493;18494;18492;18490;18491;18498;18499;18497;18495;18496;
18483;18484;18482;18480;18481;18488;18489;18487;18485;18486;
18513;18514;18512;18510;18511;18518;18519;18517;18515;18516;
18503;18504;18502;18500;18501;18508;18509;18507;18505;18506;
18533;18534;18532;18530;18531;18538;18539;18537;18535;18536;
18523;18524;18522;18520;18521;18528;18529;18527;18525;18526;
18553;18554;18552;18550;18551;18558;18559;18557;18555;18556;
18543;18544;18542;18540;18541;18548;18549;18547;18545;18546;
18573;18574;18572;18570;18571;18578;18579;18577;18575;18576;
18563;18564;18562;18560;18561;18568;18569;18567;18565;18566;
18593;18594;18592;18590;18591;18598;18599;18597;18595;18596;
18583;18584;18582;18580;18581;18588;18589;18587;18585;18586;
18613;18614;18612;18610;18611;18618;18619;18617;18615;18616;
18603;18604;18602;18600;18601;18608;18609;18607;18605;18606;
18633;18634;18632;18630;18631;18638;18639;18637;18635;18636;
18623;18624;18622;18620;18621;18628;18629;18627;18625;18626;
18653;18654;18652;18650;18651;18658;18659;18657;18655;18656;
18643;18644;18642;18640;18641;18648;18649;18647;18645;18646;
18673;18674;18672;18670;18671;18678;18679;18677;18675;18676;
18663;18664;18662;18660;18661;18668;18669;18667;18665;18666;
18693;18694;18692;18690;18691;18698;18699;18697;18695;18696;
18683;18684;18682;18680;18681;18688;18689;18687;18685;18686;
18713;18714;18712;18710;18711;18718;18719;18717;18715;18716;
18703;18704;18702;18700;18701;18708;18709;18707;18705;18706;
18733;18734;18732;18730;18731;18738;18739;18737;18735;18736;
18723;18724;18722;18720;18721;18728;18729;18727;18725;18726;
18753;18754;18752;18750;18751;18758;18759;18757;18755;18756;
18743;18744;18742;18740;18741;18748;18749;18747;18745;18746;
18773;18774;18772;18770;18771;18778;18779;18777;18775;18776;
18763;18764;18762;18760;18761;18768;18769;18767;18765;18766;
18793;18794;18792;18790;18791;18798;18799;18797;18795;18796;
18783;18784;18782;18780;18781;18788;18789;18787;18785;18786;
18813;18814;18812;18810;18811;18818;18819;18817;18815;18816;
18803;18804;18802;18800;18801;18808;18809;18807;18805;18806;
18833;18834;18832;18830;18831;18838;18839;18837;18835;18836;
18823;18824;18822;18820;18821;18828;18829;18827;18825;18826;
   };
   last_sort_spec {
    name="DataSortSpec_417";
    ops {
     name="DataOpList_942";
     el_typ=DataSortEl;
     el_def=0;
     DataSortEl @[0] {
      col_name="category";
      name="category_up_0";
      order=ASCENDING;
     };
     DataSortEl @[1] {
      col_name="individual";
      name="individual_up_1";
      order=ASCENDING;
     };
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[6] {
   name="Category";
   desc="Full list of categories -- defines the space of possible responses -- can be larger than what is currently in  use";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1785714;
       val_type_fixed=0;
      };
     };
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4975";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.1785714;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [100] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[7] {
   name="CurCategs";
   desc="categories currently in use by the current set of input patterns -- can be a subset of full list in Category";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4978";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.2192982;
       val_type_fixed=0;
      };
     };
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.2192982;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [20] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[8] {
   name="Individual";
   desc="full master list of individual objects (there may also be multiple images of same individual object below this level)";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4974";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[3] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4975";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [942] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[9] {
   name="CurIndivs";
   desc="currently-used individuals -- not the full master list";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[3] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [189] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[10] {
   name="SoundFilesRaw";
   desc="listing of individual objects (may be multiple images of same object)";
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_1999";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.25;
       val_type_fixed=0;
      };
     };
     name="FileName";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{      };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=154;
    };
    String_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_2000";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.5714286;
       val_type_fixed=0;
      };
     };
     name="FilePath";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{      };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=352;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [0]    };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[11] {
   name="SoundFilesAll";
   desc="listing of individual objects (may be multiple images of same object)";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_2004";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1623377;
       val_type_fixed=0;
      };
     };
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{      };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_2001";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.612013;
       val_type_fixed=0;
      };
     };
     name="sound_file";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{      };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=377;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [0]    };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[12] {
   name="SoundFilesUse";
   desc="listing of individual objects (may be multiple images of same object)";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_2004";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1623377;
       val_type_fixed=0;
      };
     };
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{      };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_2001";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.612013;
       val_type_fixed=0;
      };
     };
     name="sound_file";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{      };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=377;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [0]    };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[13] {
   name="TrainItemsAll";
   desc="ids of items selected for test set";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[2] {
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[3] {
     name="filename";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="oid_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [2980] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;942;943;944;945;946;947;948;949;
950;951;952;953;954;955;956;957;958;959;
960;961;962;963;964;965;966;967;968;969;
970;971;972;973;974;975;976;977;978;979;
980;981;982;983;984;985;986;987;988;989;
990;991;992;993;994;995;996;997;998;999;
1000;1001;1002;1003;1004;1005;1006;1007;1008;1009;
1010;1011;1012;1013;1014;1015;1016;1017;1018;1019;
1020;1021;1022;1023;1024;1025;1026;1027;1028;1029;
1030;1031;1032;1033;1034;1035;1036;1037;1038;1039;
1040;1041;1042;1043;1044;1045;1046;1047;1048;1049;
1050;1051;1052;1053;1054;1055;1056;1057;1058;1059;
1060;1061;1062;1063;1064;1065;1066;1067;1068;1069;
1070;1071;1072;1073;1074;1075;1076;1077;1078;1079;
1080;1081;1082;1083;1084;1085;1086;1087;1088;1089;
1090;1091;1092;1093;1094;1095;1096;1097;1098;1099;
1100;1101;1102;1103;1104;1105;1106;1107;1108;1109;
1110;1111;1112;1113;1114;1115;1116;1117;1118;1119;
1120;1121;1122;1123;1124;1125;1126;1127;1128;1129;
1130;1131;1132;1133;1134;1135;1136;1137;1138;1139;
1140;1141;1142;1143;1144;1145;1146;1147;1148;1149;
1150;1151;1152;1153;1154;1155;1156;1157;1158;1159;
1160;1161;1162;1163;1164;1165;1166;1167;1168;1169;
1170;1171;1172;1173;1174;1175;1176;1177;1178;1179;
1180;1181;1182;1183;1184;1185;1186;1187;1188;1189;
1190;1191;1192;1193;1194;1195;1196;1197;1198;1199;
1200;1201;1202;1203;1204;1205;1206;1207;1208;1209;
1210;1211;1212;1213;1214;1215;1216;1217;1218;1219;
1220;1221;1222;1223;1224;1225;1226;1227;1228;1229;
1230;1231;1232;1233;1234;1235;1236;1237;1238;1239;
1240;1241;1242;1243;1244;1245;1246;1247;1248;1249;
1250;1251;1252;1253;1254;1255;1256;1257;1258;1259;
1260;1261;1262;1263;1264;1265;1266;1267;1268;1269;
1270;1271;1272;1273;1274;1275;1276;1277;1278;1279;
1280;1281;1282;1283;1284;1285;1286;1287;1288;1289;
1290;1291;1292;1293;1294;1295;1296;1297;1298;1299;
1300;1301;1302;1303;1304;1305;1306;1307;1308;1309;
1310;1311;1312;1313;1314;1315;1316;1317;1318;1319;
1320;1321;1322;1323;1324;1325;1326;1327;1328;1329;
1330;1331;1332;1333;1334;1335;1336;1337;1338;1339;
1340;1341;1342;1343;1344;1345;1346;1347;1348;1349;
1350;1351;1352;1353;1354;1355;1356;1357;1358;1359;
1360;1361;1362;1363;1364;1365;1366;1367;1368;1369;
1370;1371;1372;1373;1374;1375;1376;1377;1378;1379;
1380;1381;1382;1383;1384;1385;1386;1387;1388;1389;
1390;1391;1392;1393;1394;1395;1396;1397;1398;1399;
1400;1401;1402;1403;1404;1405;1406;1407;1408;1409;
1410;1411;1412;1413;1414;1415;1416;1417;1418;1419;
1420;1421;1422;1423;1424;1425;1426;1427;1428;1429;
1430;1431;1432;1433;1434;1435;1436;1437;1438;1439;
1440;1441;1442;1443;1444;1445;1446;1447;1448;1449;
1450;1451;1452;1453;1454;1455;1456;1457;1458;1459;
1460;1461;1462;1463;1464;1465;1466;1467;1468;1469;
1470;1471;1472;1473;1474;1475;1476;1477;1478;1479;
1480;1481;1482;1483;1484;1485;1486;1487;1488;1489;
1490;1491;1492;1493;1494;1495;1496;1497;1498;1499;
1500;1501;1502;1503;1504;1505;1506;1507;1508;1509;
1510;1511;1512;1513;1514;1515;1516;1517;1518;1519;
1520;1521;1522;1523;1524;1525;1526;1527;1528;1529;
1530;1531;1532;1533;1534;1535;1536;1537;1538;1539;
1540;1541;1542;1543;1544;1545;1546;1547;1548;1549;
1550;1551;1552;1553;1554;1555;1556;1557;1558;1559;
1560;1561;1562;1563;1564;1565;1566;1567;1568;1569;
1570;1571;1572;1573;1574;1575;1576;1577;1578;1579;
1580;1581;1582;1583;1584;1585;1586;1587;1588;1589;
1590;1591;1592;1593;1594;1595;1596;1597;1598;1599;
1600;1601;1602;1603;1604;1605;1606;1607;1608;1609;
1610;1611;1612;1613;1614;1615;1616;1617;1618;1619;
1620;1621;1622;1623;1624;1625;1626;1627;1628;1629;
1630;1631;1632;1633;1634;1635;1636;1637;1638;1639;
1640;1641;1642;1643;1644;1645;1646;1647;1648;1649;
1650;1651;1652;1653;1654;1655;1656;1657;1658;1659;
1660;1661;1662;1663;1664;1665;1666;1667;1668;1669;
1670;1671;1672;1673;1674;1675;1676;1677;1678;1679;
1680;1681;1682;1683;1684;1685;1686;1687;1688;1689;
1690;1691;1692;1693;1694;1695;1696;1697;1698;1699;
1700;1701;1702;1703;1704;1705;1706;1707;1708;1709;
1710;1711;1712;1713;1714;1715;1716;1717;1718;1719;
1720;1721;1722;1723;1724;1725;1726;1727;1728;1729;
1730;1731;1732;1733;1734;1735;1736;1737;1738;1739;
1740;1741;1742;1743;1744;1745;1746;1747;1748;1749;
1750;1751;1752;1753;1754;1755;1756;1757;1758;1759;
1760;1761;1762;1763;1764;1765;1766;1767;1768;1769;
1770;1771;1772;1773;1774;1775;1776;1777;1778;1779;
1780;1781;1782;1783;1784;1785;1786;1787;1788;1789;
1790;1791;1792;1793;1794;1795;1796;1797;1798;1799;
1800;1801;1802;1803;1804;1805;1806;1807;1808;1809;
1810;1811;1812;1813;1814;1815;1816;1817;1818;1819;
1820;1821;1822;1823;1824;1825;1826;1827;1828;1829;
1830;1831;1832;1833;1834;1835;1836;1837;1838;1839;
1840;1841;1842;1843;1844;1845;1846;1847;1848;1849;
1850;1851;1852;1853;1854;1855;1856;1857;1858;1859;
1860;1861;1862;1863;1864;1865;1866;1867;1868;1869;
1870;1871;1872;1873;1874;1875;1876;1877;1878;1879;
1880;1881;1882;1883;1884;1885;1886;1887;1888;1889;
1890;1891;1892;1893;1894;1895;1896;1897;1898;1899;
1900;1901;1902;1903;1904;1905;1906;1907;1908;1909;
1910;1911;1912;1913;1914;1915;1916;1917;1918;1919;
1920;1921;1922;1923;1924;1925;1926;1927;1928;1929;
1930;1931;1932;1933;1934;1935;1936;1937;1938;1939;
1940;1941;1942;1943;1944;1945;1946;1947;1948;1949;
1950;1951;1952;1953;1954;1955;1956;1957;1958;1959;
1960;1961;1962;1963;1964;1965;1966;1967;1968;1969;
1970;1971;1972;1973;1974;1975;1976;1977;1978;1979;
1980;1981;1982;1983;1984;1985;1986;1987;1988;1989;
1990;1991;1992;1993;1994;1995;1996;1997;1998;1999;
2000;2001;2002;2003;2004;2005;2006;2007;2008;2009;
2010;2011;2012;2013;2014;2015;2016;2017;2018;2019;
2020;2021;2022;2023;2024;2025;2026;2027;2028;2029;
2030;2031;2032;2033;2034;2035;2036;2037;2038;2039;
2040;2041;2042;2043;2044;2045;2046;2047;2048;2049;
2050;2051;2052;2053;2054;2055;2056;2057;2058;2059;
2060;2061;2062;2063;2064;2065;2066;2067;2068;2069;
2070;2071;2072;2073;2074;2075;2076;2077;2078;2079;
2080;2081;2082;2083;2084;2085;2086;2087;2088;2089;
2090;2091;2092;2093;2094;2095;2096;2097;2098;2099;
2100;2101;2102;2103;2104;2105;2106;2107;2108;2109;
2110;2111;2112;2113;2114;2115;2116;2117;2118;2119;
2120;2121;2122;2123;2124;2125;2126;2127;2128;2129;
2130;2131;2132;2133;2134;2135;2136;2137;2138;2139;
2140;2141;2142;2143;2144;2145;2146;2147;2148;2149;
2150;2151;2152;2153;2154;2155;2156;2157;2158;2159;
2160;2161;2162;2163;2164;2165;2166;2167;2168;2169;
2170;2171;2172;2173;2174;2175;2176;2177;2178;2179;
2180;2181;2182;2183;2184;2185;2186;2187;2188;2189;
2190;2191;2192;2193;2194;2195;2196;2197;2198;2199;
2200;2201;2202;2203;2204;2205;2206;2207;2208;2209;
2210;2211;2212;2213;2214;2215;2216;2217;2218;2219;
2220;2221;2222;2223;2224;2225;2226;2227;2228;2229;
2230;2231;2232;2233;2234;2235;2236;2237;2238;2239;
2240;2241;2242;2243;2244;2245;2246;2247;2248;2249;
2250;2251;2252;2253;2254;2255;2256;2257;2258;2259;
2260;2261;2262;2263;2264;2265;2266;2267;2268;2269;
2270;2271;2272;2273;2274;2275;2276;2277;2278;2279;
2280;2281;2282;2283;2284;2285;2286;2287;2288;2289;
2290;2291;2292;2293;2294;2295;2296;2297;2298;2299;
2300;2301;2302;2303;2304;2305;2306;2307;2308;2309;
2310;2311;2312;2313;2314;2315;2316;2317;2318;2319;
2320;2321;2322;2323;2324;2325;2326;2327;2328;2329;
2330;2331;2332;2333;2334;2335;2336;2337;2338;2339;
2340;2341;2342;2343;2344;2345;2346;2347;2348;2349;
2350;2351;2352;2353;2354;2355;2356;2357;2358;2359;
2360;2361;2362;2363;2364;2365;2366;2367;2368;2369;
2370;2371;2372;2373;2374;2375;2376;2377;2378;2379;
2380;2381;2382;2383;2384;2385;2386;2387;2388;2389;
2390;2391;2392;2393;2394;2395;2396;2397;2398;2399;
2400;2401;2402;2403;2404;2405;2406;2407;2408;2409;
2410;2411;2412;2413;2414;2415;2416;2417;2418;2419;
2420;2421;2422;2423;2424;2425;2426;2427;2428;2429;
2430;2431;2432;2433;2434;2435;2436;2437;2438;2439;
2440;2441;2442;2443;2444;2445;2446;2447;2448;2449;
2450;2451;2452;2453;2454;2455;2456;2457;2458;2459;
2460;2461;2462;2463;2464;2465;2466;2467;2468;2469;
2470;2471;2472;2473;2474;2475;2476;2477;2478;2479;
2480;2481;2482;2483;2484;2485;2486;2487;2488;2489;
2490;2491;2492;2493;2494;2495;2496;2497;2498;2499;
2500;2501;2502;2503;2504;2505;2506;2507;2508;2509;
2510;2511;2512;2513;2514;2515;2516;2517;2518;2519;
2520;2521;2522;2523;2524;2525;2526;2527;2528;2529;
2530;2531;2532;2533;2534;2535;2536;2537;2538;2539;
2540;2541;2542;2543;2544;2545;2546;2547;2548;2549;
2550;2551;2552;2553;2554;2555;2556;2557;2558;2559;
2560;2561;2562;2563;2564;2565;2566;2567;2568;2569;
2570;2571;2572;2573;2574;2575;2576;2577;2578;2579;
2580;2581;2582;2583;2584;2585;2586;2587;2588;2589;
2590;2591;2592;2593;2594;2595;2596;2597;2598;2599;
2600;2601;2602;2603;2604;2605;2606;2607;2608;2609;
2610;2611;2612;2613;2614;2615;2616;2617;2618;2619;
2620;2621;2622;2623;2624;2625;2626;2627;2628;2629;
2630;2631;2632;2633;2634;2635;2636;2637;2638;2639;
2640;2641;2642;2643;2644;2645;2646;2647;2648;2649;
2650;2651;2652;2653;2654;2655;2656;2657;2658;2659;
2660;2661;2662;2663;2664;2665;2666;2667;2668;2669;
2670;2671;2672;2673;2674;2675;2676;2677;2678;2679;
2680;2681;2682;2683;2684;2685;2686;2687;2688;2689;
2690;2691;2692;2693;2694;2695;2696;2697;2698;2699;
2700;2701;2702;2703;2704;2705;2706;2707;2708;2709;
2710;2711;2712;2713;2714;2715;2716;2717;2718;2719;
2720;2721;2722;2723;2724;2725;2726;2727;2728;2729;
2730;2731;2732;2733;2734;2735;2736;2737;2738;2739;
2740;2741;2742;2743;2744;2745;2746;2747;2748;2749;
2750;2751;2752;2753;2754;2755;2756;2757;2758;2759;
2760;2761;2762;2763;2764;2765;2766;2767;2768;2769;
2770;2771;2772;2773;2774;2775;2776;2777;2778;2779;
2780;2781;2782;2783;2784;2785;2786;2787;2788;2789;
2790;2791;2792;2793;2794;2795;2796;2797;2798;2799;
2800;2801;2802;2803;2804;2805;2806;2807;2808;2809;
2810;2811;2812;2813;2814;2815;2816;2817;2818;2819;
2820;2821;2822;2823;2824;2825;2826;2827;2828;2829;
2830;2831;2832;2833;2834;2835;2836;2837;2838;2839;
2840;2841;2842;2843;2844;2845;2846;2847;2848;2849;
2850;2851;2852;2853;2854;2855;2856;2857;2858;2859;
2860;2861;2862;2863;2864;2865;2866;2867;2868;2869;
2870;2871;2872;2873;2874;2875;2876;2877;2878;2879;
2880;2881;2882;2883;2884;2885;2886;2887;2888;2889;
2890;2891;2892;2893;2894;2895;2896;2897;2898;2899;
2900;2901;2902;2903;2904;2905;2906;2907;2908;2909;
2910;2911;2912;2913;2914;2915;2916;2917;2918;2919;
2920;2921;2922;2923;2924;2925;2926;2927;2928;2929;
2930;2931;2932;2933;2934;2935;2936;2937;2938;2939;
2940;2941;2942;2943;2944;2945;2946;2947;2948;2949;
2950;2951;2952;2953;2954;2955;2956;2957;2958;2959;
2960;2961;2962;2963;2964;2965;2966;2967;2968;2969;
2970;2971;2972;2973;2974;2975;2976;2977;2978;2979;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[14] {
   name="TestItemsAll";
   desc="ids of items selected for test set";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[2] {
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[3] {
     name="filename";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="oid_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [800] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[15] {
   name="TrainItemsCurList";
   desc="ids of items selected for test set";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[2] {
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[3] {
     name="filename";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="oid_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [2980] 2140;1841;442;2890;2817;1245;1690;1379;2823;2639;
57;597;610;1976;2578;6;2311;392;1842;282;
1058;1332;1090;2852;76;1062;1684;1580;823;1926;
2335;1137;62;838;2897;9;1414;2312;2675;2393;
1887;1804;670;2120;566;53;2719;88;1515;2721;
848;928;1280;2321;775;836;2154;2648;845;413;
2123;1401;1066;529;85;1316;1417;2143;1400;1625;
1274;2212;431;594;202;1630;1505;2160;748;1996;
2590;2879;1314;279;2688;307;1956;436;1122;2495;
2924;533;117;1894;1371;2184;2327;292;1042;2078;
716;820;2100;760;2667;1828;589;1922;918;361;
364;2352;2955;2826;1105;2090;2637;1789;2226;2853;
2038;1760;2553;416;1073;2375;813;1624;2587;2163;
981;560;1803;2674;1904;2828;2358;543;1543;1700;
785;1889;1566;1431;669;2883;1478;30;1473;1553;
2576;2072;233;1313;407;29;339;599;1442;1646;
1197;2558;2903;971;727;332;1075;2270;1788;2789;
116;766;2467;68;1328;2718;1250;1565;491;1050;
428;161;2658;852;1821;304;215;2599;2605;1795;
1143;228;2767;2413;1590;2085;410;829;255;1526;
2785;2392;182;1108;2452;178;1367;1792;2448;1384;
472;270;1229;2014;2268;163;27;1928;1746;2805;
570;1101;2283;155;2662;193;539;247;1368;1771;
1069;1300;2790;2331;1337;550;1092;1036;1588;1876;
2948;2261;2136;336;54;1484;1811;257;1163;1180;
1155;1082;475;2002;1691;2417;1654;2379;2559;2083;
2847;320;917;2814;556;2250;2016;2486;2586;1703;
1271;2213;1830;122;1355;2923;1440;765;447;1278;
219;440;1810;2876;1559;333;2606;1119;342;857;
935;720;1990;1610;915;2353;1427;1317;66;1498;
2411;2287;621;658;1419;837;2336;1524;1770;913;
1739;2736;1777;1117;534;1390;112;2199;731;1520;
2616;2600;2361;2804;2403;2505;20;1815;2664;2039;
2842;2899;2630;438;238;891;2949;875;1988;281;
1847;1621;133;2267;1021;603;1224;2735;510;1718;
2517;2150;1927;2316;582;450;227;1217;2712;1897;
1282;2440;524;1248;626;2231;261;1812;166;223;
2374;2867;1768;425;860;414;243;2071;125;71;
2023;2098;181;2940;2338;2297;2838;2758;2099;2708;
563;2239;379;443;13;2257;2025;2569;2709;1980;
2032;2490;2810;220;458;2237;1729;2367;2651;2251;
1670;1707;2679;2473;576;2057;1462;1765;1539;35;
707;389;2427;1452;2884;2323;1210;1107;334;1987;
305;618;2824;1799;2783;1521;1947;1950;1402;2414;
1095;2811;1546;1253;951;387;897;1692;767;2567;
1439;2870;2407;2957;2293;2511;540;175;2001;2252;
470;2228;300;2793;1099;128;649;208;467;2588;
2860;919;2291;571;2931;254;1734;937;2555;612;
2221;1048;1713;2381;290;703;1408;126;245;1706;
2081;2013;40;1634;2116;2703;795;424;186;119;
2908;2536;434;788;103;1719;1551;654;113;2562;
1251;509;884;2881;55;2822;1523;213;2421;1436;
2471;2373;1940;2131;1140;530;984;1577;962;1074;
2301;262;2926;2242;1945;1851;960;2344;1333;525;
1755;2289;2028;2012;538;2011;452;1006;630;2444;
25;2424;2697;2642;70;2943;466;2854;812;1873;
59;325;328;1249;2650;1060;851;966;481;121;
2792;587;1268;1070;1934;2113;2464;1586;2643;523;
579;907;1857;2751;1043;1303;2249;2601;351;1913;
2912;2522;2118;1027;1545;2192;302;1080;1772;2756;
1449;22;340;172;998;1206;2337;288;1931;1171;
2507;1475;346;1549;1403;2122;1254;2343;659;2453;
2183;152;1231;2677;324;2086;2726;1009;1656;2341;
535;1601;1221;171;2269;299;2765;1264;357;2022;
411;2162;1824;1983;1398;2360;2488;1200;920;1293;
2029;2437;191;1444;1029;1808;2046;1957;84;2506;
2095;1157;2895;72;31;672;2279;2885;1826;109;
137;977;2518;810;1958;2917;179;362;2779;2975;
1514;188;688;2598;5;2216;2649;601;794;1202;
869;986;87;1409;2303;2030;1153;2404;2094;2097;
1008;1638;963;607;578;696;2248;1286;1323;1464;
1968;1702;508;2189;1111;2435;2230;623;1451;2232;
2315;1548;381;1470;2976;347;2710;32;2470;244;
1305;830;2222;638;1737;925;1114;809;1399;2342;
1486;2409;365;2833;1463;1651;803;1870;2328;2889;
726;702;114;969;2799;1222;2156;2245;994;2699;
2264;2202;2161;1687;2619;1415;2760;554;536;1655;
2747;1618;1952;1076;1560;2363;2158;1301;1511;1542;
2019;1167;1168;1292;1529;463;1166;2168;2288;69;
1822;1365;2689;2977;1745;673;709;1468;555;201;
1831;2589;146;2377;356;1761;415;2583;1077;1576;
2644;2177;2739;1228;1758;2570;776;2886;968;2695;
478;329;173;251;1376;1604;1641;1632;61;2829;
2593;2082;1437;1386;462;2401;1243;1026;432;2741;
921;498;1151;1581;2054;2685;256;2236;1327;2953;
2357;815;946;1846;2825;1362;378;2020;2037;905;
2552;218;855;1374;677;970;1665;1669;1631;2763;
1391;1919;1970;952;1457;1912;1832;2466;1219;1766;
1929;2711;149;2215;2209;950;2033;2815;265;2579;
762;2946;369;2724;380;689;1476;821;1182;2524;
2951;518;376;1516;1480;1350;737;2891;1800;516;
1749;685;2564;2330;1881;2442;746;2395;1100;520;
1567;602;1494;2700;2274;1582;2350;1195;684;2530;
1017;1356;2787;2627;877;2531;1227;822;2416;2461;
51;1187;1366;269;2034;75;2190;1696;1937;1053;
1538;374;2777;2497;2757;1672;2286;293;2299;1;
1352;2907;1186;1298;711;2546;2652;1124;559;1102;
2077;19;697;2031;249;2457;1963;2887;1991;2188;
800;575;1198;1966;2762;882;130;637;143;1204;
278;2816;1900;1179;2426;1051;865;1930;2290;1868;
391;164;1594;2185;664;1315;1281;1998;892;11;
651;1447;989;997;1986;1338;2334;1593;47;1233;
686;2195;2748;1915;1183;979;657;2545;1488;620;
931;1835;2659;1260;2618;990;1537;2462;2515;1527;
1136;864;2850;2687;404;1421;1133;136;622;1535;
189;893;2610;1297;43;2794;831;169;1813;401;
1909;345;1536;714;2880;2205;1193;513;2313;2733;
2869;1882;2554;100;640;2446;1041;2045;1902;1023;
777;2244;7;2615;2273;574;1162;2628;2438;240;
2571;2320;1471;2420;2513;1540;123;1663;232;873;
1677;1628;1397;2670;2774;337;2017;2845;1689;834;
2734;1534;2796;2063;338;335;934;2906;2166;64;
2362;2397;1552;1118;2478;1623;1667;1238;2849;1751;
706;894;2753;624;771;749;2759;408;1152;260;
1613;839;723;786;1113;151;1838;2611;712;49;
1192;1569;1377;1769;983;1513;2169;1483;1175;2544;
939;2220;2345;1034;1448;581;81;1461;2498;2624;
1598;1261;393;949;272;398;1732;1903;1495;160;
417;10;1833;1241;798;2529;2138;2633;93;1568;
1031;2399;2878;2896;2581;1342;2494;28;615;2539;
1065;2165;2430;2935;2608;355;2776;1572;625;1579;
1149;995;1503;779;1908;1981;611;948;1693;50;
1035;1055;595;2970;1497;2089;1085;807;2728;2768;
15;782;2597;1191;1326;1790;2088;1052;1308;1220;
2696;818;1666;2941;499;1727;1011;418;1474;2253;
1170;641;195;1639;1130;21;2366;2504;1212;2225;
1924;1341;2549;229;192;2894;1748;650;2235;433;
789;527;91;2547;1840;1556;2806;1741;449;1012;
1239;1189;927;2223;2296;1218;1635;2594;1890;735;
2737;2920;2306;722;1430;1845;144;715;2068;2024;
692;1944;1247;1744;2947;1336;1743;2369;2830;2324;
790;2137;2706;644;1479;448;460;1188;2968;131;
1946;2018;975;226;1738;665;224;1501;2701;930;
763;1504;1173;522;1967;2181;1668;373;2964;2807;
1161;2560;63;239;1914;2065;721;2607;1653;383;
203;1285;1861;693;1932;2965;445;2617;2839;2238;
264;728;2474;2746;311;1796;900;2744;783;2055;
1381;2888;505;2686;2134;985;2632;1112;846;1544;
317;898;2944;1774;2042;276;2573;2669;1802;1994;
811;2609;2761;275;280;736;1405;2119;1525;124;
1780;2126;1466;652;2021;577;604;680;991;2234;
1142;980;572;2716;1723;1030;2450;2509;588;2104;
454;1781;584;705;501;358;912;655;2041;1806;
1785;1395;2152;2909;2008;2557;2952;2561;1708;2942;
1817;1935;1196;1485;1349;1372;174;1406;58;111;
858;718;309;457;1445;1891;648;2048;1657;1071;
2463;1875;2969;2460;2556;743;157;1850;118;687;
1002;1678;1712;778;1541;349;2298;2376;1275;2782;
2698;1334;805;1814;862;2550;1407;2591;24;1387;
142;2388;2900;808;889;196;1949;2084;854;1176;
2295;1172;326;1004;2425;2961;1965;1348;1519;2103;
888;515;1380;1181;1964;2715;1288;1258;1701;246;
1901;73;359;2000;2596;1649;954;1459;2904;1721;
1256;1941;1499;683;2772;708;1807;2533;2157;2371;
1600;1283;1304;802;871;1045;598;1995;1834;2093;
2801;1116;2898;2914;12;507;1184;2663;2508;222;
1345;273;1564;405;1003;2317;1531;1458;2602;2738;
2568;1936;796;1726;1622;1404;2259;661;1615;1132;
2621;1291;909;2307;682;1787;1674;1742;2193;514;
881;212;199;2933;1791;1683;938;2528;2455;1685;
2476;1938;1778;2800;1733;1472;2479;1720;609;2501;
2432;154;435;1547;495;1438;2859;2680;2928;734;
2075;2865;1506;363;1123;205;1226;1645;2535;2266;
1855;366;806;2477;890;617;1906;78;2863;284;
2010;390;1809;348;242;2080;1589;2565;1911;1319;
2458;1049;2125;974;1877;547;2541;156;2962;2419;
2052;1959;2387;2819;1612;184;1763;421;1270;632;
2612;1001;2937;605;1879;354;2809;2874;1330;2784;
2661;769;455;791;2921;2551;552;1883;1508;2105;
541;406;104;2485;1078;1225;2770;1000;1370;596;
1240;2840;1259;1675;2004;310;1378;1658;1276;2047;
906;2175;1063;1321;2492;480;2510;147;2325;923;
2864;1054;896;89;753;695;2620;327;1455;1827;
1878;2974;465;159;479;1550;1574;1018;2778;1025;
183;1094;1647;1759;1324;691;2408;1682;1357;1583;
999;2005;283;1942;2929;804;2194;409;1294;2206;
2429;2431;1892;932;2930;1214;2668;82;2058;1933;
2526;2577;2939;592;2543;613;2846;1129;2691;129;
545;987;643;2681;2149;2732;2070;1491;225;1104;
1697;755;79;744;2006;2285;1312;2922;2641;710;
1825;2702;253;1695;1284;2224;2755;2540;1047;1144;
1722;1864;2841;2657;412;2574;2258;568;532;1989;
1096;2797;1648;2062;663;2146;1886;2349;944;586;
1287;1489;2496;1422;784;2848;828;1088;2472;2499;
1554;2676;1346;1388;2654;2958;627;2893;2862;214;
1862;674;1528;271;446;546;1434;841;83;1591;
372;211;733;1558;1411;1103;1139;2300;633;849;
1174;1705;1331;2422;2428;1425;629;750;503;1820;
1797;1925;1750;108;1869;2950;2614;2813;26;139;
2410;2646;1487;60;1223;1453;2164;593;2786;936;
360;1236;74;2481;922;1467;895;996;1819;1125;
887;2415;86;614;2332;2742;437;1235;1644;46;
375;2447;2179;816;732;941;313;1735;1279;2502;
92;1205;1898;187;528;1714;1089;1866;1843;2905;
1626;367;1673;1165;2866;2275;1717;2954;719;557;
2911;2750;1277;2423;1849;1728;496;2538;2754;2451;
660;2053;929;2713;1020;2967;241;2537;2740;1081;
2027;1150;2106;231;289;2255;396;1098;1979;2405;
2110;37;1273;1502;1839;2978;353;315;1266;564;
859;1985;549;2773;461;127;444;1874;150;2818;
1709;1454;1620;2727;2355;958;1784;1522;177;1860;
158;544;2124;2115;2170;426;847;2059;740;1955;
2364;2861;2167;296;1383;1637;1199;2629;2503;616;
1614;2730;1837;1948;1688;492;1710;1943;1246;2844;
947;645;1997;200;1844;2483;2326;2207;207;2171;
600;2096;2318;2775;2769;2214;2141;1533;2683;2308;
1895;4;1923;1753;583;2812;2682;1364;551;647;
1450;899;2913;451;1318;2856;180;1767;439;1086;
2665;1216;1354;2634;1793;1652;298;662;2003;2292;
194;886;2107;1068;943;2678;140;901;910;1893;
497;1686;2868;453;825;2548;2305;1410;350;1093;
2520;2203;2385;1091;1310;2580;1863;1265;1920;469;
1584;371;1272;2056;1028;204;2959;1918;1148;725;
1602;190;1662;1209;419;2469;395;1477;2635;2882;
517;429;1736;619;134;1120;2243;1608;2254;972;
1138;2456;1441;1954;1353;2500;1413;2280;162;2487;
1369;2069;1575;312;880;964;1418;2204;252;39;
132;843;872;1064;1962;2855;2927;1605;1013;377;
2484;694;853;1325;2972;493;2247;2389;780;216;
1972;1773;1643;34;2210;2690;1716;957;1373;1159;
2174;914;1607;1916;2902;2745;1263;1213;2372;266;
2638;1756;1650;2764;477;867;2694;77;773;1426;
1659;2527;106;1570;724;2148;0;1320;772;628;
2265;2592;730;323;1230;2073;519;167;2132;2625;
2284;1360;2704;1435;742;1329;548;483;1309;797;
850;2636;965;2201;45;301;2180;14;318;1510;
2196;2319;1603;1578;263;1596;1005;2304;1482;2060;
2347;2340;331;639;1242;2092;456;2820;2831;2263;
1267;1951;2187;1829;2441;1899;2309;1134;945;1244;
2465;2647;2542;67;2563;1307;102;868;1295;1429;
1606;321;1141;2445;95;1740;2795;1698;120;1164;
1865;2129;781;2050;1888;904;1177;933;747;474;
1853;713;423;1730;1960;1014;2572;2271;94;2443;
756;1953;1160;879;2051;2147;768;2566;2514;2714;
1852;2723;1754;2211;2877;18;1178;2725;1747;2391;
2109;1121;2433;382;1302;90;2186;2144;1973;1975;
700;1032;1423;2346;2036;2007;1492;1115;2512;2834;
758;876;476;1823;494;464;1007;2382;2066;1571;
250;2827;2835;1131;2673;1917;2398;2348;1067;165;
135;259;2857;2693;738;1757;1109;883;792;2241;
2613;874;502;1699;1694;2219;675;824;699;911;
668;2176;1599;1311;717;1885;2752;903;2489;2595;
1446;1234;1394;2802;1057;1724;1783;2365;2640;2108;
1056;1776;1257;2322;41;2623;1512;2585;1921;2534;
2356;1428;1396;512;2339;2061;793;565;1633;1974;
1818;2246;2076;531;1978;2684;2475;1779;1344;1977;
1022;642;2111;606;573;1561;1044;110;978;580;
2281;2915;832;487;1993;2380;1680;33;2743;2936;
2645;1907;2233;2672;1611;170;236;1087;1585;473;
2272;2394;608;1555;856;1361;316;1154;1992;1616;
1961;741;400;1999;993;168;1156;2872;1636;1382;
2836;2631;2692;819;2354;1982;2101;567;234;1339;
385;826;2480;485;1289;101;2260;2604;297;1725;
835;1343;38;52;908;1393;1412;2871;1128;1731;
2731;1039;394;745;1083;562;1507;1110;2656;653;
343;961;107;1237;1794;2151;1432;2919;955;1715;
287;2722;1500;764;176;526;2851;1269;399;739;
198;2705;2960;230;1215;924;2009;1627;2359;1340;
2525;1126;1859;2383;2178;542;801;759;1848;2653;
1147;506;1040;1232;2945;65;553;1884;36;268;
2229;678;2729;98;504;1262;1252;861;2916;840;
1046;585;569;2973;866;286;341;1465;2671;591;
2771;2934;2128;235;2521;2436;56;1255;679;1617;
2378;1939;352;2720;1573;482;277;2766;306;2956;
1872;799;1207;1518;420;752;817;1169;704;1609;
2966;2117;1010;1816;2808;2329;330;2064;2227;2843;
308;754;1347;1969;511;1661;863;105;2655;17;
2749;590;2963;1019;295;1679;2049;2182;2114;1127;
2400;384;2626;2402;1290;248;1335;2314;2277;1392;
1530;2173;2198;926;1037;2130;2875;402;1358;2043;
2622;1711;16;2282;1764;671;1871;2262;1801;2468;
2803;314;953;1910;267;1619;459;2368;2112;902;
2482;1858;1375;291;138;1664;430;2217;1629;210;
322;344;667;153;2979;2121;221;1517;2780;386;
486;185;1597;2091;2901;2666;1097;2938;656;1971;
237;2035;2087;1642;2858;2873;2832;1203;2074;2102;
2582;988;634;761;148;1880;1299;1079;1532;303;
701;1460;537;2302;2370;2454;2791;2172;558;44;
1061;1059;635;646;388;2127;1595;1385;2026;973;
1416;1563;397;2532;2310;1676;1194;2155;115;1015;
441;141;1084;2892;489;1106;2040;2351;42;1592;
1185;2333;2256;770;956;2294;729;2145;698;1016;
274;631;2406;2142;1798;1424;206;471;23;1509;
2;1481;1145;2418;2434;2396;2971;2603;1433;666;
99;2384;1896;827;2932;1762;8;1660;1443;2278;
258;1024;500;2925;814;757;2519;2523;1208;1905;
488;2788;370;1456;2139;1640;992;2135;1775;484;
2781;1854;1782;885;2821;48;2412;1867;1306;1493;
940;690;1805;2449;1786;1296;1190;197;2837;2159;
1469;1856;1752;967;2516;878;209;2218;942;1038;
2575;2133;916;2153;833;319;844;368;2079;403;
2208;2491;1033;1420;1389;1836;2660;2717;959;2197;
2459;2191;1351;2439;285;80;2276;1158;561;217;
2067;521;145;2044;842;976;1587;2584;1490;294;
1704;1984;774;2493;1557;787;1201;422;1146;2015;
751;1322;1681;681;676;1072;3;2200;490;2386;
1363;1671;1359;1211;2910;1135;97;96;982;870;
427;1562;2707;468;2390;1496;636;2240;2918;2798;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[16] {
   name="TestItemsCurList";
   desc="ids of items selected for test set";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[2] {
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[3] {
     name="filename";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="oid_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [800] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[17] {
   name="CurEpochList";
   desc="if there are constraints on number of objects per epoch, this is the list for the current epoch -- call GetCurEpochList function to update it ";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[2] {
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[3] {
     name="filename";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4478";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="oid_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4477";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4478";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [0]    };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[18] {
   name="CurObject";
   desc="current objects to use during this epoch";
   data {
    name="data";
    el_typ=double_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[2] {
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[3] {
     name="filename";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="oid_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [1] 0;   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[19] {
   name="CurSoundFiles";
   desc="listing of individual objects (may be multiple images of same object)";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_2004";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.2006803;
       val_type_fixed=0;
      };
     };
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{      };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=95;
    };
    String_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_2001";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1717687;
       val_type_fixed=0;
      };
     };
     name="sound_file";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{      };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=377;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [0]    };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[20] {
   name="TmpObjsList1";
   desc="current full list of objects with: category, individual, ctrlflags, and filename fields -- can have other optional data after that -- can have multiple rows for each category+individual (multiple different images / renders)";
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[2] {
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[3] {
     name="filename";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="oid_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [3780] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;942;943;944;945;946;947;948;949;
950;951;952;953;954;955;956;957;958;959;
960;961;962;963;964;965;966;967;968;969;
970;971;972;973;974;975;976;977;978;979;
980;981;982;983;984;985;986;987;988;989;
990;991;992;993;994;995;996;997;998;999;
1000;1001;1002;1003;1004;1005;1006;1007;1008;1009;
1010;1011;1012;1013;1014;1015;1016;1017;1018;1019;
1020;1021;1022;1023;1024;1025;1026;1027;1028;1029;
1030;1031;1032;1033;1034;1035;1036;1037;1038;1039;
1040;1041;1042;1043;1044;1045;1046;1047;1048;1049;
1050;1051;1052;1053;1054;1055;1056;1057;1058;1059;
1060;1061;1062;1063;1064;1065;1066;1067;1068;1069;
1070;1071;1072;1073;1074;1075;1076;1077;1078;1079;
1080;1081;1082;1083;1084;1085;1086;1087;1088;1089;
1090;1091;1092;1093;1094;1095;1096;1097;1098;1099;
1100;1101;1102;1103;1104;1105;1106;1107;1108;1109;
1110;1111;1112;1113;1114;1115;1116;1117;1118;1119;
1120;1121;1122;1123;1124;1125;1126;1127;1128;1129;
1130;1131;1132;1133;1134;1135;1136;1137;1138;1139;
1140;1141;1142;1143;1144;1145;1146;1147;1148;1149;
1150;1151;1152;1153;1154;1155;1156;1157;1158;1159;
1160;1161;1162;1163;1164;1165;1166;1167;1168;1169;
1170;1171;1172;1173;1174;1175;1176;1177;1178;1179;
1180;1181;1182;1183;1184;1185;1186;1187;1188;1189;
1190;1191;1192;1193;1194;1195;1196;1197;1198;1199;
1200;1201;1202;1203;1204;1205;1206;1207;1208;1209;
1210;1211;1212;1213;1214;1215;1216;1217;1218;1219;
1220;1221;1222;1223;1224;1225;1226;1227;1228;1229;
1230;1231;1232;1233;1234;1235;1236;1237;1238;1239;
1240;1241;1242;1243;1244;1245;1246;1247;1248;1249;
1250;1251;1252;1253;1254;1255;1256;1257;1258;1259;
1260;1261;1262;1263;1264;1265;1266;1267;1268;1269;
1270;1271;1272;1273;1274;1275;1276;1277;1278;1279;
1280;1281;1282;1283;1284;1285;1286;1287;1288;1289;
1290;1291;1292;1293;1294;1295;1296;1297;1298;1299;
1300;1301;1302;1303;1304;1305;1306;1307;1308;1309;
1310;1311;1312;1313;1314;1315;1316;1317;1318;1319;
1320;1321;1322;1323;1324;1325;1326;1327;1328;1329;
1330;1331;1332;1333;1334;1335;1336;1337;1338;1339;
1340;1341;1342;1343;1344;1345;1346;1347;1348;1349;
1350;1351;1352;1353;1354;1355;1356;1357;1358;1359;
1360;1361;1362;1363;1364;1365;1366;1367;1368;1369;
1370;1371;1372;1373;1374;1375;1376;1377;1378;1379;
1380;1381;1382;1383;1384;1385;1386;1387;1388;1389;
1390;1391;1392;1393;1394;1395;1396;1397;1398;1399;
1400;1401;1402;1403;1404;1405;1406;1407;1408;1409;
1410;1411;1412;1413;1414;1415;1416;1417;1418;1419;
1420;1421;1422;1423;1424;1425;1426;1427;1428;1429;
1430;1431;1432;1433;1434;1435;1436;1437;1438;1439;
1440;1441;1442;1443;1444;1445;1446;1447;1448;1449;
1450;1451;1452;1453;1454;1455;1456;1457;1458;1459;
1460;1461;1462;1463;1464;1465;1466;1467;1468;1469;
1470;1471;1472;1473;1474;1475;1476;1477;1478;1479;
1480;1481;1482;1483;1484;1485;1486;1487;1488;1489;
1490;1491;1492;1493;1494;1495;1496;1497;1498;1499;
1500;1501;1502;1503;1504;1505;1506;1507;1508;1509;
1510;1511;1512;1513;1514;1515;1516;1517;1518;1519;
1520;1521;1522;1523;1524;1525;1526;1527;1528;1529;
1530;1531;1532;1533;1534;1535;1536;1537;1538;1539;
1540;1541;1542;1543;1544;1545;1546;1547;1548;1549;
1550;1551;1552;1553;1554;1555;1556;1557;1558;1559;
1560;1561;1562;1563;1564;1565;1566;1567;1568;1569;
1570;1571;1572;1573;1574;1575;1576;1577;1578;1579;
1580;1581;1582;1583;1584;1585;1586;1587;1588;1589;
1590;1591;1592;1593;1594;1595;1596;1597;1598;1599;
1600;1601;1602;1603;1604;1605;1606;1607;1608;1609;
1610;1611;1612;1613;1614;1615;1616;1617;1618;1619;
1620;1621;1622;1623;1624;1625;1626;1627;1628;1629;
1630;1631;1632;1633;1634;1635;1636;1637;1638;1639;
1640;1641;1642;1643;1644;1645;1646;1647;1648;1649;
1650;1651;1652;1653;1654;1655;1656;1657;1658;1659;
1660;1661;1662;1663;1664;1665;1666;1667;1668;1669;
1670;1671;1672;1673;1674;1675;1676;1677;1678;1679;
1680;1681;1682;1683;1684;1685;1686;1687;1688;1689;
1690;1691;1692;1693;1694;1695;1696;1697;1698;1699;
1700;1701;1702;1703;1704;1705;1706;1707;1708;1709;
1710;1711;1712;1713;1714;1715;1716;1717;1718;1719;
1720;1721;1722;1723;1724;1725;1726;1727;1728;1729;
1730;1731;1732;1733;1734;1735;1736;1737;1738;1739;
1740;1741;1742;1743;1744;1745;1746;1747;1748;1749;
1750;1751;1752;1753;1754;1755;1756;1757;1758;1759;
1760;1761;1762;1763;1764;1765;1766;1767;1768;1769;
1770;1771;1772;1773;1774;1775;1776;1777;1778;1779;
1780;1781;1782;1783;1784;1785;1786;1787;1788;1789;
1790;1791;1792;1793;1794;1795;1796;1797;1798;1799;
1800;1801;1802;1803;1804;1805;1806;1807;1808;1809;
1810;1811;1812;1813;1814;1815;1816;1817;1818;1819;
1820;1821;1822;1823;1824;1825;1826;1827;1828;1829;
1830;1831;1832;1833;1834;1835;1836;1837;1838;1839;
1840;1841;1842;1843;1844;1845;1846;1847;1848;1849;
1850;1851;1852;1853;1854;1855;1856;1857;1858;1859;
1860;1861;1862;1863;1864;1865;1866;1867;1868;1869;
1870;1871;1872;1873;1874;1875;1876;1877;1878;1879;
1880;1881;1882;1883;1884;1885;1886;1887;1888;1889;
1890;1891;1892;1893;1894;1895;1896;1897;1898;1899;
1900;1901;1902;1903;1904;1905;1906;1907;1908;1909;
1910;1911;1912;1913;1914;1915;1916;1917;1918;1919;
1920;1921;1922;1923;1924;1925;1926;1927;1928;1929;
1930;1931;1932;1933;1934;1935;1936;1937;1938;1939;
1940;1941;1942;1943;1944;1945;1946;1947;1948;1949;
1950;1951;1952;1953;1954;1955;1956;1957;1958;1959;
1960;1961;1962;1963;1964;1965;1966;1967;1968;1969;
1970;1971;1972;1973;1974;1975;1976;1977;1978;1979;
1980;1981;1982;1983;1984;1985;1986;1987;1988;1989;
1990;1991;1992;1993;1994;1995;1996;1997;1998;1999;
2000;2001;2002;2003;2004;2005;2006;2007;2008;2009;
2010;2011;2012;2013;2014;2015;2016;2017;2018;2019;
2020;2021;2022;2023;2024;2025;2026;2027;2028;2029;
2030;2031;2032;2033;2034;2035;2036;2037;2038;2039;
2040;2041;2042;2043;2044;2045;2046;2047;2048;2049;
2050;2051;2052;2053;2054;2055;2056;2057;2058;2059;
2060;2061;2062;2063;2064;2065;2066;2067;2068;2069;
2070;2071;2072;2073;2074;2075;2076;2077;2078;2079;
2080;2081;2082;2083;2084;2085;2086;2087;2088;2089;
2090;2091;2092;2093;2094;2095;2096;2097;2098;2099;
2100;2101;2102;2103;2104;2105;2106;2107;2108;2109;
2110;2111;2112;2113;2114;2115;2116;2117;2118;2119;
2120;2121;2122;2123;2124;2125;2126;2127;2128;2129;
2130;2131;2132;2133;2134;2135;2136;2137;2138;2139;
2140;2141;2142;2143;2144;2145;2146;2147;2148;2149;
2150;2151;2152;2153;2154;2155;2156;2157;2158;2159;
2160;2161;2162;2163;2164;2165;2166;2167;2168;2169;
2170;2171;2172;2173;2174;2175;2176;2177;2178;2179;
2180;2181;2182;2183;2184;2185;2186;2187;2188;2189;
2190;2191;2192;2193;2194;2195;2196;2197;2198;2199;
2200;2201;2202;2203;2204;2205;2206;2207;2208;2209;
2210;2211;2212;2213;2214;2215;2216;2217;2218;2219;
2220;2221;2222;2223;2224;2225;2226;2227;2228;2229;
2230;2231;2232;2233;2234;2235;2236;2237;2238;2239;
2240;2241;2242;2243;2244;2245;2246;2247;2248;2249;
2250;2251;2252;2253;2254;2255;2256;2257;2258;2259;
2260;2261;2262;2263;2264;2265;2266;2267;2268;2269;
2270;2271;2272;2273;2274;2275;2276;2277;2278;2279;
2280;2281;2282;2283;2284;2285;2286;2287;2288;2289;
2290;2291;2292;2293;2294;2295;2296;2297;2298;2299;
2300;2301;2302;2303;2304;2305;2306;2307;2308;2309;
2310;2311;2312;2313;2314;2315;2316;2317;2318;2319;
2320;2321;2322;2323;2324;2325;2326;2327;2328;2329;
2330;2331;2332;2333;2334;2335;2336;2337;2338;2339;
2340;2341;2342;2343;2344;2345;2346;2347;2348;2349;
2350;2351;2352;2353;2354;2355;2356;2357;2358;2359;
2360;2361;2362;2363;2364;2365;2366;2367;2368;2369;
2370;2371;2372;2373;2374;2375;2376;2377;2378;2379;
2380;2381;2382;2383;2384;2385;2386;2387;2388;2389;
2390;2391;2392;2393;2394;2395;2396;2397;2398;2399;
2400;2401;2402;2403;2404;2405;2406;2407;2408;2409;
2410;2411;2412;2413;2414;2415;2416;2417;2418;2419;
2420;2421;2422;2423;2424;2425;2426;2427;2428;2429;
2430;2431;2432;2433;2434;2435;2436;2437;2438;2439;
2440;2441;2442;2443;2444;2445;2446;2447;2448;2449;
2450;2451;2452;2453;2454;2455;2456;2457;2458;2459;
2460;2461;2462;2463;2464;2465;2466;2467;2468;2469;
2470;2471;2472;2473;2474;2475;2476;2477;2478;2479;
2480;2481;2482;2483;2484;2485;2486;2487;2488;2489;
2490;2491;2492;2493;2494;2495;2496;2497;2498;2499;
2500;2501;2502;2503;2504;2505;2506;2507;2508;2509;
2510;2511;2512;2513;2514;2515;2516;2517;2518;2519;
2520;2521;2522;2523;2524;2525;2526;2527;2528;2529;
2530;2531;2532;2533;2534;2535;2536;2537;2538;2539;
2540;2541;2542;2543;2544;2545;2546;2547;2548;2549;
2550;2551;2552;2553;2554;2555;2556;2557;2558;2559;
2560;2561;2562;2563;2564;2565;2566;2567;2568;2569;
2570;2571;2572;2573;2574;2575;2576;2577;2578;2579;
2580;2581;2582;2583;2584;2585;2586;2587;2588;2589;
2590;2591;2592;2593;2594;2595;2596;2597;2598;2599;
2600;2601;2602;2603;2604;2605;2606;2607;2608;2609;
2610;2611;2612;2613;2614;2615;2616;2617;2618;2619;
2620;2621;2622;2623;2624;2625;2626;2627;2628;2629;
2630;2631;2632;2633;2634;2635;2636;2637;2638;2639;
2640;2641;2642;2643;2644;2645;2646;2647;2648;2649;
2650;2651;2652;2653;2654;2655;2656;2657;2658;2659;
2660;2661;2662;2663;2664;2665;2666;2667;2668;2669;
2670;2671;2672;2673;2674;2675;2676;2677;2678;2679;
2680;2681;2682;2683;2684;2685;2686;2687;2688;2689;
2690;2691;2692;2693;2694;2695;2696;2697;2698;2699;
2700;2701;2702;2703;2704;2705;2706;2707;2708;2709;
2710;2711;2712;2713;2714;2715;2716;2717;2718;2719;
2720;2721;2722;2723;2724;2725;2726;2727;2728;2729;
2730;2731;2732;2733;2734;2735;2736;2737;2738;2739;
2740;2741;2742;2743;2744;2745;2746;2747;2748;2749;
2750;2751;2752;2753;2754;2755;2756;2757;2758;2759;
2760;2761;2762;2763;2764;2765;2766;2767;2768;2769;
2770;2771;2772;2773;2774;2775;2776;2777;2778;2779;
2780;2781;2782;2783;2784;2785;2786;2787;2788;2789;
2790;2791;2792;2793;2794;2795;2796;2797;2798;2799;
2800;2801;2802;2803;2804;2805;2806;2807;2808;2809;
2810;2811;2812;2813;2814;2815;2816;2817;2818;2819;
2820;2821;2822;2823;2824;2825;2826;2827;2828;2829;
2830;2831;2832;2833;2834;2835;2836;2837;2838;2839;
2840;2841;2842;2843;2844;2845;2846;2847;2848;2849;
2850;2851;2852;2853;2854;2855;2856;2857;2858;2859;
2860;2861;2862;2863;2864;2865;2866;2867;2868;2869;
2870;2871;2872;2873;2874;2875;2876;2877;2878;2879;
2880;2881;2882;2883;2884;2885;2886;2887;2888;2889;
2890;2891;2892;2893;2894;2895;2896;2897;2898;2899;
2900;2901;2902;2903;2904;2905;2906;2907;2908;2909;
2910;2911;2912;2913;2914;2915;2916;2917;2918;2919;
2920;2921;2922;2923;2924;2925;2926;2927;2928;2929;
2930;2931;2932;2933;2934;2935;2936;2937;2938;2939;
2940;2941;2942;2943;2944;2945;2946;2947;2948;2949;
2950;2951;2952;2953;2954;2955;2956;2957;2958;2959;
2960;2961;2962;2963;2964;2965;2966;2967;2968;2969;
2970;2971;2972;2973;2974;2975;2976;2977;2978;2979;
2980;2981;2982;2983;2984;2985;2986;2987;2988;2989;
2990;2991;2992;2993;2994;2995;2996;2997;2998;2999;
3000;3001;3002;3003;3004;3005;3006;3007;3008;3009;
3010;3011;3012;3013;3014;3015;3016;3017;3018;3019;
3020;3021;3022;3023;3024;3025;3026;3027;3028;3029;
3030;3031;3032;3033;3034;3035;3036;3037;3038;3039;
3040;3041;3042;3043;3044;3045;3046;3047;3048;3049;
3050;3051;3052;3053;3054;3055;3056;3057;3058;3059;
3060;3061;3062;3063;3064;3065;3066;3067;3068;3069;
3070;3071;3072;3073;3074;3075;3076;3077;3078;3079;
3080;3081;3082;3083;3084;3085;3086;3087;3088;3089;
3090;3091;3092;3093;3094;3095;3096;3097;3098;3099;
3100;3101;3102;3103;3104;3105;3106;3107;3108;3109;
3110;3111;3112;3113;3114;3115;3116;3117;3118;3119;
3120;3121;3122;3123;3124;3125;3126;3127;3128;3129;
3130;3131;3132;3133;3134;3135;3136;3137;3138;3139;
3140;3141;3142;3143;3144;3145;3146;3147;3148;3149;
3150;3151;3152;3153;3154;3155;3156;3157;3158;3159;
3160;3161;3162;3163;3164;3165;3166;3167;3168;3169;
3170;3171;3172;3173;3174;3175;3176;3177;3178;3179;
3180;3181;3182;3183;3184;3185;3186;3187;3188;3189;
3190;3191;3192;3193;3194;3195;3196;3197;3198;3199;
3200;3201;3202;3203;3204;3205;3206;3207;3208;3209;
3210;3211;3212;3213;3214;3215;3216;3217;3218;3219;
3220;3221;3222;3223;3224;3225;3226;3227;3228;3229;
3230;3231;3232;3233;3234;3235;3236;3237;3238;3239;
3240;3241;3242;3243;3244;3245;3246;3247;3248;3249;
3250;3251;3252;3253;3254;3255;3256;3257;3258;3259;
3260;3261;3262;3263;3264;3265;3266;3267;3268;3269;
3270;3271;3272;3273;3274;3275;3276;3277;3278;3279;
3280;3281;3282;3283;3284;3285;3286;3287;3288;3289;
3290;3291;3292;3293;3294;3295;3296;3297;3298;3299;
3300;3301;3302;3303;3304;3305;3306;3307;3308;3309;
3310;3311;3312;3313;3314;3315;3316;3317;3318;3319;
3320;3321;3322;3323;3324;3325;3326;3327;3328;3329;
3330;3331;3332;3333;3334;3335;3336;3337;3338;3339;
3340;3341;3342;3343;3344;3345;3346;3347;3348;3349;
3350;3351;3352;3353;3354;3355;3356;3357;3358;3359;
3360;3361;3362;3363;3364;3365;3366;3367;3368;3369;
3370;3371;3372;3373;3374;3375;3376;3377;3378;3379;
3380;3381;3382;3383;3384;3385;3386;3387;3388;3389;
3390;3391;3392;3393;3394;3395;3396;3397;3398;3399;
3400;3401;3402;3403;3404;3405;3406;3407;3408;3409;
3410;3411;3412;3413;3414;3415;3416;3417;3418;3419;
3420;3421;3422;3423;3424;3425;3426;3427;3428;3429;
3430;3431;3432;3433;3434;3435;3436;3437;3438;3439;
3440;3441;3442;3443;3444;3445;3446;3447;3448;3449;
3450;3451;3452;3453;3454;3455;3456;3457;3458;3459;
3460;3461;3462;3463;3464;3465;3466;3467;3468;3469;
3470;3471;3472;3473;3474;3475;3476;3477;3478;3479;
3480;3481;3482;3483;3484;3485;3486;3487;3488;3489;
3490;3491;3492;3493;3494;3495;3496;3497;3498;3499;
3500;3501;3502;3503;3504;3505;3506;3507;3508;3509;
3510;3511;3512;3513;3514;3515;3516;3517;3518;3519;
3520;3521;3522;3523;3524;3525;3526;3527;3528;3529;
3530;3531;3532;3533;3534;3535;3536;3537;3538;3539;
3540;3541;3542;3543;3544;3545;3546;3547;3548;3549;
3550;3551;3552;3553;3554;3555;3556;3557;3558;3559;
3560;3561;3562;3563;3564;3565;3566;3567;3568;3569;
3570;3571;3572;3573;3574;3575;3576;3577;3578;3579;
3580;3581;3582;3583;3584;3585;3586;3587;3588;3589;
3590;3591;3592;3593;3594;3595;3596;3597;3598;3599;
3600;3601;3602;3603;3604;3605;3606;3607;3608;3609;
3610;3611;3612;3613;3614;3615;3616;3617;3618;3619;
3620;3621;3622;3623;3624;3625;3626;3627;3628;3629;
3630;3631;3632;3633;3634;3635;3636;3637;3638;3639;
3640;3641;3642;3643;3644;3645;3646;3647;3648;3649;
3650;3651;3652;3653;3654;3655;3656;3657;3658;3659;
3660;3661;3662;3663;3664;3665;3666;3667;3668;3669;
3670;3671;3672;3673;3674;3675;3676;3677;3678;3679;
3680;3681;3682;3683;3684;3685;3686;3687;3688;3689;
3690;3691;3692;3693;3694;3695;3696;3697;3698;3699;
3700;3701;3702;3703;3704;3705;3706;3707;3708;3709;
3710;3711;3712;3713;3714;3715;3716;3717;3718;3719;
3720;3721;3722;3723;3724;3725;3726;3727;3728;3729;
3730;3731;3732;3733;3734;3735;3736;3737;3738;3739;
3740;3741;3742;3743;3744;3745;3746;3747;3748;3749;
3750;3751;3752;3753;3754;3755;3756;3757;3758;3759;
3760;3761;3762;3763;3764;3765;3766;3767;3768;3769;
3770;3771;3772;3773;3774;3775;3776;3777;3778;3779;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
     DataSortEl @[0] {
      col_name="category";
      name="category_up_0";
      order=ASCENDING;
     };
     DataSortEl @[1] {
      col_name="individual_id";
      name="individual_id_up_1";
      order=ASCENDING;
     };
     DataSortEl @[2] {
      col_name="individual_id";
      name="individual_id_up_2";
      order=ASCENDING;
     };
     DataSortEl @[3] {
      col_name="individual_id";
      name="individual_id_up_3";
      order=ASCENDING;
     };
     DataSortEl @[4] {
      col_name="individual_id";
      name="individual_id_up_4";
      order=ASCENDING;
     };
     DataSortEl @[5] {
      col_name="individual_id";
      name="individual_id_up_5";
      order=ASCENDING;
     };
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[21] {
   name="TmpObjsList2";
   desc="ids of items selected for test set";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[2] {
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[3] {
     name="filename";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="oid_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [0]    };
   last_sort_spec {
    name="DataSortSpec_418";
    ops {
     name="DataOpList_944";
     el_typ=DataSortEl;
     el_def=0;
     DataSortEl @[0] {
      col_name="category";
      name="category_up_0";
      order=ASCENDING;
     };
     DataSortEl @[1] {
      col_name="individual_id";
      name="individual_id_up_1";
      order=ASCENDING;
     };
     DataSortEl @[2] {
      col_name="individual_id";
      name="individual_id_up_2";
      order=ASCENDING;
     };
     DataSortEl @[3] {
      col_name="individual_id";
      name="individual_id_up_3";
      order=ASCENDING;
     };
     DataSortEl @[4] {
      col_name="individual_id";
      name="individual_id_up_4";
      order=ASCENDING;
     };
     DataSortEl @[5] {
      col_name="individual_id";
      name="individual_id_up_5";
      order=ASCENDING;
     };
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[22] {
   name="TmpTrainList";
   desc="ids of items selected for test set";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [149] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[23] {
   name="TmpTrainList2";
   desc="ids of items selected for test set";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[2] {
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[3] {
     name="filename";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="oid_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [2980] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;942;943;944;945;946;947;948;949;
950;951;952;953;954;955;956;957;958;959;
960;961;962;963;964;965;966;967;968;969;
970;971;972;973;974;975;976;977;978;979;
980;981;982;983;984;985;986;987;988;989;
990;991;992;993;994;995;996;997;998;999;
1000;1001;1002;1003;1004;1005;1006;1007;1008;1009;
1010;1011;1012;1013;1014;1015;1016;1017;1018;1019;
1020;1021;1022;1023;1024;1025;1026;1027;1028;1029;
1030;1031;1032;1033;1034;1035;1036;1037;1038;1039;
1040;1041;1042;1043;1044;1045;1046;1047;1048;1049;
1050;1051;1052;1053;1054;1055;1056;1057;1058;1059;
1060;1061;1062;1063;1064;1065;1066;1067;1068;1069;
1070;1071;1072;1073;1074;1075;1076;1077;1078;1079;
1080;1081;1082;1083;1084;1085;1086;1087;1088;1089;
1090;1091;1092;1093;1094;1095;1096;1097;1098;1099;
1100;1101;1102;1103;1104;1105;1106;1107;1108;1109;
1110;1111;1112;1113;1114;1115;1116;1117;1118;1119;
1120;1121;1122;1123;1124;1125;1126;1127;1128;1129;
1130;1131;1132;1133;1134;1135;1136;1137;1138;1139;
1140;1141;1142;1143;1144;1145;1146;1147;1148;1149;
1150;1151;1152;1153;1154;1155;1156;1157;1158;1159;
1160;1161;1162;1163;1164;1165;1166;1167;1168;1169;
1170;1171;1172;1173;1174;1175;1176;1177;1178;1179;
1180;1181;1182;1183;1184;1185;1186;1187;1188;1189;
1190;1191;1192;1193;1194;1195;1196;1197;1198;1199;
1200;1201;1202;1203;1204;1205;1206;1207;1208;1209;
1210;1211;1212;1213;1214;1215;1216;1217;1218;1219;
1220;1221;1222;1223;1224;1225;1226;1227;1228;1229;
1230;1231;1232;1233;1234;1235;1236;1237;1238;1239;
1240;1241;1242;1243;1244;1245;1246;1247;1248;1249;
1250;1251;1252;1253;1254;1255;1256;1257;1258;1259;
1260;1261;1262;1263;1264;1265;1266;1267;1268;1269;
1270;1271;1272;1273;1274;1275;1276;1277;1278;1279;
1280;1281;1282;1283;1284;1285;1286;1287;1288;1289;
1290;1291;1292;1293;1294;1295;1296;1297;1298;1299;
1300;1301;1302;1303;1304;1305;1306;1307;1308;1309;
1310;1311;1312;1313;1314;1315;1316;1317;1318;1319;
1320;1321;1322;1323;1324;1325;1326;1327;1328;1329;
1330;1331;1332;1333;1334;1335;1336;1337;1338;1339;
1340;1341;1342;1343;1344;1345;1346;1347;1348;1349;
1350;1351;1352;1353;1354;1355;1356;1357;1358;1359;
1360;1361;1362;1363;1364;1365;1366;1367;1368;1369;
1370;1371;1372;1373;1374;1375;1376;1377;1378;1379;
1380;1381;1382;1383;1384;1385;1386;1387;1388;1389;
1390;1391;1392;1393;1394;1395;1396;1397;1398;1399;
1400;1401;1402;1403;1404;1405;1406;1407;1408;1409;
1410;1411;1412;1413;1414;1415;1416;1417;1418;1419;
1420;1421;1422;1423;1424;1425;1426;1427;1428;1429;
1430;1431;1432;1433;1434;1435;1436;1437;1438;1439;
1440;1441;1442;1443;1444;1445;1446;1447;1448;1449;
1450;1451;1452;1453;1454;1455;1456;1457;1458;1459;
1460;1461;1462;1463;1464;1465;1466;1467;1468;1469;
1470;1471;1472;1473;1474;1475;1476;1477;1478;1479;
1480;1481;1482;1483;1484;1485;1486;1487;1488;1489;
1490;1491;1492;1493;1494;1495;1496;1497;1498;1499;
1500;1501;1502;1503;1504;1505;1506;1507;1508;1509;
1510;1511;1512;1513;1514;1515;1516;1517;1518;1519;
1520;1521;1522;1523;1524;1525;1526;1527;1528;1529;
1530;1531;1532;1533;1534;1535;1536;1537;1538;1539;
1540;1541;1542;1543;1544;1545;1546;1547;1548;1549;
1550;1551;1552;1553;1554;1555;1556;1557;1558;1559;
1560;1561;1562;1563;1564;1565;1566;1567;1568;1569;
1570;1571;1572;1573;1574;1575;1576;1577;1578;1579;
1580;1581;1582;1583;1584;1585;1586;1587;1588;1589;
1590;1591;1592;1593;1594;1595;1596;1597;1598;1599;
1600;1601;1602;1603;1604;1605;1606;1607;1608;1609;
1610;1611;1612;1613;1614;1615;1616;1617;1618;1619;
1620;1621;1622;1623;1624;1625;1626;1627;1628;1629;
1630;1631;1632;1633;1634;1635;1636;1637;1638;1639;
1640;1641;1642;1643;1644;1645;1646;1647;1648;1649;
1650;1651;1652;1653;1654;1655;1656;1657;1658;1659;
1660;1661;1662;1663;1664;1665;1666;1667;1668;1669;
1670;1671;1672;1673;1674;1675;1676;1677;1678;1679;
1680;1681;1682;1683;1684;1685;1686;1687;1688;1689;
1690;1691;1692;1693;1694;1695;1696;1697;1698;1699;
1700;1701;1702;1703;1704;1705;1706;1707;1708;1709;
1710;1711;1712;1713;1714;1715;1716;1717;1718;1719;
1720;1721;1722;1723;1724;1725;1726;1727;1728;1729;
1730;1731;1732;1733;1734;1735;1736;1737;1738;1739;
1740;1741;1742;1743;1744;1745;1746;1747;1748;1749;
1750;1751;1752;1753;1754;1755;1756;1757;1758;1759;
1760;1761;1762;1763;1764;1765;1766;1767;1768;1769;
1770;1771;1772;1773;1774;1775;1776;1777;1778;1779;
1780;1781;1782;1783;1784;1785;1786;1787;1788;1789;
1790;1791;1792;1793;1794;1795;1796;1797;1798;1799;
1800;1801;1802;1803;1804;1805;1806;1807;1808;1809;
1810;1811;1812;1813;1814;1815;1816;1817;1818;1819;
1820;1821;1822;1823;1824;1825;1826;1827;1828;1829;
1830;1831;1832;1833;1834;1835;1836;1837;1838;1839;
1840;1841;1842;1843;1844;1845;1846;1847;1848;1849;
1850;1851;1852;1853;1854;1855;1856;1857;1858;1859;
1860;1861;1862;1863;1864;1865;1866;1867;1868;1869;
1870;1871;1872;1873;1874;1875;1876;1877;1878;1879;
1880;1881;1882;1883;1884;1885;1886;1887;1888;1889;
1890;1891;1892;1893;1894;1895;1896;1897;1898;1899;
1900;1901;1902;1903;1904;1905;1906;1907;1908;1909;
1910;1911;1912;1913;1914;1915;1916;1917;1918;1919;
1920;1921;1922;1923;1924;1925;1926;1927;1928;1929;
1930;1931;1932;1933;1934;1935;1936;1937;1938;1939;
1940;1941;1942;1943;1944;1945;1946;1947;1948;1949;
1950;1951;1952;1953;1954;1955;1956;1957;1958;1959;
1960;1961;1962;1963;1964;1965;1966;1967;1968;1969;
1970;1971;1972;1973;1974;1975;1976;1977;1978;1979;
1980;1981;1982;1983;1984;1985;1986;1987;1988;1989;
1990;1991;1992;1993;1994;1995;1996;1997;1998;1999;
2000;2001;2002;2003;2004;2005;2006;2007;2008;2009;
2010;2011;2012;2013;2014;2015;2016;2017;2018;2019;
2020;2021;2022;2023;2024;2025;2026;2027;2028;2029;
2030;2031;2032;2033;2034;2035;2036;2037;2038;2039;
2040;2041;2042;2043;2044;2045;2046;2047;2048;2049;
2050;2051;2052;2053;2054;2055;2056;2057;2058;2059;
2060;2061;2062;2063;2064;2065;2066;2067;2068;2069;
2070;2071;2072;2073;2074;2075;2076;2077;2078;2079;
2080;2081;2082;2083;2084;2085;2086;2087;2088;2089;
2090;2091;2092;2093;2094;2095;2096;2097;2098;2099;
2100;2101;2102;2103;2104;2105;2106;2107;2108;2109;
2110;2111;2112;2113;2114;2115;2116;2117;2118;2119;
2120;2121;2122;2123;2124;2125;2126;2127;2128;2129;
2130;2131;2132;2133;2134;2135;2136;2137;2138;2139;
2140;2141;2142;2143;2144;2145;2146;2147;2148;2149;
2150;2151;2152;2153;2154;2155;2156;2157;2158;2159;
2160;2161;2162;2163;2164;2165;2166;2167;2168;2169;
2170;2171;2172;2173;2174;2175;2176;2177;2178;2179;
2180;2181;2182;2183;2184;2185;2186;2187;2188;2189;
2190;2191;2192;2193;2194;2195;2196;2197;2198;2199;
2200;2201;2202;2203;2204;2205;2206;2207;2208;2209;
2210;2211;2212;2213;2214;2215;2216;2217;2218;2219;
2220;2221;2222;2223;2224;2225;2226;2227;2228;2229;
2230;2231;2232;2233;2234;2235;2236;2237;2238;2239;
2240;2241;2242;2243;2244;2245;2246;2247;2248;2249;
2250;2251;2252;2253;2254;2255;2256;2257;2258;2259;
2260;2261;2262;2263;2264;2265;2266;2267;2268;2269;
2270;2271;2272;2273;2274;2275;2276;2277;2278;2279;
2280;2281;2282;2283;2284;2285;2286;2287;2288;2289;
2290;2291;2292;2293;2294;2295;2296;2297;2298;2299;
2300;2301;2302;2303;2304;2305;2306;2307;2308;2309;
2310;2311;2312;2313;2314;2315;2316;2317;2318;2319;
2320;2321;2322;2323;2324;2325;2326;2327;2328;2329;
2330;2331;2332;2333;2334;2335;2336;2337;2338;2339;
2340;2341;2342;2343;2344;2345;2346;2347;2348;2349;
2350;2351;2352;2353;2354;2355;2356;2357;2358;2359;
2360;2361;2362;2363;2364;2365;2366;2367;2368;2369;
2370;2371;2372;2373;2374;2375;2376;2377;2378;2379;
2380;2381;2382;2383;2384;2385;2386;2387;2388;2389;
2390;2391;2392;2393;2394;2395;2396;2397;2398;2399;
2400;2401;2402;2403;2404;2405;2406;2407;2408;2409;
2410;2411;2412;2413;2414;2415;2416;2417;2418;2419;
2420;2421;2422;2423;2424;2425;2426;2427;2428;2429;
2430;2431;2432;2433;2434;2435;2436;2437;2438;2439;
2440;2441;2442;2443;2444;2445;2446;2447;2448;2449;
2450;2451;2452;2453;2454;2455;2456;2457;2458;2459;
2460;2461;2462;2463;2464;2465;2466;2467;2468;2469;
2470;2471;2472;2473;2474;2475;2476;2477;2478;2479;
2480;2481;2482;2483;2484;2485;2486;2487;2488;2489;
2490;2491;2492;2493;2494;2495;2496;2497;2498;2499;
2500;2501;2502;2503;2504;2505;2506;2507;2508;2509;
2510;2511;2512;2513;2514;2515;2516;2517;2518;2519;
2520;2521;2522;2523;2524;2525;2526;2527;2528;2529;
2530;2531;2532;2533;2534;2535;2536;2537;2538;2539;
2540;2541;2542;2543;2544;2545;2546;2547;2548;2549;
2550;2551;2552;2553;2554;2555;2556;2557;2558;2559;
2560;2561;2562;2563;2564;2565;2566;2567;2568;2569;
2570;2571;2572;2573;2574;2575;2576;2577;2578;2579;
2580;2581;2582;2583;2584;2585;2586;2587;2588;2589;
2590;2591;2592;2593;2594;2595;2596;2597;2598;2599;
2600;2601;2602;2603;2604;2605;2606;2607;2608;2609;
2610;2611;2612;2613;2614;2615;2616;2617;2618;2619;
2620;2621;2622;2623;2624;2625;2626;2627;2628;2629;
2630;2631;2632;2633;2634;2635;2636;2637;2638;2639;
2640;2641;2642;2643;2644;2645;2646;2647;2648;2649;
2650;2651;2652;2653;2654;2655;2656;2657;2658;2659;
2660;2661;2662;2663;2664;2665;2666;2667;2668;2669;
2670;2671;2672;2673;2674;2675;2676;2677;2678;2679;
2680;2681;2682;2683;2684;2685;2686;2687;2688;2689;
2690;2691;2692;2693;2694;2695;2696;2697;2698;2699;
2700;2701;2702;2703;2704;2705;2706;2707;2708;2709;
2710;2711;2712;2713;2714;2715;2716;2717;2718;2719;
2720;2721;2722;2723;2724;2725;2726;2727;2728;2729;
2730;2731;2732;2733;2734;2735;2736;2737;2738;2739;
2740;2741;2742;2743;2744;2745;2746;2747;2748;2749;
2750;2751;2752;2753;2754;2755;2756;2757;2758;2759;
2760;2761;2762;2763;2764;2765;2766;2767;2768;2769;
2770;2771;2772;2773;2774;2775;2776;2777;2778;2779;
2780;2781;2782;2783;2784;2785;2786;2787;2788;2789;
2790;2791;2792;2793;2794;2795;2796;2797;2798;2799;
2800;2801;2802;2803;2804;2805;2806;2807;2808;2809;
2810;2811;2812;2813;2814;2815;2816;2817;2818;2819;
2820;2821;2822;2823;2824;2825;2826;2827;2828;2829;
2830;2831;2832;2833;2834;2835;2836;2837;2838;2839;
2840;2841;2842;2843;2844;2845;2846;2847;2848;2849;
2850;2851;2852;2853;2854;2855;2856;2857;2858;2859;
2860;2861;2862;2863;2864;2865;2866;2867;2868;2869;
2870;2871;2872;2873;2874;2875;2876;2877;2878;2879;
2880;2881;2882;2883;2884;2885;2886;2887;2888;2889;
2890;2891;2892;2893;2894;2895;2896;2897;2898;2899;
2900;2901;2902;2903;2904;2905;2906;2907;2908;2909;
2910;2911;2912;2913;2914;2915;2916;2917;2918;2919;
2920;2921;2922;2923;2924;2925;2926;2927;2928;2929;
2930;2931;2932;2933;2934;2935;2936;2937;2938;2939;
2940;2941;2942;2943;2944;2945;2946;2947;2948;2949;
2950;2951;2952;2953;2954;2955;2956;2957;2958;2959;
2960;2961;2962;2963;2964;2965;2966;2967;2968;2969;
2970;2971;2972;2973;2974;2975;2976;2977;2978;2979;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[24] {
   name="TmpTestList";
   desc="ids of items selected for test set";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [40] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[25] {
   name="TmpTestList2";
   desc="ids of items selected for test set";
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="category";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[1] {
     name="individual";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[2] {
     name="ctrlflags";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    String_Data @[3] {
     name="filename";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="oid_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4976";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="category_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
    int_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_4977";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="individual_id";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [800] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataGroupSpec @[26] {
   name="CategGroupSpec";
   ops {
    name="ops";
    el_typ=DataGroupEl;
    el_def=0;
    DataGroupEl @[0] {
     col_name="category";
     name="category_GROUP_0";
     agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
    };
   };
   append_agg_name=0;
  };
  DataGroupSpec @[27] {
   name="CategGroupIdSpec";
   ops {
    name="ops";
    el_typ=DataGroupEl;
    el_def=0;
    DataGroupEl @[0] {
     col_name="category";
     name="category_GROUP_0";
     agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
    };
    DataGroupEl @[1] {
     col_name="category_id";
     name="category_id_LAST_1";
     agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
    };
   };
   append_agg_name=0;
  };
  DataGroupSpec @[28] {
   name="IndivGroupSpec";
   ops {
    name="ops";
    el_typ=DataGroupEl;
    el_def=0;
    DataGroupEl @[0] {
     col_name="category";
     name="category_GROUP_0";
     agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
    };
    DataGroupEl @[1] {
     col_name="individual";
     name="individual_GROUP_1";
     agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
    };
   };
   append_agg_name=0;
  };
  DataGroupSpec @[29] {
   name="IndivGroupIdSpec";
   ops {
    name="ops";
    el_typ=DataGroupEl;
    el_def=0;
    DataGroupEl @[0] {
     col_name="category";
     name="category_GROUP_0";
     agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
    };
    DataGroupEl @[1] {
     col_name="individual";
     name="individual_GROUP_1";
     agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
    };
    DataGroupEl @[2] {
     col_name="individual_id";
     name="individual_id_LAST_2";
     agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
    };
    DataGroupEl @[3] {
     col_name="category_id";
     name="category_id_LAST_3";
     agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
    };
   };
   append_agg_name=0;
  };
  DataSelectSpec @[30] {
   name="SelectTrainItems";
   ops {
    name="ops";
    el_typ=DataSelectEl;
    el_def=0;
    DataSelectEl @[0] {
     col_name="ctrlflags";
     name="ctrlflags_EQUAL_TRAIN_0";
     on=1;
     rel=EQUAL;
     use_var=0;
     cmp 9 0="TRAIN";
     var=NULL;
     enable_var=NULL;
    };
   };
   comb_op=AND;
  };
  DataSelectSpec @[31] {
   name="SelectTestItems";
   ops {
    name="ops";
    el_typ=DataSelectEl;
    el_def=0;
    DataSelectEl @[0] {
     col_name="ctrlflags";
     name="ctrlflags_EQUAL_TRAIN_0";
     on=1;
     rel=EQUAL;
     use_var=0;
     cmp 9 0="TRAIN";
     var=NULL;
     enable_var=NULL;
    };
   };
   comb_op=AND;
  };
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="get_train_item";
   var_type=T_Bool;
   bool_val=1;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc="what kind of item to get (true = train, false = test)";
   init_from=NULL;
  };
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="objlist_id";
   var_type=T_String;
   string_val="CU3D_20_easy_orig";
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
   reference=0;
   desc="id name of entry in ObjLists for which object list to use";
   init_from=.projects[0].programs.gp[4][0]$$<Program,StdGlobalsInit>;
  };
  ProgVar @[1] {
   name="obj_list_row";
   var_type=T_Int;
   flags=NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="row in ObjLists for objlist_id";
   init_from=NULL;
  };
  ProgVar @[2] {
   name="train_permuted";
   var_type=T_Bool;
   bool_val=1;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="permute order of train items?  set this and call InitCur*List(s) if changed";
   init_from=NULL;
  };
  ProgVar @[3] {
   name="test_permuted";
   var_type=T_Bool;
   bool_val=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="permute order of test items?  set this and call InitCur*List(s) if changed";
   init_from=NULL;
  };
  ProgVar @[4] {
   name="use_epoch_list";
   var_type=T_Bool;
   bool_val=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="if true, number of objects per epoch is constrained to objs_per_epc from ObjLists -- must call GetCurEpochList at start of epoch!";
   init_from=NULL;
  };
  ProgVar @[5] {
   name="objs_per_epc";
   var_type=T_Int;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="number of unique objects per epoch -- from ObjList data, see use_epoch_list";
   init_from=NULL;
  };
  ProgVar @[6] {
   name="next_train_idx";
   var_type=T_Int;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="next training index -- into TrainItemsCurList -- this is the item that will be returned by the *next* call -- current index is the ReadIndex of appropriate table";
   init_from=NULL;
  };
  ProgVar @[7] {
   name="next_test_idx";
   var_type=T_Int;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="next testing index -- into TestItemsCurList -- this is the item that will be returned by the *next* call -- current index is the ReadIndex of appropriate table";
   init_from=NULL;
  };
  ProgVar @[8] {
   name="next_epoch_idx";
   var_type=T_Int;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="next epoch index -- into CurrentEpochList -- this is the item that will be returned by the *next* call -- current index is the ReadIndex of appropriate table";
   init_from=NULL;
  };
  ProgVar @[9] {
   name="epoch_permuted";
   var_type=T_Bool;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="is epoch list permuted -- set from GetCurEpochList from train or test permuted";
   init_from=NULL;
  };
  ProgVar @[10] {
   name="cur_category";
   var_type=T_String;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="category name of the current object -- grab this from other projects using init_from setting pointing to this program";
   init_from=NULL;
  };
  ProgVar @[11] {
   name="cur_category_id";
   var_type=T_Int;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="category id of the current object -- grab this from other projects using init_from setting pointing to this program";
   init_from=NULL;
  };
  ProgVar @[12] {
   name="cur_individual";
   var_type=T_String;
   flags=CTRL_PANEL|CTRL_READ_ONLY|USED|EDIT_VAL;
   reference=0;
   desc="individual name of the current object -- grab this from other projects using init_from setting pointing to this program";
   init_from=NULL;
  };
  ProgVar @[13] {
   name="cur_individual_id";
   var_type=T_Int;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="individual id of the current object -- grab this from other projects using init_from setting pointing to this program";
   init_from=NULL;
  };
  ProgVar @[14] {
   name="cur_obj_filename";
   var_type=T_String;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="filename of the current object -- grab this from other projects using init_from setting pointing to this program";
   init_from=NULL;
  };
  ProgVar @[15] {
   name="cur_directory";
   var_type=T_String;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="current directory where files were loaded from";
   init_from=NULL;
  };
  ProgVar @[16] {
   name="cur_sound_file";
   var_type=T_String;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[17] {
   name="CurObject";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[18]$$;
   objs_ptr=1;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="this has one row containing the current object record";
   init_from=NULL;
  };
  ProgVar @[18] {
   name="ObjLists";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[0]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[19] {
   name="CurFullObjectList";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[4]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[20] {
   name="CategObjectList";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[5]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[21] {
   name="Category";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[6]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[22] {
   name="CurCategs";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[7]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[23] {
   name="Individual";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[8]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[24] {
   name="CurIndivs";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[9]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[25] {
   name="TrainItemsAll";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[13]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[26] {
   name="TestItemsAll";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[14]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[27] {
   name="ObjectMiscData";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[3]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[28] {
   name="SoundFilesRaw";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[10]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[29] {
   name="SoundFilesAll";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[11]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[30] {
   name="CategGroupSpec";
   var_type=T_Object;
   object_type=DataGroupSpec;
   object_val=.projects[0].programs.gp[3][0].objs[26]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[31] {
   name="CategGroupIdSpec";
   var_type=T_Object;
   object_type=DataGroupSpec;
   object_val=.projects[0].programs.gp[3][0].objs[27]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[32] {
   name="IndivGroupSpec";
   var_type=T_Object;
   object_type=DataGroupSpec;
   object_val=.projects[0].programs.gp[3][0].objs[28]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[33] {
   name="IndivGroupIdSpec";
   var_type=T_Object;
   object_type=DataGroupSpec;
   object_val=.projects[0].programs.gp[3][0].objs[29]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[34] {
   name="SoundFilesUse";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[12]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[35] {
   name="SelectTrainItems";
   var_type=T_Object;
   object_type=DataSelectSpec;
   object_val=.projects[0].programs.gp[3][0].objs[30]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[36] {
   name="SelectTestItems";
   var_type=T_Object;
   object_type=DataSelectSpec;
   object_val=.projects[0].programs.gp[3][0].objs[31]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[37] {
   name="TmpObjsList1";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[20]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[38] {
   name="TmpObjsList2";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[21]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[39] {
   name="TrainItemsCurList";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[15]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[40] {
   name="TestItemsCurList";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[16]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[41] {
   name="CurEpochList";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[17]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[42] {
   name="CurSoundFiles";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[19]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[43] {
   name="play_sound";
   var_type=T_Bool;
   bool_val=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
   reference=0;
   desc="play sound when loading";
   init_from=NULL;
  };
  ProgVar @[44] {
   name="ObjLists_3Dobjs";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[2]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[45] {
   name="ConfigTable";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[1]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[46] {
   name="TmpTrainList";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[22]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[47] {
   name="TmpTestList";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[24]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[48] {
   name="TmpTrainList2";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[23]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[49] {
   name="TmpTestList2";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][0].objs[25]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
  Function @[0] {
   desc="load OID file into file name and do IGNORE filtering";
   flags=CAN_REVERT_TO_CODE;
   code_string="LoadOIDFile(DataTable* oid_table, String fname) returns: int";
   pre_compile_code_string="LoadOIDFile(DataTable* oid_table, String fname) returns: int";
   name="LoadOIDFile";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="oid_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="fname";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_1013";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->StructUpdate(true)";
     pre_compile_code_string="oid_table->StructUpdate(true)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].functions[0].args[0]$$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    MethodCall @[2] {
     desc="Reset the raw data table prior to load";
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->RemoveAllCols()";
     pre_compile_code_string="oid_table->RemoveAllCols()";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[0].args[0]$;
     method=DataTable::RemoveAllCols;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void RemoveAllCols()";
     meth_desc=" remove all columns (and data)";
    };
    MethodCall @[3] {
     desc="Load the raw .OIA file";
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->LoadData(fname, DataTable::TAB, true, -1, false)";
     pre_compile_code_string="oid_table->LoadData(fname, DataTable::TAB, true, -1, false)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[0].args[0]$;
     method=DataTable::LoadData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="fname";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable::Delimiters;
       type="DataTable::Delimiters";
       name="delim";
       required=0;
       def_val="DataTable::TAB";
       prev_expr=;
       expr {
	expr="DataTable::TAB";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quote_str";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
      ProgArg @[3] {
       arg_type=int;
       type="int";
       name="max_recs";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr="-1";
       };
      };
      ProgArg @[4] {
       arg_type=bool;
       type="bool";
       name="reset_first";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void LoadData(taString& fname, DataTable::Delimiters delim = TAB, bool quote_str = true, int max_recs = -1, bool reset_first = true)";
     meth_desc=" load Emergent native format data (ONLY) - has a special header to define columns, up to max num of recs (-1 for all), with delimiter between columns and optionally quoting strings, reset_first = remove any existing data prior to loading -- this is much faster than LoadAnyData, especially noticible for very large data files";
    };
    Comment @[4] {
     desc="sort and make unique id";
     flags=CAN_REVERT_TO_CODE;
     code_string="// sort and make unique id";
     pre_compile_code_string="// sort and make unique id";
    };
    MethodCall @[5] {
     desc="get rid of IGNORE items right away";
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->Filter(\"ctrlflags\", Relation::NOT_CONTAINS, \"IGNORE\", , , , , , , )";
     pre_compile_code_string="oid_table->Filter(\"ctrlflags\", Relation::NOT_CONTAINS, \"IGNORE\", , , , , , , )";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[0].args[0]$;
     method=DataTable::Filter;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"ctrlflags\"";
       };
      };
      ProgArg @[1] {
       arg_type=Relation::Relations;
       type="Relation::Relations";
       name="operator_1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="Relation::NOT_CONTAINS";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="value_1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"IGNORE\"";
       };
      };
      ProgArg @[3] {
       arg_type=Relation::CombOp;
       type="Relation::CombOp";
       name="comb_op";
       required=0;
       def_val="Relation::AND";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[4] {
       arg_type=Variant;
       type="Variant";
       name="col2";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[5] {
       arg_type=Relation::Relations;
       type="Relation::Relations";
       name="operator_2";
       required=0;
       def_val="Relation::EQUAL";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[6] {
       arg_type=const_taString_ref;
       type="taString&";
       name="value_2";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[7] {
       arg_type=Variant;
       type="Variant";
       name="col3";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[8] {
       arg_type=Relation::Relations;
       type="Relation::Relations";
       name="operator_3";
       required=0;
       def_val="Relation::EQUAL";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[9] {
       arg_type=const_taString_ref;
       type="taString&";
       name="value_3";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="void Filter(Variant& col1, Relation::Relations operator_1, taString& value_1, Relation::CombOp comb_op = Relation::AND, Variant col2 = -1, Relation::Relations operator_2 = Relation::EQUAL, taString& value_2, Variant col3 = -1, Relation::Relations operator_3 = Relation::EQUAL, taString& value_3)";
     meth_desc=" Select table rows by specifying up to 3 conditions for which rows to retain in the table (hiding the ones that do not match). Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this Filter you would need to run Flatten first";
    };
    MethodCall @[6] {
     desc="sort in categ, indiv order";
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->SortColName(\"category\", true, \"individual\", true, , , , , , , , )";
     pre_compile_code_string="oid_table->SortColName(\"category\", true, \"individual\", true, , , , , , , , )";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[0].args[0]$;
     method=DataTable::SortColName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"category\"";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="ascending1";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col2";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"individual\"";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="ascending2";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
      ProgArg @[4] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col3";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[5] {
       arg_type=bool;
       type="bool";
       name="ascending3";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[6] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col4";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[7] {
       arg_type=bool;
       type="bool";
       name="ascending4";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[8] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col5";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[9] {
       arg_type=bool;
       type="bool";
       name="ascending5";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[10] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col6";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[11] {
       arg_type=bool;
       type="bool";
       name="ascending6";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="void SortColName(taString& col1, bool ascending1 = true, taString& col2, bool ascending2 = true, taString& col3, bool ascending3 = true, taString& col4, bool ascending4 = true, taString& col5, bool ascending5 = true, taString& col6, bool ascending6 = true)";
     meth_desc=" sort table according to selected columns of data. Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this sort you would need to run Flatten first";
    };
    MethodCall @[7] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->NewColInt(\"oid_id\")";
     pre_compile_code_string="oid_table->NewColInt(\"oid_id\")";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[0].args[0]$;
     method=DataTable::NewColInt;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"oid_id\"";
       };
      };
     };
     meth_sig="int_Data_ptr NewColInt(taString& col_nm)";
     meth_desc=" create new column of integer-level data (= narrow display, actually stored as float)";
    };
    MethodCall @[8] {
     desc="unique id for each row of this object image data table";
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->InitValsToRowNo(\"oid_id\")";
     pre_compile_code_string="oid_table->InitValsToRowNo(\"oid_id\")";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[0].args[0]$;
     method=DataTable::InitValsToRowNo;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"oid_id\"";
       };
      };
     };
     meth_sig="bool InitValsToRowNo(Variant& col)";
     meth_desc=" initialize all values in given column to be equal to the row number -- only valid for scalar (not matrix) columns -- column can be specified as either integer index or a string that is then used to find the given column name";
    };
    MethodCall @[9] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->StructUpdate(false)";
     pre_compile_code_string="oid_table->StructUpdate(false)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[0].args[0]$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
   };
  };
  Function @[1] {
   desc="get categories and individuals from oid table";
   flags=CAN_REVERT_TO_CODE;
   code_string="GetCategIndivs(DataTable* oid_table, DataTable* categ, DataTable* indiv) returns: int";
   pre_compile_code_string="GetCategIndivs(DataTable* oid_table, DataTable* categ, DataTable* indiv) returns: int";
   name="GetCategIndivs";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="oid_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="categ";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="indiv";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_2246";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (3 vars)";
     pre_compile_code_string="LocalVars (3 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="cat";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="cat_id";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="categ->StructUpdate(true)";
     pre_compile_code_string="categ->StructUpdate(true)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].functions[1].args[1]$$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    MethodCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="indiv->StructUpdate(true)";
     pre_compile_code_string="indiv->StructUpdate(true)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].functions[1].args[2]$$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    DataProcCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataProc::Group(categ, oid_table, CategGroupSpec)";
     pre_compile_code_string="taDataProc::Group(categ, oid_table, CategGroupSpec)";
     result_var=NULL;
     object_type=taDataProc;
     method=taDataProc::Group;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="categ";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_table";
       };
      };
      ProgArg @[2] {
       arg_type=DataGroupSpec_ptr;
       type="DataGroupSpec*";
       name="spec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="CategGroupSpec";
       };
      };
     };
    };
    MethodCall @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="categ->NewColInt(\"category_id\")";
     pre_compile_code_string="categ->NewColInt(\"category_id\")";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[1].args[1]$;
     method=DataTable::NewColInt;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"category_id\"";
       };
      };
     };
     meth_sig="int_Data_ptr NewColInt(taString& col_nm)";
     meth_desc=" create new column of integer-level data (= narrow display, actually stored as float)";
    };
    MethodCall @[5] {
     desc="unique id for each category";
     flags=CAN_REVERT_TO_CODE;
     code_string="categ->InitValsToRowNo(\"category_id\")";
     pre_compile_code_string="categ->InitValsToRowNo(\"category_id\")";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[1].args[1]$;
     method=DataTable::InitValsToRowNo;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"category_id\"";
       };
      };
     };
     meth_sig="bool InitValsToRowNo(Variant& col)";
     meth_desc=" initialize all values in given column to be equal to the row number -- only valid for scalar (not matrix) columns -- column can be specified as either integer index or a string that is then used to find the given column name";
    };
    UserScript @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="categ.data.category.BuildHashTable();";
     pre_compile_code_string="categ.data.category.BuildHashTable();";
     script {
      expr="categ.data.category.BuildHashTable();";
     };
    };
    Comment @[7] {
     desc="get individual";
     flags=CAN_REVERT_TO_CODE;
     code_string="// get individual";
     pre_compile_code_string="// get individual";
    };
    DataProcCall @[8] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataProc::Group(indiv, oid_table, IndivGroupSpec)";
     pre_compile_code_string="taDataProc::Group(indiv, oid_table, IndivGroupSpec)";
     result_var=NULL;
     object_type=taDataProc;
     method=taDataProc::Group;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="indiv";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_table";
       };
      };
      ProgArg @[2] {
       arg_type=DataGroupSpec_ptr;
       type="DataGroupSpec*";
       name="spec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="IndivGroupSpec";
       };
      };
     };
    };
    MethodCall @[9] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="indiv->NewColInt(\"individual_id\")";
     pre_compile_code_string="indiv->NewColInt(\"individual_id\")";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[1].args[2]$;
     method=DataTable::NewColInt;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"individual_id\"";
       };
      };
     };
     meth_sig="int_Data_ptr NewColInt(taString& col_nm)";
     meth_desc=" create new column of integer-level data (= narrow display, actually stored as float)";
    };
    MethodCall @[10] {
     desc="unique id for each individual";
     flags=CAN_REVERT_TO_CODE;
     code_string="indiv->InitValsToRowNo(\"individual_id\")";
     pre_compile_code_string="indiv->InitValsToRowNo(\"individual_id\")";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[1].args[2]$;
     method=DataTable::InitValsToRowNo;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"individual_id\"";
       };
      };
     };
     meth_sig="bool InitValsToRowNo(Variant& col)";
     meth_desc=" initialize all values in given column to be equal to the row number -- only valid for scalar (not matrix) columns -- column can be specified as either integer index or a string that is then used to find the given column name";
    };
    Comment @[11] {
     desc="individual gets category_id";
     flags=CAN_REVERT_TO_CODE;
     code_string="// individual gets category_id";
     pre_compile_code_string="// individual gets category_id";
    };
    MethodCall @[12] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="indiv->NewColInt(\"category_id\")";
     pre_compile_code_string="indiv->NewColInt(\"category_id\")";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[1].args[2]$;
     method=DataTable::NewColInt;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"category_id\"";
       };
      };
     };
     meth_sig="int_Data_ptr NewColInt(taString& col_nm)";
     meth_desc=" create new column of integer-level data (= narrow display, actually stored as float)";
    };
    ForLoop @[13] {
     desc="set category_id";
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<indiv.rows; i++)";
     pre_compile_code_string="for (i=0; i<indiv.rows; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cat = indiv[\"category\"][i]";
       pre_compile_code_string="cat = indiv[\"category\"][i]";
       result_var=.projects[0].programs.gp[3][0].functions[1].fun_code[0].local_vars[1]$$;
       expr {
	expr="indiv[\"category\"][i]";
       };
      };
      MethodCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cat_id = categ->FindVal(cat, \"category\", 0, true)";
       pre_compile_code_string="cat_id = categ->FindVal(cat, \"category\", 0, true)";
       result_var=.projects[0].programs.gp[3][0].functions[1].fun_code[0].local_vars[2]$$;
       obj=$.projects[0].programs.gp[3][0].functions[1].args[1]$;
       method=DataTable::FindVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="cat";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"category\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="not_found_err";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
       };
       meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
       meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
      };
      MatrixAssign @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="indiv[\"category_id\"][i] = cat_id";
       pre_compile_code_string="indiv[\"category_id\"][i] = cat_id";
       variable=$.projects[0].programs.gp[3][0].functions[1].args[2]$;
       data_table=1;
       col {
	expr="\"category_id\"";
       };
       dim0 {
	expr="i";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="cat_id";
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<indiv.rows";
     };
     iter {
      expr="i++";
     };
    };
    UserScript @[14] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="indiv.data.individual.BuildHashTable();";
     pre_compile_code_string="indiv.data.individual.BuildHashTable();";
     script {
      expr="indiv.data.individual.BuildHashTable();";
     };
    };
    MethodCall @[15] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="categ->StructUpdate(false)";
     pre_compile_code_string="categ->StructUpdate(false)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[1].args[1]$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    MethodCall @[16] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="indiv->StructUpdate(false)";
     pre_compile_code_string="indiv->StructUpdate(false)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[1].args[2]$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
   };
  };
  Function @[2] {
   desc="just get categories and individuals from table -- assume id's already in place";
   flags=CAN_REVERT_TO_CODE;
   code_string="GetCurCategIndivs(DataTable* oid_table, DataTable* categ, DataTable* indiv) returns: int";
   pre_compile_code_string="GetCurCategIndivs(DataTable* oid_table, DataTable* categ, DataTable* indiv) returns: int";
   name="GetCurCategIndivs";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="oid_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="categ";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="indiv";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_2246";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (3 vars)";
     pre_compile_code_string="LocalVars (3 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="cat";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="cat_id";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="categ->StructUpdate(true)";
     pre_compile_code_string="categ->StructUpdate(true)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[1].args[1]$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    MethodCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="indiv->StructUpdate(true)";
     pre_compile_code_string="indiv->StructUpdate(true)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[1].args[2]$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    DataProcCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataProc::Group(categ, oid_table, CategGroupIdSpec)";
     pre_compile_code_string="taDataProc::Group(categ, oid_table, CategGroupIdSpec)";
     result_var=NULL;
     object_type=taDataProc;
     method=taDataProc::Group;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="categ";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_table";
       };
      };
      ProgArg @[2] {
       arg_type=DataGroupSpec_ptr;
       type="DataGroupSpec*";
       name="spec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="CategGroupIdSpec";
       };
      };
     };
    };
    UserScript @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="categ.data.category.BuildHashTable();";
     pre_compile_code_string="categ.data.category.BuildHashTable();";
     script {
      expr="categ.data.category.BuildHashTable();";
     };
    };
    Comment @[5] {
     desc="get individual";
     flags=CAN_REVERT_TO_CODE;
     code_string="// get individual";
     pre_compile_code_string="// get individual";
    };
    DataProcCall @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataProc::Group(indiv, oid_table, IndivGroupIdSpec)";
     pre_compile_code_string="taDataProc::Group(indiv, oid_table, IndivGroupIdSpec)";
     result_var=NULL;
     object_type=taDataProc;
     method=taDataProc::Group;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="indiv";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_table";
       };
      };
      ProgArg @[2] {
       arg_type=DataGroupSpec_ptr;
       type="DataGroupSpec*";
       name="spec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="IndivGroupIdSpec";
       };
      };
     };
    };
    UserScript @[7] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="indiv.data.individual.BuildHashTable();";
     pre_compile_code_string="indiv.data.individual.BuildHashTable();";
     script {
      expr="indiv.data.individual.BuildHashTable();";
     };
    };
    MethodCall @[8] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="categ->StructUpdate(false)";
     pre_compile_code_string="categ->StructUpdate(false)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[1].args[1]$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    MethodCall @[9] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="indiv->StructUpdate(false)";
     pre_compile_code_string="indiv->StructUpdate(false)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[1].args[2]$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
   };
  };
  Function @[3] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="CategIndivIDsToOIDTable(DataTable* oid_table, DataTable* categ, DataTable* indiv) returns: int";
   pre_compile_code_string="CategIndivIDsToOIDTable(DataTable* oid_table, DataTable* categ, DataTable* indiv) returns: int";
   name="CategIndivIDsToOIDTable";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="oid_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="categ";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="indiv";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_1017";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (5 vars)";
     pre_compile_code_string="LocalVars (5 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="cat";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="ind";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="cat_id";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="ind_id";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->StructUpdate(true)";
     pre_compile_code_string="oid_table->StructUpdate(true)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].functions[3].args[0]$$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    MethodCall @[2] {
     desc="get rid of SKIP items now that basic info has been extracted";
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->FilterByScript(\"ctrlflags != \\\"SKIP\\\"\")";
     pre_compile_code_string="oid_table->FilterByScript(\"ctrlflags != \\\"SKIP\\\"\")";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[3].args[0]$;
     method=DataTable::FilterByScript;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="filter_expr";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"ctrlflags != \\\"SKIP\\\"\"";
       };
      };
     };
     meth_sig="bool FilterByScript(taString& filter_expr)";
     meth_desc=" Select table rows by supplying a logical expression -- if it evaluates to true the row remains visible. Refer to columns by name. Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this Filter you would need to run Flatten first";
    };
    MethodCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->NewColInt(\"category_id\")";
     pre_compile_code_string="oid_table->NewColInt(\"category_id\")";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[3].args[0]$;
     method=DataTable::NewColInt;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"category_id\"";
       };
      };
     };
     meth_sig="int_Data_ptr NewColInt(taString& col_nm)";
     meth_desc=" create new column of integer-level data (= narrow display, actually stored as float)";
    };
    MethodCall @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->NewColInt(\"individual_id\")";
     pre_compile_code_string="oid_table->NewColInt(\"individual_id\")";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[3].args[0]$;
     method=DataTable::NewColInt;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"individual_id\"";
       };
      };
     };
     meth_sig="int_Data_ptr NewColInt(taString& col_nm)";
     meth_desc=" create new column of integer-level data (= narrow display, actually stored as float)";
    };
    ForLoop @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<oid_table.rows; i++)";
     pre_compile_code_string="for (i=0; i<oid_table.rows; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cat = oid_table[\"category\"][i]";
       pre_compile_code_string="cat = oid_table[\"category\"][i]";
       result_var=.projects[0].programs.gp[3][0].functions[3].fun_code[0].local_vars[1]$$;
       expr {
	expr="oid_table[\"category\"][i]";
       };
      };
      MethodCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cat_id = categ->FindVal(cat, \"category\", 0, true)";
       pre_compile_code_string="cat_id = categ->FindVal(cat, \"category\", 0, true)";
       result_var=.projects[0].programs.gp[3][0].functions[3].fun_code[0].local_vars[3]$$;
       obj=.projects[0].programs.gp[3][0].functions[3].args[1]$$;
       method=DataTable::FindVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="cat";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"category\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="not_found_err";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
       };
       meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
       meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
      };
      MatrixAssign @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="oid_table[\"category_id\"][i] = cat_id";
       pre_compile_code_string="oid_table[\"category_id\"][i] = cat_id";
       variable=$.projects[0].programs.gp[3][0].functions[3].args[0]$;
       data_table=1;
       col {
	expr="\"category_id\"";
       };
       dim0 {
	expr="i";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="cat_id";
       };
      };
      AssignExpr @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ind = oid_table[\"individual\"][i]";
       pre_compile_code_string="ind = oid_table[\"individual\"][i]";
       result_var=.projects[0].programs.gp[3][0].functions[3].fun_code[0].local_vars[2]$$;
       expr {
	expr="oid_table[\"individual\"][i]";
       };
      };
      MethodCall @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ind_id = indiv->FindMultiVal(0, cat, \"category\", ind, \"individual\", , , , , , , , )";
       pre_compile_code_string="ind_id = indiv->FindMultiVal(0, cat, \"category\", ind, \"individual\", , , , , , , , )";
       result_var=.projects[0].programs.gp[3][0].functions[3].fun_code[0].local_vars[4]$$;
       obj=.projects[0].programs.gp[3][0].functions[3].args[2]$$;
       method=DataTable::FindMultiVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=1;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val1";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="cat";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col1";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"category\"";
	 };
	};
	ProgArg @[3] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val2";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="ind";
	 };
	};
	ProgArg @[4] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col2";
	 required=0;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"individual\"";
	 };
	};
	ProgArg @[5] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val3";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[6] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col3";
	 required=0;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[7] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val4";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[8] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col4";
	 required=0;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[9] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="vall5";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[10] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col5";
	 required=0;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[11] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val6";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[12] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col6";
	 required=0;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="int FindMultiVal(int st_row, Variant& val1, Variant& col1, Variant& val2 = 0, Variant& col2, Variant& val3 = 0, Variant& col3, Variant& val4 = 0, Variant& col4, Variant& vall5 = 0, Variant& col5, Variant& val6 = 0, Variant& col6)";
       meth_desc=" find row number for multiple values across different columns of scalar type, starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- columns can be specified as either integer index or a string that is then used to find the given column name";
      };
      MatrixAssign @[5] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="oid_table[\"individual_id\"][i] = ind_id";
       pre_compile_code_string="oid_table[\"individual_id\"][i] = ind_id";
       variable=$.projects[0].programs.gp[3][0].functions[3].args[0]$;
       data_table=1;
       col {
	expr="\"individual_id\"";
       };
       dim0 {
	expr="i";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="ind_id";
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<oid_table.rows";
     };
     iter {
      expr="i++";
     };
    };
    MethodCall @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->StructUpdate(false)";
     pre_compile_code_string="oid_table->StructUpdate(false)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[3].args[0]$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
   };
  };
  Function @[4] {
   desc="load a datatable file into CurFullObjectList";
   flags=CAN_REVERT_TO_CODE;
   code_string="LoadCurObjectList(String oid_filename, String oid_filename_categs) returns: int";
   pre_compile_code_string="LoadCurObjectList(String oid_filename, String oid_filename_categs) returns: int";
   name="LoadCurObjectList";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="oid_filename";
     var_type=T_String;
     string_val="images/CU3D_100_plus_models/CU3D_100_models.dat";
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="oid_filename_categs";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_1012";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    Comment @[1] {
     desc="ctrlflags tested for IGNORE = completely skip over for everything, and SKIP = record category and individual data but then exclude after that";
     flags=CAN_REVERT_TO_CODE;
     code_string="// ctrlflags tested for IGNORE = completely skip over for everything, and SKIP = record category and individual data but then exclude after that";
     pre_compile_code_string="// ctrlflags tested for IGNORE = completely skip over for everything, and SKIP = record category and individual data but then exclude after that";
    };
    PrintVar @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print  \"Importing Object ID (OID) file: \" oid_filename";
     pre_compile_code_string="Print  \"Importing Object ID (OID) file: \" oid_filename";
     message="Importing Object ID (OID) file: ";
     print_var=.projects[0].programs.gp[3][0].functions[4].args[0]$$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=1;
    };
    FunctionCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LoadOIDFile(CurFullObjectList, oid_filename)";
     pre_compile_code_string="LoadOIDFile(CurFullObjectList, oid_filename)";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][0].functions[0]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="oid_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="CurFullObjectList";
       };
      };
      ProgArg @[1] {
       arg_type=taString;
       type="String";
       name="fname";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_filename";
       };
      };
     };
    };
    If @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (oid_filename_categs.nonempty())";
     pre_compile_code_string="if (oid_filename_categs.nonempty())";
     cond {
      expr="oid_filename_categs.nonempty()";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LoadOIDFile(CategObjectList, oid_filename_categs)";
       pre_compile_code_string="LoadOIDFile(CategObjectList, oid_filename_categs)";
       result_var=NULL;
       fun=$.projects[0].programs.gp[3][0].functions[0]$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="oid_table";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="CategObjectList";
	 };
	};
	ProgArg @[1] {
	 arg_type=taString;
	 type="String";
	 name="fname";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="oid_filename_categs";
	 };
	};
       };
      };
      FunctionCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="GetCategIndivs(CategObjectList, Category, Individual)";
       pre_compile_code_string="GetCategIndivs(CategObjectList, Category, Individual)";
       result_var=NULL;
       fun=.projects[0].programs.gp[3][0].functions[1]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="oid_table";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="CategObjectList";
	 };
	};
	ProgArg @[1] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="categ";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Category";
	 };
	};
	ProgArg @[2] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="indiv";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Individual";
	 };
	};
       };
      };
     };
    };
    Else @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     pre_compile_code_string="else";
     else_code {
      name="else_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="GetCategIndivs(CurFullObjectList, Category, Individual)";
       pre_compile_code_string="GetCategIndivs(CurFullObjectList, Category, Individual)";
       result_var=NULL;
       fun=$.projects[0].programs.gp[3][0].functions[1]$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="oid_table";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="CurFullObjectList";
	 };
	};
	ProgArg @[1] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="categ";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Category";
	 };
	};
	ProgArg @[2] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="indiv";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Individual";
	 };
	};
       };
      };
     };
    };
    FunctionCall @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CategIndivIDsToOIDTable(CurFullObjectList, Category, Individual)";
     pre_compile_code_string="CategIndivIDsToOIDTable(CurFullObjectList, Category, Individual)";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][0].functions[3]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="oid_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="CurFullObjectList";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="categ";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="Category";
       };
      };
      ProgArg @[2] {
       arg_type=DataTable;
       type="DataTable*";
       name="indiv";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="Individual";
       };
      };
     };
    };
    FunctionCall @[7] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="GetCurCategIndivs(CurFullObjectList, CurCategs, CurIndivs)";
     pre_compile_code_string="GetCurCategIndivs(CurFullObjectList, CurCategs, CurIndivs)";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][0].functions[2]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="oid_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="CurFullObjectList";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="categ";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="CurCategs";
       };
      };
      ProgArg @[2] {
       arg_type=DataTable;
       type="DataTable*";
       name="indiv";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="CurIndivs";
       };
      };
     };
    };
   };
  };
  Function @[5] {
   desc="process raw files into a table with appropriate category names that match those in Category table";
   flags=CAN_REVERT_TO_CODE;
   code_string="FilesListToCategFiles(DataTable* categ_file_tab, DataTable* file_tab, String file_col_nm) returns: int";
   pre_compile_code_string="FilesListToCategFiles(DataTable* categ_file_tab, DataTable* file_tab, String file_col_nm) returns: int";
   name="FilesListToCategFiles";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="categ_file_tab";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="file_tab";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="file_col_nm";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (6 vars)";
     pre_compile_code_string="LocalVars (6 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="rows";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="fnm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="nm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="categ";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="obj_idx";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    AssignExpr @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="rows = file_tab->rows";
     pre_compile_code_string="rows = file_tab->rows";
     result_var=.projects[0].programs.gp[3][0].functions[5].fun_code[0].local_vars[0]$$;
     expr {
      expr="file_tab->rows";
     };
    };
    MethodCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="categ_file_tab->StructUpdate(true)";
     pre_compile_code_string="categ_file_tab->StructUpdate(true)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].functions[5].args[0]$$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    MethodCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="categ_file_tab->ResetData()";
     pre_compile_code_string="categ_file_tab->ResetData()";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[5].args[0]$;
     method=DataTable::ResetData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void ResetData()";
     meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
    };
    MethodCall @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="categ_file_tab->FindMakeCol(\"category\", taBase::VT_STRING)";
     pre_compile_code_string="categ_file_tab->FindMakeCol(\"category\", taBase::VT_STRING)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[5].args[0]$;
     method=DataTable::FindMakeCol;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"category\"";
       };
      };
      ProgArg @[1] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="val_type";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="taBase::VT_STRING";
       };
      };
     };
     meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
     meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
    };
    MethodCall @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="categ_file_tab->FindMakeCol(file_col_nm, taBase::VT_STRING)";
     pre_compile_code_string="categ_file_tab->FindMakeCol(file_col_nm, taBase::VT_STRING)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[5].args[0]$;
     method=DataTable::FindMakeCol;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="file_col_nm";
       };
      };
      ProgArg @[1] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="val_type";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="taBase::VT_STRING";
       };
      };
     };
     meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
     meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
    };
    ForLoop @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<rows; i++)";
     pre_compile_code_string="for (i=0; i<rows; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="fnm = file_tab[1][i]";
       pre_compile_code_string="fnm = file_tab[1][i]";
       result_var=.projects[0].programs.gp[3][0].functions[5].fun_code[0].local_vars[2]$$;
       expr {
	expr="file_tab[1][i]";
       };
      };
      MethodCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="nm = fnm->after(\"/\", -1)";
       pre_compile_code_string="nm = fnm->after(\"/\", -1)";
       result_var=.projects[0].programs.gp[3][0].functions[5].fun_code[0].local_vars[3]$$;
       obj=$.projects[0].programs.gp[3][0].functions[5].fun_code[0].local_vars[2]$;
       method=taString::after;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="x";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"/\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="startpos";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="-1";
	 };
	};
       };
       meth_sig="taString after(taString& x, int startpos = 0)";
       meth_desc=" get substring after (not including) target string. startpos = starting position (- = search from end forward)";
      };
      MethodCall @[2] {
       desc="note: special code here depends on filenames!";
       flags=CAN_REVERT_TO_CODE;
       code_string="nm = nm->before(\"_\", -1)";
       pre_compile_code_string="nm = nm->before(\"_\", -1)";
       result_var=$.projects[0].programs.gp[3][0].functions[5].fun_code[0].local_vars[3]$;
       obj=$.projects[0].programs.gp[3][0].functions[5].fun_code[0].local_vars[3]$;
       method=taString::before;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="x";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"_\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="startpos";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="-1";
	 };
	};
       };
       meth_sig="taString before(taString& x, int startpos = 0)";
       meth_desc=" get substring before (not including) target string. startpos = starting position (- = search from end forward)";
      };
      AssignExpr @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="categ = nm";
       pre_compile_code_string="categ = nm";
       result_var=.projects[0].programs.gp[3][0].functions[5].fun_code[0].local_vars[4]$$;
       expr {
	expr="nm";
       };
      };
      MethodCall @[4] {
       desc="objrec categ names don't have _";
       flags=CAN_REVERT_TO_CODE;
       code_string="categ->gsub(\"_\", \"\")";
       pre_compile_code_string="categ->gsub(\"_\", \"\")";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][0].functions[5].fun_code[0].local_vars[4]$;
       method=taString::gsub;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="pat";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"_\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="repl";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"\"";
	 };
	};
       };
       meth_sig="int gsub(taString& pat, taString& repl)";
       meth_desc=" global substitution: substitute all occurrences of pat with repl";
      };
      MethodCall @[5] {
       desc="objrec categ names don't have _";
       flags=CAN_REVERT_TO_CODE;
       code_string="categ->gsub(\"-\", \"\")";
       pre_compile_code_string="categ->gsub(\"-\", \"\")";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][0].functions[5].fun_code[0].local_vars[4]$;
       method=taString::gsub;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="pat";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"-\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="repl";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"\"";
	 };
	};
       };
       meth_sig="int gsub(taString& pat, taString& repl)";
       meth_desc=" global substitution: substitute all occurrences of pat with repl";
      };
      MethodCall @[6] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="categ_file_tab->AddBlankRow()";
       pre_compile_code_string="categ_file_tab->AddBlankRow()";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][0].functions[5].args[0]$;
       method=DataTable::AddBlankRow;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="int AddBlankRow()";
       meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
      };
      MatrixAssign @[7] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="categ_file_tab[\"category\"][-1] = categ";
       pre_compile_code_string="categ_file_tab[\"category\"][-1] = categ";
       variable=$.projects[0].programs.gp[3][0].functions[5].args[0]$;
       data_table=1;
       col {
	expr="\"category\"";
       };
       dim0 {
	expr="-1";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="categ";
       };
      };
      MatrixAssign @[8] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="categ_file_tab[file_col_nm][-1] = fnm";
       pre_compile_code_string="categ_file_tab[file_col_nm][-1] = fnm";
       variable=$.projects[0].programs.gp[3][0].functions[5].args[0]$;
       data_table=1;
       col {
	expr="file_col_nm";
       };
       dim0 {
	expr="-1";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="fnm";
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<rows";
     };
     iter {
      expr="i++";
     };
    };
    MethodCall @[7] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="categ_file_tab->StructUpdate(false)";
     pre_compile_code_string="categ_file_tab->StructUpdate(false)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[5].args[0]$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
   };
  };
  Function @[6] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="AddCategFilesToOID(DataTable* oid_table, DataTable* categ_file_tab, String file_col_nm) returns: int";
   pre_compile_code_string="AddCategFilesToOID(DataTable* oid_table, DataTable* categ_file_tab, String file_col_nm) returns: int";
   name="AddCategFilesToOID";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="oid_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="categ_file_tab";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="file_col_nm";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (6 vars)";
     pre_compile_code_string="LocalVars (6 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="rows";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="fnm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="nm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="categ";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="fnm_idx";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    AssignExpr @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="rows = oid_table->rows";
     pre_compile_code_string="rows = oid_table->rows";
     result_var=.projects[0].programs.gp[3][0].functions[6].fun_code[0].local_vars[0]$$;
     expr {
      expr="oid_table->rows";
     };
    };
    MethodCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_table->FindMakeCol(file_col_nm, taBase::VT_STRING)";
     pre_compile_code_string="oid_table->FindMakeCol(file_col_nm, taBase::VT_STRING)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].functions[6].args[0]$$;
     method=DataTable::FindMakeCol;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="file_col_nm";
       };
      };
      ProgArg @[1] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="val_type";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="taBase::VT_STRING";
       };
      };
     };
     meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
     meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
    };
    ForLoop @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<rows; i++)";
     pre_compile_code_string="for (i=0; i<rows; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="categ = oid_table[\"category\"][i]";
       pre_compile_code_string="categ = oid_table[\"category\"][i]";
       result_var=.projects[0].programs.gp[3][0].functions[6].fun_code[0].local_vars[4]$$;
       expr {
	expr="oid_table[\"category\"][i]";
       };
      };
      MethodCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="fnm_idx = categ_file_tab->FindVal(categ, \"category\", 0, true)";
       pre_compile_code_string="fnm_idx = categ_file_tab->FindVal(categ, \"category\", 0, true)";
       result_var=.projects[0].programs.gp[3][0].functions[6].fun_code[0].local_vars[5]$$;
       obj=.projects[0].programs.gp[3][0].functions[6].args[1]$$;
       method=DataTable::FindVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="categ";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"category\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="not_found_err";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
       };
       meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
       meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
      };
      AssignExpr @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="fnm = categ_file_tab[file_col_nm][fnm_idx]";
       pre_compile_code_string="fnm = categ_file_tab[file_col_nm][fnm_idx]";
       result_var=.projects[0].programs.gp[3][0].functions[6].fun_code[0].local_vars[2]$$;
       expr {
	expr="categ_file_tab[file_col_nm][fnm_idx]";
       };
      };
      MatrixAssign @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="oid_table[file_col_nm][i] = fnm";
       pre_compile_code_string="oid_table[file_col_nm][i] = fnm";
       variable=$.projects[0].programs.gp[3][0].functions[6].args[0]$;
       data_table=1;
       col {
	expr="file_col_nm";
       };
       dim0 {
	expr="i";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="fnm";
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<rows";
     };
     iter {
      expr="i++";
     };
    };
   };
  };
  Function @[7] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="FilterFilesList(DataTable* categ_file_tab, DataTable* filtered_file_tab, String file_col_nm, String include_filter, String exclude_filter) returns: int";
   pre_compile_code_string="FilterFilesList(DataTable* categ_file_tab, DataTable* filtered_file_tab, String file_col_nm, String include_filter, String exclude_filter) returns: int";
   name="FilterFilesList";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="categ_file_tab";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="filtered_file_tab";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="file_col_nm";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="include_filter";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="exclude_filter";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_1024";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="filtered_file_tab->CopyFrom(categ_file_tab)";
     pre_compile_code_string="filtered_file_tab->CopyFrom(categ_file_tab)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].functions[7].args[1]$$;
     method=taBase::CopyFrom;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase_ptr;
       type="taBase*";
       name="cpy_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="categ_file_tab";
       };
      };
     };
     meth_sig="bool CopyFrom(taBase* cpy_from)";
     meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
    };
    If @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (include_filter.nonempty())";
     pre_compile_code_string="if (include_filter.nonempty())";
     cond {
      expr="include_filter.nonempty()";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="filtered_file_tab->FilterContainsList(file_col_nm, include_filter, true, \" \")";
       pre_compile_code_string="filtered_file_tab->FilterContainsList(file_col_nm, include_filter, true, \" \")";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][0].functions[7].args[1]$;
       method=DataTable::FilterContainsList;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="file_col_nm";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="contains_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="include_filter";
	 };
	};
	ProgArg @[2] {
	 arg_type=bool;
	 type="bool";
	 name="include_matches";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
	ProgArg @[3] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="delim";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="\" \"";
	 };
	};
       };
       meth_sig="void FilterContainsList(Variant& col, taString& contains_list, bool include_matches = true, taString& delim)";
       meth_desc=" Select table rows based on whether given column value contains any of the items on contains_list (space or other delim separated list of strings) -- if include_matches then those with any of the matching items on the list are included, otherwise they are excluded. Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this Filter you would need to run Flatten first";
      };
     };
    };
    If @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (exclude_filter.nonempty())";
     pre_compile_code_string="if (exclude_filter.nonempty())";
     cond {
      expr="exclude_filter.nonempty()";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="filtered_file_tab->FilterContainsList(file_col_nm, exclude_filter, false, \" \")";
       pre_compile_code_string="filtered_file_tab->FilterContainsList(file_col_nm, exclude_filter, false, \" \")";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][0].functions[7].args[1]$;
       method=DataTable::FilterContainsList;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="file_col_nm";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="contains_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="exclude_filter";
	 };
	};
	ProgArg @[2] {
	 arg_type=bool;
	 type="bool";
	 name="include_matches";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
	ProgArg @[3] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="delim";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="\" \"";
	 };
	};
       };
       meth_sig="void FilterContainsList(Variant& col, taString& contains_list, bool include_matches = true, taString& delim)";
       meth_desc=" Select table rows based on whether given column value contains any of the items on contains_list (space or other delim separated list of strings) -- if include_matches then those with any of the matching items on the list are included, otherwise they are excluded. Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this Filter you would need to run Flatten first";
      };
     };
    };
   };
  };
  Function @[8] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="GetFileList(DataTable* file_table, String path, String filter, bool recursive) returns: int";
   pre_compile_code_string="GetFileList(DataTable* file_table, String path, String filter, bool recursive) returns: int";
   name="GetFileList";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="file_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="path";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="filter";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="recursive";
     var_type=T_Bool;
     bool_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_1016";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    DataGenCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataGen::GetDirFiles(file_table, path, filter, recursive, , , )";
     pre_compile_code_string="taDataGen::GetDirFiles(file_table, path, filter, recursive, , , )";
     result_var=NULL;
     object_type=taDataGen;
     method=taDataGen::GetDirFiles;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="file_table";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="dir_path";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="path";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="filter";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="filter";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="recursive";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="recursive";
       };
      };
      ProgArg @[4] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname_col_nm";
       required=0;
       def_val="FileName";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[5] {
       arg_type=const_taString_ref;
       type="taString&";
       name="path_col_nm";
       required=0;
       def_val="FilePath";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[6] {
       arg_type=bool;
       type="bool";
       name="reset_first";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
    };
   };
  };
  Function @[9] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="AddNameSoundFiles(DataTable* oid_table, DataTable* snd_raw_table, DataTable* snd_cat_table, DataTable* snd_cat_table_use, String snd_path, String snd_include_filt, String snd_exclude_filt) returns: int";
   pre_compile_code_string="AddNameSoundFiles(DataTable* oid_table, DataTable* snd_raw_table, DataTable* snd_cat_table, DataTable* snd_cat_table_use, String snd_path, String snd_include_filt, String snd_exclude_filt) returns: int";
   name="AddNameSoundFiles";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="oid_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="snd_raw_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="snd_cat_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="snd_cat_table_use";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="snd_path";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="snd_include_filt";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[6] {
     name="snd_exclude_filt";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_1021";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (1 vars)";
     pre_compile_code_string="LocalVars (1 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="file_col_nm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    AssignExpr @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="file_col_nm = \"sound_file\"";
     pre_compile_code_string="file_col_nm = \"sound_file\"";
     result_var=.projects[0].programs.gp[3][0].functions[9].fun_code[0].local_vars[0]$$;
     expr {
      expr="\"sound_file\"";
     };
    };
    FunctionCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="GetFileList(snd_raw_table, snd_path, \".wav\", false)";
     pre_compile_code_string="GetFileList(snd_raw_table, snd_path, \".wav\", false)";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][0].functions[8]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="file_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="snd_raw_table";
       };
      };
      ProgArg @[1] {
       arg_type=taString;
       type="String";
       name="path";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="snd_path";
       };
      };
      ProgArg @[2] {
       arg_type=taString;
       type="String";
       name="filter";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".wav\"";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="recursive";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
    };
    FunctionCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="FilesListToCategFiles(snd_cat_table, snd_raw_table, file_col_nm)";
     pre_compile_code_string="FilesListToCategFiles(snd_cat_table, snd_raw_table, file_col_nm)";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][0].functions[5]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="categ_file_tab";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="snd_cat_table";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="file_tab";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="snd_raw_table";
       };
      };
      ProgArg @[2] {
       arg_type=taString;
       type="String";
       name="file_col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="file_col_nm";
       };
      };
     };
    };
    FunctionCall @[4] {
     desc="not actually very useful -- multiple sound files per obj";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="AddCategFilesToOID(oid_table, snd_cat_table, file_col_nm)";
     pre_compile_code_string="AddCategFilesToOID(oid_table, snd_cat_table, file_col_nm)";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][0].functions[6]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="oid_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_table";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="categ_file_tab";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="snd_cat_table";
       };
      };
      ProgArg @[2] {
       arg_type=taString;
       type="String";
       name="file_col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="file_col_nm";
       };
      };
     };
    };
    If @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (snd_include_filt.nonempty() || snd_exclude_filt.nonempty())";
     pre_compile_code_string="if (snd_include_filt.nonempty() || snd_exclude_filt.nonempty())";
     cond {
      expr="snd_include_filt.nonempty() || snd_exclude_filt.nonempty()";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="FilterFilesList(snd_cat_table, snd_cat_table_use, file_col_nm, snd_include_filt, snd_exclude_filt)";
       pre_compile_code_string="FilterFilesList(snd_cat_table, snd_cat_table_use, file_col_nm, snd_include_filt, snd_exclude_filt)";
       result_var=NULL;
       fun=.projects[0].programs.gp[3][0].functions[7]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="categ_file_tab";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="snd_cat_table";
	 };
	};
	ProgArg @[1] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="filtered_file_tab";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="snd_cat_table_use";
	 };
	};
	ProgArg @[2] {
	 arg_type=taString;
	 type="String";
	 name="file_col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="file_col_nm";
	 };
	};
	ProgArg @[3] {
	 arg_type=taString;
	 type="String";
	 name="include_filter";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="snd_include_filt";
	 };
	};
	ProgArg @[4] {
	 arg_type=taString;
	 type="String";
	 name="exclude_filter";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="snd_exclude_filt";
	 };
	};
       };
      };
     };
    };
    Else @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     pre_compile_code_string="else";
     else_code {
      name="else_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="snd_cat_table_use->CopyFrom(snd_cat_table)";
       pre_compile_code_string="snd_cat_table_use->CopyFrom(snd_cat_table)";
       result_var=NULL;
       obj=.projects[0].programs.gp[3][0].functions[9].args[3]$$;
       method=taBase::CopyFrom;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taBase_ptr;
	 type="taBase*";
	 name="cpy_from";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="snd_cat_table";
	 };
	};
       };
       meth_sig="bool CopyFrom(taBase* cpy_from)";
       meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
      };
     };
    };
   };
  };
  Function @[10] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="SplitOIDTrainTest(DataTable* oid_table, DataTable* train_list, DataTable* test_list, int n_train_per_categ, int n_test_per_categ) returns: int";
   pre_compile_code_string="SplitOIDTrainTest(DataTable* oid_table, DataTable* train_list, DataTable* test_list, int n_train_per_categ, int n_test_per_categ) returns: int";
   name="SplitOIDTrainTest";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="oid_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="train_list";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="test_list";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="n_train_per_categ";
     var_type=T_Int;
     int_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="n_test_per_categ";
     var_type=T_Int;
     int_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_1032";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="TmpObjsList1->CopyFrom(oid_table)";
     pre_compile_code_string="TmpObjsList1->CopyFrom(oid_table)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].vars[37]$$;
     method=taBase::CopyFrom;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase_ptr;
       type="taBase*";
       name="cpy_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_table";
       };
      };
     };
     meth_sig="bool CopyFrom(taBase* cpy_from)";
     meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
    };
    MethodCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="TmpObjsList1->Filter(\"ctrlflags\", Relation::NOT_CONTAINS, \"TRAIN\", Relation::AND, \"ctrlflags\", Relation::NOT_CONTAINS, \"TEST\", , , )";
     pre_compile_code_string="TmpObjsList1->Filter(\"ctrlflags\", Relation::NOT_CONTAINS, \"TRAIN\", Relation::AND, \"ctrlflags\", Relation::NOT_CONTAINS, \"TEST\", , , )";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[37]$;
     method=DataTable::Filter;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"ctrlflags\"";
       };
      };
      ProgArg @[1] {
       arg_type=Relation::Relations;
       type="Relation::Relations";
       name="operator_1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="Relation::NOT_CONTAINS";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="value_1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"TRAIN\"";
       };
      };
      ProgArg @[3] {
       arg_type=Relation::CombOp;
       type="Relation::CombOp";
       name="comb_op";
       required=0;
       def_val="Relation::AND";
       prev_expr=;
       expr {
	expr="Relation::AND";
       };
      };
      ProgArg @[4] {
       arg_type=Variant;
       type="Variant";
       name="col2";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr="\"ctrlflags\"";
       };
      };
      ProgArg @[5] {
       arg_type=Relation::Relations;
       type="Relation::Relations";
       name="operator_2";
       required=0;
       def_val="Relation::EQUAL";
       prev_expr=;
       expr {
	expr="Relation::NOT_CONTAINS";
       };
      };
      ProgArg @[6] {
       arg_type=const_taString_ref;
       type="taString&";
       name="value_2";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"TEST\"";
       };
      };
      ProgArg @[7] {
       arg_type=Variant;
       type="Variant";
       name="col3";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[8] {
       arg_type=Relation::Relations;
       type="Relation::Relations";
       name="operator_3";
       required=0;
       def_val="Relation::EQUAL";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[9] {
       arg_type=const_taString_ref;
       type="taString&";
       name="value_3";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="void Filter(Variant& col1, Relation::Relations operator_1, taString& value_1, Relation::CombOp comb_op = Relation::AND, Variant col2 = -1, Relation::Relations operator_2 = Relation::EQUAL, taString& value_2, Variant col3 = -1, Relation::Relations operator_3 = Relation::EQUAL, taString& value_3)";
     meth_desc=" Select table rows by specifying up to 3 conditions for which rows to retain in the table (hiding the ones that do not match). Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this Filter you would need to run Flatten first";
    };
    DataProcCall @[3] {
     desc="anything marked TRAIN goes straight in";
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataProc::SplitRowsNByColGroupPermuted(TmpObjsList1, \"category\", train_list, n_train_per_categ, test_list, n_test_per_categ, , , , , , , , , )";
     pre_compile_code_string="taDataProc::SplitRowsNByColGroupPermuted(TmpObjsList1, \"category\", train_list, n_train_per_categ, test_list, n_test_per_categ, , , , , , , , , )";
     result_var=NULL;
     object_type=taDataProc;
     method=taDataProc::SplitRowsNByColGroupPermuted;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpObjsList1";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"category\"";
       };
      };
      ProgArg @[2] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest_1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="train_list";
       };
      };
      ProgArg @[3] {
       arg_type=float;
       type="float";
       name="n1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="n_train_per_categ";
       };
      };
      ProgArg @[4] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest_2";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="test_list";
       };
      };
      ProgArg @[5] {
       arg_type=float;
       type="float";
       name="n2";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr="n_test_per_categ";
       };
      };
      ProgArg @[6] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest_3";
       required=0;
       def_val="__null";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[7] {
       arg_type=float;
       type="float";
       name="n3";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[8] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest_4";
       required=0;
       def_val="__null";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[9] {
       arg_type=float;
       type="float";
       name="n4";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[10] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest_5";
       required=0;
       def_val="__null";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[11] {
       arg_type=float;
       type="float";
       name="n5";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[12] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest_6";
       required=0;
       def_val="__null";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[13] {
       arg_type=float;
       type="float";
       name="n6";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[14] {
       arg_type=int;
       type="int";
       name="thr_no";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
    };
    DataProcCall @[4] {
     desc="anything marked TRAIN goes straight in";
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataProc::SelectRows(TmpObjsList2, oid_table, SelectTrainItems)";
     pre_compile_code_string="taDataProc::SelectRows(TmpObjsList2, oid_table, SelectTrainItems)";
     result_var=NULL;
     object_type=taDataProc;
     method=taDataProc::SelectRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpObjsList2";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_table";
       };
      };
      ProgArg @[2] {
       arg_type=DataSelectSpec_ptr;
       type="DataSelectSpec*";
       name="spec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="SelectTrainItems";
       };
      };
     };
    };
    MethodCall @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="train_list->AppendRows(TmpObjsList2)";
     pre_compile_code_string="train_list->AppendRows(TmpObjsList2)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].functions[10].args[1]$$;
     method=DataTable::AppendRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="append_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpObjsList2";
       };
      };
     };
     meth_sig="bool AppendRows(DataTable* append_from)";
     meth_desc=" append rows from another data table -- this is also available in taDataProc and in the GUI as a drag-and-drop action (appends rows of dropped item onto dropped item)";
    };
    DataProcCall @[6] {
     desc="anything marked TEST goes straight in";
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataProc::SelectRows(TmpObjsList2, oid_table, SelectTestItems)";
     pre_compile_code_string="taDataProc::SelectRows(TmpObjsList2, oid_table, SelectTestItems)";
     result_var=NULL;
     object_type=taDataProc;
     method=taDataProc::SelectRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpObjsList2";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_table";
       };
      };
      ProgArg @[2] {
       arg_type=DataSelectSpec_ptr;
       type="DataSelectSpec*";
       name="spec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="SelectTestItems";
       };
      };
     };
    };
    MethodCall @[7] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="test_list->AppendRows(TmpObjsList2)";
     pre_compile_code_string="test_list->AppendRows(TmpObjsList2)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].functions[10].args[2]$$;
     method=DataTable::AppendRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="append_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpObjsList2";
       };
      };
     };
     meth_sig="bool AppendRows(DataTable* append_from)";
     meth_desc=" append rows from another data table -- this is also available in taDataProc and in the GUI as a drag-and-drop action (appends rows of dropped item onto dropped item)";
    };
   };
  };
  Function @[11] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="SplitOIDTrainTest_Indivs(DataTable* oid_table, DataTable* train_list, DataTable* test_list, int n_train_per_categ, int n_test_per_categ) returns: int";
   pre_compile_code_string="SplitOIDTrainTest_Indivs(DataTable* oid_table, DataTable* train_list, DataTable* test_list, int n_train_per_categ, int n_test_per_categ) returns: int";
   name="SplitOIDTrainTest_Indivs";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="oid_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="train_list";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="test_list";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="n_train_per_categ";
     var_type=T_Int;
     int_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="n_test_per_categ";
     var_type=T_Int;
     int_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_1032";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="TmpObjsList1->CopyFrom(oid_table)";
     pre_compile_code_string="TmpObjsList1->CopyFrom(oid_table)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[37]$;
     method=taBase::CopyFrom;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase_ptr;
       type="taBase*";
       name="cpy_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_table";
       };
      };
     };
     meth_sig="bool CopyFrom(taBase* cpy_from)";
     meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
    };
    MethodCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="TmpObjsList1->Filter(\"ctrlflags\", Relation::NOT_CONTAINS, \"TRAIN\", Relation::AND, \"ctrlflags\", Relation::NOT_CONTAINS, \"TEST\", , , )";
     pre_compile_code_string="TmpObjsList1->Filter(\"ctrlflags\", Relation::NOT_CONTAINS, \"TRAIN\", Relation::AND, \"ctrlflags\", Relation::NOT_CONTAINS, \"TEST\", , , )";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[37]$;
     method=DataTable::Filter;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"ctrlflags\"";
       };
      };
      ProgArg @[1] {
       arg_type=Relation::Relations;
       type="Relation::Relations";
       name="operator_1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="Relation::NOT_CONTAINS";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="value_1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"TRAIN\"";
       };
      };
      ProgArg @[3] {
       arg_type=Relation::CombOp;
       type="Relation::CombOp";
       name="comb_op";
       required=0;
       def_val="Relation::AND";
       prev_expr=;
       expr {
	expr="Relation::AND";
       };
      };
      ProgArg @[4] {
       arg_type=Variant;
       type="Variant";
       name="col2";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr="\"ctrlflags\"";
       };
      };
      ProgArg @[5] {
       arg_type=Relation::Relations;
       type="Relation::Relations";
       name="operator_2";
       required=0;
       def_val="Relation::EQUAL";
       prev_expr=;
       expr {
	expr="Relation::NOT_CONTAINS";
       };
      };
      ProgArg @[6] {
       arg_type=const_taString_ref;
       type="taString&";
       name="value_2";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"TEST\"";
       };
      };
      ProgArg @[7] {
       arg_type=Variant;
       type="Variant";
       name="col3";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[8] {
       arg_type=Relation::Relations;
       type="Relation::Relations";
       name="operator_3";
       required=0;
       def_val="Relation::EQUAL";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[9] {
       arg_type=const_taString_ref;
       type="taString&";
       name="value_3";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="void Filter(Variant& col1, Relation::Relations operator_1, taString& value_1, Relation::CombOp comb_op = Relation::AND, Variant col2 = -1, Relation::Relations operator_2 = Relation::EQUAL, taString& value_2, Variant col3 = -1, Relation::Relations operator_3 = Relation::EQUAL, taString& value_3)";
     meth_desc=" Select table rows by specifying up to 3 conditions for which rows to retain in the table (hiding the ones that do not match). Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this Filter you would need to run Flatten first";
    };
    DataGroupProg @[3] {
     desc="get unique individuals";
     flags=CAN_REVERT_TO_CODE;
     code_string="Group from:  src table = TmpObjsList1 dest table = TmpObjsList2";
     pre_compile_code_string="Group from:  src table = TmpObjsList1 dest table = TmpObjsList2";
     src_data_var=$.projects[0].programs.gp[3][0].vars[37]$;
     dest_data_var=.projects[0].programs.gp[3][0].vars[38]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="category";
	name="category_GROUP_0";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="individual_id";
	name="individual_id_GROUP_1";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=0;
     };
    };
    DataProcCall @[4] {
     desc="anything marked TRAIN goes straight in";
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataProc::SplitRowsNByColGroupPermuted(TmpObjsList2, \"category\", TmpTrainList, n_train_per_categ, TmpTestList, n_test_per_categ, , , , , , , , , )";
     pre_compile_code_string="taDataProc::SplitRowsNByColGroupPermuted(TmpObjsList2, \"category\", TmpTrainList, n_train_per_categ, TmpTestList, n_test_per_categ, , , , , , , , , )";
     result_var=NULL;
     object_type=taDataProc;
     method=taDataProc::SplitRowsNByColGroupPermuted;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpObjsList2";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"category\"";
       };
      };
      ProgArg @[2] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest_1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpTrainList";
       };
      };
      ProgArg @[3] {
       arg_type=float;
       type="float";
       name="n1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="n_train_per_categ";
       };
      };
      ProgArg @[4] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest_2";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpTestList";
       };
      };
      ProgArg @[5] {
       arg_type=float;
       type="float";
       name="n2";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr="n_test_per_categ";
       };
      };
      ProgArg @[6] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest_3";
       required=0;
       def_val="__null";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[7] {
       arg_type=float;
       type="float";
       name="n3";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[8] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest_4";
       required=0;
       def_val="__null";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[9] {
       arg_type=float;
       type="float";
       name="n4";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[10] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest_5";
       required=0;
       def_val="__null";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[11] {
       arg_type=float;
       type="float";
       name="n5";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[12] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest_6";
       required=0;
       def_val="__null";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[13] {
       arg_type=float;
       type="float";
       name="n6";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[14] {
       arg_type=int;
       type="int";
       name="thr_no";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
    };
    DataJoinProg @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Join tables:  src_a = TmpTrainList src_b = TmpObjsList1 dest table = TmpTrainList2";
     pre_compile_code_string="Join tables:  src_a = TmpTrainList src_b = TmpObjsList1 dest table = TmpTrainList2";
     src_data_var=.projects[0].programs.gp[3][0].vars[46]$$;
     dest_data_var=.projects[0].programs.gp[3][0].vars[48]$$;
     src_b_data_var=$.projects[0].programs.gp[3][0].vars[37]$;
     join_spec {
      name="join_spec";
      col_a {
       col_name="individual_id";
      };
      col_b {
       col_name="individual_id";
      };
      type=INNER;
      nomatch_warn=1;
     };
    };
    DataJoinProg @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Join tables:  src_a = TmpTestList src_b = TmpObjsList1 dest table = TmpTestList2";
     pre_compile_code_string="Join tables:  src_a = TmpTestList src_b = TmpObjsList1 dest table = TmpTestList2";
     src_data_var=.projects[0].programs.gp[3][0].vars[47]$$;
     dest_data_var=.projects[0].programs.gp[3][0].vars[49]$$;
     src_b_data_var=$.projects[0].programs.gp[3][0].vars[37]$;
     join_spec {
      name="join_spec";
      col_a {
       col_name="individual_id";
      };
      col_b {
       col_name="individual_id";
      };
      type=INNER;
      nomatch_warn=1;
     };
    };
    MethodCall @[7] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="TmpTrainList2->RemoveCol(\"category_1\")";
     pre_compile_code_string="TmpTrainList2->RemoveCol(\"category_1\")";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[48]$;
     method=DataTable::RemoveCol;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"category_1\"";
       };
      };
     };
     meth_sig="void RemoveCol(Variant& col)";
     meth_desc=" removes indicated column";
    };
    MethodCall @[8] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="TmpTrainList2->MoveCol(1, TmpTrainList2.data.size-1)";
     pre_compile_code_string="TmpTrainList2->MoveCol(1, TmpTrainList2.data.size-1)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[48]$;
     method=DataTable::MoveCol;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="old_index";
       required=1;
       def_val=;
       prev_expr="\"category_1\"";
       expr {
	expr="1";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="new_index";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpTrainList2.data.size-1";
       };
      };
     };
     meth_sig="void MoveCol(int old_index, int new_index)";
     meth_desc=" move the column from position old to position new";
    };
    MethodCall @[9] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="TmpTestList2->RemoveCol(\"category_1\")";
     pre_compile_code_string="TmpTestList2->RemoveCol(\"category_1\")";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[49]$;
     method=DataTable::RemoveCol;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"category_1\"";
       };
      };
     };
     meth_sig="void RemoveCol(Variant& col)";
     meth_desc=" removes indicated column";
    };
    MethodCall @[10] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="TmpTestList2->MoveCol(1, TmpTestList2.data.size-1)";
     pre_compile_code_string="TmpTestList2->MoveCol(1, TmpTestList2.data.size-1)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[49]$;
     method=DataTable::MoveCol;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="old_index";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="1";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="new_index";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpTestList2.data.size-1";
       };
      };
     };
     meth_sig="void MoveCol(int old_index, int new_index)";
     meth_desc=" move the column from position old to position new";
    };
    MethodCall @[11] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="train_list->CopyFrom(TmpTrainList2)";
     pre_compile_code_string="train_list->CopyFrom(TmpTrainList2)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].functions[11].args[1]$$;
     method=taBase::CopyFrom;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase_ptr;
       type="taBase*";
       name="cpy_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpTrainList2";
       };
      };
     };
     meth_sig="bool CopyFrom(taBase* cpy_from)";
     meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
    };
    MethodCall @[12] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="test_list->CopyFrom(TmpTestList2)";
     pre_compile_code_string="test_list->CopyFrom(TmpTestList2)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].functions[11].args[2]$$;
     method=taBase::CopyFrom;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase_ptr;
       type="taBase*";
       name="cpy_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpTestList2";
       };
      };
     };
     meth_sig="bool CopyFrom(taBase* cpy_from)";
     meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
    };
    DataProcCall @[13] {
     desc="anything marked TRAIN goes straight in";
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataProc::SelectRows(TmpObjsList2, oid_table, SelectTrainItems)";
     pre_compile_code_string="taDataProc::SelectRows(TmpObjsList2, oid_table, SelectTrainItems)";
     result_var=NULL;
     object_type=taDataProc;
     method=taDataProc::SelectRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpObjsList2";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_table";
       };
      };
      ProgArg @[2] {
       arg_type=DataSelectSpec_ptr;
       type="DataSelectSpec*";
       name="spec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="SelectTrainItems";
       };
      };
     };
    };
    MethodCall @[14] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="train_list->AppendRows(TmpObjsList2)";
     pre_compile_code_string="train_list->AppendRows(TmpObjsList2)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[10].args[1]$;
     method=DataTable::AppendRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="append_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpObjsList2";
       };
      };
     };
     meth_sig="bool AppendRows(DataTable* append_from)";
     meth_desc=" append rows from another data table -- this is also available in taDataProc and in the GUI as a drag-and-drop action (appends rows of dropped item onto dropped item)";
    };
    DataProcCall @[15] {
     desc="anything marked TEST goes straight in";
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataProc::SelectRows(TmpObjsList2, oid_table, SelectTestItems)";
     pre_compile_code_string="taDataProc::SelectRows(TmpObjsList2, oid_table, SelectTestItems)";
     result_var=NULL;
     object_type=taDataProc;
     method=taDataProc::SelectRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpObjsList2";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_table";
       };
      };
      ProgArg @[2] {
       arg_type=DataSelectSpec_ptr;
       type="DataSelectSpec*";
       name="spec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="SelectTestItems";
       };
      };
     };
    };
    MethodCall @[16] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="test_list->AppendRows(TmpObjsList2)";
     pre_compile_code_string="test_list->AppendRows(TmpObjsList2)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[10].args[2]$;
     method=DataTable::AppendRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="append_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TmpObjsList2";
       };
      };
     };
     meth_sig="bool AppendRows(DataTable* append_from)";
     meth_desc=" append rows from another data table -- this is also available in taDataProc and in the GUI as a drag-and-drop action (appends rows of dropped item onto dropped item)";
    };
   };
  };
  Function @[12] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="InitCurTrainList() returns: int";
   pre_compile_code_string="InitCurTrainList() returns: int";
   name="InitCurTrainList";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_1264";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="TrainItemsCurList->CopyFrom(TrainItemsAll)";
     pre_compile_code_string="TrainItemsCurList->CopyFrom(TrainItemsAll)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].vars[39]$$;
     method=taBase::CopyFrom;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase_ptr;
       type="taBase*";
       name="cpy_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TrainItemsAll";
       };
      };
     };
     meth_sig="bool CopyFrom(taBase* cpy_from)";
     meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
    };
    If @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (train_permuted)";
     pre_compile_code_string="if (train_permuted)";
     cond {
      expr="train_permuted";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="TrainItemsCurList->PermuteRows()";
       pre_compile_code_string="TrainItemsCurList->PermuteRows()";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][0].vars[39]$;
       method=DataTable::PermuteRows;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="thr_no";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="void PermuteRows(int thr_no = -1)";
       meth_desc=" permute the order of rows in the data table -- randomly shuffles the rows -- this is very efficiently implemented by shuffling the row_indexes lookup table, not the actual rows in memory. Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this Permute you would need to run Flatten first -- (0 <= thr_no < 100) specifies thread or dmem proc number for parallel safe random sequences (-1 = taMisc::dmem_proc for auto-safe dmem)";
      };
     };
    };
    AssignExpr @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="next_train_idx = 0";
     pre_compile_code_string="next_train_idx = 0";
     result_var=.projects[0].programs.gp[3][0].vars[6]$$;
     expr {
      expr="0";
     };
    };
    If @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (use_epoch_list && get_train_item)";
     pre_compile_code_string="if (use_epoch_list && get_train_item)";
     cond {
      expr="use_epoch_list && get_train_item";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="GetCurEpochList_impl(TrainItemsCurList, next_train_idx)";
       pre_compile_code_string="GetCurEpochList_impl(TrainItemsCurList, next_train_idx)";
       result_var=NULL;
       fun=.projects[0].programs.gp[3][0].functions[19]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="obj_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="TrainItemsCurList";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="next_idx";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="next_train_idx";
	 };
	};
       };
      };
     };
    };
   };
  };
  Function @[13] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="InitCurTestList() returns: int";
   pre_compile_code_string="InitCurTestList() returns: int";
   name="InitCurTestList";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_1265";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="TestItemsCurList->CopyFrom(TestItemsAll)";
     pre_compile_code_string="TestItemsCurList->CopyFrom(TestItemsAll)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].vars[40]$$;
     method=taBase::CopyFrom;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase_ptr;
       type="taBase*";
       name="cpy_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TestItemsAll";
       };
      };
     };
     meth_sig="bool CopyFrom(taBase* cpy_from)";
     meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
    };
    If @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (test_permuted)";
     pre_compile_code_string="if (test_permuted)";
     cond {
      expr="test_permuted";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="TestItemsCurList->PermuteRows()";
       pre_compile_code_string="TestItemsCurList->PermuteRows()";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][0].vars[40]$;
       method=DataTable::PermuteRows;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="thr_no";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="void PermuteRows(int thr_no = -1)";
       meth_desc=" permute the order of rows in the data table -- randomly shuffles the rows -- this is very efficiently implemented by shuffling the row_indexes lookup table, not the actual rows in memory. Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this Permute you would need to run Flatten first -- (0 <= thr_no < 100) specifies thread or dmem proc number for parallel safe random sequences (-1 = taMisc::dmem_proc for auto-safe dmem)";
      };
     };
    };
    AssignExpr @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="next_test_idx = 0";
     pre_compile_code_string="next_test_idx = 0";
     result_var=.projects[0].programs.gp[3][0].vars[7]$$;
     expr {
      expr="0";
     };
    };
    If @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (use_epoch_list && !get_train_item)";
     pre_compile_code_string="if (use_epoch_list && !get_train_item)";
     cond {
      expr="use_epoch_list && !get_train_item";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="GetCurEpochList_impl(TestItemsCurList, next_test_idx)";
       pre_compile_code_string="GetCurEpochList_impl(TestItemsCurList, next_test_idx)";
       result_var=NULL;
       fun=$.projects[0].programs.gp[3][0].functions[19]$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="obj_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="TestItemsCurList";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="next_idx";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="next_test_idx";
	 };
	};
       };
      };
     };
    };
   };
  };
  Function @[14] {
   desc="get current lists from master train / test lists";
   flags=CAN_REVERT_TO_CODE;
   code_string="InitCurLists() returns: int";
   pre_compile_code_string="InitCurLists() returns: int";
   name="InitCurLists";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_1257";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    FunctionCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="InitCurTrainList()";
     pre_compile_code_string="InitCurTrainList()";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][0].functions[12]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
     };
    };
    FunctionCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="InitCurTestList()";
     pre_compile_code_string="InitCurTestList()";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][0].functions[13]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
     };
    };
    If @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (use_epoch_list)";
     pre_compile_code_string="if (use_epoch_list)";
     cond {
      expr="use_epoch_list";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="GetCurEpochList()";
       pre_compile_code_string="GetCurEpochList()";
       result_var=NULL;
       fun=.projects[0].programs.gp[3][0].functions[20]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
       };
      };
     };
    };
    MethodCall @[4] {
     desc="configure";
     flags=CAN_REVERT_TO_CODE;
     code_string="CurObject->Copy_NoData(TrainItemsCurList)";
     pre_compile_code_string="CurObject->Copy_NoData(TrainItemsCurList)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].vars[17]$$;
     method=DataTable::Copy_NoData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_DataTable_ref;
       type="DataTable&";
       name="cp";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="TrainItemsCurList";
       };
      };
     };
     meth_sig="void Copy_NoData(DataTable& cp)";
     meth_desc=" copy only the column structure, but no data, from other data table";
    };
    MethodCall @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CurObject->EnforceRows(1)";
     pre_compile_code_string="CurObject->EnforceRows(1)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[17]$;
     method=DataTable::EnforceRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="1";
       };
      };
     };
     meth_sig="void EnforceRows(int n_rows)";
     meth_desc=" ensure that there are exactly n_rows in the table, removing or adding as needed";
    };
   };
  };
  Function @[15] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="LoadObjListID(String objl_id) returns: int";
   pre_compile_code_string="LoadObjListID(String objl_id) returns: int";
   name="LoadObjListID";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="objl_id";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_1015";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (8 vars)";
     pre_compile_code_string="LocalVars (8 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="oid_fname";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="oid_cat_fname";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="snd_file_path";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="snd_include_filt";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="snd_exclude_filt";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="train_size";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[6] {
       name="test_size";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[7] {
       name="split_on_indivs";
       var_type=T_Bool;
       bool_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="obj_list_row = ObjLists->FindVal(objl_id, \"objlist_id\", 0, true)";
     pre_compile_code_string="obj_list_row = ObjLists->FindVal(objl_id, \"objlist_id\", 0, true)";
     result_var=.projects[0].programs.gp[3][0].vars[1]$$;
     obj=.projects[0].programs.gp[3][0].vars[18]$$;
     method=DataTable::FindVal;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="val";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="objl_id";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"objlist_id\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="st_row";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr="0";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="not_found_err";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
     meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
    };
    AssignExpr @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_fname = ObjLists[\"oid_filename\"][obj_list_row]";
     pre_compile_code_string="oid_fname = ObjLists[\"oid_filename\"][obj_list_row]";
     result_var=.projects[0].programs.gp[3][0].functions[15].fun_code[0].local_vars[0]$$;
     expr {
      expr="ObjLists[\"oid_filename\"][obj_list_row]";
     };
    };
    AssignExpr @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="oid_cat_fname = ObjLists[\"oid_filename_categs\"][obj_list_row]";
     pre_compile_code_string="oid_cat_fname = ObjLists[\"oid_filename_categs\"][obj_list_row]";
     result_var=.projects[0].programs.gp[3][0].functions[15].fun_code[0].local_vars[1]$$;
     expr {
      expr="ObjLists[\"oid_filename_categs\"][obj_list_row]";
     };
    };
    AssignExpr @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="snd_file_path = ObjLists[\"sound_file_path\"][obj_list_row]";
     pre_compile_code_string="snd_file_path = ObjLists[\"sound_file_path\"][obj_list_row]";
     result_var=.projects[0].programs.gp[3][0].functions[15].fun_code[0].local_vars[2]$$;
     expr {
      expr="ObjLists[\"sound_file_path\"][obj_list_row]";
     };
    };
    AssignExpr @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="snd_include_filt = ObjLists[\"sound_include_filter\"][obj_list_row]";
     pre_compile_code_string="snd_include_filt = ObjLists[\"sound_include_filter\"][obj_list_row]";
     result_var=.projects[0].programs.gp[3][0].functions[15].fun_code[0].local_vars[3]$$;
     expr {
      expr="ObjLists[\"sound_include_filter\"][obj_list_row]";
     };
    };
    AssignExpr @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="snd_exclude_filt = ObjLists[\"sound_exclude_filter\"][obj_list_row]";
     pre_compile_code_string="snd_exclude_filt = ObjLists[\"sound_exclude_filter\"][obj_list_row]";
     result_var=.projects[0].programs.gp[3][0].functions[15].fun_code[0].local_vars[4]$$;
     expr {
      expr="ObjLists[\"sound_exclude_filter\"][obj_list_row]";
     };
    };
    AssignExpr @[7] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="train_size = ObjLists[\"train_size\"][obj_list_row]";
     pre_compile_code_string="train_size = ObjLists[\"train_size\"][obj_list_row]";
     result_var=.projects[0].programs.gp[3][0].functions[15].fun_code[0].local_vars[5]$$;
     expr {
      expr="ObjLists[\"train_size\"][obj_list_row]";
     };
    };
    AssignExpr @[8] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="test_size = ObjLists[\"test_size\"][obj_list_row]";
     pre_compile_code_string="test_size = ObjLists[\"test_size\"][obj_list_row]";
     result_var=.projects[0].programs.gp[3][0].functions[15].fun_code[0].local_vars[6]$$;
     expr {
      expr="ObjLists[\"test_size\"][obj_list_row]";
     };
    };
    AssignExpr @[9] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="objs_per_epc = ObjLists[\"objs_per_epc\"][obj_list_row]";
     pre_compile_code_string="objs_per_epc = ObjLists[\"objs_per_epc\"][obj_list_row]";
     result_var=.projects[0].programs.gp[3][0].vars[5]$$;
     expr {
      expr="ObjLists[\"objs_per_epc\"][obj_list_row]";
     };
    };
    AssignExpr @[10] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="split_on_indivs = ObjLists[\"split_on_indivs\"][obj_list_row]";
     pre_compile_code_string="split_on_indivs = ObjLists[\"split_on_indivs\"][obj_list_row]";
     result_var=.projects[0].programs.gp[3][0].functions[15].fun_code[0].local_vars[7]$$;
     expr {
      expr="ObjLists[\"split_on_indivs\"][obj_list_row]";
     };
    };
    FunctionCall @[11] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LoadCurObjectList(oid_fname, oid_cat_fname)";
     pre_compile_code_string="LoadCurObjectList(oid_fname, oid_cat_fname)";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][0].functions[4]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taString;
       type="String";
       name="oid_filename";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_fname";
       };
      };
      ProgArg @[1] {
       arg_type=taString;
       type="String";
       name="oid_filename_categs";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_cat_fname";
       };
      };
     };
    };
    MiscCall @[12] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="cur_directory = taMisc::GetDirFmPath(oid_fname, 0)";
     pre_compile_code_string="cur_directory = taMisc::GetDirFmPath(oid_fname, 0)";
     result_var=.projects[0].programs.gp[3][0].vars[15]$$;
     object_type=taMisc;
     method=taMisc::GetDirFmPath;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="path";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="oid_fname";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="n_up";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr="0";
       };
      };
     };
    };
    If @[13] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (snd_file_path.nonempty())";
     pre_compile_code_string="if (snd_file_path.nonempty())";
     cond {
      expr="snd_file_path.nonempty()";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="AddNameSoundFiles(CurFullObjectList, SoundFilesRaw, SoundFilesAll, SoundFilesUse, snd_file_path, snd_include_filt, snd_exclude_filt)";
       pre_compile_code_string="AddNameSoundFiles(CurFullObjectList, SoundFilesRaw, SoundFilesAll, SoundFilesUse, snd_file_path, snd_include_filt, snd_exclude_filt)";
       result_var=NULL;
       fun=.projects[0].programs.gp[3][0].functions[9]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="oid_table";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="CurFullObjectList";
	 };
	};
	ProgArg @[1] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="snd_raw_table";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="SoundFilesRaw";
	 };
	};
	ProgArg @[2] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="snd_cat_table";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="SoundFilesAll";
	 };
	};
	ProgArg @[3] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="snd_cat_table_use";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="SoundFilesUse";
	 };
	};
	ProgArg @[4] {
	 arg_type=taString;
	 type="String";
	 name="snd_path";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="snd_file_path";
	 };
	};
	ProgArg @[5] {
	 arg_type=taString;
	 type="String";
	 name="snd_include_filt";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="snd_include_filt";
	 };
	};
	ProgArg @[6] {
	 arg_type=taString;
	 type="String";
	 name="snd_exclude_filt";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="snd_exclude_filt";
	 };
	};
       };
      };
     };
    };
    If @[14] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (split_on_indivs)";
     pre_compile_code_string="if (split_on_indivs)";
     cond {
      expr="split_on_indivs";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="SplitOIDTrainTest_Indivs(CurFullObjectList, TrainItemsAll, TestItemsAll, train_size, test_size)";
       pre_compile_code_string="SplitOIDTrainTest_Indivs(CurFullObjectList, TrainItemsAll, TestItemsAll, train_size, test_size)";
       result_var=NULL;
       fun=.projects[0].programs.gp[3][0].functions[11]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="oid_table";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="CurFullObjectList";
	 };
	};
	ProgArg @[1] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="train_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="TrainItemsAll";
	 };
	};
	ProgArg @[2] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="test_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="TestItemsAll";
	 };
	};
	ProgArg @[3] {
	 arg_type=int;
	 type="int";
	 name="n_train_per_categ";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="train_size";
	 };
	};
	ProgArg @[4] {
	 arg_type=int;
	 type="int";
	 name="n_test_per_categ";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="test_size";
	 };
	};
       };
      };
     };
    };
    Else @[15] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     pre_compile_code_string="else";
     else_code {
      name="else_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="SplitOIDTrainTest(CurFullObjectList, TrainItemsAll, TestItemsAll, train_size, test_size)";
       pre_compile_code_string="SplitOIDTrainTest(CurFullObjectList, TrainItemsAll, TestItemsAll, train_size, test_size)";
       result_var=NULL;
       fun=.projects[0].programs.gp[3][0].functions[10]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="oid_table";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="CurFullObjectList";
	 };
	};
	ProgArg @[1] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="train_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="TrainItemsAll";
	 };
	};
	ProgArg @[2] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="test_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="TestItemsAll";
	 };
	};
	ProgArg @[3] {
	 arg_type=int;
	 type="int";
	 name="n_train_per_categ";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="train_size";
	 };
	};
	ProgArg @[4] {
	 arg_type=int;
	 type="int";
	 name="n_test_per_categ";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="test_size";
	 };
	};
       };
      };
     };
    };
    FunctionCall @[16] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="InitCurLists()";
     pre_compile_code_string="InitCurLists()";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][0].functions[14]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
  };
  Function @[16] {
   desc="load current object list and initialize all lists";
   flags=CAN_REVERT_TO_CODE;
   code_string="LoadInitObjLists() returns: int";
   pre_compile_code_string="LoadInitObjLists() returns: int";
   name="LoadInitObjLists";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_2388";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=0;
     code_string=;
     pre_compile_code_string=;
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    FunctionCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LoadObjListID()";
     pre_compile_code_string="LoadObjListID()";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][0].functions[15]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taString;
       type="String";
       name="objl_id";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="objlist_id";
       };
      };
     };
    };
   };
  };
  Function @[17] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="GetSoundFileRnd_impl(DataTable* item_list, String obj_name) returns: String";
   pre_compile_code_string="GetSoundFileRnd_impl(DataTable* item_list, String obj_name) returns: String";
   name="GetSoundFileRnd_impl";
   return_type=T_String;
   object_type=taOBase;
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="item_list";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="obj_name";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CurSoundFiles->CopyFrom(item_list)";
     pre_compile_code_string="CurSoundFiles->CopyFrom(item_list)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].vars[42]$$;
     method=taBase::CopyFrom;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase_ptr;
       type="taBase*";
       name="cpy_from";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="item_list";
       };
      };
     };
     meth_sig="bool CopyFrom(taBase* cpy_from)";
     meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
    };
    MethodCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CurSoundFiles->Filter(\"category\", Relation::EQUAL, obj_name, , , , , , , )";
     pre_compile_code_string="CurSoundFiles->Filter(\"category\", Relation::EQUAL, obj_name, , , , , , , )";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[42]$;
     method=DataTable::Filter;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"category\"";
       };
      };
      ProgArg @[1] {
       arg_type=Relation::Relations;
       type="Relation::Relations";
       name="operator_1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="Relation::EQUAL";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="value_1";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="obj_name";
       };
      };
      ProgArg @[3] {
       arg_type=Relation::CombOp;
       type="Relation::CombOp";
       name="comb_op";
       required=0;
       def_val="Relation::AND";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[4] {
       arg_type=Variant;
       type="Variant";
       name="col2";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[5] {
       arg_type=Relation::Relations;
       type="Relation::Relations";
       name="operator_2";
       required=0;
       def_val="Relation::EQUAL";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[6] {
       arg_type=const_taString_ref;
       type="taString&";
       name="value_2";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[7] {
       arg_type=Variant;
       type="Variant";
       name="col3";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[8] {
       arg_type=Relation::Relations;
       type="Relation::Relations";
       name="operator_3";
       required=0;
       def_val="Relation::EQUAL";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[9] {
       arg_type=const_taString_ref;
       type="taString&";
       name="value_3";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="void Filter(Variant& col1, Relation::Relations operator_1, taString& value_1, Relation::CombOp comb_op = Relation::AND, Variant col2 = -1, Relation::Relations operator_2 = Relation::EQUAL, taString& value_2, Variant col3 = -1, Relation::Relations operator_3 = Relation::EQUAL, taString& value_3)";
     meth_desc=" Select table rows by specifying up to 3 conditions for which rows to retain in the table (hiding the ones that do not match). Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this Filter you would need to run Flatten first";
    };
    MethodCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CurSoundFiles->PermuteRows()";
     pre_compile_code_string="CurSoundFiles->PermuteRows()";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[42]$;
     method=DataTable::PermuteRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="thr_no";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="void PermuteRows(int thr_no = -1)";
     meth_desc=" permute the order of rows in the data table -- randomly shuffles the rows -- this is very efficiently implemented by shuffling the row_indexes lookup table, not the actual rows in memory. Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this Permute you would need to run Flatten first -- (0 <= thr_no < 100) specifies thread or dmem proc number for parallel safe random sequences (-1 = taMisc::dmem_proc for auto-safe dmem)";
    };
    If @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (CurSoundFiles.rows == 0)";
     pre_compile_code_string="if (CurSoundFiles.rows == 0)";
     cond {
      expr="CurSoundFiles.rows == 0";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      CssExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taMisc::Warning(\"word:\", obj_name, \"not found in list:\", item_list.name);";
       pre_compile_code_string="taMisc::Warning(\"word:\", obj_name, \"not found in list:\", item_list.name);";
       expr {
	expr="taMisc::Warning(\"word:\", obj_name, \"not found in list:\", item_list.name);";
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cur_sound_file = \"\"";
       pre_compile_code_string="cur_sound_file = \"\"";
       result_var=.projects[0].programs.gp[3][0].vars[16]$$;
       expr {
	expr="\"\"";
       };
      };
     };
    };
    Else @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     pre_compile_code_string="else";
     else_code {
      name="else_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cur_sound_file = CurSoundFiles->GetVal(\"sound_file\", 0)";
       pre_compile_code_string="cur_sound_file = CurSoundFiles->GetVal(\"sound_file\", 0)";
       result_var=$.projects[0].programs.gp[3][0].vars[16]$;
       obj=$.projects[0].programs.gp[3][0].vars[42]$;
       method=DataTable::GetVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"sound_file\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
       };
       meth_sig="const_Variant GetVal(Variant& col, int row)";
       meth_desc=" get data of scalar type, in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name";
      };
     };
    };
    ReturnExpr @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="return cur_sound_file";
     pre_compile_code_string="return cur_sound_file";
     expr {
      expr="cur_sound_file";
     };
    };
   };
  };
  Function @[18] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="GetSoundFileRnd() returns: String";
   pre_compile_code_string="GetSoundFileRnd() returns: String";
   name="GetSoundFileRnd";
   return_type=T_String;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_2202";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    ReturnExpr @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="return GetSoundFileRnd_impl(SoundFilesUse,cur_category)";
     pre_compile_code_string="return GetSoundFileRnd_impl(SoundFilesUse,cur_category)";
     expr {
      expr="GetSoundFileRnd_impl(SoundFilesUse,cur_category)";
     };
    };
   };
  };
  Function @[19] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="GetCurEpochList_impl(DataTable* obj_list, int& next_idx) returns: int";
   pre_compile_code_string="GetCurEpochList_impl(DataTable* obj_list, int& next_idx) returns: int";
   name="GetCurEpochList_impl";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="obj_list";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="next_idx";
     var_type=T_Int;
     int_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=1;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_1263";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (1 vars)";
     pre_compile_code_string="LocalVars (1 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    If @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (obj_list.rows == 0)";
     pre_compile_code_string="if (obj_list.rows == 0)";
     cond {
      expr="obj_list.rows == 0";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MiscCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taMisc::Error(\"object list has no rows -- cannot be used!\", obj_list.name, , , , , , , )";
       pre_compile_code_string="taMisc::Error(\"object list has no rows -- cannot be used!\", obj_list.name, , , , , , , )";
       result_var=NULL;
       object_type=taMisc;
       method=taMisc::Error;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="a";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"object list has no rows -- cannot be used!\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="b";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="obj_list.name";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="c";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[3] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="d";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[4] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="e";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[5] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="f";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[6] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="g";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[7] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="h";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[8] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="i";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
      };
     };
    };
    MethodCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CurEpochList->StructUpdate(true)";
     pre_compile_code_string="CurEpochList->StructUpdate(true)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][0].vars[41]$$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    MethodCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CurEpochList->ResetData()";
     pre_compile_code_string="CurEpochList->ResetData()";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[41]$;
     method=DataTable::ResetData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void ResetData()";
     meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
    };
    MethodCall @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CurEpochList->Copy_NoData(obj_list)";
     pre_compile_code_string="CurEpochList->Copy_NoData(obj_list)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[41]$;
     method=DataTable::Copy_NoData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_DataTable_ref;
       type="DataTable&";
       name="cp";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="obj_list";
       };
      };
     };
     meth_sig="void Copy_NoData(DataTable& cp)";
     meth_desc=" copy only the column structure, but no data, from other data table";
    };
    Comment @[5] {
     desc="the epoch list is a \"client\" of the cur list  -- uses up its allocation and updates index, etc";
     flags=CAN_REVERT_TO_CODE;
     code_string="// the epoch list is a \"client\" of the cur list  -- uses up its allocation and updates index, etc";
     pre_compile_code_string="// the epoch list is a \"client\" of the cur list  -- uses up its allocation and updates index, etc";
    };
    ForLoop @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<objs_per_epc; i++)";
     pre_compile_code_string="for (i=0; i<objs_per_epc; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      If @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (next_idx >= obj_list.rows)";
       pre_compile_code_string="if (next_idx >= obj_list.rows)";
       cond {
	expr="next_idx >= obj_list.rows";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="next_idx = 0";
	 pre_compile_code_string="next_idx = 0";
	 result_var=.projects[0].programs.gp[3][0].functions[21].args[1]$$;
	 expr {
	  expr="0";
	 };
	};
	If @[1] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="if (epoch_permuted)";
	 pre_compile_code_string="if (epoch_permuted)";
	 cond {
	  expr="epoch_permuted";
	 };
	 true_code {
	  name="true_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="obj_list->PermuteRows()";
	   pre_compile_code_string="obj_list->PermuteRows()";
	   result_var=NULL;
	   obj=.projects[0].programs.gp[3][0].functions[21].args[0]$$;
	   method=DataTable::PermuteRows;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	   meth_sig="void PermuteRows(int thr_no = -1)";
	   meth_desc=" permute the order of rows in the data table -- randomly shuffles the rows -- this is very efficiently implemented by shuffling the row_indexes lookup table, not the actual rows in memory. Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this Permute you would need to run Flatten first -- (0 <= thr_no < 100) specifies thread or dmem proc number for parallel safe random sequences (-1 = taMisc::dmem_proc for auto-safe dmem)";
	  };
	 };
	};
       };
      };
      MethodCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="CurEpochList->AddBlankRow()";
       pre_compile_code_string="CurEpochList->AddBlankRow()";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][0].vars[41]$;
       method=DataTable::AddBlankRow;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="int AddBlankRow()";
       meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
      };
      MethodCall @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="CurEpochList->CopyFromRow(-1, obj_list, next_idx)";
       pre_compile_code_string="CurEpochList->CopyFromRow(-1, obj_list, next_idx)";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][0].vars[41]$;
       method=DataTable::CopyFromRow;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="dest_row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="-1";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_DataTable_ref;
	 type="DataTable&";
	 name="cp";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="obj_list";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="src_row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="next_idx";
	 };
	};
       };
       meth_sig="void CopyFromRow(int dest_row, DataTable& cp, int src_row)";
       meth_desc=" copy one row from source to given row in this object: source must have exact same column structure as this!!";
      };
      AssignExpr @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="next_idx = next_idx + 1";
       pre_compile_code_string="next_idx = next_idx + 1";
       result_var=.projects[0].programs.gp[3][0].functions[19].args[1]$$;
       expr {
	expr="next_idx + 1";
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<objs_per_epc";
     };
     iter {
      expr="i++";
     };
    };
    MethodCall @[7] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CurEpochList->StructUpdate(false)";
     pre_compile_code_string="CurEpochList->StructUpdate(false)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[41]$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    AssignExpr @[8] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="next_epoch_idx = 0";
     pre_compile_code_string="next_epoch_idx = 0";
     result_var=.projects[0].programs.gp[3][0].vars[8]$$;
     expr {
      expr="0";
     };
    };
   };
  };
  Function @[20] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="GetCurEpochList() returns: int";
   pre_compile_code_string="GetCurEpochList() returns: int";
   name="GetCurEpochList";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_1275";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    If @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (get_train_item)";
     pre_compile_code_string="if (get_train_item)";
     cond {
      expr="get_train_item";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="GetCurEpochList_impl(TrainItemsCurList, next_train_idx)";
       pre_compile_code_string="GetCurEpochList_impl(TrainItemsCurList, next_train_idx)";
       result_var=NULL;
       fun=$.projects[0].programs.gp[3][0].functions[19]$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="obj_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="TrainItemsCurList";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="next_idx";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="next_train_idx";
	 };
	};
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_permuted = train_permuted";
       pre_compile_code_string="epoch_permuted = train_permuted";
       result_var=.projects[0].programs.gp[3][0].vars[9]$$;
       expr {
	expr="train_permuted";
       };
      };
     };
    };
    Else @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     pre_compile_code_string="else";
     else_code {
      name="else_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="GetCurEpochList_impl(TestItemsCurList, next_test_idx)";
       pre_compile_code_string="GetCurEpochList_impl(TestItemsCurList, next_test_idx)";
       result_var=NULL;
       fun=$.projects[0].programs.gp[3][0].functions[19]$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="obj_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="TestItemsCurList";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="next_idx";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="next_test_idx";
	 };
	};
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="epoch_permuted = test_permuted";
       pre_compile_code_string="epoch_permuted = test_permuted";
       result_var=$.projects[0].programs.gp[3][0].vars[9]$;
       expr {
	expr="test_permuted";
       };
      };
     };
    };
   };
  };
  Function @[21] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="GetNextItem_impl(DataTable* obj_list, int& next_idx, bool permute) returns: int";
   pre_compile_code_string="GetNextItem_impl(DataTable* obj_list, int& next_idx, bool permute) returns: int";
   name="GetNextItem_impl";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="obj_list";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="next_idx";
     var_type=T_Int;
     int_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=1;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="permute";
     var_type=T_Bool;
     bool_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_1266";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    If @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (obj_list.rows == 0)";
     pre_compile_code_string="if (obj_list.rows == 0)";
     cond {
      expr="obj_list.rows == 0";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MiscCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taMisc::Error(\"object list has no rows -- cannot be used!\", obj_list.name, , , , , , , )";
       pre_compile_code_string="taMisc::Error(\"object list has no rows -- cannot be used!\", obj_list.name, , , , , , , )";
       result_var=NULL;
       object_type=taMisc;
       method=taMisc::Error;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="a";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"object list has no rows -- cannot be used!\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="b";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="obj_list.name";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="c";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[3] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="d";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[4] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="e";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[5] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="f";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[6] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="g";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[7] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="h";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[8] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="i";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
      };
     };
    };
    If @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (next_idx >= obj_list.rows)";
     pre_compile_code_string="if (next_idx >= obj_list.rows)";
     cond {
      expr="next_idx >= obj_list.rows";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="next_idx = 0";
       pre_compile_code_string="next_idx = 0";
       result_var=$.projects[0].programs.gp[3][0].functions[21].args[1]$;
       expr {
	expr="0";
       };
      };
      If @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (permute)";
       pre_compile_code_string="if (permute)";
       cond {
	expr="permute";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="obj_list->PermuteRows()";
	 pre_compile_code_string="obj_list->PermuteRows()";
	 result_var=NULL;
	 obj=$.projects[0].programs.gp[3][0].functions[21].args[0]$;
	 method=DataTable::PermuteRows;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=int;
	   type="int";
	   name="thr_no";
	   required=0;
	   def_val="-1";
	   prev_expr=;
	   expr {
	    expr=;
	   };
	  };
	 };
	 meth_sig="void PermuteRows(int thr_no = -1)";
	 meth_desc=" permute the order of rows in the data table -- randomly shuffles the rows -- this is very efficiently implemented by shuffling the row_indexes lookup table, not the actual rows in memory. Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this Permute you would need to run Flatten first -- (0 <= thr_no < 100) specifies thread or dmem proc number for parallel safe random sequences (-1 = taMisc::dmem_proc for auto-safe dmem)";
	};
       };
      };
     };
    };
    MethodCall @[3] {
     desc="sets read index";
     flags=CAN_REVERT_TO_CODE;
     code_string="obj_list->ReadItem(next_idx)";
     pre_compile_code_string="obj_list->ReadItem(next_idx)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].functions[21].args[0]$;
     method=DataTable::ReadItem;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="idx";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="next_idx";
       };
      };
     };
     meth_sig="bool ReadItem(int idx)";
     meth_desc=" goes directly (random access) to row idx (- = count back from last row available, otherwise must be in range 0 <= idx < rows) so that it is now available for GetData routines (which use read_idx for their row number), returns true if row exists and was read";
    };
    MethodCall @[4] {
     desc="set some key global vars that can be accessed in other programs";
     flags=CAN_REVERT_TO_CODE;
     code_string="cur_category = obj_list->GetData(\"category\")";
     pre_compile_code_string="cur_category = obj_list->GetData(\"category\")";
     result_var=.projects[0].programs.gp[3][0].vars[10]$$;
     obj=$.projects[0].programs.gp[3][0].functions[21].args[0]$;
     method=DataTable::GetData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"category\"";
       };
      };
     };
     meth_sig="const_Variant GetData(Variant& col)";
     meth_desc=" get data from given column number or name at current read_idx row number -- see ReadItem, ReadNext for updating the read_idx index";
    };
    MethodCall @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="cur_category_id = obj_list->GetData(\"category_id\")";
     pre_compile_code_string="cur_category_id = obj_list->GetData(\"category_id\")";
     result_var=.projects[0].programs.gp[3][0].vars[11]$$;
     obj=$.projects[0].programs.gp[3][0].functions[21].args[0]$;
     method=DataTable::GetData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"category_id\"";
       };
      };
     };
     meth_sig="const_Variant GetData(Variant& col)";
     meth_desc=" get data from given column number or name at current read_idx row number -- see ReadItem, ReadNext for updating the read_idx index";
    };
    MethodCall @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="cur_individual = obj_list->GetData(\"individual\")";
     pre_compile_code_string="cur_individual = obj_list->GetData(\"individual\")";
     result_var=.projects[0].programs.gp[3][0].vars[12]$$;
     obj=$.projects[0].programs.gp[3][0].functions[21].args[0]$;
     method=DataTable::GetData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"individual\"";
       };
      };
     };
     meth_sig="const_Variant GetData(Variant& col)";
     meth_desc=" get data from given column number or name at current read_idx row number -- see ReadItem, ReadNext for updating the read_idx index";
    };
    MethodCall @[7] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="cur_individual_id = obj_list->GetData(\"individual_id\")";
     pre_compile_code_string="cur_individual_id = obj_list->GetData(\"individual_id\")";
     result_var=.projects[0].programs.gp[3][0].vars[13]$$;
     obj=$.projects[0].programs.gp[3][0].functions[21].args[0]$;
     method=DataTable::GetData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"individual_id\"";
       };
      };
     };
     meth_sig="const_Variant GetData(Variant& col)";
     meth_desc=" get data from given column number or name at current read_idx row number -- see ReadItem, ReadNext for updating the read_idx index";
    };
    MethodCall @[8] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="cur_obj_filename = obj_list->GetData(\"filename\")";
     pre_compile_code_string="cur_obj_filename = obj_list->GetData(\"filename\")";
     result_var=.projects[0].programs.gp[3][0].vars[14]$$;
     obj=$.projects[0].programs.gp[3][0].functions[21].args[0]$;
     method=DataTable::GetData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"filename\"";
       };
      };
     };
     meth_sig="const_Variant GetData(Variant& col)";
     meth_desc=" get data from given column number or name at current read_idx row number -- see ReadItem, ReadNext for updating the read_idx index";
    };
    If @[9] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (!cur_obj_filename.contains(cur_directory))";
     pre_compile_code_string="if (!cur_obj_filename.contains(cur_directory))";
     cond {
      expr="!cur_obj_filename.contains(cur_directory)";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cur_obj_filename = cur_directory + \"/\" + cur_obj_filename";
       pre_compile_code_string="cur_obj_filename = cur_directory + \"/\" + cur_obj_filename";
       result_var=$.projects[0].programs.gp[3][0].vars[14]$;
       expr {
	expr="cur_directory + \"/\" + cur_obj_filename";
       };
      };
     };
    };
    MethodCall @[10] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CurObject->EnforceRows(1)";
     pre_compile_code_string="CurObject->EnforceRows(1)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[17]$;
     method=DataTable::EnforceRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="1";
       };
      };
     };
     meth_sig="void EnforceRows(int n_rows)";
     meth_desc=" ensure that there are exactly n_rows in the table, removing or adding as needed";
    };
    MethodCall @[11] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CurObject->CopyFromRow(0, obj_list, next_idx)";
     pre_compile_code_string="CurObject->CopyFromRow(0, obj_list, next_idx)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][0].vars[17]$;
     method=DataTable::CopyFromRow;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="dest_row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="0";
       };
      };
      ProgArg @[1] {
       arg_type=const_DataTable_ref;
       type="DataTable&";
       name="cp";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="obj_list";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="src_row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="next_idx";
       };
      };
     };
     meth_sig="void CopyFromRow(int dest_row, DataTable& cp, int src_row)";
     meth_desc=" copy one row from source to given row in this object: source must have exact same column structure as this!!";
    };
    AssignExpr @[12] {
     desc="increment for next time around";
     flags=CAN_REVERT_TO_CODE;
     code_string="next_idx = next_idx + 1";
     pre_compile_code_string="next_idx = next_idx + 1";
     result_var=$.projects[0].programs.gp[3][0].functions[21].args[1]$;
     expr {
      expr="next_idx + 1";
     };
    };
   };
  };
  Function @[22] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="GetNextItem() returns: int";
   pre_compile_code_string="GetNextItem() returns: int";
   name="GetNextItem";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_1279";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    If @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (use_epoch_list)";
     pre_compile_code_string="if (use_epoch_list)";
     cond {
      expr="use_epoch_list";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="GetNextItem_impl(CurEpochList, next_epoch_idx, epoch_permuted)";
       pre_compile_code_string="GetNextItem_impl(CurEpochList, next_epoch_idx, epoch_permuted)";
       result_var=NULL;
       fun=.projects[0].programs.gp[3][0].functions[21]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="obj_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="CurEpochList";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="next_idx";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="next_epoch_idx";
	 };
	};
	ProgArg @[2] {
	 arg_type=bool;
	 type="bool";
	 name="permute";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="epoch_permuted";
	 };
	};
       };
      };
     };
    };
    ElseIf @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else if (get_train_item)";
     pre_compile_code_string="else if (get_train_item)";
     cond {
      expr="get_train_item";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="GetNextItem_impl(TrainItemsCurList, next_train_idx, train_permuted)";
       pre_compile_code_string="GetNextItem_impl(TrainItemsCurList, next_train_idx, train_permuted)";
       result_var=NULL;
       fun=$.projects[0].programs.gp[3][0].functions[21]$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="obj_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="TrainItemsCurList";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="next_idx";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="next_train_idx";
	 };
	};
	ProgArg @[2] {
	 arg_type=bool;
	 type="bool";
	 name="permute";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="train_permuted";
	 };
	};
       };
      };
     };
    };
    Else @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     pre_compile_code_string="else";
     else_code {
      name="else_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="GetNextItem_impl(TestItemsCurList, next_test_idx, test_permuted)";
       pre_compile_code_string="GetNextItem_impl(TestItemsCurList, next_test_idx, test_permuted)";
       result_var=NULL;
       fun=$.projects[0].programs.gp[3][0].functions[21]$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="obj_list";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="TestItemsCurList";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="next_idx";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="next_test_idx";
	 };
	};
	ProgArg @[2] {
	 arg_type=bool;
	 type="bool";
	 name="permute";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="test_permuted";
	 };
	};
       };
      };
     };
    };
   };
  };
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
  AssignExpr @[0] {
   desc="signal to init at start";
   flags=CAN_REVERT_TO_CODE;
   code_string="next_train_idx = -1";
   pre_compile_code_string="next_train_idx = -1";
   result_var=$.projects[0].programs.gp[3][0].vars[6]$;
   expr {
    expr="-1";
   };
  };
  AssignExpr @[1] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="next_test_idx = 0";
   pre_compile_code_string="next_test_idx = 0";
   result_var=$.projects[0].programs.gp[3][0].vars[7]$;
   expr {
    expr="0";
   };
  };
  AssignExpr @[2] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="next_epoch_idx = 0";
   pre_compile_code_string="next_epoch_idx = 0";
   result_var=$.projects[0].programs.gp[3][0].vars[8]$;
   expr {
    expr="0";
   };
  };
  MemberMethodCall @[3] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="ObjectMiscData.data.category.BuildHashTable()";
   pre_compile_code_string="ObjectMiscData.data.category.BuildHashTable()";
   obj=.projects[0].programs.gp[3][0].vars[27]$$;
   path="data.category";
   result_var=NULL;
   method=DataCol::BuildHashTable;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void BuildHashTable()";
   meth_desc=" build a hash table of column (scalar only) values to speed up finding in large fixed tables -- table is destroyed after any insertion or removal of rows -- it is up to the user to call this when relevant data is all in place -- system cannot track value changes";
  };
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  LocalVars @[0] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="LocalVars (0 vars)";
   pre_compile_code_string="LocalVars (0 vars)";
   local_vars {
    name="local_vars";
    el_typ=ProgVar;
    el_def=0;
   };
  };
  If @[1] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="if (next_train_idx < 0)";
   pre_compile_code_string="if (next_train_idx < 0)";
   cond {
    expr="next_train_idx < 0";
   };
   true_code {
    name="true_code";
    el_typ=ProgCode;
    el_def=0;
    FunctionCall @[0] {
     desc="load and get lists all ready";
     flags=CAN_REVERT_TO_CODE;
     code_string="LoadObjListID(objlist_id)";
     pre_compile_code_string="LoadObjListID(objlist_id)";
     result_var=NULL;
     fun=$.projects[0].programs.gp[3][0].functions[15]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taString;
       type="String";
       name="objl_id";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="objlist_id";
       };
      };
     };
    };
   };
  };
  FunctionCall @[2] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="GetNextItem()";
   pre_compile_code_string="GetNextItem()";
   result_var=NULL;
   fun=.projects[0].programs.gp[3][0].functions[22]$$;
   fun_args {
    name="fun_args";
    el_typ=ProgArg;
    el_def=0;
   };
  };
 };
 step_prog=NULL;
 step_n=1;
 doc {
  name="doc";
  desc=;
  web_doc=0;
  wiki=;
  url="local";
  full_url="local";
  text_size=1;
  text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
  html_text="<html>
<head></head>
<body>
<h2> Enter Title Here </h2>
</body>
</html>
";
 };
};

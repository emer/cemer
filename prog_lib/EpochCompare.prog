// ta_Dump File v3.0 -- code v8.0.9.0 rev10771
Program .projects[0].programs[1] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [5] {
  Relation @[0] { };
  DataTable @[1] { 
   DataTableCols @.data = [37] {
    int_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[2] { };
    float_Data @[3] { };
    float_Data @[4] { };
    float_Data @[5] { };
    float_Data @[6] { };
    float_Data @[7] { };
    int_Data @[8] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    double_Data @[9] { };
    double_Data @[10] { };
    float_Data @[11] { };
    float_Data @[12] { };
    float_Data @[13] { };
    float_Data @[14] { };
    float_Data @[15] { };
    float_Data @[16] { };
    float_Data @[17] { };
    float_Data @[18] { };
    float_Data @[19] { };
    float_Data @[20] { };
    float_Data @[21] { };
    float_Data @[22] { };
    float_Data @[23] { };
    float_Data @[24] { };
    float_Data @[25] { };
    String_Data @[26] { };
    String_Data @[27] { };
    String_Data @[28] { };
    String_Data @[29] { };
    String_Data @[30] { };
    float_Data @[31] { };
    float_Data @[32] { };
    float_Data @[33] { };
    float_Data @[34] { };
    float_Data @[35] { };
    int_Data @[36] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };
  };
  DataTable @[2] { 
   DataTableCols @.data = [37] {
    int_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[2] { };
    float_Data @[3] { };
    float_Data @[4] { };
    float_Data @[5] { };
    float_Data @[6] { };
    float_Data @[7] { };
    int_Data @[8] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    double_Data @[9] { };
    double_Data @[10] { };
    float_Data @[11] { };
    float_Data @[12] { };
    float_Data @[13] { };
    float_Data @[14] { };
    float_Data @[15] { };
    float_Data @[16] { };
    float_Data @[17] { };
    float_Data @[18] { };
    float_Data @[19] { };
    float_Data @[20] { };
    float_Data @[21] { };
    float_Data @[22] { };
    float_Data @[23] { };
    float_Data @[24] { };
    float_Data @[25] { };
    String_Data @[26] { };
    String_Data @[27] { };
    String_Data @[28] { };
    String_Data @[29] { };
    String_Data @[30] { };
    float_Data @[31] { };
    float_Data @[32] { };
    float_Data @[33] { };
    float_Data @[34] { };
    float_Data @[35] { };
    float_Data @[36] { };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };
  };
  DataTable @[3] { 
   DataTableCols @.data = [6] {
    String_Data @[0] { };
    int_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[3] { };
    float_Data @[4] { };
    String_Data @[5] { };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };
  };
  DataTable @[4] { 
   DataTableCols @.data = [17] {
    String_Data @[0] { };
    String_Data @[1] { };
    float_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[3] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[6] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[7] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[8] { };
    float_Data @[9] { };
    float_Data @[10] { };
    float_Data @[11] { };
    float_Data @[12] { };
    float_Data @[13] { };
    float_Data @[14] { };
    float_Data @[15] { };
    float_Data @[16] { };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };
  };
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [0] {
 };

 ProgVar_List @.vars = [12] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
  ProgVar @[3] { };
  ProgVar @[4] { };
  ProgVar @[5] { };
  ProgVar @[6] { };
  ProgVar @[7] { };
  ProgVar @[8] { };
  ProgVar @[9] { };
  ProgVar @[10] { };
  ProgVar @[11] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [0] {
 };

 ProgEl_List @.prog_code = [13] {
  LocalVars @[0] { 
   ProgVar_List @.local_vars = [7] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
   };
  };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  MethodCall @[2] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  AssignExpr @[3] { };
  ForeachLoop @[4] { 
   ProgEl_List @.loop_code = [8] {
    IfContinue @[0] { };
    If @[1] { 
     ProgEl_List @.true_code = [1] {
      IfContinue @[0] { };
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [1] {
      IfContinue @[0] { };
     };
    };
    If @[3] { 
     ProgEl_List @.true_code = [1] {
      DataAnalCall @[0] { 
       ProgArg_List @.meth_args = [9] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
	ProgArg @[7] { };
	ProgArg @[8] { };
       };
      };
     };
    };
    Else @[4] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    If @[5] { 
     ProgEl_List @.true_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    Else @[6] { 
     ProgEl_List @.true_code = [3] {
      AssignExpr @[0] { };
      DataProcCall @[1] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      ForLoop @[2] { 
       ProgEl_List @.loop_code = [1] {
	CssExpr @[0] { };
       };
      };
     };
    };
    VarIncr @[7] { };
   };
  };
  MethodCall @[5] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  DataGroupProg @[6] { 
   DataOpList @.group_spec.ops = [6] {
    DataGroupEl @[0] { };
    DataGroupEl @[1] { };
    DataGroupEl @[2] { };
    DataGroupEl @[3] { };
    DataGroupEl @[4] { };
    DataGroupEl @[5] { };
   };
  };
  MemberMethodCall @[7] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  MathCall @[8] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  MathCall @[9] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  DataGroupProg @[10] { 
   DataOpList @.group_spec.ops = [17] {
    DataGroupEl @[0] { };
    DataGroupEl @[1] { };
    DataGroupEl @[2] { };
    DataGroupEl @[3] { };
    DataGroupEl @[4] { };
    DataGroupEl @[5] { };
    DataGroupEl @[6] { };
    DataGroupEl @[7] { };
    DataGroupEl @[8] { };
    DataGroupEl @[9] { };
    DataGroupEl @[10] { };
    DataGroupEl @[11] { };
    DataGroupEl @[12] { };
    DataGroupEl @[13] { };
    DataGroupEl @[14] { };
    DataGroupEl @[15] { };
    DataGroupEl @[16] { };
   };
  };
  MemberAssign @[11] { };
  MemberAssign @[12] { };
 };
};
Program .projects[0].programs[1] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {name="DocLink": doc=.doc$$: };
 };
 name="EpochCompare";
 short_nm="EpcCmpr";
 tags="Data, Analysis, Epoch, Training, ClusterRun";
 desc="performs various stats on epochs to train to criterion, across multiple batches, including an additional err threshold that can be different than the training stopping criterion, and also the minimum error value achieved across batches";
 version {
  major=0;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="randy.oreilly@colorado.edu";
 flags=NO_STOP_STEP;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=Relation;
  el_def=0;
  Relation @[0] {name="rel": rel=EQUAL: val=0: val_string="": use_var=0: var=NULL: };
  DataTable @[1] {
   name="AllData";
   desc=;
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    int_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="batch";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=8;
     matrix_col_width=10;
    };
    int_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="epoch";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=8;
     matrix_col_width=10;
    };
    String_Data @[2] {
     name="train_mode";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    float_Data @[3] {
     name="avg_sse";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=8;
     matrix_col_width=10;
    };
    float_Data @[4] {
     name="cnt_err";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=8;
     matrix_col_width=10;
    };
    float_Data @[5] {
     name="avg_norm_err";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=12;
     matrix_col_width=10;
    };
    float_Data @[6] {
     name="avg_ext_rew";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=11;
     matrix_col_width=10;
    };
    float_Data @[7] {
     name="avg_cycles";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=10;
     matrix_col_width=10;
    };
    int_Data @[8] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="n_unk_bb_trials";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=15;
     matrix_col_width=10;
    };
    double_Data @[9] {
     name="unk_bb_err_i1";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    double_Data @[10] {
     name="unk_bb_err_i2";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    float_Data @[11] {
     name="epoch_time_tot";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=14;
     matrix_col_width=10;
    };
    float_Data @[12] {
     name="epoch_time_usr";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=14;
     matrix_col_width=10;
    };
    float_Data @[13] {
     name="BlicketProbability_Fm_Hidden_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=35;
     matrix_col_width=10;
    };
    float_Data @[14] {
     name="Effect_Fm_Hidden_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=23;
     matrix_col_width=10;
    };
    float_Data @[15] {
     name="Hidden_Fm_Input_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=22;
     matrix_col_width=10;
    };
    float_Data @[16] {
     name="Hidden_Fm_Context_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=24;
     matrix_col_width=10;
    };
    float_Data @[17] {
     name="Hidden_Fm_Time_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=21;
     matrix_col_width=10;
    };
    float_Data @[18] {
     name="Hidden_Fm_Effect_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=23;
     matrix_col_width=10;
    };
    float_Data @[19] {
     name="Hidden_Ctxt_Fm_Hidden_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=28;
     matrix_col_width=10;
    };
    float_Data @[20] {
     name="Input_netmax";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=12;
     matrix_col_width=10;
    };
    float_Data @[21] {
     name="Context_netmax";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=14;
     matrix_col_width=10;
    };
    float_Data @[22] {
     name="BlicketPr_netmax";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    float_Data @[23] {
     name="Time_netmax";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=11;
     matrix_col_width=10;
    };
    float_Data @[24] {
     name="Effect_netmax";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=13;
     matrix_col_width=10;
    };
    float_Data @[25] {
     name="Hidden_netmax";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=13;
     matrix_col_width=10;
    };
    String_Data @[26] {
     name="tag";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    String_Data @[27] {
     name="tag_svn";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    String_Data @[28] {
     name="tag_job";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    String_Data @[29] {
     name="params";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    String_Data @[30] {
     name="notes";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    float_Data @[31] {
     name="LeabraConSpec_0_lrate";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=21;
     matrix_col_width=10;
    };
    float_Data @[32] {
     name="thr_l_mix";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=9;
     matrix_col_width=10;
    };
    float_Data @[33] {
     name="stable_pct";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=10;
     matrix_col_width=10;
    };
    float_Data @[34] {
     name="fm_output_rel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=13;
     matrix_col_width=10;
    };
    float_Data @[35] {
     name="ti_ctxt_rel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=11;
     matrix_col_width=10;
    };
    int_Data @[36] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_557";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="run";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=8;
     matrix_col_width=10;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   row_height=1;
   max_col_width=50;
   keygen 4 0=0;
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   row_with_hilite=-1;
  };
  DataTable @[2] {
   name="SmoothData";
   desc=;
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    int_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="batch";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=8;
     matrix_col_width=10;
    };
    int_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="epoch";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=8;
     matrix_col_width=10;
    };
    String_Data @[2] {
     name="train_mode";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    float_Data @[3] {
     name="avg_sse";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=8;
     matrix_col_width=10;
    };
    float_Data @[4] {
     name="cnt_err";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=8;
     matrix_col_width=10;
    };
    float_Data @[5] {
     name="avg_norm_err";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=12;
     matrix_col_width=10;
    };
    float_Data @[6] {
     name="avg_ext_rew";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=11;
     matrix_col_width=10;
    };
    float_Data @[7] {
     name="avg_cycles";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=10;
     matrix_col_width=10;
    };
    int_Data @[8] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="n_unk_bb_trials";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=15;
     matrix_col_width=10;
    };
    double_Data @[9] {
     name="unk_bb_err_i1";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    double_Data @[10] {
     name="unk_bb_err_i2";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    float_Data @[11] {
     name="epoch_time_tot";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=14;
     matrix_col_width=10;
    };
    float_Data @[12] {
     name="epoch_time_usr";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=14;
     matrix_col_width=10;
    };
    float_Data @[13] {
     name="BlicketProbability_Fm_Hidden_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=35;
     matrix_col_width=10;
    };
    float_Data @[14] {
     name="Effect_Fm_Hidden_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=23;
     matrix_col_width=10;
    };
    float_Data @[15] {
     name="Hidden_Fm_Input_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=22;
     matrix_col_width=10;
    };
    float_Data @[16] {
     name="Hidden_Fm_Context_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=24;
     matrix_col_width=10;
    };
    float_Data @[17] {
     name="Hidden_Fm_Time_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=21;
     matrix_col_width=10;
    };
    float_Data @[18] {
     name="Hidden_Fm_Effect_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=23;
     matrix_col_width=10;
    };
    float_Data @[19] {
     name="Hidden_Ctxt_Fm_Hidden_netrel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=28;
     matrix_col_width=10;
    };
    float_Data @[20] {
     name="Input_netmax";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=12;
     matrix_col_width=10;
    };
    float_Data @[21] {
     name="Context_netmax";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=14;
     matrix_col_width=10;
    };
    float_Data @[22] {
     name="BlicketPr_netmax";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    float_Data @[23] {
     name="Time_netmax";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=11;
     matrix_col_width=10;
    };
    float_Data @[24] {
     name="Effect_netmax";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=13;
     matrix_col_width=10;
    };
    float_Data @[25] {
     name="Hidden_netmax";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=13;
     matrix_col_width=10;
    };
    String_Data @[26] {
     name="tag";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    String_Data @[27] {
     name="tag_svn";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    String_Data @[28] {
     name="tag_job";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    String_Data @[29] {
     name="params";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    String_Data @[30] {
     name="notes";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    float_Data @[31] {
     name="LeabraConSpec_0_lrate";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=21;
     matrix_col_width=10;
    };
    float_Data @[32] {
     name="thr_l_mix";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=9;
     matrix_col_width=10;
    };
    float_Data @[33] {
     name="stable_pct";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=10;
     matrix_col_width=10;
    };
    float_Data @[34] {
     name="fm_output_rel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=13;
     matrix_col_width=10;
    };
    float_Data @[35] {
     name="ti_ctxt_rel";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=11;
     matrix_col_width=10;
    };
    float_Data @[36] {
     name="hidden_gi";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=9;
     matrix_col_width=10;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   row_height=1;
   max_col_width=50;
   keygen 4 0=0;
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   row_with_hilite=-1;
  };
  DataTable @[3] {
   name="ByBatchData";
   desc=;
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="tag_svn_group";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    int_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_556";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="batch_group";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=11;
     matrix_col_width=10;
    };
    float_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_558";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="epoch_last";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=10;
     matrix_col_width=10;
    };
    float_Data @[3] {
     name="cnt_err_find_first";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=18;
     matrix_col_width=10;
    };
    float_Data @[4] {
     name="cnt_err_min";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=11;
     matrix_col_width=10;
    };
    String_Data @[5] {
     name="params_last";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   row_height=1;
   max_col_width=50;
   keygen 4 0=0;
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   row_with_hilite=-1;
  };
  DataTable @[4] {
   name="ByTagStats";
   desc=;
   data {
    name="data";
    el_typ=int_Data;
    el_def=0;
    String_Data @[0] {
     name="tag_svn_group_group";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=19;
     matrix_col_width=10;
    };
    String_Data @[1] {
     name="params_last_last";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    float_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_552";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="N";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=8;
     matrix_col_width=10;
    };
    float_Data @[3] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_553";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="epoch_last_min";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=14;
     matrix_col_width=10;
    };
    float_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_554";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="epoch_last_max";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=14;
     matrix_col_width=10;
    };
    float_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_555";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="epoch_last_n_at_max";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=19;
     matrix_col_width=10;
    };
    float_Data @[6] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_556";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="epoch_last_mean";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=15;
     matrix_col_width=10;
    };
    float_Data @[7] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_557";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
     };
     name="epoch_last_sem";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=14;
     matrix_col_width=10;
    };
    float_Data @[8] {
     name="cnt_err_find_first_min";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=22;
     matrix_col_width=10;
    };
    float_Data @[9] {
     name="cnt_err_find_first_max";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=22;
     matrix_col_width=10;
    };
    float_Data @[10] {
     name="cnt_err_find_first_n_at_max";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=27;
     matrix_col_width=10;
    };
    float_Data @[11] {
     name="cnt_err_find_first_mean";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=23;
     matrix_col_width=10;
    };
    float_Data @[12] {
     name="cnt_err_find_first_sem";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=22;
     matrix_col_width=10;
    };
    float_Data @[13] {
     name="cnt_err_min_min";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=15;
     matrix_col_width=10;
    };
    float_Data @[14] {
     name="cnt_err_min_max";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=15;
     matrix_col_width=10;
    };
    float_Data @[15] {
     name="cnt_err_min_mean";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=16;
     matrix_col_width=10;
    };
    float_Data @[16] {
     name="cnt_err_min_sem";
     col_flags=SAVE_DATA|AUTO_WIDTH;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=15;
     matrix_col_width=10;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   row_height=1;
   max_col_width=50;
   keygen 4 0=0;
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   row_with_hilite=-1;
  };
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="ClusterRunData";
   var_type=T_Object;
   object_type=DataTable_Group;
   object_val=.data.gp["ClusterRun"]$$<DataTable_Group,ClusterRun>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[1] {
   name="err_thresh";
   var_type=T_Int;
   int_val=5;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="alternative error threshold to use";
   init_from=NULL;
  };
  ProgVar @[2] {
   name="rel";
   var_type=T_Object;
   object_type=Relation;
   object_val=.objs[0]$$;
   object_scope=NULL;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[3] {
   name="AllData";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.objs[1]$$;
   object_scope=NULL;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[4] {
   name="ByBatchData";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.objs[3]$$;
   object_scope=NULL;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[5] {
   name="ByTagStats";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.objs[4]$$;
   object_scope=NULL;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[6] {
   name="SmoothData";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.objs[2]$$;
   object_scope=NULL;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[7] {
   name="train_data";
   var_type=T_Bool;
   bool_val=0;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="include train data -- not mutex with test";
   init_from=NULL;
  };
  ProgVar @[8] {
   name="test_data";
   var_type=T_Bool;
   bool_val=0;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="include test data -- not mutex with train";
   init_from=NULL;
  };
  ProgVar @[9] {
   name="smooth";
   var_type=T_Bool;
   bool_val=0;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[10] {
   name="smooth_kern_width";
   var_type=T_Int;
   int_val=8;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[11] {
   name="smooth_sig";
   var_type=T_Real;
   real_val=4;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  LocalVars @[0] {
   name="LocalVars_LocalVars7vars";
   desc=;
   flags=0;
   code_string=;
   local_vars {
    name="local_vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="dt";
     var_type=T_Object;
     object_type=DataTable;
     object_val=NULL;
     object_scope=NULL;
     objs_ptr=0;
     flags=LOCAL_VAR|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="max_idx";
     var_type=T_Int;
     int_val=42;
     object_scope=NULL;
     flags=LOCAL_VAR|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="epoch_last_max";
     var_type=T_Real;
     real_val=499;
     object_scope=NULL;
     flags=LOCAL_VAR|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="find_first_max";
     var_type=T_Real;
     real_val=249;
     object_scope=NULL;
     flags=LOCAL_VAR|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="run_no";
     var_type=T_Int;
     int_val=0;
     object_scope=NULL;
     flags=LOCAL_VAR|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="cur_sz";
     var_type=T_Int;
     int_val=0;
     object_scope=NULL;
     flags=LOCAL_VAR|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[6] {
     name="i";
     var_type=T_Int;
     int_val=0;
     object_scope=NULL;
     flags=LOCAL_VAR|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
  };
  MethodCall @[1] {
   name="MethodCall_AllDataResetData";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="AllData.Reset()";
   result_var=NULL;
   obj=.vars[3]$$;
   method=DataTable::ResetData;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig="void ResetData()";
   meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
  };
  MethodCall @[2] {
   name="MethodCall_AllDataStructUpdatetrue";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="AllData.StructUpdate()";
   result_var=NULL;
   obj=$.vars[3]$;
   method=taBase::StructUpdate;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="begin";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="true";
     };
    };
   };
   meth_sig="void StructUpdate(bool begin)";
   meth_desc=" bracket structural changes with (nestable) true/false calls;";
  };
  AssignExpr @[3] {
   name="AssignExpr_runno0";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="run_no = 0";
   result_var=.prog_code[0].local_vars[4]$$;
   expr {
    expr="0";
   };
  };
  ForeachLoop @[4] {
   name="ForeachLoop_foreachdtinClusterRunData";
   desc=;
   flags=0;
   code_string=;
   loop_code {
    name="loop_code";
    el_typ=ProgCode;
    el_def=0;
    IfContinue @[0] {
     name="IfContinue_ifdtnamecontainsepccontinue";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if(!dt.name.contains(\"_epc\")) continue";
     cond {
      expr="!dt.name.contains(\"_epc\")";
     };
    };
    If @[1] {
     name="If_iftraindata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if(test_data)";
     cond {
      expr="!train_data";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      IfContinue @[0] {
       name="IfContinue_ifdtnamecontainstrncontinue";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if(dt.name.contains(\"_tst_\")) continue";
       cond {
	expr="dt.name.contains(\"_trn_\")";
       };
      };
     };
    };
    If @[2] {
     name="If_iftestdata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if(test_data)";
     cond {
      expr="!test_data";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      IfContinue @[0] {
       name="IfContinue_ifdtnamecontainststcontinue";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if(dt.name.contains(\"_tst_\")) continue";
       cond {
	expr="dt.name.contains(\"_tst_\")";
       };
      };
     };
    };
    If @[3] {
     name="If_ifsmooth";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if(smooth)";
     cond {
      expr="smooth";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      DataAnalCall @[0] {
       name="DataAnalCall_taDataAnalSmooth_ruetruetruetrue";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taDataAnal::SmoothGauss()";
       result_var=NULL;
       object_type=taDataAnal;
       method=taDataAnal::SmoothGauss;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="smooth_data";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="SmoothData";
	 };
	};
	ProgArg @[1] {
	 arg_type=bool;
	 type="bool";
	 name="view";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
	ProgArg @[2] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="src_data";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="dt";
	 };
	};
	ProgArg @[3] {
	 arg_type=int;
	 type="int";
	 name="kern_half_wd";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="smooth_kern_width";
	 };
	};
	ProgArg @[4] {
	 arg_type=float;
	 type="float";
	 name="kern_sigma";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="smooth_sig";
	 };
	};
	ProgArg @[5] {
	 arg_type=bool;
	 type="bool";
	 name="neg_tail";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
	ProgArg @[6] {
	 arg_type=bool;
	 type="bool";
	 name="pos_tail";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
	ProgArg @[7] {
	 arg_type=bool;
	 type="bool";
	 name="keep_edges";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
	ProgArg @[8] {
	 arg_type=bool;
	 type="bool";
	 name="float_only";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
       };
      };
     };
    };
    Else @[4] {
     name="Else_If_ifsmooth";
     desc=;
     flags=0;
     code_string=;
     cond {
      expr=;
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       name="MethodCall_SmoothDataCopyFromdt";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="SmoothData.CopyFrom(dt)";
       result_var=NULL;
       obj=.vars[6]$$;
       method=taBase::CopyFrom;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taBase_ptr;
	 type="taBase*";
	 name="cpy_from";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="dt";
	 };
	};
       };
       meth_sig="bool CopyFrom(taBase* cpy_from)";
       meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
      };
     };
    };
    If @[5] {
     name="If_ifAllDatarows0";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if(AllData.rows == 0)";
     cond {
      expr="AllData.rows == 0";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       name="MethodCall_AllDataCopyFromSmoothData";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="AllData.CopyFrom()";
       result_var=NULL;
       obj=$.vars[3]$;
       method=taBase::CopyFrom;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taBase_ptr;
	 type="taBase*";
	 name="cpy_from";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="SmoothData";
	 };
	};
       };
       meth_sig="bool CopyFrom(taBase* cpy_from)";
       meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
      };
      MethodCall @[1] {
       name="MethodCall_AllDataNewColIntrun";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="AllData.NewColInt()";
       result_var=NULL;
       obj=$.vars[3]$;
       method=DataTable::NewColInt;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"run\"";
	 };
	};
       };
       meth_sig="int_Data_ptr NewColInt(taString& col_nm)";
       meth_desc=" create new column of integer-level data (= narrow display, actually stored as float)";
      };
     };
    };
    Else @[6] {
     name="Else_If_ifAllDatarows0";
     desc=;
     flags=0;
     code_string=;
     cond {
      expr=;
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       name="AssignExpr_curszAllDatarows";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cur_sz = AllData.rows";
       result_var=.prog_code[0].local_vars[5]$$;
       expr {
	expr="AllData.rows";
       };
      };
      DataProcCall @[1] {
       name="DataProcCall_taDataProcCopyCo_lDataSmoothData";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taDataProc::CopyCommonColData()";
       result_var=NULL;
       object_type=taDataProc;
       method=taDataProc::CopyCommonColData;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="dest";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="AllData";
	 };
	};
	ProgArg @[1] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="src";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="SmoothData";
	 };
	};
       };
      };
      ForLoop @[2] {
       name="ForLoop_foricursziAllDatarowsi";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="for(i=cur_sz; i< AllData.rows; i++)";
       loop_code {
	name="loop_code";
	el_typ=ProgCode;
	el_def=0;
	CssExpr @[0] {
	 name="CssExpr_AllDatarunirunno";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="AllData[\"run\"][i] = run_no;";
	 expr {
	  expr="AllData[\"run\"][i] = run_no;";
	 };
	};
       };
       init {
	expr="i=cur_sz";
       };
       test {
	expr=" i< AllData.rows";
       };
       iter {
	expr=" i++";
       };
      };
     };
    };
    VarIncr @[7] {
     name="VarIncr_runno1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="run_no += 1";
     var=$.prog_code[0].local_vars[4]$;
     expr {
      expr="1";
     };
    };
   };
   el_var=.prog_code[0].local_vars[0]$$;
   in {
    expr="ClusterRunData";
   };
  };
  MethodCall @[5] {
   name="MethodCall_AllDataStructUpdatefalse";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="AllData.StructUpdate()";
   result_var=NULL;
   obj=$.vars[3]$;
   method=taBase::StructUpdate;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type="bool";
     name="begin";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="false";
     };
    };
   };
   meth_sig="void StructUpdate(bool begin)";
   meth_desc=" bracket structural changes with (nestable) true/false calls;";
  };
  DataGroupProg @[6] {
   name="DataGroupProg_Groupfromsrctabl_ableByBatchData";
   desc=;
   flags=0;
   code_string=;
   src_data_var=$.vars[3]$;
   dest_data_var=.vars[4]$$;
   group_spec {
    name="group_spec";
    ops {
     name="ops";
     el_typ=DataGroupEl;
     el_def=0;
     DataGroupEl @[0] {
      col_name="tag_svn";
      name="tag_svn_GROUP_0";
      agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[1] {
      col_name="batch";
      name="batch_GROUP_1";
      agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[2] {
      col_name="epoch";
      name="epoch_LAST_2";
      agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[3] {
      col_name="cnt_err";
      name="cnt_err_FIND_FIRST_3";
      agg {name="agg": op=FIND_FIRST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=.vars[1]$$: }: };
     };
     DataGroupEl @[4] {
      col_name="cnt_err";
      name="cnt_err_MIN_4";
      agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[5] {
      col_name="params";
      name="params_LAST_5";
      agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
    };
    append_agg_name=1;
   };
  };
  MemberMethodCall @[7] {
   name="MemberMethodCall_ByBatchDatadatae_petaBaseVTFLOAT";
   desc="change type to float, to enable subsequent analysis operations";
   flags=0;
   code_string=;
   obj=$.vars[4]$;
   path="data.epoch_last";
   result_var=NULL;
   method=DataCol::ChangeColType;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=taBase::ValType;
     type="taBase::ValType";
     name="new_type";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="taBase::VT_FLOAT";
     };
    };
   };
   meth_sig="void ChangeColType(taBase::ValType new_type)";
   meth_desc=" change the type of the data in this col, without loss of data";
  };
  MathCall @[8] {
   name="MathCall_epochlastmaxtaMa_ochlastarmaxidx";
   desc=;
   flags=0;
   code_string=;
   result_var=.prog_code[0].local_vars[2]$$;
   object_type=taMath_float;
   method=taMath_float::vec_max;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_float_Matrix_ptr;
     type="float_Matrix*";
     name="vec";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="ByBatchData.data.epoch_last.ar";
     };
    };
    ProgArg @[1] {
     arg_type=int_ref;
     type="int&";
     name="idx";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="max_idx";
     };
    };
   };
  };
  MathCall @[9] {
   name="MathCall_findfirstmaxtaMa_ndfirstarmaxidx";
   desc=;
   flags=0;
   code_string=;
   result_var=.prog_code[0].local_vars[3]$$;
   object_type=taMath_float;
   method=taMath_float::vec_max;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_float_Matrix_ptr;
     type="float_Matrix*";
     name="vec";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="ByBatchData.data.cnt_err_find_first.ar";
     };
    };
    ProgArg @[1] {
     arg_type=int_ref;
     type="int&";
     name="idx";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="max_idx";
     };
    };
   };
  };
  DataGroupProg @[10] {
   name="DataGroupProg_Groupfromsrctabl_tableByTagStats";
   desc=;
   flags=0;
   code_string=;
   src_data_var=$.vars[4]$;
   dest_data_var=.vars[5]$$;
   group_spec {
    name="group_spec";
    ops {
     name="ops";
     el_typ=DataGroupEl;
     el_def=0;
     DataGroupEl @[0] {
      col_name="tag_svn_group";
      name="tag_svn_group_GROUP_0";
      agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[1] {
      col_name="params_last";
      name="params_last_LAST_1";
      agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[2] {
      col_name="epoch_last";
      name="epoch_last_N_2";
      agg {name="agg": op=N: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[3] {
      col_name="epoch_last";
      name="epoch_last_MIN_3";
      agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[4] {
      col_name="epoch_last";
      name="epoch_last_MAX_4";
      agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[5] {
      col_name="epoch_last";
      name="epoch_last_COUNT_5";
      agg {name="agg": op=COUNT: rel={name="rel": rel=EQUAL: val=0: val_string="": use_var=1: var=$.prog_code[0].local_vars[2]$: }: };
     };
     DataGroupEl @[6] {
      col_name="epoch_last";
      name="epoch_last_MEAN_6";
      agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[7] {
      col_name="epoch_last";
      name="epoch_last_SEM_7";
      agg {name="agg": op=SEM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[8] {
      col_name="cnt_err_find_first";
      name="cnt_err_find_first_MIN_8";
      agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.vars[1]$: }: };
     };
     DataGroupEl @[9] {
      col_name="cnt_err_find_first";
      name="cnt_err_find_first_MAX_9";
      agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.vars[1]$: }: };
     };
     DataGroupEl @[10] {
      col_name="cnt_err_find_first";
      name="cnt_err_find_first_COUNT_10";
      agg {name="agg": op=COUNT: rel={name="rel": rel=EQUAL: val=0: val_string="": use_var=1: var=$.prog_code[0].local_vars[3]$: }: };
     };
     DataGroupEl @[11] {
      col_name="cnt_err_find_first";
      name="cnt_err_find_first_MEAN_11";
      agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.vars[1]$: }: };
     };
     DataGroupEl @[12] {
      col_name="cnt_err_find_first";
      name="cnt_err_find_first_SEM_12";
      agg {name="agg": op=SEM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.vars[1]$: }: };
     };
     DataGroupEl @[13] {
      col_name="cnt_err_min";
      name="cnt_err_min_MIN_13";
      agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[14] {
      col_name="cnt_err_min";
      name="cnt_err_min_MAX_14";
      agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[15] {
      col_name="cnt_err_min";
      name="cnt_err_min_MEAN_15";
      agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
     DataGroupEl @[16] {
      col_name="cnt_err_min";
      name="cnt_err_min_SEM_16";
      agg {name="agg": op=SEM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
     };
    };
    append_agg_name=1;
   };
  };
  MemberAssign @[11] {
   name="MemberAssign_ByTagStatsdataep_epochlastnatmax";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="ByTagStats.data.epoch_last_count.name = \"epoch_last_n_at_max\"";
   obj=$.vars[5]$;
   path="data.epoch_last_count.name";
   expr {
    expr="\"epoch_last_n_at_max\"";
   };
   update_after=0;
  };
  MemberAssign @[12] {
   name="MemberAssign_ByTagStatsdatacn_findfirstnatmax";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="ByTagStats.data.epoch_last_count.name = \"epoch_last_n_at_max\"";
   obj=$.vars[5]$;
   path="data.cnt_err_find_first_count.name";
   expr {
    expr="\"cnt_err_find_first_n_at_max\"";
   };
   update_after=0;
  };
 };
 step_prog=NULL;
 step_n=1;
 doc {
  name="doc";
  desc=;
  web_doc=0;
  wiki=;
  url="local";
  full_url="local";
  text_size=1;
  text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
  html_text="<html>
<head></head>
<body>
<h2> Enter Title Here </h2>
</body>
</html>
";
 };
};

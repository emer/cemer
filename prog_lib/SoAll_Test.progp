// ta_Dump File v2.0
Program_Group .projects[0].programs.gp[1] { 
  Program_Group .projects[0].programs.gp[1] = [5] {
    Program @[0] { 
      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [6] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
      };

      ProgEl_List @.init_code = [2] {
	NetCounterInit @[0] { };
	AssignExpr @[1] { };
      };

      ProgEl_List @.prog_code = [11] {
	NetCounterInit @[0] { };
	MemberAssign @[1] { };
	AssignExpr @[2] { };
	MethodCall @[3] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[4] { };
	NetDataLoop @[5] { 
	  ProgEl_List @.loop_code = [2] {
	    ProgramCall @[0] { 
	      ProgArg_List @.prog_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	    IfElse @[1] { 
	      ProgEl_List @.true_code = [1] {
		MethodCall @[0] { };
	      };
	    };
	  };
	};
	IfElse @[6] { 
	  ProgEl_List @.true_code = [1] {
	    MethodCall @[0] { };
	  };
	};
	MethodCall @[7] { };
	ProgramCall @[8] { 
	  ProgArg_List @.prog_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MemberAssign @[9] { };
	MethodCall @[10] { };
      };
    };
    Program @[1] { 
      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgVar_List @.vars = [1] {
	ProgVar @[0] { };
      };

      ProgEl_List @.prog_code = [6] {
	MethodCall @[0] { };
	ProgramCall @[1] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[2] { };
	MethodCall @[3] { };
	ProgramCall @[4] { 
	  ProgArg_List @.prog_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	NetUpdateView @[5] { };
      };
    };
    Program @[2] { 
      ProgObjList @.objs = [1] {
	LayerWriter @[0] { 
	  LayerDataEl_List @.layer_data = [3] {
	    LayerWriterEl @[0] { };
	    LayerWriterEl @[1] { };
	    LayerWriterEl @[2] { };
	  };
	};
      };

      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgVar_List @.vars = [1] {
	ProgVar @[0] { };
      };

      ProgEl_List @.init_code = [2] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
      };

      ProgEl_List @.prog_code = [1] {
	MethodCall @[0] { };
      };
    };
    Program @[3] { 
      ProgObjList @.objs = [1] {
	NetMonitor @[0] { 
	  NetMonItem_List @.items = [6] {
	    NetMonItem @[0] { };
	    NetMonItem @[1] { };
	    NetMonItem @[2] { };
	    NetMonItem @[3] { };
	    NetMonItem @[4] { };
	    NetMonItem @[5] { };
	  };
	};
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgEl_List @.init_code = [3] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[2] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
      };

      ProgEl_List @.prog_code = [4] {
	MethodCall @[0] { };
	MethodCall @[1] { };
	MethodCall @[2] { };
	MethodCall @[3] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
      };
    };
    Program @[4] { 
      ProgObjList @.objs = [1] {
	NetMonitor @[0] { 
	  NetMonItem_List @.items = [6] {
	    NetMonItem @[0] { };
	    NetMonItem @[1] { };
	    NetMonItem @[2] { };
	    NetMonItem @[3] { };
	    NetMonItem @[4] { };
	    NetMonItem @[5] { };
	  };
	};
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [3] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
      };

      ProgEl_List @.init_code = [4] {
	AssignExpr @[0] { };
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[2] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[3] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
      };

      ProgEl_List @.prog_code = [6] {
	MethodCall @[0] { };
	MethodCall @[1] { };
	AssignExpr @[2] { };
	MethodCall @[3] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[4] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[5] { };
      };
    };
  };
};
Program_Group .projects[0].programs.gp[1] {
 name="SoAll_Test";
 el_typ=Program;
 el_def=0;
 step_prog=.projects[0].programs.gp[1][1]$0$;
 tags="So, Std, All, Test";
 desc="The full set of programs for testing a standard self-organizing network (starting with Epoch)";
 Program @[0] {
  name="SoEpochTest";
  tags="So, Std";
  desc="iterates over all of the items in a data table and calls SoTrial process on them";
  flags=SHOW_STEP;
  objs {
   name=;
   el_typ=taOBase;
   el_def=0;
  };
  types {
   name=;
   el_typ=ProgType;
   el_def=0;
  };
  args {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=SoNetwork;
    object_val=.projects[0].networks[0]$1$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="network to operate on";
   };
  };
  vars {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=.projects[0].data.gp[0][0]$2$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="table of patterns to present to the network, one row at a time";
   };
   ProgVar @[1] {
    name="data_loop_order";
    var_type=T_HardEnum;
    int_val=0;
    hard_enum_type=DataLoop::Order;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
   };
   ProgVar @[2] {
    name="trial";
    var_type=T_Int;
    int_val=0;
    objs_ptr=0;
    flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
    desc="current trial (event) within the epoch -- increments automatically";
   };
   ProgVar @[3] {
    name="trial_mon_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=.projects[0].data.gp[1][2]$3$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
   };
   ProgVar @[4] {
    name="epoch_timer";
    var_type=T_Object;
    object_type=TimeUsed;
    object_val=.projects[0].networks[0].epoch_time$4$;
    objs_ptr=0;
    flags=NULL_CHECK;
    desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
   };
   ProgVar @[5] {
    name="data_loop_index";
    var_type=T_Int;
    int_val=0;
    objs_ptr=0;
    flags=NULL_CHECK;
    desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
   };
  };
  functions {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  load_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  init_code {
   name=;
   el_typ=NetCounterInit;
   el_def=0;
   NetCounterInit @[0] {
    desc="initialize trial counter (local variable and in the network)";
    flags=;
    network_var=.projects[0].programs.gp[1][0].args[0]$5$;
    local_ctr_var=.projects[0].programs.gp[1][0].vars[2]$6$;
    counter=Network::trial;
   };
   AssignExpr @[1] {
    desc="get pointer to epoch timer object on network";
    flags=;
    result_var=.projects[0].programs.gp[1][0].vars[4]$7$;
    expr {
     expr="network.epoch_time";
     flags=;
     var_expr="$#0#$.epoch_time";
     vars {
     };
     var_names{ network;     };
     bad_vars{      };
    };
   };
  };
  prog_code {
   name=;
   el_typ=NetCounterInit;
   el_def=0;
   NetCounterInit @[0] {
    desc="initialize trial counter (local variable and in the network)";
    flags=;
    network_var=$5$;
    local_ctr_var=$6$;
    counter=Network::trial;
   };
   MemberAssign @[1] {
    desc="set to testing mode";
    flags=NEW_EL;
    obj=$5$;
    path="train_mode";
    expr {
     expr="Network::TEST";
     flags=;
     var_expr="Network::TEST";
     vars {
     };
     var_names{      };
     bad_vars{      };
    };
    update_after=0;
   };
   AssignExpr @[2] {
    desc="get pointer to epoch timer object on network";
    flags=;
    result_var=$7$;
    expr {
     expr="network.epoch_time";
     flags=;
     var_expr="$#0#$.epoch_time";
     vars {
     };
     var_names{ network;     };
     bad_vars{      };
    };
   };
   MethodCall @[3] {
    desc="start the epoch timer to record computation time per epoch";
    flags=;
    result_var=NULL;
    obj=$7$;
    method=TimeUsed::StartTimer;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="reset_used";
      required=0;
      def_val="true";
      expr {
       expr="true";
       flags=;
       var_expr="true";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[4] {
    desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
    flags=;
    result_var=NULL;
    obj=.projects[0].programs.gp[1][0].vars[3]$8$;
    method=DataTable::ResetData;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   NetDataLoop @[5] {
    desc="iterates over the events/rows of input_data, according to data_loop_order variable";
    flags=;
    loop_code {
     name=;
     el_typ=ProgramCall;
     el_def=0;
     ProgramCall @[0] {
      desc="run the trial program, passing network and input_data";
      flags=;
      target=$0$;
      targ_ld_init="*SoTrial*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=SoNetwork;
	type="SoNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ input_data;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     IfElse @[1] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=;
      cond {
       expr="network.Compute_Weights_Test(trial+1)";
       flags=;
       var_expr="$#0#$.Compute_Weights_Test($#1#$+1)";
       vars {
       };
       var_names{ network;trial;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=MethodCall;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$5$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
    };
    data_var=.projects[0].programs.gp[1][0].vars[0]$9$;
    index_var=.projects[0].programs.gp[1][0].vars[5]$10$;
    order_var=.projects[0].programs.gp[1][0].vars[1]$11$;
    order=PERMUTED;
    item_idx_list{     };
    dmem_nprocs=1;
    dmem_this_proc=0;
   };
   IfElse @[6] {
    desc="if full batch mode, update only at end of epoch";
    flags=;
    cond {
     expr="network.wt_update == Network::BATCH";
     flags=;
     var_expr="$#0#$.wt_update == Network::BATCH";
     vars {
     };
     var_names{ network;     };
     bad_vars{      };
    };
    true_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc="final update of weights based on accumulated changes";
      flags=;
      result_var=NULL;
      obj=$5$;
      method=Network::Compute_Weights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    false_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
   };
   MethodCall @[7] {
    desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
    flags=;
    result_var=NULL;
    obj=$5$;
    method=LeabraNetwork::Compute_EpochStats;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   ProgramCall @[8] {
    desc="run program that records data from network and possibly other sources about the epoch";
    flags=;
    target=.projects[0].programs.gp[1][4]$12$;
    targ_ld_init="*SoEpochMonitor*";
    prog_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=Network;
      type="SoNetwork*";
      name="network";
      required=1;
      def_val=;
      expr {
       expr="network";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
    };
   };
   MemberAssign @[9] {
    desc="set back to training mode";
    flags=NEW_EL;
    obj=$5$;
    path="train_mode";
    expr {
     expr="Network::TRAIN";
     flags=;
     var_expr="Network::TRAIN";
     vars {
     };
     var_names{      };
     bad_vars{      };
    };
    update_after=0;
   };
   MethodCall @[10] {
    desc="done with the computation in the epoch -- record time it took";
    flags=;
    result_var=NULL;
    obj=$7$;
    method=TimeUsed::EndTimer;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
  };
 };
 Program @[1] {
  name="SoTrialTest";
  tags="So, Std";
  desc="Self-organizing processing of a single input/output event or external information";
  flags=;
  objs {
   name=;
   el_typ=taOBase;
   el_def=0;
  };
  types {
   name=;
   el_typ=ProgType;
   el_def=0;
  };
  args {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=SoNetwork;
    object_val=$1$;
    objs_ptr=0;
    flags=NULL_CHECK;
    desc="network to operate on -- typically set by higher-level calling programs";
   };
   ProgVar @[1] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=$2$;
    objs_ptr=0;
    flags=NULL_CHECK;
    desc="datatable containing training input/output patterns";
   };
  };
  vars {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="update_net_view";
    var_type=T_Bool;
    bool_val=1;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="determines whether to update any network view displays after trial is completed";
   };
  };
  functions {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  load_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  init_code {
   name=;
   el_typ=NetCounterInit;
   el_def=0;
  };
  prog_code {
   name=;
   el_typ=MethodCall;
   el_def=0;
   MethodCall @[0] {
    desc="resets input data, before getting new external inputs data from apply inputs call";
    flags=;
    result_var=NULL;
    obj=.projects[0].programs.gp[1][1].args[0]$13$;
    method=Network::Init_InputData;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   ProgramCall @[1] {
    desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
    flags=;
    target=.projects[0].programs.gp[1][2]$14$;
    targ_ld_init="*ApplyInputs*";
    prog_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=LeabraNetwork;
      type="SoNetwork*";
      name="network";
      required=1;
      def_val=;
      expr {
       expr="network";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=DataTable;
      type="DataTable*";
      name="input_data";
      required=1;
      def_val=;
      expr {
       expr="input_data";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ input_data;       };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[2] {
    desc="initializes various counters at start of trial";
    flags=;
    result_var=NULL;
    obj=$13$;
    method=SoNetwork::Trial_Run;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   MethodCall @[3] {
    desc=;
    flags=;
    result_var=NULL;
    obj=$13$;
    method=LeabraNetwork::Compute_TrialStats;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   ProgramCall @[4] {
    desc="records data about the trial-level processing to a datatable for graphing/processing";
    flags=;
    target=.projects[0].programs.gp[1][3]$15$;
    targ_ld_init="*SoTrialMonitor*";
    prog_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=Network;
      type="SoNetwork*";
      name="network";
      required=1;
      def_val=;
      expr {
       expr="network";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
    };
   };
   NetUpdateView @[5] {
    desc="update the network view(s) (only if update_net_view is true)";
    flags=;
    network_var=$13$;
    update_var=.projects[0].programs.gp[1][1].vars[0]$16$;
   };
  };
 };
 Program @[2] {
  name="ApplyInputsTest";
  tags=;
  desc="apply the current input data to the network as external input and target values";
  flags=;
  objs {
   name=;
   el_typ=LayerWriter;
   el_def=0;
   LayerWriter @[0] {
    name="LayerWriter_0";
    data=$2$;
    network=$1$;
    layer_data {
     name=;
     el_typ=LayerWriterEl;
     el_def=0;
     LayerWriterEl @[0] {
      chan_name="Input";
      net_target=LAYER;
      layer_name="Input";
      offset {x=0: y=0: };
      use_layer_type=1;
      ext_flags=;
      noise {name="": type=NONE: mean=0: var=0.5: par=1: };
     };
     LayerWriterEl @[1] {
      chan_name="Output";
      net_target=LAYER;
      layer_name="Output";
      offset {x=0: y=0: };
      use_layer_type=1;
      ext_flags=;
      noise {name="": type=NONE: mean=0: var=0.5: par=1: };
     };
     LayerWriterEl @[2] {
      chan_name="Name";
      net_target=TRIAL_NAME;
      layer_name=;
      offset {x=0: y=0: };
      use_layer_type=1;
      ext_flags=;
      noise {name="": type=NONE: mean=0: var=0.5: par=1: };
     };
    };
   };
  };
  types {
   name=;
   el_typ=ProgType;
   el_def=0;
  };
  args {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=LeabraNetwork;
    object_val=$1$;
    objs_ptr=0;
    flags=NULL_CHECK;
    desc="network to apply inputs to -- typically set by calling program";
   };
   ProgVar @[1] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=$2$;
    objs_ptr=0;
    flags=NULL_CHECK;
    desc="input datatable containing input/output patterns";
   };
  };
  vars {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="LayerWriter_0";
    var_type=T_Object;
    object_type=LayerWriter;
    object_val=.projects[0].programs.gp[1][2].objs[0]$17$;
    objs_ptr=1;
    flags=NULL_CHECK;
    desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
   };
  };
  functions {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  load_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  init_code {
   name=;
   el_typ=MethodCall;
   el_def=0;
   MethodCall @[0] {
    desc="sets the datatable and network for the layer writer, so it knows what to write to";
    flags=;
    result_var=NULL;
    obj=.projects[0].programs.gp[1][2].vars[0]$18$;
    method=LayerWriter::SetDataNetwork;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=DataBlock_ptr;
      type="DataBlock*";
      name="db";
      required=0;
      def_val=;
      expr {
       expr="input_data";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ input_data;       };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=Network_ptr;
      type="Network*";
      name="net";
      required=0;
      def_val=;
      expr {
       expr="network";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[1] {
    desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
    flags=;
    result_var=NULL;
    obj=$18$;
    method=taList_impl::CheckConfig;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="quiet";
      required=0;
      def_val="false";
      expr {
       expr="false";
       flags=;
       var_expr="false";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
  };
  prog_code {
   name=;
   el_typ=MethodCall;
   el_def=0;
   MethodCall @[0] {
    desc="apply inputs to the network!  layer writer has all the key specs";
    flags=;
    result_var=NULL;
    obj=$18$;
    method=LayerWriter::ApplyInputData;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
  };
 };
 Program @[3] {
  name="SoTrialMonitorTest";
  tags="So, Std, Monitor";
  desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
  flags=;
  objs {
   name=;
   el_typ=NetMonitor;
   el_def=0;
   NetMonitor @[0] {
    name="trial_netmon";
    items {
     name=;
     el_typ=NetMonItem;
     el_def=0;
     NetMonItem @[0] {
      name="batch";
      computed=0;
      object_type=LeabraNetwork;
      object=$1$;
      variable="batch";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[1] {
      name="epoch";
      computed=0;
      object_type=LeabraNetwork;
      object=$1$;
      variable="epoch";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[2] {
      name="trial";
      computed=0;
      object_type=LeabraNetwork;
      object=$1$;
      variable="trial";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[3] {
      name="trial_name";
      computed=0;
      object_type=LeabraNetwork;
      object=$1$;
      variable="trial_name";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[4] {
      name="group_name";
      computed=0;
      object_type=LeabraNetwork;
      object=$1$;
      variable="group_name";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[5] {
      name="sse";
      computed=0;
      object_type=LeabraNetwork;
      object=$1$;
      variable="sse";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     };
    };
    network=$1$;
    data=.projects[0].data.gp[1][0]$19$;
    rmv_orphan_cols=1;
   };
  };
  types {
   name=;
   el_typ=ProgType;
   el_def=0;
  };
  args {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=Network;
    object_val=$1$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="network to record data from";
   };
  };
  vars {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="trial_mon_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=$3$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="data table to record trial-level data to (this program writes new data to this table!)";
   };
   ProgVar @[1] {
    name="trial_netmon";
    var_type=T_Object;
    object_type=NetMonitor;
    object_val=.projects[0].programs.gp[1][3].objs[0]$20$;
    objs_ptr=1;
    flags=NULL_CHECK;
    desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
   };
  };
  functions {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  load_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  init_code {
   name=;
   el_typ=MethodCall;
   el_def=0;
   MethodCall @[0] {
    desc="set the network and datatable for the NetMonitor";
    flags=;
    result_var=NULL;
    obj=.projects[0].programs.gp[1][3].vars[1]$21$;
    method=NetMonitor::SetDataNetwork;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=DataTable_ptr;
      type="DataTable*";
      name="dt";
      required=0;
      def_val=;
      expr {
       expr="trial_mon_data";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ trial_mon_data;       };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=Network_ptr;
      type="Network*";
      name="net";
      required=0;
      def_val=;
      expr {
       expr="network";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[1] {
    desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
    flags=;
    result_var=NULL;
    obj=$21$;
    method=taBase::CheckConfig;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="quiet";
      required=0;
      def_val="false";
      expr {
       expr="false";
       flags=;
       var_expr="false";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[2] {
    desc="update the monitor items and data schema based on current settings of the NetMonitor object";
    flags=;
    result_var=NULL;
    obj=$21$;
    method=NetMonitor::UpdateMonitors;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="reset_first";
      required=0;
      def_val="false";
      expr {
       expr="true";
       flags=;
       var_expr="true";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
  };
  prog_code {
   name=;
   el_typ=MethodCall;
   el_def=0;
   MethodCall @[0] {
    desc="add a new blank row to the data";
    flags=;
    result_var=NULL;
    obj=.projects[0].programs.gp[1][3].vars[0]$22$;
    method=DataTable::AddBlankRow;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   MethodCall @[1] {
    desc="get the new monitor data from the network and other sources -- this does the main work";
    flags=;
    result_var=NULL;
    obj=$21$;
    method=NetMonitor::GetMonVals;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   MethodCall @[2] {
    desc="update views and other things after writing new data to monitor data table";
    flags=;
    result_var=NULL;
    obj=$22$;
    method=DataBlock::WriteClose;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   MethodCall @[3] {
    desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
    flags=;
    result_var=NULL;
    obj=.projects[0].programs.gp[1][3].args[0]$23$;
    method=Network::DMem_ShareTrialData;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=DataTable_ptr;
      type="DataTable*";
      name="dt";
      required=1;
      def_val=;
      expr {
       expr="trial_mon_data";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ trial_mon_data;       };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=int;
      type="int";
      name="n_rows";
      required=0;
      def_val="1";
      expr {
       expr="1";
       flags=;
       var_expr="1";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
  };
 };
 Program @[4] {
  name="SoEpochMonitorTest";
  tags="So, Std, Monitor";
  desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
  flags=;
  objs {
   name=;
   el_typ=NetMonitor;
   el_def=0;
   NetMonitor @[0] {
    name="epoch_netmon";
    items {
     name=;
     el_typ=NetMonItem;
     el_def=0;
     NetMonItem @[0] {
      name="batch";
      computed=0;
      object_type=LeabraNetwork;
      object=$1$;
      variable="batch";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[1] {
      name="epoch";
      computed=0;
      object_type=LeabraNetwork;
      object=$1$;
      variable="epoch";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[2] {
      name="avg_sse";
      computed=0;
      object_type=LeabraNetwork;
      object=$1$;
      variable="avg_sse";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[3] {
      name="cnt_err";
      computed=0;
      object_type=LeabraNetwork;
      object=$1$;
      variable="cnt_err";
      var_label=;
      name_style=AUTO_NAME;
      max_name_len=6;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[4] {
      name="epoch_time_tot";
      computed=1;
      object_type=NULL;
      object=NULL;
      variable="act";
      var_label=;
      name_style=MY_NAME;
      max_name_len=6;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     };
     NetMonItem @[5] {
      name="epoch_time_usr";
      computed=1;
      object_type=NULL;
      object=NULL;
      variable="act";
      var_label=;
      name_style=MY_NAME;
      max_name_len=6;
      val_type=VT_FLOAT;
      matrix=0;
      matrix_geom{       };
      pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
      pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
     };
    };
    network=$1$;
    data=.projects[0].data.gp[1][1]$24$;
    rmv_orphan_cols=1;
   };
  };
  types {
   name=;
   el_typ=ProgType;
   el_def=0;
  };
  args {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="network";
    var_type=T_Object;
    object_type=Network;
    object_val=$1$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="network to get data from";
   };
  };
  vars {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="epoch_mon_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=.projects[0].data.gp[1][3]$25$;
    objs_ptr=0;
    flags=CTRL_PANEL|NULL_CHECK;
    desc="data table to write the epoch data to";
   };
   ProgVar @[1] {
    name="epoch_netmon";
    var_type=T_Object;
    object_type=NetMonitor;
    object_val=.projects[0].programs.gp[1][4].objs[0]$26$;
    objs_ptr=1;
    flags=NULL_CHECK;
    desc="network monitor object that contains full specs for what to record and where to get it";
   };
   ProgVar @[2] {
    name="epoch_timer";
    var_type=T_Object;
    object_type=TimeUsed;
    object_val=$4$;
    objs_ptr=0;
    flags=NULL_CHECK;
    desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
   };
  };
  functions {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  load_code {
   name=;
   el_typ=AssignExpr;
   el_def=0;
  };
  init_code {
   name=;
   el_typ=MethodCall;
   el_def=0;
   AssignExpr @[0] {
    desc="get the epoch timer from current network";
    flags=;
    result_var=.projects[0].programs.gp[1][4].vars[2]$27$;
    expr {
     expr="network.epoch_time";
     flags=;
     var_expr="$#0#$.epoch_time";
     vars {
     };
     var_names{ network;     };
     bad_vars{      };
    };
   };
   MethodCall @[1] {
    desc="set data and network on NetMonitor object";
    flags=;
    result_var=NULL;
    obj=.projects[0].programs.gp[1][4].vars[1]$28$;
    method=NetMonitor::SetDataNetwork;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=DataTable_ptr;
      type="DataTable*";
      name="dt";
      required=0;
      def_val=;
      expr {
       expr="epoch_mon_data";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ epoch_mon_data;       };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=Network_ptr;
      type="Network*";
      name="net";
      required=0;
      def_val=;
      expr {
       expr="network";
       flags=;
       var_expr="$#0#$";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[2] {
    desc="check configuration and emit errors/warnings for problems";
    flags=;
    result_var=NULL;
    obj=$28$;
    method=taBase::CheckConfig;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="quiet";
      required=0;
      def_val="false";
      expr {
       expr="false";
       flags=;
       var_expr="false";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[3] {
    desc="update the monitor items and data schema based on current settings of NetMonitor";
    flags=;
    result_var=NULL;
    obj=$28$;
    method=NetMonitor::UpdateMonitors;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=bool;
      type="bool";
      name="reset_first";
      required=0;
      def_val="false";
      expr {
       expr="true";
       flags=;
       var_expr="true";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
  };
  prog_code {
   name=;
   el_typ=MethodCall;
   el_def=0;
   MethodCall @[0] {
    desc="add a new blank row to the data";
    flags=;
    result_var=NULL;
    obj=.projects[0].programs.gp[1][4].vars[0]$29$;
    method=DataTable::AddBlankRow;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   MethodCall @[1] {
    desc="get the new monitor data and stor it into the data table -- this does the main job here";
    flags=;
    result_var=NULL;
    obj=$28$;
    method=NetMonitor::GetMonVals;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   AssignExpr @[2] {
    desc="get the epoch timer from current network";
    flags=;
    result_var=$27$;
    expr {
     expr="network.epoch_time";
     flags=;
     var_expr="$#0#$.epoch_time";
     vars {
     };
     var_names{ network;     };
     bad_vars{      };
    };
   };
   MethodCall @[3] {
    desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
    flags=;
    result_var=NULL;
    obj=$29$;
    method=DataTable::SetValColName;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=const_Variant_ref;
      type="const Variant&";
      name="val";
      required=0;
      def_val=;
      expr {
       expr="epoch_timer.used.GetTotSecs()";
       flags=;
       var_expr="$#0#$.used.GetTotSecs()";
       vars {
       };
       var_names{ epoch_timer;       };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=const_taString_ref;
      type="const taString&";
      name="col_name";
      required=0;
      def_val="\"\"";
      expr {
       expr="\"epoch_time_tot\"";
       flags=;
       var_expr="\"epoch_time_tot\"";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[2] {
      arg_type=int;
      type="int";
      name="row";
      required=0;
      def_val=;
      expr {
       expr="-1";
       flags=;
       var_expr="-1";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[4] {
    desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
    flags=;
    result_var=NULL;
    obj=$29$;
    method=DataTable::SetValColName;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=const_Variant_ref;
      type="const Variant&";
      name="val";
      required=0;
      def_val=;
      expr {
       expr="epoch_timer.used.GetUsrSecs()";
       flags=;
       var_expr="$#0#$.used.GetUsrSecs()";
       vars {
       };
       var_names{ epoch_timer;       };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=const_taString_ref;
      type="const taString&";
      name="col_name";
      required=0;
      def_val="\"\"";
      expr {
       expr="\"epoch_time_usr\"";
       flags=;
       var_expr="\"epoch_time_usr\"";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[2] {
      arg_type=int;
      type="int";
      name="row";
      required=0;
      def_val=;
      expr {
       expr="-1";
       flags=;
       var_expr="-1";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[5] {
    desc="update after writing new data to monitor data table";
    flags=;
    result_var=NULL;
    obj=$29$;
    method=DataBlock::WriteClose;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
  };
 };
};

// ta_Dump File v3.0 -- code v8.0.10.0 rev10813
Program .projects[0].programs.gp[0][9] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [0] {
 };

 ProgVar_List @.objs_vars = [0] {
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [1] {
  ProgVar @[0] { };
 };

 ProgVar_List @.vars = [6] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
  ProgVar @[3] { };
  ProgVar @[4] { };
  ProgVar @[5] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [0] {
 };

 ProgEl_List @.prog_code = [6] {
  If @[0] { 
   ProgEl_List @.true_code = [1] {
    ReturnExpr @[0] { };
   };
  };
  MiscCall @[1] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  MiscCall @[2] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  AssignExpr @[3] { };
  MethodCall @[4] { 
   ProgArg_List @.meth_args = [4] {
    ProgArg @[0] { };
    ProgArg @[1] { };
    ProgArg @[2] { };
    ProgArg @[3] { };
   };
  };
  MethodCall @[5] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
 };
};
Program .projects[0].programs.gp[0][9] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {name="DocLink": doc=.doc$$: };
 };
 name="SaveWeights";
 short_nm="SavWts";
 tags="Network, Weights";
 desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
 version {
  major=8;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 flags=NO_STOP_STEP|OBJS_UPDT_GUI;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=taNBase;
  el_def=0;
 };
 objs_vars {
  name="objs_vars";
  el_typ=ProgVar;
  el_def=0;
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=Network;
   object_val=.networks["Network_0"]$$<LeabraNetwork,Network_0>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="tag";
   var_type=T_String;
   string_val="_gui";
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="user-provided tag (startup script will set this!)";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="wts_subdir";
   var_type=T_String;
   string_val=;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="user-provided subdirectory to save weights in";
   init_from=NULL;
  };
  ProgVar @[2] {
   name="fname";
   var_type=T_String;
   string_val="/Users/oreilly/emergent/test/leabra_std.00_0010.wts.gz";
   object_scope=NULL;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="final generated file name -- do not edit!";
   init_from=NULL;
  };
  ProgVar @[3] {
   name="epoch_str";
   var_type=T_String;
   string_val="0010";
   object_scope=NULL;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="string rep of epoch with leading zeros";
   init_from=NULL;
  };
  ProgVar @[4] {
   name="batch_str";
   var_type=T_String;
   string_val="00";
   object_scope=NULL;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="string rep of batch with leading zeros";
   init_from=NULL;
  };
  ProgVar @[5] {
   name="final_tag";
   var_type=T_String;
   string_val=".00_0010";
   object_scope=NULL;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="batch + epoch";
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  If @[0] {
   name="If_iftaMiscdmemproc0";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="if (taMisc::dmem_proc > 0)";
   cond {
    expr="taMisc::dmem_proc > 0";
   };
   true_code {
    name="true_code";
    el_typ=ProgCode;
    el_def=0;
    ReturnExpr @[0] {
     name="ReturnExpr_return";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="return ";
     expr {
      expr=;
     };
    };
   };
  };
  MiscCall @[1] {
   name="MiscCall_batchstrtaMiscLe_osnetworkbatch2";
   desc="get current batch counter for file name, with leading zeros to length 3";
   flags=CAN_REVERT_TO_CODE;
   code_string="batch_str = taMisc::LeadingZeros(network.batch, 2)";
   result_var=.vars[4]$$;
   object_type=taMisc;
   method=taMisc::LeadingZeros;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=int;
     type="int";
     name="num";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network.batch";
     };
    };
    ProgArg @[1] {
     arg_type=int;
     type="int";
     name="len";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="2";
     };
    };
   };
  };
  MiscCall @[2] {
   name="MiscCall_epochstrtaMiscLe_osnetworkepoch4";
   desc="get current epoch counter with leading zeros to length 4";
   flags=CAN_REVERT_TO_CODE;
   code_string="epoch_str = taMisc::LeadingZeros(network.epoch, 4)";
   result_var=.vars[3]$$;
   object_type=taMisc;
   method=taMisc::LeadingZeros;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=int;
     type="int";
     name="num";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="network.epoch";
     };
    };
    ProgArg @[1] {
     arg_type=int;
     type="int";
     name="len";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="4";
     };
    };
   };
  };
  AssignExpr @[3] {
   name="AssignExpr_finaltagtagbatchstrepochstr";
   desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
   flags=CAN_REVERT_TO_CODE;
   code_string="final_tag = tag + \".\" + batch_str + \"_\" + epoch_str";
   result_var=.vars[5]$$;
   expr {
    expr="tag + \".\" + batch_str + \"_\" + epoch_str";
   };
  };
  MethodCall @[4] {
   name="MethodCall_fnamenetworkGetF_gwtssubdirfalse";
   desc="get a file name based on the project's current file name, for saving the weights";
   flags=CAN_REVERT_TO_CODE;
   code_string="fname = network->GetFileNameFmProject(\".wts.gz\", final_tag, wts_subdir, false)";
   result_var=.vars[2]$$;
   obj=.args[0]$$;
   method=taBase::GetFileNameFmProject;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_taString_ref;
     type="taString&";
     name="ext";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="\".wts.gz\"";
     };
    };
    ProgArg @[1] {
     arg_type=const_taString_ref;
     type="taString&";
     name="tag";
     required=0;
     def_val="\"\"";
     prev_expr=;
     expr {
      expr="final_tag";
     };
    };
    ProgArg @[2] {
     arg_type=const_taString_ref;
     type="taString&";
     name="subdir";
     required=0;
     def_val="\"\"";
     prev_expr=;
     expr {
      expr="wts_subdir";
     };
    };
    ProgArg @[3] {
     arg_type=bool;
     type="bool";
     name="dmem_proc_no";
     required=0;
     def_val="false";
     prev_expr=;
     expr {
      expr="false";
     };
    };
   };
   meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
   meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
  };
  MethodCall @[5] {
   name="MethodCall_networkSaveWeigh_meNetworkNETFMT";
   desc="save the weights to that file name";
   flags=CAN_REVERT_TO_CODE;
   code_string="network->SaveWeights(fname, Network::NET_FMT)";
   result_var=NULL;
   obj=$.args[0]$;
   method=Network::SaveWeights;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_taString_ref;
     type="taString&";
     name="fname";
     required=0;
     def_val="\"\"";
     prev_expr=;
     expr {
      expr="fname";
     };
    };
    ProgArg @[1] {
     arg_type=Network::WtSaveFormat;
     type="Network::WtSaveFormat";
     name="fmt";
     required=0;
     def_val="Network::NET_FMT";
     prev_expr=;
     expr {
      expr="Network::NET_FMT";
     };
    };
   };
   meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
   meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
  };
 };
 step_prog=NULL;
 step_n=1;
 doc {
  name="doc";
  desc=;
  web_doc=1;
  wiki="emergent";
  url="SaveWeights";
  full_url="https://grey.colorado.edu/emergent/index.php/SaveWeights";
  text_size=1;
  text=;
  html_text=;
 };
};

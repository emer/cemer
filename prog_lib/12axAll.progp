// ta_Dump File v2.0
Program_Group .projects[0].programs.gp[1] { 
  Program_Group .projects[0].programs.gp[1] = [2] {
    Program @[0] { 
      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgEl_List @.prog_code = [2] {
	MethodCall @[0] { };
	ForLoop @[1] { 
	  ProgEl_List @.loop_code = [1] {
	    ProgramCall @[0] { 
	      ProgArg_List @.prog_args = [1] {
		ProgArg @[0] { };
	      };
	    };
	  };
	};
      };
    };
    Program @[1] { 
      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [12] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { 
	  DynEnum @.dyn_enum_val = [4] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	    DynEnumItem @[2] { };
	    DynEnumItem @[3] { };
	  };
	};
	ProgVar @[4] { 
	  DynEnum @.dyn_enum_val = [4] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	    DynEnumItem @[2] { };
	    DynEnumItem @[3] { };
	  };
	};
	ProgVar @[5] { 
	  DynEnum @.dyn_enum_val = [4] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	    DynEnumItem @[2] { };
	    DynEnumItem @[3] { };
	  };
	};
	ProgVar @[6] { 
	  DynEnum @.dyn_enum_val = [3] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	    DynEnumItem @[2] { };
	  };
	};
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
      };

      ProgEl_List @.functions = [1] {
	Function @[0] { 
	  ProgVar_List @.args = [5] {
	    ProgVar @[0] { };
	    ProgVar @[1] { };
	    ProgVar @[2] { };
	    ProgVar @[3] { };
	    ProgVar @[4] { };
	  };

	  ProgEl_List @.fun_code = [6] {
	    MethodCall @[0] { };
	    MethodCall @[1] { 
	      ProgArg_List @.meth_args = [3] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
	      };
	    };
	    MethodCall @[2] { 
	      ProgArg_List @.meth_args = [3] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
	      };
	    };
	    MethodCall @[3] { 
	      ProgArg_List @.meth_args = [4] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
		ProgArg @[3] { };
	      };
	    };
	    MethodCall @[4] { 
	      ProgArg_List @.meth_args = [4] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
		ProgArg @[3] { };
	      };
	    };
	    IfElse @[5] { 
	      ProgEl_List @.true_code = [1] {
		MethodCall @[0] { 
		  ProgArg_List @.meth_args = [4] {
		    ProgArg @[0] { };
		    ProgArg @[1] { };
		    ProgArg @[2] { };
		    ProgArg @[3] { };
		  };
		};
	      };
	    };
	  };
	};
      };

      ProgEl_List @.init_code = [5] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [9] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	    ProgArg @[5] { };
	    ProgArg @[6] { };
	    ProgArg @[7] { };
	    ProgArg @[8] { };
	  };
	};
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [9] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	    ProgArg @[5] { };
	    ProgArg @[6] { };
	    ProgArg @[7] { };
	    ProgArg @[8] { };
	  };
	};
	MethodCall @[2] { 
	  ProgArg_List @.meth_args = [9] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	    ProgArg @[5] { };
	    ProgArg @[6] { };
	    ProgArg @[7] { };
	    ProgArg @[8] { };
	  };
	};
	MethodCall @[3] { 
	  ProgArg_List @.meth_args = [9] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	    ProgArg @[5] { };
	    ProgArg @[6] { };
	    ProgArg @[7] { };
	    ProgArg @[8] { };
	  };
	};
	MethodCall @[4] { 
	  ProgArg_List @.meth_args = [9] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	    ProgArg @[5] { };
	    ProgArg @[6] { };
	    ProgArg @[7] { };
	    ProgArg @[8] { };
	  };
	};
      };

      ProgEl_List @.prog_code = [4] {
	RandomCall @[0] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	RandomCall @[1] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	FunctionCall @[2] { 
	  ProgArg_List @.fun_args = [5] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	  };
	};
	ForLoop @[3] { 
	  ProgEl_List @.loop_code = [6] {
	    ProgVars @[0] { 
	      ProgVar_List @.local_vars = [3] {
		ProgVar @[0] { };
		ProgVar @[1] { };
		ProgVar @[2] { };
	      };
	    };
	    RandomCall @[1] { };
	    IfElse @[2] { 
	      ProgEl_List @.true_code = [3] {
		RandomCall @[0] { 
		  ProgArg_List @.meth_args = [1] {
		    ProgArg @[0] { };
		  };
		};
		AssignExpr @[1] { };
		AssignExpr @[2] { };
	      };

	      ProgEl_List @.false_code = [2] {
		RandomCall @[0] { 
		  ProgArg_List @.meth_args = [1] {
		    ProgArg @[0] { };
		  };
		};
		RandomCall @[1] { 
		  ProgArg_List @.meth_args = [1] {
		    ProgArg @[0] { };
		  };
		};
	      };
	    };
	    IfElse @[3] { 
	      ProgEl_List @.true_code = [1] {
		AssignExpr @[0] { };
	      };

	      ProgEl_List @.false_code = [1] {
		AssignExpr @[0] { };
	      };
	    };
	    FunctionCall @[4] { 
	      ProgArg_List @.fun_args = [5] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
		ProgArg @[3] { };
		ProgArg @[4] { };
	      };
	    };
	    FunctionCall @[5] { 
	      ProgArg_List @.fun_args = [5] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
		ProgArg @[3] { };
		ProgArg @[4] { };
	      };
	    };
	  };
	};
      };
    };
  };
};
Program_Group .projects[0].programs.gp[1] {
 name="12axAll";
 el_typ=Program;
 el_def=0;
 step_prog=.projects[0].programs.gp[1][1]$0$;
 desc="Generate InputData for 12-AX CPT task: Epoch + Trial";
 Program @[0] {
  name="12axEpoch";
  desc="Generate a full epoch's worth of trials for the 12-AX CPT task";
  flags=PF_NONE;
  objs {
   name=;
   el_typ=taOBase;
   el_def=0;
  };
  args {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=.projects[0].data.gp[0][0]$1$;
    objs_ptr=0;
    flags=PV_NONE;
    desc=;
   };
   ProgVar @[1] {
    name="n_per_epc";
    var_type=T_Int;
    int_val=25;
    objs_ptr=0;
    flags=PV_NONE;
    desc="number of trials (cue-probe pairs) per epoch";
   };
  };
  vars {
   name=;
   el_typ=ProgVar;
   el_def=0;
  };
  functions {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  load_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  init_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  prog_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
   MethodCall @[0] {
    desc=;
    flags=PEF_NONE;
    result_var=NULL;
    obj=.projects[0].programs.gp[1][0].args[0]$2$;
    method=DataTable::ResetData;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
    };
   };
   ForLoop @[1] {
    desc=;
    flags=PEF_NONE;
    loop_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     ProgramCall @[0] {
      desc=;
      flags=PEF_NONE;
      target=$0$;
      targ_ld_init="*12axTrial*";
      call_init=0;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	expr {
	 expr="input_data";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ input_data;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
    loop_test="i < n_per_epc";
    init_expr="int i = 0";
    loop_iter="i++";
   };
  };
 };
 Program @[1] {
  name="12axTrial";
  desc="Generate one trial (outer loop with multiple inner loops) of the 12-AX CPT Task";
  flags=NO_STOP;
  objs {
   name=;
   el_typ=taOBase;
   el_def=0;
  };
  args {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="input_data";
    var_type=T_Object;
    object_type=DataTable;
    object_val=$1$;
    objs_ptr=0;
    flags=PV_NONE;
    desc=;
   };
  };
  vars {
   name=;
   el_typ=ProgVar;
   el_def=0;
   ProgVar @[0] {
    name="max_maint";
    var_type=T_Int;
    int_val=4;
    objs_ptr=0;
    flags=PV_NONE;
    desc="maximum maintenance duration for outer loop";
   };
   ProgVar @[1] {
    name="targ_pct";
    var_type=T_Real;
    real_val=0.5;
    objs_ptr=0;
    flags=PV_NONE;
    desc="percent (proportion) of trials that are targets";
   };
   ProgVar @[2] {
    name="n_inner_trials";
    var_type=T_Int;
    int_val=1;
    objs_ptr=0;
    flags=PV_NONE;
    desc="number of inner-loop trials";
   };
   ProgVar @[3] {
    name="task";
    var_type=T_DynEnum;
    dyn_enum_val {
     name="Task";
     el_typ=DynEnumItem;
     el_def=0;
     value_idx=1;
     DynEnumItem @[0] {
      name="ONE";
      value=0;
      desc=;
     };
     DynEnumItem @[1] {
      name="TWO";
      value=1;
      desc=;
     };
     DynEnumItem @[2] {
      name="THREE";
      value=2;
      desc=;
     };
     DynEnumItem @[3] {
      name="N_TASKS";
      value=3;
      desc=;
     };
    };
    objs_ptr=0;
    flags=NO_CTRL_PANEL;
    desc="outer-loop task stimulus";
   };
   ProgVar @[4] {
    name="cue";
    var_type=T_DynEnum;
    dyn_enum_val {
     name="Cue";
     el_typ=DynEnumItem;
     el_def=0;
     value_idx=1;
     DynEnumItem @[0] {
      name="A";
      value=0;
      desc=;
     };
     DynEnumItem @[1] {
      name="B";
      value=1;
      desc=;
     };
     DynEnumItem @[2] {
      name="C";
      value=2;
      desc=;
     };
     DynEnumItem @[3] {
      name="N_CUES";
      value=3;
      desc=;
     };
    };
    objs_ptr=0;
    flags=NO_CTRL_PANEL;
    desc="first stimulus in cue-probe pair";
   };
   ProgVar @[5] {
    name="probe";
    var_type=T_DynEnum;
    dyn_enum_val {
     name="Probe";
     el_typ=DynEnumItem;
     el_def=0;
     value_idx=2;
     DynEnumItem @[0] {
      name="X";
      value=0;
      desc=;
     };
     DynEnumItem @[1] {
      name="Y";
      value=1;
      desc=;
     };
     DynEnumItem @[2] {
      name="Z";
      value=2;
      desc=;
     };
     DynEnumItem @[3] {
      name="N_PROBES";
      value=3;
      desc=;
     };
    };
    objs_ptr=0;
    flags=NO_CTRL_PANEL;
    desc="second stimulus in cue-probe pair";
   };
   ProgVar @[6] {
    name="output";
    var_type=T_DynEnum;
    dyn_enum_val {
     name="Output";
     el_typ=DynEnumItem;
     el_def=0;
     value_idx=0;
     DynEnumItem @[0] {
      name="L";
      value=0;
      desc=;
     };
     DynEnumItem @[1] {
      name="R";
      value=1;
      desc=;
     };
     DynEnumItem @[2] {
      name="N_OUTPUTS";
      value=2;
      desc=;
     };
    };
    objs_ptr=0;
    flags=NO_CTRL_PANEL;
    desc="output responses";
   };
   ProgVar @[7] {
    name="group_col";
    var_type=T_Int;
    int_val=0;
    objs_ptr=0;
    flags=NO_CTRL_PANEL;
    desc=;
   };
   ProgVar @[8] {
    name="name_col";
    var_type=T_Int;
    int_val=1;
    objs_ptr=0;
    flags=NO_CTRL_PANEL;
    desc=;
   };
   ProgVar @[9] {
    name="input_col";
    var_type=T_Int;
    int_val=2;
    objs_ptr=0;
    flags=NO_CTRL_PANEL;
    desc=;
   };
   ProgVar @[10] {
    name="output_col";
    var_type=T_Int;
    int_val=3;
    objs_ptr=0;
    flags=NO_CTRL_PANEL;
    desc=;
   };
   ProgVar @[11] {
    name="rewtarg_col";
    var_type=T_Int;
    int_val=4;
    objs_ptr=0;
    flags=NO_CTRL_PANEL;
    desc=;
   };
  };
  functions {
   name=;
   el_typ=ProgEl;
   el_def=0;
   Function @[0] {
    desc=;
    flags=PEF_NONE;
    return_val {
     name="rval";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=PV_NONE;
     desc=;
    };
    name="MakeEvent";
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="group";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=PV_NONE;
      desc="name for the group column";
     };
     ProgVar @[1] {
      name="name";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=PV_NONE;
      desc="Name for the Name Column";
     };
     ProgVar @[2] {
      name="in_idx";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=PV_NONE;
      desc="Index of input unit to turn on";
     };
     ProgVar @[3] {
      name="out_idx";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=PV_NONE;
      desc="Index of output unit to turn on";
     };
     ProgVar @[4] {
      name="rew_targ";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=PV_NONE;
      desc="is this a reward target trial?";
     };
    };
    fun_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=PEF_NONE;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][1].args[0]$3$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="set the task name";
      flags=PEF_NONE;
      result_var=NULL;
      obj=$3$;
      method=DataTable::SetValAsString;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=NULL;
	type="const taString&";
	name="val";
	expr {
	 expr="group";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ group;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=NULL;
	type="int";
	name="col";
	expr {
	 expr="group_col";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ group_col;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=NULL;
	type="int";
	name="row";
	expr {
	 expr="-1";
	 var_expr="-1";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[2] {
      desc="set the name";
      flags=PEF_NONE;
      result_var=NULL;
      obj=$3$;
      method=DataTable::SetValAsString;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=NULL;
	type="const taString&";
	name="val";
	expr {
	 expr="name";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ name;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=NULL;
	type="int";
	name="col";
	expr {
	 expr="name_col";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ name_col;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=NULL;
	type="int";
	name="row";
	expr {
	 expr="-1";
	 var_expr="-1";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[3] {
      desc="set the input";
      flags=PEF_NONE;
      result_var=NULL;
      obj=$3$;
      method=DataTable::SetValAsFloatM;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=NULL;
	type="float";
	name="val";
	expr {
	 expr="1.0";
	 var_expr="1.0";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=NULL;
	type="int";
	name="col";
	expr {
	 expr="input_col";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ input_col;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=NULL;
	type="int";
	name="row";
	expr {
	 expr="-1";
	 var_expr="-1";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[3] {
	arg_type=NULL;
	type="int";
	name="cell";
	expr {
	 expr="in_idx";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ in_idx;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the output";
      flags=PEF_NONE;
      result_var=NULL;
      obj=$3$;
      method=DataTable::SetValAsFloatM;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=NULL;
	type="float";
	name="val";
	expr {
	 expr="1.0";
	 var_expr="1.0";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=NULL;
	type="int";
	name="col";
	expr {
	 expr="output_col";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ output_col;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=NULL;
	type="int";
	name="row";
	expr {
	 expr="-1";
	 var_expr="-1";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[3] {
	arg_type=NULL;
	type="int";
	name="cell";
	expr {
	 expr="out_idx";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ out_idx;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     IfElse @[5] {
      desc=;
      flags=PEF_NONE;
      condition="rew_targ";
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="set as reward target trial: generates dopamine!";
	flags=PEF_NONE;
	result_var=NULL;
	obj=$3$;
	method=DataTable::SetValAsFloatM;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=NULL;
	  type="float";
	  name="val";
	  expr {
	   expr="1.0";
	   var_expr="1.0";
	   vars {
	   };
	   var_names{ 	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[1] {
	  arg_type=NULL;
	  type="int";
	  name="col";
	  expr {
	   expr="rewtarg_col";
	   var_expr="$#0";
	   vars {
	   };
	   var_names{ rewtarg_col;	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[2] {
	  arg_type=NULL;
	  type="int";
	  name="row";
	  expr {
	   expr="-1";
	   var_expr="-1";
	   vars {
	   };
	   var_names{ 	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[3] {
	  arg_type=NULL;
	  type="int";
	  name="cell";
	  expr {
	   expr="0";
	   var_expr="0";
	   vars {
	   };
	   var_names{ 	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
    };
   };
  };
  load_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
  };
  init_code {
   name=;
   el_typ=ProgEl;
   el_def=0;
   MethodCall @[0] {
    desc="make Group column";
    flags=PEF_NONE;
    result_var=NULL;
    obj=$3$;
    method=DataTable::FindMakeColName;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=NULL;
      type="const taString&";
      name="col_nm";
      expr {
       expr="\"Group\"";
       var_expr="\"Group\"";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=NULL;
      type="int&";
      name="col_idx";
      expr {
       expr="group_col";
       var_expr="$#0";
       vars {
       };
       var_names{ group_col;       };
       bad_vars{        };
      };
     };
     ProgArg @[2] {
      arg_type=NULL;
      type="taBase::ValType";
      name="val_type";
      expr {
       expr="taBase::VT_STRING";
       var_expr="taBase::VT_STRING";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[3] {
      arg_type=NULL;
      type="int";
      name="dims";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[4] {
      arg_type=NULL;
      type="int";
      name="d0";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[5] {
      arg_type=NULL;
      type="int";
      name="d1";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[6] {
      arg_type=NULL;
      type="int";
      name="d2";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[7] {
      arg_type=NULL;
      type="int";
      name="d3";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[8] {
      arg_type=NULL;
      type="int";
      name="d4";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[1] {
    desc="make Name column";
    flags=PEF_NONE;
    result_var=NULL;
    obj=$3$;
    method=DataTable::FindMakeColName;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=NULL;
      type="const taString&";
      name="col_nm";
      expr {
       expr="\"Name\"";
       var_expr="\"Name\"";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=NULL;
      type="int&";
      name="col_idx";
      expr {
       expr="name_col";
       var_expr="$#0";
       vars {
       };
       var_names{ name_col;       };
       bad_vars{        };
      };
     };
     ProgArg @[2] {
      arg_type=NULL;
      type="taBase::ValType";
      name="val_type";
      expr {
       expr="taBase::VT_STRING";
       var_expr="taBase::VT_STRING";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[3] {
      arg_type=NULL;
      type="int";
      name="dims";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[4] {
      arg_type=NULL;
      type="int";
      name="d0";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[5] {
      arg_type=NULL;
      type="int";
      name="d1";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[6] {
      arg_type=NULL;
      type="int";
      name="d2";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[7] {
      arg_type=NULL;
      type="int";
      name="d3";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[8] {
      arg_type=NULL;
      type="int";
      name="d4";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[2] {
    desc="make Input column";
    flags=PEF_NONE;
    result_var=NULL;
    obj=$3$;
    method=DataTable::FindMakeColName;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=NULL;
      type="const taString&";
      name="col_nm";
      expr {
       expr="\"Input\"";
       var_expr="\"Input\"";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=NULL;
      type="int&";
      name="col_idx";
      expr {
       expr="input_col";
       var_expr="$#0";
       vars {
       };
       var_names{ input_col;       };
       bad_vars{        };
      };
     };
     ProgArg @[2] {
      arg_type=NULL;
      type="taBase::ValType";
      name="val_type";
      expr {
       expr="taBase::VT_FLOAT";
       var_expr="taBase::VT_FLOAT";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[3] {
      arg_type=NULL;
      type="int";
      name="dims";
      expr {
       expr="2";
       var_expr="2";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[4] {
      arg_type=NULL;
      type="int";
      name="d0";
      expr {
       expr="3";
       var_expr="3";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[5] {
      arg_type=NULL;
      type="int";
      name="d1";
      expr {
       expr="3";
       var_expr="3";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[6] {
      arg_type=NULL;
      type="int";
      name="d2";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[7] {
      arg_type=NULL;
      type="int";
      name="d3";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[8] {
      arg_type=NULL;
      type="int";
      name="d4";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[3] {
    desc="make Output column";
    flags=PEF_NONE;
    result_var=NULL;
    obj=$3$;
    method=DataTable::FindMakeColName;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=NULL;
      type="const taString&";
      name="col_nm";
      expr {
       expr="\"Output\"";
       var_expr="\"Output\"";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=NULL;
      type="int&";
      name="col_idx";
      expr {
       expr="output_col";
       var_expr="$#0";
       vars {
       };
       var_names{ output_col;       };
       bad_vars{        };
      };
     };
     ProgArg @[2] {
      arg_type=NULL;
      type="taBase::ValType";
      name="val_type";
      expr {
       expr="taBase::VT_FLOAT";
       var_expr="taBase::VT_FLOAT";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[3] {
      arg_type=NULL;
      type="int";
      name="dims";
      expr {
       expr="2";
       var_expr="2";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[4] {
      arg_type=NULL;
      type="int";
      name="d0";
      expr {
       expr="2";
       var_expr="2";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[5] {
      arg_type=NULL;
      type="int";
      name="d1";
      expr {
       expr="1";
       var_expr="1";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[6] {
      arg_type=NULL;
      type="int";
      name="d2";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[7] {
      arg_type=NULL;
      type="int";
      name="d3";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[8] {
      arg_type=NULL;
      type="int";
      name="d4";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   MethodCall @[4] {
    desc="make RewTarg column";
    flags=PEF_NONE;
    result_var=NULL;
    obj=$3$;
    method=DataTable::FindMakeColName;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=NULL;
      type="const taString&";
      name="col_nm";
      expr {
       expr="\"RewTarg\"";
       var_expr="\"RewTarg\"";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=NULL;
      type="int&";
      name="col_idx";
      expr {
       expr="rewtarg_col";
       var_expr="$#0";
       vars {
       };
       var_names{ rewtarg_col;       };
       bad_vars{        };
      };
     };
     ProgArg @[2] {
      arg_type=NULL;
      type="taBase::ValType";
      name="val_type";
      expr {
       expr="taBase::VT_FLOAT";
       var_expr="taBase::VT_FLOAT";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[3] {
      arg_type=NULL;
      type="int";
      name="dims";
      expr {
       expr="2";
       var_expr="2";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[4] {
      arg_type=NULL;
      type="int";
      name="d0";
      expr {
       expr="1";
       var_expr="1";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[5] {
      arg_type=NULL;
      type="int";
      name="d1";
      expr {
       expr="1";
       var_expr="1";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[6] {
      arg_type=NULL;
      type="int";
      name="d2";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[7] {
      arg_type=NULL;
      type="int";
      name="d3";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[8] {
      arg_type=NULL;
      type="int";
      name="d4";
      expr {
       expr="0";
       var_expr="0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
  };
  prog_code {
   name=;
   el_typ=UserScript;
   el_def=0;
   RandomCall @[0] {
    desc=;
    flags=PEF_NONE;
    result_var=.projects[0].programs.gp[1][1].vars[3]$4$;
    object_type=Random;
    method=Random::IntZeroN;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=int;
      type="int";
      name="n";
      expr {
       expr="2";
       var_expr="2";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   RandomCall @[1] {
    desc=;
    flags=PEF_NONE;
    result_var=.projects[0].programs.gp[1][1].vars[2]$5$;
    object_type=Random;
    method=Random::IntMinMax;
    meth_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=NULL;
      type="int";
      name="min";
      expr {
       expr="1";
       var_expr="1";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=NULL;
      type="int";
      name="max";
      expr {
       expr="max_maint";
       var_expr="$#0";
       vars {
       };
       var_names{ max_maint;       };
       bad_vars{        };
      };
     };
    };
   };
   FunctionCall @[2] {
    desc="Create the Task Event";
    flags=PEF_NONE;
    result_var=NULL;
    fun=.projects[0].programs.gp[1][1].functions[0]$6$;
    fun_args {
     name=;
     el_typ=ProgArg;
     el_def=0;
     ProgArg @[0] {
      arg_type=taString;
      type="String";
      name="group";
      expr {
       expr="task";
       var_expr="$#0";
       vars {
       };
       var_names{ task;       };
       bad_vars{        };
      };
     };
     ProgArg @[1] {
      arg_type=taString;
      type="String";
      name="name";
      expr {
       expr="task";
       var_expr="$#0";
       vars {
       };
       var_names{ task;       };
       bad_vars{        };
      };
     };
     ProgArg @[2] {
      arg_type=int;
      type="int";
      name="in_idx";
      expr {
       expr="task";
       var_expr="$#0";
       vars {
       };
       var_names{ task;       };
       bad_vars{        };
      };
     };
     ProgArg @[3] {
      arg_type=int;
      type="int";
      name="out_idx";
      expr {
       expr="Output::L";
       var_expr="Output::L";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
     ProgArg @[4] {
      arg_type=bool;
      type="bool";
      name="rew_targ";
      expr {
       expr="false";
       var_expr="false";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
     };
    };
   };
   ForLoop @[3] {
    desc="generate the cue-probe trials";
    flags=PEF_NONE;
    loop_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     ProgVars @[0] {
      desc=;
      flags=PEF_NONE;
      local_vars {
       name=;
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="trg_rnd_prob";
	var_type=T_Real;
	real_val=0;
	objs_ptr=0;
	flags=PV_NONE;
	desc="random probability value for generating a target";
       };
       ProgVar @[1] {
	name="a_or_b";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=PV_NONE;
	desc="random A or B cue/probe value";
       };
       ProgVar @[2] {
	name="probe_output";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=PV_NONE;
	desc="output value for the probe trial: depends on whether this is a target cue-probe sequence for given task";
       };
      };
     };
     RandomCall @[1] {
      desc=;
      flags=PEF_NONE;
      result_var=.projects[0].programs.gp[1][1].prog_code[3].loop_code[0].local_vars[0]$7$;
      object_type=Random;
      method=Random::ZeroOne;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[2] {
      desc=;
      flags=PEF_NONE;
      condition="trg_rnd_prob < targ_pct";
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       RandomCall @[0] {
	desc=;
	flags=PEF_NONE;
	result_var=.projects[0].programs.gp[1][1].prog_code[3].loop_code[0].local_vars[1]$8$;
	object_type=Random;
	method=Random::IntZeroN;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=NULL;
	  type="int";
	  name="n";
	  expr {
	   expr="2";
	   var_expr="2";
	   vars {
	   };
	   var_names{ 	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       AssignExpr @[1] {
	desc=;
	flags=PEF_NONE;
	result_var=.projects[0].programs.gp[1][1].vars[4]$9$;
	expr_val {
	 expr="Cue::A + a_or_b";
	 var_expr="Cue::A + $#0";
	 vars {
	 };
	 var_names{ a_or_b;	 };
	 bad_vars{ 	 };
	};
       };
       AssignExpr @[2] {
	desc=;
	flags=PEF_NONE;
	result_var=.projects[0].programs.gp[1][1].vars[5]$10$;
	expr_val {
	 expr="Probe::X + a_or_b";
	 var_expr="Probe::X + $#0";
	 vars {
	 };
	 var_names{ a_or_b;	 };
	 bad_vars{ 	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       RandomCall @[0] {
	desc=;
	flags=PEF_NONE;
	result_var=$9$;
	object_type=Random;
	method=Random::IntZeroN;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="n";
	  expr {
	   expr="Cue::N_CUES";
	   var_expr="Cue::N_CUES";
	   vars {
	   };
	   var_names{ 	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       RandomCall @[1] {
	desc=;
	flags=PEF_NONE;
	result_var=$10$;
	object_type=Random;
	method=Random::IntZeroN;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=int;
	  type="int";
	  name="n";
	  expr {
	   expr="Probe::N_PROBES";
	   var_expr="Probe::N_PROBES";
	   vars {
	   };
	   var_names{ 	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
      };
     };
     IfElse @[3] {
      desc="check for targets";
      flags=PEF_NONE;
      condition="((task == Task::ONE) && (cue == Cue::A) && (probe == Probe::X)) 
  || ((task == Task::TWO) && (cue == Cue::B) && (probe == Probe::Y))";
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=PEF_NONE;
	result_var=.projects[0].programs.gp[1][1].prog_code[3].loop_code[0].local_vars[2]$11$;
	expr_val {
	 expr="Output::R";
	 var_expr="Output::R";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=PEF_NONE;
	result_var=$11$;
	expr_val {
	 expr="Output::L";
	 var_expr="Output::L";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     FunctionCall @[4] {
      desc="Create the Cue Event";
      flags=PEF_NONE;
      result_var=NULL;
      fun=$6$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="group";
	expr {
	 expr="task";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ task;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=taString;
	type="String";
	name="name";
	expr {
	 expr="cue";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ cue;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="in_idx";
	expr {
	 expr="Task::N_TASKS + cue";
	 var_expr="Task::N_TASKS + $#0";
	 vars {
	 };
	 var_names{ cue;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[3] {
	arg_type=int;
	type="int";
	name="out_idx";
	expr {
	 expr="Output::L";
	 var_expr="Output::L";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[4] {
	arg_type=bool;
	type="bool";
	name="rew_targ";
	expr {
	 expr="false";
	 var_expr="false";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     FunctionCall @[5] {
      desc="Create the Probe Event";
      flags=PEF_NONE;
      result_var=NULL;
      fun=$6$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taString;
	type="String";
	name="group";
	expr {
	 expr="task";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ task;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=taString;
	type="String";
	name="name";
	expr {
	 expr="probe";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ probe;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="in_idx";
	expr {
	 expr="Task::N_TASKS + Cue::N_CUES + probe";
	 var_expr="Task::N_TASKS + Cue::N_CUES + $#0";
	 vars {
	 };
	 var_names{ probe;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[3] {
	arg_type=int;
	type="int";
	name="out_idx";
	expr {
	 expr="probe_output";
	 var_expr="$#0";
	 vars {
	 };
	 var_names{ probe_output;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[4] {
	arg_type=bool;
	type="bool";
	name="rew_targ";
	expr {
	 expr="true";
	 var_expr="true";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
    loop_test="i < n_inner_trials";
    init_expr="int i = 0";
    loop_iter="i++";
   };
  };
 };
};

// ta_Dump File v3.0 -- code v5.0.2.0
Program .projects[0].programs.gp[0][4] { 
  ProgObjList @.objs = [0] {
  };

  ProgType_List @.types = [0] {
  };

  ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
  };

  ProgVar_List @.vars = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
  };

  Function_List @.functions = [0] {
  };

  ProgEl_List @.load_code = [0] {
  };

  ProgEl_List @.init_code = [1] {
    NetCounterInit @[0] { };
  };

  ProgEl_List @.prog_code = [9] {
    NetCounterInit @[0] { };
    IfElse @[1] { 
      ProgEl_List @.true_code = [1] {
	AssignExpr @[0] { };
      };

      ProgEl_List @.false_code = [0] {
      };
    };
    MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
    };
    ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
      };
    };
    MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
    };
    WhileLoop @[5] { 
      ProgEl_List @.loop_code = [4] {
	ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	NetCounterIncr @[1] { };
	IfContinue @[2] { };
	IfBreak @[3] { };
      };
    };
    MethodCall @[6] { 
      ProgArg_List @.meth_args = [0] {
      };
    };
    IfElse @[7] { 
      ProgEl_List @.true_code = [1] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	};
      };

      ProgEl_List @.false_code = [0] {
      };
    };
    NetUpdateView @[8] { };
  };
};
Program .projects[0].programs.gp[0][4] {
 name="CsSettle";
 short_nm="Settle";
 tags="Cs, Std";
 desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
 flags=;
 objs {
  name=;
  el_typ=taOBase;
  el_def=0;
 };
 types {
  name=;
  el_typ=ProgType;
  el_def=0;
 };
 args {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="network";
   var_type=T_Object;
   object_type=CsNetwork;
   object_val=.projects[0].networks[0]$$<CsNetwork,Network_0>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[1] {
   name="input_data";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].data.gp[0][0]$$<DataTable,StdInputData>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 vars {
  name=;
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="cycle";
   var_type=T_Int;
   int_val=0;
   objs_ptr=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="current cycle of settling (local loop counter)";
   init_from=NULL;
  };
  ProgVar @[1] {
   name="min_cycles";
   var_type=T_Int;
   int_val=20;
   objs_ptr=0;
   flags=NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="sets the minimum number of cycles to settle for, regardless of network state changes, etc";
   init_from=NULL;
  };
  ProgVar @[2] {
   name="update_net_view";
   var_type=T_Bool;
   bool_val=1;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="if true, will update network views at end of settling";
   init_from=NULL;
  };
 };
 functions {
  name=;
  el_typ=Function;
  el_def=0;
 };
 load_code {
  name=;
  el_typ=ProgEl;
  el_def=0;
 };
 init_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc="initialize local cycle counter and corresponding counter on network";
   flags=;
   network_var=.projects[0].programs.gp[0][4].args[0]$$;
   local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$$;
   counter=Network::cycle;
   update_after=0;
  };
 };
 prog_code {
  name=;
  el_typ=NetCounterInit;
  el_def=0;
  NetCounterInit @[0] {
   desc="initialize local cycle counter and corresponding counter on network";
   flags=;
   network_var=$.projects[0].programs.gp[0][4].args[0]$;
   local_ctr_var=$.projects[0].programs.gp[0][4].vars[0]$;
   counter=Network::cycle;
   update_after=0;
  };
  IfElse @[1] {
   desc="if not deterministic, set min_cycles = max_cycles!";
   flags=;
   cond {
    expr="!network.deterministic";
   };
   true_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    AssignExpr @[0] {
     desc="if not determinstic, must settle for full number of cycles (bypasses use of maxda to stop settling)";
     flags=;
     result_var=.projects[0].programs.gp[0][4].vars[1]$$;
     expr {
      expr="network.cycle_max";
     };
    };
   };
   false_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
  };
  MethodCall @[2] {
   desc="resets input data, before getting new external inputs data from apply inputs call";
   flags=;
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][4].args[0]$;
   method=Network::Init_InputData;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  ProgramCall @[3] {
   desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
   flags=;
   prog_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type="CsNetwork*";
     name="network";
     required=1;
     def_val=;
     expr {
      expr="network";
     };
    };
    ProgArg @[1] {
     arg_type=DataTable;
     type="DataTable*";
     name="input_data";
     required=1;
     def_val=;
     expr {
      expr="input_data";
     };
    };
   };
   target=.projects[0].programs.gp[0][6]$$<Program,ApplyInputs>;
   targ_ld_init="*ApplyInputs*";
  };
  MethodCall @[4] {
   desc="initializes various counters at start of settling";
   flags=;
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][4].args[0]$;
   method=CsNetwork::Settle_Init;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  WhileLoop @[5] {
   desc="the main loop over cycles of updating";
   flags=;
   loop_code {
    name=;
    el_typ=ProgramCall;
    el_def=0;
    ProgramCall @[0] {
     desc="run the cycle program, which computes one cycle of activations";
     flags=;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=CsNetwork;
       type="CsNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
     };
     target=.projects[0].programs.gp[0][5]$$<Program,CsCycle>;
     targ_ld_init="*CsCycle*";
    };
    NetCounterIncr @[1] {
     desc="increment cycle counter (also on network)";
     flags=;
     network_var=$.projects[0].programs.gp[0][4].args[0]$;
     local_ctr_var=$.projects[0].programs.gp[0][4].vars[0]$;
     counter=Network::cycle;
     update_after=0;
    };
    IfContinue @[2] {
     desc="avoid subsequent stopping criteria if below min_cycles";
     flags=;
     cond {
      expr="cycle < min_cycles";
     };
    };
    IfBreak @[3] {
     desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
     flags=;
     cond {
      expr="(network.maxda < network.maxda_stopcrit)";
     };
    };
   };
   test {
    expr="cycle < network.cycle_max";
   };
  };
  MethodCall @[6] {
   desc="perform final operations at end of settling (storing final activations, etc)";
   flags=;
   result_var=NULL;
   obj=$.projects[0].programs.gp[0][4].args[0]$;
   method=CsNetwork::Settle_Final;
   meth_args {
    name=;
    el_typ=ProgArg;
    el_def=0;
   };
  };
  IfElse @[7] {
   desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
   flags=;
   cond {
    expr="network.phase == CsNetwork::MINUS_PHASE";
   };
   true_code {
    name=;
    el_typ=MethodCall;
    el_def=0;
    MethodCall @[0] {
     desc="compute trial-level statistics";
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs.gp[0][4].args[0]$;
     method=LeabraNetwork::Compute_TrialStats;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
   false_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
  };
  NetUpdateView @[8] {
   desc="update network views, if update_net_view == true";
   flags=;
   network_var=$.projects[0].programs.gp[0][4].args[0]$;
   update_var=.projects[0].programs.gp[0][4].vars[2]$$;
  };
 };
 step_prog=NULL;
 step_n=1;
};

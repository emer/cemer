// ta_Dump File v3.0 -- code v7.8.6.0 rev9341
Program .projects[0].programs.gp[3][7] { 
 UserDataItem_List @*(.user_data_) {
  UserDataItem @[0] { };
 };

 ProgObjList @.objs = [11] {
  DataTable @[0] { 
   DataTableCols @.data = [5] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[3] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[1] { 
   DataTableCols @.data = [6] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[3] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[5] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[2] { 
   DataTableCols @.data = [2] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[3] { 
   DataTableCols @.data = [5] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    int_Data @[3] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    String_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[4] { 
   DataTableCols @.data = [5] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    float_Data @[3] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[4] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  DataTable @[5] { 
   DataTableCols @.data = [2] {
    String_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
    String_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
  taCanvas @[6] { };
  taCanvas @[7] { };
  taCanvas @[8] { };
  taSound @[9] { };
  DataTable @[10] { 
   DataTableCols @.data = [3] {
    float_Data @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    float_Data @[1] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
    float_Data @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };
    };
   };

   DataOpList @.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.control_panel_cells = [0] {
   };
  };
 };

 ProgType_List @.types = [1] {
  DynEnumType @[0] { 
   DynEnumItem_List @.enums = [2] {
    DynEnumItem @[0] { };
    DynEnumItem @[1] { };
   };
  };
 };

 ProgVar_List @.args = [0] {
 };

 ProgVar_List @.vars = [61] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
  ProgVar @[3] { };
  ProgVar @[4] { };
  ProgVar @[5] { };
  ProgVar @[6] { };
  ProgVar @[7] { };
  ProgVar @[8] { };
  ProgVar @[9] { };
  ProgVar @[10] { };
  ProgVar @[11] { };
  ProgVar @[12] { };
  ProgVar @[13] { };
  ProgVar @[14] { };
  ProgVar @[15] { };
  ProgVar @[16] { };
  ProgVar @[17] { };
  ProgVar @[18] { };
  ProgVar @[19] { };
  ProgVar @[20] { };
  ProgVar @[21] { };
  ProgVar @[22] { };
  ProgVar @[23] { };
  ProgVar @[24] { };
  ProgVar @[25] { };
  ProgVar @[26] { };
  ProgVar @[27] { };
  ProgVar @[28] { };
  ProgVar @[29] { };
  ProgVar @[30] { };
  ProgVar @[31] { };
  ProgVar @[32] { };
  ProgVar @[33] { };
  ProgVar @[34] { };
  ProgVar @[35] { };
  ProgVar @[36] { };
  ProgVar @[37] { };
  ProgVar @[38] { };
  ProgVar @[39] { };
  ProgVar @[40] { };
  ProgVar @[41] { };
  ProgVar @[42] { };
  ProgVar @[43] { };
  ProgVar @[44] { };
  ProgVar @[45] { };
  ProgVar @[46] { };
  ProgVar @[47] { };
  ProgVar @[48] { };
  ProgVar @[49] { };
  ProgVar @[50] { };
  ProgVar @[51] { };
  ProgVar @[52] { };
  ProgVar @[53] { };
  ProgVar @[54] { };
  ProgVar @[55] { };
  ProgVar @[56] { };
  ProgVar @[57] { };
  ProgVar @[58] { };
  ProgVar @[59] { };
  ProgVar @[60] { };
 };

 Function_List @.functions = [20] {
  Function @[0] { 
   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgEl_List @.fun_code = [7] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [2] {
      ProgVar @[0] { };
      ProgVar @[1] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [1] {
      ReturnExpr @[0] { };
     };
    };
    VarIncr @[3] { };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    PrintVar @[5] { };
    If @[6] { 
     ProgEl_List @.true_code = [5] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      If @[1] { 
       ProgEl_List @.true_code = [1] {
	ReturnExpr @[0] { };
       };
      };
      VarIncr @[2] { };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      ReturnExpr @[4] { };
     };
    };
   };
  };
  Function @[1] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [3] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [7] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
      ProgVar @[5] { };
      ProgVar @[6] { };
     };
    };
    DataGenCall @[1] { 
     ProgArg_List @.meth_args = [7] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
      ProgArg @[6] { };
     };
    };
    ForLoop @[2] { 
     ProgEl_List @.loop_code = [10] {
      AssignExpr @[0] { };
      AssignExpr @[1] { };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      If @[4] { 
       ProgEl_List @.true_code = [3] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [0] {
	 };
	};
	AssignExpr @[1] { };
	CssExpr @[2] { };
       };
      };
      MatrixAssign @[5] { };
      MethodCall @[6] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      FunctionCall @[7] { 
       ProgArg_List @.fun_args = [1] {
	ProgArg @[0] { };
       };
      };
      MatrixAssign @[8] { };
      MatrixAssign @[9] { };
     };
    };
   };
  };
  Function @[2] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [3] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [8] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
      ProgVar @[5] { };
      ProgVar @[6] { };
      ProgVar @[7] { };
     };
    };
    DataGenCall @[1] { 
     ProgArg_List @.meth_args = [7] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
      ProgArg @[6] { };
     };
    };
    ForLoop @[2] { 
     ProgEl_List @.loop_code = [14] {
      AssignExpr @[0] { };
      AssignExpr @[1] { };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      AssignExpr @[3] { };
      If @[4] { 
       ProgEl_List @.true_code = [2] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
       };
      };
      MethodCall @[5] { 
       ProgArg_List @.meth_args = [13] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
	ProgArg @[7] { };
	ProgArg @[8] { };
	ProgArg @[9] { };
	ProgArg @[10] { };
	ProgArg @[11] { };
	ProgArg @[12] { };
       };
      };
      If @[6] { 
       ProgEl_List @.true_code = [4] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [0] {
	 };
	};
	AssignExpr @[1] { };
	MatrixAssign @[2] { };
	MatrixAssign @[3] { };
       };
      };
      MatrixAssign @[7] { };
      MethodCall @[8] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[9] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[10] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MatrixAssign @[11] { };
      MatrixAssign @[12] { };
      MatrixAssign @[13] { };
     };
    };
   };
  };
  Function @[3] { 
   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgEl_List @.fun_code = [5] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Function @[4] { 
   ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgEl_List @.fun_code = [5] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };
  };
  Function @[5] { 
   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgEl_List @.fun_code = [4] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [1] {
      ProgVar @[0] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [1] {
      ReturnExpr @[0] { };
     };
    };
    ReturnExpr @[3] { };
   };
  };
  Function @[6] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [2] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [6] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
      ProgVar @[5] { };
     };
    };
    ForLoop @[1] { 
     ProgEl_List @.loop_code = [10] {
      AssignExpr @[0] { };
      AssignExpr @[1] { };
      AssignExpr @[2] { };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      AssignExpr @[4] { };
      MethodCall @[5] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      VarIncr @[6] { };
      MethodCall @[7] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      VarIncr @[8] { };
      MatrixAssign @[9] { };
     };
    };
   };
  };
  Function @[7] { 
   ProgVar_List @.args = [6] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
   };

   ProgEl_List @.fun_code = [6] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [4] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    AssignExpr @[2] { };
    AssignExpr @[3] { };
    If @[4] { 
     ProgEl_List @.true_code = [2] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [1] {
	ProgArg @[0] { };
       };
      };
      If @[1] { 
       ProgEl_List @.true_code = [1] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
       };
      };
     };
    };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [7] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
      ProgArg @[6] { };
     };
    };
   };
  };
  Function @[8] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [4] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [6] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
      ProgVar @[5] { };
     };
    };
    FunctionCall @[1] { 
     ProgArg_List @.fun_args = [1] {
      ProgArg @[0] { };
     };
    };
    ForLoop @[2] { 
     ProgEl_List @.loop_code = [6] {
      AssignExpr @[0] { };
      AssignExpr @[1] { };
      AssignExpr @[2] { };
      AssignExpr @[3] { };
      AssignExpr @[4] { };
      FunctionCall @[5] { 
       ProgArg_List @.fun_args = [6] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
       };
      };
     };
    };
    FunctionCall @[3] { 
     ProgArg_List @.fun_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Function @[9] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [4] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [6] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
      ProgVar @[5] { };
     };
    };
    FunctionCall @[1] { 
     ProgArg_List @.fun_args = [1] {
      ProgArg @[0] { };
     };
    };
    ForLoop @[2] { 
     ProgEl_List @.loop_code = [10] {
      AssignExpr @[0] { };
      AssignExpr @[1] { };
      AssignExpr @[2] { };
      AssignExpr @[3] { };
      AssignExpr @[4] { };
      AssignExpr @[5] { };
      AssignExpr @[6] { };
      IfContinue @[7] { };
      IfContinue @[8] { };
      FunctionCall @[9] { 
       ProgArg_List @.fun_args = [6] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
       };
      };
     };
    };
    FunctionCall @[3] { 
     ProgArg_List @.fun_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Function @[10] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [4] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [6] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
      ProgVar @[5] { };
     };
    };
    FunctionCall @[1] { 
     ProgArg_List @.fun_args = [1] {
      ProgArg @[0] { };
     };
    };
    ForLoop @[2] { 
     ProgEl_List @.loop_code = [11] {
      AssignExpr @[0] { };
      AssignExpr @[1] { };
      AssignExpr @[2] { };
      AssignExpr @[3] { };
      AssignExpr @[4] { };
      AssignExpr @[5] { };
      AssignExpr @[6] { };
      AssignExpr @[7] { };
      IfContinue @[8] { };
      IfContinue @[9] { };
      FunctionCall @[10] { 
       ProgArg_List @.fun_args = [6] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
       };
      };
     };
    };
    FunctionCall @[3] { 
     ProgArg_List @.fun_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Function @[11] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [10] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [7] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
      ProgVar @[5] { };
      ProgVar @[6] { };
     };
    };
    AssignExpr @[1] { };
    AssignExpr @[2] { };
    ForLoop @[3] { 
     ProgEl_List @.loop_code = [4] {
      AssignExpr @[0] { };
      AssignExpr @[1] { };
      MathCall @[2] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      If @[3] { 
       ProgEl_List @.true_code = [2] {
	AssignExpr @[0] { };
	AssignExpr @[1] { };
       };
      };
     };
    };
    AssignExpr @[4] { };
    AssignExpr @[5] { };
    AssignExpr @[6] { };
    MethodCall @[7] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    If @[8] { 
     ProgEl_List @.true_code = [5] {
      AssignExpr @[0] { };
      AssignExpr @[1] { };
      AssignExpr @[2] { };
      AssignExpr @[3] { };
      PrintVar @[4] { };
     };
    };
    Else @[9] { 
     ProgEl_List @.else_code = [5] {
      AssignExpr @[0] { };
      AssignExpr @[1] { };
      AssignExpr @[2] { };
      AssignExpr @[3] { };
      PrintVar @[4] { };
     };
    };
   };
  };
  Function @[12] { 
   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgEl_List @.fun_code = [7] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [2] {
      ProgVar @[0] { };
      ProgVar @[1] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [1] {
      ReturnExpr @[0] { };
     };
    };
    AssignExpr @[3] { };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    PrintExpr @[5] { };
    ReturnExpr @[6] { };
   };
  };
  Function @[13] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [2] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [1] {
      ProgVar @[0] { };
     };
    };
    ForeachLoop @[1] { 
     ProgEl_List @.loop_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
   };
  };
  Function @[14] { 
   ProgVar_List @.args = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   ProgEl_List @.fun_code = [5] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [1] {
      ProgVar @[0] { };
     };
    };
    IfReturn @[1] { };
    AssignExpr @[2] { };
    If @[3] { 
     ProgEl_List @.true_code = [1] {
      AssignExpr @[0] { };
     };
    };
    If @[4] { 
     ProgEl_List @.true_code = [1] {
      AssignExpr @[0] { };
     };
    };
   };
  };
  Function @[15] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [9] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    AssignExpr @[1] { };
    AssignExpr @[2] { };
    AssignExpr @[3] { };
    AssignExpr @[4] { };
    FunctionCall @[5] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[6] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[7] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[8] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
   };
  };
  Function @[16] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [5] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    VarIncr @[1] { };
    VarIncr @[2] { };
    VarIncr @[3] { };
    VarIncr @[4] { };
   };
  };
  Function @[17] { 
   ProgVar_List @.args = [5] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
   };

   ProgEl_List @.fun_code = [6] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [1] {
      ProgVar @[0] { };
     };
    };
    MatrixAssign @[1] { };
    MatrixAssign @[2] { };
    MatrixAssign @[3] { };
    If @[4] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
     };
    };
    MatrixAssign @[5] { };
   };
  };
  Function @[18] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [4] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [2] {
      ProgVar @[0] { };
      ProgVar @[1] { };
     };
    };
    If @[1] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [3] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      If @[1] { 
       ProgEl_List @.true_code = [3] {
	AssignExpr @[0] { };
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [0] {
	 };
	};
	MatrixAssign @[2] { };
       };
      };
      FunctionCall @[2] { 
       ProgArg_List @.fun_args = [5] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
       };
      };
     };
    };
    If @[3] { 
     ProgEl_List @.true_code = [3] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      If @[1] { 
       ProgEl_List @.true_code = [3] {
	AssignExpr @[0] { };
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [0] {
	 };
	};
	MatrixAssign @[2] { };
       };
      };
      FunctionCall @[2] { 
       ProgArg_List @.fun_args = [5] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
       };
      };
     };
    };
   };
  };
  Function @[19] { 
   ProgVar_List @.args = [0] {
   };

   ProgEl_List @.fun_code = [3] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [2] {
      ProgVar @[0] { };
      ProgVar @[1] { };
     };
    };
    If @[1] { 
     ProgEl_List @.true_code = [5] {
      AssignExpr @[0] { };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      If @[2] { 
       ProgEl_List @.true_code = [1] {
	ReturnExpr @[0] { };
       };
      };
      AssignExpr @[3] { };
      MethodCall @[4] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
   };
  };
 };

 ProgEl_List @.init_code = [8] {
  MethodCall @[0] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  MethodCall @[2] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  If @[3] { 
   ProgEl_List @.true_code = [1] {
    FunctionCall @[0] { 
     ProgArg_List @.fun_args = [0] {
     };
    };
   };
  };
  If @[4] { 
   ProgEl_List @.true_code = [1] {
    FunctionCall @[0] { 
     ProgArg_List @.fun_args = [0] {
     };
    };
   };
  };
  FunctionCall @[5] { 
   ProgArg_List @.fun_args = [0] {
   };
  };
  AssignExpr @[6] { };
  AssignExpr @[7] { };
 };

 ProgEl_List @.prog_code = [8] {
  LocalVars @[0] { 
   ProgVar_List @.local_vars = [0] {
   };
  };
  If @[1] { 
   ProgEl_List @.true_code = [6] {
    ProgramCall @[0] { 
     ProgArg_List @.prog_args = [1] {
      ProgArg @[0] { };
     };
    };
    OtherProgramVar @[1] { };
    ProgramCall @[2] { 
     ProgArg_List @.prog_args = [1] {
      ProgArg @[0] { };
     };
    };
    FunctionCall @[3] { 
     ProgArg_List @.fun_args = [0] {
     };
    };
    FunctionCall @[4] { 
     ProgArg_List @.fun_args = [0] {
     };
    };
    AssignExpr @[5] { };
   };
  };
  Else @[2] { 
   ProgEl_List @.else_code = [2] {
    FunctionCall @[0] { 
     ProgArg_List @.fun_args = [0] {
     };
    };
    VarIncr @[1] { };
   };
  };
  FunctionCall @[3] { 
   ProgArg_List @.fun_args = [0] {
   };
  };
  FunctionCall @[4] { 
   ProgArg_List @.fun_args = [0] {
   };
  };
  FunctionCall @[5] { 
   ProgArg_List @.fun_args = [0] {
   };
  };
  FunctionCall @[6] { 
   ProgArg_List @.fun_args = [0] {
   };
  };
  FunctionCall @[7] { 
   ProgArg_List @.fun_args = [0] {
   };
  };
 };
};
Program .projects[0].programs.gp[3][7] {
 UserDataItem_List @*(.user_data_) {
  name="UserDataItem_List_180";
  el_typ=UserDataItem;
  el_def=0;
  UserDataItem @[0] {
   name="user_pinned";
   value 1 0=0;
   val_type_fixed=0;
  };
 };
 name="StoryRender2D";
 short_nm="StrRnd";
 tags=;
 desc="Render a story sentence-by-sentence in 2D";
 flags=NO_STOP_STEP|OBJS_UPDT_GUI;
 stop_step_cond {
  expr=;
 };
 objs {
  name="objs";
  el_typ=DataTable;
  el_def=0;
  DataTable @[0] {
   name="VisualObjects";
   desc=;
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_95";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.170088;
       val_type_fixed=0;
      };
     };
     name="name";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=116;
     ar {
      name="ar";
     [23] "cross";"face";"star";"cross";"face";"star";"asterisk";"emerald";"face_square";"fish";
"kite";"mountain";"mountain_snow";"pyramid";"star_of_david";"bottle";"food_jar";"mother_face";"rattle";"teddy_bear";
"mother";"woman";"ball";     };
    };
    String_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.3870968;
       val_type_fixed=0;
      };
     };
     name="file_path";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=264;
     ar {
      name="ar";
     [23] "images/twod_objs_svg/cross.svg";"images/twod_objs_svg/face.svg";"images/twod_objs_svg/star.svg";"cross";"face";"star";"images/twod_objs_svg/asterisk.svg";"images/twod_objs_svg/emerald.svg";"images/twod_objs_svg/face_square.svg";"images/twod_objs_svg/fish.svg";
"images/twod_objs_svg/kite.svg";"images/twod_objs_svg/mountain.svg";"images/twod_objs_svg/mountain_snow.svg";"images/twod_objs_svg/pyramid.svg";"images/twod_objs_svg/star_of_david.svg";"images/twod_objs_svg/bottle.svg";"images/twod_objs_svg/food_jar.svg";"mother_face";"images/twod_objs_svg/rattle.svg";"images/twod_objs_svg/teddy_bear.svg";
"images/twod_objs_svg/mother.svg";"images/twod_objs_svg/woman.svg";"images/twod_objs_svg/ball.svg";     };
    };
    String_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1378299;
       val_type_fixed=0;
      };
     };
     name="svg_code";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=94;
     ar {
      name="ar";
     [23] "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg5537\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"cross.svg\">
  <defs
     id=\"defs5539\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata5542\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 557.63521,-188.37618 199.81929,-2.32348 0,453.07861 448.4316,0 0,153.34968 -443.78464,-6.97044 4.64696,585.517 -216.08365,2.3235 11.6174,-583.19354 -483.283848,-2.32348 -2.32348,-164.96708 483.283848,4.64696 z\"
       id=\"path6085\"
       inkscape:connector-curvature=\"0\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg4184\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"face.svg\">
  <defs
     id=\"defs4186\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata4189\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 106.88008,-165.14141 1073.44782,-2.32348 -99.9097,608.75178 -434.49074,518.136 -408.93249,-511.16556 z\"
       id=\"path4896\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 397.31509,106.70576 137.08532,0 -2.32348,134.76184 -134.76184,-4.64696 z\"
       id=\"path4898\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 792.3067,106.70576 155.67316,4.64696 -4.64696,134.76184 -151.0262,-6.97044 z\"
       id=\"path4900\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 367.10985,55.5892 550.66477,-0.17432 518.13605,-18.76217 Z\"
       id=\"path4902\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 950.30334,55.5892 785.33626,-2.4978 827.1589,-18.76217 Z\"
       id=\"path4904\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 436.81425,527.25565 104.5566,123.14444 190.52537,2.32348 118.49748,-116.174 z\"
       id=\"path4906\"
       inkscape:connector-curvature=\"0\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg4184\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"star.svg\">
  <defs
     id=\"defs4186\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"656.98907\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata4189\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 648.25093,-134.93617 144.05577,390.34465 455.4021,-2.32347 -369.43334,290.435 169.61404,432.1673 L 659.86833,699.19317 250.93585,973.36379 432.16729,541.19653 48.793081,253.08501 492.57777,255.40848 Z\"
       id=\"path6112\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccccccccc\" />
  </g>
</svg>
";;;;"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg4209\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"asterisk.svg\">
  <defs
     id=\"defs4211\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata4214\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 559.95869,-181.40574 162.64361,2.32348 2.32348,383.37421 267.2002,-329.93417 151.02622,104.5566 -295.08198,343.87505 348.52198,-4.64696 0,148.70272 -369.4333,9.29392 346.1986,388.02116 -106.8802,106.88014 -348.52196,-397.31514 11.6174,408.93246 -164.96709,8e-5 0,-406.60906 L 255.58281,959.42301 134.76184,854.86635 469.34297,476.13911 83.645282,469.16867 l 0,-146.37924 L 462.37253,320.46595 160.32012,-37.349979 274.17065,-141.90658 559.95869,197.32151 Z\"
       id=\"path4902\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccccccccccccccccccccccc\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg4209\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"emerald.svg\">
  <defs
     id=\"defs4211\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata4214\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 683.10313,998.92215 95.262679,287.93723 350.84549,-41.996945 l 585.51697,4.64696 276.49414,325.287215 z\"
       id=\"path4813\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 92.939198,292.58419 376.40377,399.46427 859.68762,397.14079 1215.18,292.58419 936.36246,-39.673465 350.84549,-44.320425 Z\"
       id=\"path4815\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccccc\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg4209\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"face_square.svg\">
  <defs
     id=\"defs4211\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata4214\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 386.99161,222.87983 85.96876,0 44.14612,-51.11656 -44.14612,-48.79308 -88.29224,0 -44.14613,44.14612 z\"
       id=\"path4950\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 430.81425,220.55635 23.2348,-46.4696 -25.55828,-48.79308 -27.88176,46.4696 z\"
       id=\"path4952\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 144.05577,-130.28918 952.62683,2.32348 -1e-4,850.39369 -220.73052,83.64529 -243.9654,51.11653 L 376.40377,815.3672 141.73229,729.39843 Z\"
       id=\"path4994\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 293.02285,516.54959 155.67316,148.70273 181.23145,67.38092 174.261,-62.73396 160.32012,-153.34969 z\"
       id=\"path4996\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 751.0719,126.58754 74.35136,0 46.4696,48.79308 -30.20524,53.44005 -95.26268,0 -37.17568,-55.76353 z\"
       id=\"path4998\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 788.24758,126.58754 27.88176,48.79308 -30.20524,53.44005 -25.55828,-53.44005 z\"
       id=\"path5000\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccc\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg4209\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"fish.svg\">
  <defs
     id=\"defs4211\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata4214\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 46.469601,334.40683 260.22977,69.5301 l 671.48573,2.32348 297.4054,564.60565 2.3235,-494.90124 -306.69934,569.2526 -655.22137,-4.64696 z\"
       id=\"path4836\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 153.34969,513.31479 227.70104,90.61572 -2.32348,-92.9392 z\"
       id=\"path4840\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 255.58281,181.05715 137.08532,0 2.32348,118.49748 -141.73228,0 z\"
       id=\"path4842\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccc\" />
  </g>
</svg>
";
"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg4209\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"kite.svg\">
  <defs
     id=\"defs4211\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata4214\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 576.22306,-181.40574 913.12766,181.05715 701.69098,671.31144 306.69937,183.38062 Z\"
       id=\"path4863\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 692.39706,782.83849 72.02788,0 -2.32348,81.32176 -72.02788,2.32348 z\"
       id=\"path4865\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 855.04066,868.80729 78.99832,2.3234 0,85.9688 -81.3218,2.32344 z\"
       id=\"path4867\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 1105.9765,896.68899 88.2922,0 10e-5,92.9392 -90.6158,-2.3235 z\"
       id=\"path4869\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 701.69098,668.98796 23.2348,113.85051 z\"
       id=\"path4875\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 724.92578,864.16027 127.7914,46.4696 z\"
       id=\"path4877\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 934.03898,917.60029 167.29062,23.23488 z\"
       id=\"path4879\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccc\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg4209\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"mountain.svg\">
  <defs
     id=\"defs4211\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata4214\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 60.410481,957.09949 1108.300019,0 L 987.47902,313.49551 836.45282,666.66448 618.0457,-167.46486 381.05073,664.341 206.78973,315.81899 Z\"
       id=\"path4771\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccccccc\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg4209\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"mountain_snow.svg\">
  <defs
     id=\"defs4211\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata4214\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 60.410481,957.09949 1108.300019,0 L 987.47902,313.49551 836.45282,666.66448 618.0457,-167.46486 381.05073,664.341 206.78973,315.81899 Z\"
       id=\"path4771\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 480.96037,301.87811 76.67484,81.3218 85.96877,-88.29224 62.73396,111.52704 44.14612,-58.087 2.32348,2.32348 -132.43836,-515.81257 z\"
       id=\"path4792\"
       inkscape:connector-curvature=\"0\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg4209\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"pyramid.svg\">
  <defs
     id=\"defs4211\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata4214\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 81.321798,929.21775 1180.3279,926.89429 834.12934,199.64499 439.13773,192.67455 Z\"
       id=\"path4946\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 457.72557,160.14582 824.83542,162.4693 636.63354,-183.72922 Z\"
       id=\"path4948\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 593.78134,2.1491798 85.96876,0 58.087,51.1165602 -58.087,48.79308 -88.29224,0 -44.14613,-44.14612 z\"
       id=\"path4950\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 637.60398,4.4726598 667.80922,50.94226 635.2805,99.73534 605.07526,50.94226 Z\"
       id=\"path4952\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccc\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg4209\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"star_of_david.svg\">
  <defs
     id=\"defs4211\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata4214\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 659.86834,-172.11182 1161.74,815.3672 148.70272,813.04372 Z\"
       id=\"path4923\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 144.05577,-35.026502 1164.0635,-39.673462 694.72054,982.65781 Z\"
       id=\"path4925\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccc\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:xlink=\"http://www.w3.org/1999/xlink\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg2\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"bottle.svg\">
  <defs
     id=\"defs4\">
    <linearGradient
       inkscape:collect=\"always\"
       id=\"linearGradient4176\">
      <stop
         style=\"stop-color:#d0b312;stop-opacity:1\"
         offset=\"0\"
         id=\"stop4178\" />
      <stop
         style=\"stop-color:#ffffff;stop-opacity:1\"
         offset=\"1\"
         id=\"stop4180\" />
    </linearGradient>
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient4176\"
       id=\"linearGradient4150\"
       x1=\"512.95197\"
       y1=\"191.52068\"
       x2=\"902.72656\"
       y2=\"513.23438\"
       gradientUnits=\"userSpaceOnUse\" />
    <linearGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient4176\"
       id=\"linearGradient4158\"
       x1=\"790.44049\"
       y1=\"-53.987804\"
       x2=\"1091.9083\"
       y2=\"188.67828\"
       gradientUnits=\"userSpaceOnUse\" />
  </defs>
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"367.10985\"
     inkscape:cy=\"730.73448\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata7\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
        <cc:license
           rdf:resource=\"http://creativecommons.org/licenses/by-sa/3.0/\" />
      </cc:Work>
      <cc:License
         rdf:about=\"http://creativecommons.org/licenses/by-sa/3.0/\">
        <cc:permits
           rdf:resource=\"http://creativecommons.org/ns#Reproduction\" />
        <cc:permits
           rdf:resource=\"http://creativecommons.org/ns#Distribution\" />
        <cc:requires
           rdf:resource=\"http://creativecommons.org/ns#Notice\" />
        <cc:requires
           rdf:resource=\"http://creativecommons.org/ns#Attribution\" />
        <cc:permits
           rdf:resource=\"http://creativecommons.org/ns#DerivativeWorks\" />
        <cc:requires
           rdf:resource=\"http://creativecommons.org/ns#ShareAlike\" />
      </cc:License>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <g
       id=\"g4182\"
       transform=\"matrix(0.76608277,-0.64274193,0.64274193,0.76608277,-106.21961,558.47011)\">
      <path
         sodipodi:nodetypes=\"ccccc\"
         inkscape:connector-curvature=\"0\"
         id=\"path4136\"
         d=\"M 72.027882,699.1932 692.39706,-41.99694 1095.6895,296.44309 474.20365,1037.2268 Z\"
         style=\"fill:url(#linearGradient4150);fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:4;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />
      <path
         inkscape:connector-curvature=\"0\"
         id=\"path4138\"
         d=\"m 741.19014,-7.14474 90.61572,-102.23312 313.17324,262.15921 -88.2626,105.62632 z\"
         style=\"fill:url(#linearGradient4158);fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:4;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"
         sodipodi:nodetypes=\"ccccc\" />
      <path
         sodipodi:nodetypes=\"ccccccccccccccc\"
         inkscape:connector-curvature=\"0\"
         id=\"path4140\"
         d=\"m 859.68762,-88.46654 51.11656,-18.58784 41.82264,13.94088 58.08698,32.52872 0,-32.52872 13.9409,-18.58784 44.1461,0 60.4105,48.79308 0,32.52872 -16.2644,18.58784 -32.5287,4.6469601 37.7785,49.4391019 6.1577,44.055964 -9.7177,38.926004 z\"
         style=\"fill:#fdf8e2;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:4;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />
    </g>
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg2\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"food_jar.svg\">
  <defs
     id=\"defs4\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata7\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 83.645287,975.68737 1066.477313,-8e-5 37.1757,-30.2052 25.5583,-46.4696 9.2939,-785.33627 -155.6732,0 23.2349,-13.94088 67.3809,-2.32348 0,-148.70272 -1040.9191,0 0,132.43836 65.05745,2.32348 25.55828,18.58784 -171.93753,0 -4.64696,794.63023 20.911321,48.79302 z\"
       id=\"path4161\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccccccccccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 32.528721,406.43471 1187.298379,2.32348 -6.9705,220.73061 -1182.651359,0 z\"
       id=\"path4163\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccc\" />
  </g>
</svg>
";;"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg2\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"rattle.svg\">
  <defs
     id=\"defs4\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata7\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 1033.9486,901.33601 104.5566,-92.93928 88.2923,0 -10e-5,109.20358 -92.9391,83.64529 -97.5862,-2.32343 z\"
       id=\"path4186\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 1033.9486,899.01253 408.93249,283.29027 527.42997,183.38062 1136.1818,810.72029 Z\"
       id=\"path4188\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 413.57945,280.96679 195.17233,253.08503 78.998321,134.58754 123.14444,-69.878702 225.37757,-151.2005 l 216.08364,-18.58784 116.174,104.556599 -32.52872,248.612371 z\"
       id=\"path4190\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 78.998322,136.91102 362.462888,-306.69936 116.174,104.5566 -362.46288,318.31677 z\"
       id=\"path4192\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccc\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg2\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"teddy_bear.svg\">
  <defs
     id=\"defs4\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"1282\"
     inkscape:window-y=\"0\"
     inkscape:window-maximized=\"0\" />
  <metadata
     id=\"metadata7\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 306.69937,745.66283 113.85052,-2.3235 58.087,65.0574 0,90.6158 -51.11656,48.79301 -125.46792,-4.6469 -58.08701,-55.76351 2.32348,-88.2923 z\"
       id=\"path4213\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 813.21802,751.28025 127.79142,0 51.1166,51.1165 2.3235,104.5566 -34.8522,46.46961 -139.40888,2.3235 -60.41048,-44.14611 -2.32348,-99.9097 z\"
       id=\"path4215\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 248.61236,668.98796 236.99497,2.32348 72.02788,99.90964 2.32348,141.73233 -85.96876,92.93919 -216.08365,-4.647 -83.64528,-88.29219 2.32348,-139.40885 z\"
       id=\"path4217\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 745.8371,673.63492 264.8768,2.32348 90.6157,116.17401 2.3235,160.3201 -83.6453,67.38089 -297.4055,-13.9408 -81.3218,-88.29229 -4.64696,-153.34967 z\"
       id=\"path4219\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 153.34968,13.76658 67.38093,0 58.087,55.76352 6.97044,90.61572 -44.14612,46.46961 -97.58617,-2.32348 -53.440038,-55.76353 -2.32348,-83.64528 z\"
       id=\"path4221\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 1020.0077,23.0605 99.9097,0 58.087,69.7044 9.2939,76.67484 -51.1166,48.79309 -113.8505,-2.32348 -53.44002,-58.08701 -2.32348,-78.99832 z\"
       id=\"path4223\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 401.96205,-81.4961 -51.11656,-62.73396 85.96876,-60.41048 60.41048,60.41048 78.99832,-20.91132 123.14445,6.97044 85.96876,34.8522 78.99832,-51.11656 65.05744,55.76352 -62.73396,53.44004 30.20524,111.52704 2.32348,120.82096 -53.44004,97.58617 -90.61572,46.4696 -227.70105,9.29392 -97.58616,-48.79308 -76.67484,-85.96877 -23.2348,-120.82096 z\"
       id=\"path4225\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 541.37085,-23.4091 44.14612,-2.32348 2.32348,44.14612 -48.79308,2.32348 z\"
       id=\"path4227\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 678.45618,-21.08562 39.49916,0 4.64696,44.14612 -44.14612,0 z\"
       id=\"path4229\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 429.84381,271.67287 65.05744,-109.20357 92.9392,-32.52872 104.55661,0 104.5566,41.82264 46.4696,95.26269 -81.3218,44.14612 -234.67149,6.97044 z\"
       id=\"path4231\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 539.04737,183.38062 51.11656,-30.20524 92.93921,-2.32348 53.44004,32.52872 -55.76352,25.55829 -90.61573,-4.64696 z\"
       id=\"path4235\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 429.84381,271.67287 -81.3218,-25.55828 -41.82264,-202.14277 -72.02788,-81.3218 -106.88009,2.32348 -85.968759,81.3218 2.32348,102.23312 72.027879,97.58617 83.64528,97.58616 69.70441,58.087 -25.55828,269.52369 241.64192,-2.32348 74.35136,106.88008 -4.64696,134.76185 -41.82264,48.7931 174.26101,4.6469 -48.79308,-44.1461 0,-155.67315 106.88008,-92.9392 262.5532,4.64696 -11.61736,-260.22977 95.26266,-65.05744 151.0262,-167.29057 -11.6174,-116.174 -76.6748,-95.26268 -153.3497,2.32348 -76.67484,76.67484 -20.91132,192.84885 -62.73396,23.2348 -83.64528,41.82264 -234.67149,11.6174 z\"
       id=\"path4237\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccccccccccccccccccccccccccccccc\" />
  </g>
</svg>
";
"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg2\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"mother.svg\">
  <defs
     id=\"defs4\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.36610494\"
     inkscape:cx=\"-8.1943644\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1265\"
     inkscape:window-height=\"674\"
     inkscape:window-x=\"1286\"
     inkscape:window-y=\"10\"
     inkscape:window-maximized=\"0\" />
  <metadata
     id=\"metadata7\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 472.54211,948.56674 68.28644,5.46298 76.4808,8.1944 166.61889,-5.463 101.06392,-30.046 87.40664,-79.2122 54.6291,-95.60109 43.7033,-144.7672 5.4629,-210.32221 -5.4629,-174.81327 -38.2404,-32.77748 -54.62907,-13.65729 -30.04605,-54.62915 -13.65729,-57.360602 -40.97186,-24.58311 -38.2404,-43.7033198 -19.1202,-38.2404002 -57.3606,-8.19437 -38.2404,-13.65729 -54.62915,-2.73146 -30.04603,-19.1202 -19.1202,16.38874 -40.97186,8.19438 -62.82352,5.46291 -65.55497,2.73146 -57.3606,24.58311 -40.97186,49.16624 -46.43478,24.58311 -10.92583,43.70332 -19.1202,68.286432 -32.77749,21.85166 -32.77748,2.73145 -8.19437,51.89769 -2.73146,147.4987 -2.73146,163.88743 32.77748,155.69307 40.97187,125.647 35.50895,46.43484 46.43476,32.77742 38.24041,27.31459 z\"
       id=\"path4140\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccccccccccccccccccccccccccccccccccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 346.89507,891.20616 10.92583,57.36063 -16.38874,10.9258 -73.74935,-5.4629 -136.57286,-10.9258 -43.703317,-35.509 -35.508945,-114.7212 5.462915,-248.56258 5.462915,-256.75698 43.703312,-240.36824 65.55498,-92.86955 152.96161,-117.45266 103.79537,-30.04603 109.25829,-8.19438 60.09206,-2.73145 27.31458,5.46291 13.65728,16.38874 16.38875,-13.65728 30.04603,-8.19437 68.28643,5.46291 150.23015,13.65729 101.06394,38.2404 103.7954,106.52683 54.6291,92.86955 10.9258,158.42452 -2.7314,338.70071 0,264.95136 0,84.6752 0,40.9718 -62.8235,10.9259 -114.72125,-8.1944 -73.74935,2.7314 -30.04603,-5.4629 13.65729,-35.5089\"
       id=\"path4142\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccccccccccccccccccccccccccccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 527.17126,298.47995 -5.46292,43.70332 -51.89768,27.31457 -65.55498,-10.92583 -27.31457,-32.77748 -2.73146,-8.19438 30.04603,-32.77748 60.09206,-2.73146 z\"
       id=\"path4144\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 726.56763,312.13724 24.58312,35.50895 30.04603,21.85166 57.3606,-8.19437 35.50895,-24.58312 19.1202,-38.2404 -38.2404,-8.19437 -57.36061,-5.46292 -46.43477,8.19437 z\"
       id=\"path4146\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 445.22754,364.03493 -24.58312,-19.1202 0,-35.50894 19.1202,-19.12021 27.31458,1e-5 21.85165,16.38874 -5.46291,30.04603 -10.92583,21.85166 z\"
       id=\"path4148\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"ccccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 805.7799,361.30347 30.04603,-24.58311 0,-30.04603 -19.1202,-16.38875 -19.1202,2.73146 -21.85166,5.46292 -10.92583,19.1202 8.19437,19.1202 10.92583,19.1202 z\"
       id=\"path4150\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 379.67256,669.95815 54.62915,73.74935 57.3606,35.50892 133.84141,19.1202 147.49869,-10.9258 87.40664,-40.97187 49.16623,-90.13809 z\"
       id=\"path4152\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 333.23779,262.97101 150.23015,-68.28643 -19.1202,-27.31457 z\"
       id=\"path4154\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"M 753.88221,200.14749 917.76964,260.23955 773.00241,178.29583 Z\"
       id=\"path4156\"
       inkscape:connector-curvature=\"0\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg2\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"mother_face.svg\">
  <defs
     id=\"defs4\" />
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"637.79528\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"1282\"
     inkscape:window-y=\"0\"
     inkscape:window-maximized=\"0\" />
  <metadata
     id=\"metadata7\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 148.70272,808.39675 16.26436,-48.7931 -53.44004,30.2053 -18.587841,111.527 20.911321,53.4401 c 0,0 53.44004,30.20521 62.73396,39.49911 9.29393,9.29394 65.05745,16.26444 65.05745,16.26444 l 288.11152,-153.34975 4.64696,-55.7635 25.55828,2.3235 -2.32348,-67.38097 -118.49748,-181.23145 -41.82264,-106.88008 -23.2348,9.29392 -32.52872,6.97044 -32.52872,-25.55828 -13.94088,-41.82264 16.26436,-41.82264 41.82264,-30.20524 20.91132,11.6174 16.26436,16.26436 2.32348,23.2348 81.3218,-139.4088 46.4696,-125.46793 -6.97044,-51.11656 23.2348,48.79308 48.79308,41.82264 106.88009,51.11657 -34.8522,-72.02789 83.64528,88.29225 148.70272,62.73396 58.087,34.8522 55.76354,69.7044 27.8817,-72.02788 2.3235,-88.29224 -16.2643,-123.14445 c 0,0 -81.32184,-144.05576 -85.9688,-155.67316 -4.64696,-11.6174 -74.35136,-88.29224 -92.9392,-95.26268 -18.58784,-6.97044 -127.7914,-55.76352 -127.7914,-55.76352 l -118.49748,6.97044 -51.11657,9.29392 -60.41048,-6.97044 -67.38092,-4.64696 -74.35136,51.11656 c 0,0 -58.087,48.79308 -65.05744,62.73396 -6.97044,13.94088 -67.38092,118.49748 -67.38092,118.49748 0,0 -30.20525,132.43836 -32.52873,146.37925 -2.32348,13.94088 13.94089,446.10817 13.94089,446.10817 l 6.97044,144.05571 0,46.4697 -23.23481,18.5878 z\"
       id=\"path4258\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccccsccccccccccccccccccccccccccccccssccccccscsccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 204.46624,1038.4213 13.94089,-16.2644 311.34632,-164.96701 2.32348,-55.7636 27.88176,0 176.58449,9.294 -2.32348,51.1165 288.1115,169.61411 z\"
       id=\"path4260\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 692.39706,808.39675 2.32348,-53.44003 -90.61573,-44.14612 -74.35136,-65.05744 -95.26268,-102.23313 125.46792,197.49581 0,60.41045 z\"
       id=\"path4281\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 692.39706,752.63324 37.17568,18.58784 111.52704,-58.087 81.3218,-62.73396 60.41048,-88.29225 30.20524,-88.29224 -18.58784,-67.38092 6.97044,-23.2348\"
       id=\"path4287\"
       inkscape:connector-curvature=\"0\"
       sodipodi:nodetypes=\"cccccccc\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 590.16393,534.22611 299.72893,34.8522 -51.11656,69.70441 -48.79308,30.20524 -39.49916,16.26436 -46.4696,-6.97044 z\"
       id=\"path4293\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 664.5153,401.78775 -37.17568,-41.82264 c 0,0 -48.79309,-23.2348 -60.41049,-25.55828 -11.6174,-2.32348 -48.79308,0 -48.79308,0 l 13.94088,32.52872 23.2348,30.20524 41.82264,23.2348 41.82265,2.32348 z\"
       id=\"path4297\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 801.60062,422.69907 -13.94088,27.88176 16.26436,30.20524 18.58784,18.58784 0,18.58784 -37.17568,-4.64696 -41.82264,-16.26436\"
       id=\"path4299\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 857.36414,457.55127 34.8522,6.97044 c 0,0 20.91132,-4.64696 30.20524,-4.64696 9.29392,0 41.82264,-11.6174 41.82264,-11.6174 l 13.94088,-23.2348 -9.29392,-23.2348 -9.29392,-9.29392 c 0,0 -18.58784,0 -32.52872,0 -13.94088,0 -53.44004,9.29392 -53.44004,9.29392 l -25.55828,27.88176 -4.64696,18.58784 z\"
       id=\"path4301\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 655.22138,346.02423 -90.61573,-60.41048 -53.44004,0\"
       id=\"path4303\"
       inkscape:connector-curvature=\"0\" />
    <path
       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"
       d=\"m 850.3937,362.28859 99.90964,-27.88176\"
       id=\"path4305\"
       inkscape:connector-curvature=\"0\" />
  </g>
</svg>
";"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"
   xmlns:cc=\"http://creativecommons.org/ns#\"
   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
   xmlns:svg=\"http://www.w3.org/2000/svg\"
   xmlns=\"http://www.w3.org/2000/svg\"
   xmlns:xlink=\"http://www.w3.org/1999/xlink\"
   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"
   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"
   width=\"360mm\"
   height=\"360mm\"
   viewBox=\"0 0 1275.5906 1275.5905\"
   id=\"svg2\"
   version=\"1.1\"
   inkscape:version=\"0.91 r13725\"
   sodipodi:docname=\"ball.svg\">
  <defs
     id=\"defs4\">
    <linearGradient
       inkscape:collect=\"always\"
       id=\"linearGradient4144\">
      <stop
         style=\"stop-color:#ffffff;stop-opacity:1\"
         offset=\"0\"
         id=\"stop4146\" />
      <stop
         style=\"stop-color:#fe3400;stop-opacity:1\"
         offset=\"1\"
         id=\"stop4148\" />
    </linearGradient>
    <radialGradient
       inkscape:collect=\"always\"
       xlink:href=\"#linearGradient4144\"
       id=\"radialGradient4150\"
       cx=\"464.69598\"
       cy=\"148.5284\"
       fx=\"464.69598\"
       fy=\"148.5284\"
       r=\"629.28847\"
       gradientTransform=\"translate(0,-3.9886457e-6)\"
       gradientUnits=\"userSpaceOnUse\" />
  </defs>
  <sodipodi:namedview
     id=\"base\"
     pagecolor=\"#ffffff\"
     bordercolor=\"#666666\"
     borderopacity=\"1.0\"
     inkscape:pageopacity=\"0.0\"
     inkscape:pageshadow=\"2\"
     inkscape:zoom=\"0.43038889\"
     inkscape:cx=\"839.93804\"
     inkscape:cy=\"637.79528\"
     inkscape:document-units=\"px\"
     inkscape:current-layer=\"layer1\"
     showgrid=\"false\"
     inkscape:window-width=\"1280\"
     inkscape:window-height=\"752\"
     inkscape:window-x=\"0\"
     inkscape:window-y=\"22\"
     inkscape:window-maximized=\"1\" />
  <metadata
     id=\"metadata7\">
    <rdf:RDF>
      <cc:Work
         rdf:about=\"\">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />
        <dc:title />
        <cc:license
           rdf:resource=\"http://creativecommons.org/licenses/by-sa/3.0/\" />
      </cc:Work>
      <cc:License
         rdf:about=\"http://creativecommons.org/licenses/by-sa/3.0/\">
        <cc:permits
           rdf:resource=\"http://creativecommons.org/ns#Reproduction\" />
        <cc:permits
           rdf:resource=\"http://creativecommons.org/ns#Distribution\" />
        <cc:requires
           rdf:resource=\"http://creativecommons.org/ns#Notice\" />
        <cc:requires
           rdf:resource=\"http://creativecommons.org/ns#Attribution\" />
        <cc:permits
           rdf:resource=\"http://creativecommons.org/ns#DerivativeWorks\" />
        <cc:requires
           rdf:resource=\"http://creativecommons.org/ns#ShareAlike\" />
      </cc:License>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label=\"Layer 1\"
     inkscape:groupmode=\"layer\"
     id=\"layer1\"
     transform=\"translate(0,223.22835)\">
    <path
       style=\"color:#000000;display:inline;overflow:visible;visibility:visible;fill:url(#radialGradient4150);fill-rule:evenodd;stroke:#000000;stroke-width:4;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;enable-background:accumulate;fill-opacity:1\"
       id=\"path4142\"
       sodipodi:type=\"arc\"
       sodipodi:cx=\"645.92743\"
       sodipodi:cy=\"413.40512\"
       sodipodi:rx=\"627.2868\"
       sodipodi:ry=\"627.2868\"
       sodipodi:start=\"4.4663848\"
       sodipodi:end=\"4.4650409\"
       sodipodi:open=\"true\"
       d=\"M 493.16403,-194.99613 A 627.2868,627.2868 0 0 1 1254.2773,260.43732 627.2868,627.2868 0 0 1 799.09961,1021.7036 627.2868,627.2868 0 0 1 37.680465,566.78167 627.2868,627.2868 0 0 1 492.34653,-194.79028\" />
  </g>
</svg>
";     };
    };
    String_Data @[3] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_273";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1319648;
       val_type_fixed=0;
      };
     };
     name="color_repl_str";
     desc="string to target for replacement color";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
     ar {
      name="ar";
     [23] ;;;;;;;;;;
;;;;;;;;;;
;;"#fe3400";     };
    };
    float_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1319648;
       val_type_fixed=0;
      };
     };
     name="freq";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=90;
     ar {
      name="ar";
     [23] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;     };
    };
   };
   data_flags=SAVE_ROWS|AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [20] 22;0;1;2;6;7;8;9;10;11;
12;13;14;15;16;17;18;19;20;21;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[1] {
   name="AuditoryWords";
   desc=;
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_279";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1466276;
       val_type_fixed=0;
      };
     };
     name="name";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
     ar {
      name="ar";
     [56] "ball";"ball";"bear";"bear";"bottle";"bottle";"cat";"cat";"circle";"circle";
"cross";"cross";"cup";"cup";"daddy";"daddy";"dog";"dog";"doggie";"doggie";
"face";"face";"fish";"fish";"fishie";"food";"food";"kite";"kite";"kitty";
"kitty";"mommy";"mommy";"more";"mother";"mountain";"mountain";"pyramid";"pyramid";"rattle";
"rattle";"rectangle";"rectangle";"shoe";"shoe";"square";"square";"star";"star";"teddy";
"teddy";"teddy";"teddy";"triangle";"triangle";"woman";     };
    };
    String_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1466276;
       val_type_fixed=0;
      };
     };
     name="speaker";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
     ar {
      name="ar";
     [56] "ro";"ym";"ro";"ym";"ro";"ym";"ro";"ym";"ro";"ym";
"ro";"ym";"ro";"ym";"ro";"ym";"ro";"ym";"ro";"ym";
"ro";"ym";"ro";"ym";"ro";"ro";"ym";"ro";"ym";"ro";
"ym";"ro";"ym";"ym";"ro";"ro";"ym";"ro";"ym";"ro";
"ym";"ro";"ym";"ro";"ym";"ro";"ym";"ro";"ym";"bear_ro";
"bear_ym";"ro";"ym";"ro";"ym";"ym";     };
    };
    String_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_280";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.3152493;
       val_type_fixed=0;
      };
     };
     name="file_path";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=215;
     ar {
      name="ar";
     [56] "images/sound/baby_words/ball_ro.wav";"images/sound/baby_words/ball_ym.wav";"images/sound/baby_words/bear_ro.wav";"images/sound/baby_words/bear_ym.wav";"images/sound/baby_words/bottle_ro.wav";"images/sound/baby_words/bottle_ym.wav";"images/sound/baby_words/cat_ro.wav";"images/sound/baby_words/cat_ym.wav";"images/sound/baby_words/circle_ro.wav";"images/sound/baby_words/circle_ym.wav";
"images/sound/baby_words/cross_ro.wav";"images/sound/baby_words/cross_ym.wav";"images/sound/baby_words/cup_ro.wav";"images/sound/baby_words/cup_ym.wav";"images/sound/baby_words/daddy_ro.wav";"images/sound/baby_words/daddy_ym.wav";"images/sound/baby_words/dog_ro.wav";"images/sound/baby_words/dog_ym.wav";"images/sound/baby_words/doggie_ro.wav";"images/sound/baby_words/doggie_ym.wav";
"images/sound/baby_words/face_ro.wav";"images/sound/baby_words/face_ym.wav";"images/sound/baby_words/fish_ro.wav";"images/sound/baby_words/fish_ym.wav";"images/sound/baby_words/fishie_ro.wav";"images/sound/baby_words/food_ro.wav";"images/sound/baby_words/food_ym.wav";"images/sound/baby_words/kite_ro.wav";"images/sound/baby_words/kite_ym.wav";"images/sound/baby_words/kitty_ro.wav";
"images/sound/baby_words/kitty_ym.wav";"images/sound/baby_words/mommy_ro.wav";"images/sound/baby_words/mommy_ym.wav";"images/sound/baby_words/more_ym.wav";"images/sound/baby_words/mother_ro.wav";"images/sound/baby_words/mountain_ro.wav";"images/sound/baby_words/mountain_ym.wav";"images/sound/baby_words/pyramid_ro.wav";"images/sound/baby_words/pyramid_ym.wav";"images/sound/baby_words/rattle_ro.wav";
"images/sound/baby_words/rattle_ym.wav";"images/sound/baby_words/rectangle_ro.wav";"images/sound/baby_words/rectangle_ym.wav";"images/sound/baby_words/shoe_ro.wav";"images/sound/baby_words/shoe_ym.wav";"images/sound/baby_words/square_ro.wav";"images/sound/baby_words/square_ym.wav";"images/sound/baby_words/star_ro.wav";"images/sound/baby_words/star_ym.wav";"images/sound/baby_words/teddy_bear_ro.wav";
"images/sound/baby_words/teddy_bear_ym.wav";"images/sound/baby_words/teddy_ro.wav";"images/sound/baby_words/teddy_ym.wav";"images/sound/baby_words/triangle_ro.wav";"images/sound/baby_words/triangle_ym.wav";"images/sound/baby_words/woman_ym.wav";     };
    };
    float_Data @[3] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_281";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1466276;
       val_type_fixed=0;
      };
     };
     name="len_samples";
     desc="length in samples";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
     ar {
      name="ar";
     [56] 7988;9660;7802;8545;9845;8731;8731;11145;11331;11331;
11703;11146;7059;9474;9288;9102;9102;9102;10217;9474;
11331;10960;9474;9288;10588;8545;9660;8917;9288;7988;
8545;11703;10960;9474;9288;10216;11331;10217;11146;11331;
10031;13189;13003;10960;10960;13189;12075;13003;11145;11703;
11517;8916;8916;11889;12260;7988;     };
    };
    float_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_282";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1466276;
       val_type_fixed=0;
      };
     };
     name="len_msec";
     desc="length in msec";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
     ar {
      name="ar";
     [56] 499.25;603.75;487.625;534.06201;615.31201;545.68701;545.68701;696.56201;708.18701;708.18701;
731.43701;696.625;441.18701;592.125;580.5;568.875;568.875;568.875;638.56201;592.125;
708.18701;685;592.125;580.5;661.75;534.06201;603.75;557.31201;580.5;499.25;
534.06201;731.43701;685;592.125;580.5;638.5;708.18701;638.56201;696.625;708.18701;
626.93701;824.31201;812.68701;685;685;824.31201;754.68701;812.68701;696.56201;731.43701;
719.81201;557.25;557.25;743.06201;766.25;499.25;     };
    };
    float_Data @[5] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1466276;
       val_type_fixed=0;
      };
     };
     name="len_atrials";
     desc="length in alpha trials (100 msec trials)";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
     ar {
      name="ar";
     [56] 4.9924998;6.0374999;4.8762498;5.34062;6.15312;5.4568701;5.4568701;6.96562;7.0818701;7.0818701;
7.3143702;6.9662499;4.41187;5.9212499;5.8049998;5.6887498;5.6887498;5.6887498;6.3856201;5.9212499;
7.0818701;6.8499999;5.9212499;5.8049998;6.6174998;5.34062;6.0374999;5.5731201;5.8049998;4.9924998;
5.34062;7.3143702;6.8499999;5.9212499;5.8049998;6.3850002;7.0818701;6.3856201;6.9662499;7.0818701;
6.2693701;8.2431202;8.1268702;6.8499999;6.8499999;8.2431202;7.5468702;8.1268702;6.96562;7.3143702;
7.1981201;5.5725002;5.5725002;7.4306202;7.6624999;4.9924998;     };
    };
   };
   data_flags=SAVE_ROWS|AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [56] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[2] {
   name="ValueNames";
   desc=;
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_158";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.143695;
       val_type_fixed=0;
      };
     };
     name="value";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=98;
     ar {
      name="ar";
     [10] "pv0";"pv1";"pv2";"pv3";"pv4";"nv0";"nv1";"nv2";"nv3";"nv4";
     };
    };
    String_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_159";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.6158358;
       val_type_fixed=0;
      };
     };
     name="desc";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=420;
     ar {
      name="ar";
     [10] "positive food value";"positive liquid value";"positive social value";"positive fun value";;"negative pain value";"negative fear value";"negative social value";"negative frustration value";;
     };
    };
   };
   data_flags=SAVE_ROWS|AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [10] 0;1;2;3;4;5;6;7;8;9;
   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[3] {
   name="NamedColors";
   desc=;
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_274";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1466276;
       val_type_fixed=0;
      };
     };
     name="name";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
     ar {
      name="ar";
     [782] "snow";"ghost_white";"GhostWhite";"white_smoke";"WhiteSmoke";"gainsboro";"floral_white";"FloralWhite";"old_lace";"OldLace";
"linen";"antique_white";"AntiqueWhite";"papaya_whip";"PapayaWhip";"blanched_almond";"BlanchedAlmond";"bisque";"peach_puff";"PeachPuff";
"navajo_white";"NavajoWhite";"moccasin";"cornsilk";"ivory";"lemon_chiffon";"LemonChiffon";"seashell";"honeydew";"mint_cream";
"MintCream";"azure";"alice_blue";"AliceBlue";"lavender";"lavender_blush";"LavenderBlush";"misty_rose";"MistyRose";"white";
"black";"dark_slate_gray";"DarkSlateGray";"dark_slate_grey";"DarkSlateGrey";"dim_gray";"DimGray";"dim_grey";"DimGrey";"slate_gray";
"SlateGray";"slate_grey";"SlateGrey";"light_slate_gray";"LightSlateGray";"light_slate_grey";"LightSlateGrey";"gray";"grey";"x11_gray";
"X11Gray";"x11_grey";"X11Grey";"web_gray";"WebGray";"web_grey";"WebGrey";"light_grey";"LightGrey";"light_gray";
"LightGray";"midnight_blue";"MidnightBlue";"navy";"navy_blue";"NavyBlue";"cornflower_blue";"CornflowerBlue";"dark_slate_blue";"DarkSlateBlue";
"slate_blue";"SlateBlue";"medium_slate_blue";"MediumSlateBlue";"light_slate_blue";"LightSlateBlue";"medium_blue";"MediumBlue";"royal_blue";"RoyalBlue";
"blue";"dodger_blue";"DodgerBlue";"deep_sky_blue";"DeepSkyBlue";"sky_blue";"SkyBlue";"light_sky_blue";"LightSkyBlue";"steel_blue";
"SteelBlue";"light_steel_blue";"LightSteelBlue";"light_blue";"LightBlue";"powder_blue";"PowderBlue";"pale_turquoise";"PaleTurquoise";"dark_turquoise";
"DarkTurquoise";"medium_turquoise";"MediumTurquoise";"turquoise";"cyan";"aqua";"light_cyan";"LightCyan";"cadet_blue";"CadetBlue";
"medium_aquamarine";"MediumAquamarine";"aquamarine";"dark_green";"DarkGreen";"dark_olive_green";"DarkOliveGreen";"dark_sea_green";"DarkSeaGreen";"sea_green";
"SeaGreen";"medium_sea_green";"MediumSeaGreen";"light_sea_green";"LightSeaGreen";"pale_green";"PaleGreen";"spring_green";"SpringGreen";"lawn_green";
"LawnGreen";"green";"lime";"x11_green";"X11Green";"web_green";"WebGreen";"chartreuse";"medium_spring_green";"MediumSpringGreen";
"green_yellow";"GreenYellow";"lime_green";"LimeGreen";"yellow_green";"YellowGreen";"forest_green";"ForestGreen";"olive_drab";"OliveDrab";
"dark_khaki";"DarkKhaki";"khaki";"pale_goldenrod";"PaleGoldenrod";"light_goldenrod_yellow";"LightGoldenrodYellow";"light_yellow";"LightYellow";"yellow";
"gold";"light_goldenrod";"LightGoldenrod";"goldenrod";"dark_goldenrod";"DarkGoldenrod";"rosy_brown";"RosyBrown";"indian_red";"IndianRed";
"saddle_brown";"SaddleBrown";"sienna";"peru";"burlywood";"beige";"wheat";"sandy_brown";"SandyBrown";"tan";
"chocolate";"firebrick";"brown";"dark_salmon";"DarkSalmon";"salmon";"light_salmon";"LightSalmon";"orange";"dark_orange";
"DarkOrange";"coral";"light_coral";"LightCoral";"tomato";"orange_red";"OrangeRed";"red";"hot_pink";"HotPink";
"deep_pink";"DeepPink";"pink";"light_pink";"LightPink";"pale_violet_red";"PaleVioletRed";"maroon";"x11_maroon";"X11Maroon";
"web_maroon";"WebMaroon";"medium_violet_red";"MediumVioletRed";"violet_red";"VioletRed";"magenta";"fuchsia";"violet";"plum";
"orchid";"medium_orchid";"MediumOrchid";"dark_orchid";"DarkOrchid";"dark_violet";"DarkViolet";"blue_violet";"BlueViolet";"purple";
"x11_purple";"X11Purple";"web_purple";"WebPurple";"medium_purple";"MediumPurple";"thistle";"snow1";"snow2";"snow3";
"snow4";"seashell1";"seashell2";"seashell3";"seashell4";"AntiqueWhite1";"AntiqueWhite2";"AntiqueWhite3";"AntiqueWhite4";"bisque1";
"bisque2";"bisque3";"bisque4";"PeachPuff1";"PeachPuff2";"PeachPuff3";"PeachPuff4";"NavajoWhite1";"NavajoWhite2";"NavajoWhite3";
"NavajoWhite4";"LemonChiffon1";"LemonChiffon2";"LemonChiffon3";"LemonChiffon4";"cornsilk1";"cornsilk2";"cornsilk3";"cornsilk4";"ivory1";
"ivory2";"ivory3";"ivory4";"honeydew1";"honeydew2";"honeydew3";"honeydew4";"LavenderBlush1";"LavenderBlush2";"LavenderBlush3";
"LavenderBlush4";"MistyRose1";"MistyRose2";"MistyRose3";"MistyRose4";"azure1";"azure2";"azure3";"azure4";"SlateBlue1";
"SlateBlue2";"SlateBlue3";"SlateBlue4";"RoyalBlue1";"RoyalBlue2";"RoyalBlue3";"RoyalBlue4";"blue1";"blue2";"blue3";
"blue4";"DodgerBlue1";"DodgerBlue2";"DodgerBlue3";"DodgerBlue4";"SteelBlue1";"SteelBlue2";"SteelBlue3";"SteelBlue4";"DeepSkyBlue1";
"DeepSkyBlue2";"DeepSkyBlue3";"DeepSkyBlue4";"SkyBlue1";"SkyBlue2";"SkyBlue3";"SkyBlue4";"LightSkyBlue1";"LightSkyBlue2";"LightSkyBlue3";
"LightSkyBlue4";"SlateGray1";"SlateGray2";"SlateGray3";"SlateGray4";"LightSteelBlue1";"LightSteelBlue2";"LightSteelBlue3";"LightSteelBlue4";"LightBlue1";
"LightBlue2";"LightBlue3";"LightBlue4";"LightCyan1";"LightCyan2";"LightCyan3";"LightCyan4";"PaleTurquoise1";"PaleTurquoise2";"PaleTurquoise3";
"PaleTurquoise4";"CadetBlue1";"CadetBlue2";"CadetBlue3";"CadetBlue4";"turquoise1";"turquoise2";"turquoise3";"turquoise4";"cyan1";
"cyan2";"cyan3";"cyan4";"DarkSlateGray1";"DarkSlateGray2";"DarkSlateGray3";"DarkSlateGray4";"aquamarine1";"aquamarine2";"aquamarine3";
"aquamarine4";"DarkSeaGreen1";"DarkSeaGreen2";"DarkSeaGreen3";"DarkSeaGreen4";"SeaGreen1";"SeaGreen2";"SeaGreen3";"SeaGreen4";"PaleGreen1";
"PaleGreen2";"PaleGreen3";"PaleGreen4";"SpringGreen1";"SpringGreen2";"SpringGreen3";"SpringGreen4";"green1";"green2";"green3";
"green4";"chartreuse1";"chartreuse2";"chartreuse3";"chartreuse4";"OliveDrab1";"OliveDrab2";"OliveDrab3";"OliveDrab4";"DarkOliveGreen1";
"DarkOliveGreen2";"DarkOliveGreen3";"DarkOliveGreen4";"khaki1";"khaki2";"khaki3";"khaki4";"LightGoldenrod1";"LightGoldenrod2";"LightGoldenrod3";
"LightGoldenrod4";"LightYellow1";"LightYellow2";"LightYellow3";"LightYellow4";"yellow1";"yellow2";"yellow3";"yellow4";"gold1";
"gold2";"gold3";"gold4";"goldenrod1";"goldenrod2";"goldenrod3";"goldenrod4";"DarkGoldenrod1";"DarkGoldenrod2";"DarkGoldenrod3";
"DarkGoldenrod4";"RosyBrown1";"RosyBrown2";"RosyBrown3";"RosyBrown4";"IndianRed1";"IndianRed2";"IndianRed3";"IndianRed4";"sienna1";
"sienna2";"sienna3";"sienna4";"burlywood1";"burlywood2";"burlywood3";"burlywood4";"wheat1";"wheat2";"wheat3";
"wheat4";"tan1";"tan2";"tan3";"tan4";"chocolate1";"chocolate2";"chocolate3";"chocolate4";"firebrick1";
"firebrick2";"firebrick3";"firebrick4";"brown1";"brown2";"brown3";"brown4";"salmon1";"salmon2";"salmon3";
"salmon4";"LightSalmon1";"LightSalmon2";"LightSalmon3";"LightSalmon4";"orange1";"orange2";"orange3";"orange4";"DarkOrange1";
"DarkOrange2";"DarkOrange3";"DarkOrange4";"coral1";"coral2";"coral3";"coral4";"tomato1";"tomato2";"tomato3";
"tomato4";"OrangeRed1";"OrangeRed2";"OrangeRed3";"OrangeRed4";"red1";"red2";"red3";"red4";"DeepPink1";
"DeepPink2";"DeepPink3";"DeepPink4";"HotPink1";"HotPink2";"HotPink3";"HotPink4";"pink1";"pink2";"pink3";
"pink4";"LightPink1";"LightPink2";"LightPink3";"LightPink4";"PaleVioletRed1";"PaleVioletRed2";"PaleVioletRed3";"PaleVioletRed4";"maroon1";
"maroon2";"maroon3";"maroon4";"VioletRed1";"VioletRed2";"VioletRed3";"VioletRed4";"magenta1";"magenta2";"magenta3";
"magenta4";"orchid1";"orchid2";"orchid3";"orchid4";"plum1";"plum2";"plum3";"plum4";"MediumOrchid1";
"MediumOrchid2";"MediumOrchid3";"MediumOrchid4";"DarkOrchid1";"DarkOrchid2";"DarkOrchid3";"DarkOrchid4";"purple1";"purple2";"purple3";
"purple4";"MediumPurple1";"MediumPurple2";"MediumPurple3";"MediumPurple4";"thistle1";"thistle2";"thistle3";"thistle4";"gray0";
"grey0";"gray1";"grey1";"gray2";"grey2";"gray3";"grey3";"gray4";"grey4";"gray5";
"grey5";"gray6";"grey6";"gray7";"grey7";"gray8";"grey8";"gray9";"grey9";"gray10";
"grey10";"gray11";"grey11";"gray12";"grey12";"gray13";"grey13";"gray14";"grey14";"gray15";
"grey15";"gray16";"grey16";"gray17";"grey17";"gray18";"grey18";"gray19";"grey19";"gray20";
"grey20";"gray21";"grey21";"gray22";"grey22";"gray23";"grey23";"gray24";"grey24";"gray25";
"grey25";"gray26";"grey26";"gray27";"grey27";"gray28";"grey28";"gray29";"grey29";"gray30";
"grey30";"gray31";"grey31";"gray32";"grey32";"gray33";"grey33";"gray34";"grey34";"gray35";
"grey35";"gray36";"grey36";"gray37";"grey37";"gray38";"grey38";"gray39";"grey39";"gray40";
"grey40";"gray41";"grey41";"gray42";"grey42";"gray43";"grey43";"gray44";"grey44";"gray45";
"grey45";"gray46";"grey46";"gray47";"grey47";"gray48";"grey48";"gray49";"grey49";"gray50";
"grey50";"gray51";"grey51";"gray52";"grey52";"gray53";"grey53";"gray54";"grey54";"gray55";
"grey55";"gray56";"grey56";"gray57";"grey57";"gray58";"grey58";"gray59";"grey59";"gray60";
"grey60";"gray61";"grey61";"gray62";"grey62";"gray63";"grey63";"gray64";"grey64";"gray65";
"grey65";"gray66";"grey66";"gray67";"grey67";"gray68";"grey68";"gray69";"grey69";"gray70";
"grey70";"gray71";"grey71";"gray72";"grey72";"gray73";"grey73";"gray74";"grey74";"gray75";
"grey75";"gray76";"grey76";"gray77";"grey77";"gray78";"grey78";"gray79";"grey79";"gray80";
"grey80";"gray81";"grey81";"gray82";"grey82";"gray83";"grey83";"gray84";"grey84";"gray85";
"grey85";"gray86";"grey86";"gray87";"grey87";"gray88";"grey88";"gray89";"grey89";"gray90";
"grey90";"gray91";"grey91";"gray92";"grey92";"gray93";"grey93";"gray94";"grey94";"gray95";
"grey95";"gray96";"grey96";"gray97";"grey97";"gray98";"grey98";"gray99";"grey99";"gray100";
"grey100";"dark_grey";"DarkGrey";"dark_gray";"DarkGray";"dark_blue";"DarkBlue";"dark_cyan";"DarkCyan";"dark_magenta";
"DarkMagenta";"dark_red";"DarkRed";"light_green";"LightGreen";"crimson";"indigo";"olive";"rebecca_purple";"RebeccaPurple";
"silver";"teal";     };
    };
    int_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_277";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1466276;
       val_type_fixed=0;
      };
     };
     name="red";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
     ar {
      name="ar";
     [782] 255;248;248;245;245;220;255;255;253;253;
250;250;250;255;255;255;255;255;255;255;
255;255;255;255;255;255;255;255;240;245;
245;240;240;240;230;255;255;255;255;255;
0;47;47;47;47;105;105;105;105;112;
112;112;112;119;119;119;119;190;190;190;
190;190;190;128;128;128;128;211;211;211;
211;25;25;0;0;0;100;100;72;72;
106;106;123;123;132;132;0;0;65;65;
0;30;30;0;0;135;135;135;135;70;
70;176;176;173;173;176;176;175;175;0;
0;72;72;64;0;0;224;224;95;95;
102;102;127;0;0;85;85;143;143;46;
46;60;60;32;32;152;152;0;0;124;
124;0;0;0;0;0;0;127;0;0;
173;173;50;50;154;154;34;34;107;107;
189;189;240;238;238;250;250;255;255;255;
255;238;238;218;184;184;188;188;205;205;
139;139;160;205;222;245;245;244;244;210;
210;178;165;233;233;250;255;255;255;255;
255;255;240;240;255;255;255;255;255;255;
255;255;255;255;255;219;219;176;176;176;
128;128;199;199;208;208;255;255;238;221;
218;186;186;153;153;148;148;138;138;160;
160;160;128;128;147;147;216;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;240;224;193;131;255;238;205;
139;255;238;205;139;240;224;193;131;131;
122;105;71;72;67;58;39;0;0;0;
0;30;28;24;16;99;92;79;54;0;
0;0;0;135;126;108;74;176;164;141;
96;198;185;159;108;202;188;162;110;191;
178;154;104;224;209;180;122;187;174;150;
102;152;142;122;83;0;0;0;0;0;
0;0;0;151;141;121;82;127;118;102;
69;193;180;155;105;84;78;67;46;154;
144;124;84;0;0;0;0;0;0;0;
0;127;118;102;69;192;179;154;105;202;
188;162;110;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;224;
209;180;122;191;178;154;104;155;145;125;
85;171;159;137;93;255;238;205;139;0;
0;3;3;5;5;8;8;10;10;13;
13;15;15;18;18;20;20;23;23;26;
26;28;28;31;31;33;33;36;36;38;
38;41;41;43;43;46;46;48;48;51;
51;54;54;56;56;59;59;61;61;64;
64;66;66;69;69;71;71;74;74;77;
77;79;79;82;82;84;84;87;87;89;
89;92;92;94;94;97;97;99;99;102;
102;105;105;107;107;110;110;112;112;115;
115;117;117;120;120;122;122;125;125;127;
127;130;130;133;133;135;135;138;138;140;
140;143;143;145;145;148;148;150;150;153;
153;156;156;158;158;161;161;163;163;166;
166;168;168;171;171;173;173;176;176;179;
179;181;181;184;184;186;186;189;189;191;
191;194;194;196;196;199;199;201;201;204;
204;207;207;209;209;212;212;214;214;217;
217;219;219;222;222;224;224;227;227;229;
229;232;232;235;235;237;237;240;240;242;
242;245;245;247;247;250;250;252;252;255;
255;169;169;169;169;0;0;0;0;139;
139;139;139;144;144;220;75;128;102;102;
192;0;     };
    };
    int_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_278";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1466276;
       val_type_fixed=0;
      };
     };
     name="green";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
     ar {
      name="ar";
     [782] 250;248;248;245;245;220;250;250;245;245;
240;235;235;239;239;235;235;228;218;218;
222;222;228;248;255;250;250;245;255;255;
255;255;248;248;230;240;240;228;228;255;
0;79;79;79;79;105;105;105;105;128;
128;128;128;136;136;136;136;190;190;190;
190;190;190;128;128;128;128;211;211;211;
211;25;25;0;0;0;149;149;61;61;
90;90;104;104;112;112;0;0;105;105;
0;144;144;191;191;206;206;206;206;130;
130;196;196;216;216;224;224;238;238;206;
206;209;209;224;255;255;255;255;158;158;
205;205;255;100;100;107;107;188;188;139;
139;179;179;178;178;251;251;255;255;252;
252;255;255;255;255;128;128;255;250;250;
255;255;205;205;205;205;139;139;142;142;
183;183;230;232;232;250;250;255;255;255;
215;221;221;165;134;134;143;143;92;92;
69;69;82;133;184;245;222;164;164;180;
105;34;42;150;150;128;160;160;165;140;
140;127;128;128;99;69;69;0;105;105;
20;20;192;182;182;112;112;48;48;48;
0;0;21;21;32;32;0;0;130;160;
112;85;85;50;50;0;0;43;43;32;
32;32;0;0;112;112;191;250;233;201;
137;245;229;197;134;239;223;192;131;228;
213;183;125;218;203;175;119;222;207;179;
121;250;233;201;137;248;232;200;136;255;
238;205;139;255;238;205;139;240;224;193;
131;228;213;183;125;255;238;205;139;111;
103;89;60;118;110;95;64;0;0;0;
0;144;134;116;78;184;172;148;100;191;
178;154;104;206;192;166;112;226;211;182;
123;226;211;182;123;225;210;181;123;239;
223;192;131;255;238;205;139;255;238;205;
139;245;229;197;134;245;229;197;134;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;246;230;198;134;236;220;190;
129;255;238;205;139;255;238;205;139;215;
201;173;117;193;180;155;105;185;173;149;
101;193;180;155;105;106;99;85;58;130;
121;104;71;211;197;170;115;231;216;186;
126;165;154;133;90;127;118;102;69;48;
44;38;26;64;59;51;35;140;130;112;
76;160;149;129;87;165;154;133;90;127;
118;102;69;114;106;91;62;99;92;79;
54;69;64;55;37;0;0;0;0;20;
18;16;10;110;106;96;58;181;169;145;
99;174;162;140;95;130;121;104;71;52;
48;41;28;62;58;50;34;0;0;0;
0;131;122;105;71;187;174;150;102;102;
95;82;55;62;58;50;34;48;44;38;
26;130;121;104;71;225;210;181;123;0;
0;3;3;5;5;8;8;10;10;13;
13;15;15;18;18;20;20;23;23;26;
26;28;28;31;31;33;33;36;36;38;
38;41;41;43;43;46;46;48;48;51;
51;54;54;56;56;59;59;61;61;64;
64;66;66;69;69;71;71;74;74;77;
77;79;79;82;82;84;84;87;87;89;
89;92;92;94;94;97;97;99;99;102;
102;105;105;107;107;110;110;112;112;115;
115;117;117;120;120;122;122;125;125;127;
127;130;130;133;133;135;135;138;138;140;
140;143;143;145;145;148;148;150;150;153;
153;156;156;158;158;161;161;163;163;166;
166;168;168;171;171;173;173;176;176;179;
179;181;181;184;184;186;186;189;189;191;
191;194;194;196;196;199;199;201;201;204;
204;207;207;209;209;212;212;214;214;217;
217;219;219;222;222;224;224;227;227;229;
229;232;232;235;235;237;237;240;240;242;
242;245;245;247;247;250;250;252;252;255;
255;169;169;169;169;0;0;139;139;0;
0;0;0;238;238;20;0;128;51;51;
192;128;     };
    };
    int_Data @[3] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_276";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="NARROW";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.1466276;
       val_type_fixed=0;
      };
     };
     name="blue";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
     ar {
      name="ar";
     [782] 250;255;255;245;245;220;240;240;230;230;
230;215;215;213;213;205;205;196;185;185;
173;173;181;220;240;205;205;238;240;250;
250;255;255;255;250;245;245;225;225;255;
0;79;79;79;79;105;105;105;105;144;
144;144;144;153;153;153;153;190;190;190;
190;190;190;128;128;128;128;211;211;211;
211;112;112;128;128;128;237;237;139;139;
205;205;238;238;255;255;205;205;225;225;
255;255;255;255;255;235;235;250;250;180;
180;222;222;230;230;230;230;238;238;209;
209;204;204;208;255;255;255;255;160;160;
170;170;212;0;0;47;47;143;143;87;
87;113;113;170;170;152;152;127;127;0;
0;0;0;0;0;0;0;0;154;154;
47;47;50;50;50;50;34;34;35;35;
107;107;140;170;170;210;210;224;224;0;
0;130;130;32;11;11;143;143;92;92;
19;19;45;63;135;220;179;96;96;140;
30;34;42;122;122;114;122;122;0;0;
0;80;128;128;71;0;0;0;180;180;
147;147;203;193;193;147;147;96;96;96;
0;0;133;133;144;144;255;255;238;221;
214;211;211;204;204;211;211;226;226;240;
240;240;128;128;219;219;216;250;233;201;
137;238;222;191;130;219;204;176;120;196;
183;158;107;185;173;149;101;173;161;139;
94;205;191;165;112;220;205;177;120;240;
224;193;131;240;224;193;131;245;229;197;
134;225;210;181;123;255;238;205;139;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;255;
238;205;139;255;238;205;139;212;198;170;
116;193;180;155;105;159;148;128;87;154;
144;124;84;127;118;102;69;0;0;0;
0;0;0;0;0;62;58;50;34;112;
104;90;61;143;133;115;78;139;130;112;
76;224;209;180;122;0;0;0;0;0;
0;0;0;37;34;29;20;15;14;12;
8;193;180;155;105;106;99;85;58;71;
66;57;38;155;145;125;85;186;174;150;
102;79;73;63;43;36;33;29;19;48;
44;38;26;64;59;51;35;105;98;84;
57;122;114;98;66;0;0;0;0;0;
0;0;0;86;80;69;47;71;66;57;
38;0;0;0;0;0;0;0;0;147;
137;118;80;180;167;144;98;197;184;158;
108;185;173;149;101;171;159;137;93;179;
167;144;98;150;140;120;82;255;238;205;
139;250;233;201;137;255;238;205;139;255;
238;205;139;255;238;205;139;255;238;205;
139;255;238;205;139;255;238;205;139;0;
0;3;3;5;5;8;8;10;10;13;
13;15;15;18;18;20;20;23;23;26;
26;28;28;31;31;33;33;36;36;38;
38;41;41;43;43;46;46;48;48;51;
51;54;54;56;56;59;59;61;61;64;
64;66;66;69;69;71;71;74;74;77;
77;79;79;82;82;84;84;87;87;89;
89;92;92;94;94;97;97;99;99;102;
102;105;105;107;107;110;110;112;112;115;
115;117;117;120;120;122;122;125;125;127;
127;130;130;133;133;135;135;138;138;140;
140;143;143;145;145;148;148;150;150;153;
153;156;156;158;158;161;161;163;163;166;
166;168;168;171;171;173;173;176;176;179;
179;181;181;184;184;186;186;189;189;191;
191;194;194;196;196;199;199;201;201;204;
204;207;207;209;209;212;212;214;214;217;
217;219;219;222;222;224;224;227;227;229;
229;232;232;235;235;237;237;240;240;242;
242;245;245;247;247;250;250;252;252;255;
255;169;169;169;169;139;139;139;139;139;
139;0;0;144;144;60;130;0;153;153;
192;128;     };
    };
    String_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_275";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1466276;
       val_type_fixed=0;
      };
     };
     name="hexcolor";
     desc="standard web #rrggbb in hex";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
     ar {
      name="ar";
     [782] "#fffafa";"#f8f8ff";"#f8f8ff";"#f5f5f5";"#f5f5f5";"#dcdcdc";"#fffaf0";"#fffaf0";"#fdf5e6";"#fdf5e6";
"#faf0e6";"#faebd7";"#faebd7";"#ffefd5";"#ffefd5";"#ffebcd";"#ffebcd";"#ffe4c4";"#ffdab9";"#ffdab9";
"#ffdead";"#ffdead";"#ffe4b5";"#fff8dc";"#fffff0";"#fffacd";"#fffacd";"#fff5ee";"#f0fff0";"#f5fffa";
"#f5fffa";"#f0ffff";"#f0f8ff";"#f0f8ff";"#e6e6fa";"#fff0f5";"#fff0f5";"#ffe4e1";"#ffe4e1";"#ffffff";
"#000000";"#2f4f4f";"#2f4f4f";"#2f4f4f";"#2f4f4f";"#696969";"#696969";"#696969";"#696969";"#708090";
"#708090";"#708090";"#708090";"#778899";"#778899";"#778899";"#778899";"#bebebe";"#bebebe";"#bebebe";
"#bebebe";"#bebebe";"#bebebe";"#808080";"#808080";"#808080";"#808080";"#d3d3d3";"#d3d3d3";"#d3d3d3";
"#d3d3d3";"#191970";"#191970";"#000080";"#000080";"#000080";"#6495ed";"#6495ed";"#483d8b";"#483d8b";
"#6a5acd";"#6a5acd";"#7b68ee";"#7b68ee";"#8470ff";"#8470ff";"#0000cd";"#0000cd";"#4169e1";"#4169e1";
"#0000ff";"#1e90ff";"#1e90ff";"#00bfff";"#00bfff";"#87ceeb";"#87ceeb";"#87cefa";"#87cefa";"#4682b4";
"#4682b4";"#b0c4de";"#b0c4de";"#add8e6";"#add8e6";"#b0e0e6";"#b0e0e6";"#afeeee";"#afeeee";"#00ced1";
"#00ced1";"#48d1cc";"#48d1cc";"#40e0d0";"#00ffff";"#00ffff";"#e0ffff";"#e0ffff";"#5f9ea0";"#5f9ea0";
"#66cdaa";"#66cdaa";"#7fffd4";"#006400";"#006400";"#556b2f";"#556b2f";"#8fbc8f";"#8fbc8f";"#2e8b57";
"#2e8b57";"#3cb371";"#3cb371";"#20b2aa";"#20b2aa";"#98fb98";"#98fb98";"#00ff7f";"#00ff7f";"#7cfc00";
"#7cfc00";"#00ff00";"#00ff00";"#00ff00";"#00ff00";"#008000";"#008000";"#7fff00";"#00fa9a";"#00fa9a";
"#adff2f";"#adff2f";"#32cd32";"#32cd32";"#9acd32";"#9acd32";"#228b22";"#228b22";"#6b8e23";"#6b8e23";
"#bdb76b";"#bdb76b";"#f0e68c";"#eee8aa";"#eee8aa";"#fafad2";"#fafad2";"#ffffe0";"#ffffe0";"#ffff00";
"#ffd700";"#eedd82";"#eedd82";"#daa520";"#b8860b";"#b8860b";"#bc8f8f";"#bc8f8f";"#cd5c5c";"#cd5c5c";
"#8b4513";"#8b4513";"#a0522d";"#cd853f";"#deb887";"#f5f5dc";"#f5deb3";"#f4a460";"#f4a460";"#d2b48c";
"#d2691e";"#b22222";"#a52a2a";"#e9967a";"#e9967a";"#fa8072";"#ffa07a";"#ffa07a";"#ffa500";"#ff8c00";
"#ff8c00";"#ff7f50";"#f08080";"#f08080";"#ff6347";"#ff4500";"#ff4500";"#ff0000";"#ff69b4";"#ff69b4";
"#ff1493";"#ff1493";"#ffc0cb";"#ffb6c1";"#ffb6c1";"#db7093";"#db7093";"#b03060";"#b03060";"#b03060";
"#800000";"#800000";"#c71585";"#c71585";"#d02090";"#d02090";"#ff00ff";"#ff00ff";"#ee82ee";"#dda0dd";
"#da70d6";"#ba55d3";"#ba55d3";"#9932cc";"#9932cc";"#9400d3";"#9400d3";"#8a2be2";"#8a2be2";"#a020f0";
"#a020f0";"#a020f0";"#800080";"#800080";"#9370db";"#9370db";"#d8bfd8";"#fffafa";"#eee9e9";"#cdc9c9";
"#8b8989";"#fff5ee";"#eee5de";"#cdc5bf";"#8b8682";"#ffefdb";"#eedfcc";"#cdc0b0";"#8b8378";"#ffe4c4";
"#eed5b7";"#cdb79e";"#8b7d6b";"#ffdab9";"#eecbad";"#cdaf95";"#8b7765";"#ffdead";"#eecfa1";"#cdb38b";
"#8b795e";"#fffacd";"#eee9bf";"#cdc9a5";"#8b8970";"#fff8dc";"#eee8cd";"#cdc8b1";"#8b8878";"#fffff0";
"#eeeee0";"#cdcdc1";"#8b8b83";"#f0fff0";"#e0eee0";"#c1cdc1";"#838b83";"#fff0f5";"#eee0e5";"#cdc1c5";
"#8b8386";"#ffe4e1";"#eed5d2";"#cdb7b5";"#8b7d7b";"#f0ffff";"#e0eeee";"#c1cdcd";"#838b8b";"#836fff";
"#7a67ee";"#6959cd";"#473c8b";"#4876ff";"#436eee";"#3a5fcd";"#27408b";"#0000ff";"#0000ee";"#0000cd";
"#00008b";"#1e90ff";"#1c86ee";"#1874cd";"#104e8b";"#63b8ff";"#5cacee";"#4f94cd";"#36648b";"#00bfff";
"#00b2ee";"#009acd";"#00688b";"#87ceff";"#7ec0ee";"#6ca6cd";"#4a708b";"#b0e2ff";"#a4d3ee";"#8db6cd";
"#607b8b";"#c6e2ff";"#b9d3ee";"#9fb6cd";"#6c7b8b";"#cae1ff";"#bcd2ee";"#a2b5cd";"#6e7b8b";"#bfefff";
"#b2dfee";"#9ac0cd";"#68838b";"#e0ffff";"#d1eeee";"#b4cdcd";"#7a8b8b";"#bbffff";"#aeeeee";"#96cdcd";
"#668b8b";"#98f5ff";"#8ee5ee";"#7ac5cd";"#53868b";"#00f5ff";"#00e5ee";"#00c5cd";"#00868b";"#00ffff";
"#00eeee";"#00cdcd";"#008b8b";"#97ffff";"#8deeee";"#79cdcd";"#528b8b";"#7fffd4";"#76eec6";"#66cdaa";
"#458b74";"#c1ffc1";"#b4eeb4";"#9bcd9b";"#698b69";"#54ff9f";"#4eee94";"#43cd80";"#2e8b57";"#9aff9a";
"#90ee90";"#7ccd7c";"#548b54";"#00ff7f";"#00ee76";"#00cd66";"#008b45";"#00ff00";"#00ee00";"#00cd00";
"#008b00";"#7fff00";"#76ee00";"#66cd00";"#458b00";"#c0ff3e";"#b3ee3a";"#9acd32";"#698b22";"#caff70";
"#bcee68";"#a2cd5a";"#6e8b3d";"#fff68f";"#eee685";"#cdc673";"#8b864e";"#ffec8b";"#eedc82";"#cdbe70";
"#8b814c";"#ffffe0";"#eeeed1";"#cdcdb4";"#8b8b7a";"#ffff00";"#eeee00";"#cdcd00";"#8b8b00";"#ffd700";
"#eec900";"#cdad00";"#8b7500";"#ffc125";"#eeb422";"#cd9b1d";"#8b6914";"#ffb90f";"#eead0e";"#cd950c";
"#8b6508";"#ffc1c1";"#eeb4b4";"#cd9b9b";"#8b6969";"#ff6a6a";"#ee6363";"#cd5555";"#8b3a3a";"#ff8247";
"#ee7942";"#cd6839";"#8b4726";"#ffd39b";"#eec591";"#cdaa7d";"#8b7355";"#ffe7ba";"#eed8ae";"#cdba96";
"#8b7e66";"#ffa54f";"#ee9a49";"#cd853f";"#8b5a2b";"#ff7f24";"#ee7621";"#cd661d";"#8b4513";"#ff3030";
"#ee2c2c";"#cd2626";"#8b1a1a";"#ff4040";"#ee3b3b";"#cd3333";"#8b2323";"#ff8c69";"#ee8262";"#cd7054";
"#8b4c39";"#ffa07a";"#ee9572";"#cd8162";"#8b5742";"#ffa500";"#ee9a00";"#cd8500";"#8b5a00";"#ff7f00";
"#ee7600";"#cd6600";"#8b4500";"#ff7256";"#ee6a50";"#cd5b45";"#8b3e2f";"#ff6347";"#ee5c42";"#cd4f39";
"#8b3626";"#ff4500";"#ee4000";"#cd3700";"#8b2500";"#ff0000";"#ee0000";"#cd0000";"#8b0000";"#ff1493";
"#ee1289";"#cd1076";"#8b0a50";"#ff6eb4";"#ee6aa7";"#cd6090";"#8b3a62";"#ffb5c5";"#eea9b8";"#cd919e";
"#8b636c";"#ffaeb9";"#eea2ad";"#cd8c95";"#8b5f65";"#ff82ab";"#ee799f";"#cd6889";"#8b475d";"#ff34b3";
"#ee30a7";"#cd2990";"#8b1c62";"#ff3e96";"#ee3a8c";"#cd3278";"#8b2252";"#ff00ff";"#ee00ee";"#cd00cd";
"#8b008b";"#ff83fa";"#ee7ae9";"#cd69c9";"#8b4789";"#ffbbff";"#eeaeee";"#cd96cd";"#8b668b";"#e066ff";
"#d15fee";"#b452cd";"#7a378b";"#bf3eff";"#b23aee";"#9a32cd";"#68228b";"#9b30ff";"#912cee";"#7d26cd";
"#551a8b";"#ab82ff";"#9f79ee";"#8968cd";"#5d478b";"#ffe1ff";"#eed2ee";"#cdb5cd";"#8b7b8b";"#000000";
"#000000";"#030303";"#030303";"#050505";"#050505";"#080808";"#080808";"#0a0a0a";"#0a0a0a";"#0d0d0d";
"#0d0d0d";"#0f0f0f";"#0f0f0f";"#121212";"#121212";"#141414";"#141414";"#171717";"#171717";"#1a1a1a";
"#1a1a1a";"#1c1c1c";"#1c1c1c";"#1f1f1f";"#1f1f1f";"#212121";"#212121";"#242424";"#242424";"#262626";
"#262626";"#292929";"#292929";"#2b2b2b";"#2b2b2b";"#2e2e2e";"#2e2e2e";"#303030";"#303030";"#333333";
"#333333";"#363636";"#363636";"#383838";"#383838";"#3b3b3b";"#3b3b3b";"#3d3d3d";"#3d3d3d";"#404040";
"#404040";"#424242";"#424242";"#454545";"#454545";"#474747";"#474747";"#4a4a4a";"#4a4a4a";"#4d4d4d";
"#4d4d4d";"#4f4f4f";"#4f4f4f";"#525252";"#525252";"#545454";"#545454";"#575757";"#575757";"#595959";
"#595959";"#5c5c5c";"#5c5c5c";"#5e5e5e";"#5e5e5e";"#616161";"#616161";"#636363";"#636363";"#666666";
"#666666";"#696969";"#696969";"#6b6b6b";"#6b6b6b";"#6e6e6e";"#6e6e6e";"#707070";"#707070";"#737373";
"#737373";"#757575";"#757575";"#787878";"#787878";"#7a7a7a";"#7a7a7a";"#7d7d7d";"#7d7d7d";"#7f7f7f";
"#7f7f7f";"#828282";"#828282";"#858585";"#858585";"#878787";"#878787";"#8a8a8a";"#8a8a8a";"#8c8c8c";
"#8c8c8c";"#8f8f8f";"#8f8f8f";"#919191";"#919191";"#949494";"#949494";"#969696";"#969696";"#999999";
"#999999";"#9c9c9c";"#9c9c9c";"#9e9e9e";"#9e9e9e";"#a1a1a1";"#a1a1a1";"#a3a3a3";"#a3a3a3";"#a6a6a6";
"#a6a6a6";"#a8a8a8";"#a8a8a8";"#ababab";"#ababab";"#adadad";"#adadad";"#b0b0b0";"#b0b0b0";"#b3b3b3";
"#b3b3b3";"#b5b5b5";"#b5b5b5";"#b8b8b8";"#b8b8b8";"#bababa";"#bababa";"#bdbdbd";"#bdbdbd";"#bfbfbf";
"#bfbfbf";"#c2c2c2";"#c2c2c2";"#c4c4c4";"#c4c4c4";"#c7c7c7";"#c7c7c7";"#c9c9c9";"#c9c9c9";"#cccccc";
"#cccccc";"#cfcfcf";"#cfcfcf";"#d1d1d1";"#d1d1d1";"#d4d4d4";"#d4d4d4";"#d6d6d6";"#d6d6d6";"#d9d9d9";
"#d9d9d9";"#dbdbdb";"#dbdbdb";"#dedede";"#dedede";"#e0e0e0";"#e0e0e0";"#e3e3e3";"#e3e3e3";"#e5e5e5";
"#e5e5e5";"#e8e8e8";"#e8e8e8";"#ebebeb";"#ebebeb";"#ededed";"#ededed";"#f0f0f0";"#f0f0f0";"#f2f2f2";
"#f2f2f2";"#f5f5f5";"#f5f5f5";"#f7f7f7";"#f7f7f7";"#fafafa";"#fafafa";"#fcfcfc";"#fcfcfc";"#ffffff";
"#ffffff";"#a9a9a9";"#a9a9a9";"#a9a9a9";"#a9a9a9";"#00008b";"#00008b";"#008b8b";"#008b8b";"#8b008b";
"#8b008b";"#8b0000";"#8b0000";"#90ee90";"#90ee90";"#dc143c";"#4b0082";"#808000";"#663399";"#663399";
"#c0c0c0";"#008080";     };
    };
   };
   data_flags=SAVE_ROWS|AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [782] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[4] {
   name="Scene";
   desc=;
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_101";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1304985;
       val_type_fixed=0;
      };
     };
     name="name";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=89;
     ar {
      name="ar";
     [1] "ball";     };
    };
    float_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_102";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1304985;
       val_type_fixed=0;
      };
     };
     name="ctr_x";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=89;
     ar {
      name="ar";
     [1] 0.505687;     };
    };
    float_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_103";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1304985;
       val_type_fixed=0;
      };
     };
     name="ctr_y";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=89;
     ar {
      name="ar";
     [1] 0.14547899;     };
    };
    float_Data @[3] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_104";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1304985;
       val_type_fixed=0;
      };
     };
     name="size";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=89;
     ar {
      name="ar";
     [1] 0.244435;     };
    };
    String_Data @[4] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_280";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.1466276;
       val_type_fixed=0;
      };
     };
     name="color";
     col_flags=SAVE_DATA|CHECKBOX;
     is_matrix=0;
     cell_geom{ 1;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=0;
     ar {
      name="ar";
     [1] "black";     };
    };
   };
   data_flags=SAVE_ROWS|AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [1] 0;   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  DataTable @[5] {
   name="Files";
   desc=;
   data {
    name="data";
    el_typ=String_Data;
    el_def=0;
    String_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_459";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.2214076;
       val_type_fixed=0;
      };
     };
     name="FileName";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{      };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=151;
    };
    String_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_460";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_panel_wd";
       value 8 0=0.3856305;
       val_type_fixed=0;
      };
     };
     name="FilePath";
     col_flags=SAVE_DATA;
     is_matrix=0;
     cell_geom{      };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [0]      };
     width=263;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [0]    };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
  taCanvas @[6] {
   name="FullViewCanvas";
   coord_type=NORMALIZED;
  };
  taCanvas @[7] {
   name="FoveaCanvas";
   coord_type=NORMALIZED;
  };
  taCanvas @[8] {
   name="SceneCanvas";
   coord_type=NORMALIZED;
  };
  taSound @[9] {
   name="CurSound";
  };
  DataTable @[10] {
   name="CanvasViews";
   desc=;
   data {
    name="data";
    el_typ=float_Data;
    el_def=0;
    float_Data @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_470";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="IMAGE";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.1325479;
       val_type_fixed=0;
      };
     };
     name="Scene";
     col_flags=SAVE_DATA;
     is_matrix=1;
     cell_geom{ 256;256;3;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [3] ;;;     };
     width=90;
    };
    float_Data @[1] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_471";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="IMAGE";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.1325479;
       val_type_fixed=0;
      };
     };
     name="FullView";
     col_flags=SAVE_DATA;
     is_matrix=1;
     cell_geom{ 256;256;3;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [3] ;;;     };
     width=90;
    };
    float_Data @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_472";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="IMAGE";
       value 1 0=1;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_panel_wd";
       value 8 0=0.1325479;
       val_type_fixed=0;
      };
     };
     name="Fovea";
     col_flags=SAVE_DATA;
     is_matrix=1;
     cell_geom{ 64;64;3;     };
     calc_expr {
      expr=;
     };
     dim_names {
      name="dim_names";
     [3] ;;;     };
     width=90;
    };
   };
   data_flags=AUTO_CALC;
   auto_load=NO_AUTO_LOAD;
   auto_load_file=;
   keygen 4 0=0;
   row_indexes {
    name="row_indexes";
   [1] 0;   };
   last_sort_spec {
    name="last_sort_spec";
    ops {
     name="ops";
     el_typ=DataSortEl;
     el_def=0;
    };
   };
   control_panel_cells {
    name="control_panel_cells";
    el_typ=DataTableCell;
    el_def=0;
   };
  };
 };
 types {
  name="types";
  el_typ=DynEnumType;
  el_def=0;
  DynEnumType @[0] {
   name="XY";
   desc=;
   enums {
    name="enums";
    el_typ=DynEnumItem;
    el_def=0;
    DynEnumItem @[0] {
     name="X";
     value=0;
     desc=;
    };
    DynEnumItem @[1] {
     name="Y";
     value=1;
     desc=;
    };
   };
   bits=0;
  };
 };
 args {
  name="args";
  el_typ=ProgVar;
  el_def=0;
 };
 vars {
  name="vars";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name="cur_sentence";
   var_type=T_String;
   string_val="the ball:Ph hits:V the block:Po .";
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[1] {
   name="fix_x";
   var_type=T_Real;
   real_val=0.5;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="horizontal fixation location within Scene";
   init_from=NULL;
  };
  ProgVar @[2] {
   name="fix_y";
   var_type=T_Real;
   real_val=0.5;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="vertical fixation location within Scene";
   init_from=NULL;
  };
  ProgVar @[3] {
   name="atrials";
   var_type=T_Int;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="number of alpha trials for current scene";
   init_from=NULL;
  };
  ProgVar @[4] {
   name="cur_trial";
   var_type=T_Int;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[5] {
   name="aud_word";
   var_type=T_String;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="what word to say now for auditory channel";
   init_from=NULL;
  };
  ProgVar @[6] {
   name="cur_aud_word";
   var_type=T_String;
   string_val=;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="currently loaded auditory word";
   init_from=NULL;
  };
  ProgVar @[7] {
   name="aud_start";
   var_type=T_Int;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="what trial to start speaking word";
   init_from=NULL;
  };
  ProgVar @[8] {
   name="p_obj";
   var_type=T_String;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="theme patient object name";
   init_from=NULL;
  };
  ProgVar @[9] {
   name="p_color";
   var_type=T_String;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="subject color name";
   init_from=NULL;
  };
  ProgVar @[10] {
   name="p_size";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="subject overall scaling";
   init_from=NULL;
  };
  ProgVar @[11] {
   name="p_start_x";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="subject starting position";
   init_from=NULL;
  };
  ProgVar @[12] {
   name="p_start_y";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="subject starting position";
   init_from=NULL;
  };
  ProgVar @[13] {
   name="p_vel_x";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="subject velocity";
   init_from=NULL;
  };
  ProgVar @[14] {
   name="p_vel_y";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="subject velocity";
   init_from=NULL;
  };
  ProgVar @[15] {
   name="p_pos_x";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="position";
   init_from=NULL;
  };
  ProgVar @[16] {
   name="p_pos_y";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="position";
   init_from=NULL;
  };
  ProgVar @[17] {
   name="p_traj";
   var_type=T_String;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|EDIT_VAL;
   reference=0;
   desc="named trajectory for subject (list of points over time)";
   init_from=NULL;
  };
  ProgVar @[18] {
   name="o_obj";
   var_type=T_String;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="object object name";
   init_from=NULL;
  };
  ProgVar @[19] {
   name="o_color";
   var_type=T_String;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="object color name";
   init_from=NULL;
  };
  ProgVar @[20] {
   name="o_size";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="object size";
   init_from=NULL;
  };
  ProgVar @[21] {
   name="o_start_x";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="object starting position";
   init_from=NULL;
  };
  ProgVar @[22] {
   name="o_start_y";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="object starting position";
   init_from=NULL;
  };
  ProgVar @[23] {
   name="o_vel_x";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="object velocity";
   init_from=NULL;
  };
  ProgVar @[24] {
   name="o_vel_y";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="object velocity";
   init_from=NULL;
  };
  ProgVar @[25] {
   name="o_pos_x";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="object position";
   init_from=NULL;
  };
  ProgVar @[26] {
   name="o_pos_y";
   var_type=T_Real;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
   reference=0;
   desc="object position";
   init_from=NULL;
  };
  ProgVar @[27] {
   name="o_traj";
   var_type=T_String;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|EDIT_VAL;
   reference=0;
   desc="named trajectory for object";
   init_from=NULL;
  };
  ProgVar @[28] {
   name="max_pos";
   var_type=T_Real;
   real_val=0.9;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="maximum positional value -- keep things in bounds";
   init_from=NULL;
  };
  ProgVar @[29] {
   name="min_pos";
   var_type=T_Real;
   real_val=0.1;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="min positional value -- keep things in bounds";
   init_from=NULL;
  };
  ProgVar @[30] {
   name="VisualObjects";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][7].objs[0]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[31] {
   name="Scene";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][7].objs[4]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[32] {
   name="Files";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][7].objs[5]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[33] {
   name="FullViewCanvas";
   var_type=T_Object;
   object_type=taCanvas;
   object_val=.projects[0].programs.gp[3][7].objs[6]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[34] {
   name="FoveaCanvas";
   var_type=T_Object;
   object_type=taCanvas;
   object_val=.projects[0].programs.gp[3][7].objs[7]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[35] {
   name="SceneCanvas";
   var_type=T_Object;
   object_type=taCanvas;
   object_val=.projects[0].programs.gp[3][7].objs[8]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[36] {
   name="init_vis_objs";
   var_type=T_Bool;
   bool_val=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="reload visual objects upon Init";
   init_from=NULL;
  };
  ProgVar @[37] {
   name="vis_obj_dir";
   var_type=T_String;
   string_val="images/twod_objs_svg";
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[38] {
   name="init_aud_words";
   var_type=T_Bool;
   bool_val=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="reload auditory words upon init";
   init_from=NULL;
  };
  ProgVar @[39] {
   name="aud_word_dir";
   var_type=T_String;
   string_val="images/sound/baby_words";
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[40] {
   name="full_view_pixels";
   var_type=T_Int;
   int_val=256;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[41] {
   name="fovea_pixels";
   var_type=T_Int;
   int_val=64;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[42] {
   name="fovea_scale";
   var_type=T_Real;
   real_val=2;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[43] {
   name="bg_color";
   var_type=T_String;
   string_val="grey";
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[44] {
   name="line_color";
   var_type=T_String;
   string_val="black";
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[45] {
   name="line_width";
   var_type=T_Real;
   real_val=2;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[46] {
   name="CanvasViews";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][7].objs[10]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[47] {
   name="ValueNames";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][7].objs[2]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[48] {
   name="closest_obj_scene_idx";
   var_type=T_Int;
   int_val=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="index in Scene table";
   init_from=NULL;
  };
  ProgVar @[49] {
   name="closest_obj_obj_idx";
   var_type=T_Int;
   int_val=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="index in ObjectsCur table";
   init_from=NULL;
  };
  ProgVar @[50] {
   name="closest_obj_dist";
   var_type=T_Real;
   real_val=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[51] {
   name="closest_obj_nm";
   var_type=T_String;
   string_val="ball";
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[52] {
   name="foveate_thr_dist";
   var_type=T_Real;
   real_val=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="max distance to foveated object";
   init_from=NULL;
  };
  ProgVar @[53] {
   name="foveate_obj_scene_idx";
   var_type=T_Int;
   int_val=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="index in Scene table";
   init_from=NULL;
  };
  ProgVar @[54] {
   name="foveate_obj_obj_idx";
   var_type=T_Int;
   int_val=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc="index in ObjectsCur table";
   init_from=NULL;
  };
  ProgVar @[55] {
   name="foveate_obj_dist";
   var_type=T_Real;
   real_val=0;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[56] {
   name="foveate_obj_nm";
   var_type=T_String;
   string_val="ball";
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[57] {
   name="cur_params";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][6].objs[6]$$<DataTable,CurParams>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[58] {
   name="NamedColors";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][7].objs[3]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[59] {
   name="AuditoryWords";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.projects[0].programs.gp[3][7].objs[1]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[60] {
   name="CurSound";
   var_type=T_Object;
   object_type=taSound;
   object_val=.projects[0].programs.gp[3][7].objs[9]$$;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 functions {
  name="functions";
  el_typ=Function;
  el_def=0;
  Function @[0] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="FindReplColor(String svg_code) returns: String";
   pre_compile_code_string="FindReplColor(String svg_code) returns: String";
   name="FindReplColor";
   return_type=T_String;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="svg_code";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_616";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (2 vars)";
     pre_compile_code_string="LocalVars (2 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="idx";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="colr";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="idx = svg_code->index(\"stop-color:#\", )";
     pre_compile_code_string="idx = svg_code->index(\"stop-color:#\", )";
     result_var=.projects[0].programs.gp[3][7].functions[0].fun_code[0].local_vars[0]$$;
     obj=.projects[0].programs.gp[3][7].functions[0].args[0]$$;
     method=taString::index;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="y";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"stop-color:#\"";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="startpos";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="int index(taString& y, int startpos = 0)";
     meth_desc=" return position of target in string or -1 for failure. startpos = starting position (- = search from end forward)";
    };
    If @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (idx < 0)";
     pre_compile_code_string="if (idx < 0)";
     cond {
      expr="idx < 0";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      ReturnExpr @[0] {
       desc="for now";
       flags=CAN_REVERT_TO_CODE;
       code_string="return \"\"";
       pre_compile_code_string="return \"\"";
       expr {
	expr="\"\"";
       };
      };
     };
    };
    VarIncr @[3] {
     desc="skip to end";
     flags=CAN_REVERT_TO_CODE;
     code_string="idx += 11";
     pre_compile_code_string="idx += 11";
     var=$.projects[0].programs.gp[3][7].functions[0].fun_code[0].local_vars[0]$;
     expr {
      expr="11";
     };
    };
    MethodCall @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="colr = svg_code->at(idx, 7)";
     pre_compile_code_string="colr = svg_code->at(idx, 7)";
     result_var=.projects[0].programs.gp[3][7].functions[0].fun_code[0].local_vars[1]$$;
     obj=$.projects[0].programs.gp[3][7].functions[0].args[0]$;
     method=taString::at;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="pos";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="idx";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="len";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="7";
       };
      };
     };
     meth_sig="taString at(int pos, int len)";
     meth_desc=" get substring at position for length";
    };
    PrintVar @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print  colr";
     pre_compile_code_string="Print  colr";
     message=;
     print_var=$.projects[0].programs.gp[3][7].functions[0].fun_code[0].local_vars[1]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    If @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (colr == \"#ffffff\")";
     pre_compile_code_string="if (colr == \"#ffffff\")";
     cond {
      expr="colr == \"#ffffff\"";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="idx = svg_code->index(\"stop-color:#\", idx)";
       pre_compile_code_string="idx = svg_code->index(\"stop-color:#\", idx)";
       result_var=$.projects[0].programs.gp[3][7].functions[0].fun_code[0].local_vars[0]$;
       obj=$.projects[0].programs.gp[3][7].functions[0].args[0]$;
       method=taString::index;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="y";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"stop-color:#\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="startpos";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="idx";
	 };
	};
       };
       meth_sig="int index(taString& y, int startpos = 0)";
       meth_desc=" return position of target in string or -1 for failure. startpos = starting position (- = search from end forward)";
      };
      If @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (idx < 0)";
       pre_compile_code_string="if (idx < 0)";
       cond {
	expr="idx < 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	ReturnExpr @[0] {
	 desc="for now";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="return colr";
	 pre_compile_code_string="return colr";
	 expr {
	  expr="colr";
	 };
	};
       };
      };
      VarIncr @[2] {
       desc="skip to end";
       flags=CAN_REVERT_TO_CODE;
       code_string="idx += 11";
       pre_compile_code_string="idx += 11";
       var=$.projects[0].programs.gp[3][7].functions[0].fun_code[0].local_vars[0]$;
       expr {
	expr="11";
       };
      };
      MethodCall @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="colr = svg_code->at(idx, 7)";
       pre_compile_code_string="colr = svg_code->at(idx, 7)";
       result_var=$.projects[0].programs.gp[3][7].functions[0].fun_code[0].local_vars[1]$;
       obj=$.projects[0].programs.gp[3][7].functions[0].args[0]$;
       method=taString::at;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="pos";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="idx";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="len";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="7";
	 };
	};
       };
       meth_sig="taString at(int pos, int len)";
       meth_desc=" get substring at position for length";
      };
      ReturnExpr @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="return colr";
       pre_compile_code_string="return colr";
       expr {
	expr="colr";
       };
      };
     };
    };
   };
  };
  Function @[1] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="LoadVisualObjects() returns: int";
   pre_compile_code_string="LoadVisualObjects() returns: int";
   name="LoadVisualObjects";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_483";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (7 vars)";
     pre_compile_code_string="LocalVars (7 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="fnm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="fpth";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="obj_row";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="obj_nm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="svg_code";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[6] {
       name="repl_colr";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    DataGenCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataGen::GetDirFiles(Files, vis_obj_dir, \".svg\", false, , , )";
     pre_compile_code_string="taDataGen::GetDirFiles(Files, vis_obj_dir, \".svg\", false, , , )";
     result_var=NULL;
     object_type=taDataGen;
     method=taDataGen::GetDirFiles;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="Files";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="dir_path";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="vis_obj_dir";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="filter";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\".svg\"";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="recursive";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
      ProgArg @[4] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname_col_nm";
       required=0;
       def_val="FileName";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[5] {
       arg_type=const_taString_ref;
       type="taString&";
       name="path_col_nm";
       required=0;
       def_val="FilePath";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[6] {
       arg_type=bool;
       type="bool";
       name="reset_first";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
    };
    ForLoop @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<Files.rows; i++)";
     pre_compile_code_string="for (i=0; i<Files.rows; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="fnm = Files[\"FileName\"][i]";
       pre_compile_code_string="fnm = Files[\"FileName\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[1].fun_code[0].local_vars[1]$$;
       expr {
	expr="Files[\"FileName\"][i]";
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="fpth = Files[\"FilePath\"][i]";
       pre_compile_code_string="fpth = Files[\"FilePath\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[1].fun_code[0].local_vars[2]$$;
       expr {
	expr="Files[\"FilePath\"][i]";
       };
      };
      MethodCall @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="obj_nm = fnm->before(\".svg\", )";
       pre_compile_code_string="obj_nm = fnm->before(\".svg\", )";
       result_var=.projects[0].programs.gp[3][7].functions[1].fun_code[0].local_vars[4]$$;
       obj=$.projects[0].programs.gp[3][7].functions[1].fun_code[0].local_vars[1]$;
       method=taString::before;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="x";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\".svg\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="startpos";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="taString before(taString& x, int startpos = 0)";
       meth_desc=" get substring before (not including) target string. startpos = starting position (- = search from end forward)";
      };
      MethodCall @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="obj_row = VisualObjects->FindVal(obj_nm, \"name\", 0, false)";
       pre_compile_code_string="obj_row = VisualObjects->FindVal(obj_nm, \"name\", 0, false)";
       result_var=.projects[0].programs.gp[3][7].functions[1].fun_code[0].local_vars[3]$$;
       obj=.projects[0].programs.gp[3][7].vars[30]$$;
       method=DataTable::FindVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="obj_nm";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"name\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="not_found_err";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
       meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
      };
      If @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (obj_row < 0)";
       pre_compile_code_string="if (obj_row < 0)";
       cond {
	expr="obj_row < 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="VisualObjects->AddBlankRow()";
	 pre_compile_code_string="VisualObjects->AddBlankRow()";
	 result_var=NULL;
	 obj=$.projects[0].programs.gp[3][7].vars[30]$;
	 method=DataTable::AddBlankRow;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	 };
	 meth_sig="int AddBlankRow()";
	 meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
	};
	AssignExpr @[1] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="obj_row = VisualObjects.rows-1";
	 pre_compile_code_string="obj_row = VisualObjects.rows-1";
	 result_var=$.projects[0].programs.gp[3][7].functions[1].fun_code[0].local_vars[3]$;
	 expr {
	  expr="VisualObjects.rows-1";
	 };
	};
	CssExpr @[2] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="VisualObjects[\"name\"][obj_row] = obj_nm;";
	 pre_compile_code_string="VisualObjects[\"name\"][obj_row] = obj_nm;";
	 expr {
	  expr="VisualObjects[\"name\"][obj_row] = obj_nm;";
	 };
	};
       };
      };
      MatrixAssign @[5] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="VisualObjects[\"file_path\"][obj_row] = fpth";
       pre_compile_code_string="VisualObjects[\"file_path\"][obj_row] = fpth";
       variable=$.projects[0].programs.gp[3][7].vars[30]$;
       data_table=1;
       col {
	expr="\"file_path\"";
       };
       dim0 {
	expr="obj_row";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="fpth";
       };
      };
      MethodCall @[6] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="svg_code->LoadFromFile(fpth)";
       pre_compile_code_string="svg_code->LoadFromFile(fpth)";
       result_var=NULL;
       obj=.projects[0].programs.gp[3][7].functions[1].fun_code[0].local_vars[5]$$;
       method=taString::LoadFromFile;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="fpth";
	 };
	};
       };
       meth_sig="bool LoadFromFile(taString& fname)";
       meth_desc=" load contents of given file into string";
      };
      FunctionCall @[7] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="repl_colr = FindReplColor(svg_code)";
       pre_compile_code_string="repl_colr = FindReplColor(svg_code)";
       result_var=.projects[0].programs.gp[3][7].functions[1].fun_code[0].local_vars[6]$$;
       fun=.projects[0].programs.gp[3][7].functions[0]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taString;
	 type="String";
	 name="svg_code";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="svg_code";
	 };
	};
       };
      };
      MatrixAssign @[8] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="VisualObjects[\"svg_code\"][obj_row] = svg_code";
       pre_compile_code_string="VisualObjects[\"svg_code\"][obj_row] = svg_code";
       variable=$.projects[0].programs.gp[3][7].vars[30]$;
       data_table=1;
       col {
	expr="\"svg_code\"";
       };
       dim0 {
	expr="obj_row";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="svg_code";
       };
      };
      MatrixAssign @[9] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="VisualObjects[\"color_repl_str\"][obj_row] = repl_colr";
       pre_compile_code_string="VisualObjects[\"color_repl_str\"][obj_row] = repl_colr";
       variable=$.projects[0].programs.gp[3][7].vars[30]$;
       data_table=1;
       col {
	expr="\"color_repl_str\"";
       };
       dim0 {
	expr="obj_row";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="repl_colr";
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<Files.rows";
     };
     iter {
      expr="i++";
     };
    };
   };
  };
  Function @[2] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="LoadAuditoryWords() returns: int";
   pre_compile_code_string="LoadAuditoryWords() returns: int";
   name="LoadAuditoryWords";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (8 vars)";
     pre_compile_code_string="LocalVars (8 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="fnm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="fpth";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="obj_row";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="obj_nm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="spkr";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[6] {
       name="len_samp";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[7] {
       name="len_msec";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    DataGenCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataGen::GetDirFiles(Files, aud_word_dir, \".wav\", false, , , )";
     pre_compile_code_string="taDataGen::GetDirFiles(Files, aud_word_dir, \".wav\", false, , , )";
     result_var=NULL;
     object_type=taDataGen;
     method=taDataGen::GetDirFiles;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dest";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="Files";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="dir_path";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="aud_word_dir";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="filter";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\".wav\"";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="recursive";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
      ProgArg @[4] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname_col_nm";
       required=0;
       def_val="FileName";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[5] {
       arg_type=const_taString_ref;
       type="taString&";
       name="path_col_nm";
       required=0;
       def_val="FilePath";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[6] {
       arg_type=bool;
       type="bool";
       name="reset_first";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
    };
    ForLoop @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<Files.rows; i++)";
     pre_compile_code_string="for (i=0; i<Files.rows; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="fnm = Files[\"FileName\"][i]";
       pre_compile_code_string="fnm = Files[\"FileName\"][i]";
       result_var=$.projects[0].programs.gp[3][7].functions[1].fun_code[0].local_vars[1]$;
       expr {
	expr="Files[\"FileName\"][i]";
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="fpth = Files[\"FilePath\"][i]";
       pre_compile_code_string="fpth = Files[\"FilePath\"][i]";
       result_var=$.projects[0].programs.gp[3][7].functions[1].fun_code[0].local_vars[2]$;
       expr {
	expr="Files[\"FilePath\"][i]";
       };
      };
      MethodCall @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="obj_nm = fnm->before(\".wav\", )";
       pre_compile_code_string="obj_nm = fnm->before(\".wav\", )";
       result_var=.projects[0].programs.gp[3][7].functions[2].fun_code[0].local_vars[4]$$;
       obj=.projects[0].programs.gp[3][7].functions[2].fun_code[0].local_vars[1]$$;
       method=taString::before;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="x";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\".wav\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="startpos";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="taString before(taString& x, int startpos = 0)";
       meth_desc=" get substring before (not including) target string. startpos = starting position (- = search from end forward)";
      };
      AssignExpr @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="spkr = \"\"";
       pre_compile_code_string="spkr = \"\"";
       result_var=.projects[0].programs.gp[3][7].functions[2].fun_code[0].local_vars[5]$$;
       expr {
	expr="\"\"";
       };
      };
      If @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (obj_nm.contains(\"_\"))";
       pre_compile_code_string="if (obj_nm.contains(\"_\"))";
       cond {
	expr="obj_nm.contains(\"_\")";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="spkr = obj_nm->after(\"_\", )";
	 pre_compile_code_string="spkr = obj_nm->after(\"_\", )";
	 result_var=$.projects[0].programs.gp[3][7].functions[2].fun_code[0].local_vars[5]$;
	 obj=$.projects[0].programs.gp[3][7].functions[2].fun_code[0].local_vars[4]$;
	 method=taString::after;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="x";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="\"_\"";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=int;
	   type="int";
	   name="startpos";
	   required=0;
	   def_val="0";
	   prev_expr=;
	   expr {
	    expr=;
	   };
	  };
	 };
	 meth_sig="taString after(taString& x, int startpos = 0)";
	 meth_desc=" get substring after (not including) target string. startpos = starting position (- = search from end forward)";
	};
	MethodCall @[1] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="obj_nm = obj_nm->before(\"_\", )";
	 pre_compile_code_string="obj_nm = obj_nm->before(\"_\", )";
	 result_var=$.projects[0].programs.gp[3][7].functions[2].fun_code[0].local_vars[4]$;
	 obj=$.projects[0].programs.gp[3][7].functions[2].fun_code[0].local_vars[4]$;
	 method=taString::before;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="x";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="\"_\"";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=int;
	   type="int";
	   name="startpos";
	   required=0;
	   def_val="0";
	   prev_expr=;
	   expr {
	    expr=;
	   };
	  };
	 };
	 meth_sig="taString before(taString& x, int startpos = 0)";
	 meth_desc=" get substring before (not including) target string. startpos = starting position (- = search from end forward)";
	};
       };
      };
      MethodCall @[5] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="obj_row = AuditoryWords->FindMultiVal(0, obj_nm, \"name\", spkr, \"speaker\", , , , , , , , )";
       pre_compile_code_string="obj_row = AuditoryWords->FindMultiVal(0, obj_nm, \"name\", spkr, \"speaker\", , , , , , , , )";
       result_var=.projects[0].programs.gp[3][7].functions[2].fun_code[0].local_vars[3]$$;
       obj=.projects[0].programs.gp[3][7].vars[59]$$;
       method=DataTable::FindMultiVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=1;
	 def_val="0";
	 prev_expr="obj_nm";
	 expr {
	  expr="0";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val1";
	 required=1;
	 def_val=;
	 prev_expr="\"name\"";
	 expr {
	  expr="obj_nm";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col1";
	 required=1;
	 def_val=;
	 prev_expr="0";
	 expr {
	  expr="\"name\"";
	 };
	};
	ProgArg @[3] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val2";
	 required=0;
	 def_val="0";
	 prev_expr="false";
	 expr {
	  expr="spkr";
	 };
	};
	ProgArg @[4] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col2";
	 required=0;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"speaker\"";
	 };
	};
	ProgArg @[5] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val3";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[6] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col3";
	 required=0;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[7] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val4";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[8] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col4";
	 required=0;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[9] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="vall5";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[10] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col5";
	 required=0;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[11] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val6";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[12] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col6";
	 required=0;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="int FindMultiVal(int st_row, Variant& val1, Variant& col1, Variant& val2 = 0, Variant& col2, Variant& val3 = 0, Variant& col3, Variant& val4 = 0, Variant& col4, Variant& vall5 = 0, Variant& col5, Variant& val6 = 0, Variant& col6)";
       meth_desc=" find row number for multiple values across different columns of scalar type, starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- columns can be specified as either integer index or a string that is then used to find the given column name";
      };
      If @[6] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (obj_row < 0)";
       pre_compile_code_string="if (obj_row < 0)";
       cond {
	expr="obj_row < 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="AuditoryWords->AddBlankRow()";
	 pre_compile_code_string="AuditoryWords->AddBlankRow()";
	 result_var=NULL;
	 obj=$.projects[0].programs.gp[3][7].vars[59]$;
	 method=DataTable::AddBlankRow;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	 };
	 meth_sig="int AddBlankRow()";
	 meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
	};
	AssignExpr @[1] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="obj_row = AuditoryWords.rows-1";
	 pre_compile_code_string="obj_row = AuditoryWords.rows-1";
	 result_var=$.projects[0].programs.gp[3][7].functions[2].fun_code[0].local_vars[3]$;
	 expr {
	  expr="AuditoryWords.rows-1";
	 };
	};
	MatrixAssign @[2] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="AuditoryWords[\"name\"][obj_row] = obj_nm";
	 pre_compile_code_string="AuditoryWords[\"name\"][obj_row] = obj_nm";
	 variable=$.projects[0].programs.gp[3][7].vars[59]$;
	 data_table=1;
	 col {
	  expr="\"name\"";
	 };
	 dim0 {
	  expr="obj_row";
	 };
	 dim1 {
	  expr=;
	 };
	 dim2 {
	  expr=;
	 };
	 dim3 {
	  expr=;
	 };
	 dim4 {
	  expr=;
	 };
	 dim5 {
	  expr=;
	 };
	 expr {
	  expr="obj_nm";
	 };
	};
	MatrixAssign @[3] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="AuditoryWords[\"speaker\"][obj_row] = spkr";
	 pre_compile_code_string="AuditoryWords[\"speaker\"][obj_row] = spkr";
	 variable=$.projects[0].programs.gp[3][7].vars[59]$;
	 data_table=1;
	 col {
	  expr="\"speaker\"";
	 };
	 dim0 {
	  expr="obj_row";
	 };
	 dim1 {
	  expr=;
	 };
	 dim2 {
	  expr=;
	 };
	 dim3 {
	  expr=;
	 };
	 dim4 {
	  expr=;
	 };
	 dim5 {
	  expr=;
	 };
	 expr {
	  expr="spkr";
	 };
	};
       };
      };
      MatrixAssign @[7] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="AuditoryWords[\"file_path\"][obj_row] = fpth";
       pre_compile_code_string="AuditoryWords[\"file_path\"][obj_row] = fpth";
       variable=$.projects[0].programs.gp[3][7].vars[59]$;
       data_table=1;
       col {
	expr="\"file_path\"";
       };
       dim0 {
	expr="obj_row";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="fpth";
       };
      };
      MethodCall @[8] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="CurSound->LoadSound(fpth)";
       pre_compile_code_string="CurSound->LoadSound(fpth)";
       result_var=NULL;
       obj=.projects[0].programs.gp[3][7].vars[60]$$;
       method=taSound::LoadSound;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="fpth";
	 };
	};
       };
       meth_sig="bool LoadSound(taString& fname)";
       meth_desc=" load a sound from given file name (leave file name blank to get a chooser)";
      };
      MethodCall @[9] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="len_samp = CurSound->FrameCount()";
       pre_compile_code_string="len_samp = CurSound->FrameCount()";
       result_var=.projects[0].programs.gp[3][7].functions[2].fun_code[0].local_vars[6]$$;
       obj=$.projects[0].programs.gp[3][7].vars[60]$;
       method=taSound::FrameCount;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="int FrameCount()";
       meth_desc=" number of frames (samples in each channel) in this sound's buffer's data";
      };
      MethodCall @[10] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="len_msec = CurSound->Duration()";
       pre_compile_code_string="len_msec = CurSound->Duration()";
       result_var=.projects[0].programs.gp[3][7].functions[2].fun_code[0].local_vars[7]$$;
       obj=$.projects[0].programs.gp[3][7].vars[60]$;
       method=taSound::Duration;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="int64_t Duration()";
       meth_desc=" total duration of sound in microseconds (depends on sample rate and size)";
      };
      MatrixAssign @[11] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="AuditoryWords[\"len_samples\"][obj_row] = len_samp";
       pre_compile_code_string="AuditoryWords[\"len_samples\"][obj_row] = len_samp";
       variable=$.projects[0].programs.gp[3][7].vars[59]$;
       data_table=1;
       col {
	expr="\"len_samples\"";
       };
       dim0 {
	expr="obj_row";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="len_samp";
       };
      };
      MatrixAssign @[12] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="AuditoryWords[\"len_msec\"][obj_row] = len_msec / 1000.0";
       pre_compile_code_string="AuditoryWords[\"len_msec\"][obj_row] = len_msec / 1000.0";
       variable=$.projects[0].programs.gp[3][7].vars[59]$;
       data_table=1;
       col {
	expr="\"len_msec\"";
       };
       dim0 {
	expr="obj_row";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="len_msec / 1000.0";
       };
      };
      MatrixAssign @[13] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="AuditoryWords[\"len_atrials\"][obj_row] = len_msec / 100000.0";
       pre_compile_code_string="AuditoryWords[\"len_atrials\"][obj_row] = len_msec / 100000.0";
       variable=$.projects[0].programs.gp[3][7].vars[59]$;
       data_table=1;
       col {
	expr="\"len_atrials\"";
       };
       dim0 {
	expr="obj_row";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="len_msec / 100000.0";
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<Files.rows";
     };
     iter {
      expr="i++";
     };
    };
   };
  };
  Function @[3] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="InitCanvas(taCanvas*& canv) returns: int";
   pre_compile_code_string="InitCanvas(taCanvas*& canv) returns: int";
   name="InitCanvas";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="canv";
     var_type=T_Object;
     object_type=taCanvas;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=1;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_541";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canv->InitCanvas()";
     pre_compile_code_string="canv->InitCanvas()";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][7].functions[3].args[0]$$;
     method=taCanvas::InitCanvas;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void InitCanvas()";
     meth_desc=" initialize the canvas -- MUST be called prior to drawing!";
    };
    MethodCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canv->EraseName(bg_color)";
     pre_compile_code_string="canv->EraseName(bg_color)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][7].functions[3].args[0]$;
     method=taCanvas::EraseName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="bg_color";
       };
      };
     };
     meth_sig="void EraseName(taString& name)";
     meth_desc=" erase image to given color name";
    };
    MethodCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canv->PenWidth(line_width)";
     pre_compile_code_string="canv->PenWidth(line_width)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][7].functions[3].args[0]$;
     method=taCanvas::PenWidth;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=float;
       type="float";
       name="width";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="line_width";
       };
      };
     };
     meth_sig="void PenWidth(float width)";
     meth_desc=" ";
    };
    MethodCall @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canv->PenColorName(line_color)";
     pre_compile_code_string="canv->PenColorName(line_color)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][7].functions[3].args[0]$;
     method=taCanvas::PenColorName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="line_color";
       };
      };
     };
     meth_sig="void PenColorName(taString& name)";
     meth_desc=" ";
    };
   };
  };
  Function @[4] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="ViewCanvas(taCanvas*& canv, String col_nm) returns: int";
   pre_compile_code_string="ViewCanvas(taCanvas*& canv, String col_nm) returns: int";
   name="ViewCanvas";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="canv";
     var_type=T_Object;
     object_type=taCanvas;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=1;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="col_nm";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_543";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canv->ConfigDataColName(CanvasViews, col_nm, taBase::VT_FLOAT, true)";
     pre_compile_code_string="canv->ConfigDataColName(CanvasViews, col_nm, taBase::VT_FLOAT, true)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][7].functions[4].args[0]$$;
     method=taImage::ConfigDataColName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dt";
       required=1;
       def_val=;
       prev_expr="CanvasViews";
       expr {
	expr="CanvasViews";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr="\"Scene\"";
       expr {
	expr="col_nm";
       };
      };
      ProgArg @[2] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="val_type";
       required=1;
       def_val=;
       prev_expr="0";
       expr {
	expr="taBase::VT_FLOAT";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="rgb";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="bool ConfigDataColName(DataTable* dt, taString& col_nm, taBase::ValType val_type, bool rgb = true)";
     meth_desc=" configure data column with given name (if it doesn't exist, it is created) to represent current image -- if rgb is false, then a greyscale image is configured (2d)";
    };
    MethodCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CanvasViews->EnforceRows(1)";
     pre_compile_code_string="CanvasViews->EnforceRows(1)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][7].vars[46]$$;
     method=DataTable::EnforceRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="1";
       };
      };
     };
     meth_sig="void EnforceRows(int n_rows)";
     meth_desc=" ensure that there are exactly n_rows in the table, removing or adding as needed";
    };
    MethodCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canv->ImageToDataCellName(CanvasViews, col_nm, 0)";
     pre_compile_code_string="canv->ImageToDataCellName(CanvasViews, col_nm, 0)";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][7].functions[4].args[0]$;
     method=taImage::ImageToDataCellName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dt";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="CanvasViews";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="col_nm";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="0";
       };
      };
     };
     meth_sig="bool ImageToDataCellName(DataTable* dt, taString& col_nm, int row)";
     meth_desc=" set image to datatable cell indexed by col name and row number -- uses cell dimensionality and type -- only amount that fits in cell is copied. row = -1 = last row";
    };
    MethodCall @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="CanvasViews->UpdateAllViews()";
     pre_compile_code_string="CanvasViews->UpdateAllViews()";
     result_var=NULL;
     obj=$.projects[0].programs.gp[3][7].vars[46]$;
     method=taBase::UpdateAllViews;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void UpdateAllViews()";
     meth_desc=" called after data changes, to update views";
    };
   };
  };
  Function @[5] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="GetColorFromName(String color) returns: String";
   pre_compile_code_string="GetColorFromName(String color) returns: String";
   name="GetColorFromName";
   return_type=T_String;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="color";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_625";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (1 vars)";
     pre_compile_code_string="LocalVars (1 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="cidx";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="cidx = NamedColors->FindVal(color, \"name\", 0, false)";
     pre_compile_code_string="cidx = NamedColors->FindVal(color, \"name\", 0, false)";
     result_var=.projects[0].programs.gp[3][7].functions[5].fun_code[0].local_vars[0]$$;
     obj=.projects[0].programs.gp[3][7].vars[58]$$;
     method=DataTable::FindVal;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="val";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="color";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"name\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="st_row";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr="0";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="not_found_err";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
     meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
    };
    If @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (cidx < 0)";
     pre_compile_code_string="if (cidx < 0)";
     cond {
      expr="cidx < 0";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      ReturnExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="return \"\"";
       pre_compile_code_string="return \"\"";
       expr {
	expr="\"\"";
       };
      };
     };
    };
    ReturnExpr @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="return NamedColors[\"hexcolor\"][cidx]";
     pre_compile_code_string="return NamedColors[\"hexcolor\"][cidx]";
     expr {
      expr="NamedColors[\"hexcolor\"][cidx]";
     };
    };
   };
  };
  Function @[6] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="FixNamedColors() returns: int";
   pre_compile_code_string="FixNamedColors() returns: int";
   name="FixNamedColors";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_630";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (5 vars)";
     pre_compile_code_string="LocalVars (5 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="red";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="green";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="blue";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="rgb";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="hexcolor";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    ForLoop @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<NamedColors.rows; i++)";
     pre_compile_code_string="for (i=0; i<NamedColors.rows; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="red = NamedColors[\"red\"][i]";
       pre_compile_code_string="red = NamedColors[\"red\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[6].fun_code[0].local_vars[1]$$;
       expr {
	expr="NamedColors[\"red\"][i]";
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="green = NamedColors[\"green\"][i]";
       pre_compile_code_string="green = NamedColors[\"green\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[6].fun_code[0].local_vars[2]$$;
       expr {
	expr="NamedColors[\"green\"][i]";
       };
      };
      AssignExpr @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="blue = NamedColors[\"blue\"][i]";
       pre_compile_code_string="blue = NamedColors[\"blue\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[6].fun_code[0].local_vars[3]$$;
       expr {
	expr="NamedColors[\"blue\"][i]";
       };
      };
      MethodCall @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="rgb->convertInt()";
       pre_compile_code_string="rgb->convertInt(red, \"%02x\")";
       result_var=NULL;
       obj=.projects[0].programs.gp[3][7].functions[6].fun_code[0].local_vars[4]$$;
       method=taString::convertInt;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="i";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="red";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_char_ptr;
	 type="char*";
	 name="format";
	 required=0;
	 def_val="%d";
	 prev_expr=;
	 expr {
	  expr="\"%02x\"";
	 };
	};
       };
       meth_sig="taString_ref convertInt(int i, char* format = %d)";
       meth_desc=" convert int value into string using given format (standard printf formatting)";
      };
      AssignExpr @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="hexcolor = \"#\" + rgb";
       pre_compile_code_string="hexcolor = \"#\" + rgb";
       result_var=.projects[0].programs.gp[3][7].functions[6].fun_code[0].local_vars[5]$$;
       expr {
	expr="\"#\" + rgb";
       };
      };
      MethodCall @[5] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="rgb->convertInt(red, \"%02x\")";
       pre_compile_code_string="rgb->convertInt(green, \"%02x\")";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][7].functions[6].fun_code[0].local_vars[4]$;
       method=taString::convertInt;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="i";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="green";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_char_ptr;
	 type="char*";
	 name="format";
	 required=0;
	 def_val="%d";
	 prev_expr=;
	 expr {
	  expr="\"%02x\"";
	 };
	};
       };
       meth_sig="taString_ref convertInt(int i, char* format = %d)";
       meth_desc=" convert int value into string using given format (standard printf formatting)";
      };
      VarIncr @[6] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="hexcolor += rgb";
       pre_compile_code_string="hexcolor += rgb";
       var=$.projects[0].programs.gp[3][7].functions[6].fun_code[0].local_vars[5]$;
       expr {
	expr="rgb";
       };
      };
      MethodCall @[7] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="rgb->convertInt(green, \"%02x\")";
       pre_compile_code_string="rgb->convertInt(blue, \"%02x\")";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][7].functions[6].fun_code[0].local_vars[4]$;
       method=taString::convertInt;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="i";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="blue";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_char_ptr;
	 type="char*";
	 name="format";
	 required=0;
	 def_val="%d";
	 prev_expr=;
	 expr {
	  expr="\"%02x\"";
	 };
	};
       };
       meth_sig="taString_ref convertInt(int i, char* format = %d)";
       meth_desc=" convert int value into string using given format (standard printf formatting)";
      };
      VarIncr @[8] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="hexcolor += rgb";
       pre_compile_code_string="hexcolor += rgb";
       var=$.projects[0].programs.gp[3][7].functions[6].fun_code[0].local_vars[5]$;
       expr {
	expr="rgb";
       };
      };
      MatrixAssign @[9] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="NamedColors[\"hexcolor\"][i] = hexcolor";
       pre_compile_code_string="NamedColors[\"hexcolor\"][i] = hexcolor";
       variable=$.projects[0].programs.gp[3][7].vars[58]$;
       data_table=1;
       col {
	expr="\"hexcolor\"";
       };
       dim0 {
	expr="i";
       };
       dim1 {
	expr=;
       };
       dim2 {
	expr=;
       };
       dim3 {
	expr=;
       };
       dim4 {
	expr=;
       };
       dim5 {
	expr=;
       };
       expr {
	expr="hexcolor";
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<NamedColors.rows";
     };
     iter {
      expr="i++";
     };
    };
   };
  };
  Function @[7] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="DrawObj(taCanvas*& canv, String objnm, double ctr_x, double ctr_y, double size, String color) returns: int";
   pre_compile_code_string="DrawObj(taCanvas*& canv, String objnm, double ctr_x, double ctr_y, double size, String color) returns: int";
   name="DrawObj";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="canv";
     var_type=T_Object;
     object_type=taCanvas;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=1;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="objnm";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="ctr_x";
     var_type=T_Real;
     real_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="ctr_y";
     var_type=T_Real;
     real_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="size";
     var_type=T_Real;
     real_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="color";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_542";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (4 vars)";
     pre_compile_code_string="LocalVars (4 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="objid";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="svg_code";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="repl_color";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="color_val";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="objid = VisualObjects->FindVal(objnm, \"name\", 0, true)";
     pre_compile_code_string="objid = VisualObjects->FindVal(objnm, \"name\", 0, true)";
     result_var=.projects[0].programs.gp[3][7].functions[7].fun_code[0].local_vars[0]$$;
     obj=$.projects[0].programs.gp[3][7].vars[30]$;
     method=DataTable::FindVal;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="val";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="objnm";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"name\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="st_row";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr="0";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="not_found_err";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
     meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
    };
    AssignExpr @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="svg_code = VisualObjects[\"svg_code\"][objid]";
     pre_compile_code_string="svg_code = VisualObjects[\"svg_code\"][objid]";
     result_var=.projects[0].programs.gp[3][7].functions[7].fun_code[0].local_vars[1]$$;
     expr {
      expr="VisualObjects[\"svg_code\"][objid]";
     };
    };
    AssignExpr @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="repl_color = VisualObjects[\"color_repl_str\"][objid]";
     pre_compile_code_string="repl_color = VisualObjects[\"color_repl_str\"][objid]";
     result_var=.projects[0].programs.gp[3][7].functions[7].fun_code[0].local_vars[2]$$;
     expr {
      expr="VisualObjects[\"color_repl_str\"][objid]";
     };
    };
    If @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (repl_color.nonempty())";
     pre_compile_code_string="if (repl_color.nonempty())";
     cond {
      expr="repl_color.nonempty()";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="color_val = GetColorFromName(color)";
       pre_compile_code_string="color_val = GetColorFromName(color)";
       result_var=.projects[0].programs.gp[3][7].functions[7].fun_code[0].local_vars[3]$$;
       fun=.projects[0].programs.gp[3][7].functions[5]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taString;
	 type="String";
	 name="color";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="color";
	 };
	};
       };
      };
      If @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (color_val.nonempty())";
       pre_compile_code_string="if (color_val.nonempty())";
       cond {
	expr="color_val.nonempty()";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="svg_code->gsub(repl_color, color_val)";
	 pre_compile_code_string="svg_code->gsub(repl_color, color_val)";
	 result_var=NULL;
	 obj=$.projects[0].programs.gp[3][7].functions[7].fun_code[0].local_vars[1]$;
	 method=taString::gsub;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="pat";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="repl_color";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="repl";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="color_val";
	   };
	  };
	 };
	 meth_sig="int gsub(taString& pat, taString& repl)";
	 meth_desc=" global substitution: substitute all occurrences of pat with repl";
	};
       };
      };
     };
    };
    MethodCall @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canv->DrawSvgString(svg_code, ctr_x - .5 * size, ctr_y - .5 * size, size, size, true, 0)";
     pre_compile_code_string="canv->DrawSvgString(svg_code, ctr_x - .5 * size, ctr_y - .5 * size, size, size, true, 0)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][7].functions[7].args[0]$$;
     method=taCanvas::DrawSvgString;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="svg_code";
       required=1;
       def_val=;
       prev_expr="svg_code";
       expr {
	expr="svg_code";
       };
      };
      ProgArg @[1] {
       arg_type=float;
       type="float";
       name="l";
       required=0;
       def_val="0";
       prev_expr="ctr_x - .5 * size";
       expr {
	expr="ctr_x - .5 * size";
       };
      };
      ProgArg @[2] {
       arg_type=float;
       type="float";
       name="b";
       required=0;
       def_val="0";
       prev_expr="ctr_y - .5 * size";
       expr {
	expr="ctr_y - .5 * size";
       };
      };
      ProgArg @[3] {
       arg_type=float;
       type="float";
       name="wd";
       required=0;
       def_val="-1";
       prev_expr="size";
       expr {
	expr="size";
       };
      };
      ProgArg @[4] {
       arg_type=float;
       type="float";
       name="ht";
       required=0;
       def_val="-1";
       prev_expr="size";
       expr {
	expr="size";
       };
      };
      ProgArg @[5] {
       arg_type=bool;
       type="bool";
       name="auto_invert";
       required=0;
       def_val="true";
       prev_expr="true";
       expr {
	expr="true";
       };
      };
      ProgArg @[6] {
       arg_type=float;
       type="float";
       name="rotate";
       required=0;
       def_val="0";
       prev_expr="0";
       expr {
	expr="0";
       };
      };
     };
     meth_sig="bool DrawSvgString(taString& svg_code, float l = 0, float b = 0, float wd = -1, float ht = -1, bool auto_invert = true, float rotate = 0)";
     meth_desc=" draw SVG (scalable vector graphics) code onto the canvas -- in specified rectangle -- -1 = use full size -- returns false if not parsable -- auto_invert = add svg code to flip the image into our rendering convention where the bottom-left is 0,0 coordinate, instead of 0,0 being upper-left, rotate = optional global rotation transform, in degrees -- only works if doing auto_invert too";
    };
   };
  };
  Function @[8] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="RenderScene() returns: int";
   pre_compile_code_string="RenderScene() returns: int";
   name="RenderScene";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_506";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (5 vars)";
     pre_compile_code_string="LocalVars (5 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="nm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="ctr_x";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="ctr_y";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="size";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="color";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    FunctionCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="InitCanvas(SceneCanvas)";
     pre_compile_code_string="InitCanvas(SceneCanvas)";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][7].functions[3]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taCanvas;
       type="taCanvas*";
       name="canv";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="SceneCanvas";
       };
      };
     };
    };
    ForLoop @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<Scene.rows; i++)";
     pre_compile_code_string="for (i=0; i<Scene.rows; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="nm = Scene[\"name\"][i]";
       pre_compile_code_string="nm = Scene[\"name\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[8].fun_code[0].local_vars[1]$$;
       expr {
	expr="Scene[\"name\"][i]";
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ctr_x = Scene[\"ctr_x\"][i]";
       pre_compile_code_string="ctr_x = Scene[\"ctr_x\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[8].fun_code[0].local_vars[2]$$;
       expr {
	expr="Scene[\"ctr_x\"][i]";
       };
      };
      AssignExpr @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ctr_y = Scene[\"ctr_y\"][i]";
       pre_compile_code_string="ctr_y = Scene[\"ctr_y\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[8].fun_code[0].local_vars[3]$$;
       expr {
	expr="Scene[\"ctr_y\"][i]";
       };
      };
      AssignExpr @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="size = Scene[\"size\"][i]";
       pre_compile_code_string="size = Scene[\"size\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[8].fun_code[0].local_vars[4]$$;
       expr {
	expr="Scene[\"size\"][i]";
       };
      };
      AssignExpr @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="color = Scene[\"color\"][i]";
       pre_compile_code_string="color = Scene[\"color\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[8].fun_code[0].local_vars[5]$$;
       expr {
	expr="Scene[\"color\"][i]";
       };
      };
      FunctionCall @[5] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="DrawObj(SceneCanvas, nm, ctr_x, ctr_y, size, )";
       pre_compile_code_string="DrawObj(SceneCanvas, nm, ctr_x, ctr_y, size, )";
       result_var=NULL;
       fun=.projects[0].programs.gp[3][7].functions[7]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taCanvas;
	 type="taCanvas*";
	 name="canv";
	 required=1;
	 def_val=;
	 prev_expr="SceneCanvas";
	 expr {
	  expr="SceneCanvas";
	 };
	};
	ProgArg @[1] {
	 arg_type=taString;
	 type="String";
	 name="objnm";
	 required=1;
	 def_val=;
	 prev_expr="nm";
	 expr {
	  expr="nm";
	 };
	};
	ProgArg @[2] {
	 arg_type=double;
	 type="double";
	 name="ctr_x";
	 required=1;
	 def_val=;
	 prev_expr="ctr_x";
	 expr {
	  expr="ctr_x";
	 };
	};
	ProgArg @[3] {
	 arg_type=double;
	 type="double";
	 name="ctr_y";
	 required=1;
	 def_val=;
	 prev_expr="ctr_y";
	 expr {
	  expr="ctr_y";
	 };
	};
	ProgArg @[4] {
	 arg_type=double;
	 type="double";
	 name="size";
	 required=1;
	 def_val=;
	 prev_expr="size";
	 expr {
	  expr="size";
	 };
	};
	ProgArg @[5] {
	 arg_type=taString;
	 type="String";
	 name="color";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="color";
	 };
	};
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<Scene.rows";
     };
     iter {
      expr="i++";
     };
    };
    FunctionCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ViewCanvas(SceneCanvas, \"Scene\")";
     pre_compile_code_string="ViewCanvas(SceneCanvas, \"Scene\")";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][7].functions[4]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taCanvas;
       type="taCanvas*";
       name="canv";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="SceneCanvas";
       };
      };
      ProgArg @[1] {
       arg_type=taString;
       type="String";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"Scene\"";
       };
      };
     };
    };
   };
  };
  Function @[9] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="RenderFullView() returns: int";
   pre_compile_code_string="RenderFullView() returns: int";
   name="RenderFullView";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (5 vars)";
     pre_compile_code_string="LocalVars (5 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="nm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="ctr_x";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="ctr_y";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="size";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="color";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    FunctionCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="InitCanvas(FullViewCanvas)";
     pre_compile_code_string="InitCanvas(FullViewCanvas)";
     result_var=NULL;
     fun=$.projects[0].programs.gp[3][7].functions[3]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taCanvas;
       type="taCanvas*";
       name="canv";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="FullViewCanvas";
       };
      };
     };
    };
    ForLoop @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<Scene.rows; i++)";
     pre_compile_code_string="for (i=0; i<Scene.rows; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="nm = Scene[\"name\"][i]";
       pre_compile_code_string="nm = Scene[\"name\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[9].fun_code[0].local_vars[1]$$;
       expr {
	expr="Scene[\"name\"][i]";
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ctr_x = Scene[\"ctr_x\"][i]";
       pre_compile_code_string="ctr_x = Scene[\"ctr_x\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[9].fun_code[0].local_vars[2]$$;
       expr {
	expr="Scene[\"ctr_x\"][i]";
       };
      };
      AssignExpr @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ctr_y = Scene[\"ctr_y\"][i]";
       pre_compile_code_string="ctr_y = Scene[\"ctr_y\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[9].fun_code[0].local_vars[3]$$;
       expr {
	expr="Scene[\"ctr_y\"][i]";
       };
      };
      AssignExpr @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="size = Scene[\"size\"][i]";
       pre_compile_code_string="size = Scene[\"size\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[9].fun_code[0].local_vars[4]$$;
       expr {
	expr="Scene[\"size\"][i]";
       };
      };
      AssignExpr @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="color = Scene[\"color\"][i]";
       pre_compile_code_string="color = Scene[\"color\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[9].fun_code[0].local_vars[5]$$;
       expr {
	expr="Scene[\"color\"][i]";
       };
      };
      AssignExpr @[5] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ctr_x = (ctr_x - fix_x) + 0.5";
       pre_compile_code_string="ctr_x = (ctr_x - fix_x) + 0.5";
       result_var=$.projects[0].programs.gp[3][7].functions[9].fun_code[0].local_vars[2]$;
       expr {
	expr="(ctr_x - fix_x) + 0.5";
       };
      };
      AssignExpr @[6] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ctr_y = (ctr_y - fix_y) + 0.5";
       pre_compile_code_string="ctr_y = (ctr_y - fix_y) + 0.5";
       result_var=$.projects[0].programs.gp[3][7].functions[9].fun_code[0].local_vars[3]$;
       expr {
	expr="(ctr_y - fix_y) + 0.5";
       };
      };
      IfContinue @[7] {
       desc="skip offscene";
       flags=CAN_REVERT_TO_CODE;
       code_string="if(ctr_x < 0.0 || ctr_x > 1.0) continue";
       pre_compile_code_string="if(ctr_x < 0.0 || ctr_x > 1.0) continue";
       cond {
	expr="ctr_x < 0.0 || ctr_x > 1.0";
       };
      };
      IfContinue @[8] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if(ctr_y < 0.0 || ctr_y > 1.0) continue";
       pre_compile_code_string="if(ctr_y < 0.0 || ctr_y > 1.0) continue";
       cond {
	expr="ctr_y < 0.0 || ctr_y > 1.0";
       };
      };
      FunctionCall @[9] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="DrawObj(FullViewCanvas, nm, ctr_x, ctr_y, size)";
       pre_compile_code_string="DrawObj(FullViewCanvas, nm, ctr_x, ctr_y, size)";
       result_var=NULL;
       fun=$.projects[0].programs.gp[3][7].functions[7]$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taCanvas;
	 type="taCanvas*";
	 name="canv";
	 required=1;
	 def_val=;
	 prev_expr="FullViewCanvas";
	 expr {
	  expr="FullViewCanvas";
	 };
	};
	ProgArg @[1] {
	 arg_type=taString;
	 type="String";
	 name="objnm";
	 required=1;
	 def_val=;
	 prev_expr="nm";
	 expr {
	  expr="nm";
	 };
	};
	ProgArg @[2] {
	 arg_type=double;
	 type="double";
	 name="ctr_x";
	 required=1;
	 def_val=;
	 prev_expr="ctr_x";
	 expr {
	  expr="ctr_x";
	 };
	};
	ProgArg @[3] {
	 arg_type=double;
	 type="double";
	 name="ctr_y";
	 required=1;
	 def_val=;
	 prev_expr="ctr_y";
	 expr {
	  expr="ctr_y";
	 };
	};
	ProgArg @[4] {
	 arg_type=double;
	 type="double";
	 name="size";
	 required=1;
	 def_val=;
	 prev_expr="size";
	 expr {
	  expr="size";
	 };
	};
	ProgArg @[5] {
	 arg_type=taString;
	 type="String";
	 name="color";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="color";
	 };
	};
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<Scene.rows";
     };
     iter {
      expr="i++";
     };
    };
    FunctionCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ViewCanvas(FullViewCanvas, \"FullView\")";
     pre_compile_code_string="ViewCanvas(FullViewCanvas, \"FullView\")";
     result_var=NULL;
     fun=$.projects[0].programs.gp[3][7].functions[4]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taCanvas;
       type="taCanvas*";
       name="canv";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="FullViewCanvas";
       };
      };
      ProgArg @[1] {
       arg_type=taString;
       type="String";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"FullView\"";
       };
      };
     };
    };
   };
  };
  Function @[10] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="RenderFovea() returns: int";
   pre_compile_code_string="RenderFovea() returns: int";
   name="RenderFovea";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (5 vars)";
     pre_compile_code_string="LocalVars (5 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="nm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="ctr_x";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="ctr_y";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="size";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="color";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    FunctionCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="InitCanvas(FoveaCanvas)";
     pre_compile_code_string="InitCanvas(FoveaCanvas)";
     result_var=NULL;
     fun=$.projects[0].programs.gp[3][7].functions[3]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taCanvas;
       type="taCanvas*";
       name="canv";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="FoveaCanvas";
       };
      };
     };
    };
    ForLoop @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<Scene.rows; i++)";
     pre_compile_code_string="for (i=0; i<Scene.rows; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="nm = Scene[\"name\"][i]";
       pre_compile_code_string="nm = Scene[\"name\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[10].fun_code[0].local_vars[1]$$;
       expr {
	expr="Scene[\"name\"][i]";
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ctr_x = Scene[\"ctr_x\"][i]";
       pre_compile_code_string="ctr_x = Scene[\"ctr_x\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[10].fun_code[0].local_vars[2]$$;
       expr {
	expr="Scene[\"ctr_x\"][i]";
       };
      };
      AssignExpr @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ctr_y = Scene[\"ctr_y\"][i]";
       pre_compile_code_string="ctr_y = Scene[\"ctr_y\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[10].fun_code[0].local_vars[3]$$;
       expr {
	expr="Scene[\"ctr_y\"][i]";
       };
      };
      AssignExpr @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="size = Scene[\"size\"][i]";
       pre_compile_code_string="size = Scene[\"size\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[10].fun_code[0].local_vars[4]$$;
       expr {
	expr="Scene[\"size\"][i]";
       };
      };
      AssignExpr @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="color = Scene[\"color\"][i]";
       pre_compile_code_string="color = Scene[\"color\"][i]";
       result_var=$.projects[0].programs.gp[3][7].functions[9].fun_code[0].local_vars[5]$;
       expr {
	expr="Scene[\"color\"][i]";
       };
      };
      AssignExpr @[5] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ctr_x = fovea_scale * (ctr_x - fix_x) + 0.5";
       pre_compile_code_string="ctr_x = fovea_scale * (ctr_x - fix_x) + 0.5";
       result_var=$.projects[0].programs.gp[3][7].functions[10].fun_code[0].local_vars[2]$;
       expr {
	expr="fovea_scale * (ctr_x - fix_x) + 0.5";
       };
      };
      AssignExpr @[6] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ctr_y = fovea_scale * (ctr_y - fix_y) + 0.5";
       pre_compile_code_string="ctr_y = fovea_scale * (ctr_y - fix_y) + 0.5";
       result_var=$.projects[0].programs.gp[3][7].functions[10].fun_code[0].local_vars[3]$;
       expr {
	expr="fovea_scale * (ctr_y - fix_y) + 0.5";
       };
      };
      AssignExpr @[7] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="size = fovea_scale * size";
       pre_compile_code_string="size = fovea_scale * size";
       result_var=$.projects[0].programs.gp[3][7].functions[10].fun_code[0].local_vars[4]$;
       expr {
	expr="fovea_scale * size";
       };
      };
      IfContinue @[8] {
       desc="skip offscene";
       flags=CAN_REVERT_TO_CODE;
       code_string="if(ctr_x < 0.0 || ctr_x > 1.0) continue";
       pre_compile_code_string="if(ctr_x < 0.0 || ctr_x > 1.0) continue";
       cond {
	expr="ctr_x < 0.0 || ctr_x > 1.0";
       };
      };
      IfContinue @[9] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if(ctr_y < 0.0 || ctr_y > 1.0) continue";
       pre_compile_code_string="if(ctr_y < 0.0 || ctr_y > 1.0) continue";
       cond {
	expr="ctr_y < 0.0 || ctr_y > 1.0";
       };
      };
      FunctionCall @[10] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="DrawObj(FoveaCanvas, nm, ctr_x, ctr_y, size)";
       pre_compile_code_string="DrawObj(FoveaCanvas, nm, ctr_x, ctr_y, size)";
       result_var=NULL;
       fun=$.projects[0].programs.gp[3][7].functions[7]$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taCanvas;
	 type="taCanvas*";
	 name="canv";
	 required=1;
	 def_val=;
	 prev_expr="FoveaCanvas";
	 expr {
	  expr="FoveaCanvas";
	 };
	};
	ProgArg @[1] {
	 arg_type=taString;
	 type="String";
	 name="objnm";
	 required=1;
	 def_val=;
	 prev_expr="nm";
	 expr {
	  expr="nm";
	 };
	};
	ProgArg @[2] {
	 arg_type=double;
	 type="double";
	 name="ctr_x";
	 required=1;
	 def_val=;
	 prev_expr="ctr_x";
	 expr {
	  expr="ctr_x";
	 };
	};
	ProgArg @[3] {
	 arg_type=double;
	 type="double";
	 name="ctr_y";
	 required=1;
	 def_val=;
	 prev_expr="ctr_y";
	 expr {
	  expr="ctr_y";
	 };
	};
	ProgArg @[4] {
	 arg_type=double;
	 type="double";
	 name="size";
	 required=1;
	 def_val=;
	 prev_expr="size";
	 expr {
	  expr="size";
	 };
	};
	ProgArg @[5] {
	 arg_type=taString;
	 type="String";
	 name="color";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="color";
	 };
	};
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<Scene.rows";
     };
     iter {
      expr="i++";
     };
    };
    FunctionCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ViewCanvas(FoveaCanvas, \"Fovea\")";
     pre_compile_code_string="ViewCanvas(FoveaCanvas, \"Fovea\")";
     result_var=NULL;
     fun=$.projects[0].programs.gp[3][7].functions[4]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taCanvas;
       type="taCanvas*";
       name="canv";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="FoveaCanvas";
       };
      };
      ProgArg @[1] {
       arg_type=taString;
       type="String";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"Fovea\"";
       };
      };
     };
    };
   };
  };
  Function @[11] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="FindFoveatedObj() returns: int";
   pre_compile_code_string="FindFoveatedObj() returns: int";
   name="FindFoveatedObj";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name=;
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (7 vars)";
     pre_compile_code_string="LocalVars (7 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="nm";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="ctr_x";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="ctr_y";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="dist";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="min_dist";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[6] {
       name="min_i";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    AssignExpr @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="min_dist = 1000.0";
     pre_compile_code_string="min_dist = 1000.0";
     result_var=.projects[0].programs.gp[3][7].functions[11].fun_code[0].local_vars[5]$$;
     expr {
      expr="1000.0";
     };
    };
    AssignExpr @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="min_i = -1";
     pre_compile_code_string="min_i = -1";
     result_var=.projects[0].programs.gp[3][7].functions[11].fun_code[0].local_vars[6]$$;
     expr {
      expr="-1";
     };
    };
    ForLoop @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i=0; i<Scene.rows; i++)";
     pre_compile_code_string="for (i=0; i<Scene.rows; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ctr_x = Scene[\"ctr_x\"][i]";
       pre_compile_code_string="ctr_x = Scene[\"ctr_x\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[11].fun_code[0].local_vars[2]$$;
       expr {
	expr="Scene[\"ctr_x\"][i]";
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ctr_y = Scene[\"ctr_y\"][i]";
       pre_compile_code_string="ctr_y = Scene[\"ctr_y\"][i]";
       result_var=.projects[0].programs.gp[3][7].functions[11].fun_code[0].local_vars[3]$$;
       expr {
	expr="Scene[\"ctr_y\"][i]";
       };
      };
      MathCall @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="dist = taMath_float::euc_dist(ctr_x, ctr_y, fix_x, fix_y)";
       pre_compile_code_string="dist = taMath_float::euc_dist(ctr_x, ctr_y, fix_x, fix_y)";
       result_var=.projects[0].programs.gp[3][7].functions[11].fun_code[0].local_vars[4]$$;
       object_type=taMath_float;
       method=taMath_float::euc_dist;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float;
	 type="float";
	 name="x1";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="ctr_x";
	 };
	};
	ProgArg @[1] {
	 arg_type=float;
	 type="float";
	 name="y1";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="ctr_y";
	 };
	};
	ProgArg @[2] {
	 arg_type=float;
	 type="float";
	 name="x2";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="fix_x";
	 };
	};
	ProgArg @[3] {
	 arg_type=float;
	 type="float";
	 name="y2";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="fix_y";
	 };
	};
       };
      };
      If @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (dist < min_dist)";
       pre_compile_code_string="if (dist < min_dist)";
       cond {
	expr="dist < min_dist";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="min_i = i";
	 pre_compile_code_string="min_i = i";
	 result_var=$.projects[0].programs.gp[3][7].functions[11].fun_code[0].local_vars[6]$;
	 expr {
	  expr="i";
	 };
	};
	AssignExpr @[1] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="min_dist = dist";
	 pre_compile_code_string="min_dist = dist";
	 result_var=$.projects[0].programs.gp[3][7].functions[11].fun_code[0].local_vars[5]$;
	 expr {
	  expr="dist";
	 };
	};
       };
      };
     };
     init {
      expr="i=0";
     };
     test {
      expr="i<Scene.rows";
     };
     iter {
      expr="i++";
     };
    };
    AssignExpr @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="closest_obj_scene_idx = min_i";
     pre_compile_code_string="closest_obj_scene_idx = min_i";
     result_var=.projects[0].programs.gp[3][7].vars[48]$$;
     expr {
      expr="min_i";
     };
    };
    AssignExpr @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="closest_obj_dist = min_dist";
     pre_compile_code_string="closest_obj_dist = min_dist";
     result_var=.projects[0].programs.gp[3][7].vars[50]$$;
     expr {
      expr="min_dist";
     };
    };
    AssignExpr @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="closest_obj_nm = Scene[\"name\"][min_i]";
     pre_compile_code_string="closest_obj_nm = Scene[\"name\"][min_i]";
     result_var=.projects[0].programs.gp[3][7].vars[51]$$;
     expr {
      expr="Scene[\"name\"][min_i]";
     };
    };
    MethodCall @[7] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="closest_obj_obj_idx = VisualObjects->FindVal(closest_obj_nm, \"name\", 0, true)";
     pre_compile_code_string="closest_obj_obj_idx = VisualObjects->FindVal(closest_obj_nm, \"name\", 0, true)";
     result_var=.projects[0].programs.gp[3][7].vars[49]$$;
     obj=$.projects[0].programs.gp[3][7].vars[30]$;
     method=DataTable::FindVal;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="val";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="closest_obj_nm";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"name\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="st_row";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr="0";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="not_found_err";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
     meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
    };
    If @[8] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (min_dist < foveate_thr_dist)";
     pre_compile_code_string="if (min_dist < foveate_thr_dist)";
     cond {
      expr="min_dist < foveate_thr_dist";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="foveate_obj_scene_idx = closest_obj_scene_idx";
       pre_compile_code_string="foveate_obj_scene_idx = closest_obj_scene_idx";
       result_var=.projects[0].programs.gp[3][7].vars[53]$$;
       expr {
	expr="closest_obj_scene_idx";
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="foveate_obj_obj_idx = closest_obj_obj_idx";
       pre_compile_code_string="foveate_obj_obj_idx = closest_obj_obj_idx";
       result_var=.projects[0].programs.gp[3][7].vars[54]$$;
       expr {
	expr="closest_obj_obj_idx";
       };
      };
      AssignExpr @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="foveate_obj_dist = closest_obj_dist";
       pre_compile_code_string="foveate_obj_dist = closest_obj_dist";
       result_var=.projects[0].programs.gp[3][7].vars[55]$$;
       expr {
	expr="closest_obj_dist";
       };
      };
      AssignExpr @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="foveate_obj_nm = closest_obj_nm";
       pre_compile_code_string="foveate_obj_nm = closest_obj_nm";
       result_var=.projects[0].programs.gp[3][7].vars[56]$$;
       expr {
	expr="closest_obj_nm";
       };
      };
      PrintVar @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print  foveate_obj_nm foveate_obj_dist";
       pre_compile_code_string="Print  foveate_obj_nm foveate_obj_dist";
       message=;
       print_var=$.projects[0].programs.gp[3][7].vars[56]$;
       print_var2=$.projects[0].programs.gp[3][7].vars[55]$;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
       debug=1;
      };
     };
    };
    Else @[9] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     pre_compile_code_string="else";
     else_code {
      name="else_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="foveate_obj_scene_idx = -1";
       pre_compile_code_string="foveate_obj_scene_idx = -1";
       result_var=$.projects[0].programs.gp[3][7].vars[53]$;
       expr {
	expr="-1";
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="foveate_obj_obj_idx = -1";
       pre_compile_code_string="foveate_obj_obj_idx = -1";
       result_var=$.projects[0].programs.gp[3][7].vars[54]$;
       expr {
	expr="-1";
       };
      };
      AssignExpr @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="foveate_obj_nm = \"\"";
       pre_compile_code_string="foveate_obj_nm = \"\"";
       result_var=$.projects[0].programs.gp[3][7].vars[56]$;
       expr {
	expr="\"\"";
       };
      };
      AssignExpr @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="foveate_obj_dist = -1";
       pre_compile_code_string="foveate_obj_dist = -1";
       result_var=$.projects[0].programs.gp[3][7].vars[55]$;
       expr {
	expr="-1";
       };
      };
      PrintVar @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print  \"Nothing foveated, closest\" closest_obj_nm closest_obj_dist";
       pre_compile_code_string="Print  \"Nothing foveated, closest\" closest_obj_nm closest_obj_dist";
       message="Nothing foveated, closest";
       print_var=$.projects[0].programs.gp[3][7].vars[51]$;
       print_var2=$.projects[0].programs.gp[3][7].vars[50]$;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
       debug=1;
      };
     };
    };
   };
  };
  Function @[12] {
   desc="gets current parameter value for given variable -- returns true if a value found, false if not";
   flags=CAN_REVERT_TO_CODE;
   code_string="GetParamValue(ProgVar* var) returns: bool";
   pre_compile_code_string="GetParamValue(ProgVar* var) returns: bool";
   name="GetParamValue";
   return_type=T_Bool;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="var";
     var_type=T_Object;
     object_type=ProgVar;
     object_val=NULL;
     objs_ptr=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_576";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (2 vars)";
     pre_compile_code_string="LocalVars (2 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="pidx";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="val";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MethodCall @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="pidx = cur_params->FindVal(var.name, \"name\", 0, false)";
     pre_compile_code_string="pidx = cur_params->FindVal(var.name, \"name\", 0, false)";
     result_var=.projects[0].programs.gp[3][7].functions[12].fun_code[0].local_vars[0]$$;
     obj=.projects[0].programs.gp[3][7].vars[57]$$;
     method=DataTable::FindVal;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="val";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="var.name";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"name\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="st_row";
       required=0;
       def_val="0";
       prev_expr=;
       expr {
	expr="0";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="not_found_err";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
     meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
    };
    If @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (pidx < 0)";
     pre_compile_code_string="if (pidx < 0)";
     cond {
      expr="pidx < 0";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      ReturnExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="return false";
       pre_compile_code_string="return false";
       expr {
	expr="false";
       };
      };
     };
    };
    AssignExpr @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="val = cur_params[\"value\"][pidx]";
     pre_compile_code_string="val = cur_params[\"value\"][pidx]";
     result_var=.projects[0].programs.gp[3][7].functions[12].fun_code[0].local_vars[1]$$;
     expr {
      expr="cur_params[\"value\"][pidx]";
     };
    };
    MethodCall @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="var->SetValFromString(val)";
     pre_compile_code_string="var->SetValFromString(val)";
     result_var=NULL;
     obj=.projects[0].programs.gp[3][7].functions[12].args[0]$$;
     method=ProgVar::SetValFromString;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="str_val";
       required=1;
       def_val=;
       prev_expr="val";
       expr {
	expr="val";
       };
      };
     };
     meth_sig="void SetValFromString(taString& str_val)";
     meth_desc=" set variable value from string -- does not change the type of the variable";
    };
    PrintExpr @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"set var: \" << var.name << \" to value: \" << val << \" actual: \" << var.GetStringVal()";
     pre_compile_code_string="Print \"set var: \" << var.name << \" to value: \" << val << \" actual: \" << var.GetStringVal()";
     expr {
      expr="\"set var: \" << var.name << \" to value: \" << val << \" actual: \" << var.GetStringVal()";
     };
     debug=1;
    };
    ReturnExpr @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="return true";
     pre_compile_code_string="return true";
     expr {
      expr="true";
     };
    };
   };
  };
  Function @[13] {
   desc="this gets all the parameter values for any variable present in the .vars section -- no err if not foun";
   flags=CAN_REVERT_TO_CODE;
   code_string="GetAllParams() returns: int";
   pre_compile_code_string="GetAllParams() returns: int";
   name="GetAllParams";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_577";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (1 vars)";
     pre_compile_code_string="LocalVars (1 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="pvar";
       var_type=T_Object;
       object_type=ProgVar;
       object_val=NULL;
       objs_ptr=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    ForeachLoop @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="foreach(pvar in this.vars)";
     pre_compile_code_string="foreach(pvar in this.vars)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       desc="just try them all and see what sticks!";
       flags=CAN_REVERT_TO_CODE;
       code_string="GetParamValue(pvar)";
       pre_compile_code_string="GetParamValue(pvar)";
       result_var=NULL;
       fun=.projects[0].programs.gp[3][7].functions[12]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=ProgVar;
	 type="ProgVar*";
	 name="var";
	 required=1;
	 def_val=;
	 prev_expr="pvar";
	 expr {
	  expr="pvar";
	 };
	};
       };
      };
     };
     el_var=.projects[0].programs.gp[3][7].functions[13].fun_code[0].local_vars[0]$$;
     in {
      expr="this.vars";
     };
    };
   };
  };
  Function @[14] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="ConstrainVel(double& vel, double start, double trials) returns: int";
   pre_compile_code_string="ConstrainVel(double& vel, double start, double trials) returns: int";
   name="ConstrainVel";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="vel";
     var_type=T_Real;
     real_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=1;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="start";
     var_type=T_Real;
     real_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="trials";
     var_type=T_Real;
     real_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_602";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (1 vars)";
     pre_compile_code_string="LocalVars (1 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="end";
       var_type=T_Real;
       real_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    IfReturn @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if(trials <= 0) return";
     pre_compile_code_string="if(trials <= 0) return";
     cond {
      expr="trials <= 0";
     };
    };
    AssignExpr @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="end = start + vel * trials";
     pre_compile_code_string="end = start + vel * trials";
     result_var=.projects[0].programs.gp[3][7].functions[14].fun_code[0].local_vars[0]$$;
     expr {
      expr="start + vel * trials";
     };
    };
    If @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (end > max_pos)";
     pre_compile_code_string="if (end > max_pos)";
     cond {
      expr="end > max_pos";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="vel = (max_pos - start) / trials";
       pre_compile_code_string="vel = (max_pos - start) / trials";
       result_var=.projects[0].programs.gp[3][7].functions[14].args[0]$$;
       expr {
	expr="(max_pos - start) / trials";
       };
      };
     };
    };
    If @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (end < min_pos)";
     pre_compile_code_string="if (end < min_pos)";
     cond {
      expr="end < min_pos";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="vel = (min_pos - start) / trials";
       pre_compile_code_string="vel = (min_pos - start) / trials";
       result_var=$.projects[0].programs.gp[3][7].functions[14].args[0]$;
       expr {
	expr="(min_pos - start) / trials";
       };
      };
     };
    };
   };
  };
  Function @[15] {
   desc="set positions to starting positions";
   flags=CAN_REVERT_TO_CODE;
   code_string="PosToStart() returns: int";
   pre_compile_code_string="PosToStart() returns: int";
   name="PosToStart";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_601";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    AssignExpr @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="p_pos_x = p_start_x";
     pre_compile_code_string="p_pos_x = p_start_x";
     result_var=.projects[0].programs.gp[3][7].vars[15]$$;
     expr {
      expr="p_start_x";
     };
    };
    AssignExpr @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="p_pos_y = p_start_y";
     pre_compile_code_string="p_pos_y = p_start_y";
     result_var=.projects[0].programs.gp[3][7].vars[16]$$;
     expr {
      expr="p_start_y";
     };
    };
    AssignExpr @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="o_pos_x = o_start_x";
     pre_compile_code_string="o_pos_x = o_start_x";
     result_var=.projects[0].programs.gp[3][7].vars[25]$$;
     expr {
      expr="o_start_x";
     };
    };
    AssignExpr @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="o_pos_y = o_start_y";
     pre_compile_code_string="o_pos_y = o_start_y";
     result_var=.projects[0].programs.gp[3][7].vars[26]$$;
     expr {
      expr="o_start_y";
     };
    };
    FunctionCall @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ConstrainVel(p_vel_x, p_start_x, atrials)";
     pre_compile_code_string="ConstrainVel(p_vel_x, p_start_x, atrials)";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][7].functions[14]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=double;
       type="double";
       name="vel";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="p_vel_x";
       };
      };
      ProgArg @[1] {
       arg_type=double;
       type="double";
       name="start";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="p_start_x";
       };
      };
      ProgArg @[2] {
       arg_type=double;
       type="double";
       name="trials";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="atrials";
       };
      };
     };
    };
    FunctionCall @[6] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ConstrainVel(p_vel_y, p_start_y, atrials)";
     pre_compile_code_string="ConstrainVel(p_vel_y, p_start_y, atrials)";
     result_var=NULL;
     fun=$.projects[0].programs.gp[3][7].functions[14]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=double;
       type="double";
       name="vel";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="p_vel_y";
       };
      };
      ProgArg @[1] {
       arg_type=double;
       type="double";
       name="start";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="p_start_y";
       };
      };
      ProgArg @[2] {
       arg_type=double;
       type="double";
       name="trials";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="atrials";
       };
      };
     };
    };
    FunctionCall @[7] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ConstrainVel(o_vel_x, o_start_x, atrials)";
     pre_compile_code_string="ConstrainVel(o_vel_x, o_start_x, atrials)";
     result_var=NULL;
     fun=$.projects[0].programs.gp[3][7].functions[14]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=double;
       type="double";
       name="vel";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="o_vel_x";
       };
      };
      ProgArg @[1] {
       arg_type=double;
       type="double";
       name="start";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="o_start_x";
       };
      };
      ProgArg @[2] {
       arg_type=double;
       type="double";
       name="trials";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="atrials";
       };
      };
     };
    };
    FunctionCall @[8] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ConstrainVel(o_vel_y, o_start_y, atrials)";
     pre_compile_code_string="ConstrainVel(o_vel_y, o_start_y, atrials)";
     result_var=NULL;
     fun=$.projects[0].programs.gp[3][7].functions[14]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=double;
       type="double";
       name="vel";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="o_vel_y";
       };
      };
      ProgArg @[1] {
       arg_type=double;
       type="double";
       name="start";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="o_start_y";
       };
      };
      ProgArg @[2] {
       arg_type=double;
       type="double";
       name="trials";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="atrials";
       };
      };
     };
    };
   };
  };
  Function @[16] {
   desc="increment positions";
   flags=CAN_REVERT_TO_CODE;
   code_string="MovePos() returns: int";
   pre_compile_code_string="MovePos() returns: int";
   name="MovePos";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_607";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     pre_compile_code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    VarIncr @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="p_pos_x += p_vel_x";
     pre_compile_code_string="p_pos_x += p_vel_x";
     var=$.projects[0].programs.gp[3][7].vars[15]$;
     expr {
      expr="p_vel_x";
     };
    };
    VarIncr @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="p_pos_y += p_vel_y";
     pre_compile_code_string="p_pos_y += p_vel_y";
     var=$.projects[0].programs.gp[3][7].vars[16]$;
     expr {
      expr="p_vel_y";
     };
    };
    VarIncr @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="o_pos_x += o_vel_x";
     pre_compile_code_string="o_pos_x += o_vel_x";
     var=$.projects[0].programs.gp[3][7].vars[25]$;
     expr {
      expr="o_vel_x";
     };
    };
    VarIncr @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="o_pos_y += o_vel_y";
     pre_compile_code_string="o_pos_y += o_vel_y";
     var=$.projects[0].programs.gp[3][7].vars[26]$;
     expr {
      expr="o_vel_y";
     };
    };
   };
  };
  Function @[17] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="UpdtSceneRow(int rowi, double pos_x, double pos_y, double size, String color) returns: int";
   pre_compile_code_string="UpdtSceneRow(int rowi, double pos_x, double pos_y, double size, String color) returns: int";
   name="UpdtSceneRow";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="rowi";
     var_type=T_Int;
     int_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="pos_x";
     var_type=T_Real;
     real_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="pos_y";
     var_type=T_Real;
     real_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="size";
     var_type=T_Real;
     real_val=0;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="color";
     var_type=T_String;
     string_val=;
     flags=SAVE_VAL|LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   fun_code {
    name="ProgEl_List_609";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (1 vars)";
     pre_compile_code_string="LocalVars (1 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="pidx";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MatrixAssign @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Scene[\"ctr_x\"][rowi] = pos_x";
     pre_compile_code_string="Scene[\"ctr_x\"][rowi] = pos_x";
     variable=.projects[0].programs.gp[3][7].vars[31]$$;
     data_table=1;
     col {
      expr="\"ctr_x\"";
     };
     dim0 {
      expr="rowi";
     };
     dim1 {
      expr=;
     };
     dim2 {
      expr=;
     };
     dim3 {
      expr=;
     };
     dim4 {
      expr=;
     };
     dim5 {
      expr=;
     };
     expr {
      expr="pos_x";
     };
    };
    MatrixAssign @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Scene[\"ctr_y\"][rowi] = pos_y";
     pre_compile_code_string="Scene[\"ctr_y\"][rowi] = pos_y";
     variable=$.projects[0].programs.gp[3][7].vars[31]$;
     data_table=1;
     col {
      expr="\"ctr_y\"";
     };
     dim0 {
      expr="rowi";
     };
     dim1 {
      expr=;
     };
     dim2 {
      expr=;
     };
     dim3 {
      expr=;
     };
     dim4 {
      expr=;
     };
     dim5 {
      expr=;
     };
     expr {
      expr="pos_y";
     };
    };
    MatrixAssign @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Scene[\"size\"][rowi] = size";
     pre_compile_code_string="Scene[\"size\"][rowi] = size";
     variable=$.projects[0].programs.gp[3][7].vars[31]$;
     data_table=1;
     col {
      expr="\"size\"";
     };
     dim0 {
      expr="rowi";
     };
     dim1 {
      expr=;
     };
     dim2 {
      expr=;
     };
     dim3 {
      expr=;
     };
     dim4 {
      expr=;
     };
     dim5 {
      expr=;
     };
     expr {
      expr="size";
     };
    };
    If @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (color.contains(\":\"))";
     pre_compile_code_string="if (color.contains(\":\"))";
     cond {
      expr="color.contains(\":\")";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="color = color->before(\":\", )";
       pre_compile_code_string="color = color->before(\":\", )";
       result_var=.projects[0].programs.gp[3][7].functions[17].args[4]$$;
       obj=$.projects[0].programs.gp[3][7].functions[17].args[4]$;
       method=taString::before;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="x";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\":\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="startpos";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="taString before(taString& x, int startpos = 0)";
       meth_desc=" get substring before (not including) target string. startpos = starting position (- = search from end forward)";
      };
     };
    };
    MatrixAssign @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Scene[\"color\"][rowi] = color";
     pre_compile_code_string="Scene[\"color\"][rowi] = color";
     variable=$.projects[0].programs.gp[3][7].vars[31]$;
     data_table=1;
     col {
      expr="\"color\"";
     };
     dim0 {
      expr="rowi";
     };
     dim1 {
      expr=;
     };
     dim2 {
      expr=;
     };
     dim3 {
      expr=;
     };
     dim4 {
      expr=;
     };
     dim5 {
      expr=;
     };
     expr {
      expr="color";
     };
    };
   };
  };
  Function @[18] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="ComposeScene() returns: int";
   pre_compile_code_string="ComposeScene() returns: int";
   name="ComposeScene";
   return_type=T_Int;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_592";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (2 vars)";
     pre_compile_code_string="LocalVars (2 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="pidx";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="oidx";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    If @[1] {
     desc="new paragraph / story indicator";
     flags=CAN_REVERT_TO_CODE;
     code_string="if (cur_sentence.startsWith(\"<p>\"))";
     pre_compile_code_string="if (cur_sentence.startsWith(\"<p>\"))";
     cond {
      expr="cur_sentence.startsWith(\"<p>\")";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Scene->ResetData()";
       pre_compile_code_string="Scene->ResetData()";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][7].vars[31]$;
       method=DataTable::ResetData;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void ResetData()";
       meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
      };
     };
    };
    If @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (p_obj.nonempty())";
     pre_compile_code_string="if (p_obj.nonempty())";
     cond {
      expr="p_obj.nonempty()";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="pidx = Scene->FindVal(p_obj, \"name\", 0, false)";
       pre_compile_code_string="pidx = Scene->FindVal(p_obj, \"name\", 0, false)";
       result_var=.projects[0].programs.gp[3][7].functions[18].fun_code[0].local_vars[0]$$;
       obj=$.projects[0].programs.gp[3][7].vars[31]$;
       method=DataTable::FindVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="p_obj";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"name\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="not_found_err";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
       meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
      };
      If @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (pidx < 0)";
       pre_compile_code_string="if (pidx < 0)";
       cond {
	expr="pidx < 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="pidx = Scene.rows";
	 pre_compile_code_string="pidx = Scene.rows";
	 result_var=$.projects[0].programs.gp[3][7].functions[18].fun_code[0].local_vars[0]$;
	 expr {
	  expr="Scene.rows";
	 };
	};
	MethodCall @[1] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="Scene->AddBlankRow()";
	 pre_compile_code_string="Scene->AddBlankRow()";
	 result_var=NULL;
	 obj=$.projects[0].programs.gp[3][7].vars[31]$;
	 method=DataTable::AddBlankRow;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	 };
	 meth_sig="int AddBlankRow()";
	 meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
	};
	MatrixAssign @[2] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="Scene[\"name\"][pidx] = p_obj";
	 pre_compile_code_string="Scene[\"name\"][pidx] = p_obj";
	 variable=$.projects[0].programs.gp[3][7].vars[31]$;
	 data_table=1;
	 col {
	  expr="\"name\"";
	 };
	 dim0 {
	  expr="pidx";
	 };
	 dim1 {
	  expr=;
	 };
	 dim2 {
	  expr=;
	 };
	 dim3 {
	  expr=;
	 };
	 dim4 {
	  expr=;
	 };
	 dim5 {
	  expr=;
	 };
	 expr {
	  expr="p_obj";
	 };
	};
       };
      };
      FunctionCall @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="UpdtSceneRow(pidx, p_pos_x, p_pos_y, p_size, p_color)";
       pre_compile_code_string="UpdtSceneRow(pidx, p_pos_x, p_pos_y, p_size, p_color)";
       result_var=NULL;
       fun=.projects[0].programs.gp[3][7].functions[17]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="rowi";
	 required=1;
	 def_val=;
	 prev_expr="p_pos_x";
	 expr {
	  expr="pidx";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="pos_x";
	 required=1;
	 def_val=;
	 prev_expr="p_pos_y";
	 expr {
	  expr="p_pos_x";
	 };
	};
	ProgArg @[2] {
	 arg_type=double;
	 type="double";
	 name="pos_y";
	 required=1;
	 def_val=;
	 prev_expr="p_size";
	 expr {
	  expr="p_pos_y";
	 };
	};
	ProgArg @[3] {
	 arg_type=double;
	 type="double";
	 name="size";
	 required=1;
	 def_val=;
	 prev_expr="p_color";
	 expr {
	  expr="p_size";
	 };
	};
	ProgArg @[4] {
	 arg_type=taString;
	 type="String";
	 name="color";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="p_color";
	 };
	};
       };
      };
     };
    };
    If @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (o_obj.nonempty())";
     pre_compile_code_string="if (o_obj.nonempty())";
     cond {
      expr="o_obj.nonempty()";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="oidx = Scene->FindVal(o_obj, \"name\", 0, false)";
       pre_compile_code_string="oidx = Scene->FindVal(o_obj, \"name\", 0, false)";
       result_var=.projects[0].programs.gp[3][7].functions[18].fun_code[0].local_vars[1]$$;
       obj=$.projects[0].programs.gp[3][7].vars[31]$;
       method=DataTable::FindVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="o_obj";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"name\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="not_found_err";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
       meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
      };
      If @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (oidx < 0)";
       pre_compile_code_string="if (oidx < 0)";
       cond {
	expr="oidx < 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="oidx = Scene.rows";
	 pre_compile_code_string="oidx = Scene.rows";
	 result_var=$.projects[0].programs.gp[3][7].functions[18].fun_code[0].local_vars[1]$;
	 expr {
	  expr="Scene.rows";
	 };
	};
	MethodCall @[1] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="Scene->AddBlankRow()";
	 pre_compile_code_string="Scene->AddBlankRow()";
	 result_var=NULL;
	 obj=$.projects[0].programs.gp[3][7].vars[31]$;
	 method=DataTable::AddBlankRow;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	 };
	 meth_sig="int AddBlankRow()";
	 meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
	};
	MatrixAssign @[2] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="Scene[\"name\"][oidx] = o_obj";
	 pre_compile_code_string="Scene[\"name\"][oidx] = o_obj";
	 variable=$.projects[0].programs.gp[3][7].vars[31]$;
	 data_table=1;
	 col {
	  expr="\"name\"";
	 };
	 dim0 {
	  expr="oidx";
	 };
	 dim1 {
	  expr=;
	 };
	 dim2 {
	  expr=;
	 };
	 dim3 {
	  expr=;
	 };
	 dim4 {
	  expr=;
	 };
	 dim5 {
	  expr=;
	 };
	 expr {
	  expr="o_obj";
	 };
	};
       };
      };
      FunctionCall @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="UpdtSceneRow(oidx, o_pos_x, o_pos_y, o_size, o_color)";
       pre_compile_code_string="UpdtSceneRow(oidx, o_pos_x, o_pos_y, o_size, o_color)";
       result_var=NULL;
       fun=$.projects[0].programs.gp[3][7].functions[17]$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="rowi";
	 required=1;
	 def_val=;
	 prev_expr="o_pos_x";
	 expr {
	  expr="oidx";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="pos_x";
	 required=1;
	 def_val=;
	 prev_expr="o_pos_y";
	 expr {
	  expr="o_pos_x";
	 };
	};
	ProgArg @[2] {
	 arg_type=double;
	 type="double";
	 name="pos_y";
	 required=1;
	 def_val=;
	 prev_expr="o_size";
	 expr {
	  expr="o_pos_y";
	 };
	};
	ProgArg @[3] {
	 arg_type=double;
	 type="double";
	 name="size";
	 required=1;
	 def_val=;
	 prev_expr="o_color";
	 expr {
	  expr="o_size";
	 };
	};
	ProgArg @[4] {
	 arg_type=taString;
	 type="String";
	 name="color";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="o_color";
	 };
	};
       };
      };
     };
    };
   };
  };
  Function @[19] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="LoadAudWord() returns: bool";
   pre_compile_code_string="LoadAudWord() returns: bool";
   name="LoadAudWord";
   return_type=T_Bool;
   object_type=taOBase;
   args {
    name="ProgVar_List_1";
    el_typ=ProgVar;
    el_def=0;
   };
   fun_code {
    name="ProgEl_List_642";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     desc=;
     flags=0;
     code_string=;
     pre_compile_code_string=;
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="widx";
       var_type=T_Int;
       int_val=0;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="file_path";
       var_type=T_String;
       string_val=;
       flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    If @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (aud_word.nonempty() && aud_word != cur_aud_word)";
     pre_compile_code_string="if (aud_word.nonempty() && aud_word != cur_aud_word)";
     cond {
      expr="aud_word.nonempty() && aud_word != cur_aud_word";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cur_aud_word = aud_word";
       pre_compile_code_string="cur_aud_word = aud_word";
       result_var=.projects[0].programs.gp[3][7].vars[6]$$;
       expr {
	expr="aud_word";
       };
      };
      MethodCall @[1] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="widx = AuditoryWords->FindVal(aud_word, \"name\", 0, false)";
       pre_compile_code_string="widx = AuditoryWords->FindVal(aud_word, \"name\", 0, false)";
       result_var=.projects[0].programs.gp[3][7].functions[19].fun_code[0].local_vars[0]$$;
       obj=$.projects[0].programs.gp[3][7].vars[59]$;
       method=DataTable::FindVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="aud_word";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"name\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr="0";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="not_found_err";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="int FindVal(Variant& val, Variant& col, int st_row = 0, bool not_found_err = false)";
       meth_desc=" find row number for given value within column col of scalar type (use for Programs), starting at given starting row number. if st_row < 0 then the search proceeds backwards from that many rows from end (-1 = end) -- column can be specified as either integer index or a string that is then used to find the given column name. returns -1 if not found, and issues error if not_found_err is true";
      };
      If @[2] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (widx < 0)";
       pre_compile_code_string="if (widx < 0)";
       cond {
	expr="widx < 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	ReturnExpr @[0] {
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="return false";
	 pre_compile_code_string="return false";
	 expr {
	  expr="false";
	 };
	};
       };
      };
      AssignExpr @[3] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="file_path = AuditoryWords[\"file_path\"][widx]";
       pre_compile_code_string="file_path = AuditoryWords[\"file_path\"][widx]";
       result_var=.projects[0].programs.gp[3][7].functions[19].fun_code[0].local_vars[1]$$;
       expr {
	expr="AuditoryWords[\"file_path\"][widx]";
       };
      };
      MethodCall @[4] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="CurSound->LoadSound()";
       pre_compile_code_string="CurSound->LoadSound(file_path)";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][7].vars[60]$;
       method=taSound::LoadSound;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="file_path";
	 };
	};
       };
       meth_sig="bool LoadSound(taString& fname)";
       meth_desc=" load a sound from given file name (leave file name blank to get a chooser)";
      };
     };
    };
    If @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (cur_trial == aud_start)";
     pre_compile_code_string="if (cur_trial == aud_start)";
     cond {
      expr="cur_trial == aud_start";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="CurSound->PlaySound()";
       pre_compile_code_string="CurSound->PlaySound()";
       result_var=NULL;
       obj=$.projects[0].programs.gp[3][7].vars[60]$;
       method=taSound::PlaySound;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="device_name";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="bool PlaySound(taString& device_name)";
       meth_desc=" play the sound to the given device name (empty for default) -- use ListSoundDevices to find a list of valid device names";
      };
     };
    };
   };
  };
 };
 init_code {
  name="init_code";
  el_typ=ProgCode;
  el_def=0;
  MethodCall @[0] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="SceneCanvas->SetImageSize(full_view_pixels, full_view_pixels)";
   pre_compile_code_string="SceneCanvas->SetImageSize(full_view_pixels, full_view_pixels)";
   result_var=NULL;
   obj=.projects[0].programs.gp[3][7].vars[35]$$;
   method=taImage::SetImageSize;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=int;
     type="int";
     name="width";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="full_view_pixels";
     };
    };
    ProgArg @[1] {
     arg_type=int;
     type="int";
     name="height";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="full_view_pixels";
     };
    };
   };
   meth_sig="bool SetImageSize(int width, int height)";
   meth_desc=" set size of current image -- if currently same size, then returns false and nothing happens; otherwise, a new image data structure of given size is created, using ARGB32 format";
  };
  MethodCall @[1] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="FullViewCanvas->SetImageSize(full_view_pixels, full_view_pixels)";
   pre_compile_code_string="FullViewCanvas->SetImageSize(full_view_pixels, full_view_pixels)";
   result_var=NULL;
   obj=.projects[0].programs.gp[3][7].vars[33]$$;
   method=taImage::SetImageSize;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=int;
     type="int";
     name="width";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="full_view_pixels";
     };
    };
    ProgArg @[1] {
     arg_type=int;
     type="int";
     name="height";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="full_view_pixels";
     };
    };
   };
   meth_sig="bool SetImageSize(int width, int height)";
   meth_desc=" set size of current image -- if currently same size, then returns false and nothing happens; otherwise, a new image data structure of given size is created, using ARGB32 format";
  };
  MethodCall @[2] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="FoveaCanvas->SetImageSize(fovea_pixels, fovea_pixels)";
   pre_compile_code_string="FoveaCanvas->SetImageSize(fovea_pixels, fovea_pixels)";
   result_var=NULL;
   obj=.projects[0].programs.gp[3][7].vars[34]$$;
   method=taImage::SetImageSize;
   meth_args {
    name="meth_args";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=int;
     type="int";
     name="width";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="fovea_pixels";
     };
    };
    ProgArg @[1] {
     arg_type=int;
     type="int";
     name="height";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr="fovea_pixels";
     };
    };
   };
   meth_sig="bool SetImageSize(int width, int height)";
   meth_desc=" set size of current image -- if currently same size, then returns false and nothing happens; otherwise, a new image data structure of given size is created, using ARGB32 format";
  };
  If @[3] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="if (init_vis_objs)";
   pre_compile_code_string="if (init_vis_objs)";
   cond {
    expr="init_vis_objs";
   };
   true_code {
    name="true_code";
    el_typ=ProgCode;
    el_def=0;
    FunctionCall @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LoadVisualObjects()";
     pre_compile_code_string="LoadVisualObjects()";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][7].functions[1]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
  };
  If @[4] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="if (init_aud_words)";
   pre_compile_code_string="if (init_aud_words)";
   cond {
    expr="init_aud_words";
   };
   true_code {
    name="true_code";
    el_typ=ProgCode;
    el_def=0;
    FunctionCall @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LoadAuditoryWords()";
     pre_compile_code_string="LoadAuditoryWords()";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][7].functions[2]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
  };
  FunctionCall @[5] {
   desc=;
   flags=OFF|CAN_REVERT_TO_CODE;
   code_string="FixNamedColors()";
   pre_compile_code_string="FixNamedColors()";
   result_var=NULL;
   fun=.projects[0].programs.gp[3][7].functions[6]$$;
   fun_args {
    name="fun_args";
    el_typ=ProgArg;
    el_def=0;
   };
  };
  AssignExpr @[6] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="cur_trial = -1";
   pre_compile_code_string="cur_trial = -1";
   result_var=.projects[0].programs.gp[3][7].vars[4]$$;
   expr {
    expr="-1";
   };
  };
  AssignExpr @[7] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="cur_aud_word = \"\"";
   pre_compile_code_string="cur_aud_word = \"\"";
   result_var=$.projects[0].programs.gp[3][7].vars[6]$;
   expr {
    expr="\"\"";
   };
  };
 };
 prog_code {
  name="prog_code";
  el_typ=ProgCode;
  el_def=0;
  LocalVars @[0] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="LocalVars (0 vars)";
   pre_compile_code_string="LocalVars (0 vars)";
   local_vars {
    name="local_vars";
    el_typ=ProgVar;
    el_def=0;
   };
  };
  If @[1] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="if (cur_trial < 0 || cur_trial >= atrials)";
   pre_compile_code_string="if (cur_trial < 0 || cur_trial >= atrials)";
   cond {
    expr="cur_trial < 0 || cur_trial >= atrials";
   };
   true_code {
    name="true_code";
    el_typ=ProgCode;
    el_def=0;
    ProgramCall @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="StoryGenerator(false)";
     pre_compile_code_string="StoryGenerator(false)";
     prog_args {
      name="prog_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="get_next_word";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     target=.projects[0].programs.gp[3][5]$$<Program,StoryGenerator>;
     targ_ld_init="*StoryGenerator*";
    };
    OtherProgramVar @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Vars Fm:  program=StoryGenerator set=from  var_1=cur_sentence  var_2=?  var_3=?  var_4=? ";
     pre_compile_code_string="Vars Fm:  program=StoryGenerator set=from  var_1=cur_sentence  var_2=?  var_3=?  var_4=? ";
     other_prog=$.projects[0].programs.gp[3][5]$;
     set_other=0;
     var_1=.projects[0].programs.gp[3][7].vars[0]$$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    ProgramCall @[2] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="StoryParambulator(cur_sentence)";
     pre_compile_code_string="StoryParambulator(cur_sentence)";
     prog_args {
      name="prog_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taString;
       type="String";
       name="input_sentence";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="cur_sentence";
       };
      };
     };
     target=.projects[0].programs.gp[3][6]$$<Program,StoryParambulator>;
     targ_ld_init="*StoryParambulator*";
    };
    FunctionCall @[3] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="GetAllParams()";
     pre_compile_code_string="GetAllParams()";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][7].functions[13]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
     };
    };
    FunctionCall @[4] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="PosToStart()";
     pre_compile_code_string="PosToStart()";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][7].functions[15]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
     };
    };
    AssignExpr @[5] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="cur_trial = 0";
     pre_compile_code_string="cur_trial = 0";
     result_var=$.projects[0].programs.gp[3][7].vars[4]$;
     expr {
      expr="0";
     };
    };
   };
  };
  Else @[2] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="else";
   pre_compile_code_string="else";
   else_code {
    name="else_code";
    el_typ=ProgCode;
    el_def=0;
    FunctionCall @[0] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="MovePos()";
     pre_compile_code_string="MovePos()";
     result_var=NULL;
     fun=.projects[0].programs.gp[3][7].functions[16]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
     };
    };
    VarIncr @[1] {
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="cur_trial += 1";
     pre_compile_code_string="cur_trial += 1";
     var=$.projects[0].programs.gp[3][7].vars[4]$;
     expr {
      expr="1";
     };
    };
   };
  };
  FunctionCall @[3] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="ComposeScene()";
   pre_compile_code_string="ComposeScene()";
   result_var=NULL;
   fun=.projects[0].programs.gp[3][7].functions[18]$$;
   fun_args {
    name="fun_args";
    el_typ=ProgArg;
    el_def=0;
   };
  };
  FunctionCall @[4] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="RenderScene()";
   pre_compile_code_string="RenderScene()";
   result_var=NULL;
   fun=.projects[0].programs.gp[3][7].functions[8]$$;
   fun_args {
    name="fun_args";
    el_typ=ProgArg;
    el_def=0;
   };
  };
  FunctionCall @[5] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="RenderFullView()";
   pre_compile_code_string="RenderFullView()";
   result_var=NULL;
   fun=.projects[0].programs.gp[3][7].functions[9]$$;
   fun_args {
    name="fun_args";
    el_typ=ProgArg;
    el_def=0;
   };
  };
  FunctionCall @[6] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="RenderFovea()";
   pre_compile_code_string="RenderFovea()";
   result_var=NULL;
   fun=.projects[0].programs.gp[3][7].functions[10]$$;
   fun_args {
    name="fun_args";
    el_typ=ProgArg;
    el_def=0;
   };
  };
  FunctionCall @[7] {
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string="LoadAudWord()";
   pre_compile_code_string="LoadAudWord()";
   result_var=NULL;
   fun=.projects[0].programs.gp[3][7].functions[19]$$;
   fun_args {
    name="fun_args";
    el_typ=ProgArg;
    el_def=0;
   };
  };
 };
 step_prog=NULL;
 step_n=1;
};

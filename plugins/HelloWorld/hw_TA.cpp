// File Automatically Generated by MakeTA
// DO NOT EDIT


#include "ta_type.h"
#include "ta_type_constr.h"
#include "css_basic_types.h"
#include "css_c_ptr_types.h"
#include "ta_css.h"
#include "hw.h"
#include "hw_TA_type.h"
#include "hw_TA_inst.h"


// Types

TypeDef TA_void("void", 1, 0, 0, 0, 1, 0);
TypeDef TA_char("char", 1, 0, 0, 0, 1, sizeof(char));
TypeDef TA_signed_char("signed_char", 1, 0, 0, 0, 1, sizeof(signed char));
TypeDef TA_unsigned_char("unsigned_char", 1, 0, 0, 0, 1, sizeof(unsigned char));
TypeDef TA_short("short", 1, 0, 0, 0, 1, sizeof(short));
TypeDef TA_signed_short("signed_short", 1, 0, 0, 0, 1, sizeof(signed short));
TypeDef TA_short_int("short_int", 1, 0, 0, 0, 1, sizeof(short int));
TypeDef TA_signed_short_int("signed_short_int", 1, 0, 0, 0, 1, sizeof(signed short int));
TypeDef TA_unsigned_short("unsigned_short", 1, 0, 0, 0, 1, sizeof(unsigned short));
TypeDef TA_unsigned_short_int("unsigned_short_int", 1, 0, 0, 0, 1, sizeof(unsigned short int));
TypeDef TA_int("int", 1, 0, 0, 0, 1, sizeof(int));
TypeDef TA_signed_int("signed_int", 1, 0, 0, 0, 1, sizeof(signed int));
TypeDef TA_signed("signed", 1, 0, 0, 0, 1, sizeof(signed));
TypeDef TA_unsigned_int("unsigned_int", 1, 0, 0, 0, 1, sizeof(unsigned int));
TypeDef TA_unsigned("unsigned", 1, 0, 0, 0, 1, sizeof(unsigned));
TypeDef TA_int64_t("int64_t", 1, 0, 0, 0, 1, sizeof(int64_t));
TypeDef TA_long_long("long_long", 1, 0, 0, 0, 1, sizeof(long long));
TypeDef TA_signed_long_long("signed_long_long", 1, 0, 0, 0, 1, sizeof(signed long long));
TypeDef TA_uint64_t("uint64_t", 1, 0, 0, 0, 1, sizeof(uint64_t));
TypeDef TA_unsigned_long_long("unsigned_long_long", 1, 0, 0, 0, 1, sizeof(unsigned long long));
TypeDef TA_long("long", 1, 0, 0, 0, 1, sizeof(long));
TypeDef TA_signed_long("signed_long", 1, 0, 0, 0, 1, sizeof(signed long));
TypeDef TA_long_int("long_int", 1, 0, 0, 0, 1, sizeof(long int));
TypeDef TA_signed_long_int("signed_long_int", 1, 0, 0, 0, 1, sizeof(signed long int));
TypeDef TA_unsigned_long("unsigned_long", 1, 0, 0, 0, 1, sizeof(unsigned long));
TypeDef TA_unsigned_long_int("unsigned_long_int", 1, 0, 0, 0, 1, sizeof(unsigned long int));
TypeDef TA_intptr_t("intptr_t", 1, 0, 0, 0, 1, sizeof(intptr_t));
TypeDef TA_uintptr_t("uintptr_t", 1, 0, 0, 0, 1, sizeof(uintptr_t));
TypeDef TA_float("float", 1, 0, 0, 0, 1, sizeof(float));
TypeDef TA_double("double", 1, 0, 0, 0, 1, sizeof(double));
TypeDef TA_bool("bool", 1, 0, 0, 0, 1, sizeof(bool));
TypeDef TA_const("const", 1, 0, 0, 1, 1, 0);
TypeDef TA_enum("enum", 1, 0, 0, 1, 1, 0);
TypeDef TA_struct("struct", 1, 0, 0, 1, 1, 0);
TypeDef TA_union("union", 1, 0, 0, 1, 1, 0);
TypeDef TA_class("class", 1, 0, 0, 1, 1, 0);
TypeDef TA_template("template", 1, 0, 0, 1, 1, 0);
TypeDef TA_templ_inst("templ_inst", 1, 0, 0, 1, 1, 0);
TypeDef TA_ta_array("ta_array", 1, 0, 0, 1, 1, 0);
TypeDef TA_taBase("taBase", " Base type for all type-aware classes", 
	"", "", "", sizeof(taBase), (void**)0, 0, 0, 0,1);
TypeDef TA_taRegFun("taRegFun", 1, 0, 0, 0, 1, 0);
TypeDef TA_TypeDef("TypeDef", 1, 0, 0, 0, 1, sizeof(TypeDef));
TypeDef TA_MemberDef("MemberDef", 1, 0, 0, 0, 1, sizeof(MemberDef));
TypeDef TA_MethodDef("MethodDef", 1, 0, 0, 0, 1, sizeof(MethodDef));
TypeDef TA_taString("taString", " StrRep - internal String representation Note: this structure is allocated via malloc(), so there must be no constructor/destructor.  reference counted string", 
	"", "", "", sizeof(taString), (void**)0, 1, 0, 0,1);
TypeDef TA_Variant("Variant", " flexible value m_type that can hold many different types of content", 
	"", "", "", sizeof(Variant), (void**)0, 1, 0, 0,1);
TypeDef TA_void_ptr("void_ptr", 1, 1, 0, 1, 1, 0);
TypeDef TA_HelloPlugin("HelloPlugin", " ", 
	"NO_INSTANCE ", "MULT_INHERIT NO_INSTANCE ", "", sizeof(HelloPlugin), (void**)0, 1, 0, 0,1);
TypeDef TA_const_taString_ref("const_taString_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taString("const_taString", 1, 0, 0, 0, 1, 0);
TypeDef TA_taStrRep_ptr("taStrRep_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taStrRep("taStrRep", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_char_ptr("const_char_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_char("const_char", 1, 0, 0, 0, 1, sizeof(const char));
TypeDef TA_char_ptr("char_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_uint("uint", 1, 0, 0, 0, 1, 0);
TypeDef TA_bool_ptr("bool_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_ushort("ushort", 1, 0, 0, 0, 1, 0);
TypeDef TA_taString_ref("taString_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_void_ptr("const_void_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_void("const_void", 1, 0, 0, 0, 1, 0);
TypeDef TA_ostream_ref("ostream_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ostream("ostream", 1, 0, 0, 0, 1, 0);
TypeDef TA_istream_ref("istream_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_istream("istream", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Variant_ref("const_Variant_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_Variant("const_Variant", 1, 0, 0, 0, 1, 0);
TypeDef TA_byte("byte", 1, 0, 0, 0, 1, 0);
TypeDef TA_taBase_ptr("taBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taMatrix_ptr("taMatrix_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taMatrix("taMatrix", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taBase_ptr("const_taBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taBase("const_taBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taMatrix_ptr("const_taMatrix_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taMatrix("const_taMatrix", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_QVariant_ref("const_QVariant_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_QVariant("const_QVariant", 1, 0, 0, 0, 1, 0);
TypeDef TA_QVariant("QVariant", 1, 0, 0, 0, 1, 0);
TypeDef TA_TypeDef_ptr_ref("TypeDef_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_TypeDef_ptr("TypeDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_void_ptr_ref("void_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_int_ref("int_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_QObject("QObject", 1, 0, 0, 0, 1, 0);
TypeDef TA_IPlugin("IPlugin", 1, 0, 0, 0, 1, 0);

// Instances

  static cssEl* cssElCFun_taString_zero_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->zero());
    return rval;}
  static cssEl* cssElCFun_taString_one_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->one());
    return rval;}
  static cssEl* cssElCFun_taString_CharToCppLiteral_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->CharToCppLiteral((char)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_StringToCppLiteral_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->StringToCppLiteral(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taString_setRep_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->setRep((taStrRep*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_length_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->length());
    return rval;}
  static cssEl* cssElCFun_taString_empty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->empty());
    return rval;}
  static cssEl* cssElCFun_taString_nonempty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->nonempty());
    return rval;}
  static cssEl* cssElCFun_taString_isInt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->isInt());
    return rval;}
  static cssEl* cssElCFun_taString_allocation_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->allocation());
    return rval;}
  static cssEl* cssElCFun_taString_assertLength_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->assertLength());
    return rval;}
  static cssEl* cssElCFun_taString_chars_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((taString*)ths)->chars(), 1);
    return rval;}
  static cssEl* cssElCFun_taString_chars_ptr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((taString*)ths)->chars_ptr(), 1);
    return rval;}
  static cssEl* cssElCFun_taString_makeUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->makeUnique((uint)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_pack_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->pack();
    return rval;}
  static cssEl* cssElCFun_taString_toBool_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->toBool());
    return rval;}
  static cssEl* cssElCFun_taString_toChar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taString*)ths)->toChar());
    return rval;}
  static cssEl* cssElCFun_taString_toShort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taString*)ths)->toShort());}
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->toShort((bool*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->toShort((bool*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_toUShort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taString*)ths)->toUShort());}
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->toUShort((bool*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->toUShort((bool*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_toInt_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taString*)ths)->toInt());}
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->toInt((bool*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->toInt((bool*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_toUInt_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taString*)ths)->toUInt());}
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->toUInt((bool*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->toUInt((bool*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_toInt64_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssVariant(((taString*)ths)->toInt64());}
    if(na == 1) {
      rval=new cssVariant(((taString*)ths)->toInt64((bool*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssVariant(((taString*)ths)->toInt64((bool*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_toUInt64_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssVariant(((taString*)ths)->toUInt64());}
    if(na == 1) {
      rval=new cssVariant(((taString*)ths)->toUInt64((bool*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssVariant(((taString*)ths)->toUInt64((bool*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_toFloat_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((taString*)ths)->toFloat());}
    if(na == 1) {
      rval=new cssReal((double)((taString*)ths)->toFloat((bool*)(void*)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taString_toDouble_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((taString*)ths)->toDouble());}
    if(na == 1) {
      rval=new cssReal((double)((taString*)ths)->toDouble((bool*)(void*)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taString_convert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->convert((double)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->convert((double)*arg[1], (const char*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_HexToInt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->HexToInt());
    return rval;}
  static cssEl* cssElCFun_taString_set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->set((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taString_cat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->cat((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_prepend_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->prepend((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_index_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->index((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->index((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_contains_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->contains((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_matches_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssBool(((taString*)ths)->matches((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taString*)ths)->matches((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_endsWith_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->endsWith((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_startsWith_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->startsWith((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_freq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->freq((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_at_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->at((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taString_before_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->before((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->before((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_through_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->through((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->through((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_from_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->from((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->from((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_after_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->after((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->after((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_del_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->del((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taString_remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taString*)ths)->remove((const char*)*arg[1]);}
    if(na == 2) {
      ((taString*)ths)->remove((const char*)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_taString_gsub_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->gsub((const char*)*arg[1], (const char*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taString_reverse_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->reverse());
    return rval;}
  static cssEl* cssElCFun_taString_upcase_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->upcase());
    return rval;}
  static cssEl* cssElCFun_taString_downcase_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->downcase());
    return rval;}
  static cssEl* cssElCFun_taString_capitalize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->capitalize());
    return rval;}
  static cssEl* cssElCFun_taString_truncate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->truncate((uint)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_elem_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taString*)ths)->elem((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_firstchar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taString*)ths)->firstchar());
    return rval;}
  static cssEl* cssElCFun_taString_lastchar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taString*)ths)->lastchar());
    return rval;}
  static cssEl* cssElCFun_taString_error_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->error((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Variant_addrData_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Variant*)ths)->addrData(), 1, &TA_const_void);
    return rval;}
  static cssEl* cssElCFun_Variant_isAtomic_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isAtomic());
    return rval;}
  static cssEl* cssElCFun_Variant_isDefault_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isDefault());
    return rval;}
  static cssEl* cssElCFun_Variant_isInvalid_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isInvalid());
    return rval;}
  static cssEl* cssElCFun_Variant_isNull_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isNull());
    return rval;}
  static cssEl* cssElCFun_Variant_isNumeric_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isNumeric());
    return rval;}
  static cssEl* cssElCFun_Variant_isNumericStrict_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isNumericStrict());
    return rval;}
  static cssEl* cssElCFun_Variant_isStringType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isStringType());
    return rval;}
  static cssEl* cssElCFun_Variant_isPtrType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isPtrType());
    return rval;}
  static cssEl* cssElCFun_Variant_isBaseType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isBaseType());
    return rval;}
  static cssEl* cssElCFun_Variant_isMatrixType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isMatrixType());
    return rval;}
  static cssEl* cssElCFun_Variant_type_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->type();
    return rval;}
  static cssEl* cssElCFun_Variant_setType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setType((Variant::VarType)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Variant_getTypeAsString_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Variant*)ths)->getTypeAsString());
    return rval;}
  static cssEl* cssElCFun_Variant_save_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((Variant*)ths)->save(refarg_0);
    return rval;}
  static cssEl* cssElCFun_Variant_load_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)*arg[1];
    ((Variant*)ths)->load(refarg_0);
    return rval;}
  static cssEl* cssElCFun_Variant_setInvalid_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setInvalid();
    return rval;}
  static cssEl* cssElCFun_Variant_setVariant_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setVariant(arg[1]->GetVar());
    return rval;}
  static cssEl* cssElCFun_Variant_setVariantData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setVariantData(arg[1]->GetVar());
    return rval;}
  static cssEl* cssElCFun_Variant_setBool_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setBool((bool)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setBool((bool)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setByte_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setByte((byte)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setByte((byte)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setInt_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setInt((int)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setInt((int)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setUInt_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setUInt((uint)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setUInt((uint)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setInt64_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setInt64((int64_t)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setInt64((int64_t)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setUInt64_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setUInt64((uint64_t)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setUInt64((uint64_t)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setIntPtr_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setIntPtr((intptr_t)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setIntPtr((intptr_t)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setFloat_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setFloat((float)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setFloat((float)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setDouble_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setDouble((double)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setDouble((double)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setChar_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setChar((char)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setChar((char)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setPtr_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setPtr((void*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Variant_setString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setString(arg[1]->GetStr());}
    if(na == 2) {
      ((Variant*)ths)->setString(arg[1]->GetStr(), (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setCString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setCString((const char*)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setCString((const char*)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setBase_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setBase((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Variant_setMatrix_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setMatrix((taMatrix*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Variant_updateFromString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->updateFromString(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_Variant_toBool_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->toBool());
    return rval;}
  static cssEl* cssElCFun_Variant_toByte_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->toByte());
    return rval;}
  static cssEl* cssElCFun_Variant_toInt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->toInt());
    return rval;}
  static cssEl* cssElCFun_Variant_toUInt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->toUInt());
    return rval;}
  static cssEl* cssElCFun_Variant_toInt64_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((Variant*)ths)->toInt64());
    return rval;}
  static cssEl* cssElCFun_Variant_toUInt64_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((Variant*)ths)->toUInt64());
    return rval;}
  static cssEl* cssElCFun_Variant_toFloat_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Variant*)ths)->toFloat());
    return rval;}
  static cssEl* cssElCFun_Variant_toDouble_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Variant*)ths)->toDouble());
    return rval;}
  static cssEl* cssElCFun_Variant_toChar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((Variant*)ths)->toChar());
    return rval;}
  static cssEl* cssElCFun_Variant_toPtr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Variant*)ths)->toPtr(), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_Variant_toString_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Variant*)ths)->toString());
    return rval;}
  static cssEl* cssElCFun_Variant_toBase_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Variant*)ths)->toBase(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_Variant_toMatrix_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Variant*)ths)->toMatrix(), 1, &TA_taMatrix);
    return rval;}
  static cssEl* cssElCFun_Variant_toCssLiteral_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Variant*)ths)->toCssLiteral());
    return rval;}
  static cssEl* cssElCFun_Variant_eqVariant_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqVariant(arg[1]->GetVar()));
    return rval;}
  static cssEl* cssElCFun_Variant_eqBool_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqBool((bool)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqByte_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqByte((byte)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqInt((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqUInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqUInt((uint)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqInt64_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqInt64((int64_t)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqUInt64_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqUInt64((uint64_t)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqIntPtr_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqIntPtr((intptr_t)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqFloat((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqDouble_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqDouble((double)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqChar_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqChar((char)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqString(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_Variant_eqCString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqCString((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqPtr_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqPtr((const void*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqBase_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqBase((const taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqMatrix_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqMatrix((const taMatrix*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpVariant_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpVariant(arg[1]->GetVar()));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpBool_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpBool((bool)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpByte_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpByte((byte)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpInt((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpUInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpUInt((uint)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpInt64_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpInt64((int64_t)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpUInt64_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpUInt64((uint64_t)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpIntPtr_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpIntPtr((intptr_t)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpFloat((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpDouble_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpDouble((double)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpChar_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpChar((char)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpString(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpCString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpCString((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpPtr_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpPtr((const void*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpBase_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpBase((const taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpMatrix_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpMatrix((const taMatrix*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_setQVariant_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setQVariant(*(QVariant*)arg[1]->GetVoidPtrOfType(&TA_QVariant));
    return rval;}
  static cssEl* cssElCFun_Variant_toQVariant_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->toQVariant();
    return rval;}
  static cssEl* cssElCFun_Variant_GetRepInfo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TypeDef* refarg_0=(TypeDef*)*arg[1];    void* refarg_1=(void*)(void*)*arg[2];
    ((Variant*)ths)->GetRepInfo(refarg_0, refarg_1);
    *arg[1]=(void*)refarg_0;    *arg[2]=(void*)refarg_1;
    return rval;}
  static cssEl* cssElCFun_Variant_UpdateAfterLoad_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->UpdateAfterLoad();
    return rval;}
  static cssEl* cssElCFun_Variant_ForceType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->ForceType((Variant::VarType)(int)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Variant_Dump_Save_Type_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((Variant*)ths)->Dump_Save_Type(refarg_0);
    return rval;}
  static cssEl* cssElCFun_Variant_Dump_Load_Type_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)*arg[1];    int refarg_1=(int)*arg[2];
    rval=new cssBool(((Variant*)ths)->Dump_Load_Type(refarg_0, refarg_1));
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_HelloPlugin_InitializeTypes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((HelloPlugin*)ths)->InitializeTypes());
    return rval;}
  static cssEl* cssElCFun_HelloPlugin_InitializePlugin_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((HelloPlugin*)ths)->InitializePlugin());
    return rval;}
  static cssEl* cssElCFun_HelloPlugin_Hello_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((HelloPlugin*)ths)->Hello();
    return rval;}

// Type Data

static MethodArgs_data TA_taString_CharToCppLiteral_MethArgs[]={
  {&TA_char,NULL,"c",""},
  NULL};
static MethodArgs_data TA_taString_StringToCppLiteral_MethArgs[]={
  {&TA_const_taString_ref,NULL,"str",""},
  NULL};
static MethodArgs_data TA_taString_setRep_MethArgs[]={
  {&TA_taStrRep_ptr,NULL,"rep_",""},
  NULL};
static MethodArgs_data TA_taString_makeUnique_MethArgs[]={
  {&TA_uint,NULL,"min_new_sz",""},
  NULL};
static MethodArgs_data TA_taString_toShort_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  {&TA_int,NULL,"base"," 10"},
  NULL};
static MethodArgs_data TA_taString_toUShort_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  {&TA_int,NULL,"base"," 10"},
  NULL};
static MethodArgs_data TA_taString_toInt_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  {&TA_int,NULL,"base"," 10"},
  NULL};
static MethodArgs_data TA_taString_toUInt_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  {&TA_int,NULL,"base"," 10"},
  NULL};
static MethodArgs_data TA_taString_toInt64_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  {&TA_int,NULL,"base"," 10"},
  NULL};
static MethodArgs_data TA_taString_toUInt64_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  {&TA_int,NULL,"base"," 10"},
  NULL};
static MethodArgs_data TA_taString_toFloat_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  NULL};
static MethodArgs_data TA_taString_toDouble_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  NULL};
static MethodArgs_data TA_taString_convert_MethArgs[]={
  {&TA_double,NULL,"f",""},
  {&TA_const_char_ptr,NULL,"format"," %lg"},
  NULL};
static MethodArgs_data TA_taString_set_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_cat_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_prepend_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_index_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_contains_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_matches_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"pos"," 0"},
  NULL};
static MethodArgs_data TA_taString_endsWith_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_startsWith_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_freq_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_at_MethArgs[]={
  {&TA_int,NULL,"pos",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_before_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_through_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_from_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_after_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_del_MethArgs[]={
  {&TA_int,NULL,"pos",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_remove_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_gsub_MethArgs[]={
  {&TA_const_char_ptr,NULL,"pat",""},
  {&TA_const_char_ptr,NULL,"repl",""},
  NULL};
static MethodArgs_data TA_taString_truncate_MethArgs[]={
  {&TA_uint,NULL,"new_len",""},
  NULL};
static MethodArgs_data TA_taString_elem_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taString_error_MethArgs[]={
  {&TA_const_char_ptr,NULL,"msg",""},
  NULL};
static MethodDef_data TA_taString_MethodDef[]={
  {&TA_const_taString_ref,NULL,"zero"," '0' occurs so often, we optimize it with a global inst","","",
    0,0,-1,1,(ta_void_fun)(taString::zero),cssElCFun_taString_zero_stub,NULL},
  {&TA_const_taString_ref,NULL,"one"," '1' occurs so often, we optimize it with a global inst","","",
    0,0,-1,1,(ta_void_fun)(taString::one),cssElCFun_taString_one_stub,NULL},
  {&TA_const_taString,NULL,"CharToCppLiteral"," converts a character to a C++ valid literal; can be embedded in a C++ string","","",
    0,1,-1,1,(ta_void_fun)(taString::CharToCppLiteral),cssElCFun_taString_CharToCppLiteral_stub,TA_taString_CharToCppLiteral_MethArgs},
  {&TA_const_taString,NULL,"StringToCppLiteral"," converts a string to a C++ valid literal","","",
    0,1,-1,1,(ta_void_fun)(taString::StringToCppLiteral),cssElCFun_taString_StringToCppLiteral_stub,TA_taString_StringToCppLiteral_MethArgs},
  {&TA_void,NULL,"setRep"," for replacing rep (non-constructor) -- rep_ must be non-null","","",
    0,1,-1,0,NULL,cssElCFun_taString_setRep_stub,TA_taString_setRep_MethArgs},
  {&TA_int,NULL,"length"," how many characters in the string","","",
    0,0,-1,0,NULL,cssElCFun_taString_length_stub,NULL},
  {&TA_bool,NULL,"empty"," true if the string is empty","","",
    0,0,-1,0,NULL,cssElCFun_taString_empty_stub,NULL},
  {&TA_bool,NULL,"nonempty"," true if the string is nonempty","","",
    0,0,-1,0,NULL,cssElCFun_taString_nonempty_stub,NULL},
  {&TA_bool,NULL,"isInt"," true if the string contains a value that can be interpreted as an integer [+-]dd*","","",
    0,0,-1,0,NULL,cssElCFun_taString_isInt_stub,NULL},
  {&TA_int,NULL,"allocation","","","",
    0,0,-1,0,NULL,cssElCFun_taString_allocation_stub,NULL},
  {&TA_int,NULL,"assertLength"," call after manual buffer operations, to set length from null term -- **WARNING** only use on ref==1, and where there is a null term in the buff, and sz is not overflowed","","",
    0,0,-1,0,NULL,cssElCFun_taString_assertLength_stub,NULL},
  {&TA_const_char_ptr,NULL,"chars"," returns null-terminated string DO NOT MODIFY","","",
    0,0,-1,0,NULL,cssElCFun_taString_chars_stub,NULL},
  {&TA_char_ptr,NULL,"chars_ptr"," returns point to the string, for in-place mods -- **this makeUnique() first, so you have a unique instance to overwrite**","","",
    0,0,-1,0,NULL,cssElCFun_taString_chars_ptr_stub,NULL},
  {&TA_void,NULL,"makeUnique"," make sure we are only owner of mrep makeUnique(), but force sz to be at least new_sz","","",
    1,1,-1,0,NULL,cssElCFun_taString_makeUnique_stub,TA_taString_makeUnique_MethArgs},
  {&TA_void,NULL,"pack"," if there is any extra space (above a small threshold), release it","","",
    0,0,-1,0,NULL,cssElCFun_taString_pack_stub,NULL},
  {&TA_bool,NULL,"toBool"," accepts true as starting with t/T, or else 1","","",
    0,0,-1,0,NULL,cssElCFun_taString_toBool_stub,NULL},
  {&TA_char,NULL,"toChar"," if size 1, then that's it, else try heuristics","","",
    0,0,-1,0,NULL,cssElCFun_taString_toChar_stub,NULL},
  {&TA_short,NULL,"toShort","","","",
    0,2,0,0,NULL,cssElCFun_taString_toShort_stub,TA_taString_toShort_MethArgs},
  {&TA_ushort,NULL,"toUShort","","","",
    0,2,0,0,NULL,cssElCFun_taString_toUShort_stub,TA_taString_toUShort_MethArgs},
  {&TA_int,NULL,"toInt","","","",
    0,2,0,0,NULL,cssElCFun_taString_toInt_stub,TA_taString_toInt_MethArgs},
  {&TA_uint,NULL,"toUInt","","","",
    0,2,0,0,NULL,cssElCFun_taString_toUInt_stub,TA_taString_toUInt_MethArgs},
  {&TA_int64_t,NULL,"toInt64","","","",
    0,2,0,0,NULL,cssElCFun_taString_toInt64_stub,TA_taString_toInt64_MethArgs},
  {&TA_uint64_t,NULL,"toUInt64","","","",
    0,2,0,0,NULL,cssElCFun_taString_toUInt64_stub,TA_taString_toUInt64_MethArgs},
  {&TA_float,NULL,"toFloat","","","",
    0,1,0,0,NULL,cssElCFun_taString_toFloat_stub,TA_taString_toFloat_MethArgs},
  {&TA_double,NULL,"toDouble","","","",
    0,1,0,0,NULL,cssElCFun_taString_toDouble_stub,TA_taString_toDouble_MethArgs},
  {&TA_taString_ref,NULL,"convert","","","",
    3,2,1,0,NULL,cssElCFun_taString_convert_stub,TA_taString_convert_MethArgs},
  {&TA_int,NULL,"HexToInt","","","",
    0,0,-1,0,NULL,cssElCFun_taString_HexToInt_stub,NULL},
  {&TA_taString_ref,NULL,"set"," parameterized set -- used in assigns","","",
    0,2,-1,0,NULL,cssElCFun_taString_set_stub,TA_taString_set_MethArgs},
  {&TA_taString_ref,NULL,"cat","","","",
    2,1,-1,0,NULL,cssElCFun_taString_cat_stub,TA_taString_cat_MethArgs},
  {&TA_taString_ref,NULL,"prepend"," add to beginning of string","","",
    2,1,-1,0,NULL,cssElCFun_taString_prepend_stub,TA_taString_prepend_MethArgs},
  {&TA_int,NULL,"index"," return position of target in string or -1 for failure","","",
    2,2,1,0,NULL,cssElCFun_taString_index_stub,TA_taString_index_MethArgs},
  {&TA_bool,NULL,"contains"," return 'true' if target appears anyhere in String return 'true' if target appears anywhere after position pos (or before, if pos is negative) in String","","",
    5,1,-1,0,NULL,cssElCFun_taString_contains_stub,TA_taString_contains_MethArgs},
  {&TA_bool,NULL,"matches"," return 'true' if target appears at position pos in String","","",
    2,2,1,0,NULL,cssElCFun_taString_matches_stub,TA_taString_matches_MethArgs},
  {&TA_bool,NULL,"endsWith"," return 'true' if target is at end of String","","",
    2,1,-1,0,NULL,cssElCFun_taString_endsWith_stub,TA_taString_endsWith_MethArgs},
  {&TA_bool,NULL,"startsWith"," return 'true' if target is at start of String","","",
    2,1,-1,0,NULL,cssElCFun_taString_startsWith_stub,TA_taString_startsWith_MethArgs},
  {&TA_int,NULL,"freq"," return number of occurences of target in String","","",
    2,1,-1,0,NULL,cssElCFun_taString_freq_stub,TA_taString_freq_MethArgs},
  {&TA_taString,NULL,"at"," substring at position for length","","",
    3,2,-1,0,NULL,cssElCFun_taString_at_stub,TA_taString_at_MethArgs},
  {&TA_taString,NULL,"before"," substring before (not including) target string","","",
    3,2,1,0,NULL,cssElCFun_taString_before_stub,TA_taString_before_MethArgs},
  {&TA_taString,NULL,"through"," substring through (including) target string","","",
    3,2,1,0,NULL,cssElCFun_taString_through_stub,TA_taString_through_MethArgs},
  {&TA_taString,NULL,"from"," substring from (including) target string","","",
    3,2,1,0,NULL,cssElCFun_taString_from_stub,TA_taString_from_MethArgs},
  {&TA_taString,NULL,"after"," substring after (not including) target string","","",
    3,2,1,0,NULL,cssElCFun_taString_after_stub,TA_taString_after_MethArgs},
  {&TA_void,NULL,"del"," delete len chars starting at pos","","",
    3,2,-1,0,NULL,cssElCFun_taString_del_stub,TA_taString_del_MethArgs},
  {&TA_void,NULL,"remove"," remove target string from string","","",
    0,2,1,0,NULL,cssElCFun_taString_remove_stub,TA_taString_remove_MethArgs},
  {&TA_int,NULL,"gsub"," global substitution: substitute all occurrences of pat with repl","","",
    2,2,-1,0,NULL,cssElCFun_taString_gsub_stub,TA_taString_gsub_MethArgs},
  {&TA_taString_ref,NULL,"reverse"," reverse order of string","","",
    0,0,-1,0,NULL,cssElCFun_taString_reverse_stub,NULL},
  {&TA_taString_ref,NULL,"upcase"," convert all letters to upper case","","",
    0,0,-1,0,NULL,cssElCFun_taString_upcase_stub,NULL},
  {&TA_taString_ref,NULL,"downcase"," convert all letters to lower case","","",
    0,0,-1,0,NULL,cssElCFun_taString_downcase_stub,NULL},
  {&TA_taString_ref,NULL,"capitalize"," capitalize the first letter of each word","","",
    0,0,-1,0,NULL,cssElCFun_taString_capitalize_stub,NULL},
  {&TA_void,NULL,"truncate"," shortens the string to new_len (if less than curr)","","",
    0,1,-1,0,NULL,cssElCFun_taString_truncate_stub,TA_taString_truncate_MethArgs},
  {&TA_char,NULL,"elem"," get the character at index i","","",
    0,1,-1,0,NULL,cssElCFun_taString_elem_stub,TA_taString_elem_MethArgs},
  {&TA_char,NULL,"firstchar"," get the first character","","",
    0,0,-1,0,NULL,cssElCFun_taString_firstchar_stub,NULL},
  {&TA_char,NULL,"lastchar"," get the last character","","",
    0,0,-1,0,NULL,cssElCFun_taString_lastchar_stub,NULL},
  {&TA_void,NULL,"error"," obs int OK() const;	// check if the string is allocated properly, etc.","","",
    0,1,-1,0,NULL,cssElCFun_taString_error_stub,TA_taString_error_MethArgs},
  NULL};
static EnumDef_data TA_Variant_VarType[]={
  {"T_Invalid"," ","LABEL_Invalid ",0},
  {"T_Bool"," ","LABEL_Bool ",1},
  {"T_Int"," ","LABEL_Int ",2},
  {"T_UInt"," ","LABEL_UInt ",3},
  {"T_Int64"," ","LABEL_Int64 ",4},
  {"T_UInt64"," ","LABEL_UInt64 ",5},
  {"T_Double"," ","LABEL_Real ",6},
  {"T_Char"," ","LABEL_Char ",7},
  {"T_String"," ","LABEL_String ",9},
  {"T_Ptr"," void*","LABEL_Ptr ",10},
  {"T_Base"," taBase ref counted","LABEL_taBase ",11},
  {"T_Matrix"," taMatrix ref counted","LABEL_taMatrix ",12},
  NULL};
static MethodArgs_data TA_Variant_setType_MethArgs[]={
  {NULL,"::VarType","value",""},
  NULL};
static MethodArgs_data TA_Variant_save_MethArgs[]={
  {&TA_ostream_ref,NULL,"s",""},
  NULL};
static MethodArgs_data TA_Variant_load_MethArgs[]={
  {&TA_istream_ref,NULL,"s",""},
  NULL};
static MethodArgs_data TA_Variant_setVariant_MethArgs[]={
  {&TA_const_Variant_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_Variant_setVariantData_MethArgs[]={
  {&TA_const_Variant_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_Variant_setBool_MethArgs[]={
  {&TA_bool,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setByte_MethArgs[]={
  {&TA_byte,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setInt_MethArgs[]={
  {&TA_int,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setUInt_MethArgs[]={
  {&TA_uint,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setInt64_MethArgs[]={
  {&TA_int64_t,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setUInt64_MethArgs[]={
  {&TA_uint64_t,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setIntPtr_MethArgs[]={
  {&TA_intptr_t,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setFloat_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setDouble_MethArgs[]={
  {&TA_double,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setChar_MethArgs[]={
  {&TA_char,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setPtr_MethArgs[]={
  {&TA_void_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_setString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"cp",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setCString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setBase_MethArgs[]={
  {&TA_taBase_ptr,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_Variant_setMatrix_MethArgs[]={
  {&TA_taMatrix_ptr,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_Variant_updateFromString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqVariant_MethArgs[]={
  {&TA_const_Variant_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqBool_MethArgs[]={
  {&TA_bool,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqByte_MethArgs[]={
  {&TA_byte,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqInt_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqUInt_MethArgs[]={
  {&TA_uint,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqInt64_MethArgs[]={
  {&TA_int64_t,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqUInt64_MethArgs[]={
  {&TA_uint64_t,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqIntPtr_MethArgs[]={
  {&TA_intptr_t,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqFloat_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqDouble_MethArgs[]={
  {&TA_double,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqChar_MethArgs[]={
  {&TA_char,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqCString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqPtr_MethArgs[]={
  {&TA_const_void_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqBase_MethArgs[]={
  {&TA_const_taBase_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqMatrix_MethArgs[]={
  {&TA_const_taMatrix_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpVariant_MethArgs[]={
  {&TA_const_Variant_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpBool_MethArgs[]={
  {&TA_bool,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpByte_MethArgs[]={
  {&TA_byte,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpInt_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpUInt_MethArgs[]={
  {&TA_uint,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpInt64_MethArgs[]={
  {&TA_int64_t,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpUInt64_MethArgs[]={
  {&TA_uint64_t,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpIntPtr_MethArgs[]={
  {&TA_intptr_t,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpFloat_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpDouble_MethArgs[]={
  {&TA_double,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpChar_MethArgs[]={
  {&TA_char,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpCString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpPtr_MethArgs[]={
  {&TA_const_void_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpBase_MethArgs[]={
  {&TA_const_taBase_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpMatrix_MethArgs[]={
  {&TA_const_taMatrix_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_setQVariant_MethArgs[]={
  {&TA_const_QVariant_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_Variant_GetRepInfo_MethArgs[]={
  {&TA_TypeDef_ptr_ref,NULL,"typ",""},
  {&TA_void_ptr_ref,NULL,"data",""},
  NULL};
static MethodArgs_data TA_Variant_ForceType_MethArgs[]={
  {NULL,"::VarType","vt",""},
  {&TA_bool,NULL,"null",""},
  NULL};
static MethodArgs_data TA_Variant_Dump_Save_Type_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_Variant_Dump_Load_Type_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_int_ref,NULL,"last_char",""},
  NULL};
static MethodDef_data TA_Variant_MethodDef[]={
  {&TA_const_void_ptr,NULL,"addrData"," this is for low-level routines","","",
    0,0,-1,0,NULL,cssElCFun_Variant_addrData_stub,NULL},
  {&TA_bool,NULL,"isAtomic"," 'true' for non-ptr types (includes Invalid)","","",
    0,0,-1,0,NULL,cssElCFun_Variant_isAtomic_stub,NULL},
  {&TA_bool,NULL,"isDefault"," returns 'true' if contains the default value for the type (null is ignored)","","",
    0,0,-1,0,NULL,cssElCFun_Variant_isDefault_stub,NULL},
  {&TA_bool,NULL,"isInvalid","","","",
    0,0,-1,0,NULL,cssElCFun_Variant_isInvalid_stub,NULL},
  {&TA_bool,NULL,"isNull"," 'true' if the value is null","","",
    0,0,-1,0,NULL,cssElCFun_Variant_isNull_stub,NULL},
  {&TA_bool,NULL,"isNumeric"," 'true' if NumericStrict, or valid numeric string","","",
    0,0,-1,0,NULL,cssElCFun_Variant_isNumeric_stub,NULL},
  {&TA_bool,NULL,"isNumericStrict"," 'true' if an int-ish, float, or char type","","",
    0,0,-1,0,NULL,cssElCFun_Variant_isNumericStrict_stub,NULL},
  {&TA_bool,NULL,"isStringType"," 'true' if a char or String","","",
    0,0,-1,0,NULL,cssElCFun_Variant_isStringType_stub,NULL},
  {&TA_bool,NULL,"isPtrType"," 'true' if the value is a void*, taBase*, or taMatrix*","","",
    0,0,-1,0,NULL,cssElCFun_Variant_isPtrType_stub,NULL},
  {&TA_bool,NULL,"isBaseType"," 'true' if the value is a taBase* or taMatrix*","","",
    0,0,-1,0,NULL,cssElCFun_Variant_isBaseType_stub,NULL},
  {&TA_bool,NULL,"isMatrixType"," 'true' if the value is a taMatrix*, BUT could be NULL","","",
    0,0,-1,0,NULL,cssElCFun_Variant_isMatrixType_stub,NULL},
  {NULL,"::VarType","type"," ","","",
    0,0,-1,0,NULL,cssElCFun_Variant_type_stub,NULL},
  {&TA_void,NULL,"setType"," force it to be given type, if changed, set to default value","","",
    0,1,-1,0,NULL,cssElCFun_Variant_setType_stub,TA_Variant_setType_MethArgs},
  {&TA_taString,NULL,"getTypeAsString"," for debugging, get variant type as a string","","",
    0,0,-1,0,NULL,cssElCFun_Variant_getTypeAsString_stub,NULL},
  {&TA_void,NULL,"save"," streams out using << for the type","","",
    0,1,-1,0,NULL,cssElCFun_Variant_save_stub,TA_Variant_save_MethArgs},
  {&TA_void,NULL,"load"," streams in as a string, use toXxx if it is of another type","","",
    0,1,-1,0,NULL,cssElCFun_Variant_load_stub,TA_Variant_load_MethArgs},
  {&TA_void,NULL,"setInvalid"," invalid/null","","",
    0,0,-1,0,NULL,cssElCFun_Variant_setInvalid_stub,NULL},
  {&TA_void,NULL,"setVariant"," basically a copy","","",
    0,1,-1,0,NULL,cssElCFun_Variant_setVariant_stub,TA_Variant_setVariant_MethArgs},
  {&TA_void,NULL,"setVariantData"," preserve target type, only copy data","","",
    0,1,-1,0,NULL,cssElCFun_Variant_setVariantData_stub,TA_Variant_setVariantData_MethArgs},
  {&TA_void,NULL,"setBool","","","",
    0,2,1,0,NULL,cssElCFun_Variant_setBool_stub,TA_Variant_setBool_MethArgs},
  {&TA_void,NULL,"setByte","","","",
    0,2,1,0,NULL,cssElCFun_Variant_setByte_stub,TA_Variant_setByte_MethArgs},
  {&TA_void,NULL,"setInt","","","",
    0,2,1,0,NULL,cssElCFun_Variant_setInt_stub,TA_Variant_setInt_MethArgs},
  {&TA_void,NULL,"setUInt","","","",
    0,2,1,0,NULL,cssElCFun_Variant_setUInt_stub,TA_Variant_setUInt_MethArgs},
  {&TA_void,NULL,"setInt64","","","",
    0,2,1,0,NULL,cssElCFun_Variant_setInt64_stub,TA_Variant_setInt64_MethArgs},
  {&TA_void,NULL,"setUInt64","","","",
    0,2,1,0,NULL,cssElCFun_Variant_setUInt64_stub,TA_Variant_setUInt64_MethArgs},
  {&TA_void,NULL,"setIntPtr","","","",
    0,2,1,0,NULL,cssElCFun_Variant_setIntPtr_stub,TA_Variant_setIntPtr_MethArgs},
  {&TA_void,NULL,"setFloat","","","",
    0,2,1,0,NULL,cssElCFun_Variant_setFloat_stub,TA_Variant_setFloat_MethArgs},
  {&TA_void,NULL,"setDouble","","","",
    0,2,1,0,NULL,cssElCFun_Variant_setDouble_stub,TA_Variant_setDouble_MethArgs},
  {&TA_void,NULL,"setChar","","","",
    0,2,1,0,NULL,cssElCFun_Variant_setChar_stub,TA_Variant_setChar_MethArgs},
  {&TA_void,NULL,"setPtr","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_setPtr_stub,TA_Variant_setPtr_MethArgs},
  {&TA_void,NULL,"setString"," handles setting of a string ","","",
    0,2,1,0,NULL,cssElCFun_Variant_setString_stub,TA_Variant_setString_MethArgs},
  {&TA_void,NULL,"setCString","","","",
    0,2,1,0,NULL,cssElCFun_Variant_setCString_stub,TA_Variant_setCString_MethArgs},
  {&TA_void,NULL,"setBase"," handles setting of a taBase","","",
    0,1,-1,0,NULL,cssElCFun_Variant_setBase_stub,TA_Variant_setBase_MethArgs},
  {&TA_void,NULL,"setMatrix"," handles setting of a matrix","","",
    0,1,-1,0,NULL,cssElCFun_Variant_setMatrix_stub,TA_Variant_setMatrix_MethArgs},
  {&TA_void,NULL,"updateFromString"," set value from string, but keep current type","","",
    0,1,-1,0,NULL,cssElCFun_Variant_updateFromString_stub,TA_Variant_updateFromString_MethArgs},
  {&TA_bool,NULL,"toBool","","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toBool_stub,NULL},
  {&TA_byte,NULL,"toByte","","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toByte_stub,NULL},
  {&TA_int,NULL,"toInt","","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toInt_stub,NULL},
  {&TA_uint,NULL,"toUInt","","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toUInt_stub,NULL},
  {&TA_int64_t,NULL,"toInt64","","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toInt64_stub,NULL},
  {&TA_uint64_t,NULL,"toUInt64"," ","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toUInt64_stub,NULL},
  {&TA_float,NULL,"toFloat","","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toFloat_stub,NULL},
  {&TA_double,NULL,"toDouble","","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toDouble_stub,NULL},
  {&TA_char,NULL,"toChar","","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toChar_stub,NULL},
  {&TA_void_ptr,NULL,"toPtr"," must be a void*, Base, or Matrix, otherwise returns NULL","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toPtr_stub,NULL},
  {&TA_taString,NULL,"toString","","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toString_stub,NULL},
  {&TA_taBase_ptr,NULL,"toBase"," must be a Base or Matrix, otherwise returns NULL","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toBase_stub,NULL},
  {&TA_taMatrix_ptr,NULL,"toMatrix"," must be a Matrix, otherwise returns NULL","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toMatrix_stub,NULL},
  {&TA_const_taString,NULL,"toCssLiteral"," to a form suitable for initializing a Css variable, ex. quoted strings, U suffix for unsigned, path for taBase variable, etc.","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toCssLiteral_stub,NULL},
  {&TA_bool,NULL,"eqVariant"," value equality, using fairly relaxed type rules; Invalid never == anything","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqVariant_stub,TA_Variant_eqVariant_MethArgs},
  {&TA_bool,NULL,"eqBool","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqBool_stub,TA_Variant_eqBool_MethArgs},
  {&TA_bool,NULL,"eqByte","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqByte_stub,TA_Variant_eqByte_MethArgs},
  {&TA_bool,NULL,"eqInt","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqInt_stub,TA_Variant_eqInt_MethArgs},
  {&TA_bool,NULL,"eqUInt","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqUInt_stub,TA_Variant_eqUInt_MethArgs},
  {&TA_bool,NULL,"eqInt64","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqInt64_stub,TA_Variant_eqInt64_MethArgs},
  {&TA_bool,NULL,"eqUInt64","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqUInt64_stub,TA_Variant_eqUInt64_MethArgs},
  {&TA_bool,NULL,"eqIntPtr","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqIntPtr_stub,TA_Variant_eqIntPtr_MethArgs},
  {&TA_bool,NULL,"eqFloat","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqFloat_stub,TA_Variant_eqFloat_MethArgs},
  {&TA_bool,NULL,"eqDouble","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqDouble_stub,TA_Variant_eqDouble_MethArgs},
  {&TA_bool,NULL,"eqChar","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqChar_stub,TA_Variant_eqChar_MethArgs},
  {&TA_bool,NULL,"eqString"," handles eqting of a string ","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqString_stub,TA_Variant_eqString_MethArgs},
  {&TA_bool,NULL,"eqCString","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqCString_stub,TA_Variant_eqCString_MethArgs},
  {&TA_bool,NULL,"eqPtr","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqPtr_stub,TA_Variant_eqPtr_MethArgs},
  {&TA_bool,NULL,"eqBase","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqBase_stub,TA_Variant_eqBase_MethArgs},
  {&TA_bool,NULL,"eqMatrix"," comparison operations, < -ve, == 0, > +ve","","",
    0,1,-1,0,NULL,cssElCFun_Variant_eqMatrix_stub,TA_Variant_eqMatrix_MethArgs},
  {&TA_int,NULL,"cmpVariant"," value compare, using fairly relaxed type rules; Invalid never == anything","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpVariant_stub,TA_Variant_cmpVariant_MethArgs},
  {&TA_int,NULL,"cmpBool","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpBool_stub,TA_Variant_cmpBool_MethArgs},
  {&TA_int,NULL,"cmpByte","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpByte_stub,TA_Variant_cmpByte_MethArgs},
  {&TA_int,NULL,"cmpInt","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpInt_stub,TA_Variant_cmpInt_MethArgs},
  {&TA_int,NULL,"cmpUInt","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpUInt_stub,TA_Variant_cmpUInt_MethArgs},
  {&TA_int,NULL,"cmpInt64","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpInt64_stub,TA_Variant_cmpInt64_MethArgs},
  {&TA_int,NULL,"cmpUInt64","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpUInt64_stub,TA_Variant_cmpUInt64_MethArgs},
  {&TA_int,NULL,"cmpIntPtr","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpIntPtr_stub,TA_Variant_cmpIntPtr_MethArgs},
  {&TA_int,NULL,"cmpFloat","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpFloat_stub,TA_Variant_cmpFloat_MethArgs},
  {&TA_int,NULL,"cmpDouble","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpDouble_stub,TA_Variant_cmpDouble_MethArgs},
  {&TA_int,NULL,"cmpChar","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpChar_stub,TA_Variant_cmpChar_MethArgs},
  {&TA_int,NULL,"cmpString"," handles cmpting of a string ","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpString_stub,TA_Variant_cmpString_MethArgs},
  {&TA_int,NULL,"cmpCString","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpCString_stub,TA_Variant_cmpCString_MethArgs},
  {&TA_int,NULL,"cmpPtr","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpPtr_stub,TA_Variant_cmpPtr_MethArgs},
  {&TA_int,NULL,"cmpBase","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpBase_stub,TA_Variant_cmpBase_MethArgs},
  {&TA_int,NULL,"cmpMatrix"," TODO bool	canCast(VarType new_type);","","",
    0,1,-1,0,NULL,cssElCFun_Variant_cmpMatrix_stub,TA_Variant_cmpMatrix_MethArgs},
  {&TA_void,NULL,"setQVariant","","","",
    0,1,-1,0,NULL,cssElCFun_Variant_setQVariant_stub,TA_Variant_setQVariant_MethArgs},
  {&TA_QVariant,NULL,"toQVariant","","","",
    0,0,-1,0,NULL,cssElCFun_Variant_toQVariant_stub,NULL},
  {&TA_void,NULL,"GetRepInfo"," current typedef, and pointer to the data","","",
    0,2,-1,0,NULL,cssElCFun_Variant_GetRepInfo_stub,TA_Variant_GetRepInfo_MethArgs},
  {&TA_void,NULL,"UpdateAfterLoad"," called after internal modifications, to reassert correctness of null etc.","","",
    0,0,-1,0,NULL,cssElCFun_Variant_UpdateAfterLoad_stub,NULL},
  {&TA_void,NULL,"ForceType"," called by streaming system to force the type to be indicated kind","","",
    0,2,-1,0,NULL,cssElCFun_Variant_ForceType_stub,TA_Variant_ForceType_MethArgs},
  {&TA_void,NULL,"Dump_Save_Type"," dumps type and null ","","",
    0,1,-1,0,NULL,cssElCFun_Variant_Dump_Save_Type_stub,TA_Variant_Dump_Save_Type_MethArgs},
  {&TA_bool,NULL,"Dump_Load_Type"," loads type and null, using taMisc:: strm routines; calls ForceType; returns 'true' if type loaded ","","",
    0,2,-1,0,NULL,cssElCFun_Variant_Dump_Load_Type_stub,TA_Variant_Dump_Load_Type_MethArgs},
  NULL};
static MethodDef_data TA_HelloPlugin_MethodDef[]={
  {&TA_int,NULL,"InitializeTypes"," called when loading plugin to initialize types -- implementer must call ta_init_Xxx() routine","","",
    0,0,-1,0,NULL,cssElCFun_HelloPlugin_InitializeTypes_stub,NULL},
  {&TA_int,NULL,"InitializePlugin"," called to initialize plugin -- it can do things like create classes","","",
    0,0,-1,0,NULL,cssElCFun_HelloPlugin_InitializePlugin_stub,NULL},
  {&TA_void,NULL,"Hello","","","",
    0,0,-1,0,NULL,cssElCFun_HelloPlugin_Hello_stub,NULL},
  NULL};

// Init Function


static bool ta_Init_hw_done = false;

void ta_Init_hw() {
  TypeDef* sbt;

  if(ta_Init_hw_done) return;
  ta_Init_hw_done = true;


  taMisc::in_init = true;

  taMisc::types.Add(&TA_void);
  taMisc::types.Add(&TA_char);
  taMisc::types.Add(&TA_signed_char);
  taMisc::types.Add(&TA_unsigned_char);
  taMisc::types.Add(&TA_short);
  taMisc::types.Add(&TA_signed_short);
    TA_signed_short.AddParents(&TA_short);
  taMisc::types.Add(&TA_short_int);
    TA_short_int.AddParents(&TA_short);
  taMisc::types.Add(&TA_signed_short_int);
    TA_signed_short_int.AddParents(&TA_short);
  taMisc::types.Add(&TA_unsigned_short);
  taMisc::types.Add(&TA_unsigned_short_int);
    TA_unsigned_short_int.AddParents(&TA_unsigned_short);
  taMisc::types.Add(&TA_int);
  taMisc::types.Add(&TA_signed_int);
    TA_signed_int.AddParents(&TA_int);
  taMisc::types.Add(&TA_signed);
    TA_signed.AddParents(&TA_int);
  taMisc::types.Add(&TA_unsigned_int);
  taMisc::types.Add(&TA_unsigned);
    TA_unsigned.AddParents(&TA_unsigned_int);
  taMisc::types.Add(&TA_int64_t);
  taMisc::types.Add(&TA_long_long);
    TA_long_long.AddParents(&TA_int64_t);
  taMisc::types.Add(&TA_signed_long_long);
    TA_signed_long_long.AddParents(&TA_int64_t);
  taMisc::types.Add(&TA_uint64_t);
  taMisc::types.Add(&TA_unsigned_long_long);
    TA_unsigned_long_long.AddParents(&TA_uint64_t);
  taMisc::types.Add(&TA_long);
    if (sizeof(long) == sizeof(int)) TA_long.AddParents(&TA_int);
    else TA_long.AddParents(&TA_int64_t);
  taMisc::types.Add(&TA_signed_long);
    TA_signed_long.AddParents(&TA_long);
  taMisc::types.Add(&TA_long_int);
    TA_long_int.AddParents(&TA_long);
  taMisc::types.Add(&TA_signed_long_int);
    TA_signed_long_int.AddParents(&TA_long);
  taMisc::types.Add(&TA_unsigned_long);
    if (sizeof(unsigned long) == sizeof(unsigned int)) TA_unsigned_long.AddParents(&TA_unsigned_int);
    else TA_unsigned_long.AddParents(&TA_uint64_t);
  taMisc::types.Add(&TA_unsigned_long_int);
    TA_unsigned_long_int.AddParents(&TA_unsigned_long);
  taMisc::types.Add(&TA_intptr_t);
    if (sizeof(intptr_t) == sizeof(int)) TA_intptr_t.AddParents(&TA_int);
    else TA_intptr_t.AddParents(&TA_int64_t);
  taMisc::types.Add(&TA_uintptr_t);
    if (sizeof(uintptr_t) == sizeof(unsigned int)) TA_uintptr_t.AddParents(&TA_unsigned_int);
    else TA_uintptr_t.AddParents(&TA_uint64_t);
  taMisc::types.Add(&TA_float);
  taMisc::types.Add(&TA_double);
  taMisc::types.Add(&TA_bool);
  taMisc::types.Add(&TA_const);
  taMisc::types.Add(&TA_enum);
  taMisc::types.Add(&TA_struct);
  taMisc::types.Add(&TA_union);
  taMisc::types.Add(&TA_class);
  taMisc::types.Add(&TA_template);
  taMisc::types.Add(&TA_templ_inst);
  taMisc::types.Add(&TA_ta_array);
  taMisc::types.Add(&TA_taBase);
    TA_taBase.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_TypeDef);
    TA_TypeDef.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_MemberDef);
    TA_MemberDef.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_MethodDef);
    TA_MethodDef.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taString);
    TA_taString.AddParFormal(&TA_class);
    tac_AddMethods(TA_taString,TA_taString_MethodDef);
  taMisc::types.Add(&TA_Variant);
    TA_Variant.AddParFormal(&TA_class);
    tac_AddEnum(TA_Variant, "VarType", "", "", "", "", TA_Variant_VarType);
    tac_AddMethods(TA_Variant,TA_Variant_MethodDef);
  taMisc::types.Add(&TA_void_ptr);
    TA_void_ptr.AddParents(&TA_void);
  taMisc::types.Add(&TA_HelloPlugin);
    TA_HelloPlugin.AddParFormal(&TA_class);
    tac_AddMethods(TA_HelloPlugin,TA_HelloPlugin_MethodDef);
  taMisc::types.Add(&TA_const_taString_ref);
    TA_const_taString_ref.AddParents(&TA_const_taString);
  taMisc::types.Add(&TA_const_taString);
    TA_const_taString.AddParents(&TA_const);
  taMisc::types.Add(&TA_taStrRep_ptr);
    TA_taStrRep_ptr.AddParents(&TA_taStrRep);
  taMisc::types.Add(&TA_taStrRep);
    TA_taStrRep.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_char_ptr);
    TA_const_char_ptr.AddParents(&TA_const_char);
  taMisc::types.Add(&TA_const_char);
    TA_const_char.AddParents(&TA_const, &TA_char);
  taMisc::types.Add(&TA_char_ptr);
    TA_char_ptr.AddParents(&TA_char);
  taMisc::types.Add(&TA_uint);
    TA_uint.AddParents(&TA_unsigned_int);
  taMisc::types.Add(&TA_bool_ptr);
    TA_bool_ptr.AddParents(&TA_bool);
  taMisc::types.Add(&TA_ushort);
    TA_ushort.AddParents(&TA_unsigned_short_int);
  taMisc::types.Add(&TA_taString_ref);
  taMisc::types.Add(&TA_const_void_ptr);
    TA_const_void_ptr.AddParents(&TA_const_void);
  taMisc::types.Add(&TA_const_void);
    TA_const_void.AddParents(&TA_const, &TA_void);
  taMisc::types.Add(&TA_ostream_ref);
    TA_ostream_ref.AddParents(&TA_ostream);
  taMisc::types.Add(&TA_ostream);
    TA_ostream.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_istream_ref);
    TA_istream_ref.AddParents(&TA_istream);
  taMisc::types.Add(&TA_istream);
    TA_istream.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_Variant_ref);
    TA_const_Variant_ref.AddParents(&TA_const_Variant);
  taMisc::types.Add(&TA_const_Variant);
    TA_const_Variant.AddParents(&TA_const);
  taMisc::types.Add(&TA_byte);
    TA_byte.AddParents(&TA_unsigned_char);
  taMisc::types.Add(&TA_taBase_ptr);
  taMisc::types.Add(&TA_taMatrix_ptr);
    TA_taMatrix_ptr.AddParents(&TA_taMatrix);
  taMisc::types.Add(&TA_taMatrix);
    TA_taMatrix.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_taBase_ptr);
    TA_const_taBase_ptr.AddParents(&TA_const_taBase);
  taMisc::types.Add(&TA_const_taBase);
    TA_const_taBase.AddParents(&TA_const);
  taMisc::types.Add(&TA_const_taMatrix_ptr);
    TA_const_taMatrix_ptr.AddParents(&TA_const_taMatrix);
  taMisc::types.Add(&TA_const_taMatrix);
    TA_const_taMatrix.AddParents(&TA_const, &TA_taMatrix);
  taMisc::types.Add(&TA_const_QVariant_ref);
    TA_const_QVariant_ref.AddParents(&TA_const_QVariant);
  taMisc::types.Add(&TA_const_QVariant);
    TA_const_QVariant.AddParents(&TA_const, &TA_QVariant);
  taMisc::types.Add(&TA_QVariant);
    TA_QVariant.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_TypeDef_ptr_ref);
    TA_TypeDef_ptr_ref.AddParents(&TA_TypeDef_ptr);
  taMisc::types.Add(&TA_TypeDef_ptr);
  taMisc::types.Add(&TA_void_ptr_ref);
  taMisc::types.Add(&TA_int_ref);
    TA_int_ref.AddParents(&TA_int);
  taMisc::types.Add(&TA_QObject);
    TA_QObject.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_IPlugin);
    TA_IPlugin.AddParFormal(&TA_class);


  taMisc::in_init = false;
} 

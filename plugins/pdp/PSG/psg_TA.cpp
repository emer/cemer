// File Automatically Generated by MakeTA
// DO NOT EDIT


#include "ta_type.h"
#include "ta_type_constr.h"
#include "css_basic_types.h"
#include "css_c_ptr_types.h"
#include "css_ta.h"
#include "psg.h"
#include "psg_TA_type.h"
#include "psg_TA_inst.h"


// Types

TypeDef TA_PSGPlugin("PSGPlugin", " ", 
	"", "", "", sizeof(PSGPlugin), (void**)0, 0, 0, 0,1);
TypeDef TA_PSGBase("PSGBase", " this is the base class for interfacing with PSG -- only one instance of this should be created -- ", 
	"", "", "", sizeof(PSGBase), (void**)&TAI_PSGBase, 1, 0, 0,1);
TypeDef TA_const_PSGBase("const_PSGBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_PSGDemo("PSGDemo", " demo test of PSG", 
	"", "", "", sizeof(PSGDemo), (void**)&TAI_PSGDemo, 1, 0, 0,1);
TypeDef TA_const_PSGBase_ref("const_PSGBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_PSGDemo("const_PSGDemo", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PSGDemo_ref("const_PSGDemo_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_PSGArm("PSGArm", " my psg arm 2 joint angles etc", 
	"", "", "", sizeof(PSGArm), (void**)&TAI_PSGArm, 1, 0, 0,1);
TypeDef TA_const_PSGArm("const_PSGArm", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_PSGArm_ref("const_PSGArm_ref", 1, 0, 1, 0, 1, 0);

// Instances

PSGBase*		 TAI_PSGBase=NULL;
  static cssEl* cssElCFun_PSGBase_AttachToPlayer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((PSGBase*)ths)->AttachToPlayer());
    return rval;}
PSGDemo*		 TAI_PSGDemo=NULL;
  static cssEl* cssElCFun_PSGDemo_RunDemo_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((PSGDemo*)ths)->RunDemo());}
    if(na == 1) {
      rval=new cssBool(((PSGDemo*)ths)->RunDemo((int)*arg[1]));}
    return rval;}
PSGArm*		 TAI_PSGArm=NULL;
  static cssEl* cssElCFun_PSGArm_GetCurState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((PSGArm*)ths)->GetCurState());
    return rval;}
  static cssEl* cssElCFun_PSGArm_SetVelocity_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((PSGArm*)ths)->SetVelocity((float)*arg[1], (float)*arg[2]));
    return rval;}

// Type Data

static MethodDef_data TA_PSGBase_MethodDef[]={
  {&TA_bool,NULL,"AttachToPlayer"," attach to the player server, creating client object","BUTTON ","",
    0,0,-1,0,0,NULL,cssElCFun_PSGBase_AttachToPlayer_stub,NULL},
  NULL};
static int PSGDemo::* TA_PSGDemo_MbrOff;
static MemberDef_data TA_PSGDemo_MemberDef[]={
  {&TA_float,NULL,"rate_per_second"," how fast to turn","","",
    *((ta_memb_ptr*)&(TA_PSGDemo_MbrOff=(int PSGDemo::*)(&PSGDemo::rate_per_second))),0,NULL,0},
  {&TA_float,NULL,"collision_threshold"," how close to get before stopping","","",
    *((ta_memb_ptr*)&(TA_PSGDemo_MbrOff=(int PSGDemo::*)(&PSGDemo::collision_threshold))),0,NULL,0},
  {&TA_float,NULL,"run_speed"," how fast to go when not colliding","","",
    *((ta_memb_ptr*)&(TA_PSGDemo_MbrOff=(int PSGDemo::*)(&PSGDemo::run_speed))),0,NULL,0},
  NULL};
static MethodArgs_data TA_PSGDemo_RunDemo_MethArgs[]={
  {&TA_int,NULL,"n_iterations","1000"},
  NULL};
static MethodDef_data TA_PSGDemo_MethodDef[]={
  {&TA_bool,NULL,"RunDemo"," run the demo","BUTTON ","",
    0,1,0,0,0,NULL,cssElCFun_PSGDemo_RunDemo_stub,TA_PSGDemo_RunDemo_MethArgs},
  NULL};
static int PSGArm::* TA_PSGArm_MbrOff;
static MemberDef_data TA_PSGArm_MemberDef[]={
  {&TA_FloatTDCoord,NULL,"joint1_pos"," position of joint 1","","",
    *((ta_memb_ptr*)&(TA_PSGArm_MbrOff=(int PSGArm::*)(&PSGArm::joint1_pos))),0,NULL,0},
  {&TA_FloatTDCoord,NULL,"joint1_ang"," angle of joint 1 or something","","",
    *((ta_memb_ptr*)&(TA_PSGArm_MbrOff=(int PSGArm::*)(&PSGArm::joint1_ang))),0,NULL,0},
  {&TA_FloatTDCoord,NULL,"joint2_pos"," position of joint 2","","",
    *((ta_memb_ptr*)&(TA_PSGArm_MbrOff=(int PSGArm::*)(&PSGArm::joint2_pos))),0,NULL,0},
  {&TA_FloatTDCoord,NULL,"joint2_ang"," angle of joint 2 or something","","",
    *((ta_memb_ptr*)&(TA_PSGArm_MbrOff=(int PSGArm::*)(&PSGArm::joint2_ang))),0,NULL,0},
  NULL};
static MethodArgs_data TA_PSGArm_SetVelocity_MethArgs[]={
  {&TA_float,NULL,"j1_x",""},
  {&TA_float,NULL,"j1_y",""},
  NULL};
static MethodDef_data TA_PSGArm_MethodDef[]={
  {&TA_bool,NULL,"GetCurState"," get current state of the arm, updating pos and ang member varialbes","BUTTON ","",
    0,0,-1,0,0,NULL,cssElCFun_PSGArm_GetCurState_stub,NULL},
  {&TA_bool,NULL,"SetVelocity"," set the velocity inputs to the arm","BUTTON ","",
    0,2,-1,0,0,NULL,cssElCFun_PSGArm_SetVelocity_stub,TA_PSGArm_SetVelocity_MethArgs},
  NULL};

// Init Function


static bool ta_Init_psg_done = false;

void ta_Init_psg() {
  TypeDef* sbt;

  if(ta_Init_psg_done) return;
  ta_Init_psg_done = true;

  ta_Init_ta();

  taMisc::in_init = true;

  taMisc::types.Add(&TA_PSGPlugin);
    TA_PSGPlugin.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_PSGBase);
    TAI_PSGBase = new PSGBase;
    TA_PSGBase.AddParFormal(&TA_class);
    TA_PSGBase.AddParCache(&TA_taBase);
    TA_PSGBase.AddClassPar(&TA_taNBase,0);
    tac_AddMethods(TA_PSGBase,TA_PSGBase_MethodDef);
  taMisc::types.Add(&TA_const_PSGBase);
    TA_const_PSGBase.AddParents(&TA_const, &TA_PSGBase);
  taMisc::types.Add(&TA_PSGDemo);
    TAI_PSGDemo = new PSGDemo;
    TA_PSGDemo.AddParFormal(&TA_class);
    TA_PSGDemo.AddParCache(&TA_taBase);
    TA_PSGDemo.AddClassPar(&TA_PSGBase,0);
    tac_AddMembers(TA_PSGDemo,TA_PSGDemo_MemberDef);
    tac_AddMethods(TA_PSGDemo,TA_PSGDemo_MethodDef);
  taMisc::types.Add(&TA_const_PSGBase_ref);
    TA_const_PSGBase_ref.AddParents(&TA_const_PSGBase);
  taMisc::types.Add(&TA_const_PSGDemo);
    TA_const_PSGDemo.AddParents(&TA_const, &TA_PSGDemo);
  taMisc::types.Add(&TA_const_PSGDemo_ref);
    TA_const_PSGDemo_ref.AddParents(&TA_const_PSGDemo);
  taMisc::types.Add(&TA_PSGArm);
    TAI_PSGArm = new PSGArm;
    TA_PSGArm.AddParFormal(&TA_class);
    TA_PSGArm.AddParCache(&TA_taBase);
    TA_PSGArm.AddClassPar(&TA_PSGBase,0);
    tac_AddMembers(TA_PSGArm,TA_PSGArm_MemberDef);
    tac_AddMethods(TA_PSGArm,TA_PSGArm_MethodDef);
  taMisc::types.Add(&TA_const_PSGArm);
    TA_const_PSGArm.AddParents(&TA_const, &TA_PSGArm);
  taMisc::types.Add(&TA_const_PSGArm_ref);
    TA_const_PSGArm_ref.AddParents(&TA_const_PSGArm);


  taMisc::in_init = false;
} 

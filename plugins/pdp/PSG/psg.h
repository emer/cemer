#ifndef PSG_H
#define PSG_H

#undef QT_SHARED                             // Already defined in config.h.
#include "ta_plugin.h"                       // Defines the plugin architecture.
#include "ta_base.h"                         // Definition of the taBase object.
#include "minmax.h"
#include "ta_geometry.h"
#include "ta_datatable.h"
#include "psg_TA_type.h"                      // Record of type information for PSGBase class.

#ifndef __MAKETA__
#include <libplayerc++/playerc++.h>
#include <libplayerc++/playererror.h>
#endif
                                              // This file is generated by running the `maketa'.
                                              // type scanning tool on this header file.
#define PSG_API                               // Needed for windows compatability.

class PSGPlugin; //

#ifndef __MAKETA__
// The PSGPlugin class allows this to be a plugin. It usually won't
// need to be majorly modified. It is not seen by `maketa' as it
// cannot grok many Qt c++ constructs.

class PSG_API PSGPlugin : public QObject, 
                           public IPlugin
{ // #NO_CSS #NO_MEMBERS
  Q_OBJECT

  // Tells Qt which interfaces are implemented by this class
  Q_INTERFACES(IPlugin)
public:
  static const taVersion	version;
  
  PSGPlugin(QObject* par = NULL);

 public: // IPlugin interface
  TYPED_OBJECT(PSGPlugin) 
  const char*	desc() {return "Sample plugin provided with PDP++";}
  const char*	name() {return "PSGPlugin";}
  const char*	uniqueId() {return "helloplugin.ccnlab.psych.colorado.edu";}
  const char*	url();
  
  int		NotifyTacssVersion(const taVersion& tav, bool& is_ok) {return 0;}
    // we pass ta/css version; set is_ok false if this version is no good for plugin
  int		GetVersion(taVersion& tav) {tav = version; return 0;}
  int 		InitializeTypes();
  int 		InitializePlugin();
};

// Associates a string with the interface PSGPlugin
Q_DECLARE_INTERFACE(PSGPlugin, "pdp.PSGPlugin/1.0")
#endif // !__MAKETA__

// The actual content of the plugin follows. Inheriting from taNBase
// (where the N stands for Named) interfaces you with the TypeAccess
// system

#ifdef __MAKETA__
class PlayerClient; // #IGNORE
class SonarProxy; // #IGNORE
class Position2dProxy; // #IGNORE
#endif

class PSG_API PSGBase : public taNBase {
  // this is the base class for interfacing with PSG -- only one instance of this should be created -- 
  INHERITED(taNBase) // declares 'inherited' keyword for safer base-class references
public:
  bool AttachToPlayer();
  // #BUTTON attach to the player server, creating client object

  TA_SIMPLE_BASEFUNS(PSGBase);
protected:
  PlayerCc::PlayerClient* client;		// #IGNORE this is the main hook into player

private:
  void	Initialize();
  void	Destroy();
};

class PSG_API PSGDemo : public PSGBase {
  // demo test of PSG
INHERITED(PSGBase)
public:
  float rate_per_second;	// how fast to turn
  float collision_threshold;	// how close to get before stopping
  float run_speed;		// how fast to go when not colliding

  bool RunDemo(int n_iterations = 1000);
  // #BUTTON run the demo

  TA_SIMPLE_BASEFUNS(PSGDemo);
protected:
  PlayerCc::SonarProxy* sonar_proxy;	// #IGNORE
  PlayerCc::Position2dProxy* position_proxy; // #IGNORE

private:
  void	Initialize();
  void	Destroy();
};

class PSG_API PSGArm : public PSGBase {
  // my psg arm 2 joint angles etc
INHERITED(PSGBase)
public:
  FloatTDCoord	joint1_pos;	// position of joint 1
  FloatTDCoord	joint1_ang;	// angle of joint 1 or something
  FloatTDCoord	joint2_pos;	// position of joint 2
  FloatTDCoord	joint2_ang;	// angle of joint 2 or something

  // or add another set of state variables that are the inputs
  // the user sets those, then calls SetVelocity

  // use RetinaSpec in src/ta/ta_imgproc.h as example of how to 
  // configure and write to a DataTable
  // ConfigDataTable -- LookBox is a vector of length 4 -- copy that w/3
  // FilterImageData_impl shows how you write to the data table

  bool GetCurState(DataTable*) { };
  // #BUTTON get current state of the arm, updating pos and ang member varialbes
  bool SetVelocity(float j1_x, float j1_y) { }; 
  // #BUTTON set the velocity inputs to the arm

  TA_SIMPLE_BASEFUNS(PSGArm);
protected:
  //  PlayerCc::ArmDude* arm;

private:
  void	Initialize() { };
  void	Destroy() { };
};

#endif

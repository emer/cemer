#!/bin/bash
echo Command line: ./configure $@
# save config command to log
echo Command line: ./configure $@ > config.log
# NOTE: this is a simple script wrapper around the cmake command line tools, for
# those used to the autotools configure script conventions
# also, cmake has rather lame command-line args so this is generally quite useful
# for the lazy typers as well.

echo "Running simple configure script wrapper around cmake build system!"
echo "args are:"
echo "  --enable-debug (or --debug)  enable debug, non-optimized build"
echo "  --enable-release (or --release)  enable release, maximum optimized build (-O3 on gcc)"
echo "  --prefix=<path>              set the install prefix to path"
echo "  --suffix=<name>              add an extra custom suffix on the end of build files"
echo "  --enable-mpi (or --mpi)      enable MPI distributed memory parallel build"
echo "  --clean                      clean existing cmake cache etc first: start fresh"
echo "  --build-dir=<name>           provide a custom build directory name (else auto)."
echo "  --generator=<name>           use given code generator (-G in cmake, which also works)"
echo "  --verbose-build (or --verbose or -v) turn on verbose make output: for make probs"
echo "  --not-native                 don't define -march=native for compilation, which is otherwise the default -- only needed for making packages that will run more broadly"
echo "  --emer-mac-arch-bits=NN      set up for 32-bit or 64-bit compilation"
echo "  --qt5                        configure for Qt5 -- must set QTDIR enviro var to qt install dir (e.g., /usr/local/Qt5.2.0/5.2.0/clang_64)"
echo "  --qt4                        configure for Qt4 -- either qt5 or 4 must be explicitly set, just to be sure you got the right one"
echo "  --c++11                      enable c++11 support, using e.g., -std=c++11 flag"
echo "  --sse8                       define USE_SSE8 to take advantage of 8-way parallel SIMD (SSE) ops -- only useful for clang compiler, where it is auto-enabled"
echo " "
echo "  (note: -- before args is optional, and - works too!)"
echo " "

cmake_cmd="cmake ../"
build_dir="build"
extra_suffix=""
not_native=""
qt_version=""

while [ $# -gt 0 ]
do
  preq=${1%=*}			# get part before =
  case $preq
  in
    --help | -help | help)
      exit 0
    ;;
    --suffix | -suffix | suffix)
      extra_suffix=${1##*=}		# get part after =
      cmake_cmd="$cmake_cmd -DEXTRA_SUFFIX=$extra_suffix"
      build_dir="${build_dir}${extra_suffix}"
      shift 1
    ;;
    --debug | --enable-debug | debug | enable-debug | -debug | -enable-debug | d | -d)
      debug=true
      cmake_cmd="$cmake_cmd -DCMAKE_BUILD_TYPE=Debug"
      build_dir="${build_dir}_dbg"
      shift 1
    ;;
    --release | --enable-release | release | enable-release | -release | -enable-release | r | -r)
      cmake_cmd="$cmake_cmd -DCMAKE_BUILD_TYPE=Release"
      shift 1
    ;;
    --prefix | -prefix | prefix | p | -p)
      prefix=${1##*=}		# get part after =
      cmake_cmd="$cmake_cmd -DCMAKE_INSTALL_PREFIX=$prefix"
      shift 1
    ;;

    --enable-mpi | --mpi | mpi | enable-mpi | -mpi | -enable-mpi)
      mpi=true
      cmake_cmd="$cmake_cmd -DMPI_BUILD=true"
      build_dir="${build_dir}_mpi"
      shift 1
    ;;

    --clean | -clean | clean | -c)
      clean=true
      shift 1
    ;;

    --verbose-build | --verbose | verbose | -v | v | -verbose | verbose-build | -verbose-build)
      verbose_build=true
      shift 1
    ;;

    # configure scripts generated by autotools use --build for a different
    # purpose (to indicate architecture).  Don't allow such shortcuts here,
    # because they interfere with the MOTU scripts.
    --build-dir | -build-dir | build-dir) # | build | --build | -build)
      build_dir=${1##*=}		# get part after =
      shift 1
    ;;

    --generator | -generator | generator | --gen | -gen | gen | -G)
      generator="-G ${1##*=}"		# get part after =
      cmake_cmd="$cmake_cmd $generator"
      shift 1
    ;;
    # needed for MOTU
    --includedir | --mandir | --infodir | --sysconfdir | --localstatedir | --libexecdir | --disable-maintainer-mode | --disable-dependency-tracking)
      shift 1
    ;;

    --not-native | -not-native | not-native)
      not_native="not-native"
      cmake_cmd="$cmake_cmd -DNOT_NATIVE=not-native"
      shift 1
    ;;

    --emer-mac-arch-bits)
      cmake_cmd="$cmake_cmd -DEMER_MAC_ARCH_BITS=${1##*=}"
      shift 1
    ;;

    --qt5 | -qt5 | qt5)
      cmake_cmd="$cmake_cmd -DQT_USE_5=ON -DQTDIR=$QTDIR"
      qt_version="qt5"
      shift 1
    ;;

    --qt4 | -qt4 | qt4)
      cmake_cmd="$cmake_cmd -DQT_USE_4=ON -DQTDIR=$QTDIR"
      qt_version="qt4"
      shift 1
    ;;

    --sse8 | -sse8 | sse8)
      cmake_cmd="$cmake_cmd -DCMAKE_CXX_FLAGS=-DUSE_SSE8"
      shift 1
    ;;

    --c++11 | -c++11 | c++11)
      cmake_cmd="$cmake_cmd -DCMAKE_CXX_FLAGS=-std=c++11"
      shift 1
    ;;

    *)
      echo "Invalid argument -- please see above list"
      shift 1
    ;;
  esac
done

if [[ "$qt_version" == "" ]]; then
    echo "ERROR: you must specify either qt5 or qt4 -- pretty soon it will default to qt5, but right now there is enough ambiguity that you must specify which one explicitly."
    exit 1
fi

if [[ $verbose_build == "true" ]]; then
    cmake_cmd="$cmake_cmd -DCMAKE_VERBOSE_MAKEFILE=ON"
else 
    cmake_cmd="$cmake_cmd -DCMAKE_VERBOSE_MAKEFILE=OFF"
fi

# Support building in trunk by passing in pwd keyword
# $(pwd) didn't work for out of source builds
if [[ "$build_dir" == "pwd" ]];
then
  # Don't run cmake in your home directory..
  # Also don't try to make or go to the build dir, we are already there
  cmake_cmd="$(echo $cmake_cmd | sed 's/\.\.\///')"
else
  mkdir -p "$build_dir"
  cd "$build_dir" || exit 1
fi

echo " "
echo "####################################################"
echo "configure script settings:"
echo "  debug:        $debug"
echo "  prefix:       $prefix"
echo "  suffix:       $extra_suffix"
echo "  mpi:          $mpi"
echo "  clean:        $clean"
echo "  build-dir:    $build_dir"
echo "  qt-version:   $qt_version"
echo "  generator:    $generator"
echo "  verbose:      $verbose_build"
echo " "
echo "  cmake command: $cmake_cmd"
echo " "

if [[ $clean == "true" ]]; then
    echo "NOTE: Cleaning files now!"
    /bin/rm -rf *
fi
$cmake_cmd

echo " "
echo "####################################################"
echo "Now you must type: cd $build_dir; make; make install"
echo "to actually build and install the software"
echo " "

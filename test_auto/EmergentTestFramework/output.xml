<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20140222 10:13:30.754" generator="Robot 2.8.3 (Python 2.7.6 on win32)">
<suite source="C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\sub" id="s1" name="Sub">
<suite source="C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\sub\Suite.txt" id="s1-s1" name="Suite">
<kw type="setup" name="Emergent.Suite Variables">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${baseline-file}</arg>
<arg>baseline.json</arg>
</arguments>
<msg timestamp="20140222 10:13:30.820" level="INFO">${baseline-file} = baseline.json</msg>
<status status="PASS" endtime="20140222 10:13:30.820" starttime="20140222 10:13:30.819"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>record.json</arg>
</arguments>
<msg timestamp="20140222 10:13:30.821" level="INFO">${record-file} = record.json</msg>
<status status="PASS" endtime="20140222 10:13:30.821" starttime="20140222 10:13:30.820"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:30.821" starttime="20140222 10:13:30.819"></status>
</kw>
<test id="s1-s1-t1" name="LeabraStd">
<kw type="kw" name="Emergent.Set Variables">
<doc></doc>
<arguments>
<arg>LeabraStd</arg>
<arg>30 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140222 10:13:30.823" level="INFO">${name} = LeabraStd</msg>
<status status="PASS" endtime="20140222 10:13:30.823" starttime="20140222 10:13:30.823"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140222 10:13:30.824" level="INFO">${project-file} = LeabraStd.proj</msg>
<status status="PASS" endtime="20140222 10:13:30.824" starttime="20140222 10:13:30.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}.css</arg>
</arguments>
<msg timestamp="20140222 10:13:30.825" level="INFO">${script-file} = LeabraStd.css</msg>
<status status="PASS" endtime="20140222 10:13:30.825" starttime="20140222 10:13:30.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140222 10:13:30.825" level="INFO">${timeout} = 30 secs</msg>
<status status="PASS" endtime="20140222 10:13:30.825" starttime="20140222 10:13:30.825"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:30.825" starttime="20140222 10:13:30.822"></status>
</kw>
<kw type="kw" name="Emergent.Set Metrics">
<doc></doc>
<arguments>
<arg>min</arg>
<arg>0.20</arg>
<arg>0.35</arg>
<arg>max</arg>
<arg>0.40</arg>
<arg>0.80</arg>
<arg>avg</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{metrics}</arg>
</arguments>
<msg timestamp="20140222 10:13:30.828" level="INFO">@{metric-list} = [ min | 0.20 | 0.35 | max | 0.40 | 0.80 | avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140222 10:13:30.827" starttime="20140222 10:13:30.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{metric-list}</arg>
</arguments>
<msg timestamp="20140222 10:13:30.828" level="INFO">@{metric-list} = [ min | 0.20 | 0.35 | max | 0.40 | 0.80 | avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140222 10:13:30.828" starttime="20140222 10:13:30.828"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:30.828" starttime="20140222 10:13:30.827"></status>
</kw>
<kw type="kw" name="Create CSS LeabraStd">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Emergent.Create CSS Custom">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${script}</arg>
<arg>\#include "Leabra.css"\n\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.831" html="yes" level="INFO">Created file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.831" starttime="20140222 10:13:30.830"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:30.831" starttime="20140222 10:13:30.829"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Randomize">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>SetRandom(\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.833" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.833" starttime="20140222 10:13:30.832"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.834" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.834" starttime="20140222 10:13:30.833"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.835" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.835" starttime="20140222 10:13:30.834"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraTrain",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.836" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.836" starttime="20140222 10:13:30.835"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"rnd_init");\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.837" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.837" starttime="20140222 10:13:30.837"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:30.838" starttime="20140222 10:13:30.832"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard RunProgram">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>LeabraBatch</arg>
<arg>Network_0</arg>
<arg>StdInputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>RunProgram(\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.839" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.839" starttime="20140222 10:13:30.839"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.840" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.840" starttime="20140222 10:13:30.839"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.841" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.841" starttime="20140222 10:13:30.840"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${program}",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.842" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.842" starttime="20140222 10:13:30.841"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${network}",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.863" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.863" starttime="20140222 10:13:30.842"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"InputData",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.883" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.883" starttime="20140222 10:13:30.863"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${data}");\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.902" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.902" starttime="20140222 10:13:30.884"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:30.903" starttime="20140222 10:13:30.838"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Output">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>OutputEpochsToTrain</arg>
<arg>EpochOutputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>${method}(\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.922" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.922" starttime="20140222 10:13:30.904"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.942" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.943" starttime="20140222 10:13:30.922"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.960" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.961" starttime="20140222 10:13:30.943"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"OutputData",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:30.981" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:30.981" starttime="20140222 10:13:30.961"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${table}");\n</arg>
</arguments>
<msg timestamp="20140222 10:13:31.001" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:31.001" starttime="20140222 10:13:30.981"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:31.002" starttime="20140222 10:13:30.903"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:31.002" starttime="20140222 10:13:30.829"></status>
</kw>
<kw type="kw" name="Emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${actuals} = Emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140222 10:13:31.004" level="INFO">Starting process:
emergent -nogui -ni -p LeabraStd.proj -s LeabraStd.css</msg>
<status status="PASS" endtime="20140222 10:13:31.018" starttime="20140222 10:13:31.004"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140222 10:13:31.019" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140222 10:13:37.224" level="INFO">Process completed.</msg>
<msg timestamp="20140222 10:13:37.225" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140222 10:13:37.224" starttime="20140222 10:13:31.019"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140222 10:13:37.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140222 10:13:37.227" starttime="20140222 10:13:37.225"></status>
</kw>
<kw type="kw" name="${metrics} = Emergent.Get Results">
<doc></doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
<arg>msg=No results found in output for ${name}: ${output}</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20140222 10:13:37.232" level="INFO">${result} = { "name": "LeabraStd", "min": 8, "max": 15, "avg": 12 }</msg>
<status status="PASS" endtime="20140222 10:13:37.232" starttime="20140222 10:13:37.230"></status>
</kw>
<msg timestamp="20140222 10:13:37.233" level="INFO">${metrics} = { "name": "LeabraStd", "min": 8, "max": 15, "avg": 12 }</msg>
<status status="PASS" endtime="20140222 10:13:37.233" starttime="20140222 10:13:37.227"></status>
</kw>
<msg timestamp="20140222 10:13:37.234" level="INFO">${actuals} = { "name": "LeabraStd", "min": 8, "max": 15, "avg": 12 }</msg>
<status status="PASS" endtime="20140222 10:13:37.234" starttime="20140222 10:13:31.003"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals},</arg>
</arguments>
<msg timestamp="20140222 10:13:37.238" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:37.238" starttime="20140222 10:13:37.235"></status>
</kw>
<kw type="kw" name="${baseline} = Emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${content} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140222 10:13:37.244" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json&lt;/a&gt;'</msg>
<msg timestamp="20140222 10:13:37.245" level="INFO">${content} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 },{ "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 },{ "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 },{ "...</msg>
<status status="PASS" endtime="20140222 10:13:37.245" starttime="20140222 10:13:37.242"></status>
</kw>
<kw type="kw" name="${status}, ${baseline} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.249" starttime="20140222 10:13:37.247"></status>
</kw>
<msg timestamp="20140222 10:13:37.250" level="INFO">${status} = PASS</msg>
<msg timestamp="20140222 10:13:37.250" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140222 10:13:37.250" starttime="20140222 10:13:37.246"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${status}</arg>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140222 10:13:37.252" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140222 10:13:37.252" starttime="20140222 10:13:37.251"></status>
</kw>
<msg timestamp="20140222 10:13:37.253" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140222 10:13:37.253" starttime="20140222 10:13:37.238"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Add To Baseline</arg>
<arg>${baseline-file}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.255" starttime="20140222 10:13:37.254"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140222 10:13:37.256" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140222 10:13:37.256" starttime="20140222 10:13:37.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140222 10:13:37.258" level="INFO">${actuals} = { "name": "LeabraStd", "min": 8, "max": 15, "avg": 12 }</msg>
<status status="PASS" endtime="20140222 10:13:37.258" starttime="20140222 10:13:37.257"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.258" starttime="20140222 10:13:31.002"></status>
</kw>
<kw type="kw" name="Emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.20, ${required} = 0.35">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:37.271" level="INFO">${match} = "min": 8</msg>
<msg timestamp="20140222 10:13:37.271" level="INFO">${value} = 8</msg>
<status status="PASS" endtime="20140222 10:13:37.271" starttime="20140222 10:13:37.269"></status>
</kw>
<msg timestamp="20140222 10:13:37.271" level="INFO">${value} = 8</msg>
<status status="PASS" endtime="20140222 10:13:37.271" starttime="20140222 10:13:37.266"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:37.273" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140222 10:13:37.273" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140222 10:13:37.272" starttime="20140222 10:13:37.272"></status>
</kw>
<msg timestamp="20140222 10:13:37.273" level="INFO">${target} = 9</msg>
<status status="PASS" endtime="20140222 10:13:37.273" starttime="20140222 10:13:37.271"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.274" level="INFO">${low} = 7.2</msg>
<status status="PASS" endtime="20140222 10:13:37.274" starttime="20140222 10:13:37.274"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.275" level="INFO">${high} = 10.8</msg>
<status status="PASS" endtime="20140222 10:13:37.275" starttime="20140222 10:13:37.274"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.277" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:37.277" starttime="20140222 10:13:37.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.277" starttime="20140222 10:13:37.277"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.277" starttime="20140222 10:13:37.276"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.279" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:37.279" starttime="20140222 10:13:37.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.279" starttime="20140222 10:13:37.279"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.279" starttime="20140222 10:13:37.278"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.279" starttime="20140222 10:13:37.275"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.280" starttime="20140222 10:13:37.273"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.280" starttime="20140222 10:13:37.263"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.280" starttime="20140222 10:13:37.262"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.280" starttime="20140222 10:13:37.262"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.40, ${required} = 0.80">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:37.282" level="INFO">${match} = "max": 15</msg>
<msg timestamp="20140222 10:13:37.283" level="INFO">${value} = 15</msg>
<status status="PASS" endtime="20140222 10:13:37.282" starttime="20140222 10:13:37.282"></status>
</kw>
<msg timestamp="20140222 10:13:37.283" level="INFO">${value} = 15</msg>
<status status="PASS" endtime="20140222 10:13:37.283" starttime="20140222 10:13:37.281"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:37.284" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140222 10:13:37.284" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140222 10:13:37.284" starttime="20140222 10:13:37.284"></status>
</kw>
<msg timestamp="20140222 10:13:37.284" level="INFO">${target} = 13</msg>
<status status="PASS" endtime="20140222 10:13:37.284" starttime="20140222 10:13:37.283"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.286" level="INFO">${low} = 7.8</msg>
<status status="PASS" endtime="20140222 10:13:37.286" starttime="20140222 10:13:37.285"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.286" level="INFO">${high} = 18.2</msg>
<status status="PASS" endtime="20140222 10:13:37.286" starttime="20140222 10:13:37.286"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.288" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:37.288" starttime="20140222 10:13:37.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.289" starttime="20140222 10:13:37.289"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.289" starttime="20140222 10:13:37.287"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.290" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:37.290" starttime="20140222 10:13:37.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.291" starttime="20140222 10:13:37.290"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.291" starttime="20140222 10:13:37.289"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.291" starttime="20140222 10:13:37.286"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.291" starttime="20140222 10:13:37.284"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.291" starttime="20140222 10:13:37.280"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.291" starttime="20140222 10:13:37.280"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.291" starttime="20140222 10:13:37.280"></status>
</kw>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:37.294" level="INFO">${match} = "avg": 12</msg>
<msg timestamp="20140222 10:13:37.294" level="INFO">${value} = 12</msg>
<status status="PASS" endtime="20140222 10:13:37.294" starttime="20140222 10:13:37.293"></status>
</kw>
<msg timestamp="20140222 10:13:37.294" level="INFO">${value} = 12</msg>
<status status="PASS" endtime="20140222 10:13:37.294" starttime="20140222 10:13:37.292"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:37.295" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140222 10:13:37.295" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140222 10:13:37.295" starttime="20140222 10:13:37.295"></status>
</kw>
<msg timestamp="20140222 10:13:37.295" level="INFO">${target} = 10.9</msg>
<status status="PASS" endtime="20140222 10:13:37.295" starttime="20140222 10:13:37.294"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.297" level="INFO">${low} = 9.265</msg>
<status status="PASS" endtime="20140222 10:13:37.297" starttime="20140222 10:13:37.296"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.297" level="INFO">${high} = 12.535</msg>
<status status="PASS" endtime="20140222 10:13:37.297" starttime="20140222 10:13:37.297"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.299" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:37.299" starttime="20140222 10:13:37.299"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.300" starttime="20140222 10:13:37.299"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.300" starttime="20140222 10:13:37.298"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.301" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:37.301" starttime="20140222 10:13:37.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.301" starttime="20140222 10:13:37.301"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.302" starttime="20140222 10:13:37.300"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.302" starttime="20140222 10:13:37.297"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.302" starttime="20140222 10:13:37.296"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.302" starttime="20140222 10:13:37.292"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.302" starttime="20140222 10:13:37.291"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.302" starttime="20140222 10:13:37.291"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.302" starttime="20140222 10:13:37.261"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.302" starttime="20140222 10:13:37.260"></status>
</kw>
<kw type="kw" name="Emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.20, ${required} = 0.35">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:37.306" level="INFO">${match} = "min": 8</msg>
<msg timestamp="20140222 10:13:37.306" level="INFO">${value} = 8</msg>
<status status="PASS" endtime="20140222 10:13:37.306" starttime="20140222 10:13:37.305"></status>
</kw>
<msg timestamp="20140222 10:13:37.306" level="INFO">${value} = 8</msg>
<status status="PASS" endtime="20140222 10:13:37.306" starttime="20140222 10:13:37.304"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:37.307" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140222 10:13:37.307" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140222 10:13:37.307" starttime="20140222 10:13:37.307"></status>
</kw>
<msg timestamp="20140222 10:13:37.307" level="INFO">${target} = 9</msg>
<status status="PASS" endtime="20140222 10:13:37.307" starttime="20140222 10:13:37.306"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.309" level="INFO">${low} = 5.85</msg>
<status status="PASS" endtime="20140222 10:13:37.309" starttime="20140222 10:13:37.308"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.309" level="INFO">${high} = 12.15</msg>
<status status="PASS" endtime="20140222 10:13:37.309" starttime="20140222 10:13:37.309"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.311" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:37.311" starttime="20140222 10:13:37.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.312" starttime="20140222 10:13:37.311"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.312" starttime="20140222 10:13:37.310"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.313" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:37.313" starttime="20140222 10:13:37.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.313" starttime="20140222 10:13:37.313"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.314" starttime="20140222 10:13:37.312"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.314" starttime="20140222 10:13:37.309"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.314" starttime="20140222 10:13:37.308"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.314" starttime="20140222 10:13:37.304"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.314" starttime="20140222 10:13:37.303"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.314" starttime="20140222 10:13:37.303"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.40, ${required} = 0.80">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:37.316" level="INFO">${match} = "max": 15</msg>
<msg timestamp="20140222 10:13:37.316" level="INFO">${value} = 15</msg>
<status status="PASS" endtime="20140222 10:13:37.316" starttime="20140222 10:13:37.316"></status>
</kw>
<msg timestamp="20140222 10:13:37.317" level="INFO">${value} = 15</msg>
<status status="PASS" endtime="20140222 10:13:37.316" starttime="20140222 10:13:37.315"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:37.318" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140222 10:13:37.318" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140222 10:13:37.318" starttime="20140222 10:13:37.317"></status>
</kw>
<msg timestamp="20140222 10:13:37.318" level="INFO">${target} = 13</msg>
<status status="PASS" endtime="20140222 10:13:37.318" starttime="20140222 10:13:37.317"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.319" level="INFO">${low} = 2.6</msg>
<status status="PASS" endtime="20140222 10:13:37.319" starttime="20140222 10:13:37.319"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.320" level="INFO">${high} = 23.4</msg>
<status status="PASS" endtime="20140222 10:13:37.320" starttime="20140222 10:13:37.320"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.322" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:37.322" starttime="20140222 10:13:37.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.323" starttime="20140222 10:13:37.322"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.323" starttime="20140222 10:13:37.321"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.324" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:37.324" starttime="20140222 10:13:37.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.324" starttime="20140222 10:13:37.324"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.324" starttime="20140222 10:13:37.323"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.324" starttime="20140222 10:13:37.320"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.325" starttime="20140222 10:13:37.318"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.325" starttime="20140222 10:13:37.314"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.325" starttime="20140222 10:13:37.314"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.325" starttime="20140222 10:13:37.314"></status>
</kw>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:37.327" level="INFO">${match} = "avg": 12</msg>
<msg timestamp="20140222 10:13:37.327" level="INFO">${value} = 12</msg>
<status status="PASS" endtime="20140222 10:13:37.327" starttime="20140222 10:13:37.327"></status>
</kw>
<msg timestamp="20140222 10:13:37.327" level="INFO">${value} = 12</msg>
<status status="PASS" endtime="20140222 10:13:37.327" starttime="20140222 10:13:37.326"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:37.329" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140222 10:13:37.329" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140222 10:13:37.328" starttime="20140222 10:13:37.328"></status>
</kw>
<msg timestamp="20140222 10:13:37.329" level="INFO">${target} = 10.9</msg>
<status status="PASS" endtime="20140222 10:13:37.329" starttime="20140222 10:13:37.327"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.330" level="INFO">${low} = 8.175</msg>
<status status="PASS" endtime="20140222 10:13:37.330" starttime="20140222 10:13:37.330"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.331" level="INFO">${high} = 13.625</msg>
<status status="PASS" endtime="20140222 10:13:37.330" starttime="20140222 10:13:37.330"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.332" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:37.332" starttime="20140222 10:13:37.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.333" starttime="20140222 10:13:37.333"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.333" starttime="20140222 10:13:37.331"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:37.334" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:37.334" starttime="20140222 10:13:37.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:37.335" starttime="20140222 10:13:37.334"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.335" starttime="20140222 10:13:37.333"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.335" starttime="20140222 10:13:37.331"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.335" starttime="20140222 10:13:37.329"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.335" starttime="20140222 10:13:37.325"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.335" starttime="20140222 10:13:37.325"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.335" starttime="20140222 10:13:37.325"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.335" starttime="20140222 10:13:37.303"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.335" starttime="20140222 10:13:37.303"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140222 10:13:37.336" critical="yes" starttime="20140222 10:13:30.821"></status>
</test>
<test id="s1-s1-t2" name="LeabraStdEmbedded">
<kw type="kw" name="Emergent.Set Variables">
<doc></doc>
<arguments>
<arg>LeabraStdEmbedded</arg>
<arg>15 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140222 10:13:37.342" level="INFO">${name} = LeabraStdEmbedded</msg>
<status status="PASS" endtime="20140222 10:13:37.342" starttime="20140222 10:13:37.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140222 10:13:37.342" level="INFO">${project-file} = LeabraStdEmbedded.proj</msg>
<status status="PASS" endtime="20140222 10:13:37.342" starttime="20140222 10:13:37.342"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}.css</arg>
</arguments>
<msg timestamp="20140222 10:13:37.343" level="INFO">${script-file} = LeabraStdEmbedded.css</msg>
<status status="PASS" endtime="20140222 10:13:37.343" starttime="20140222 10:13:37.342"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140222 10:13:37.343" level="INFO">${timeout} = 15 secs</msg>
<status status="PASS" endtime="20140222 10:13:37.343" starttime="20140222 10:13:37.343"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.343" starttime="20140222 10:13:37.340"></status>
</kw>
<kw type="kw" name="Emergent.Set Metrics">
<doc></doc>
<arguments>
<arg>min</arg>
<arg>0.20</arg>
<arg>0.35</arg>
<arg>max</arg>
<arg>0.40</arg>
<arg>0.80</arg>
<arg>avg</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{metrics}</arg>
</arguments>
<msg timestamp="20140222 10:13:37.345" level="INFO">@{metric-list} = [ min | 0.20 | 0.35 | max | 0.40 | 0.80 | avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140222 10:13:37.345" starttime="20140222 10:13:37.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{metric-list}</arg>
</arguments>
<msg timestamp="20140222 10:13:37.345" level="INFO">@{metric-list} = [ min | 0.20 | 0.35 | max | 0.40 | 0.80 | avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140222 10:13:37.345" starttime="20140222 10:13:37.345"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.345" starttime="20140222 10:13:37.344"></status>
</kw>
<kw type="kw" name="Create CSS">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Emergent.Create CSS Standard">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${script}</arg>
<arg>Program *program = .projects["${name}"].programs.gp["Tests"]["Test"];\nprogram-&gt;Run();\n</arg>
</arguments>
<msg timestamp="20140222 10:13:37.348" html="yes" level="INFO">Created file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:37.348" starttime="20140222 10:13:37.347"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.348" starttime="20140222 10:13:37.346"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:37.348" starttime="20140222 10:13:37.346"></status>
</kw>
<kw type="kw" name="Emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${actuals} = Emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140222 10:13:37.350" level="INFO">Starting process:
emergent -nogui -ni -p LeabraStdEmbedded.proj -s LeabraStdEmbedded.css</msg>
<status status="PASS" endtime="20140222 10:13:37.351" starttime="20140222 10:13:37.350"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140222 10:13:37.352" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140222 10:13:38.753" level="INFO">Process completed.</msg>
<msg timestamp="20140222 10:13:38.753" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140222 10:13:38.753" starttime="20140222 10:13:37.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140222 10:13:38.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140222 10:13:38.754" starttime="20140222 10:13:38.753"></status>
</kw>
<kw type="kw" name="${metrics} = Emergent.Get Results">
<doc></doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
<arg>msg=No results found in output for ${name}: ${output}</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20140222 10:13:38.755" level="INFO">${result} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140222 10:13:38.755" starttime="20140222 10:13:38.755"></status>
</kw>
<msg timestamp="20140222 10:13:38.755" level="INFO">${metrics} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140222 10:13:38.755" starttime="20140222 10:13:38.754"></status>
</kw>
<msg timestamp="20140222 10:13:38.756" level="INFO">${actuals} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140222 10:13:38.755" starttime="20140222 10:13:37.349"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals},</arg>
</arguments>
<msg timestamp="20140222 10:13:38.757" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.757" starttime="20140222 10:13:38.756"></status>
</kw>
<kw type="kw" name="${baseline} = Emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${content} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140222 10:13:38.758" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json&lt;/a&gt;'</msg>
<msg timestamp="20140222 10:13:38.759" level="INFO">${content} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 },{ "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 },{ "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 },{ "...</msg>
<status status="PASS" endtime="20140222 10:13:38.759" starttime="20140222 10:13:38.758"></status>
</kw>
<kw type="kw" name="${status}, ${baseline} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.760" starttime="20140222 10:13:38.759"></status>
</kw>
<msg timestamp="20140222 10:13:38.760" level="INFO">${status} = PASS</msg>
<msg timestamp="20140222 10:13:38.760" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140222 10:13:38.760" starttime="20140222 10:13:38.759"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${status}</arg>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140222 10:13:38.761" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140222 10:13:38.761" starttime="20140222 10:13:38.760"></status>
</kw>
<msg timestamp="20140222 10:13:38.761" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140222 10:13:38.761" starttime="20140222 10:13:38.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Add To Baseline</arg>
<arg>${baseline-file}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.762" starttime="20140222 10:13:38.761"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140222 10:13:38.762" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140222 10:13:38.762" starttime="20140222 10:13:38.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140222 10:13:38.762" level="INFO">${actuals} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140222 10:13:38.762" starttime="20140222 10:13:38.762"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.762" starttime="20140222 10:13:37.348"></status>
</kw>
<kw type="kw" name="Emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.20, ${required} = 0.35">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:38.766" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140222 10:13:38.766" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140222 10:13:38.766" starttime="20140222 10:13:38.765"></status>
</kw>
<msg timestamp="20140222 10:13:38.766" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140222 10:13:38.766" starttime="20140222 10:13:38.765"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:38.767" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140222 10:13:38.767" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140222 10:13:38.767" starttime="20140222 10:13:38.767"></status>
</kw>
<msg timestamp="20140222 10:13:38.768" level="INFO">${target} = 9</msg>
<status status="PASS" endtime="20140222 10:13:38.768" starttime="20140222 10:13:38.766"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.769" level="INFO">${low} = 7.2</msg>
<status status="PASS" endtime="20140222 10:13:38.769" starttime="20140222 10:13:38.769"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.769" level="INFO">${high} = 10.8</msg>
<status status="PASS" endtime="20140222 10:13:38.769" starttime="20140222 10:13:38.769"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.771" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:38.771" starttime="20140222 10:13:38.771"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.772" starttime="20140222 10:13:38.771"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.772" starttime="20140222 10:13:38.770"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.773" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:38.773" starttime="20140222 10:13:38.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.774" starttime="20140222 10:13:38.773"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.774" starttime="20140222 10:13:38.772"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.774" starttime="20140222 10:13:38.769"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.774" starttime="20140222 10:13:38.768"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.774" starttime="20140222 10:13:38.764"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.774" starttime="20140222 10:13:38.763"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.774" starttime="20140222 10:13:38.763"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.40, ${required} = 0.80">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:38.777" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140222 10:13:38.777" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140222 10:13:38.777" starttime="20140222 10:13:38.776"></status>
</kw>
<msg timestamp="20140222 10:13:38.777" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140222 10:13:38.777" starttime="20140222 10:13:38.776"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:38.778" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140222 10:13:38.778" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140222 10:13:38.778" starttime="20140222 10:13:38.778"></status>
</kw>
<msg timestamp="20140222 10:13:38.778" level="INFO">${target} = 13</msg>
<status status="PASS" endtime="20140222 10:13:38.778" starttime="20140222 10:13:38.777"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.780" level="INFO">${low} = 7.8</msg>
<status status="PASS" endtime="20140222 10:13:38.779" starttime="20140222 10:13:38.779"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.780" level="INFO">${high} = 18.2</msg>
<status status="PASS" endtime="20140222 10:13:38.780" starttime="20140222 10:13:38.780"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.782" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:38.782" starttime="20140222 10:13:38.782"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.782" starttime="20140222 10:13:38.782"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.782" starttime="20140222 10:13:38.781"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.784" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:38.784" starttime="20140222 10:13:38.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.784" starttime="20140222 10:13:38.784"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.784" starttime="20140222 10:13:38.783"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.784" starttime="20140222 10:13:38.780"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.784" starttime="20140222 10:13:38.778"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.784" starttime="20140222 10:13:38.775"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.785" starttime="20140222 10:13:38.774"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.785" starttime="20140222 10:13:38.774"></status>
</kw>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:38.787" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140222 10:13:38.787" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140222 10:13:38.787" starttime="20140222 10:13:38.786"></status>
</kw>
<msg timestamp="20140222 10:13:38.787" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140222 10:13:38.787" starttime="20140222 10:13:38.786"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:38.788" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140222 10:13:38.788" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140222 10:13:38.788" starttime="20140222 10:13:38.788"></status>
</kw>
<msg timestamp="20140222 10:13:38.789" level="INFO">${target} = 10.9</msg>
<status status="PASS" endtime="20140222 10:13:38.789" starttime="20140222 10:13:38.787"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.790" level="INFO">${low} = 9.265</msg>
<status status="PASS" endtime="20140222 10:13:38.790" starttime="20140222 10:13:38.790"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.790" level="INFO">${high} = 12.535</msg>
<status status="PASS" endtime="20140222 10:13:38.790" starttime="20140222 10:13:38.790"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.792" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:38.792" starttime="20140222 10:13:38.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.793" starttime="20140222 10:13:38.792"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.793" starttime="20140222 10:13:38.791"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.794" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:38.794" starttime="20140222 10:13:38.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.794" starttime="20140222 10:13:38.794"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.795" starttime="20140222 10:13:38.793"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.795" starttime="20140222 10:13:38.790"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.795" starttime="20140222 10:13:38.789"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.795" starttime="20140222 10:13:38.785"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.795" starttime="20140222 10:13:38.785"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.795" starttime="20140222 10:13:38.785"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.795" starttime="20140222 10:13:38.763"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.795" starttime="20140222 10:13:38.763"></status>
</kw>
<kw type="kw" name="Emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.20, ${required} = 0.35">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:38.799" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140222 10:13:38.799" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140222 10:13:38.799" starttime="20140222 10:13:38.798"></status>
</kw>
<msg timestamp="20140222 10:13:38.799" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140222 10:13:38.799" starttime="20140222 10:13:38.798"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:38.801" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140222 10:13:38.801" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140222 10:13:38.801" starttime="20140222 10:13:38.800"></status>
</kw>
<msg timestamp="20140222 10:13:38.801" level="INFO">${target} = 9</msg>
<status status="PASS" endtime="20140222 10:13:38.801" starttime="20140222 10:13:38.799"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.803" level="INFO">${low} = 5.85</msg>
<status status="PASS" endtime="20140222 10:13:38.803" starttime="20140222 10:13:38.802"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.803" level="INFO">${high} = 12.15</msg>
<status status="PASS" endtime="20140222 10:13:38.803" starttime="20140222 10:13:38.803"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.805" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:38.805" starttime="20140222 10:13:38.805"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.806" starttime="20140222 10:13:38.805"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.806" starttime="20140222 10:13:38.804"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.807" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:38.807" starttime="20140222 10:13:38.807"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.808" starttime="20140222 10:13:38.807"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.808" starttime="20140222 10:13:38.806"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.808" starttime="20140222 10:13:38.803"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.808" starttime="20140222 10:13:38.802"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.808" starttime="20140222 10:13:38.797"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.808" starttime="20140222 10:13:38.796"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.808" starttime="20140222 10:13:38.796"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.40, ${required} = 0.80">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:38.810" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140222 10:13:38.810" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140222 10:13:38.810" starttime="20140222 10:13:38.810"></status>
</kw>
<msg timestamp="20140222 10:13:38.811" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140222 10:13:38.811" starttime="20140222 10:13:38.809"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:38.812" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140222 10:13:38.812" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140222 10:13:38.812" starttime="20140222 10:13:38.811"></status>
</kw>
<msg timestamp="20140222 10:13:38.812" level="INFO">${target} = 13</msg>
<status status="PASS" endtime="20140222 10:13:38.812" starttime="20140222 10:13:38.811"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.813" level="INFO">${low} = 2.6</msg>
<status status="PASS" endtime="20140222 10:13:38.813" starttime="20140222 10:13:38.813"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.814" level="INFO">${high} = 23.4</msg>
<status status="PASS" endtime="20140222 10:13:38.814" starttime="20140222 10:13:38.814"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.816" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:38.816" starttime="20140222 10:13:38.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.816" starttime="20140222 10:13:38.816"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.816" starttime="20140222 10:13:38.815"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.817" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:38.817" starttime="20140222 10:13:38.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.818" starttime="20140222 10:13:38.818"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.818" starttime="20140222 10:13:38.816"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.818" starttime="20140222 10:13:38.814"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.818" starttime="20140222 10:13:38.812"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.818" starttime="20140222 10:13:38.809"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.818" starttime="20140222 10:13:38.808"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.818" starttime="20140222 10:13:38.808"></status>
</kw>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:38.821" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140222 10:13:38.821" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140222 10:13:38.821" starttime="20140222 10:13:38.821"></status>
</kw>
<msg timestamp="20140222 10:13:38.821" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140222 10:13:38.821" starttime="20140222 10:13:38.820"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:38.822" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140222 10:13:38.823" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140222 10:13:38.822" starttime="20140222 10:13:38.822"></status>
</kw>
<msg timestamp="20140222 10:13:38.823" level="INFO">${target} = 10.9</msg>
<status status="PASS" endtime="20140222 10:13:38.823" starttime="20140222 10:13:38.821"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.824" level="INFO">${low} = 8.175</msg>
<status status="PASS" endtime="20140222 10:13:38.824" starttime="20140222 10:13:38.824"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.825" level="INFO">${high} = 13.625</msg>
<status status="PASS" endtime="20140222 10:13:38.824" starttime="20140222 10:13:38.824"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.826" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:38.826" starttime="20140222 10:13:38.826"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.827" starttime="20140222 10:13:38.827"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.827" starttime="20140222 10:13:38.825"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:38.828" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:38.828" starttime="20140222 10:13:38.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:38.829" starttime="20140222 10:13:38.828"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.829" starttime="20140222 10:13:38.827"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.829" starttime="20140222 10:13:38.825"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.829" starttime="20140222 10:13:38.823"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.829" starttime="20140222 10:13:38.819"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.829" starttime="20140222 10:13:38.819"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.829" starttime="20140222 10:13:38.819"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.829" starttime="20140222 10:13:38.796"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.829" starttime="20140222 10:13:38.796"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140222 10:13:38.830" critical="yes" starttime="20140222 10:13:37.337"></status>
</test>
<test id="s1-s1-t3" name="a_not_b">
<kw type="kw" name="Emergent.Set Variables">
<doc></doc>
<arguments>
<arg>a_not_b</arg>
<arg>15 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140222 10:13:38.836" level="INFO">${name} = a_not_b</msg>
<status status="PASS" endtime="20140222 10:13:38.836" starttime="20140222 10:13:38.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140222 10:13:38.837" level="INFO">${project-file} = a_not_b.proj</msg>
<status status="PASS" endtime="20140222 10:13:38.837" starttime="20140222 10:13:38.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}.css</arg>
</arguments>
<msg timestamp="20140222 10:13:38.837" level="INFO">${script-file} = a_not_b.css</msg>
<status status="PASS" endtime="20140222 10:13:38.837" starttime="20140222 10:13:38.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140222 10:13:38.838" level="INFO">${timeout} = 15 secs</msg>
<status status="PASS" endtime="20140222 10:13:38.838" starttime="20140222 10:13:38.837"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.838" starttime="20140222 10:13:38.835"></status>
</kw>
<kw type="kw" name="Emergent.Set Metrics">
<doc></doc>
<arguments>
<arg>min</arg>
<arg>0.00</arg>
<arg>0.05</arg>
<arg>max</arg>
<arg>0.02</arg>
<arg>0.05</arg>
<arg>avg</arg>
<arg>0.02</arg>
<arg>0.05</arg>
</arguments>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{metrics}</arg>
</arguments>
<msg timestamp="20140222 10:13:38.839" level="INFO">@{metric-list} = [ min | 0.00 | 0.05 | max | 0.02 | 0.05 | avg | 0.02 | 0.05 ]</msg>
<status status="PASS" endtime="20140222 10:13:38.839" starttime="20140222 10:13:38.839"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{metric-list}</arg>
</arguments>
<msg timestamp="20140222 10:13:38.840" level="INFO">@{metric-list} = [ min | 0.00 | 0.05 | max | 0.02 | 0.05 | avg | 0.02 | 0.05 ]</msg>
<status status="PASS" endtime="20140222 10:13:38.840" starttime="20140222 10:13:38.840"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.840" starttime="20140222 10:13:38.838"></status>
</kw>
<kw type="kw" name="Create CSS a_not_b">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Emergent.Create CSS Custom">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${script}</arg>
<arg>\#include "Leabra.css"\n\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.843" html="yes" level="INFO">Created file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.843" starttime="20140222 10:13:38.842"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.843" starttime="20140222 10:13:38.841"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Randomize">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>SetRandom(\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.845" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.845" starttime="20140222 10:13:38.844"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.846" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.847" starttime="20140222 10:13:38.846"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.848" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.848" starttime="20140222 10:13:38.847"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraTrain",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.848" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.849" starttime="20140222 10:13:38.848"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"rnd_init");\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.849" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.849" starttime="20140222 10:13:38.849"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.850" starttime="20140222 10:13:38.843"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard RunProgram">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>LeabraTrain</arg>
<arg>ABNet</arg>
<arg>ABInput_Delay3</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>RunProgram(\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.851" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.851" starttime="20140222 10:13:38.850"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.852" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.852" starttime="20140222 10:13:38.851"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.853" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.853" starttime="20140222 10:13:38.852"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${program}",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.854" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.854" starttime="20140222 10:13:38.853"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${network}",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.855" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.855" starttime="20140222 10:13:38.854"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"InputData",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.856" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.856" starttime="20140222 10:13:38.855"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${data}");\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.857" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.857" starttime="20140222 10:13:38.856"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.857" starttime="20140222 10:13:38.850"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Output">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>OutputANotB</arg>
<arg>TrialOutputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>${method}(\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.858" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.859" starttime="20140222 10:13:38.858"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.859" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.859" starttime="20140222 10:13:38.859"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.860" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.860" starttime="20140222 10:13:38.860"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"OutputData",\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.861" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.861" starttime="20140222 10:13:38.861"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${table}");\n</arg>
</arguments>
<msg timestamp="20140222 10:13:38.862" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:38.862" starttime="20140222 10:13:38.861"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.862" starttime="20140222 10:13:38.857"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:38.862" starttime="20140222 10:13:38.840"></status>
</kw>
<kw type="kw" name="Emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${actuals} = Emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140222 10:13:38.865" level="INFO">Starting process:
emergent -nogui -ni -p a_not_b.proj -s a_not_b.css</msg>
<status status="PASS" endtime="20140222 10:13:38.866" starttime="20140222 10:13:38.864"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140222 10:13:38.866" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140222 10:13:40.468" level="INFO">Process completed.</msg>
<msg timestamp="20140222 10:13:40.469" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140222 10:13:40.468" starttime="20140222 10:13:38.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140222 10:13:40.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140222 10:13:40.471" starttime="20140222 10:13:40.469"></status>
</kw>
<kw type="kw" name="${metrics} = Emergent.Get Results">
<doc></doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
<arg>msg=No results found in output for ${name}: ${output}</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20140222 10:13:40.476" level="INFO">${result} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140222 10:13:40.476" starttime="20140222 10:13:40.475"></status>
</kw>
<msg timestamp="20140222 10:13:40.477" level="INFO">${metrics} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140222 10:13:40.477" starttime="20140222 10:13:40.471"></status>
</kw>
<msg timestamp="20140222 10:13:40.478" level="INFO">${actuals} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140222 10:13:40.478" starttime="20140222 10:13:38.863"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals},</arg>
</arguments>
<msg timestamp="20140222 10:13:40.481" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140222 10:13:40.482" starttime="20140222 10:13:40.479"></status>
</kw>
<kw type="kw" name="${baseline} = Emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${content} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140222 10:13:40.484" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json&lt;/a&gt;'</msg>
<msg timestamp="20140222 10:13:40.485" level="INFO">${content} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 },{ "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 },{ "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 },{ "...</msg>
<status status="PASS" endtime="20140222 10:13:40.485" starttime="20140222 10:13:40.484"></status>
</kw>
<kw type="kw" name="${status}, ${baseline} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.488" starttime="20140222 10:13:40.486"></status>
</kw>
<msg timestamp="20140222 10:13:40.489" level="INFO">${status} = PASS</msg>
<msg timestamp="20140222 10:13:40.489" level="INFO">${baseline} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140222 10:13:40.489" starttime="20140222 10:13:40.486"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${status}</arg>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140222 10:13:40.490" level="INFO">${baseline} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140222 10:13:40.490" starttime="20140222 10:13:40.489"></status>
</kw>
<msg timestamp="20140222 10:13:40.491" level="INFO">${baseline} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140222 10:13:40.491" starttime="20140222 10:13:40.482"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Add To Baseline</arg>
<arg>${baseline-file}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.492" starttime="20140222 10:13:40.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140222 10:13:40.493" level="INFO">${baseline} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140222 10:13:40.493" starttime="20140222 10:13:40.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140222 10:13:40.494" level="INFO">${actuals} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140222 10:13:40.494" starttime="20140222 10:13:40.493"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.494" starttime="20140222 10:13:38.863"></status>
</kw>
<kw type="kw" name="Emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.00, ${required} = 0.05">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:40.502" level="INFO">${match} = "min": 0.582603</msg>
<msg timestamp="20140222 10:13:40.502" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140222 10:13:40.502" starttime="20140222 10:13:40.501"></status>
</kw>
<msg timestamp="20140222 10:13:40.503" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140222 10:13:40.502" starttime="20140222 10:13:40.499"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:40.505" level="INFO">${match} = "min": 0.582603</msg>
<msg timestamp="20140222 10:13:40.506" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140222 10:13:40.505" starttime="20140222 10:13:40.505"></status>
</kw>
<msg timestamp="20140222 10:13:40.506" level="INFO">${target} = 0.582603</msg>
<status status="PASS" endtime="20140222 10:13:40.506" starttime="20140222 10:13:40.503"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.509" level="INFO">${low} = 0.582603</msg>
<status status="PASS" endtime="20140222 10:13:40.509" starttime="20140222 10:13:40.508"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.510" level="INFO">${high} = 0.582603</msg>
<status status="PASS" endtime="20140222 10:13:40.510" starttime="20140222 10:13:40.509"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.513" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:40.512" starttime="20140222 10:13:40.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.513" starttime="20140222 10:13:40.513"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.513" starttime="20140222 10:13:40.511"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.514" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:40.514" starttime="20140222 10:13:40.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.515" starttime="20140222 10:13:40.514"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.515" starttime="20140222 10:13:40.513"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.515" starttime="20140222 10:13:40.510"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.515" starttime="20140222 10:13:40.506"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.515" starttime="20140222 10:13:40.498"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.515" starttime="20140222 10:13:40.497"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.515" starttime="20140222 10:13:40.497"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.02, ${required} = 0.05">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:40.518" level="INFO">${match} = "max": 0.629062</msg>
<msg timestamp="20140222 10:13:40.518" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140222 10:13:40.518" starttime="20140222 10:13:40.517"></status>
</kw>
<msg timestamp="20140222 10:13:40.518" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140222 10:13:40.518" starttime="20140222 10:13:40.517"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:40.519" level="INFO">${match} = "max": 0.629062</msg>
<msg timestamp="20140222 10:13:40.520" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140222 10:13:40.519" starttime="20140222 10:13:40.519"></status>
</kw>
<msg timestamp="20140222 10:13:40.520" level="INFO">${target} = 0.629062</msg>
<status status="PASS" endtime="20140222 10:13:40.520" starttime="20140222 10:13:40.518"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.521" level="INFO">${low} = 0.61648076</msg>
<status status="PASS" endtime="20140222 10:13:40.521" starttime="20140222 10:13:40.521"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.522" level="INFO">${high} = 0.64164324</msg>
<status status="PASS" endtime="20140222 10:13:40.521" starttime="20140222 10:13:40.521"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.524" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:40.523" starttime="20140222 10:13:40.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.524" starttime="20140222 10:13:40.524"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.524" starttime="20140222 10:13:40.522"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.525" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:40.525" starttime="20140222 10:13:40.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.526" starttime="20140222 10:13:40.526"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.526" starttime="20140222 10:13:40.524"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.526" starttime="20140222 10:13:40.522"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.526" starttime="20140222 10:13:40.520"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.526" starttime="20140222 10:13:40.516"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.526" starttime="20140222 10:13:40.516"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.526" starttime="20140222 10:13:40.515"></status>
</kw>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.02, ${required} = 0.05">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:40.529" level="INFO">${match} = "avg": 0.608421</msg>
<msg timestamp="20140222 10:13:40.529" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140222 10:13:40.529" starttime="20140222 10:13:40.528"></status>
</kw>
<msg timestamp="20140222 10:13:40.529" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140222 10:13:40.529" starttime="20140222 10:13:40.528"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:40.530" level="INFO">${match} = "avg": 0.608421</msg>
<msg timestamp="20140222 10:13:40.530" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140222 10:13:40.530" starttime="20140222 10:13:40.530"></status>
</kw>
<msg timestamp="20140222 10:13:40.530" level="INFO">${target} = 0.608421</msg>
<status status="PASS" endtime="20140222 10:13:40.530" starttime="20140222 10:13:40.529"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.532" level="INFO">${low} = 0.59625258</msg>
<status status="PASS" endtime="20140222 10:13:40.532" starttime="20140222 10:13:40.531"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.533" level="INFO">${high} = 0.62058942</msg>
<status status="PASS" endtime="20140222 10:13:40.532" starttime="20140222 10:13:40.532"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.536" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:40.535" starttime="20140222 10:13:40.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.536" starttime="20140222 10:13:40.536"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.536" starttime="20140222 10:13:40.534"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.537" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:40.537" starttime="20140222 10:13:40.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.538" starttime="20140222 10:13:40.538"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.538" starttime="20140222 10:13:40.536"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.538" starttime="20140222 10:13:40.533"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.538" starttime="20140222 10:13:40.531"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.538" starttime="20140222 10:13:40.527"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.538" starttime="20140222 10:13:40.527"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.538" starttime="20140222 10:13:40.526"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.538" starttime="20140222 10:13:40.496"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.539" starttime="20140222 10:13:40.495"></status>
</kw>
<kw type="kw" name="Emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.00, ${required} = 0.05">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:40.542" level="INFO">${match} = "min": 0.582603</msg>
<msg timestamp="20140222 10:13:40.542" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140222 10:13:40.542" starttime="20140222 10:13:40.542"></status>
</kw>
<msg timestamp="20140222 10:13:40.542" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140222 10:13:40.542" starttime="20140222 10:13:40.541"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:40.544" level="INFO">${match} = "min": 0.582603</msg>
<msg timestamp="20140222 10:13:40.544" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140222 10:13:40.544" starttime="20140222 10:13:40.543"></status>
</kw>
<msg timestamp="20140222 10:13:40.544" level="INFO">${target} = 0.582603</msg>
<status status="PASS" endtime="20140222 10:13:40.544" starttime="20140222 10:13:40.543"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.545" level="INFO">${low} = 0.55347285</msg>
<status status="PASS" endtime="20140222 10:13:40.545" starttime="20140222 10:13:40.545"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.546" level="INFO">${high} = 0.61173315</msg>
<status status="PASS" endtime="20140222 10:13:40.546" starttime="20140222 10:13:40.545"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.548" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:40.548" starttime="20140222 10:13:40.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.548" starttime="20140222 10:13:40.548"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.548" starttime="20140222 10:13:40.547"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.550" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:40.549" starttime="20140222 10:13:40.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.550" starttime="20140222 10:13:40.550"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.550" starttime="20140222 10:13:40.548"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.550" starttime="20140222 10:13:40.546"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.550" starttime="20140222 10:13:40.544"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.550" starttime="20140222 10:13:40.540"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.550" starttime="20140222 10:13:40.540"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.551" starttime="20140222 10:13:40.540"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.02, ${required} = 0.05">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:40.553" level="INFO">${match} = "max": 0.629062</msg>
<msg timestamp="20140222 10:13:40.553" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140222 10:13:40.553" starttime="20140222 10:13:40.552"></status>
</kw>
<msg timestamp="20140222 10:13:40.553" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140222 10:13:40.553" starttime="20140222 10:13:40.552"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:40.554" level="INFO">${match} = "max": 0.629062</msg>
<msg timestamp="20140222 10:13:40.554" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140222 10:13:40.554" starttime="20140222 10:13:40.554"></status>
</kw>
<msg timestamp="20140222 10:13:40.555" level="INFO">${target} = 0.629062</msg>
<status status="PASS" endtime="20140222 10:13:40.554" starttime="20140222 10:13:40.553"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.556" level="INFO">${low} = 0.5976089</msg>
<status status="PASS" endtime="20140222 10:13:40.556" starttime="20140222 10:13:40.556"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.557" level="INFO">${high} = 0.6605151</msg>
<status status="PASS" endtime="20140222 10:13:40.556" starttime="20140222 10:13:40.556"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.559" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:40.559" starttime="20140222 10:13:40.558"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.559" starttime="20140222 10:13:40.559"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.559" starttime="20140222 10:13:40.557"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.560" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:40.560" starttime="20140222 10:13:40.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.561" starttime="20140222 10:13:40.561"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.561" starttime="20140222 10:13:40.559"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.561" starttime="20140222 10:13:40.557"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.561" starttime="20140222 10:13:40.555"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.561" starttime="20140222 10:13:40.551"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.561" starttime="20140222 10:13:40.551"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.561" starttime="20140222 10:13:40.551"></status>
</kw>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.02, ${required} = 0.05">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:40.564" level="INFO">${match} = "avg": 0.608421</msg>
<msg timestamp="20140222 10:13:40.564" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140222 10:13:40.564" starttime="20140222 10:13:40.563"></status>
</kw>
<msg timestamp="20140222 10:13:40.564" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140222 10:13:40.564" starttime="20140222 10:13:40.563"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140222 10:13:40.565" level="INFO">${match} = "avg": 0.608421</msg>
<msg timestamp="20140222 10:13:40.565" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140222 10:13:40.565" starttime="20140222 10:13:40.565"></status>
</kw>
<msg timestamp="20140222 10:13:40.565" level="INFO">${target} = 0.608421</msg>
<status status="PASS" endtime="20140222 10:13:40.565" starttime="20140222 10:13:40.564"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.567" level="INFO">${low} = 0.57799995</msg>
<status status="PASS" endtime="20140222 10:13:40.567" starttime="20140222 10:13:40.566"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.567" level="INFO">${high} = 0.63884205</msg>
<status status="PASS" endtime="20140222 10:13:40.567" starttime="20140222 10:13:40.567"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.569" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140222 10:13:40.569" starttime="20140222 10:13:40.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.570" starttime="20140222 10:13:40.569"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.570" starttime="20140222 10:13:40.568"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140222 10:13:40.571" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140222 10:13:40.571" starttime="20140222 10:13:40.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.571" starttime="20140222 10:13:40.571"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.571" starttime="20140222 10:13:40.570"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.572" starttime="20140222 10:13:40.567"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.572" starttime="20140222 10:13:40.566"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.572" starttime="20140222 10:13:40.562"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.572" starttime="20140222 10:13:40.562"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.572" starttime="20140222 10:13:40.561"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.572" starttime="20140222 10:13:40.540"></status>
</kw>
<status status="PASS" endtime="20140222 10:13:40.572" starttime="20140222 10:13:40.539"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140222 10:13:40.572" critical="yes" starttime="20140222 10:13:38.831"></status>
</test>
<kw type="teardown" name="Process.Terminate All Processes">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" endtime="20140222 10:13:40.575" starttime="20140222 10:13:40.575"></status>
</kw>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20140222 10:13:40.575" starttime="20140222 10:13:30.787"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20140222 10:13:40.583" starttime="20140222 10:13:30.754"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" pass="3" id="s1" name="Sub">Sub</stat>
<stat fail="0" pass="3" id="s1-s1" name="Suite">Sub.Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>

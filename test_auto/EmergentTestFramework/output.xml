<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20140215 09:35:11.935" generator="Robot 2.8.3 (Python 2.7.6 on win32)">
<suite source="C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\AllProj.txt" id="s1" name="AllProj">
<kw type="setup" name="Emergent.Suite Variables">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${baseline-file}</arg>
<arg>baseline.json</arg>
</arguments>
<msg timestamp="20140215 09:35:12.002" level="INFO">${baseline-file} = baseline.json</msg>
<status status="PASS" endtime="20140215 09:35:12.002" starttime="20140215 09:35:12.001"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>record.json</arg>
</arguments>
<msg timestamp="20140215 09:35:12.002" level="INFO">${record-file} = record.json</msg>
<status status="PASS" endtime="20140215 09:35:12.003" starttime="20140215 09:35:12.002"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:12.003" starttime="20140215 09:35:12.001"></status>
</kw>
<test id="s1-t1" name="File Test">
<kw type="kw" name="@{files} = OperatingSystem.List Files In Directory">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>.</arg>
<arg>*.proj</arg>
</arguments>
<msg timestamp="20140215 09:35:12.004" html="yes" level="INFO">Listing contents of directory '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework&lt;/a&gt;'.</msg>
<msg timestamp="20140215 09:35:12.005" level="INFO">4 files:
LeabraStd.proj
LeabraStdCopy.proj
LeabraStdEmbedded.proj
a_not_b.proj</msg>
<msg timestamp="20140215 09:35:12.005" level="INFO">@{files} = [ LeabraStd.proj | LeabraStdCopy.proj | LeabraStdEmbedded.proj | a_not_b.proj ]</msg>
<status status="PASS" endtime="20140215 09:35:12.005" starttime="20140215 09:35:12.004"></status>
</kw>
<kw type="for" name="${filename} IN [ @{files} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${filename} = LeabraStd.proj">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${proj} = Get Project From File">
<doc></doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<kw type="kw" name="${match}, ${project} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${filename}</arg>
<arg>(.*)\.proj</arg>
</arguments>
<msg timestamp="20140215 09:35:12.007" level="INFO">${match} = LeabraStd.proj</msg>
<msg timestamp="20140215 09:35:12.007" level="INFO">${project} = LeabraStd</msg>
<status status="PASS" endtime="20140215 09:35:12.007" starttime="20140215 09:35:12.006"></status>
</kw>
<msg timestamp="20140215 09:35:12.007" level="INFO">${proj} = LeabraStd</msg>
<status status="PASS" endtime="20140215 09:35:12.007" starttime="20140215 09:35:12.006"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Default Leabra Test</arg>
<arg>${proj}</arg>
</arguments>
<kw type="kw" name="Default Leabra Test">
<doc></doc>
<arguments>
<arg>${proj}</arg>
</arguments>
<kw type="kw" name="Emergent.Set Variables">
<doc></doc>
<arguments>
<arg>${project}</arg>
<arg>60 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140215 09:35:12.009" level="INFO">${name} = LeabraStd</msg>
<status status="PASS" endtime="20140215 09:35:12.009" starttime="20140215 09:35:12.009"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140215 09:35:12.010" level="INFO">${project-file} = LeabraStd.proj</msg>
<status status="PASS" endtime="20140215 09:35:12.010" starttime="20140215 09:35:12.009"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}.css</arg>
</arguments>
<msg timestamp="20140215 09:35:12.011" level="INFO">${script-file} = LeabraStd.css</msg>
<status status="PASS" endtime="20140215 09:35:12.011" starttime="20140215 09:35:12.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140215 09:35:12.011" level="INFO">${timeout} = 60 secs</msg>
<status status="PASS" endtime="20140215 09:35:12.012" starttime="20140215 09:35:12.011"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:12.012" starttime="20140215 09:35:12.008"></status>
</kw>
<kw type="kw" name="Emergent.Set Metrics">
<doc></doc>
<arguments>
<arg>avg</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{metrics}</arg>
</arguments>
<msg timestamp="20140215 09:35:12.013" level="INFO">@{metric-list} = [ avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140215 09:35:12.013" starttime="20140215 09:35:12.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{metric-list}</arg>
</arguments>
<msg timestamp="20140215 09:35:12.013" level="INFO">@{metric-list} = [ avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140215 09:35:12.013" starttime="20140215 09:35:12.013"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:12.013" starttime="20140215 09:35:12.012"></status>
</kw>
<kw type="kw" name="Create CSS">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Emergent.Create CSS Custom">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${script}</arg>
<arg>\#include "Leabra.css"\n\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.015" html="yes" level="INFO">Created file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.015" starttime="20140215 09:35:12.014"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:12.016" starttime="20140215 09:35:12.014"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Randomize">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>SetRandom(\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.017" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.018" starttime="20140215 09:35:12.016"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.045" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.045" starttime="20140215 09:35:12.018"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.065" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.065" starttime="20140215 09:35:12.046"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraTrain",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.085" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.085" starttime="20140215 09:35:12.065"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"rnd_init");\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.107" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.107" starttime="20140215 09:35:12.085"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:12.107" starttime="20140215 09:35:12.016"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard RunProgram">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>LeabraBatch</arg>
<arg>Network_0</arg>
<arg>StdInputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>RunProgram(\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.128" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.128" starttime="20140215 09:35:12.108"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.150" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.150" starttime="20140215 09:35:12.128"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.171" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.171" starttime="20140215 09:35:12.150"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${program}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.194" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.194" starttime="20140215 09:35:12.172"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${network}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.215" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.215" starttime="20140215 09:35:12.194"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"InputData",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.237" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.237" starttime="20140215 09:35:12.216"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${data}");\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.259" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.260" starttime="20140215 09:35:12.237"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:12.260" starttime="20140215 09:35:12.107"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Output">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>OutputEpochsToTrain</arg>
<arg>EpochOutputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>${method}(\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.281" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.281" starttime="20140215 09:35:12.262"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.302" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.302" starttime="20140215 09:35:12.281"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.322" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.322" starttime="20140215 09:35:12.302"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"OutputData",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.344" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.345" starttime="20140215 09:35:12.323"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${table}");\n</arg>
</arguments>
<msg timestamp="20140215 09:35:12.371" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:12.371" starttime="20140215 09:35:12.345"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:12.371" starttime="20140215 09:35:12.260"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:12.371" starttime="20140215 09:35:12.013"></status>
</kw>
<kw type="kw" name="Emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${actuals} = Emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140215 09:35:12.373" level="INFO">Starting process:
emergent -nogui -ni -p LeabraStd.proj -s LeabraStd.css</msg>
<status status="PASS" endtime="20140215 09:35:12.395" starttime="20140215 09:35:12.373"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140215 09:35:12.396" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140215 09:35:18.600" level="INFO">Process completed.</msg>
<msg timestamp="20140215 09:35:18.600" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140215 09:35:18.600" starttime="20140215 09:35:12.395"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140215 09:35:18.601" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140215 09:35:18.601" starttime="20140215 09:35:18.600"></status>
</kw>
<kw type="kw" name="${metrics} = Emergent.Get Results">
<doc></doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
<arg>msg=No results found in output for ${name}: ${output}</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20140215 09:35:18.602" level="INFO">${result} = { "name": "LeabraStd", "min": 8, "max": 19, "avg": 11.2 }</msg>
<status status="PASS" endtime="20140215 09:35:18.602" starttime="20140215 09:35:18.602"></status>
</kw>
<msg timestamp="20140215 09:35:18.602" level="INFO">${metrics} = { "name": "LeabraStd", "min": 8, "max": 19, "avg": 11.2 }</msg>
<status status="PASS" endtime="20140215 09:35:18.602" starttime="20140215 09:35:18.601"></status>
</kw>
<msg timestamp="20140215 09:35:18.603" level="INFO">${actuals} = { "name": "LeabraStd", "min": 8, "max": 19, "avg": 11.2 }</msg>
<status status="PASS" endtime="20140215 09:35:18.603" starttime="20140215 09:35:12.372"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals},</arg>
</arguments>
<msg timestamp="20140215 09:35:18.604" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.604" starttime="20140215 09:35:18.603"></status>
</kw>
<kw type="kw" name="${baseline} = Emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${content} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140215 09:35:18.606" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json&lt;/a&gt;'</msg>
<msg timestamp="20140215 09:35:18.606" level="INFO">${content} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 },{ "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 },{ "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 },{ "...</msg>
<status status="PASS" endtime="20140215 09:35:18.606" starttime="20140215 09:35:18.605"></status>
</kw>
<kw type="kw" name="${status}, ${baseline} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:18.607" starttime="20140215 09:35:18.607"></status>
</kw>
<msg timestamp="20140215 09:35:18.608" level="INFO">${status} = PASS</msg>
<msg timestamp="20140215 09:35:18.608" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140215 09:35:18.608" starttime="20140215 09:35:18.607"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${status}</arg>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140215 09:35:18.608" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140215 09:35:18.608" starttime="20140215 09:35:18.608"></status>
</kw>
<msg timestamp="20140215 09:35:18.609" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140215 09:35:18.609" starttime="20140215 09:35:18.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Add To Baseline</arg>
<arg>${baseline-file}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:18.609" starttime="20140215 09:35:18.609"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140215 09:35:18.609" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140215 09:35:18.609" starttime="20140215 09:35:18.609"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140215 09:35:18.610" level="INFO">${actuals} = { "name": "LeabraStd", "min": 8, "max": 19, "avg": 11.2 }</msg>
<status status="PASS" endtime="20140215 09:35:18.610" starttime="20140215 09:35:18.610"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.610" starttime="20140215 09:35:12.372"></status>
</kw>
<kw type="kw" name="Emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140215 09:35:18.614" level="INFO">${match} = "avg": 11.2</msg>
<msg timestamp="20140215 09:35:18.614" level="INFO">${value} = 11.2</msg>
<status status="PASS" endtime="20140215 09:35:18.614" starttime="20140215 09:35:18.613"></status>
</kw>
<msg timestamp="20140215 09:35:18.614" level="INFO">${value} = 11.2</msg>
<status status="PASS" endtime="20140215 09:35:18.614" starttime="20140215 09:35:18.612"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140215 09:35:18.616" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140215 09:35:18.616" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140215 09:35:18.615" starttime="20140215 09:35:18.615"></status>
</kw>
<msg timestamp="20140215 09:35:18.616" level="INFO">${target} = 10.9</msg>
<status status="PASS" endtime="20140215 09:35:18.616" starttime="20140215 09:35:18.614"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140215 09:35:18.617" level="INFO">${low} = 9.265</msg>
<status status="PASS" endtime="20140215 09:35:18.617" starttime="20140215 09:35:18.617"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140215 09:35:18.618" level="INFO">${high} = 12.535</msg>
<status status="PASS" endtime="20140215 09:35:18.618" starttime="20140215 09:35:18.617"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140215 09:35:18.620" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140215 09:35:18.620" starttime="20140215 09:35:18.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:18.621" starttime="20140215 09:35:18.620"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.621" starttime="20140215 09:35:18.619"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140215 09:35:18.622" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140215 09:35:18.622" starttime="20140215 09:35:18.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:18.623" starttime="20140215 09:35:18.622"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.623" starttime="20140215 09:35:18.621"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.623" starttime="20140215 09:35:18.618"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.623" starttime="20140215 09:35:18.616"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.623" starttime="20140215 09:35:18.611"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.623" starttime="20140215 09:35:18.611"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.623" starttime="20140215 09:35:18.611"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.623" starttime="20140215 09:35:18.611"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.623" starttime="20140215 09:35:18.610"></status>
</kw>
<kw type="kw" name="Emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140215 09:35:18.627" level="INFO">${match} = "avg": 11.2</msg>
<msg timestamp="20140215 09:35:18.627" level="INFO">${value} = 11.2</msg>
<status status="PASS" endtime="20140215 09:35:18.626" starttime="20140215 09:35:18.626"></status>
</kw>
<msg timestamp="20140215 09:35:18.627" level="INFO">${value} = 11.2</msg>
<status status="PASS" endtime="20140215 09:35:18.627" starttime="20140215 09:35:18.625"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140215 09:35:18.628" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140215 09:35:18.628" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140215 09:35:18.628" starttime="20140215 09:35:18.628"></status>
</kw>
<msg timestamp="20140215 09:35:18.629" level="INFO">${target} = 10.9</msg>
<status status="PASS" endtime="20140215 09:35:18.629" starttime="20140215 09:35:18.627"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140215 09:35:18.630" level="INFO">${low} = 8.175</msg>
<status status="PASS" endtime="20140215 09:35:18.630" starttime="20140215 09:35:18.630"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140215 09:35:18.631" level="INFO">${high} = 13.625</msg>
<status status="PASS" endtime="20140215 09:35:18.631" starttime="20140215 09:35:18.630"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140215 09:35:18.633" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140215 09:35:18.633" starttime="20140215 09:35:18.632"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:18.633" starttime="20140215 09:35:18.633"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.633" starttime="20140215 09:35:18.632"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140215 09:35:18.635" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140215 09:35:18.635" starttime="20140215 09:35:18.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:18.635" starttime="20140215 09:35:18.635"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.635" starttime="20140215 09:35:18.634"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.635" starttime="20140215 09:35:18.631"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.635" starttime="20140215 09:35:18.629"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.636" starttime="20140215 09:35:18.625"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.636" starttime="20140215 09:35:18.624"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.636" starttime="20140215 09:35:18.624"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.636" starttime="20140215 09:35:18.624"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.636" starttime="20140215 09:35:18.624"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.636" starttime="20140215 09:35:12.008"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.636" starttime="20140215 09:35:12.007"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.636" starttime="20140215 09:35:12.006"></status>
</kw>
<kw type="foritem" name="${filename} = LeabraStdCopy.proj">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${proj} = Get Project From File">
<doc></doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<kw type="kw" name="${match}, ${project} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${filename}</arg>
<arg>(.*)\.proj</arg>
</arguments>
<msg timestamp="20140215 09:35:18.637" level="INFO">${match} = LeabraStdCopy.proj</msg>
<msg timestamp="20140215 09:35:18.637" level="INFO">${project} = LeabraStdCopy</msg>
<status status="PASS" endtime="20140215 09:35:18.637" starttime="20140215 09:35:18.637"></status>
</kw>
<msg timestamp="20140215 09:35:18.638" level="INFO">${proj} = LeabraStdCopy</msg>
<status status="PASS" endtime="20140215 09:35:18.638" starttime="20140215 09:35:18.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Default Leabra Test</arg>
<arg>${proj}</arg>
</arguments>
<kw type="kw" name="Default Leabra Test">
<doc></doc>
<arguments>
<arg>${proj}</arg>
</arguments>
<kw type="kw" name="Emergent.Set Variables">
<doc></doc>
<arguments>
<arg>${project}</arg>
<arg>60 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140215 09:35:18.639" level="INFO">${name} = LeabraStdCopy</msg>
<status status="PASS" endtime="20140215 09:35:18.639" starttime="20140215 09:35:18.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140215 09:35:18.640" level="INFO">${project-file} = LeabraStdCopy.proj</msg>
<status status="PASS" endtime="20140215 09:35:18.640" starttime="20140215 09:35:18.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}.css</arg>
</arguments>
<msg timestamp="20140215 09:35:18.640" level="INFO">${script-file} = LeabraStdCopy.css</msg>
<status status="PASS" endtime="20140215 09:35:18.640" starttime="20140215 09:35:18.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140215 09:35:18.641" level="INFO">${timeout} = 60 secs</msg>
<status status="PASS" endtime="20140215 09:35:18.641" starttime="20140215 09:35:18.641"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.641" starttime="20140215 09:35:18.639"></status>
</kw>
<kw type="kw" name="Emergent.Set Metrics">
<doc></doc>
<arguments>
<arg>avg</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{metrics}</arg>
</arguments>
<msg timestamp="20140215 09:35:18.642" level="INFO">@{metric-list} = [ avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140215 09:35:18.642" starttime="20140215 09:35:18.642"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{metric-list}</arg>
</arguments>
<msg timestamp="20140215 09:35:18.642" level="INFO">@{metric-list} = [ avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140215 09:35:18.642" starttime="20140215 09:35:18.642"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.642" starttime="20140215 09:35:18.641"></status>
</kw>
<kw type="kw" name="Create CSS">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Emergent.Create CSS Custom">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${script}</arg>
<arg>\#include "Leabra.css"\n\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.645" html="yes" level="INFO">Created file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.645" starttime="20140215 09:35:18.644"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.645" starttime="20140215 09:35:18.643"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Randomize">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>SetRandom(\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.647" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.647" starttime="20140215 09:35:18.646"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.649" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.649" starttime="20140215 09:35:18.648"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.650" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.650" starttime="20140215 09:35:18.649"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraTrain",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.651" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.652" starttime="20140215 09:35:18.650"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"rnd_init");\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.653" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.653" starttime="20140215 09:35:18.652"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.653" starttime="20140215 09:35:18.645"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard RunProgram">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>LeabraBatch</arg>
<arg>Network_0</arg>
<arg>StdInputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>RunProgram(\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.655" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.655" starttime="20140215 09:35:18.654"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.656" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.657" starttime="20140215 09:35:18.655"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.658" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.658" starttime="20140215 09:35:18.657"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${program}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.677" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.677" starttime="20140215 09:35:18.658"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${network}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.696" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.697" starttime="20140215 09:35:18.677"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"InputData",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.717" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.717" starttime="20140215 09:35:18.697"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${data}");\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.738" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.738" starttime="20140215 09:35:18.717"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.739" starttime="20140215 09:35:18.653"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Output">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>OutputEpochsToTrain</arg>
<arg>EpochOutputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>${method}(\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.758" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.759" starttime="20140215 09:35:18.740"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.778" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.778" starttime="20140215 09:35:18.759"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.796" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.796" starttime="20140215 09:35:18.779"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"OutputData",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.816" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.816" starttime="20140215 09:35:18.797"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${table}");\n</arg>
</arguments>
<msg timestamp="20140215 09:35:18.835" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdCopy.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:18.835" starttime="20140215 09:35:18.816"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.835" starttime="20140215 09:35:18.739"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:18.836" starttime="20140215 09:35:18.643"></status>
</kw>
<kw type="kw" name="Emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${actuals} = Emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140215 09:35:18.839" level="INFO">Starting process:
emergent -nogui -ni -p LeabraStdCopy.proj -s LeabraStdCopy.css</msg>
<status status="PASS" endtime="20140215 09:35:18.841" starttime="20140215 09:35:18.838"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140215 09:35:18.841" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140215 09:35:25.447" level="INFO">Process completed.</msg>
<msg timestamp="20140215 09:35:25.447" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140215 09:35:25.447" starttime="20140215 09:35:18.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140215 09:35:25.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140215 09:35:25.448" starttime="20140215 09:35:25.447"></status>
</kw>
<kw type="kw" name="${metrics} = Emergent.Get Results">
<doc></doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
<arg>msg=No results found in output for ${name}: ${output}</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20140215 09:35:25.449" level="INFO">${result} = { "name": "LeabraStdCopy", "min": 8, "max": 21, "avg": 11.7 }</msg>
<status status="PASS" endtime="20140215 09:35:25.449" starttime="20140215 09:35:25.449"></status>
</kw>
<msg timestamp="20140215 09:35:25.449" level="INFO">${metrics} = { "name": "LeabraStdCopy", "min": 8, "max": 21, "avg": 11.7 }</msg>
<status status="PASS" endtime="20140215 09:35:25.449" starttime="20140215 09:35:25.448"></status>
</kw>
<msg timestamp="20140215 09:35:25.450" level="INFO">${actuals} = { "name": "LeabraStdCopy", "min": 8, "max": 21, "avg": 11.7 }</msg>
<status status="PASS" endtime="20140215 09:35:25.449" starttime="20140215 09:35:18.837"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals},</arg>
</arguments>
<msg timestamp="20140215 09:35:25.451" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.451" starttime="20140215 09:35:25.450"></status>
</kw>
<kw type="kw" name="${baseline} = Emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${content} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140215 09:35:25.452" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json&lt;/a&gt;'</msg>
<msg timestamp="20140215 09:35:25.453" level="INFO">${content} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 },{ "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 },{ "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 },{ "...</msg>
<status status="PASS" endtime="20140215 09:35:25.453" starttime="20140215 09:35:25.452"></status>
</kw>
<kw type="kw" name="${status}, ${baseline} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:25.454" starttime="20140215 09:35:25.454"></status>
</kw>
<msg timestamp="20140215 09:35:25.454" level="INFO">${status} = PASS</msg>
<msg timestamp="20140215 09:35:25.454" level="INFO">${baseline} = { "name": "LeabraStdCopy", "min": 8, "max": 14, "avg": 11 }</msg>
<status status="PASS" endtime="20140215 09:35:25.454" starttime="20140215 09:35:25.453"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${status}</arg>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140215 09:35:25.455" level="INFO">${baseline} = { "name": "LeabraStdCopy", "min": 8, "max": 14, "avg": 11 }</msg>
<status status="PASS" endtime="20140215 09:35:25.455" starttime="20140215 09:35:25.455"></status>
</kw>
<msg timestamp="20140215 09:35:25.455" level="INFO">${baseline} = { "name": "LeabraStdCopy", "min": 8, "max": 14, "avg": 11 }</msg>
<status status="PASS" endtime="20140215 09:35:25.455" starttime="20140215 09:35:25.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Add To Baseline</arg>
<arg>${baseline-file}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:25.456" starttime="20140215 09:35:25.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140215 09:35:25.456" level="INFO">${baseline} = { "name": "LeabraStdCopy", "min": 8, "max": 14, "avg": 11 }</msg>
<status status="PASS" endtime="20140215 09:35:25.456" starttime="20140215 09:35:25.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140215 09:35:25.457" level="INFO">${actuals} = { "name": "LeabraStdCopy", "min": 8, "max": 21, "avg": 11.7 }</msg>
<status status="PASS" endtime="20140215 09:35:25.457" starttime="20140215 09:35:25.456"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.457" starttime="20140215 09:35:18.836"></status>
</kw>
<kw type="kw" name="Emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140215 09:35:25.461" level="INFO">${match} = "avg": 11.7</msg>
<msg timestamp="20140215 09:35:25.461" level="INFO">${value} = 11.7</msg>
<status status="PASS" endtime="20140215 09:35:25.461" starttime="20140215 09:35:25.460"></status>
</kw>
<msg timestamp="20140215 09:35:25.462" level="INFO">${value} = 11.7</msg>
<status status="PASS" endtime="20140215 09:35:25.462" starttime="20140215 09:35:25.460"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140215 09:35:25.464" level="INFO">${match} = "avg": 11</msg>
<msg timestamp="20140215 09:35:25.464" level="INFO">${value} = 11</msg>
<status status="PASS" endtime="20140215 09:35:25.464" starttime="20140215 09:35:25.463"></status>
</kw>
<msg timestamp="20140215 09:35:25.464" level="INFO">${target} = 11</msg>
<status status="PASS" endtime="20140215 09:35:25.464" starttime="20140215 09:35:25.462"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140215 09:35:25.467" level="INFO">${low} = 9.35</msg>
<status status="PASS" endtime="20140215 09:35:25.467" starttime="20140215 09:35:25.466"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140215 09:35:25.468" level="INFO">${high} = 12.65</msg>
<status status="PASS" endtime="20140215 09:35:25.467" starttime="20140215 09:35:25.467"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140215 09:35:25.471" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140215 09:35:25.471" starttime="20140215 09:35:25.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:25.472" starttime="20140215 09:35:25.471"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.472" starttime="20140215 09:35:25.469"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140215 09:35:25.475" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140215 09:35:25.474" starttime="20140215 09:35:25.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:25.475" starttime="20140215 09:35:25.475"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.476" starttime="20140215 09:35:25.472"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.476" starttime="20140215 09:35:25.468"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.476" starttime="20140215 09:35:25.465"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.476" starttime="20140215 09:35:25.459"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.476" starttime="20140215 09:35:25.458"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.476" starttime="20140215 09:35:25.458"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.476" starttime="20140215 09:35:25.458"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.476" starttime="20140215 09:35:25.457"></status>
</kw>
<kw type="kw" name="Emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140215 09:35:25.480" level="INFO">${match} = "avg": 11.7</msg>
<msg timestamp="20140215 09:35:25.480" level="INFO">${value} = 11.7</msg>
<status status="PASS" endtime="20140215 09:35:25.480" starttime="20140215 09:35:25.479"></status>
</kw>
<msg timestamp="20140215 09:35:25.480" level="INFO">${value} = 11.7</msg>
<status status="PASS" endtime="20140215 09:35:25.480" starttime="20140215 09:35:25.479"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140215 09:35:25.481" level="INFO">${match} = "avg": 11</msg>
<msg timestamp="20140215 09:35:25.481" level="INFO">${value} = 11</msg>
<status status="PASS" endtime="20140215 09:35:25.481" starttime="20140215 09:35:25.481"></status>
</kw>
<msg timestamp="20140215 09:35:25.482" level="INFO">${target} = 11</msg>
<status status="PASS" endtime="20140215 09:35:25.482" starttime="20140215 09:35:25.480"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140215 09:35:25.483" level="INFO">${low} = 8.25</msg>
<status status="PASS" endtime="20140215 09:35:25.483" starttime="20140215 09:35:25.483"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140215 09:35:25.484" level="INFO">${high} = 13.75</msg>
<status status="PASS" endtime="20140215 09:35:25.484" starttime="20140215 09:35:25.483"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140215 09:35:25.486" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140215 09:35:25.486" starttime="20140215 09:35:25.486"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:25.486" starttime="20140215 09:35:25.486"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.486" starttime="20140215 09:35:25.485"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140215 09:35:25.488" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140215 09:35:25.488" starttime="20140215 09:35:25.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:25.488" starttime="20140215 09:35:25.488"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.488" starttime="20140215 09:35:25.487"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.488" starttime="20140215 09:35:25.484"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.489" starttime="20140215 09:35:25.482"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.489" starttime="20140215 09:35:25.478"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.489" starttime="20140215 09:35:25.478"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.489" starttime="20140215 09:35:25.477"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.489" starttime="20140215 09:35:25.477"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.489" starttime="20140215 09:35:25.476"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.489" starttime="20140215 09:35:18.638"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.489" starttime="20140215 09:35:18.638"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.489" starttime="20140215 09:35:18.636"></status>
</kw>
<kw type="foritem" name="${filename} = LeabraStdEmbedded.proj">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${proj} = Get Project From File">
<doc></doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<kw type="kw" name="${match}, ${project} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${filename}</arg>
<arg>(.*)\.proj</arg>
</arguments>
<msg timestamp="20140215 09:35:25.490" level="INFO">${match} = LeabraStdEmbedded.proj</msg>
<msg timestamp="20140215 09:35:25.490" level="INFO">${project} = LeabraStdEmbedded</msg>
<status status="PASS" endtime="20140215 09:35:25.490" starttime="20140215 09:35:25.490"></status>
</kw>
<msg timestamp="20140215 09:35:25.491" level="INFO">${proj} = LeabraStdEmbedded</msg>
<status status="PASS" endtime="20140215 09:35:25.491" starttime="20140215 09:35:25.489"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Default Leabra Test</arg>
<arg>${proj}</arg>
</arguments>
<kw type="kw" name="Default Leabra Test">
<doc></doc>
<arguments>
<arg>${proj}</arg>
</arguments>
<kw type="kw" name="Emergent.Set Variables">
<doc></doc>
<arguments>
<arg>${project}</arg>
<arg>60 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140215 09:35:25.492" level="INFO">${name} = LeabraStdEmbedded</msg>
<status status="PASS" endtime="20140215 09:35:25.493" starttime="20140215 09:35:25.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140215 09:35:25.493" level="INFO">${project-file} = LeabraStdEmbedded.proj</msg>
<status status="PASS" endtime="20140215 09:35:25.493" starttime="20140215 09:35:25.493"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}.css</arg>
</arguments>
<msg timestamp="20140215 09:35:25.493" level="INFO">${script-file} = LeabraStdEmbedded.css</msg>
<status status="PASS" endtime="20140215 09:35:25.493" starttime="20140215 09:35:25.493"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140215 09:35:25.494" level="INFO">${timeout} = 60 secs</msg>
<status status="PASS" endtime="20140215 09:35:25.494" starttime="20140215 09:35:25.494"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.494" starttime="20140215 09:35:25.492"></status>
</kw>
<kw type="kw" name="Emergent.Set Metrics">
<doc></doc>
<arguments>
<arg>avg</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{metrics}</arg>
</arguments>
<msg timestamp="20140215 09:35:25.495" level="INFO">@{metric-list} = [ avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140215 09:35:25.495" starttime="20140215 09:35:25.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{metric-list}</arg>
</arguments>
<msg timestamp="20140215 09:35:25.495" level="INFO">@{metric-list} = [ avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140215 09:35:25.495" starttime="20140215 09:35:25.495"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.495" starttime="20140215 09:35:25.494"></status>
</kw>
<kw type="kw" name="Create CSS">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Emergent.Create CSS Custom">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${script}</arg>
<arg>\#include "Leabra.css"\n\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.498" html="yes" level="INFO">Created file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.498" starttime="20140215 09:35:25.497"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.498" starttime="20140215 09:35:25.496"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Randomize">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>SetRandom(\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.500" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.500" starttime="20140215 09:35:25.499"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.501" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.502" starttime="20140215 09:35:25.501"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.519" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.519" starttime="20140215 09:35:25.502"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraTrain",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.539" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.539" starttime="20140215 09:35:25.520"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"rnd_init");\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.559" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.559" starttime="20140215 09:35:25.539"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.559" starttime="20140215 09:35:25.498"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard RunProgram">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>LeabraBatch</arg>
<arg>Network_0</arg>
<arg>StdInputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>RunProgram(\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.579" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.579" starttime="20140215 09:35:25.560"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.599" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.599" starttime="20140215 09:35:25.580"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.618" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.618" starttime="20140215 09:35:25.599"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${program}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.638" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.638" starttime="20140215 09:35:25.619"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${network}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.658" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.658" starttime="20140215 09:35:25.638"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"InputData",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.677" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.677" starttime="20140215 09:35:25.658"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${data}");\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.705" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.705" starttime="20140215 09:35:25.678"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.706" starttime="20140215 09:35:25.559"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Output">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>OutputEpochsToTrain</arg>
<arg>EpochOutputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>${method}(\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.728" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.728" starttime="20140215 09:35:25.707"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.750" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.750" starttime="20140215 09:35:25.728"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.769" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.769" starttime="20140215 09:35:25.751"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"OutputData",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.795" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.795" starttime="20140215 09:35:25.770"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${table}");\n</arg>
</arguments>
<msg timestamp="20140215 09:35:25.817" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:25.817" starttime="20140215 09:35:25.795"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.818" starttime="20140215 09:35:25.706"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:25.818" starttime="20140215 09:35:25.495"></status>
</kw>
<kw type="kw" name="Emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${actuals} = Emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140215 09:35:25.821" level="INFO">Starting process:
emergent -nogui -ni -p LeabraStdEmbedded.proj -s LeabraStdEmbedded.css</msg>
<status status="PASS" endtime="20140215 09:35:25.834" starttime="20140215 09:35:25.821"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140215 09:35:25.835" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140215 09:35:31.841" level="INFO">Process completed.</msg>
<msg timestamp="20140215 09:35:31.841" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140215 09:35:31.841" starttime="20140215 09:35:25.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140215 09:35:31.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140215 09:35:31.842" starttime="20140215 09:35:31.841"></status>
</kw>
<kw type="kw" name="${metrics} = Emergent.Get Results">
<doc></doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
<arg>msg=No results found in output for ${name}: ${output}</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20140215 09:35:31.844" level="INFO">${result} = { "name": "LeabraStdEmbedded", "min": 9, "max": 15, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140215 09:35:31.844" starttime="20140215 09:35:31.843"></status>
</kw>
<msg timestamp="20140215 09:35:31.844" level="INFO">${metrics} = { "name": "LeabraStdEmbedded", "min": 9, "max": 15, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140215 09:35:31.844" starttime="20140215 09:35:31.842"></status>
</kw>
<msg timestamp="20140215 09:35:31.844" level="INFO">${actuals} = { "name": "LeabraStdEmbedded", "min": 9, "max": 15, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140215 09:35:31.844" starttime="20140215 09:35:25.819"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals},</arg>
</arguments>
<msg timestamp="20140215 09:35:31.845" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.846" starttime="20140215 09:35:31.845"></status>
</kw>
<kw type="kw" name="${baseline} = Emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${content} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140215 09:35:31.848" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json&lt;/a&gt;'</msg>
<msg timestamp="20140215 09:35:31.848" level="INFO">${content} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 },{ "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 },{ "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 },{ "...</msg>
<status status="PASS" endtime="20140215 09:35:31.848" starttime="20140215 09:35:31.847"></status>
</kw>
<kw type="kw" name="${status}, ${baseline} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:31.850" starttime="20140215 09:35:31.849"></status>
</kw>
<msg timestamp="20140215 09:35:31.850" level="INFO">${status} = PASS</msg>
<msg timestamp="20140215 09:35:31.851" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140215 09:35:31.850" starttime="20140215 09:35:31.848"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${status}</arg>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140215 09:35:31.852" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140215 09:35:31.851" starttime="20140215 09:35:31.851"></status>
</kw>
<msg timestamp="20140215 09:35:31.852" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140215 09:35:31.852" starttime="20140215 09:35:31.846"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Add To Baseline</arg>
<arg>${baseline-file}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:31.853" starttime="20140215 09:35:31.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140215 09:35:31.853" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140215 09:35:31.853" starttime="20140215 09:35:31.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140215 09:35:31.854" level="INFO">${actuals} = { "name": "LeabraStdEmbedded", "min": 9, "max": 15, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140215 09:35:31.854" starttime="20140215 09:35:31.854"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.854" starttime="20140215 09:35:25.818"></status>
</kw>
<kw type="kw" name="Emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140215 09:35:31.859" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140215 09:35:31.859" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140215 09:35:31.859" starttime="20140215 09:35:31.859"></status>
</kw>
<msg timestamp="20140215 09:35:31.860" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140215 09:35:31.860" starttime="20140215 09:35:31.858"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140215 09:35:31.861" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140215 09:35:31.861" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140215 09:35:31.861" starttime="20140215 09:35:31.861"></status>
</kw>
<msg timestamp="20140215 09:35:31.861" level="INFO">${target} = 10.9</msg>
<status status="PASS" endtime="20140215 09:35:31.861" starttime="20140215 09:35:31.860"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140215 09:35:31.863" level="INFO">${low} = 9.265</msg>
<status status="PASS" endtime="20140215 09:35:31.863" starttime="20140215 09:35:31.862"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140215 09:35:31.863" level="INFO">${high} = 12.535</msg>
<status status="PASS" endtime="20140215 09:35:31.863" starttime="20140215 09:35:31.863"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140215 09:35:31.865" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140215 09:35:31.865" starttime="20140215 09:35:31.865"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:31.866" starttime="20140215 09:35:31.866"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.866" starttime="20140215 09:35:31.864"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140215 09:35:31.867" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140215 09:35:31.867" starttime="20140215 09:35:31.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:31.868" starttime="20140215 09:35:31.868"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.868" starttime="20140215 09:35:31.866"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.868" starttime="20140215 09:35:31.863"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.868" starttime="20140215 09:35:31.861"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.868" starttime="20140215 09:35:31.856"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.868" starttime="20140215 09:35:31.856"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.868" starttime="20140215 09:35:31.856"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.868" starttime="20140215 09:35:31.855"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.869" starttime="20140215 09:35:31.855"></status>
</kw>
<kw type="kw" name="Emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140215 09:35:31.874" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140215 09:35:31.874" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140215 09:35:31.874" starttime="20140215 09:35:31.873"></status>
</kw>
<msg timestamp="20140215 09:35:31.874" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140215 09:35:31.874" starttime="20140215 09:35:31.872"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140215 09:35:31.876" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140215 09:35:31.876" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140215 09:35:31.876" starttime="20140215 09:35:31.875"></status>
</kw>
<msg timestamp="20140215 09:35:31.876" level="INFO">${target} = 10.9</msg>
<status status="PASS" endtime="20140215 09:35:31.876" starttime="20140215 09:35:31.874"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140215 09:35:31.877" level="INFO">${low} = 8.175</msg>
<status status="PASS" endtime="20140215 09:35:31.877" starttime="20140215 09:35:31.877"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140215 09:35:31.878" level="INFO">${high} = 13.625</msg>
<status status="PASS" endtime="20140215 09:35:31.878" starttime="20140215 09:35:31.878"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140215 09:35:31.880" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140215 09:35:31.880" starttime="20140215 09:35:31.880"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:31.881" starttime="20140215 09:35:31.880"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.881" starttime="20140215 09:35:31.879"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140215 09:35:31.882" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140215 09:35:31.882" starttime="20140215 09:35:31.882"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:31.883" starttime="20140215 09:35:31.883"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.883" starttime="20140215 09:35:31.881"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.883" starttime="20140215 09:35:31.878"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.883" starttime="20140215 09:35:31.876"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.883" starttime="20140215 09:35:31.871"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.883" starttime="20140215 09:35:31.870"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.883" starttime="20140215 09:35:31.870"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.883" starttime="20140215 09:35:31.869"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.883" starttime="20140215 09:35:31.869"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.884" starttime="20140215 09:35:25.491"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.884" starttime="20140215 09:35:25.491"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.884" starttime="20140215 09:35:25.489"></status>
</kw>
<kw type="foritem" name="${filename} = a_not_b.proj">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${proj} = Get Project From File">
<doc></doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<kw type="kw" name="${match}, ${project} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${filename}</arg>
<arg>(.*)\.proj</arg>
</arguments>
<msg timestamp="20140215 09:35:31.885" level="INFO">${match} = a_not_b.proj</msg>
<msg timestamp="20140215 09:35:31.885" level="INFO">${project} = a_not_b</msg>
<status status="PASS" endtime="20140215 09:35:31.885" starttime="20140215 09:35:31.885"></status>
</kw>
<msg timestamp="20140215 09:35:31.885" level="INFO">${proj} = a_not_b</msg>
<status status="PASS" endtime="20140215 09:35:31.885" starttime="20140215 09:35:31.884"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Default Leabra Test</arg>
<arg>${proj}</arg>
</arguments>
<kw type="kw" name="Default Leabra Test">
<doc></doc>
<arguments>
<arg>${proj}</arg>
</arguments>
<kw type="kw" name="Emergent.Set Variables">
<doc></doc>
<arguments>
<arg>${project}</arg>
<arg>60 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140215 09:35:31.887" level="INFO">${name} = a_not_b</msg>
<status status="PASS" endtime="20140215 09:35:31.887" starttime="20140215 09:35:31.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140215 09:35:31.888" level="INFO">${project-file} = a_not_b.proj</msg>
<status status="PASS" endtime="20140215 09:35:31.888" starttime="20140215 09:35:31.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}.css</arg>
</arguments>
<msg timestamp="20140215 09:35:31.888" level="INFO">${script-file} = a_not_b.css</msg>
<status status="PASS" endtime="20140215 09:35:31.888" starttime="20140215 09:35:31.888"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140215 09:35:31.889" level="INFO">${timeout} = 60 secs</msg>
<status status="PASS" endtime="20140215 09:35:31.889" starttime="20140215 09:35:31.888"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.889" starttime="20140215 09:35:31.886"></status>
</kw>
<kw type="kw" name="Emergent.Set Metrics">
<doc></doc>
<arguments>
<arg>avg</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{metrics}</arg>
</arguments>
<msg timestamp="20140215 09:35:31.891" level="INFO">@{metric-list} = [ avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140215 09:35:31.890" starttime="20140215 09:35:31.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{metric-list}</arg>
</arguments>
<msg timestamp="20140215 09:35:31.891" level="INFO">@{metric-list} = [ avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140215 09:35:31.891" starttime="20140215 09:35:31.891"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.891" starttime="20140215 09:35:31.889"></status>
</kw>
<kw type="kw" name="Create CSS">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Emergent.Create CSS Custom">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${script}</arg>
<arg>\#include "Leabra.css"\n\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.894" html="yes" level="INFO">Created file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.894" starttime="20140215 09:35:31.893"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.894" starttime="20140215 09:35:31.892"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Randomize">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>SetRandom(\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.896" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.896" starttime="20140215 09:35:31.895"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.897" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.897" starttime="20140215 09:35:31.896"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.899" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.899" starttime="20140215 09:35:31.898"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraTrain",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.900" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.900" starttime="20140215 09:35:31.899"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"rnd_init");\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.902" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.902" starttime="20140215 09:35:31.901"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.902" starttime="20140215 09:35:31.894"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard RunProgram">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>LeabraBatch</arg>
<arg>Network_0</arg>
<arg>StdInputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>RunProgram(\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.904" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.904" starttime="20140215 09:35:31.903"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.905" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.906" starttime="20140215 09:35:31.904"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.907" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.907" starttime="20140215 09:35:31.906"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${program}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.928" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.929" starttime="20140215 09:35:31.907"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${network}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.948" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.948" starttime="20140215 09:35:31.929"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"InputData",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.969" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.969" starttime="20140215 09:35:31.949"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${data}");\n</arg>
</arguments>
<msg timestamp="20140215 09:35:31.991" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:31.992" starttime="20140215 09:35:31.969"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:31.993" starttime="20140215 09:35:31.902"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Output">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>OutputEpochsToTrain</arg>
<arg>EpochOutputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>${method}(\n</arg>
</arguments>
<msg timestamp="20140215 09:35:32.013" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:32.014" starttime="20140215 09:35:31.994"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:32.036" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:32.036" starttime="20140215 09:35:32.014"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:32.057" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:32.057" starttime="20140215 09:35:32.036"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"OutputData",\n</arg>
</arguments>
<msg timestamp="20140215 09:35:32.078" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:32.078" starttime="20140215 09:35:32.057"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${table}");\n</arg>
</arguments>
<msg timestamp="20140215 09:35:32.099" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140215 09:35:32.099" starttime="20140215 09:35:32.078"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:32.099" starttime="20140215 09:35:31.993"></status>
</kw>
<status status="PASS" endtime="20140215 09:35:32.099" starttime="20140215 09:35:31.891"></status>
</kw>
<kw type="kw" name="Emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${actuals} = Emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140215 09:35:32.102" level="INFO">Starting process:
emergent -nogui -ni -p a_not_b.proj -s a_not_b.css</msg>
<status status="PASS" endtime="20140215 09:35:32.117" starttime="20140215 09:35:32.102"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140215 09:35:32.118" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140215 09:35:33.621" level="INFO">Process completed.</msg>
<msg timestamp="20140215 09:35:33.621" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140215 09:35:33.621" starttime="20140215 09:35:32.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140215 09:35:33.622" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140215 09:35:33.622" starttime="20140215 09:35:33.621"></status>
</kw>
<kw type="kw" name="${metrics} = Emergent.Get Results">
<doc></doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
<arg>msg=No results found in output for ${name}: ${output}</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20140215 09:35:33.624" level="FAIL">No results found in output for a_not_b: </msg>
<status status="FAIL" endtime="20140215 09:35:33.625" starttime="20140215 09:35:33.623"></status>
</kw>
<status status="FAIL" endtime="20140215 09:35:33.625" starttime="20140215 09:35:33.622"></status>
</kw>
<status status="FAIL" endtime="20140215 09:35:33.625" starttime="20140215 09:35:32.100"></status>
</kw>
<status status="FAIL" endtime="20140215 09:35:33.625" starttime="20140215 09:35:32.100"></status>
</kw>
<status status="FAIL" endtime="20140215 09:35:33.625" starttime="20140215 09:35:31.885"></status>
</kw>
<status status="FAIL" endtime="20140215 09:35:33.625" starttime="20140215 09:35:31.885"></status>
</kw>
<status status="FAIL" endtime="20140215 09:35:33.625" starttime="20140215 09:35:31.884"></status>
</kw>
<status status="FAIL" endtime="20140215 09:35:33.626" starttime="20140215 09:35:12.005"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="FAIL" endtime="20140215 09:35:33.626" critical="yes" starttime="20140215 09:35:12.003">No results found in output for a_not_b: </status>
</test>
<kw type="teardown" name="Process.Terminate All Processes">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" endtime="20140215 09:35:33.628" starttime="20140215 09:35:33.627"></status>
</kw>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20140215 09:35:33.628" starttime="20140215 09:35:11.936"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" pass="0" id="s1" name="AllProj">AllProj</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>

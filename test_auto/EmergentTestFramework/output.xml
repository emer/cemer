<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20140214 15:43:48.944" generator="Robot 2.8.3 (Python 2.7.6 on win32)">
<suite source="C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\Suite.txt" id="s1" name="Suite">
<kw type="setup" name="Emergent.Suite Variables">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${baseline-file}</arg>
<arg>baseline.json</arg>
</arguments>
<msg timestamp="20140214 15:43:49.002" level="INFO">${baseline-file} = baseline.json</msg>
<status status="PASS" endtime="20140214 15:43:49.002" starttime="20140214 15:43:49.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>record.json</arg>
</arguments>
<msg timestamp="20140214 15:43:49.002" level="INFO">${record-file} = record.json</msg>
<status status="PASS" endtime="20140214 15:43:49.003" starttime="20140214 15:43:49.002"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:49.003" starttime="20140214 15:43:49.001"></status>
</kw>
<test id="s1-t1" name="LeabraStd">
<kw type="kw" name="Emergent.Set Variables">
<doc></doc>
<arguments>
<arg>LeabraStd</arg>
<arg>30 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140214 15:43:49.004" level="INFO">${name} = LeabraStd</msg>
<status status="PASS" endtime="20140214 15:43:49.004" starttime="20140214 15:43:49.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140214 15:43:49.005" level="INFO">${project-file} = LeabraStd.proj</msg>
<status status="PASS" endtime="20140214 15:43:49.005" starttime="20140214 15:43:49.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}.css</arg>
</arguments>
<msg timestamp="20140214 15:43:49.005" level="INFO">${script-file} = LeabraStd.css</msg>
<status status="PASS" endtime="20140214 15:43:49.005" starttime="20140214 15:43:49.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140214 15:43:49.006" level="INFO">${timeout} = 30 secs</msg>
<status status="PASS" endtime="20140214 15:43:49.006" starttime="20140214 15:43:49.006"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:49.006" starttime="20140214 15:43:49.003"></status>
</kw>
<kw type="kw" name="Emergent.Set Metrics">
<doc></doc>
<arguments>
<arg>min</arg>
<arg>0.20</arg>
<arg>0.35</arg>
<arg>max</arg>
<arg>0.40</arg>
<arg>0.80</arg>
<arg>avg</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{metrics}</arg>
</arguments>
<msg timestamp="20140214 15:43:49.008" level="INFO">@{metric-list} = [ min | 0.20 | 0.35 | max | 0.40 | 0.80 | avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140214 15:43:49.008" starttime="20140214 15:43:49.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{metric-list}</arg>
</arguments>
<msg timestamp="20140214 15:43:49.008" level="INFO">@{metric-list} = [ min | 0.20 | 0.35 | max | 0.40 | 0.80 | avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140214 15:43:49.008" starttime="20140214 15:43:49.008"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:49.008" starttime="20140214 15:43:49.007"></status>
</kw>
<kw type="kw" name="Create CSS LeabraStd">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Emergent.Create CSS Custom">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${script}</arg>
<arg>\#include "Leabra.css"\n\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.011" html="yes" level="INFO">Created file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.012" starttime="20140214 15:43:49.010"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:49.012" starttime="20140214 15:43:49.009"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Randomize">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>SetRandom(\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.014" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.014" starttime="20140214 15:43:49.013"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.015" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.015" starttime="20140214 15:43:49.014"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.016" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.016" starttime="20140214 15:43:49.015"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraTrain",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.018" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.018" starttime="20140214 15:43:49.017"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"rnd_init");\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.038" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.038" starttime="20140214 15:43:49.018"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:49.038" starttime="20140214 15:43:49.012"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard RunProgram">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>LeabraBatch</arg>
<arg>Network_0</arg>
<arg>StdInputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>RunProgram(\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.057" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.058" starttime="20140214 15:43:49.040"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.077" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.077" starttime="20140214 15:43:49.058"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.098" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.098" starttime="20140214 15:43:49.077"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${program}",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.117" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.118" starttime="20140214 15:43:49.098"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${network}",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.136" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.136" starttime="20140214 15:43:49.118"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"InputData",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.155" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.155" starttime="20140214 15:43:49.136"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${data}");\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.174" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.174" starttime="20140214 15:43:49.155"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:49.174" starttime="20140214 15:43:49.038"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Output">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>OutputEpochsToTrain</arg>
<arg>EpochOutputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>${method}(\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.193" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.193" starttime="20140214 15:43:49.175"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.211" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.211" starttime="20140214 15:43:49.193"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.230" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.230" starttime="20140214 15:43:49.212"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"OutputData",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.249" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.249" starttime="20140214 15:43:49.231"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${table}");\n</arg>
</arguments>
<msg timestamp="20140214 15:43:49.269" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStd.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:49.270" starttime="20140214 15:43:49.249"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:49.270" starttime="20140214 15:43:49.174"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:49.270" starttime="20140214 15:43:49.009"></status>
</kw>
<kw type="kw" name="Emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${baseline} = Emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${content} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140214 15:43:49.272" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json&lt;/a&gt;'</msg>
<msg timestamp="20140214 15:43:49.272" level="INFO">${content} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 },{ "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 },{ "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 },</msg>
<status status="PASS" endtime="20140214 15:43:49.272" starttime="20140214 15:43:49.271"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<msg timestamp="20140214 15:43:49.273" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140214 15:43:49.273" starttime="20140214 15:43:49.273"></status>
</kw>
<msg timestamp="20140214 15:43:49.274" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140214 15:43:49.273" starttime="20140214 15:43:49.271"></status>
</kw>
<kw type="kw" name="${actuals} = Emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140214 15:43:49.275" level="INFO">Starting process:
emergent -nogui -ni -p LeabraStd.proj -s LeabraStd.css</msg>
<status status="PASS" endtime="20140214 15:43:49.287" starttime="20140214 15:43:49.274"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140214 15:43:49.288" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140214 15:43:55.395" level="INFO">Process completed.</msg>
<msg timestamp="20140214 15:43:55.395" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140214 15:43:55.395" starttime="20140214 15:43:49.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140214 15:43:55.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140214 15:43:55.396" starttime="20140214 15:43:55.395"></status>
</kw>
<kw type="kw" name="${metrics} = Emergent.Get Results">
<doc></doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
</arguments>
<msg timestamp="20140214 15:43:55.397" level="INFO">${result} = { "name": "LeabraStd", "min": 8, "max": 11, "avg": 9.7 }</msg>
<status status="PASS" endtime="20140214 15:43:55.397" starttime="20140214 15:43:55.397"></status>
</kw>
<msg timestamp="20140214 15:43:55.397" level="INFO">${metrics} = { "name": "LeabraStd", "min": 8, "max": 11, "avg": 9.7 }</msg>
<status status="PASS" endtime="20140214 15:43:55.397" starttime="20140214 15:43:55.396"></status>
</kw>
<msg timestamp="20140214 15:43:55.398" level="INFO">${actuals} = { "name": "LeabraStd", "min": 8, "max": 11, "avg": 9.7 }</msg>
<status status="PASS" endtime="20140214 15:43:55.398" starttime="20140214 15:43:49.274"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals},</arg>
</arguments>
<msg timestamp="20140214 15:43:55.399" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:55.399" starttime="20140214 15:43:55.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140214 15:43:55.399" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140214 15:43:55.400" starttime="20140214 15:43:55.399"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140214 15:43:55.400" level="INFO">${actuals} = { "name": "LeabraStd", "min": 8, "max": 11, "avg": 9.7 }</msg>
<status status="PASS" endtime="20140214 15:43:55.400" starttime="20140214 15:43:55.400"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.401" starttime="20140214 15:43:49.270"></status>
</kw>
<kw type="kw" name="Emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.20, ${required} = 0.35">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:55.405" level="INFO">${match} = "min": 8</msg>
<msg timestamp="20140214 15:43:55.405" level="INFO">${value} = 8</msg>
<status status="PASS" endtime="20140214 15:43:55.405" starttime="20140214 15:43:55.404"></status>
</kw>
<msg timestamp="20140214 15:43:55.405" level="INFO">${value} = 8</msg>
<status status="PASS" endtime="20140214 15:43:55.405" starttime="20140214 15:43:55.403"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:55.407" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140214 15:43:55.407" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140214 15:43:55.406" starttime="20140214 15:43:55.406"></status>
</kw>
<msg timestamp="20140214 15:43:55.407" level="INFO">${target} = 9</msg>
<status status="PASS" endtime="20140214 15:43:55.407" starttime="20140214 15:43:55.405"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.408" level="INFO">${low} = 7.2</msg>
<status status="PASS" endtime="20140214 15:43:55.408" starttime="20140214 15:43:55.408"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.409" level="INFO">${high} = 10.8</msg>
<status status="PASS" endtime="20140214 15:43:55.409" starttime="20140214 15:43:55.408"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.411" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:43:55.411" starttime="20140214 15:43:55.410"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:55.411" starttime="20140214 15:43:55.411"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.411" starttime="20140214 15:43:55.410"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.414" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:43:55.413" starttime="20140214 15:43:55.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:55.414" starttime="20140214 15:43:55.414"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.415" starttime="20140214 15:43:55.412"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.415" starttime="20140214 15:43:55.409"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.415" starttime="20140214 15:43:55.407"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.415" starttime="20140214 15:43:55.402"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.415" starttime="20140214 15:43:55.402"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.415" starttime="20140214 15:43:55.402"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.40, ${required} = 0.80">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:55.420" level="INFO">${match} = "max": 11</msg>
<msg timestamp="20140214 15:43:55.420" level="INFO">${value} = 11</msg>
<status status="PASS" endtime="20140214 15:43:55.420" starttime="20140214 15:43:55.419"></status>
</kw>
<msg timestamp="20140214 15:43:55.421" level="INFO">${value} = 11</msg>
<status status="PASS" endtime="20140214 15:43:55.421" starttime="20140214 15:43:55.418"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:55.423" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140214 15:43:55.423" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140214 15:43:55.423" starttime="20140214 15:43:55.422"></status>
</kw>
<msg timestamp="20140214 15:43:55.423" level="INFO">${target} = 13</msg>
<status status="PASS" endtime="20140214 15:43:55.423" starttime="20140214 15:43:55.421"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.424" level="INFO">${low} = 7.8</msg>
<status status="PASS" endtime="20140214 15:43:55.424" starttime="20140214 15:43:55.424"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.425" level="INFO">${high} = 18.2</msg>
<status status="PASS" endtime="20140214 15:43:55.425" starttime="20140214 15:43:55.425"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.427" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:43:55.427" starttime="20140214 15:43:55.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:55.428" starttime="20140214 15:43:55.427"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.428" starttime="20140214 15:43:55.426"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.429" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:43:55.429" starttime="20140214 15:43:55.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:55.430" starttime="20140214 15:43:55.429"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.430" starttime="20140214 15:43:55.428"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.430" starttime="20140214 15:43:55.425"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.430" starttime="20140214 15:43:55.423"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.430" starttime="20140214 15:43:55.416"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.430" starttime="20140214 15:43:55.416"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.430" starttime="20140214 15:43:55.415"></status>
</kw>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:55.433" level="INFO">${match} = "avg": 9.7</msg>
<msg timestamp="20140214 15:43:55.433" level="INFO">${value} = 9.7</msg>
<status status="PASS" endtime="20140214 15:43:55.433" starttime="20140214 15:43:55.432"></status>
</kw>
<msg timestamp="20140214 15:43:55.433" level="INFO">${value} = 9.7</msg>
<status status="PASS" endtime="20140214 15:43:55.433" starttime="20140214 15:43:55.431"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:55.435" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140214 15:43:55.435" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140214 15:43:55.435" starttime="20140214 15:43:55.434"></status>
</kw>
<msg timestamp="20140214 15:43:55.435" level="INFO">${target} = 10.9</msg>
<status status="PASS" endtime="20140214 15:43:55.435" starttime="20140214 15:43:55.433"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.436" level="INFO">${low} = 9.265</msg>
<status status="PASS" endtime="20140214 15:43:55.436" starttime="20140214 15:43:55.436"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.437" level="INFO">${high} = 12.535</msg>
<status status="PASS" endtime="20140214 15:43:55.437" starttime="20140214 15:43:55.436"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.439" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:43:55.439" starttime="20140214 15:43:55.438"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:55.439" starttime="20140214 15:43:55.439"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.439" starttime="20140214 15:43:55.438"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.441" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:43:55.441" starttime="20140214 15:43:55.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:55.441" starttime="20140214 15:43:55.441"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.441" starttime="20140214 15:43:55.439"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.441" starttime="20140214 15:43:55.437"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.441" starttime="20140214 15:43:55.435"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.442" starttime="20140214 15:43:55.431"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.442" starttime="20140214 15:43:55.430"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.442" starttime="20140214 15:43:55.430"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.442" starttime="20140214 15:43:55.401"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.442" starttime="20140214 15:43:55.401"></status>
</kw>
<kw type="kw" name="Emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.20, ${required} = 0.35">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:55.445" level="INFO">${match} = "min": 8</msg>
<msg timestamp="20140214 15:43:55.445" level="INFO">${value} = 8</msg>
<status status="PASS" endtime="20140214 15:43:55.445" starttime="20140214 15:43:55.445"></status>
</kw>
<msg timestamp="20140214 15:43:55.445" level="INFO">${value} = 8</msg>
<status status="PASS" endtime="20140214 15:43:55.445" starttime="20140214 15:43:55.444"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:55.446" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140214 15:43:55.446" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140214 15:43:55.446" starttime="20140214 15:43:55.446"></status>
</kw>
<msg timestamp="20140214 15:43:55.447" level="INFO">${target} = 9</msg>
<status status="PASS" endtime="20140214 15:43:55.447" starttime="20140214 15:43:55.445"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.448" level="INFO">${low} = 5.85</msg>
<status status="PASS" endtime="20140214 15:43:55.448" starttime="20140214 15:43:55.448"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.448" level="INFO">${high} = 12.15</msg>
<status status="PASS" endtime="20140214 15:43:55.448" starttime="20140214 15:43:55.448"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.450" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:43:55.450" starttime="20140214 15:43:55.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:55.451" starttime="20140214 15:43:55.451"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.451" starttime="20140214 15:43:55.449"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.452" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:43:55.452" starttime="20140214 15:43:55.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:55.453" starttime="20140214 15:43:55.452"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.453" starttime="20140214 15:43:55.451"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.453" starttime="20140214 15:43:55.449"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.453" starttime="20140214 15:43:55.447"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.453" starttime="20140214 15:43:55.443"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.453" starttime="20140214 15:43:55.443"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.453" starttime="20140214 15:43:55.443"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.40, ${required} = 0.80">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:55.457" level="INFO">${match} = "max": 11</msg>
<msg timestamp="20140214 15:43:55.457" level="INFO">${value} = 11</msg>
<status status="PASS" endtime="20140214 15:43:55.457" starttime="20140214 15:43:55.456"></status>
</kw>
<msg timestamp="20140214 15:43:55.457" level="INFO">${value} = 11</msg>
<status status="PASS" endtime="20140214 15:43:55.457" starttime="20140214 15:43:55.455"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:55.458" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140214 15:43:55.458" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140214 15:43:55.458" starttime="20140214 15:43:55.458"></status>
</kw>
<msg timestamp="20140214 15:43:55.459" level="INFO">${target} = 13</msg>
<status status="PASS" endtime="20140214 15:43:55.459" starttime="20140214 15:43:55.457"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.460" level="INFO">${low} = 2.6</msg>
<status status="PASS" endtime="20140214 15:43:55.460" starttime="20140214 15:43:55.460"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.461" level="INFO">${high} = 23.4</msg>
<status status="PASS" endtime="20140214 15:43:55.460" starttime="20140214 15:43:55.460"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.464" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:43:55.464" starttime="20140214 15:43:55.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:55.465" starttime="20140214 15:43:55.465"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.466" starttime="20140214 15:43:55.462"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.468" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:43:55.468" starttime="20140214 15:43:55.467"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:55.469" starttime="20140214 15:43:55.468"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.469" starttime="20140214 15:43:55.466"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.469" starttime="20140214 15:43:55.461"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.469" starttime="20140214 15:43:55.459"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.469" starttime="20140214 15:43:55.454"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.470" starttime="20140214 15:43:55.454"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.470" starttime="20140214 15:43:55.453"></status>
</kw>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:55.474" level="INFO">${match} = "avg": 9.7</msg>
<msg timestamp="20140214 15:43:55.474" level="INFO">${value} = 9.7</msg>
<status status="PASS" endtime="20140214 15:43:55.474" starttime="20140214 15:43:55.473"></status>
</kw>
<msg timestamp="20140214 15:43:55.474" level="INFO">${value} = 9.7</msg>
<status status="PASS" endtime="20140214 15:43:55.474" starttime="20140214 15:43:55.472"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:55.477" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140214 15:43:55.477" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140214 15:43:55.477" starttime="20140214 15:43:55.476"></status>
</kw>
<msg timestamp="20140214 15:43:55.477" level="INFO">${target} = 10.9</msg>
<status status="PASS" endtime="20140214 15:43:55.477" starttime="20140214 15:43:55.475"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.479" level="INFO">${low} = 8.175</msg>
<status status="PASS" endtime="20140214 15:43:55.479" starttime="20140214 15:43:55.479"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.480" level="INFO">${high} = 13.625</msg>
<status status="PASS" endtime="20140214 15:43:55.480" starttime="20140214 15:43:55.480"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.482" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:43:55.482" starttime="20140214 15:43:55.482"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:55.483" starttime="20140214 15:43:55.482"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.483" starttime="20140214 15:43:55.481"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:55.484" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:43:55.484" starttime="20140214 15:43:55.484"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:55.485" starttime="20140214 15:43:55.485"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.485" starttime="20140214 15:43:55.483"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.485" starttime="20140214 15:43:55.480"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.485" starttime="20140214 15:43:55.477"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.485" starttime="20140214 15:43:55.471"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.485" starttime="20140214 15:43:55.470"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.485" starttime="20140214 15:43:55.470"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.486" starttime="20140214 15:43:55.443"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.486" starttime="20140214 15:43:55.442"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140214 15:43:55.486" critical="yes" starttime="20140214 15:43:49.003"></status>
</test>
<test id="s1-t2" name="LeabraStdEmbedded">
<kw type="kw" name="Emergent.Set Variables">
<doc></doc>
<arguments>
<arg>LeabraStdEmbedded</arg>
<arg>15 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140214 15:43:55.489" level="INFO">${name} = LeabraStdEmbedded</msg>
<status status="PASS" endtime="20140214 15:43:55.489" starttime="20140214 15:43:55.488"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140214 15:43:55.489" level="INFO">${project-file} = LeabraStdEmbedded.proj</msg>
<status status="PASS" endtime="20140214 15:43:55.489" starttime="20140214 15:43:55.489"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}.css</arg>
</arguments>
<msg timestamp="20140214 15:43:55.490" level="INFO">${script-file} = LeabraStdEmbedded.css</msg>
<status status="PASS" endtime="20140214 15:43:55.490" starttime="20140214 15:43:55.489"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140214 15:43:55.490" level="INFO">${timeout} = 15 secs</msg>
<status status="PASS" endtime="20140214 15:43:55.490" starttime="20140214 15:43:55.490"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.491" starttime="20140214 15:43:55.488"></status>
</kw>
<kw type="kw" name="Emergent.Set Metrics">
<doc></doc>
<arguments>
<arg>min</arg>
<arg>0.20</arg>
<arg>0.35</arg>
<arg>max</arg>
<arg>0.40</arg>
<arg>0.80</arg>
<arg>avg</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{metrics}</arg>
</arguments>
<msg timestamp="20140214 15:43:55.492" level="INFO">@{metric-list} = [ min | 0.20 | 0.35 | max | 0.40 | 0.80 | avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140214 15:43:55.492" starttime="20140214 15:43:55.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{metric-list}</arg>
</arguments>
<msg timestamp="20140214 15:43:55.492" level="INFO">@{metric-list} = [ min | 0.20 | 0.35 | max | 0.40 | 0.80 | avg | 0.15 | 0.25 ]</msg>
<status status="PASS" endtime="20140214 15:43:55.492" starttime="20140214 15:43:55.492"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.492" starttime="20140214 15:43:55.491"></status>
</kw>
<kw type="kw" name="Create CSS">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Emergent.Create CSS Standard">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${script}</arg>
<arg>Program *program = .projects["${name}"].programs.gp["Tests"]["Test"];\nprogram-&gt;Run();\n</arg>
</arguments>
<msg timestamp="20140214 15:43:55.495" html="yes" level="INFO">Created file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\LeabraStdEmbedded.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:55.495" starttime="20140214 15:43:55.494"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.495" starttime="20140214 15:43:55.493"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:55.495" starttime="20140214 15:43:55.493"></status>
</kw>
<kw type="kw" name="Emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${baseline} = Emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${content} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140214 15:43:55.497" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json&lt;/a&gt;'</msg>
<msg timestamp="20140214 15:43:55.497" level="INFO">${content} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 },{ "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 },{ "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 },</msg>
<status status="PASS" endtime="20140214 15:43:55.497" starttime="20140214 15:43:55.497"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<msg timestamp="20140214 15:43:55.498" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140214 15:43:55.498" starttime="20140214 15:43:55.498"></status>
</kw>
<msg timestamp="20140214 15:43:55.499" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140214 15:43:55.499" starttime="20140214 15:43:55.496"></status>
</kw>
<kw type="kw" name="${actuals} = Emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140214 15:43:55.500" level="INFO">Starting process:
emergent -nogui -ni -p LeabraStdEmbedded.proj -s LeabraStdEmbedded.css</msg>
<status status="PASS" endtime="20140214 15:43:55.516" starttime="20140214 15:43:55.500"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140214 15:43:55.517" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140214 15:43:57.721" level="INFO">Process completed.</msg>
<msg timestamp="20140214 15:43:57.721" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140214 15:43:57.721" starttime="20140214 15:43:55.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140214 15:43:57.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140214 15:43:57.722" starttime="20140214 15:43:57.721"></status>
</kw>
<kw type="kw" name="${metrics} = Emergent.Get Results">
<doc></doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
</arguments>
<msg timestamp="20140214 15:43:57.723" level="INFO">${result} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140214 15:43:57.723" starttime="20140214 15:43:57.723"></status>
</kw>
<msg timestamp="20140214 15:43:57.723" level="INFO">${metrics} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140214 15:43:57.723" starttime="20140214 15:43:57.722"></status>
</kw>
<msg timestamp="20140214 15:43:57.724" level="INFO">${actuals} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140214 15:43:57.724" starttime="20140214 15:43:55.499"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals},</arg>
</arguments>
<msg timestamp="20140214 15:43:57.725" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.725" starttime="20140214 15:43:57.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140214 15:43:57.726" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140214 15:43:57.726" starttime="20140214 15:43:57.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140214 15:43:57.726" level="INFO">${actuals} = { "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 }</msg>
<status status="PASS" endtime="20140214 15:43:57.726" starttime="20140214 15:43:57.726"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.727" starttime="20140214 15:43:55.496"></status>
</kw>
<kw type="kw" name="Emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.20, ${required} = 0.35">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:57.730" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140214 15:43:57.730" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140214 15:43:57.730" starttime="20140214 15:43:57.730"></status>
</kw>
<msg timestamp="20140214 15:43:57.730" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140214 15:43:57.730" starttime="20140214 15:43:57.729"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:57.732" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140214 15:43:57.732" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140214 15:43:57.732" starttime="20140214 15:43:57.731"></status>
</kw>
<msg timestamp="20140214 15:43:57.732" level="INFO">${target} = 9</msg>
<status status="PASS" endtime="20140214 15:43:57.732" starttime="20140214 15:43:57.731"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.733" level="INFO">${low} = 7.2</msg>
<status status="PASS" endtime="20140214 15:43:57.733" starttime="20140214 15:43:57.733"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.734" level="INFO">${high} = 10.8</msg>
<status status="PASS" endtime="20140214 15:43:57.734" starttime="20140214 15:43:57.733"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.736" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:43:57.736" starttime="20140214 15:43:57.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:57.736" starttime="20140214 15:43:57.736"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.737" starttime="20140214 15:43:57.735"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.738" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:43:57.738" starttime="20140214 15:43:57.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:57.738" starttime="20140214 15:43:57.738"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.738" starttime="20140214 15:43:57.737"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.738" starttime="20140214 15:43:57.734"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.739" starttime="20140214 15:43:57.732"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.739" starttime="20140214 15:43:57.728"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.739" starttime="20140214 15:43:57.728"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.739" starttime="20140214 15:43:57.728"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.40, ${required} = 0.80">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:57.741" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140214 15:43:57.741" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140214 15:43:57.741" starttime="20140214 15:43:57.741"></status>
</kw>
<msg timestamp="20140214 15:43:57.741" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140214 15:43:57.741" starttime="20140214 15:43:57.740"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:57.743" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140214 15:43:57.743" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140214 15:43:57.743" starttime="20140214 15:43:57.742"></status>
</kw>
<msg timestamp="20140214 15:43:57.743" level="INFO">${target} = 13</msg>
<status status="PASS" endtime="20140214 15:43:57.743" starttime="20140214 15:43:57.742"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.744" level="INFO">${low} = 7.8</msg>
<status status="PASS" endtime="20140214 15:43:57.744" starttime="20140214 15:43:57.744"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.745" level="INFO">${high} = 18.2</msg>
<status status="PASS" endtime="20140214 15:43:57.745" starttime="20140214 15:43:57.744"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.747" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:43:57.747" starttime="20140214 15:43:57.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:57.748" starttime="20140214 15:43:57.747"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.748" starttime="20140214 15:43:57.746"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.749" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:43:57.749" starttime="20140214 15:43:57.749"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:57.749" starttime="20140214 15:43:57.749"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.749" starttime="20140214 15:43:57.748"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.750" starttime="20140214 15:43:57.745"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.750" starttime="20140214 15:43:57.743"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.750" starttime="20140214 15:43:57.739"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.750" starttime="20140214 15:43:57.739"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.750" starttime="20140214 15:43:57.739"></status>
</kw>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:57.752" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140214 15:43:57.752" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140214 15:43:57.752" starttime="20140214 15:43:57.752"></status>
</kw>
<msg timestamp="20140214 15:43:57.753" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140214 15:43:57.752" starttime="20140214 15:43:57.751"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:57.754" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140214 15:43:57.754" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140214 15:43:57.754" starttime="20140214 15:43:57.753"></status>
</kw>
<msg timestamp="20140214 15:43:57.754" level="INFO">${target} = 10.9</msg>
<status status="PASS" endtime="20140214 15:43:57.754" starttime="20140214 15:43:57.753"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.755" level="INFO">${low} = 9.265</msg>
<status status="PASS" endtime="20140214 15:43:57.755" starttime="20140214 15:43:57.755"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.756" level="INFO">${high} = 12.535</msg>
<status status="PASS" endtime="20140214 15:43:57.756" starttime="20140214 15:43:57.756"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.758" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:43:57.758" starttime="20140214 15:43:57.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:57.758" starttime="20140214 15:43:57.758"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.759" starttime="20140214 15:43:57.757"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.760" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:43:57.760" starttime="20140214 15:43:57.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:57.760" starttime="20140214 15:43:57.760"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.760" starttime="20140214 15:43:57.759"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.760" starttime="20140214 15:43:57.756"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.761" starttime="20140214 15:43:57.754"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.761" starttime="20140214 15:43:57.750"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.761" starttime="20140214 15:43:57.750"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.761" starttime="20140214 15:43:57.750"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.761" starttime="20140214 15:43:57.728"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.761" starttime="20140214 15:43:57.727"></status>
</kw>
<kw type="kw" name="Emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.20, ${required} = 0.35">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:57.764" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140214 15:43:57.764" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140214 15:43:57.764" starttime="20140214 15:43:57.764"></status>
</kw>
<msg timestamp="20140214 15:43:57.764" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140214 15:43:57.764" starttime="20140214 15:43:57.763"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:57.765" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140214 15:43:57.766" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140214 15:43:57.765" starttime="20140214 15:43:57.765"></status>
</kw>
<msg timestamp="20140214 15:43:57.766" level="INFO">${target} = 9</msg>
<status status="PASS" endtime="20140214 15:43:57.766" starttime="20140214 15:43:57.764"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.767" level="INFO">${low} = 5.85</msg>
<status status="PASS" endtime="20140214 15:43:57.767" starttime="20140214 15:43:57.767"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.767" level="INFO">${high} = 12.15</msg>
<status status="PASS" endtime="20140214 15:43:57.767" starttime="20140214 15:43:57.767"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.769" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:43:57.769" starttime="20140214 15:43:57.769"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:57.770" starttime="20140214 15:43:57.770"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.770" starttime="20140214 15:43:57.768"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.771" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:43:57.771" starttime="20140214 15:43:57.771"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:57.772" starttime="20140214 15:43:57.772"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.772" starttime="20140214 15:43:57.770"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.772" starttime="20140214 15:43:57.768"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.772" starttime="20140214 15:43:57.766"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.772" starttime="20140214 15:43:57.762"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.772" starttime="20140214 15:43:57.762"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.772" starttime="20140214 15:43:57.762"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.40, ${required} = 0.80">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:57.775" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140214 15:43:57.775" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140214 15:43:57.775" starttime="20140214 15:43:57.774"></status>
</kw>
<msg timestamp="20140214 15:43:57.775" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140214 15:43:57.775" starttime="20140214 15:43:57.774"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:57.776" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140214 15:43:57.776" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140214 15:43:57.776" starttime="20140214 15:43:57.776"></status>
</kw>
<msg timestamp="20140214 15:43:57.776" level="INFO">${target} = 13</msg>
<status status="PASS" endtime="20140214 15:43:57.776" starttime="20140214 15:43:57.775"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.778" level="INFO">${low} = 2.6</msg>
<status status="PASS" endtime="20140214 15:43:57.778" starttime="20140214 15:43:57.777"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.778" level="INFO">${high} = 23.4</msg>
<status status="PASS" endtime="20140214 15:43:57.778" starttime="20140214 15:43:57.778"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.781" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:43:57.781" starttime="20140214 15:43:57.781"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:57.782" starttime="20140214 15:43:57.781"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.782" starttime="20140214 15:43:57.779"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.783" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:43:57.783" starttime="20140214 15:43:57.782"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:57.783" starttime="20140214 15:43:57.783"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.783" starttime="20140214 15:43:57.782"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.784" starttime="20140214 15:43:57.778"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.784" starttime="20140214 15:43:57.777"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.784" starttime="20140214 15:43:57.773"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.784" starttime="20140214 15:43:57.773"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.784" starttime="20140214 15:43:57.772"></status>
</kw>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:57.786" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140214 15:43:57.786" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140214 15:43:57.786" starttime="20140214 15:43:57.786"></status>
</kw>
<msg timestamp="20140214 15:43:57.786" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140214 15:43:57.786" starttime="20140214 15:43:57.785"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:43:57.788" level="INFO">${match} = "avg": 10.9</msg>
<msg timestamp="20140214 15:43:57.788" level="INFO">${value} = 10.9</msg>
<status status="PASS" endtime="20140214 15:43:57.788" starttime="20140214 15:43:57.787"></status>
</kw>
<msg timestamp="20140214 15:43:57.788" level="INFO">${target} = 10.9</msg>
<status status="PASS" endtime="20140214 15:43:57.788" starttime="20140214 15:43:57.787"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.790" level="INFO">${low} = 8.175</msg>
<status status="PASS" endtime="20140214 15:43:57.790" starttime="20140214 15:43:57.789"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.790" level="INFO">${high} = 13.625</msg>
<status status="PASS" endtime="20140214 15:43:57.790" starttime="20140214 15:43:57.790"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.792" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:43:57.792" starttime="20140214 15:43:57.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:57.793" starttime="20140214 15:43:57.792"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.793" starttime="20140214 15:43:57.791"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:43:57.794" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:43:57.794" starttime="20140214 15:43:57.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:43:57.795" starttime="20140214 15:43:57.794"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.795" starttime="20140214 15:43:57.793"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.795" starttime="20140214 15:43:57.790"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.795" starttime="20140214 15:43:57.788"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.795" starttime="20140214 15:43:57.784"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.795" starttime="20140214 15:43:57.784"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.795" starttime="20140214 15:43:57.784"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.795" starttime="20140214 15:43:57.762"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.795" starttime="20140214 15:43:57.761"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140214 15:43:57.796" critical="yes" starttime="20140214 15:43:55.487"></status>
</test>
<test id="s1-t3" name="a_not_b">
<kw type="kw" name="Emergent.Set Variables">
<doc></doc>
<arguments>
<arg>a_not_b</arg>
<arg>15 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140214 15:43:57.798" level="INFO">${name} = a_not_b</msg>
<status status="PASS" endtime="20140214 15:43:57.798" starttime="20140214 15:43:57.798"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140214 15:43:57.799" level="INFO">${project-file} = a_not_b.proj</msg>
<status status="PASS" endtime="20140214 15:43:57.799" starttime="20140214 15:43:57.799"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}.css</arg>
</arguments>
<msg timestamp="20140214 15:43:57.799" level="INFO">${script-file} = a_not_b.css</msg>
<status status="PASS" endtime="20140214 15:43:57.800" starttime="20140214 15:43:57.799"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140214 15:43:57.800" level="INFO">${timeout} = 15 secs</msg>
<status status="PASS" endtime="20140214 15:43:57.800" starttime="20140214 15:43:57.800"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.800" starttime="20140214 15:43:57.797"></status>
</kw>
<kw type="kw" name="Emergent.Set Metrics">
<doc></doc>
<arguments>
<arg>min</arg>
<arg>0.00</arg>
<arg>0.05</arg>
<arg>max</arg>
<arg>0.02</arg>
<arg>0.05</arg>
<arg>avg</arg>
<arg>0.02</arg>
<arg>0.05</arg>
</arguments>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>@{metrics}</arg>
</arguments>
<msg timestamp="20140214 15:43:57.801" level="INFO">@{metric-list} = [ min | 0.00 | 0.05 | max | 0.02 | 0.05 | avg | 0.02 | 0.05 ]</msg>
<status status="PASS" endtime="20140214 15:43:57.801" starttime="20140214 15:43:57.801"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{metric-list}</arg>
</arguments>
<msg timestamp="20140214 15:43:57.802" level="INFO">@{metric-list} = [ min | 0.00 | 0.05 | max | 0.02 | 0.05 | avg | 0.02 | 0.05 ]</msg>
<status status="PASS" endtime="20140214 15:43:57.802" starttime="20140214 15:43:57.802"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.802" starttime="20140214 15:43:57.800"></status>
</kw>
<kw type="kw" name="Create CSS a_not_b">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Emergent.Create CSS Custom">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${script}</arg>
<arg>\#include "Leabra.css"\n\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.804" html="yes" level="INFO">Created file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.804" starttime="20140214 15:43:57.803"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.805" starttime="20140214 15:43:57.803"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Randomize">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>SetRandom(\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.807" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.807" starttime="20140214 15:43:57.806"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.808" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.808" starttime="20140214 15:43:57.807"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.810" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.810" starttime="20140214 15:43:57.809"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraTrain",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.811" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.811" starttime="20140214 15:43:57.810"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"rnd_init");\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.812" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.813" starttime="20140214 15:43:57.811"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.813" starttime="20140214 15:43:57.805"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard RunProgram">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>LeabraTrain</arg>
<arg>ABNet</arg>
<arg>ABInput_Delay3</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>RunProgram(\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.815" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.815" starttime="20140214 15:43:57.814"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.816" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.816" starttime="20140214 15:43:57.815"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"LeabraAll_Std",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.817" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.817" starttime="20140214 15:43:57.816"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${program}",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.819" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.819" starttime="20140214 15:43:57.818"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${network}",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.820" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.820" starttime="20140214 15:43:57.819"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"InputData",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.822" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.822" starttime="20140214 15:43:57.821"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${data}");\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.823" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.823" starttime="20140214 15:43:57.822"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.823" starttime="20140214 15:43:57.813"></status>
</kw>
<kw type="kw" name="Emergent.Add CSS Standard Output">
<doc></doc>
<arguments>
<arg>${script-file}</arg>
<arg>${name}</arg>
<arg>OutputANotB</arg>
<arg>TrialOutputData</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>${method}(\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.825" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.826" starttime="20140214 15:43:57.825"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.827" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.827" starttime="20140214 15:43:57.826"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${project}",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.828" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.828" starttime="20140214 15:43:57.827"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"OutputData",\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.830" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.830" starttime="20140214 15:43:57.829"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${script}</arg>
<arg>"${table}");\n</arg>
</arguments>
<msg timestamp="20140214 15:43:57.831" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\a_not_b.css&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:43:57.831" starttime="20140214 15:43:57.830"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.831" starttime="20140214 15:43:57.824"></status>
</kw>
<status status="PASS" endtime="20140214 15:43:57.831" starttime="20140214 15:43:57.802"></status>
</kw>
<kw type="kw" name="Emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${baseline} = Emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${content} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140214 15:43:57.833" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\baseline.json&lt;/a&gt;'</msg>
<msg timestamp="20140214 15:43:57.834" level="INFO">${content} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.9 },{ "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 },{ "name": "LeabraStdEmbedded", "min": 9, "max": 13, "avg": 10.9 },</msg>
<status status="PASS" endtime="20140214 15:43:57.834" starttime="20140214 15:43:57.833"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<msg timestamp="20140214 15:43:57.835" level="INFO">${baseline} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140214 15:43:57.835" starttime="20140214 15:43:57.834"></status>
</kw>
<msg timestamp="20140214 15:43:57.835" level="INFO">${baseline} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140214 15:43:57.835" starttime="20140214 15:43:57.832"></status>
</kw>
<kw type="kw" name="${actuals} = Emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140214 15:43:57.836" level="INFO">Starting process:
emergent -nogui -ni -p a_not_b.proj -s a_not_b.css</msg>
<status status="PASS" endtime="20140214 15:43:57.849" starttime="20140214 15:43:57.836"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140214 15:43:57.850" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140214 15:44:00.251" level="INFO">Process completed.</msg>
<msg timestamp="20140214 15:44:00.252" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140214 15:44:00.251" starttime="20140214 15:43:57.849"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140214 15:44:00.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140214 15:44:00.255" starttime="20140214 15:44:00.252"></status>
</kw>
<kw type="kw" name="${metrics} = Emergent.Get Results">
<doc></doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
</arguments>
<msg timestamp="20140214 15:44:00.259" level="INFO">${result} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140214 15:44:00.259" starttime="20140214 15:44:00.258"></status>
</kw>
<msg timestamp="20140214 15:44:00.260" level="INFO">${metrics} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140214 15:44:00.260" starttime="20140214 15:44:00.255"></status>
</kw>
<msg timestamp="20140214 15:44:00.261" level="INFO">${actuals} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140214 15:44:00.261" starttime="20140214 15:43:57.835"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals},</arg>
</arguments>
<msg timestamp="20140214 15:44:00.265" html="yes" level="INFO">Appended to file '&lt;a href="file://C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json"&gt;C:\Users\david_000\Documents\NetBeansProjects\EmergentTestFramework\record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140214 15:44:00.265" starttime="20140214 15:44:00.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140214 15:44:00.266" level="INFO">${baseline} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140214 15:44:00.267" starttime="20140214 15:44:00.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140214 15:44:00.268" level="INFO">${actuals} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140214 15:44:00.268" starttime="20140214 15:44:00.267"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.269" starttime="20140214 15:43:57.832"></status>
</kw>
<kw type="kw" name="Emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.00, ${required} = 0.05">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:44:00.278" level="INFO">${match} = "min": 0.582603</msg>
<msg timestamp="20140214 15:44:00.278" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140214 15:44:00.278" starttime="20140214 15:44:00.277"></status>
</kw>
<msg timestamp="20140214 15:44:00.279" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140214 15:44:00.279" starttime="20140214 15:44:00.275"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:44:00.282" level="INFO">${match} = "min": 0.582603</msg>
<msg timestamp="20140214 15:44:00.282" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140214 15:44:00.282" starttime="20140214 15:44:00.281"></status>
</kw>
<msg timestamp="20140214 15:44:00.283" level="INFO">${target} = 0.582603</msg>
<status status="PASS" endtime="20140214 15:44:00.283" starttime="20140214 15:44:00.279"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.286" level="INFO">${low} = 0.582603</msg>
<status status="PASS" endtime="20140214 15:44:00.286" starttime="20140214 15:44:00.285"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.287" level="INFO">${high} = 0.582603</msg>
<status status="PASS" endtime="20140214 15:44:00.287" starttime="20140214 15:44:00.287"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.293" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:44:00.292" starttime="20140214 15:44:00.292"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.294" starttime="20140214 15:44:00.293"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.294" starttime="20140214 15:44:00.290"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.297" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:44:00.297" starttime="20140214 15:44:00.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.298" starttime="20140214 15:44:00.298"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.299" starttime="20140214 15:44:00.294"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.299" starttime="20140214 15:44:00.288"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.299" starttime="20140214 15:44:00.283"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.300" starttime="20140214 15:44:00.273"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.300" starttime="20140214 15:44:00.273"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.300" starttime="20140214 15:44:00.272"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.02, ${required} = 0.05">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:44:00.303" level="INFO">${match} = "max": 0.629062</msg>
<msg timestamp="20140214 15:44:00.303" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140214 15:44:00.303" starttime="20140214 15:44:00.302"></status>
</kw>
<msg timestamp="20140214 15:44:00.303" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140214 15:44:00.303" starttime="20140214 15:44:00.302"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:44:00.304" level="INFO">${match} = "max": 0.629062</msg>
<msg timestamp="20140214 15:44:00.304" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140214 15:44:00.304" starttime="20140214 15:44:00.304"></status>
</kw>
<msg timestamp="20140214 15:44:00.304" level="INFO">${target} = 0.629062</msg>
<status status="PASS" endtime="20140214 15:44:00.304" starttime="20140214 15:44:00.303"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.306" level="INFO">${low} = 0.61648076</msg>
<status status="PASS" endtime="20140214 15:44:00.306" starttime="20140214 15:44:00.305"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.306" level="INFO">${high} = 0.64164324</msg>
<status status="PASS" endtime="20140214 15:44:00.306" starttime="20140214 15:44:00.306"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.308" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:44:00.308" starttime="20140214 15:44:00.308"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.309" starttime="20140214 15:44:00.308"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.309" starttime="20140214 15:44:00.307"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.310" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:44:00.310" starttime="20140214 15:44:00.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.310" starttime="20140214 15:44:00.310"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.311" starttime="20140214 15:44:00.309"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.311" starttime="20140214 15:44:00.306"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.311" starttime="20140214 15:44:00.304"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.311" starttime="20140214 15:44:00.301"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.311" starttime="20140214 15:44:00.300"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.311" starttime="20140214 15:44:00.300"></status>
</kw>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.02, ${required} = 0.05">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:44:00.313" level="INFO">${match} = "avg": 0.608421</msg>
<msg timestamp="20140214 15:44:00.313" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140214 15:44:00.313" starttime="20140214 15:44:00.313"></status>
</kw>
<msg timestamp="20140214 15:44:00.313" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140214 15:44:00.313" starttime="20140214 15:44:00.312"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:44:00.315" level="INFO">${match} = "avg": 0.608421</msg>
<msg timestamp="20140214 15:44:00.315" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140214 15:44:00.315" starttime="20140214 15:44:00.314"></status>
</kw>
<msg timestamp="20140214 15:44:00.315" level="INFO">${target} = 0.608421</msg>
<status status="PASS" endtime="20140214 15:44:00.315" starttime="20140214 15:44:00.314"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.316" level="INFO">${low} = 0.59625258</msg>
<status status="PASS" endtime="20140214 15:44:00.316" starttime="20140214 15:44:00.316"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.317" level="INFO">${high} = 0.62058942</msg>
<status status="PASS" endtime="20140214 15:44:00.317" starttime="20140214 15:44:00.316"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.319" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:44:00.319" starttime="20140214 15:44:00.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.319" starttime="20140214 15:44:00.319"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.319" starttime="20140214 15:44:00.317"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.320" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:44:00.320" starttime="20140214 15:44:00.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.321" starttime="20140214 15:44:00.321"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.321" starttime="20140214 15:44:00.319"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.321" starttime="20140214 15:44:00.317"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.321" starttime="20140214 15:44:00.315"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.321" starttime="20140214 15:44:00.311"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.321" starttime="20140214 15:44:00.311"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.321" starttime="20140214 15:44:00.311"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.321" starttime="20140214 15:44:00.272"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.322" starttime="20140214 15:44:00.270"></status>
</kw>
<kw type="kw" name="Emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.00, ${required} = 0.05">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:44:00.325" level="INFO">${match} = "min": 0.582603</msg>
<msg timestamp="20140214 15:44:00.325" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140214 15:44:00.325" starttime="20140214 15:44:00.325"></status>
</kw>
<msg timestamp="20140214 15:44:00.325" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140214 15:44:00.325" starttime="20140214 15:44:00.324"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:44:00.327" level="INFO">${match} = "min": 0.582603</msg>
<msg timestamp="20140214 15:44:00.327" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140214 15:44:00.327" starttime="20140214 15:44:00.326"></status>
</kw>
<msg timestamp="20140214 15:44:00.327" level="INFO">${target} = 0.582603</msg>
<status status="PASS" endtime="20140214 15:44:00.327" starttime="20140214 15:44:00.326"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.328" level="INFO">${low} = 0.55347285</msg>
<status status="PASS" endtime="20140214 15:44:00.328" starttime="20140214 15:44:00.328"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.329" level="INFO">${high} = 0.61173315</msg>
<status status="PASS" endtime="20140214 15:44:00.329" starttime="20140214 15:44:00.328"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.331" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:44:00.331" starttime="20140214 15:44:00.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.331" starttime="20140214 15:44:00.331"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.331" starttime="20140214 15:44:00.330"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.332" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:44:00.332" starttime="20140214 15:44:00.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.333" starttime="20140214 15:44:00.333"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.333" starttime="20140214 15:44:00.331"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.333" starttime="20140214 15:44:00.329"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.333" starttime="20140214 15:44:00.327"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.333" starttime="20140214 15:44:00.323"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.333" starttime="20140214 15:44:00.323"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.333" starttime="20140214 15:44:00.323"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.02, ${required} = 0.05">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:44:00.336" level="INFO">${match} = "max": 0.629062</msg>
<msg timestamp="20140214 15:44:00.336" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140214 15:44:00.336" starttime="20140214 15:44:00.335"></status>
</kw>
<msg timestamp="20140214 15:44:00.336" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140214 15:44:00.336" starttime="20140214 15:44:00.335"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:44:00.337" level="INFO">${match} = "max": 0.629062</msg>
<msg timestamp="20140214 15:44:00.337" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140214 15:44:00.337" starttime="20140214 15:44:00.337"></status>
</kw>
<msg timestamp="20140214 15:44:00.337" level="INFO">${target} = 0.629062</msg>
<status status="PASS" endtime="20140214 15:44:00.337" starttime="20140214 15:44:00.336"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.339" level="INFO">${low} = 0.5976089</msg>
<status status="PASS" endtime="20140214 15:44:00.339" starttime="20140214 15:44:00.338"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.339" level="INFO">${high} = 0.6605151</msg>
<status status="PASS" endtime="20140214 15:44:00.339" starttime="20140214 15:44:00.339"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.341" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:44:00.341" starttime="20140214 15:44:00.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.342" starttime="20140214 15:44:00.341"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.342" starttime="20140214 15:44:00.340"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.343" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:44:00.343" starttime="20140214 15:44:00.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.344" starttime="20140214 15:44:00.343"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.344" starttime="20140214 15:44:00.342"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.344" starttime="20140214 15:44:00.339"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.344" starttime="20140214 15:44:00.337"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.344" starttime="20140214 15:44:00.334"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.344" starttime="20140214 15:44:00.334"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.344" starttime="20140214 15:44:00.333"></status>
</kw>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.02, ${required} = 0.05">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="Emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:44:00.346" level="INFO">${match} = "avg": 0.608421</msg>
<msg timestamp="20140214 15:44:00.346" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140214 15:44:00.346" starttime="20140214 15:44:00.346"></status>
</kw>
<msg timestamp="20140214 15:44:00.347" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140214 15:44:00.347" starttime="20140214 15:44:00.345"></status>
</kw>
<kw type="kw" name="${target} = Emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140214 15:44:00.348" level="INFO">${match} = "avg": 0.608421</msg>
<msg timestamp="20140214 15:44:00.348" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140214 15:44:00.348" starttime="20140214 15:44:00.347"></status>
</kw>
<msg timestamp="20140214 15:44:00.348" level="INFO">${target} = 0.608421</msg>
<status status="PASS" endtime="20140214 15:44:00.348" starttime="20140214 15:44:00.347"></status>
</kw>
<kw type="kw" name="Emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.349" level="INFO">${low} = 0.57799995</msg>
<status status="PASS" endtime="20140214 15:44:00.349" starttime="20140214 15:44:00.349"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.350" level="INFO">${high} = 0.63884205</msg>
<status status="PASS" endtime="20140214 15:44:00.350" starttime="20140214 15:44:00.349"></status>
</kw>
<kw type="kw" name="Emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="Emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.352" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140214 15:44:00.352" starttime="20140214 15:44:00.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.352" starttime="20140214 15:44:00.352"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.352" starttime="20140214 15:44:00.351"></status>
</kw>
<kw type="kw" name="Emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140214 15:44:00.354" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140214 15:44:00.354" starttime="20140214 15:44:00.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.354" starttime="20140214 15:44:00.354"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.354" starttime="20140214 15:44:00.352"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.354" starttime="20140214 15:44:00.350"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.355" starttime="20140214 15:44:00.348"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.355" starttime="20140214 15:44:00.345"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.355" starttime="20140214 15:44:00.344"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.355" starttime="20140214 15:44:00.344"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.355" starttime="20140214 15:44:00.323"></status>
</kw>
<status status="PASS" endtime="20140214 15:44:00.355" starttime="20140214 15:44:00.322"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140214 15:44:00.355" critical="yes" starttime="20140214 15:43:57.797"></status>
</test>
<kw type="teardown" name="Process.Terminate All Processes">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" endtime="20140214 15:44:00.358" starttime="20140214 15:44:00.358"></status>
</kw>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20140214 15:44:00.358" starttime="20140214 15:43:48.944"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" pass="3" id="s1" name="Suite">Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>

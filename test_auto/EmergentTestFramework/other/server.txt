** Settings ***

Library          Telnet
Library          HttpLibrary.HTTP
Library          Process
Library          OperatingSystem

Resource         Server_lib.txt

Suite Setup      Initialize Emergent    ../../proj_templates/LeabraStd.proj
Suite Teardown   Shutdown Emergent

*** Variables ***

# use 'pybot -v debug:true server.txt' on the command line to
#      output the transmissions to/from Emergent using warnings
${debug} =       false

*** Test Cases ***

# Ideas on things to test
#  - SetDataTableCell and Matrix Cell

#
# Initialization and general tests
#

Initialize
    Set Suite Variable     ${verbose}       ${false}
    Run Keyword If         '${debug}' == 'true'       Set Suite Variable   ${verbose}  ${true}

Connection
    Sleep                  1 sec
    ${output} =            Read
    Print                  ${output}
    Should Contain         ${output}    Emergent Server v7.

# TODO: Start another process and check for the "Too many connections already" error.

Native Test
    ${output} =            Run Command Wait      GetRunState
    Should Contain         ${output}             OK
    Message Should Match   ${output}             4

#
# RunState and RunProgram tests
#



General RunState
    ${output} =                Run Command Wait      {"command": "GetRunState"}
    Status OK Match Result     ${output}             4

Program RunState
    ${output} =                Run Command Wait      {"command": "GetRunState", "program": "LeabraTrain"}
    Status OK Match Result     ${output}             4

OpenProj
    ${output} =                Run Command Completion          {"command": "OpenProject", "project": "../proj_templates/LeabraFlex.proj"}   300 sec
    Status OK No Result        ${output}

OpenProjNoProject
    ${output} =                Run Command Completion          {"command": "OpenProject"}   300 sec
    Status Error Match         ${output}   0		       Did not specify valid project file

OpenOpenProj
    ${output} =                Run Command Completion          {"command": "OpenProject", "project": "../proj_templates/LeabraStd.proj"}   300 sec
    Status OK No Result        ${output}

OpenNonExistentProj
    ${output} =                Run Command Completion          {"command": "OpenProject", "project": "../proj_templates/LeabraaaaStd.proj"}   300 sec
    Status Error Match         ${output}   0		       file \\\"../proj_templates/LeabraaaaStd.proj\\\" not found   
    
GetData All Rows of Empty Table
    Ensure Emergent Free
    ${output} =                  Run Command Wait    {"command": "GetData", "table": "EpochOutputData"}
    Status OK Has Result         ${output}
    Json String Should Match     ${output}           /result/columns/0/name      batch
    Json String Should Match     ${output}           /result/columns/1/name    epoch
    Json String Should Match     ${output}           /result/columns/2/name    avg_sse
    Json String Should Match     ${output}           /result/columns/0/type    int
    Json String Should Match     ${output}           /result/columns/1/type    int
    Json String Should Match     ${output}           /result/columns/2/type    float
    Json Value Should Equal      ${output}           /result/columns/0/matrix  false
    Json Value Should Equal      ${output}           /result/columns/1/matrix  false
    Json Value Should Equal      ${output}           /result/columns/2/matrix  false
    Json Value Should Not Exist  ${output}           /result/columns/0/values/0
    Json Value Should Not Exist  ${output}           /result/columns/1/values/0
    Json Value Should Not Exist  ${output}           /result/columns/2/values/0


RunProgram
    ${output} =                Run Command Completion          {"command": "RunProgram", "program": "LeabraTrain"}   300 sec
    Status OK No Result        ${output}

Program RunState After Init
    ${output} =                Run Command Wait      {"command": "GetRunState", "program": "LeabraTrain"}
    Status OK Match Result     ${output}             0

General RunState After Init
    ${output} =                Run Command Wait      {"command": "GetRunState"}
    Status OK Match Result     ${output}             0

RunProgramRelativePath
    ${output} =                Run Command Completion          {"command": "RunProgram", "program": ".gp[\\\"LeabraAll_Std\\\"][\\\"LeabraTrain\\\"]"}   300 sec
    Status OK No Result        ${output}

RunProgramRelativeBrokenPath
    ${output} =                Run Command Completion          {"command": "RunProgram", "program": ".gp[\\\"LeabraAll_Std\\\"][\\\"LeabraBaaatch\\\"]"}   300 sec
    Status Error Match         ${output}   5		       Program '.gp[\\\"LeabraAll_Std\\\"][\\\"LeabraBaaatch\\\"]' not found

RunProgramProgramsPath
    ${output} =                Run Command Completion          {"command": "RunProgram", "program": ".programs.gp[\\\"LeabraAll_Std\\\"][\\\"LeabraTrain\\\"]"}   300 sec
    Status OK No Result        ${output}

RunProgramProjectPath
    ${output} =                Run Command Completion          {"command": "RunProgram", "program": ".projects[\\\"LeabraStd\\\"].programs.gp[\\\"LeabraAll_Std\\\"][\\\"LeabraTrain\\\"]"}   300 sec
    Status OK No Result        ${output}

RunProgramOtherProjectPath
    ${output} =                Run Command Completion          {"command": "RunProgram", "program": ".projects[\\\"LeabraFlex\\\"].programs.gp[\\\"ConfigProgs\\\"][\\\"MasterTrain\\\"]"}   600 sec
    Status OK No Result        ${output}

RunProgramOtherProjectErrorPath
    ${output} =                Run Command Completion          {"command": "RunProgram", "program": ".projects[\\\"LeabraFlex\\\"].programs.gp[\\\"LeabraAll_Std\\\"][\\\"LeabraTrain\\\"]"}   300 sec
    Status Error Match         ${output}   5		       Program '.projects[\\\"LeabraFlex\\\"].programs.gp[\\\"LeabraAll_Std\\\"][\\\"LeabraTrain\\\"]' not found
    
RunProgramAsync
    Ensure Emergent Free
    Run Emergent Program       LeabraTrain

#
# General and RunProgram error tests
#
    
JSON Format Error
    Ensure Emergent Free
    ${output} =              Run Command Wait      {NotValidJSON}
    Status Error Match       ${output}             1         JSON format error

Unknown Command Error
    Ensure Emergent Free
    ${output} =              Run Command Wait      {"command": "UnknownCommand"}
    Status Error Match       ${output}             2         Unknown command: UnknownCommand-- remember everything is case sensitive

No Command Error
    Ensure Emergent Free
    ${output} =              Run Command Wait      {}
    Status Error Match       ${output}             2         Unknown command: -- remember everything is case sensitive

Unknown Parameter Error
    Ensure Emergent Free
    ${output} =              Run Command Wait      {"command": "GetRunState", "irrelevant": "value"}
    Status Error Match       ${output}             4         Unknown parameter: irrelevant

Program Not Found Error
    Ensure Emergent Free
    ${output} =                Run Command Wait    {"command": "RunProgram", "program": "DoesNotExist"}
    Status Error Match         ${output}           5         Program 'DoesNotExist' not found    

# TODO: No Open Project Error (7) - needs a specialized connection to Emergent

#
# Program SetVar / GetVar normal operation
#

SetVar Int
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "SetVar", "program": "LeabraTrain", "var_name": "max_epoch", "var_value": 501}
    Status OK No Result        ${output}
    ${output} =                Run Command Wait      {"command": "GetVar", "program": "LeabraTrain", "var_name": "max_epoch" }
    Status OK Equal Result     ${output}             501

SetVar String
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "SetVar", "program": "SaveWeights", "var_name": "fname", "var_value": "test string"}
    Status OK No Result        ${output}
    ${output} =                Run Command Wait      {"command": "GetVar", "program": "SaveWeights", "var_name": "fname" }
    Status OK Match Result     ${output}             test string

SetVar Real
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "SetVar", "program": "LeabraTrain", "var_name": "err_stopcrit", "var_value": 3.14}
    Status OK No Result        ${output}
    ${output} =                Run Command Wait      {"command": "GetVar", "program": "LeabraTrain", "var_name": "err_stopcrit" }
    Status OK Equal Result     ${output}             3.14

SetVar Boolean Arg
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "SetVar", "program": "LeabraTrain", "var_name": "no_prompts", "var_value": true}
    Status OK No Result        ${output}
    ${output} =                Run Command Wait      {"command": "GetVar", "program": "LeabraTrain", "var_name": "no_prompts" }
    Status OK Equal Result     ${output}             true
    ${output} =                Run Command Wait      {"command": "SetVar", "program": "LeabraTrain", "var_name": "no_prompts", "var_value": false}
    Status OK No Result        ${output}
    ${output} =                Run Command Wait      {"command": "GetVar", "program": "LeabraTrain", "var_name": "no_prompts" }
    Status OK Equal Result     ${output}             false

#
# Program SetVar / GetVar errors
#

SetVar Invalid Program Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "SetVar", "program": "DoesNotExist", "var_name": "err_stopcrit", "var_value": 3.14}
    Status Error Match         ${output}             5         Program 'DoesNotExist' not found

GetVar Invalid Program Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "GetVar", "program": "DoesNotExist", "var_name": "err_stopcrit"}
    Status Error Match         ${output}             5         Program 'DoesNotExist' not found

SetVar Invalid Variable Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "SetVar", "program": "LeabraTrain", "var_name": "DoesNotExist", "var_value": 3.14}
    Status Error Match         ${output}             5         Var 'DoesNotExist' not found

GetVar Invalid Variable Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "GetVar", "program": "LeabraTrain", "var_name": "DoesNotExist"}
    Status Error Match         ${output}             5         Var 'DoesNotExist' not found

SetVar Missing Value Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "SetVar", "program": "LeabraTrain", "var_name": "err_stopcrit"}
    Status Error Match         ${output}             5         var_value missing

# This test can be restored when there is more checking for superfluous parameters
#GetVar Has Value Error
#    ${output} =                Run Command Wait      {"command": "GetVar", "program": "LeabraTrain", "var_name": "err_stopcrit", "var_value": 3.14}
#    Status Error Match         ${output}             3         Unknown parameter: var_value

#
# Reading data tables - normal operation 
#

GetData Full Table
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "GetData", "table": "StdInputData"}
    Status OK Has Result       ${output}
    Json String Should Match   ${output}             /result/columns/0/name    Name
    Json String Should Match   ${output}             /result/columns/1/name    Input
    Json String Should Match   ${output}             /result/columns/2/name    Output
    Json String Should Match   ${output}             /result/columns/0/type    String
    Json String Should Match   ${output}             /result/columns/1/type    float
    Json String Should Match   ${output}             /result/columns/2/type    float
    Json Value Should Equal    ${output}             /result/columns/0/matrix  false
    Json Value Should Equal    ${output}             /result/columns/1/matrix  true
    Json Value Should Equal    ${output}             /result/columns/2/matrix  true
    Json String Should Match   ${output}             /result/columns/0/values/0  checks
    Json String Should Match   ${output}             /result/columns/0/values/1  mitvert
    Json String Should Match   ${output}             /result/columns/0/values/2  midhoriz
    Json String Should Match   ${output}             /result/columns/0/values/3  rdiag
    Json String Should Match   ${output}             /result/columns/0/values/4  ldiag
    Json String Should Match   ${output}             /result/columns/0/values/5  random
    Json Value Should Equal    ${output}             /result/columns/1/values/0/0/0  1
    Json Value Should Equal    ${output}             /result/columns/1/values/0/1/2  0
    Json Value Should Equal    ${output}             /result/columns/1/values/0/2/2  1
    Json Value Should Equal    ${output}             /result/columns/1/values/2/2/2  1
    Json Value Should Equal    ${output}             /result/columns/1/values/2/1/0  0


GetData Column
    Ensure Emergent Free
    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "column": "Name"}
    Status OK Has Result         ${output}
    Json String Should Match     ${output}           /result/columns/0/name    Name
    Json String Should Match     ${output}           /result/columns/0/values/0  checks
    Json String Should Match     ${output}           /result/columns/0/values/1  mitvert
    Json String Should Match     ${output}           /result/columns/0/values/2  midhoriz
    Json String Should Match     ${output}           /result/columns/0/values/3  rdiag
    Json String Should Match     ${output}           /result/columns/0/values/4  ldiag
    Json String Should Match     ${output}           /result/columns/0/values/5  random
    Json Value Should Not Exist  ${output}           /result/columns/1
    Json Value Should Not Exist  ${output}           /result/columns/2

GetData Row
    Ensure Emergent Free
    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 2}
    Status OK Has Result         ${output}
    Json String Should Match     ${output}           /result/columns/0/name      Name
    Json String Should Match     ${output}           /result/columns/1/name    Input
    Json String Should Match     ${output}           /result/columns/2/name    Output
    Json String Should Match     ${output}           /result/columns/0/type    String
    Json String Should Match     ${output}           /result/columns/1/type    float
    Json String Should Match     ${output}           /result/columns/2/type    float
    Json Value Should Equal      ${output}           /result/columns/0/matrix  false
    Json Value Should Equal      ${output}           /result/columns/1/matrix  true
    Json Value Should Equal      ${output}           /result/columns/2/matrix  true
    Json String Should Match     ${output}           /result/columns/0/values/0  rdiag
    Json String Should Match     ${output}           /result/columns/0/values/1  ldiag
    Json Value Should Equal      ${output}           /result/columns/1/values/0/2/2  1
    Json Value Should Equal      ${output}           /result/columns/1/values/0/1/0  0
    Json Value Should Not Exist  ${output}           /result/columns/0/values/2
    Json Value Should Not Exist  ${output}           /result/columns/1/values/2
    Json Value Should Not Exist  ${output}           /result/columns/2/values/2

    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "row_from": -2, "rows": 2}
    Status OK Has Result         ${output}
    Json String Should Match     ${output}           /result/columns/0/name      Name
    Json String Should Match     ${output}           /result/columns/1/name    Input
    Json String Should Match     ${output}           /result/columns/2/name    Output
    Json String Should Match     ${output}           /result/columns/0/type    String
    Json String Should Match     ${output}           /result/columns/1/type    float
    Json String Should Match     ${output}           /result/columns/2/type    float
    Json Value Should Equal      ${output}           /result/columns/0/matrix  false
    Json Value Should Equal      ${output}           /result/columns/1/matrix  true
    Json Value Should Equal      ${output}           /result/columns/2/matrix  true
    Json String Should Match     ${output}           /result/columns/0/values/1  random
    Json String Should Match     ${output}           /result/columns/0/values/0  ldiag
    Json Value Should Equal      ${output}           /result/columns/1/values/0/2/2  1
    Json Value Should Equal      ${output}           /result/columns/1/values/0/1/0  0
    Json Value Should Not Exist  ${output}           /result/columns/0/values/2
    Json Value Should Not Exist  ${output}           /result/columns/1/values/2
    Json Value Should Not Exist  ${output}           /result/columns/2/values/2

    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "row_from": -2, "row_to": -1}
    Status OK Has Result         ${output}
    Json String Should Match     ${output}           /result/columns/0/name      Name
    Json String Should Match     ${output}           /result/columns/1/name    Input
    Json String Should Match     ${output}           /result/columns/2/name    Output
    Json String Should Match     ${output}           /result/columns/0/type    String
    Json String Should Match     ${output}           /result/columns/1/type    float
    Json String Should Match     ${output}           /result/columns/2/type    float
    Json Value Should Equal      ${output}           /result/columns/0/matrix  false
    Json Value Should Equal      ${output}           /result/columns/1/matrix  true
    Json Value Should Equal      ${output}           /result/columns/2/matrix  true
    Json String Should Match     ${output}           /result/columns/0/values/1  random
    Json String Should Match     ${output}           /result/columns/0/values/0  ldiag
    Json Value Should Equal      ${output}           /result/columns/1/values/0/2/2  1
    Json Value Should Equal      ${output}           /result/columns/1/values/0/1/0  0
    Json Value Should Not Exist  ${output}           /result/columns/0/values/2
    Json Value Should Not Exist  ${output}           /result/columns/1/values/2
    Json Value Should Not Exist  ${output}           /result/columns/2/values/2

    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "row_from": -2, "row_to": -2}
    Status OK Has Result         ${output}
    Json String Should Match     ${output}           /result/columns/0/name      Name
    Json String Should Match     ${output}           /result/columns/1/name    Input
    Json String Should Match     ${output}           /result/columns/2/name    Output
    Json String Should Match     ${output}           /result/columns/0/type    String
    Json String Should Match     ${output}           /result/columns/1/type    float
    Json String Should Match     ${output}           /result/columns/2/type    float
    Json Value Should Equal      ${output}           /result/columns/0/matrix  false
    Json Value Should Equal      ${output}           /result/columns/1/matrix  true
    Json Value Should Equal      ${output}           /result/columns/2/matrix  true
    Json String Should Match     ${output}           /result/columns/0/values/0  ldiag
    Json Value Should Equal      ${output}           /result/columns/1/values/0/2/2  1
    Json Value Should Equal      ${output}           /result/columns/1/values/0/1/0  0
    Json Value Should Not Exist  ${output}           /result/columns/0/values/1
    Json Value Should Not Exist  ${output}           /result/columns/1/values/1
    Json Value Should Not Exist  ${output}           /result/columns/2/values/1


    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "row_from": -7, "rows": 2}
    Status Error Match         ${output}     7	     the parameter 'row_from' is out of range

    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "row_from": -2, "row_to": -3}
    Status Error Match         ${output}     7	     the parameter 'row_to' is less than 'row_from'

    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "row_from": -1, "rows": 2}
    Status Error Match         ${output}     7	     the number of rows requested is greater than total rows or the number of rows minus 'row_from' if specified. To get all rows or all rows beyond 'row_from' don't specify 'rows'

    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "row_from": 7, "rows": 2}
    Status Error Match         ${output}     7     the parameter 'row_from' is out of range

    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "row_from": 5, "rows": 2}
    Status Error Match         ${output}     7	     the number of rows requested is greater than total rows or the number of rows minus 'row_from' if specified. To get all rows or all rows beyond 'row_from' don't specify 'rows'

    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "row_from": -2, "rows": -2}
    Status Error Match         ${output}     7	     the parameter 'rows' must be a positive integer value


GetData Cell
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Name"}
    Status OK Has Result       ${output}
    Json String Should Match   ${output}             /result/columns/0/name       Name
    Json String Should Match   ${output}             /result/columns/0/type       String
    Json Value Should Equal    ${output}             /result/columns/0/matrix     false
    Json String Should Match   ${output}             /result/columns/0/values/0   rdiag

GetDataMatrixCell
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Input", "cell": 12}
    Status OK Equal Result     ${output}             1

# Modifying data tables - normal operation tests
#   Note, these tests must be done in order, and require that the Program operations above be run

SetData Row Specified
    Ensure Emergent Free
    ${output} =                  Run Command Wait      {"command": "SetData", "table": "TrialOutputData", "row_from": 3, "data": { "columns": [ { "name": "batch", "values": [8] }, { "name": "epoch", "values": [6] }, { "name": "trial_name", "values": ["letrial"] }, { "name": "sse", "values": [4.4] } ] } }
    Status OK No Result          ${output}
    ${output} =                  Run Command Wait      {"command": "GetData", "table": "TrialOutputData", "row_from": 3, "rows": 1}
    Status OK Has Result         ${output}
    Column Value Should Match    ${output}      0      batch    8
    Column Value Should Match    ${output}      0      trial    3
    Column Value Should Match    ${output}      0      epoch    6
    Column Value Should Match    ${output}      0      trial_name       letrial
    Column Float Value Should Match    ${output}      0      sse              4.4

RemoveData First Two Rows
    Ensure Emergent Free
    ${output} =                  Run Command Wait      {"command": "RemoveData", "table": "TrialOutputData", "rows": 2}
    Status OK No Result          ${output}
    ${output} =                  Run Command Wait      {"command": "GetData", "table": "TrialOutputData"}
    Status OK Has Result         ${output}
    Column Value Should Match    ${output}      0      trial    2
    Column Value Should Match    ${output}      1      trial    3
    Column Value Should Match    ${output}      2      trial    4

SetData No Row Specified
    Ensure Emergent Free
    ${output} =                  Run Command Wait      {"command": "SetData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [8] }, { "name": "epoch", "values": [6] }, { "name": "trial_name", "values": ["letrial"] }, { "name": "sse", "values": [4.4] } ] } }
    Status OK No Result          ${output}
    ${output} =                  Run Command Wait      {"command": "GetData", "table": "TrialOutputData", "rows": 1}
    Status OK Has Result         ${output}
    Column Value Should Match    ${output}      0       batch   8
    Column Value Should Match    ${output}      0       epoch   6
    Column Value Should Match    ${output}      0       trial   2
    Column Value Should Match    ${output}      0       trial_name      letrial
    Column Float Value Should Match    ${output}      0       sse             4.4

RemoveData All Rows                    
    Ensure Emergent Free
    ${output} =                  Run Command Wait      {"command": "GetData", "table": "TrialOutputData"}
    Status OK Has Result         ${output}
    Column Value Should Match    ${output}      0       batch   8
    ${output} =                  Run Command Wait      {"command": "RemoveData", "table": "TrialOutputData"}
    Status OK No Result          ${output}
    ${output} =                  Run Command Wait      {"command": "GetData", "table": "TrialOutputData"}
    Status OK Has Result         ${output}
    Json Value Should Not Exist  ${output}             /result/columns/0/result/0

RemoveData All Rows Empty Table
    Ensure Emergent Free
    ${output} =                  Run Command Wait      {"command": "GetData", "table": "TrialOutputData"}
    Status OK Has Result         ${output}
    Json Value Should Not Exist  ${output}             /result/columns/0/result/0

    ${output} =                  Run Command Wait      {"command": "RemoveData", "table": "TrialOutputData"}
    Status OK No Result          ${output}

    ${output} =                  Run Command Wait      {"command": "GetData", "table": "TrialOutputData"}
    Status OK Has Result         ${output}
    Json Value Should Not Exist  ${output}             /result/columns/0/result/0

#AppendData
#    Ensure Emergent Free
#    ${output} =                  Run Command Wait      {"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] }#, { "name": "trial_name", "values": ["mytrial"] }, { "name": "sse", "values": [10.2] } ] } }
#    Status OK No Result          ${output}
#    ${output} =                  Run Command Wait      {"command": "GetData", "table": "TrialOutputData"}
#    Status OK Has Result         ${output}
#    Column Value Should Match    ${output}      0       batch   7
#    Column Value Should Match    ${output}      0       epoch   9
#    Column Value Should Match    ${output}      0       trial_name      mytrial
#    Column Float Value Should Match    ${output}      0       sse             10.2

#SetData Add Column
#    Ensure Emergent Free
#    ${output} =                  Run Command Wait      {"command": "SetData", "create": true, "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [8] }, { "name": "epoch", "values": [10] }, { "name": "trial_name", "values": ["mytrial2"] }, { "name": "sse", "values": [10.3] }, { "name": "new_col", "values": ["new_col_value"] } ] } }
#    Status OK No Result          ${output}
#    ${output} =                  Run Command Wait      {"command": "GetData", "table": "TrialOutputData"}
#    Status OK Has Result         ${output}
#    Column Value Should Match    ${output}      0       batch   8
#    Column Value Should Match    ${output}      0       epoch   10
#    Column Value Should Match    ${output}      0       trial_name      mytrial2
#    Column Float Value Should Match    ${output}      0       sse             10.3
#    Column Value Should Match    ${output}      0       new_col         new_col_value

#SetData Matrix Cell
#    Ensure Emergent Free
#    ${output} =                  Run Command Wait      {"command": "SetData", "table": "StdInputData", "row_from": 1, "cell": 12, "data": { "columns": [ { "name": "Output", "values": [0] } ] } }
#    Status OK No Result          ${output}
#    ${output} =                  Run Command Wait      {"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 1, "rows": 1, "column": "Output", "cell": 12}
#    # change next 2 lines if "value" is changed to "result"
#    Status OK Equal Result       ${output}             0

# Data Table error tests

# Table not found

GetData Table Not Found Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "GetData", "table": "NotATable"}
    Status Error Match         ${output}             5                  Table 'NotATable' not found

GetDataTableCell Table Not Found Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "GetData", "table": "NotATable", "row_from": 3, "rows": 1, "column": "Name"}
    Status Error Match         ${output}             5                  Table 'NotATable' not found

GetDataMatrixCell Table Not Found Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "GetDataMatrixCell", "table": "NotATable", "row_from": 3, "rows": 1, "column": "Input", "cell": 12}
    Status Error Match         ${output}             5                  Table 'NotATable' not found

AppendData Table Not Found Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "AppendData", "table": "NotATable", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }
    Status Error Match         ${output}             5                  Table 'NotATable' not found

SetData Table Not Found Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "SetData", "table": "NotATable", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }
    Status Error Match         ${output}             5                  Table 'NotATable' not found

RemoveData Table Not Found Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "RemoveData", "table": "NotATable"}
    Status Error Match         ${output}             5                  Table 'NotATable' not found

# Row error

GetDataTable Invalid Row Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "GetData", "table": "StdInputData", "row_from": 1024, "rows": 1}
    Status Error Match         ${output}             7                  the parameter 'row_from' is out of range

GetDataTableCell Invalid Row Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "GetData", "table": "StdInputData", "row_from": 1024, "rows": 1, "column": "Name"}
    Status Error Match         ${output}             7                  the parameter 'row_from' is out of range

RemoveData Invalid Row Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "RemoveData", "table": "StdInputData", "row_from": 1024, "rows": 1}
    Status Error Match         ${output}             7                  the parameter 'row_from' is out of range

SetData Invalid Row Error
    Ensure Emergent Free
    ${output} =                Run Command Wait      {"command": "SetData", "table": "StdInputData", "row_from": 1024, "rows": 1}
    Status Error Match         ${output}             7                  the parameter 'row_from' is out of range

# Currently fails in emergent. So comment it out until it is fixed there.
# This is covered by https://grey.colorado.edu/bugzilla/show_bug.cgi?id=2000
#
#SetData Too Many Rows With One Row Error
#    ${output} =                  Run Command Wait      {"command": "RemoveData", "table": "TrialOutputData"}
#    Status OK No Result          ${output}
#    ${output} =                  Run Command Wait      {"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [8] } ] } }
#    Status OK No Result          ${output}
#    ${output} =                  Run Command Wait      {"command": "SetData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [8, 9] } ] } }
#    Status Error Match           ${output}             7                SetData: cell range error

# Currently fails in emergent. So comment it out until it is fixed there.
# This is covered by https://grey.colorado.edu/bugzilla/show_bug.cgi?id=2000
#
#SetData Too Many Rows With No Rows Error
#    ${output} =                  Run Command Wait      {"command": "RemoveData", "table": "TrialOutputData"}
#    Status OK No Result          ${output}
#    ${output} =                  Run Command Wait      {"command": "SetData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [8] } ] } }
#    Status Error Match           ${output}             7                SetData: cell range error

# Column not found

GetData Column Not Found Error
    ${output} =                Run Command Wait      {"command": "GetData", "table": "StdInputData", "column": "NotAColumn"}
    Status Error Match         ${output}             7                  GetData: column not found

GetDataTableCell Column Not Found Error
    ${output} =                Run Command Wait      {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "NotAColumn"}
    Status Error Match         ${output}             7                  GetData: column not found

GetDataMatrixCell Column Not Found Error
    ${output} =                Run Command Wait      {"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "NotAColumn", "cell": 12}
    Status Error Match         ${output}             7                  GetDataMatrixCell: column not found; column not found

#AppendData Column Not Found Error
#    ${output} =                Run Command Wait      {"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "NotAColumn", "values": [7] }, { "name": "epoch", "values": [9] } ] } }
#    Status Error Match         ${output}             7                  Column name 'NotAColumn' not found in data table 'TrialOutputData'

#SetData Column Not Found No Create Error
#    ${output} =                Run Command Wait      {"command": "SetData", "table": "TrialOutputData", "data": { "columns": [ { "name": "NotAColumn", "values": [7] }, { "name": "epoch", "values": [9] } ] } }
#    Status Error Match         ${output}             7                  Column name 'NotAColumn' not found in data table 'TrialOutputData'

#SetData Column Not Found Create False Error
#    ${output} =                Run Command Wait      {"command": "SetData", "create": false, "table": "TrialOutputData", "data": { "columns": [ { "name": "NotAColumn", "values": [7] }, { "name": "epoch", "values": [9] } ] } }
#    Status Error Match         ${output}             7                  Column name 'NotAColumn' not found in data table 'TrialOutputData'

# Set Data Matrix error

#SetData Matrix Cell Error
#    ${output} =                  Run Command Wait      {"command": "SetData", "table": "StdInputData", "row_from": 1, "cell": 1024, "data": { "columns": [ { "name": "Output", "values": [0] } ] } }
#    Status Error Match           ${output}           7                  SetData: cell range error

# Bad data format for Append / SetData

#AppendData Bad Data Format (data)
#    ${output} =                Run Command Wait      {"command": "AppendData", "table": "TrialOutputData", "dater": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }
#    Status Error Match         ${output}             4                  Unknown parameter: dater

#AppendData Bad Data Format (columns)
#    ${output} =                Run Command Wait      {"command": "AppendData", "table": "TrialOutputData", "data": { "corumns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }
#    Status Error Match         ${output}             7                  Columns member not found in data

#AppendData Bad Data Format (name)
#    ${output} =                Run Command Wait      {"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "gname": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }
#    Status Error Match         ${output}             7                  Column member 'name' not found

#SetData Bad Data Format (data)
#    ${output} =                Run Command Wait      {"command": "SetData", "table": "TrialOutputData", "dater": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }
#    Status Error Match         ${output}             4                  Unknown parameter: dater

#SetData Bad Data Format (columns)
#    ${output} =                Run Command Wait      {"command": "SetData", "table": "TrialOutputData", "data": { "corumns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }
#    Status Error Match         ${output}             7                  Columns member not found in data

#SetData Bad Data Format (name)
#    ${output} =                Run Command Wait      {"command": "SetData", "table": "TrialOutputData", "data": { "columns": [ { "gname": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }
#    Status Error Match         ${output}             7                  Column member 'name' not found

# RemoveData Errors

# This test can be restored when there is more checking for superfluous parameters
#RemoveData Specify Column Error 
#    ${output} =                  Run Command Wait      {"command": "RemoveData", "table": "TrialOutputData", "column": "trial"}
#    Status Error Match           ${output}             5                Invalid parameter: column
#    ${output} =                  Run Command Wait      {"command": "GetData", "table": "TrialOutputData"}
#    Status OK Has Result         ${output}
#    Json Value Should Equal      ${output}             /result/columns/0/result/0   7    # From very last AppendData under normal operation



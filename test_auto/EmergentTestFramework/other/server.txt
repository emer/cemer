*** Settings ***

Library          Telnet
Library          HttpLibrary.HTTP
Library          Process
Library          OperatingSystem

Suite Setup      Initialize Emergent
Suite Teardown   Shutdown Emergent

*** Variables ***

*** Test Cases ***

# Initialization and general tests

Connection
    Sleep                   1 sec
    ${output} =             Read
    Print                   ${output}
    Should Contain          ${output}    Emergent Server v6.

Native Test
    ${output} =             Run Command Wait      GetRunState
    Should Contain          ${output}             OK
    Message Should Match    ${output}             4

Garbage JSON
    ${output} =              Run Command Wait      {NotValidJSON}
    Status Error Match       ${output}             2         Invalid JSON

Valid JSON No Command
    ${output} =              Run Command Wait      {"irrelevant": "value"}
    Status Error Match       ${output}             2         Missing Param

Invalid Command
    ${output} =              Run Command Wait      {"command": "InvalidCommand"}
    Status Error Match       ${output}             4         Unknown command

Extra Parameter
    ${output} =              Run Command Wait      {"command": "GetRunState", "irrelevant": "value"}
    Status Error Match       ${output}             5         Unknown Param

# RunStates and RunProgram

General RunState
    ${output} =                Run Command Wait      {"command": "GetRunState"}
    Status OK Match Result     ${output}             4

Program RunState
    ${output} =                Run Command Wait      {"command": "GetRunState", "program": "LeabraBatch"}
    Status OK Match Result     ${output}             4
    
Run Program
    [Tags]                     slow
    ${output} =                Run Command           {"command": "RunProgram", "program": "LeabraBatch"}   20 sec
    Status OK No Result        ${output}

Program RunState After Init
    ${output} =                Run Command Wait      {"command": "GetRunState", "program": "LeabraBatch"}
    Status OK Match Result     ${output}             0

General RunState After Init
    ${output} =                Run Command Wait      {"command": "GetRunState"}
    Status OK Match Result     ${output}             0
    
Run Program Async
    [Tags]                     slow
    ${output} =                Run Command Wait      {"command": "RunProgramAsync", "program": "LeabraBatch"}
    Status OK No Result        ${output}
    ${output} =                Run Command Wait      {"command": "GetRunState"}
    Status OK Match Result     ${output}             2
    ${output} =                Run Command           {"command": "GetRunState", "program": "LeabraBatch"}    20 sec
    Status OK Match Result     ${output}             0
    
Run Nonexistent Program
    ${output} =                Run Command Wait      {"command": "RunProgram", "program": "DoesNotExist"}
    Status Error Match         ${output}             6        Program Not Found    

# Data Tables

Read Full Data Table
    ${output} =                Run Command Wait      {"command": "GetData", "table": "StdInputData"}
    Status OK Has Result       ${output}
    Json String Should Match   ${output}             /result/columns/0/name    Name
    Json String Should Match   ${output}             /result/columns/1/name    Input
    Json String Should Match   ${output}             /result/columns/2/name    Output
    Json String Should Match   ${output}             /result/columns/0/type    String
    Json String Should Match   ${output}             /result/columns/1/type    float
    Json String Should Match   ${output}             /result/columns/2/type    float
    Json Value Should Equal    ${output}             /result/columns/0/matrix  false
    Json Value Should Equal    ${output}             /result/columns/1/matrix  true
    Json Value Should Equal    ${output}             /result/columns/2/matrix  true
    Json String Should Match   ${output}             /result/columns/0/values/0  checks
    Json String Should Match   ${output}             /result/columns/0/values/1  mitvert
    Json String Should Match   ${output}             /result/columns/0/values/2  midhoriz
    Json String Should Match   ${output}             /result/columns/0/values/3  rdiag
    Json String Should Match   ${output}             /result/columns/0/values/4  ldiag
    Json String Should Match   ${output}             /result/columns/0/values/5  random
    Json Value Should Equal    ${output}             /result/columns/1/values/0/0/0  1
    Json Value Should Equal    ${output}             /result/columns/1/values/0/1/2  0
    Json Value Should Equal    ${output}             /result/columns/1/values/0/2/2  1
    Json Value Should Equal    ${output}             /result/columns/1/values/2/2/2  1
    Json Value Should Equal    ${output}             /result/columns/1/values/2/1/0  0

Read Data Table Column
    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "column": "Name"}
    Status OK Has Result         ${output}
    Json String Should Match     ${output}           /result/columns/0/name    Name
    Json String Should Match     ${output}           /result/columns/0/values/0  checks
    Json String Should Match     ${output}           /result/columns/0/values/1  mitvert
    Json String Should Match     ${output}           /result/columns/0/values/2  midhoriz
    Json String Should Match     ${output}           /result/columns/0/values/3  rdiag
    Json String Should Match     ${output}           /result/columns/0/values/4  ldiag
    Json String Should Match     ${output}           /result/columns/0/values/5  random
    Json Value Should Not Exist  ${output}           /result/columns/1
    Json Value Should Not Exist  ${output}           /result/columns/2

Read Data Table Row
    ${output} =                  Run Command Wait    {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 2}
    Status OK Has Result         ${output}
    Json String Should Match     ${output}           /result/columns/0/name      Name
    Json String Should Match     ${output}           /result/columns/1/name    Input
    Json String Should Match     ${output}           /result/columns/2/name    Output
    Json String Should Match     ${output}           /result/columns/0/type    String
    Json String Should Match     ${output}           /result/columns/1/type    float
    Json String Should Match     ${output}           /result/columns/2/type    float
    Json Value Should Equal      ${output}           /result/columns/0/matrix  false
    Json Value Should Equal      ${output}           /result/columns/1/matrix  true
    Json Value Should Equal      ${output}           /result/columns/2/matrix  true
    Json String Should Match     ${output}           /result/columns/0/values/0  rdiag
    Json String Should Match     ${output}           /result/columns/0/values/1  ldiag
    Json Value Should Equal      ${output}           /result/columns/1/values/0/2/2  1
    Json Value Should Equal      ${output}           /result/columns/1/values/0/1/0  0
    Json Value Should Not Exist  ${output}           /result/columns/0/values/2
    Json Value Should Not Exist  ${output}           /result/columns/1/values/2
    Json Value Should Not Exist  ${output}           /result/columns/2/values/2

Read Data Table Cell
    ${output} =                Run Command Wait      {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Name"}
    Status OK Has Result       ${output}
    Json String Should Match   ${output}             /result/columns/0/name       Name
    Json String Should Match   ${output}             /result/columns/0/type       String
    Json Value Should Equal    ${output}             /result/columns/0/matrix     false
    Json String Should Match   ${output}             /result/columns/0/values/0   rdiag

Read Data Table Matrix Cell
    ${output} =                Run Command Wait      {"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Input", "cell": 12}
    Status OK Match Result     ${output}             1
    # Used to be "value"
    # Json Value Should Equal    ${output}             /value			1

Read Data Table Cell Column Error
    ${output} =                Run Command Wait      {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "NotAColumn"}
    Status Error Match         ${output}             8                  GetData: column not found

Remove Data                    
    ${output} =                  Run Command Wait      {"command": "RemoveData", "table": "TrialOutputData"}
    Status OK No Result          ${output}
    ${output} =                  Run Command Wait      {"command": "GetData", "table": "TrialOutputData"}
    Should Be Valid Json         ${output}
    Json Value Should Not Exist  ${output}             /result/columns/0/values/0

Append Data Table
    ${output} =                Run Command Wait      {"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }
    Status OK No Result        ${output}
    ${output} =                Run Command Wait      {"command": "GetData", "table": "TrialOutputData"}
    Status OK Has Result       ${output}
    Json Value Should Equal    ${output}             /result/columns/0/values/0   7
    Json Value Should Equal    ${output}             /result/columns/1/values/0   9


*** Keywords ***

Status OK No Result
    [Arguments]                   ${output}
    Status OK                     ${output}
    Json Value Should Not Exist   ${output}          /result

Status OK Has Result
    [Arguments]                   ${output}
    Status OK                     ${output}
    Get Json Value                ${output}          /result

Status OK Match Result
    [Arguments]                   ${output}          ${expected}
    Status OK                     ${output}
    Json String Should Match      ${output}          /result            ${expected}

Status OK
    [Arguments]                   ${output}
    Should Be Valid Json          ${output}
    Json String Should Match      ${output}          /status            OK
    Json Value Should Not Exist   ${output}          /message
    Json Value Should Not Exist   ${output}          /error

Status Error Match
    [Arguments]                   ${output}    ${error}   ${message}
    Status Error                  ${output}
    Json Value Should Equal       ${output}          /error             ${error}
    Json String Should Match      ${output}          /message           ${message}
    
Status Error
    [Arguments]                   ${output}
    Should Be Valid Json          ${output}
    Json String Should Match      ${output}          /status            ERROR
    Json Value Should Not Exist   ${output}          /result

Message Should Match
    [Arguments]        ${output}    ${expected}
    ${match}           ${message} =
    ...                Should Match Regexp    ${output}    OK (.*)
    Should Be Equal    ${expected}   ${message}

Json Value Should Match
    [Arguments]        ${json}    ${pointer}    ${expected}
    ${value} =         Get Json Value    ${json}    ${pointer}
    Should Match       ${value}    ${expected}

Json Value Should Not Exist
    [Arguments]        ${json}    ${pointer}
    Run Keyword And Expect Error  JsonPointerException*  Get Json Value  ${json}  ${pointer}

Json String Should Match
    [Arguments]        ${json}    ${pointer}    ${expected}
    ${value} =         Get Json String    ${json}    ${pointer}
    Should Match       ${value}    ${expected}

Get Json String
    [Arguments]        ${json}                   ${pointer}
    ${value} =         Get Json Value            ${json}        ${pointer}
    ${match}           ${output} =
    ...                Should Match Regexp       ${value}       "(.*)"
    [return]           ${output}

Print
    [Arguments]        ${text}
    Log                ${text}    WARN

# Get Json Value                string, pointer, ...
# Json Value Should Equal       string, pointer, expected
# Json Value Should Not Equal   string, pointer, expected
# Log Json                      string, (args)
# Parse Json                    string
# Set Json Value                string, pointer, value
# Should Be Valid Json          string

Initialize Emergent
    ${pid} =             Start Process      emergent -nogui -server -p ../test-projects/LeabraStd.proj    shell=True
    Set Suite Variable   ${pid}
    Sleep                4 sec   # Could do a loop and use Is Process Running but not a big deal
    Open Connection      127.0.0.1    port=5360

Shutdown Emergent
    Close All Connections
    Sleep                2 sec
    ${output} =          Terminate Process    ${pid}       kill=true

Run Command Wait
    [Arguments]        ${command}
    ${output} =        Run Command    ${command}   500ms
    [Return]           ${output}

Run Command
    [Arguments]        ${command}    ${wait}
    Print              [Sending] ${command}    # temporary
    Write Bare         ${command}\n
    Sleep              ${wait}
    ${output} =        Read
    Print              [Received] ${output}    # this is temporary just so I can see what's happening
    [Return]           ${output}



*** Settings ***
Resource           Emergent.txt
Resource           Server_lib.txt

Suite Setup      Initialize Emergent    ./test-projects/TestProgramingPrimatives.proj
Suite Teardown   Shutdown Emergent


*** Variables ***
${debug} =       false

*** Test Cases ***

Initialize
    Set Suite Variable     ${verbose}       ${false}
    Run Keyword If         '${debug}' == 'true'       Set Suite Variable   ${verbose}  ${true}

Connection
    Sleep                  1 sec
    ${output} =            Read
    Print                  ${output}
    Should Contain         ${output}    Emergent Server v8.

Test For
    ${output} =                Run Emergent Program           For
    ${expected result} =       Set Variable   "\ \ i = 0\\n\ \ i = 1\\n\ \ i = 2\\n\ \ i = 3\\n\ \ i = 4\\n\ \ i = 5\\n\ \ i = 6\\n\ \ i = 7\\n\ \ i = 8\\n\ \ i = 9\\n"
    Should Match             ${output}      ${expected_result}

Test Foreach
    ${output} =                Run Emergent Program           Foreach
    Should Contain             ${output}    "0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1\\n-1\\n-2\\n-3\\n-4\\n-5\\n-6\\n-7\\n-8\\n-9\\n"

Test Switch
    Set Emergent Var		Switch		sw_int_var	0
    ${output} =			Run Emergent Program	Switch
    Should Contain		${output}    sw_int_var = 0\\ngot case 0\\n
    Set Emergent Var		Switch		sw_int_var	1
    ${output} =			Run Emergent Program	Switch
    Should Contain		${output}    sw_int_var = 1\\ngot case 1\\n
    Set Emergent Var		Switch		sw_int_var	2
    ${output} =			Run Emergent Program	Switch
    Should Contain		${output}    sw_int_var = 2\\ngot case 2\\n
    Set Emergent Var		Switch		sw_int_var	3
    ${output} =			Run Emergent Program	Switch
    Should Contain		${output}    sw_int_var = 3\\ngot case 3\\n
    Set Emergent Var		Switch		sw_int_var	4
    ${output} =			Run Emergent Program	Switch
    Should Contain		${output}    sw_int_var = 4\\ngot default case\\n
    Set Emergent Var		Switch		sw_int_var	-2
    ${output} =			Run Emergent Program	Switch
    Should Contain		${output}    sw_int_var = -2\\ngot default case\\n


    

Test If_Else
    Set Emergent Var		If_Else		value	4
    ${output} =			Run Emergent Program	If_Else
    Should Contain		${output}    value is less than 5\\n
    Set Emergent Var		If_Else		value	-6
    ${output} =			Run Emergent Program	If_Else
    Should Contain		${output}    value is less than 5\\n
    Set Emergent Var		If_Else		value	6
    ${output} =			Run Emergent Program	If_Else
    Should Contain		${output}    value is greater than 5\\n
    Set Emergent Var		If_Else		value	5
    ${output} =			Run Emergent Program	If_Else
    Should Contain		${output}    value is exactly 5\\n



Test Conditional_Printing
    ${output} =                Run Command           {"command": "RunProgram", "program": "Conditional_Printing"}   5 sec
    Status OK No Result        ${output}

Test Strings
    ${output} =                Run Command           {"command": "RunProgram", "program": "Strings"}   5 sec
    Status OK No Result        ${output}

Test DynEnum
    ${output} =                Run Command           {"command": "RunProgram", "program": "DynEnum"}   5 sec
    Status OK No Result        ${output}

Test Matrix
    ${output} =                Run Command           {"command": "RunProgram", "program": "Matrix"}   5 sec
    Status OK No Result        ${output}

Test Global_vs_Local
    ${output} =                Run Command           {"command": "RunProgram", "program": "Global_vs_Local"}   5 sec
    Status OK No Result        ${output}

Test ReadAndPrintAllRows
    ${output} =                Run Command           {"command": "RunProgram", "program": "ReadAndPrintAllRows"}   5 sec
    Status OK No Result        ${output}

Test ReadRowBySpecifyingByNumber
    ${output} =                Run Command           {"command": "RunProgram", "program": "ReadRowBySpecifyingByNumber"}   5 sec
    Status OK No Result        ${output}

Test ReadRowBySpecifyingValue
    ${output} =                Run Command           {"command": "RunProgram", "program": "ReadRowBySpecifyingValue"}   5 sec
    Status OK No Result        ${output}

Test AddRowsAndWriteToTable
    ${output} =                Run Command           {"command": "RunProgram", "program": "AddRowsAndWriteToTable"}   5 sec
    Status OK No Result        ${output}

Test ReadFromManyColumns
    ${output} =                Run Command           {"command": "RunProgram", "program": "ReadFromManyColumns"}   5 sec
    Status OK No Result        ${output}

Test UseLocalVarWhenAccessingMatrices
    ${output} =                Run Command           {"command": "RunProgram", "program": "UseLocalVarWhenAccessingMatrices"}   5 sec
    Status OK No Result        ${output}

Test DataTable_css
    ${output} =                Run Command           {"command": "RunProgram", "program": "DataTable_css"}   5 sec
    Status OK No Result        ${output}

Test DataLoop
    ${output} =                Run Command           {"command": "RunProgram", "program": "DataLoop"}   5 sec
    Status OK No Result        ${output}

Test DataCalcLoop
    ${output} =                Run Command           {"command": "RunProgram", "program": "DataCalcLoop"}   5 sec
    Status OK No Result        ${output}

Test DataSelect
    ${output} =                Run Command           {"command": "RunProgram", "program": "DataSelect"}   5 sec
    Status OK No Result        ${output}

Test DataGroup
    ${output} =                Run Command           {"command": "RunProgram", "program": "DataGroup"}   5 sec
    Status OK No Result        ${output}

Test DataSort
    ${output} =                Run Command           {"command": "RunProgram", "program": "DataSort"}   5 sec
    Status OK No Result        ${output}

Test DataJoin
    ${output} =                Run Command           {"command": "RunProgram", "program": "DataJoin"}   5 sec
    Status OK No Result        ${output}

Test RandomInteger
    ${output} =                Run Command           {"command": "RunProgram", "program": "RandomInteger"}   5 sec
    Status OK No Result        ${output}

Test RandomFloats
    ${output} =                Run Command           {"command": "RunProgram", "program": "RandomFloats"}   5 sec
    Status OK No Result        ${output}

Test MiscMath
    ${output} =                Run Command           {"command": "RunProgram", "program": "MiscMath"}   5 sec
    Status OK No Result        ${output}

Test CallFunctionReturnValue
    ${output} =			Run Emergent Program	CallFunctionReturnValue
    Should Contain		${output}    result = 650.25


Test CallFunctionNoReturn
    ${output} =                Run Command           {"command": "RunProgram", "program": "CallFunctionNoReturn"}   5 sec
    Status OK No Result        ${output}

Test CallingProgram
    ${output} =			Run Emergent Program	CallingProgram
    Should Contain		${output}    Program_B - I've been called

Test CallingProgramFunction
    ${output} =			Run Emergent Program	CallingProgramFunction
    Should Contain		${output}    Program_B:TestFunction - I've been called
    Should Not Contain		${output}    Program_B - I've been called


Test ProgramSeekingValue
    ${output} =			Run Emergent Program	ProgramSeekingValue
    Should Contain		${output}    user_name = mike\ \ location = boulder\\n
    Set Emergent Var		ProgramWithValue		user_name	"peter"
    Set Emergent Var		ProgramWithValue		location	"denver"
    ${output} =			Run Emergent Program	ProgramSeekingValue
    Should Contain		${output}    user_name = peter\ \ location = denver\\n

















** Settings ***

Library          Telnet
Library          HttpLibrary.HTTP
Library          Process
Library          OperatingSystem

Resource         Server_lib.txt

Suite Setup      Initialize Emergent    ../../test/TestLookupParse.proj
Suite Teardown   Shutdown Emergent

*** Variables ***

# use 'pybot -v debug:true server.txt' on the command line to
#      output the transmissions to/from Emergent using warnings
${debug} =       false

*** Test Cases ***

# Ideas on things to test
#  - SetDataTableCell and Matrix Cell

#
# Initialization and general tests
#

Initialize
    Set Suite Variable     ${verbose}       ${false}
    Run Keyword If         '${debug}' == 'true'       Set Suite Variable   ${verbose}  ${true}

Connection
    Sleep                  1 sec
    ${output} =            Read
    Print                  ${output}
    Should Contain         ${output}    Emergent Server v7.

# TODO: Start another process and check for the "Too many connections already" error.

#
# ParserTest
#

General RunState
    ${output} =                Run Command Wait      {"command": "GetRunState"}
    Status OK Match Result     ${output}             4

ParseNoText
    Ensure Emergent Free
    Set Suite Variable   ${program_test}       "no_text"
    ${output} =                Run Command Wait      {"command": "RunProgram", "program": ${program_test}}
    Status OK No Result        ${output}
    
    ${output} =                Run Command Wait      {"command": "GetVar", "program": ${program_test}, "var_name": "lookup_type"}
    Status OK 		       ${output}
    Json Value Should Equal    ${output}             /result  1

    Prog Var Should Be Empty	lookup_seed
    Prog Var Should Be Empty	prepend_txt
    Prog Var Should Be Empty	append_txt
    Prog Var Should Be Empty	prog_el_txt
    Prog Var Should Be Empty	path_var
    Prog Var Should Be Empty	path_prepend_txt
    Prog Var Should Be Empty	path_rest
    Prog Var Should Be Empty	base_path

ParseObjectSelectMethodOrMember
    Ensure Emergent Free
    Set Suite Variable   ${program_test}       "object_select_method_or_member"
    ${output} =                Run Command Wait      {"command": "RunProgram", "program": ${program_test}}
    Status OK No Result        ${output}
    
    ${output} =                Run Command Wait      {"command": "GetVar", "program": ${program_test}, "var_name": "lookup_type"}
    Status OK 		       ${output}
    Json Value Should Equal    ${output}             /result  2

    Prog Var Should Be Empty	lookup_seed
    Prog Var Should Be Empty	prepend_txt
    Prog Var Should Be Empty	append_txt
    Prog Var Should Be Empty	prog_el_txt
    Prog Var Should Be Empty	path_var
    Prog Var Should Match	path_prepend_txt      DataTable_28->
    Prog Var Should Be Empty	   path_rest
    Prog Var Should Match	base_path	      DataTable_28

ParseStaticMethodRandom
    Ensure Emergent Free
    Set Suite Variable   ${program_test}       "static_method_random"
    ${output} =                Run Command Wait      {"command": "RunProgram", "program": ${program_test}}
    Status OK No Result        ${output}
    
    ${output} =                Run Command Wait      {"command": "GetVar", "program": ${program_test}, "var_name": "lookup_type"}
    Status OK 		       ${output}
    Json Value Should Equal    ${output}             /result  3

    Prog Var Should Be Empty	lookup_seed
    Prog Var Should Be Empty	prepend_txt
    Prog Var Should Be Empty	append_txt
    Prog Var Should Be Empty	prog_el_txt
    Prog Var Should Be Empty	path_var
    Prog Var Should Match	path_prepend_txt      Random::
    Prog Var Should Be Empty	   path_rest
    Prog Var Should Match	base_path	      Random

ParseStaticMethodRandomSeeded
    Ensure Emergent Free
    Set Suite Variable   ${program_test}       "static_method_random_seeded"
    ${output} =                Run Command Wait      {"command": "RunProgram", "program": ${program_test}}
    Status OK No Result        ${output}
    
    ${output} =                Run Command Wait      {"command": "GetVar", "program": ${program_test}, "var_name": "lookup_type"}
    Status OK 		       ${output}
    Json Value Should Equal    ${output}             /result  3

    Prog Var Should Match	lookup_seed	     Int
    Prog Var Should Be Empty	prepend_txt
    Prog Var Should Be Empty	append_txt
    Prog Var Should Be Empty	prog_el_txt
    Prog Var Should Be Empty	path_var
    Prog Var Should Match	path_prepend_txt      Random::
    Prog Var Should Be Empty	   path_rest
    Prog Var Should Match	base_path	      Random

ParseObjectMemberSelectMethodOrMember
    Ensure Emergent Free
    Set Suite Variable   ${program_test}       "object_member_select_method_or_member"
    ${output} =                Run Command Wait      {"command": "RunProgram", "program": ${program_test}}
    Status OK No Result        ${output}
    
    ${output} =                Run Command Wait      {"command": "GetVar", "program": ${program_test}, "var_name": "lookup_type"}
    Status OK 		       ${output}
    Json Value Should Equal    ${output}             /result  2

    Prog Var Should Be Empty	lookup_seed
    Prog Var Should Be Empty	prepend_txt
    Prog Var Should Be Empty	append_txt
    Prog Var Should Be Empty	prog_el_txt
    Prog Var Should Match	path_var	      DataTable_28
    Prog Var Should Match	path_prepend_txt      DataTable_28.cell_view.
    Prog Var Should Match	path_rest	      cell_view
    Prog Var Should Match	base_path	      DataTable_28.cell_view

ParseObjectMemberSelectMethodOrMemberSeeded
    Ensure Emergent Free
    Set Suite Variable   ${program_test}       "object_member_select_method_or_member_seeded"
    ${output} =                Run Command Wait      {"command": "RunProgram", "program": ${program_test}}
    Status OK No Result        ${output}
    
    ${output} =                Run Command Wait      {"command": "GetVar", "program": ${program_test}, "var_name": "lookup_type"}
    Status OK 		       ${output}
    Json Value Should Equal    ${output}             /result  2

    Prog Var Should MAtch	lookup_seed	     af
    Prog Var Should Be Empty	prepend_txt
    Prog Var Should Be Empty	append_txt
    Prog Var Should Be Empty	prog_el_txt
    Prog Var Should Match	path_var	      DataTable_28
    Prog Var Should Match	path_prepend_txt      DataTable_28.cell_view.
    Prog Var Should Match	path_rest	      cell_view
    Prog Var Should Match	base_path	      DataTable_28.cell_view




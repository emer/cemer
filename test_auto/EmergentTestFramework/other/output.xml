<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20140401 14:11:17.262" generator="Robot 2.8.4 (Python 2.7.5 on darwin)">
<suite source="/Users/rohrlich/emergent/test_auto/EmergentTestFramework/other/server.txt" id="s1" name="Server">
<kw type="setup" name="Initialize Emergent">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -server -p ../test-projects/LeabraStd.proj</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140401 14:11:17.393" level="INFO">Starting process:
emergent -nogui -server -p ../test-projects/LeabraStd.proj</msg>
<msg timestamp="20140401 14:11:17.397" level="INFO">${pid} = 1</msg>
<status status="PASS" endtime="20140401 14:11:17.397" starttime="20140401 14:11:17.393"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${pid}</arg>
</arguments>
<msg timestamp="20140401 14:11:17.399" level="INFO">${pid} = 1</msg>
<status status="PASS" endtime="20140401 14:11:17.399" starttime="20140401 14:11:17.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4 sec</arg>
</arguments>
<msg timestamp="20140401 14:11:21.401" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20140401 14:11:21.401" starttime="20140401 14:11:17.399"></status>
</kw>
<kw type="kw" name="Telnet.Open Connection">
<doc>Opens a new Telnet connection to the given host and port.</doc>
<arguments>
<arg>127.0.0.1</arg>
<arg>port=5360</arg>
</arguments>
<msg timestamp="20140401 14:11:21.402" level="INFO">Opening connection to 127.0.0.1:5360 with prompt: None</msg>
<status status="PASS" endtime="20140401 14:11:21.410" starttime="20140401 14:11:21.402"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:21.410" starttime="20140401 14:11:17.392"></status>
</kw>
<test id="s1-t1" name="Connection">
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1 sec</arg>
</arguments>
<msg timestamp="20140401 14:11:22.413" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20140401 14:11:22.413" starttime="20140401 14:11:21.411"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:22.415" level="INFO">Emergent Server v6.3.6</msg>
<msg timestamp="20140401 14:11:22.416" level="INFO">${result} = Emergent Server v6.3.6
</msg>
<status status="PASS" endtime="20140401 14:11:22.415" starttime="20140401 14:11:22.414"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:22.417" level="WARN">Emergent Server v6.3.6
</msg>
<status status="PASS" endtime="20140401 14:11:22.418" starttime="20140401 14:11:22.417"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:22.418" starttime="20140401 14:11:22.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Emergent Server v6.</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:22.418" starttime="20140401 14:11:22.418"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140401 14:11:22.419" critical="yes" starttime="20140401 14:11:21.410"></status>
</test>
<test id="s1-t2" name="Native Test">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>GetRunState</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:22.423" level="WARN">[Sending] GetRunState</msg>
<status status="PASS" endtime="20140401 14:11:22.423" starttime="20140401 14:11:22.422"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:22.423" starttime="20140401 14:11:22.421"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:22.424" starttime="20140401 14:11:22.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:22.925" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:22.926" starttime="20140401 14:11:22.424"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:22.927" level="INFO">OK 4</msg>
<msg timestamp="20140401 14:11:22.927" level="INFO">${result} = OK 4
</msg>
<status status="PASS" endtime="20140401 14:11:22.927" starttime="20140401 14:11:22.926"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:22.929" level="WARN">[Received] OK 4
</msg>
<status status="PASS" endtime="20140401 14:11:22.929" starttime="20140401 14:11:22.928"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:22.929" starttime="20140401 14:11:22.927"></status>
</kw>
<msg timestamp="20140401 14:11:22.929" level="INFO">${result} = OK 4
</msg>
<status status="PASS" endtime="20140401 14:11:22.929" starttime="20140401 14:11:22.420"></status>
</kw>
<msg timestamp="20140401 14:11:22.930" level="INFO">${result} = OK 4
</msg>
<status status="PASS" endtime="20140401 14:11:22.930" starttime="20140401 14:11:22.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:22.930" starttime="20140401 14:11:22.930"></status>
</kw>
<kw type="kw" name="Message Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>4</arg>
</arguments>
<kw type="kw" name="${match}, ${message} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${result}</arg>
<arg>OK (.*)</arg>
</arguments>
<msg timestamp="20140401 14:11:22.931" level="INFO">${match} = OK 4</msg>
<msg timestamp="20140401 14:11:22.931" level="INFO">${message} = 4</msg>
<status status="PASS" endtime="20140401 14:11:22.931" starttime="20140401 14:11:22.931"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${message}</arg>
</arguments>
<msg timestamp="20140401 14:11:22.932" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140401 14:11:22.932" starttime="20140401 14:11:22.932"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:22.932" starttime="20140401 14:11:22.930"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140401 14:11:22.932" critical="yes" starttime="20140401 14:11:22.419"></status>
</test>
<test id="s1-t3" name="General RunState">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetRunState"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:22.935" level="WARN">[Sending] {"command": "GetRunState"}</msg>
<status status="PASS" endtime="20140401 14:11:22.935" starttime="20140401 14:11:22.935"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:22.935" starttime="20140401 14:11:22.934"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:22.935" starttime="20140401 14:11:22.935"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:23.437" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:23.438" starttime="20140401 14:11:22.936"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:23.439" level="INFO">{
	"status" : "OK",
	"result" : "4"
}</msg>
<msg timestamp="20140401 14:11:23.439" level="INFO">${result} = {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140401 14:11:23.439" starttime="20140401 14:11:23.438"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:23.441" level="WARN">[Received] {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140401 14:11:23.441" starttime="20140401 14:11:23.441"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:23.441" starttime="20140401 14:11:23.439"></status>
</kw>
<msg timestamp="20140401 14:11:23.442" level="INFO">${result} = {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140401 14:11:23.442" starttime="20140401 14:11:22.933"></status>
</kw>
<msg timestamp="20140401 14:11:23.442" level="INFO">${result} = {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140401 14:11:23.442" starttime="20140401 14:11:22.933"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:23.443" starttime="20140401 14:11:23.443"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:23.445" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140401 14:11:23.445" starttime="20140401 14:11:23.444"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:23.445" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140401 14:11:23.445" level="INFO">${result} = OK</msg>
<status status="PASS" endtime="20140401 14:11:23.445" starttime="20140401 14:11:23.445"></status>
</kw>
<msg timestamp="20140401 14:11:23.446" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140401 14:11:23.445" starttime="20140401 14:11:23.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:23.446" starttime="20140401 14:11:23.446"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:23.446" starttime="20140401 14:11:23.443"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result</arg>
<arg>4</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:23.448" level="INFO">${value} = "4"</msg>
<status status="PASS" endtime="20140401 14:11:23.448" starttime="20140401 14:11:23.448"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:23.449" level="INFO">${match} = "4"</msg>
<msg timestamp="20140401 14:11:23.449" level="INFO">${result} = 4</msg>
<status status="PASS" endtime="20140401 14:11:23.448" starttime="20140401 14:11:23.448"></status>
</kw>
<msg timestamp="20140401 14:11:23.449" level="INFO">${value} = 4</msg>
<status status="PASS" endtime="20140401 14:11:23.449" starttime="20140401 14:11:23.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:23.449" starttime="20140401 14:11:23.449"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:23.449" starttime="20140401 14:11:23.446"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140401 14:11:23.450" critical="yes" starttime="20140401 14:11:22.932"></status>
</test>
<test id="s1-t4" name="Program RunState">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetRunState", "program": "LeabraBatch"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:23.452" level="WARN">[Sending] {"command": "GetRunState", "program": "LeabraBatch"}</msg>
<status status="PASS" endtime="20140401 14:11:23.453" starttime="20140401 14:11:23.452"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:23.453" starttime="20140401 14:11:23.452"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:23.453" starttime="20140401 14:11:23.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:23.955" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:23.955" starttime="20140401 14:11:23.453"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:23.956" level="INFO">{
	"status" : "OK",
	"result" : "4"
}</msg>
<msg timestamp="20140401 14:11:23.957" level="INFO">${result} = {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140401 14:11:23.957" starttime="20140401 14:11:23.956"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:23.959" level="WARN">[Received] {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140401 14:11:23.959" starttime="20140401 14:11:23.958"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:23.959" starttime="20140401 14:11:23.957"></status>
</kw>
<msg timestamp="20140401 14:11:23.960" level="INFO">${result} = {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140401 14:11:23.959" starttime="20140401 14:11:23.451"></status>
</kw>
<msg timestamp="20140401 14:11:23.960" level="INFO">${result} = {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140401 14:11:23.960" starttime="20140401 14:11:23.451"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:23.960" starttime="20140401 14:11:23.960"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:23.962" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140401 14:11:23.962" starttime="20140401 14:11:23.962"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:23.963" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140401 14:11:23.963" level="INFO">${result} = OK</msg>
<status status="PASS" endtime="20140401 14:11:23.962" starttime="20140401 14:11:23.962"></status>
</kw>
<msg timestamp="20140401 14:11:23.963" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140401 14:11:23.963" starttime="20140401 14:11:23.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:23.963" starttime="20140401 14:11:23.963"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:23.963" starttime="20140401 14:11:23.960"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result</arg>
<arg>4</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:23.965" level="INFO">${value} = "4"</msg>
<status status="PASS" endtime="20140401 14:11:23.965" starttime="20140401 14:11:23.965"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:23.966" level="INFO">${match} = "4"</msg>
<msg timestamp="20140401 14:11:23.966" level="INFO">${result} = 4</msg>
<status status="PASS" endtime="20140401 14:11:23.966" starttime="20140401 14:11:23.965"></status>
</kw>
<msg timestamp="20140401 14:11:23.966" level="INFO">${value} = 4</msg>
<status status="PASS" endtime="20140401 14:11:23.966" starttime="20140401 14:11:23.964"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:23.966" starttime="20140401 14:11:23.966"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:23.967" starttime="20140401 14:11:23.964"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140401 14:11:23.967" critical="yes" starttime="20140401 14:11:23.450"></status>
</test>
<test id="s1-t5" name="Run Program">
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>{"command": "RunProgram", "program": "LeabraBatch"}</arg>
<arg>20 sec</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:23.969" level="WARN">[Sending] {"command": "RunProgram", "program": "LeabraBatch"}</msg>
<status status="PASS" endtime="20140401 14:11:23.969" starttime="20140401 14:11:23.969"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:23.969" starttime="20140401 14:11:23.968"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:23.970" starttime="20140401 14:11:23.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:43.972" level="INFO">Slept 20 seconds</msg>
<status status="PASS" endtime="20140401 14:11:43.972" starttime="20140401 14:11:23.970"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:43.973" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140401 14:11:43.974" level="INFO">${result} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140401 14:11:43.974" starttime="20140401 14:11:43.973"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:43.975" level="WARN">[Received] {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140401 14:11:43.976" starttime="20140401 14:11:43.975"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:43.976" starttime="20140401 14:11:43.974"></status>
</kw>
<msg timestamp="20140401 14:11:43.977" level="INFO">${result} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140401 14:11:43.976" starttime="20140401 14:11:23.968"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:43.977" starttime="20140401 14:11:43.977"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:43.979" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140401 14:11:43.979" starttime="20140401 14:11:43.978"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:43.979" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140401 14:11:43.979" level="INFO">${result} = OK</msg>
<status status="PASS" endtime="20140401 14:11:43.979" starttime="20140401 14:11:43.979"></status>
</kw>
<msg timestamp="20140401 14:11:43.980" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140401 14:11:43.980" starttime="20140401 14:11:43.978"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:43.980" starttime="20140401 14:11:43.980"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:43.980" starttime="20140401 14:11:43.977"></status>
</kw>
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetRunState", "program": "LeabraBatch"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:43.982" level="WARN">[Sending] {"command": "GetRunState", "program": "LeabraBatch"}</msg>
<status status="PASS" endtime="20140401 14:11:43.982" starttime="20140401 14:11:43.982"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:43.982" starttime="20140401 14:11:43.981"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:43.983" starttime="20140401 14:11:43.982"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:44.485" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:44.485" starttime="20140401 14:11:43.983"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:44.486" level="INFO">{
	"status" : "OK",
	"result" : "0"
}</msg>
<msg timestamp="20140401 14:11:44.486" level="INFO">${result} = {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140401 14:11:44.486" starttime="20140401 14:11:44.485"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:44.488" level="WARN">[Received] {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140401 14:11:44.488" starttime="20140401 14:11:44.488"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:44.489" starttime="20140401 14:11:44.487"></status>
</kw>
<msg timestamp="20140401 14:11:44.489" level="INFO">${result} = {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140401 14:11:44.489" starttime="20140401 14:11:43.981"></status>
</kw>
<msg timestamp="20140401 14:11:44.489" level="INFO">${result} = {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140401 14:11:44.489" starttime="20140401 14:11:43.980"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:44.491" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140401 14:11:44.491" starttime="20140401 14:11:44.491"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:44.491" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140401 14:11:44.491" level="INFO">${result} = OK</msg>
<status status="PASS" endtime="20140401 14:11:44.491" starttime="20140401 14:11:44.491"></status>
</kw>
<msg timestamp="20140401 14:11:44.492" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140401 14:11:44.492" starttime="20140401 14:11:44.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:44.492" starttime="20140401 14:11:44.492"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:44.492" starttime="20140401 14:11:44.489"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result</arg>
<arg>0</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:44.494" level="INFO">${value} = "0"</msg>
<status status="PASS" endtime="20140401 14:11:44.494" starttime="20140401 14:11:44.494"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:44.494" level="INFO">${match} = "0"</msg>
<msg timestamp="20140401 14:11:44.494" level="INFO">${result} = 0</msg>
<status status="PASS" endtime="20140401 14:11:44.494" starttime="20140401 14:11:44.494"></status>
</kw>
<msg timestamp="20140401 14:11:44.495" level="INFO">${value} = 0</msg>
<status status="PASS" endtime="20140401 14:11:44.495" starttime="20140401 14:11:44.493"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:44.495" starttime="20140401 14:11:44.495"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:44.495" starttime="20140401 14:11:44.492"></status>
</kw>
<doc></doc>
<tags>
<tag>slow</tag>
</tags>
<status status="PASS" endtime="20140401 14:11:44.495" critical="yes" starttime="20140401 14:11:23.967"></status>
</test>
<test id="s1-t6" name="Read Full Data Table">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:44.498" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData"}</msg>
<status status="PASS" endtime="20140401 14:11:44.498" starttime="20140401 14:11:44.498"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:44.498" starttime="20140401 14:11:44.497"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:44.499" starttime="20140401 14:11:44.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.000" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:45.000" starttime="20140401 14:11:44.499"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:45.006" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 1],
					[1, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				]
			]
		}
	]
}
}</msg>
<msg timestamp="20140401 14:11:45.007" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"n...</msg>
<status status="PASS" endtime="20140401 14:11:45.006" starttime="20140401 14:11:45.001"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:45.007" level="WARN">[Received] {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 1],
					[1, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				]
			]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140401 14:11:45.008" starttime="20140401 14:11:45.007"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.008" starttime="20140401 14:11:45.007"></status>
</kw>
<msg timestamp="20140401 14:11:45.008" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"n...</msg>
<status status="PASS" endtime="20140401 14:11:45.008" starttime="20140401 14:11:44.497"></status>
</kw>
<msg timestamp="20140401 14:11:45.009" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"n...</msg>
<status status="PASS" endtime="20140401 14:11:45.009" starttime="20140401 14:11:44.496"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.010" starttime="20140401 14:11:45.009"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/name</arg>
<arg>Name</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.012" level="INFO">${value} = "Name"</msg>
<status status="PASS" endtime="20140401 14:11:45.012" starttime="20140401 14:11:45.011"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.012" level="INFO">${match} = "Name"</msg>
<msg timestamp="20140401 14:11:45.013" level="INFO">${result} = Name</msg>
<status status="PASS" endtime="20140401 14:11:45.012" starttime="20140401 14:11:45.012"></status>
</kw>
<msg timestamp="20140401 14:11:45.013" level="INFO">${value} = Name</msg>
<status status="PASS" endtime="20140401 14:11:45.013" starttime="20140401 14:11:45.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.013" starttime="20140401 14:11:45.013"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.013" starttime="20140401 14:11:45.010"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/name</arg>
<arg>Input</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.015" level="INFO">${value} = "Input"</msg>
<status status="PASS" endtime="20140401 14:11:45.015" starttime="20140401 14:11:45.015"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.016" level="INFO">${match} = "Input"</msg>
<msg timestamp="20140401 14:11:45.016" level="INFO">${result} = Input</msg>
<status status="PASS" endtime="20140401 14:11:45.016" starttime="20140401 14:11:45.016"></status>
</kw>
<msg timestamp="20140401 14:11:45.016" level="INFO">${value} = Input</msg>
<status status="PASS" endtime="20140401 14:11:45.016" starttime="20140401 14:11:45.014"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.017" starttime="20140401 14:11:45.016"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.017" starttime="20140401 14:11:45.014"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/2/name</arg>
<arg>Output</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.019" level="INFO">${value} = "Output"</msg>
<status status="PASS" endtime="20140401 14:11:45.019" starttime="20140401 14:11:45.018"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.019" level="INFO">${match} = "Output"</msg>
<msg timestamp="20140401 14:11:45.020" level="INFO">${result} = Output</msg>
<status status="PASS" endtime="20140401 14:11:45.019" starttime="20140401 14:11:45.019"></status>
</kw>
<msg timestamp="20140401 14:11:45.020" level="INFO">${value} = Output</msg>
<status status="PASS" endtime="20140401 14:11:45.020" starttime="20140401 14:11:45.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.020" starttime="20140401 14:11:45.020"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.020" starttime="20140401 14:11:45.017"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/type</arg>
<arg>String</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.022" level="INFO">${value} = "String"</msg>
<status status="PASS" endtime="20140401 14:11:45.022" starttime="20140401 14:11:45.022"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.023" level="INFO">${match} = "String"</msg>
<msg timestamp="20140401 14:11:45.023" level="INFO">${result} = String</msg>
<status status="PASS" endtime="20140401 14:11:45.023" starttime="20140401 14:11:45.023"></status>
</kw>
<msg timestamp="20140401 14:11:45.023" level="INFO">${value} = String</msg>
<status status="PASS" endtime="20140401 14:11:45.023" starttime="20140401 14:11:45.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.024" starttime="20140401 14:11:45.023"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.024" starttime="20140401 14:11:45.021"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.026" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140401 14:11:45.026" starttime="20140401 14:11:45.025"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.026" level="INFO">${match} = "float"</msg>
<msg timestamp="20140401 14:11:45.026" level="INFO">${result} = float</msg>
<status status="PASS" endtime="20140401 14:11:45.026" starttime="20140401 14:11:45.026"></status>
</kw>
<msg timestamp="20140401 14:11:45.026" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140401 14:11:45.026" starttime="20140401 14:11:45.024"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.027" starttime="20140401 14:11:45.027"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.027" starttime="20140401 14:11:45.024"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/2/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.029" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140401 14:11:45.029" starttime="20140401 14:11:45.028"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.029" level="INFO">${match} = "float"</msg>
<msg timestamp="20140401 14:11:45.030" level="INFO">${result} = float</msg>
<status status="PASS" endtime="20140401 14:11:45.029" starttime="20140401 14:11:45.029"></status>
</kw>
<msg timestamp="20140401 14:11:45.030" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140401 14:11:45.030" starttime="20140401 14:11:45.028"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.030" starttime="20140401 14:11:45.030"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.030" starttime="20140401 14:11:45.027"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/matrix</arg>
<arg>false</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.031" starttime="20140401 14:11:45.031"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.032" starttime="20140401 14:11:45.031"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/2/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.033" starttime="20140401 14:11:45.032"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/0</arg>
<arg>checks</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.035" level="INFO">${value} = "checks"</msg>
<status status="PASS" endtime="20140401 14:11:45.035" starttime="20140401 14:11:45.034"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.035" level="INFO">${match} = "checks"</msg>
<msg timestamp="20140401 14:11:45.035" level="INFO">${result} = checks</msg>
<status status="PASS" endtime="20140401 14:11:45.035" starttime="20140401 14:11:45.035"></status>
</kw>
<msg timestamp="20140401 14:11:45.036" level="INFO">${value} = checks</msg>
<status status="PASS" endtime="20140401 14:11:45.035" starttime="20140401 14:11:45.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.036" starttime="20140401 14:11:45.036"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.036" starttime="20140401 14:11:45.033"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/1</arg>
<arg>mitvert</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.038" level="INFO">${value} = "mitvert"</msg>
<status status="PASS" endtime="20140401 14:11:45.038" starttime="20140401 14:11:45.037"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.039" level="INFO">${match} = "mitvert"</msg>
<msg timestamp="20140401 14:11:45.039" level="INFO">${result} = mitvert</msg>
<status status="PASS" endtime="20140401 14:11:45.039" starttime="20140401 14:11:45.038"></status>
</kw>
<msg timestamp="20140401 14:11:45.039" level="INFO">${value} = mitvert</msg>
<status status="PASS" endtime="20140401 14:11:45.039" starttime="20140401 14:11:45.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.039" starttime="20140401 14:11:45.039"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.040" starttime="20140401 14:11:45.036"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/2</arg>
<arg>midhoriz</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.041" level="INFO">${value} = "midhoriz"</msg>
<status status="PASS" endtime="20140401 14:11:45.041" starttime="20140401 14:11:45.041"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.042" level="INFO">${match} = "midhoriz"</msg>
<msg timestamp="20140401 14:11:45.042" level="INFO">${result} = midhoriz</msg>
<status status="PASS" endtime="20140401 14:11:45.042" starttime="20140401 14:11:45.042"></status>
</kw>
<msg timestamp="20140401 14:11:45.042" level="INFO">${value} = midhoriz</msg>
<status status="PASS" endtime="20140401 14:11:45.042" starttime="20140401 14:11:45.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.043" starttime="20140401 14:11:45.042"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.043" starttime="20140401 14:11:45.040"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/3</arg>
<arg>rdiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.045" level="INFO">${value} = "rdiag"</msg>
<status status="PASS" endtime="20140401 14:11:45.045" starttime="20140401 14:11:45.045"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.046" level="INFO">${match} = "rdiag"</msg>
<msg timestamp="20140401 14:11:45.046" level="INFO">${result} = rdiag</msg>
<status status="PASS" endtime="20140401 14:11:45.046" starttime="20140401 14:11:45.045"></status>
</kw>
<msg timestamp="20140401 14:11:45.046" level="INFO">${value} = rdiag</msg>
<status status="PASS" endtime="20140401 14:11:45.046" starttime="20140401 14:11:45.044"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.047" starttime="20140401 14:11:45.046"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.047" starttime="20140401 14:11:45.043"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/4</arg>
<arg>ldiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.049" level="INFO">${value} = "ldiag"</msg>
<status status="PASS" endtime="20140401 14:11:45.049" starttime="20140401 14:11:45.048"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.049" level="INFO">${match} = "ldiag"</msg>
<msg timestamp="20140401 14:11:45.049" level="INFO">${result} = ldiag</msg>
<status status="PASS" endtime="20140401 14:11:45.049" starttime="20140401 14:11:45.049"></status>
</kw>
<msg timestamp="20140401 14:11:45.050" level="INFO">${value} = ldiag</msg>
<status status="PASS" endtime="20140401 14:11:45.050" starttime="20140401 14:11:45.048"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.050" starttime="20140401 14:11:45.050"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.050" starttime="20140401 14:11:45.047"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/5</arg>
<arg>random</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.052" level="INFO">${value} = "random"</msg>
<status status="PASS" endtime="20140401 14:11:45.052" starttime="20140401 14:11:45.052"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.053" level="INFO">${match} = "random"</msg>
<msg timestamp="20140401 14:11:45.053" level="INFO">${result} = random</msg>
<status status="PASS" endtime="20140401 14:11:45.053" starttime="20140401 14:11:45.052"></status>
</kw>
<msg timestamp="20140401 14:11:45.053" level="INFO">${value} = random</msg>
<status status="PASS" endtime="20140401 14:11:45.053" starttime="20140401 14:11:45.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.054" starttime="20140401 14:11:45.053"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.054" starttime="20140401 14:11:45.050"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/values/0/0/0</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.055" starttime="20140401 14:11:45.054"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/values/0/1/2</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.055" starttime="20140401 14:11:45.055"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/values/0/2/2</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.056" starttime="20140401 14:11:45.056"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/values/2/2/2</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.057" starttime="20140401 14:11:45.057"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/values/2/1/0</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.058" starttime="20140401 14:11:45.058"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140401 14:11:45.058" critical="yes" starttime="20140401 14:11:44.496"></status>
</test>
<test id="s1-t7" name="Read Data Table Column">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "column": "Name"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:45.062" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "column": "Name"}</msg>
<status status="PASS" endtime="20140401 14:11:45.062" starttime="20140401 14:11:45.062"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.063" starttime="20140401 14:11:45.061"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.064" starttime="20140401 14:11:45.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.565" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:45.565" starttime="20140401 14:11:45.064"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:45.567" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
}</msg>
<msg timestamp="20140401 14:11:45.567" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140401 14:11:45.567" starttime="20140401 14:11:45.566"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:45.569" level="WARN">[Received] {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140401 14:11:45.570" starttime="20140401 14:11:45.569"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.570" starttime="20140401 14:11:45.568"></status>
</kw>
<msg timestamp="20140401 14:11:45.570" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140401 14:11:45.570" starttime="20140401 14:11:45.060"></status>
</kw>
<msg timestamp="20140401 14:11:45.570" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140401 14:11:45.570" starttime="20140401 14:11:45.059"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.571" starttime="20140401 14:11:45.571"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/name</arg>
<arg>Name</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.573" level="INFO">${value} = "Name"</msg>
<status status="PASS" endtime="20140401 14:11:45.573" starttime="20140401 14:11:45.572"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.573" level="INFO">${match} = "Name"</msg>
<msg timestamp="20140401 14:11:45.573" level="INFO">${result} = Name</msg>
<status status="PASS" endtime="20140401 14:11:45.573" starttime="20140401 14:11:45.573"></status>
</kw>
<msg timestamp="20140401 14:11:45.573" level="INFO">${value} = Name</msg>
<status status="PASS" endtime="20140401 14:11:45.573" starttime="20140401 14:11:45.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.574" starttime="20140401 14:11:45.574"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.574" starttime="20140401 14:11:45.571"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/0</arg>
<arg>checks</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.576" level="INFO">${value} = "checks"</msg>
<status status="PASS" endtime="20140401 14:11:45.576" starttime="20140401 14:11:45.575"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.576" level="INFO">${match} = "checks"</msg>
<msg timestamp="20140401 14:11:45.576" level="INFO">${result} = checks</msg>
<status status="PASS" endtime="20140401 14:11:45.576" starttime="20140401 14:11:45.576"></status>
</kw>
<msg timestamp="20140401 14:11:45.576" level="INFO">${value} = checks</msg>
<status status="PASS" endtime="20140401 14:11:45.576" starttime="20140401 14:11:45.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.577" starttime="20140401 14:11:45.577"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.577" starttime="20140401 14:11:45.574"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/1</arg>
<arg>mitvert</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.579" level="INFO">${value} = "mitvert"</msg>
<status status="PASS" endtime="20140401 14:11:45.579" starttime="20140401 14:11:45.578"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.579" level="INFO">${match} = "mitvert"</msg>
<msg timestamp="20140401 14:11:45.579" level="INFO">${result} = mitvert</msg>
<status status="PASS" endtime="20140401 14:11:45.579" starttime="20140401 14:11:45.579"></status>
</kw>
<msg timestamp="20140401 14:11:45.579" level="INFO">${value} = mitvert</msg>
<status status="PASS" endtime="20140401 14:11:45.579" starttime="20140401 14:11:45.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.580" starttime="20140401 14:11:45.580"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.580" starttime="20140401 14:11:45.577"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/2</arg>
<arg>midhoriz</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.582" level="INFO">${value} = "midhoriz"</msg>
<status status="PASS" endtime="20140401 14:11:45.582" starttime="20140401 14:11:45.581"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.582" level="INFO">${match} = "midhoriz"</msg>
<msg timestamp="20140401 14:11:45.582" level="INFO">${result} = midhoriz</msg>
<status status="PASS" endtime="20140401 14:11:45.582" starttime="20140401 14:11:45.582"></status>
</kw>
<msg timestamp="20140401 14:11:45.582" level="INFO">${value} = midhoriz</msg>
<status status="PASS" endtime="20140401 14:11:45.582" starttime="20140401 14:11:45.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.583" starttime="20140401 14:11:45.583"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.583" starttime="20140401 14:11:45.580"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/3</arg>
<arg>rdiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.585" level="INFO">${value} = "rdiag"</msg>
<status status="PASS" endtime="20140401 14:11:45.585" starttime="20140401 14:11:45.584"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.585" level="INFO">${match} = "rdiag"</msg>
<msg timestamp="20140401 14:11:45.585" level="INFO">${result} = rdiag</msg>
<status status="PASS" endtime="20140401 14:11:45.585" starttime="20140401 14:11:45.585"></status>
</kw>
<msg timestamp="20140401 14:11:45.585" level="INFO">${value} = rdiag</msg>
<status status="PASS" endtime="20140401 14:11:45.585" starttime="20140401 14:11:45.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.586" starttime="20140401 14:11:45.586"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.586" starttime="20140401 14:11:45.583"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/4</arg>
<arg>ldiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.588" level="INFO">${value} = "ldiag"</msg>
<status status="PASS" endtime="20140401 14:11:45.588" starttime="20140401 14:11:45.587"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.588" level="INFO">${match} = "ldiag"</msg>
<msg timestamp="20140401 14:11:45.588" level="INFO">${result} = ldiag</msg>
<status status="PASS" endtime="20140401 14:11:45.588" starttime="20140401 14:11:45.588"></status>
</kw>
<msg timestamp="20140401 14:11:45.589" level="INFO">${value} = ldiag</msg>
<status status="PASS" endtime="20140401 14:11:45.588" starttime="20140401 14:11:45.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.589" starttime="20140401 14:11:45.589"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.589" starttime="20140401 14:11:45.586"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/5</arg>
<arg>random</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.591" level="INFO">${value} = "random"</msg>
<status status="PASS" endtime="20140401 14:11:45.591" starttime="20140401 14:11:45.591"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:45.591" level="INFO">${match} = "random"</msg>
<msg timestamp="20140401 14:11:45.591" level="INFO">${result} = random</msg>
<status status="PASS" endtime="20140401 14:11:45.591" starttime="20140401 14:11:45.591"></status>
</kw>
<msg timestamp="20140401 14:11:45.592" level="INFO">${value} = random</msg>
<status status="PASS" endtime="20140401 14:11:45.592" starttime="20140401 14:11:45.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.592" starttime="20140401 14:11:45.592"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.592" starttime="20140401 14:11:45.589"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.594" level="FAIL">JsonPointerException: index '1' is out of bounds</msg>
<status status="FAIL" endtime="20140401 14:11:45.594" starttime="20140401 14:11:45.593"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.595" starttime="20140401 14:11:45.593"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.595" starttime="20140401 14:11:45.592"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/2</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:45.596" level="FAIL">JsonPointerException: index '2' is out of bounds</msg>
<status status="FAIL" endtime="20140401 14:11:45.596" starttime="20140401 14:11:45.596"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.597" starttime="20140401 14:11:45.596"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.597" starttime="20140401 14:11:45.595"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140401 14:11:45.597" critical="yes" starttime="20140401 14:11:45.059"></status>
</test>
<test id="s1-t8" name="Read Data Table Row">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 2}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:45.600" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 2}</msg>
<status status="PASS" endtime="20140401 14:11:45.600" starttime="20140401 14:11:45.599"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:45.600" starttime="20140401 14:11:45.599"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:45.600" starttime="20140401 14:11:45.600"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.102" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:46.103" starttime="20140401 14:11:45.601"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:46.107" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		}
	]
}
}</msg>
<msg timestamp="20140401 14:11:46.108" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"ma...</msg>
<status status="PASS" endtime="20140401 14:11:46.107" starttime="20140401 14:11:46.103"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:46.108" level="WARN">[Received] {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140401 14:11:46.109" starttime="20140401 14:11:46.108"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.109" starttime="20140401 14:11:46.108"></status>
</kw>
<msg timestamp="20140401 14:11:46.109" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"ma...</msg>
<status status="PASS" endtime="20140401 14:11:46.109" starttime="20140401 14:11:45.598"></status>
</kw>
<msg timestamp="20140401 14:11:46.110" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"ma...</msg>
<status status="PASS" endtime="20140401 14:11:46.110" starttime="20140401 14:11:45.598"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.110" starttime="20140401 14:11:46.110"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/name</arg>
<arg>Name</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.112" level="INFO">${value} = "Name"</msg>
<status status="PASS" endtime="20140401 14:11:46.112" starttime="20140401 14:11:46.112"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:46.113" level="INFO">${match} = "Name"</msg>
<msg timestamp="20140401 14:11:46.113" level="INFO">${result} = Name</msg>
<status status="PASS" endtime="20140401 14:11:46.113" starttime="20140401 14:11:46.112"></status>
</kw>
<msg timestamp="20140401 14:11:46.113" level="INFO">${value} = Name</msg>
<status status="PASS" endtime="20140401 14:11:46.113" starttime="20140401 14:11:46.111"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.114" starttime="20140401 14:11:46.113"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.114" starttime="20140401 14:11:46.111"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/name</arg>
<arg>Input</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.116" level="INFO">${value} = "Input"</msg>
<status status="PASS" endtime="20140401 14:11:46.115" starttime="20140401 14:11:46.115"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:46.116" level="INFO">${match} = "Input"</msg>
<msg timestamp="20140401 14:11:46.116" level="INFO">${result} = Input</msg>
<status status="PASS" endtime="20140401 14:11:46.116" starttime="20140401 14:11:46.116"></status>
</kw>
<msg timestamp="20140401 14:11:46.116" level="INFO">${value} = Input</msg>
<status status="PASS" endtime="20140401 14:11:46.116" starttime="20140401 14:11:46.114"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.117" starttime="20140401 14:11:46.116"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.117" starttime="20140401 14:11:46.114"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/2/name</arg>
<arg>Output</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.119" level="INFO">${value} = "Output"</msg>
<status status="PASS" endtime="20140401 14:11:46.119" starttime="20140401 14:11:46.118"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:46.119" level="INFO">${match} = "Output"</msg>
<msg timestamp="20140401 14:11:46.119" level="INFO">${result} = Output</msg>
<status status="PASS" endtime="20140401 14:11:46.119" starttime="20140401 14:11:46.119"></status>
</kw>
<msg timestamp="20140401 14:11:46.119" level="INFO">${value} = Output</msg>
<status status="PASS" endtime="20140401 14:11:46.119" starttime="20140401 14:11:46.118"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.120" starttime="20140401 14:11:46.120"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.120" starttime="20140401 14:11:46.117"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/type</arg>
<arg>String</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.122" level="INFO">${value} = "String"</msg>
<status status="PASS" endtime="20140401 14:11:46.122" starttime="20140401 14:11:46.121"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:46.122" level="INFO">${match} = "String"</msg>
<msg timestamp="20140401 14:11:46.122" level="INFO">${result} = String</msg>
<status status="PASS" endtime="20140401 14:11:46.122" starttime="20140401 14:11:46.122"></status>
</kw>
<msg timestamp="20140401 14:11:46.123" level="INFO">${value} = String</msg>
<status status="PASS" endtime="20140401 14:11:46.123" starttime="20140401 14:11:46.121"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.123" starttime="20140401 14:11:46.123"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.123" starttime="20140401 14:11:46.120"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.125" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140401 14:11:46.125" starttime="20140401 14:11:46.125"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:46.125" level="INFO">${match} = "float"</msg>
<msg timestamp="20140401 14:11:46.126" level="INFO">${result} = float</msg>
<status status="PASS" endtime="20140401 14:11:46.125" starttime="20140401 14:11:46.125"></status>
</kw>
<msg timestamp="20140401 14:11:46.126" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140401 14:11:46.126" starttime="20140401 14:11:46.124"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.126" starttime="20140401 14:11:46.126"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.126" starttime="20140401 14:11:46.123"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/2/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.128" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140401 14:11:46.128" starttime="20140401 14:11:46.128"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:46.129" level="INFO">${match} = "float"</msg>
<msg timestamp="20140401 14:11:46.129" level="INFO">${result} = float</msg>
<status status="PASS" endtime="20140401 14:11:46.129" starttime="20140401 14:11:46.128"></status>
</kw>
<msg timestamp="20140401 14:11:46.129" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140401 14:11:46.129" starttime="20140401 14:11:46.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.129" starttime="20140401 14:11:46.129"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.129" starttime="20140401 14:11:46.126"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/matrix</arg>
<arg>false</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.130" starttime="20140401 14:11:46.130"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.131" starttime="20140401 14:11:46.130"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/2/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.131" starttime="20140401 14:11:46.131"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/0</arg>
<arg>rdiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.133" level="INFO">${value} = "rdiag"</msg>
<status status="PASS" endtime="20140401 14:11:46.133" starttime="20140401 14:11:46.133"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:46.134" level="INFO">${match} = "rdiag"</msg>
<msg timestamp="20140401 14:11:46.134" level="INFO">${result} = rdiag</msg>
<status status="PASS" endtime="20140401 14:11:46.134" starttime="20140401 14:11:46.133"></status>
</kw>
<msg timestamp="20140401 14:11:46.134" level="INFO">${value} = rdiag</msg>
<status status="PASS" endtime="20140401 14:11:46.134" starttime="20140401 14:11:46.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.134" starttime="20140401 14:11:46.134"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.135" starttime="20140401 14:11:46.132"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/1</arg>
<arg>ldiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.136" level="INFO">${value} = "ldiag"</msg>
<status status="PASS" endtime="20140401 14:11:46.136" starttime="20140401 14:11:46.136"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:46.137" level="INFO">${match} = "ldiag"</msg>
<msg timestamp="20140401 14:11:46.137" level="INFO">${result} = ldiag</msg>
<status status="PASS" endtime="20140401 14:11:46.137" starttime="20140401 14:11:46.136"></status>
</kw>
<msg timestamp="20140401 14:11:46.137" level="INFO">${value} = ldiag</msg>
<status status="PASS" endtime="20140401 14:11:46.137" starttime="20140401 14:11:46.135"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.137" starttime="20140401 14:11:46.137"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.138" starttime="20140401 14:11:46.135"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/values/0/2/2</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.138" starttime="20140401 14:11:46.138"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/values/0/1/0</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.139" starttime="20140401 14:11:46.138"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/2</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.140" level="FAIL">JsonPointerException: index '2' is out of bounds</msg>
<status status="FAIL" endtime="20140401 14:11:46.141" starttime="20140401 14:11:46.140"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.141" starttime="20140401 14:11:46.140"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.141" starttime="20140401 14:11:46.139"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/values/2</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.142" level="FAIL">JsonPointerException: index '2' is out of bounds</msg>
<status status="FAIL" endtime="20140401 14:11:46.142" starttime="20140401 14:11:46.142"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.142" starttime="20140401 14:11:46.141"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.143" starttime="20140401 14:11:46.141"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/2/values/2</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.144" level="FAIL">JsonPointerException: index '2' is out of bounds</msg>
<status status="FAIL" endtime="20140401 14:11:46.144" starttime="20140401 14:11:46.144"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.144" starttime="20140401 14:11:46.143"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.144" starttime="20140401 14:11:46.143"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140401 14:11:46.145" critical="yes" starttime="20140401 14:11:45.597"></status>
</test>
<test id="s1-t9" name="Read Data Table Cell">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Name"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:46.147" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Name"}</msg>
<status status="PASS" endtime="20140401 14:11:46.148" starttime="20140401 14:11:46.147"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.148" starttime="20140401 14:11:46.147"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.148" starttime="20140401 14:11:46.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.650" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:46.651" starttime="20140401 14:11:46.149"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:46.652" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag"]
		}
	]
}
}</msg>
<msg timestamp="20140401 14:11:46.653" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140401 14:11:46.653" starttime="20140401 14:11:46.651"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:46.655" level="WARN">[Received] {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140401 14:11:46.655" starttime="20140401 14:11:46.654"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.655" starttime="20140401 14:11:46.653"></status>
</kw>
<msg timestamp="20140401 14:11:46.656" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140401 14:11:46.655" starttime="20140401 14:11:46.146"></status>
</kw>
<msg timestamp="20140401 14:11:46.656" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140401 14:11:46.656" starttime="20140401 14:11:46.146"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.656" starttime="20140401 14:11:46.656"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/name</arg>
<arg>Name</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.658" level="INFO">${value} = "Name"</msg>
<status status="PASS" endtime="20140401 14:11:46.658" starttime="20140401 14:11:46.658"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:46.659" level="INFO">${match} = "Name"</msg>
<msg timestamp="20140401 14:11:46.659" level="INFO">${result} = Name</msg>
<status status="PASS" endtime="20140401 14:11:46.658" starttime="20140401 14:11:46.658"></status>
</kw>
<msg timestamp="20140401 14:11:46.659" level="INFO">${value} = Name</msg>
<status status="PASS" endtime="20140401 14:11:46.659" starttime="20140401 14:11:46.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.659" starttime="20140401 14:11:46.659"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.659" starttime="20140401 14:11:46.656"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/type</arg>
<arg>String</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.661" level="INFO">${value} = "String"</msg>
<status status="PASS" endtime="20140401 14:11:46.661" starttime="20140401 14:11:46.661"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:46.662" level="INFO">${match} = "String"</msg>
<msg timestamp="20140401 14:11:46.662" level="INFO">${result} = String</msg>
<status status="PASS" endtime="20140401 14:11:46.661" starttime="20140401 14:11:46.661"></status>
</kw>
<msg timestamp="20140401 14:11:46.662" level="INFO">${value} = String</msg>
<status status="PASS" endtime="20140401 14:11:46.662" starttime="20140401 14:11:46.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.662" starttime="20140401 14:11:46.662"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.662" starttime="20140401 14:11:46.660"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/matrix</arg>
<arg>false</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.663" starttime="20140401 14:11:46.663"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/0</arg>
<arg>rdiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:46.665" level="INFO">${value} = "rdiag"</msg>
<status status="PASS" endtime="20140401 14:11:46.665" starttime="20140401 14:11:46.664"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:46.665" level="INFO">${match} = "rdiag"</msg>
<msg timestamp="20140401 14:11:46.665" level="INFO">${result} = rdiag</msg>
<status status="PASS" endtime="20140401 14:11:46.665" starttime="20140401 14:11:46.665"></status>
</kw>
<msg timestamp="20140401 14:11:46.665" level="INFO">${value} = rdiag</msg>
<status status="PASS" endtime="20140401 14:11:46.665" starttime="20140401 14:11:46.664"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.666" starttime="20140401 14:11:46.666"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.666" starttime="20140401 14:11:46.663"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140401 14:11:46.666" critical="yes" starttime="20140401 14:11:46.145"></status>
</test>
<test id="s1-t10" name="Read Data Table Matrix Cell">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Input", "cell": 12}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:46.669" level="WARN">[Sending] {"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Input", "cell": 12}</msg>
<status status="PASS" endtime="20140401 14:11:46.669" starttime="20140401 14:11:46.669"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:46.669" starttime="20140401 14:11:46.668"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:46.670" starttime="20140401 14:11:46.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:47.171" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:47.172" starttime="20140401 14:11:46.670"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:47.173" level="INFO">{"status":"OK",
	"value" : 1

}</msg>
<msg timestamp="20140401 14:11:47.173" level="INFO">${result} = {"status":"OK",
	"value" : 1

}</msg>
<status status="PASS" endtime="20140401 14:11:47.173" starttime="20140401 14:11:47.172"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:47.175" level="WARN">[Received] {"status":"OK",
	"value" : 1

}</msg>
<status status="PASS" endtime="20140401 14:11:47.175" starttime="20140401 14:11:47.175"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:47.176" starttime="20140401 14:11:47.174"></status>
</kw>
<msg timestamp="20140401 14:11:47.176" level="INFO">${result} = {"status":"OK",
	"value" : 1

}</msg>
<status status="PASS" endtime="20140401 14:11:47.176" starttime="20140401 14:11:46.668"></status>
</kw>
<msg timestamp="20140401 14:11:47.176" level="INFO">${result} = {"status":"OK",
	"value" : 1

}</msg>
<status status="PASS" endtime="20140401 14:11:47.176" starttime="20140401 14:11:46.667"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:47.177" starttime="20140401 14:11:47.177"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:47.179" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140401 14:11:47.179" starttime="20140401 14:11:47.178"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:47.179" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140401 14:11:47.179" level="INFO">${result} = OK</msg>
<status status="PASS" endtime="20140401 14:11:47.179" starttime="20140401 14:11:47.179"></status>
</kw>
<msg timestamp="20140401 14:11:47.180" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140401 14:11:47.179" starttime="20140401 14:11:47.178"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:47.180" starttime="20140401 14:11:47.180"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:47.180" starttime="20140401 14:11:47.177"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/value</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:47.181" starttime="20140401 14:11:47.180"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140401 14:11:47.181" critical="yes" starttime="20140401 14:11:46.666"></status>
</test>
<test id="s1-t11" name="Read Data Table Cell Column Error">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "NotAColumn"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:47.183" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "NotAColumn"}</msg>
<status status="PASS" endtime="20140401 14:11:47.184" starttime="20140401 14:11:47.183"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:47.184" starttime="20140401 14:11:47.183"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:47.184" starttime="20140401 14:11:47.184"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:47.686" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:47.686" starttime="20140401 14:11:47.184"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:47.687" level="INFO">{
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 8
}</msg>
<msg timestamp="20140401 14:11:47.688" level="INFO">${result} = {
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 8
}
</msg>
<status status="PASS" endtime="20140401 14:11:47.688" starttime="20140401 14:11:47.687"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:47.689" level="WARN">[Received] {
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 8
}
</msg>
<status status="PASS" endtime="20140401 14:11:47.689" starttime="20140401 14:11:47.689"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:47.689" starttime="20140401 14:11:47.688"></status>
</kw>
<msg timestamp="20140401 14:11:47.690" level="INFO">${result} = {
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 8
}
</msg>
<status status="PASS" endtime="20140401 14:11:47.690" starttime="20140401 14:11:47.182"></status>
</kw>
<msg timestamp="20140401 14:11:47.690" level="INFO">${result} = {
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 8
}
</msg>
<status status="PASS" endtime="20140401 14:11:47.690" starttime="20140401 14:11:47.182"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:47.691" starttime="20140401 14:11:47.690"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:47.692" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140401 14:11:47.692" starttime="20140401 14:11:47.692"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:47.693" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140401 14:11:47.693" level="INFO">${result} = ERROR</msg>
<status status="PASS" endtime="20140401 14:11:47.693" starttime="20140401 14:11:47.692"></status>
</kw>
<msg timestamp="20140401 14:11:47.693" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140401 14:11:47.693" starttime="20140401 14:11:47.691"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:47.694" starttime="20140401 14:11:47.693"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:47.694" starttime="20140401 14:11:47.691"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/error</arg>
<arg>8</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:47.694" starttime="20140401 14:11:47.694"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/message</arg>
<arg>GetData: column not found</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:47.696" level="INFO">${value} = "GetData: column not found"</msg>
<status status="PASS" endtime="20140401 14:11:47.696" starttime="20140401 14:11:47.696"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:47.696" level="INFO">${match} = "GetData: column not found"</msg>
<msg timestamp="20140401 14:11:47.696" level="INFO">${result} = GetData: column not found</msg>
<status status="PASS" endtime="20140401 14:11:47.696" starttime="20140401 14:11:47.696"></status>
</kw>
<msg timestamp="20140401 14:11:47.697" level="INFO">${value} = GetData: column not found</msg>
<status status="PASS" endtime="20140401 14:11:47.697" starttime="20140401 14:11:47.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:47.697" starttime="20140401 14:11:47.697"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:47.697" starttime="20140401 14:11:47.694"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140401 14:11:47.698" critical="yes" starttime="20140401 14:11:47.181"></status>
</test>
<test id="s1-t12" name="Remove Data">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "RemoveData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:47.700" level="WARN">[Sending] {"command": "RemoveData", "table": "TrialOutputData"}</msg>
<status status="PASS" endtime="20140401 14:11:47.700" starttime="20140401 14:11:47.700"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:47.700" starttime="20140401 14:11:47.699"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:47.701" starttime="20140401 14:11:47.701"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:48.202" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:48.203" starttime="20140401 14:11:47.701"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:48.204" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140401 14:11:48.204" level="INFO">${result} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140401 14:11:48.204" starttime="20140401 14:11:48.203"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:48.206" level="WARN">[Received] {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140401 14:11:48.206" starttime="20140401 14:11:48.206"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:48.207" starttime="20140401 14:11:48.205"></status>
</kw>
<msg timestamp="20140401 14:11:48.207" level="INFO">${result} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140401 14:11:48.207" starttime="20140401 14:11:47.699"></status>
</kw>
<msg timestamp="20140401 14:11:48.208" level="INFO">${result} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140401 14:11:48.207" starttime="20140401 14:11:47.698"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:48.208" starttime="20140401 14:11:48.208"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:48.210" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140401 14:11:48.210" starttime="20140401 14:11:48.209"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:48.211" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140401 14:11:48.211" level="INFO">${result} = OK</msg>
<status status="PASS" endtime="20140401 14:11:48.211" starttime="20140401 14:11:48.210"></status>
</kw>
<msg timestamp="20140401 14:11:48.211" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140401 14:11:48.211" starttime="20140401 14:11:48.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:48.211" starttime="20140401 14:11:48.211"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:48.211" starttime="20140401 14:11:48.208"></status>
</kw>
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:48.213" level="WARN">[Sending] {"command": "GetData", "table": "TrialOutputData"}</msg>
<status status="PASS" endtime="20140401 14:11:48.213" starttime="20140401 14:11:48.213"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:48.214" starttime="20140401 14:11:48.213"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:48.214" starttime="20140401 14:11:48.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:48.715" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:48.716" starttime="20140401 14:11:48.214"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:48.720" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"values" : []
		}
	]
}
}</msg>
<msg timestamp="20140401 14:11:48.720" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"v...</msg>
<status status="PASS" endtime="20140401 14:11:48.720" starttime="20140401 14:11:48.716"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:48.721" level="WARN">[Received] {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"values" : []
		}
	]
}
}</msg>
<status status="PASS" endtime="20140401 14:11:48.721" starttime="20140401 14:11:48.721"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:48.722" starttime="20140401 14:11:48.720"></status>
</kw>
<msg timestamp="20140401 14:11:48.722" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"v...</msg>
<status status="PASS" endtime="20140401 14:11:48.722" starttime="20140401 14:11:48.212"></status>
</kw>
<msg timestamp="20140401 14:11:48.722" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"v...</msg>
<status status="PASS" endtime="20140401 14:11:48.722" starttime="20140401 14:11:48.212"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:48.723" starttime="20140401 14:11:48.723"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/0</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:48.725" level="FAIL">JsonPointerException: index '0' is out of bounds</msg>
<status status="FAIL" endtime="20140401 14:11:48.725" starttime="20140401 14:11:48.724"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:48.725" starttime="20140401 14:11:48.724"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:48.725" starttime="20140401 14:11:48.723"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140401 14:11:48.725" critical="yes" starttime="20140401 14:11:47.698"></status>
</test>
<test id="s1-t13" name="Append Data Table">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:48.728" level="WARN">[Sending] {"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</msg>
<status status="PASS" endtime="20140401 14:11:48.728" starttime="20140401 14:11:48.728"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:48.728" starttime="20140401 14:11:48.727"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:48.729" starttime="20140401 14:11:48.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:49.231" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:49.231" starttime="20140401 14:11:48.729"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:49.232" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140401 14:11:49.232" level="INFO">${result} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140401 14:11:49.232" starttime="20140401 14:11:49.231"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:49.234" level="WARN">[Received] {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140401 14:11:49.234" starttime="20140401 14:11:49.234"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:49.235" starttime="20140401 14:11:49.233"></status>
</kw>
<msg timestamp="20140401 14:11:49.235" level="INFO">${result} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140401 14:11:49.235" starttime="20140401 14:11:48.727"></status>
</kw>
<msg timestamp="20140401 14:11:49.236" level="INFO">${result} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140401 14:11:49.236" starttime="20140401 14:11:48.726"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:49.236" starttime="20140401 14:11:49.236"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140401 14:11:49.238" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140401 14:11:49.238" starttime="20140401 14:11:49.238"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140401 14:11:49.238" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140401 14:11:49.238" level="INFO">${result} = OK</msg>
<status status="PASS" endtime="20140401 14:11:49.238" starttime="20140401 14:11:49.238"></status>
</kw>
<msg timestamp="20140401 14:11:49.239" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140401 14:11:49.239" starttime="20140401 14:11:49.237"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:49.239" starttime="20140401 14:11:49.239"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:49.239" starttime="20140401 14:11:49.236"></status>
</kw>
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:49.241" level="WARN">[Sending] {"command": "GetData", "table": "TrialOutputData"}</msg>
<status status="PASS" endtime="20140401 14:11:49.241" starttime="20140401 14:11:49.241"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:49.241" starttime="20140401 14:11:49.240"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:49.242" starttime="20140401 14:11:49.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140401 14:11:49.744" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140401 14:11:49.744" starttime="20140401 14:11:49.242"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140401 14:11:49.748" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : [7]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : [9]
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"values" : [0]
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"values" : [""]
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"values" : [""]
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"values" : [0]
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"values" : [0]
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"values" : [0]
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"values" : [0]
		}
	]
}
}</msg>
<msg timestamp="20140401 14:11:49.749" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : [7]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140401 14:11:49.749" starttime="20140401 14:11:49.745"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140401 14:11:49.750" level="WARN">[Received] {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : [7]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : [9]
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"values" : [0]
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"values" : [""]
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"values" : [""]
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"values" : [0]
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"values" : [0]
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"values" : [0]
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"values" : [0]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140401 14:11:49.750" starttime="20140401 14:11:49.749"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:49.750" starttime="20140401 14:11:49.749"></status>
</kw>
<msg timestamp="20140401 14:11:49.750" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : [7]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140401 14:11:49.750" starttime="20140401 14:11:49.240"></status>
</kw>
<msg timestamp="20140401 14:11:49.751" level="INFO">${result} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : [7]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140401 14:11:49.751" starttime="20140401 14:11:49.239"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:49.751" starttime="20140401 14:11:49.751"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/0/values/0</arg>
<arg>7</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:49.752" starttime="20140401 14:11:49.752"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/result/columns/1/values/0</arg>
<arg>9</arg>
</arguments>
<status status="PASS" endtime="20140401 14:11:49.752" starttime="20140401 14:11:49.752"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140401 14:11:49.753" critical="yes" starttime="20140401 14:11:48.725"></status>
</test>
<kw type="teardown" name="Shutdown Emergent">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Telnet.Close All Connections">
<doc>Closes all open connections and empties the connection cache.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20140401 14:11:49.755" starttime="20140401 14:11:49.755"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2 sec</arg>
</arguments>
<msg timestamp="20140401 14:11:51.756" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20140401 14:11:51.756" starttime="20140401 14:11:49.755"></status>
</kw>
<kw type="kw" name="${result} = Process.Terminate Process">
<doc>Stops the process gracefully or forcefully.</doc>
<arguments>
<arg>${pid}</arg>
<arg>kill=true</arg>
</arguments>
<msg timestamp="20140401 14:11:51.757" level="INFO">Forcefully killing process.</msg>
<msg timestamp="20140401 14:11:51.858" level="INFO">Process completed.</msg>
<msg timestamp="20140401 14:11:51.859" level="INFO">${result} = &lt;result object with rc -9&gt;</msg>
<status status="PASS" endtime="20140401 14:11:51.859" starttime="20140401 14:11:51.757"></status>
</kw>
<status status="PASS" endtime="20140401 14:11:51.859" starttime="20140401 14:11:49.754"></status>
</kw>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20140401 14:11:51.860" starttime="20140401 14:11:17.262"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="13">Critical Tests</stat>
<stat fail="0" pass="13">All Tests</stat>
</total>
<tag>
<stat info="" links="" doc="" combined="" pass="1" fail="0">slow</stat>
</tag>
<suite>
<stat fail="0" pass="13" id="s1" name="Server">Server</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20140401 14:11:22.417" level="WARN">Emergent Server v6.3.6
</msg>
<msg timestamp="20140401 14:11:22.423" level="WARN">[Sending] GetRunState</msg>
<msg timestamp="20140401 14:11:22.929" level="WARN">[Received] OK 4
</msg>
<msg timestamp="20140401 14:11:22.935" level="WARN">[Sending] {"command": "GetRunState"}</msg>
<msg timestamp="20140401 14:11:23.441" level="WARN">[Received] {
	"status" : "OK",
	"result" : "4"
}
</msg>
<msg timestamp="20140401 14:11:23.452" level="WARN">[Sending] {"command": "GetRunState", "program": "LeabraBatch"}</msg>
<msg timestamp="20140401 14:11:23.959" level="WARN">[Received] {
	"status" : "OK",
	"result" : "4"
}
</msg>
<msg timestamp="20140401 14:11:23.969" level="WARN">[Sending] {"command": "RunProgram", "program": "LeabraBatch"}</msg>
<msg timestamp="20140401 14:11:43.975" level="WARN">[Received] {
	"status" : "OK"
}
</msg>
<msg timestamp="20140401 14:11:43.982" level="WARN">[Sending] {"command": "GetRunState", "program": "LeabraBatch"}</msg>
<msg timestamp="20140401 14:11:44.488" level="WARN">[Received] {
	"status" : "OK",
	"result" : "0"
}
</msg>
<msg timestamp="20140401 14:11:44.498" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData"}</msg>
<msg timestamp="20140401 14:11:45.007" level="WARN">[Received] {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 1],
					[1, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				]
			]
		}
	]
}
}</msg>
<msg timestamp="20140401 14:11:45.062" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "column": "Name"}</msg>
<msg timestamp="20140401 14:11:45.569" level="WARN">[Received] {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
}</msg>
<msg timestamp="20140401 14:11:45.600" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 2}</msg>
<msg timestamp="20140401 14:11:46.108" level="WARN">[Received] {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		}
	]
}
}</msg>
<msg timestamp="20140401 14:11:46.147" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Name"}</msg>
<msg timestamp="20140401 14:11:46.655" level="WARN">[Received] {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag"]
		}
	]
}
}</msg>
<msg timestamp="20140401 14:11:46.669" level="WARN">[Sending] {"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Input", "cell": 12}</msg>
<msg timestamp="20140401 14:11:47.175" level="WARN">[Received] {"status":"OK",
	"value" : 1

}</msg>
<msg timestamp="20140401 14:11:47.183" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "NotAColumn"}</msg>
<msg timestamp="20140401 14:11:47.689" level="WARN">[Received] {
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 8
}
</msg>
<msg timestamp="20140401 14:11:47.700" level="WARN">[Sending] {"command": "RemoveData", "table": "TrialOutputData"}</msg>
<msg timestamp="20140401 14:11:48.206" level="WARN">[Received] {
	"status" : "OK"
}
</msg>
<msg timestamp="20140401 14:11:48.213" level="WARN">[Sending] {"command": "GetData", "table": "TrialOutputData"}</msg>
<msg timestamp="20140401 14:11:48.721" level="WARN">[Received] {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"values" : []
		}
	]
}
}</msg>
<msg timestamp="20140401 14:11:48.728" level="WARN">[Sending] {"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</msg>
<msg timestamp="20140401 14:11:49.234" level="WARN">[Received] {
	"status" : "OK"
}
</msg>
<msg timestamp="20140401 14:11:49.241" level="WARN">[Sending] {"command": "GetData", "table": "TrialOutputData"}</msg>
<msg timestamp="20140401 14:11:49.750" level="WARN">[Received] {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : [7]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : [9]
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"values" : [0]
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"values" : [""]
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"values" : [""]
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"values" : [0]
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"values" : [0]
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"values" : [0]
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"values" : [0]
		}
	]
}
}</msg>
</errors>
</robot>

<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20140505 20:26:24.965" generator="Robot 2.8.4 (Python 2.7.3 on linux2)">
<suite source="/home/djilk/emergent/test_auto/EmergentTestFramework/other/server.txt" id="s1" name="Server">
<kw type="setup" name="Initialize Emergent">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -server -p ../test-projects/LeabraStd.proj</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140505 20:26:25.101" level="INFO">Starting process:
emergent -nogui -server -p ../test-projects/LeabraStd.proj</msg>
<msg timestamp="20140505 20:26:25.105" level="INFO">${pid} = 1</msg>
<status status="PASS" endtime="20140505 20:26:25.104" starttime="20140505 20:26:25.100"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${pid}</arg>
</arguments>
<msg timestamp="20140505 20:26:25.106" level="INFO">${pid} = 1</msg>
<status status="PASS" endtime="20140505 20:26:25.106" starttime="20140505 20:26:25.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4 sec</arg>
</arguments>
<msg timestamp="20140505 20:26:29.108" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20140505 20:26:29.108" starttime="20140505 20:26:25.106"></status>
</kw>
<kw type="kw" name="Telnet.Open Connection">
<doc>Opens a new Telnet connection to the given host and port.</doc>
<arguments>
<arg>127.0.0.1</arg>
<arg>port=5360</arg>
</arguments>
<msg timestamp="20140505 20:26:29.110" level="INFO">Opening connection to 127.0.0.1:5360 with prompt: None</msg>
<status status="PASS" endtime="20140505 20:26:29.119" starttime="20140505 20:26:29.109"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:29.119" starttime="20140505 20:26:25.099"></status>
</kw>
<test id="s1-t1" name="Initialize">
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>${false}</arg>
</arguments>
<msg timestamp="20140505 20:26:29.122" level="INFO">${verbose} = False</msg>
<status status="PASS" endtime="20140505 20:26:29.122" starttime="20140505 20:26:29.121"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${debug}' == 'true'</arg>
<arg>Set Suite Variable</arg>
<arg>${verbose}</arg>
<arg>${true}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:29.123" starttime="20140505 20:26:29.122"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:26:29.123" critical="yes" starttime="20140505 20:26:29.120"></status>
</test>
<test id="s1-t2" name="Connection">
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1 sec</arg>
</arguments>
<msg timestamp="20140505 20:26:30.125" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20140505 20:26:30.126" starttime="20140505 20:26:29.124"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:26:30.127" level="INFO">Emergent Server v6.3.8</msg>
<msg timestamp="20140505 20:26:30.127" level="INFO">${output} = Emergent Server v6.3.8
</msg>
<status status="PASS" endtime="20140505 20:26:30.127" starttime="20140505 20:26:30.126"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:30.129" starttime="20140505 20:26:30.128"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:30.131" starttime="20140505 20:26:30.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Emergent Server v6.</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:30.132" starttime="20140505 20:26:30.132"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:26:30.132" critical="yes" starttime="20140505 20:26:29.124"></status>
</test>
<test id="s1-t3" name="Native Test">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>GetRunState</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:30.136" starttime="20140505 20:26:30.136"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:30.136" starttime="20140505 20:26:30.135"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:30.137" starttime="20140505 20:26:30.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:26:30.638" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:26:30.639" starttime="20140505 20:26:30.137"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:26:30.639" level="INFO">OK 4</msg>
<msg timestamp="20140505 20:26:30.640" level="INFO">${output} = OK 4
</msg>
<status status="PASS" endtime="20140505 20:26:30.639" starttime="20140505 20:26:30.639"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:30.641" starttime="20140505 20:26:30.641"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:30.641" starttime="20140505 20:26:30.640"></status>
</kw>
<msg timestamp="20140505 20:26:30.641" level="INFO">${output} = OK 4
</msg>
<status status="PASS" endtime="20140505 20:26:30.641" starttime="20140505 20:26:30.134"></status>
</kw>
<msg timestamp="20140505 20:26:30.642" level="INFO">${output} = OK 4
</msg>
<status status="PASS" endtime="20140505 20:26:30.642" starttime="20140505 20:26:30.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:30.643" starttime="20140505 20:26:30.642"></status>
</kw>
<kw type="kw" name="Message Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>4</arg>
</arguments>
<kw type="kw" name="${match}, ${message} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>OK (.*)</arg>
</arguments>
<msg timestamp="20140505 20:26:30.644" level="INFO">${match} = OK 4</msg>
<msg timestamp="20140505 20:26:30.644" level="INFO">${message} = 4</msg>
<status status="PASS" endtime="20140505 20:26:30.644" starttime="20140505 20:26:30.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${message}</arg>
</arguments>
<msg timestamp="20140505 20:26:30.645" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140505 20:26:30.645" starttime="20140505 20:26:30.645"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:30.645" starttime="20140505 20:26:30.643"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:26:30.646" critical="yes" starttime="20140505 20:26:30.133"></status>
</test>
<test id="s1-t4" name="General RunState">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetRunState"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:30.649" starttime="20140505 20:26:30.649"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:30.649" starttime="20140505 20:26:30.648"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:30.650" starttime="20140505 20:26:30.649"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:26:31.151" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:26:31.151" starttime="20140505 20:26:30.650"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:26:31.152" level="INFO">{
	"status" : "OK",
	"result" : "4"
}</msg>
<msg timestamp="20140505 20:26:31.152" level="INFO">${output} = {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140505 20:26:31.152" starttime="20140505 20:26:31.152"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:31.154" starttime="20140505 20:26:31.153"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.154" starttime="20140505 20:26:31.153"></status>
</kw>
<msg timestamp="20140505 20:26:31.155" level="INFO">${output} = {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140505 20:26:31.154" starttime="20140505 20:26:30.647"></status>
</kw>
<msg timestamp="20140505 20:26:31.155" level="INFO">${output} = {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140505 20:26:31.155" starttime="20140505 20:26:30.647"></status>
</kw>
<kw type="kw" name="Status OK Match Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>4</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:31.157" starttime="20140505 20:26:31.157"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:31.161" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:26:31.160" starttime="20140505 20:26:31.159"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:26:31.162" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:26:31.163" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:26:31.162" starttime="20140505 20:26:31.162"></status>
</kw>
<msg timestamp="20140505 20:26:31.163" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:26:31.163" starttime="20140505 20:26:31.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:31.164" starttime="20140505 20:26:31.163"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.164" starttime="20140505 20:26:31.157"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:31.166" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': u'4'}</msg>
<status status="FAIL" endtime="20140505 20:26:31.166" starttime="20140505 20:26:31.165"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.167" starttime="20140505 20:26:31.165"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.167" starttime="20140505 20:26:31.164"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:31.169" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': u'4'}</msg>
<status status="FAIL" endtime="20140505 20:26:31.169" starttime="20140505 20:26:31.168"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.169" starttime="20140505 20:26:31.168"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.169" starttime="20140505 20:26:31.167"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.169" starttime="20140505 20:26:31.156"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:31.172" level="INFO">${value} = "4"</msg>
<status status="PASS" endtime="20140505 20:26:31.172" starttime="20140505 20:26:31.171"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:26:31.172" level="INFO">${match} = "4"</msg>
<msg timestamp="20140505 20:26:31.173" level="INFO">${output} = 4</msg>
<status status="PASS" endtime="20140505 20:26:31.172" starttime="20140505 20:26:31.172"></status>
</kw>
<msg timestamp="20140505 20:26:31.173" level="INFO">${value} = 4</msg>
<status status="PASS" endtime="20140505 20:26:31.173" starttime="20140505 20:26:31.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:31.173" starttime="20140505 20:26:31.173"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.174" starttime="20140505 20:26:31.170"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.174" starttime="20140505 20:26:31.155"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:26:31.174" critical="yes" starttime="20140505 20:26:30.646"></status>
</test>
<test id="s1-t5" name="Program RunState">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetRunState", "program": "LeabraBatch"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:31.178" starttime="20140505 20:26:31.177"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.178" starttime="20140505 20:26:31.176"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:31.179" starttime="20140505 20:26:31.178"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:26:31.680" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:26:31.680" starttime="20140505 20:26:31.179"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:26:31.681" level="INFO">{
	"status" : "OK",
	"result" : "4"
}</msg>
<msg timestamp="20140505 20:26:31.681" level="INFO">${output} = {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140505 20:26:31.681" starttime="20140505 20:26:31.681"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:31.683" starttime="20140505 20:26:31.682"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.683" starttime="20140505 20:26:31.681"></status>
</kw>
<msg timestamp="20140505 20:26:31.683" level="INFO">${output} = {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140505 20:26:31.683" starttime="20140505 20:26:31.176"></status>
</kw>
<msg timestamp="20140505 20:26:31.684" level="INFO">${output} = {
	"status" : "OK",
	"result" : "4"
}
</msg>
<status status="PASS" endtime="20140505 20:26:31.683" starttime="20140505 20:26:31.175"></status>
</kw>
<kw type="kw" name="Status OK Match Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>4</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:31.686" starttime="20140505 20:26:31.685"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:31.688" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:26:31.688" starttime="20140505 20:26:31.687"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:26:31.688" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:26:31.688" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:26:31.688" starttime="20140505 20:26:31.688"></status>
</kw>
<msg timestamp="20140505 20:26:31.689" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:26:31.689" starttime="20140505 20:26:31.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:31.690" starttime="20140505 20:26:31.689"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.690" starttime="20140505 20:26:31.686"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:31.692" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': u'4'}</msg>
<status status="FAIL" endtime="20140505 20:26:31.692" starttime="20140505 20:26:31.691"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.692" starttime="20140505 20:26:31.691"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.692" starttime="20140505 20:26:31.690"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:31.694" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': u'4'}</msg>
<status status="FAIL" endtime="20140505 20:26:31.694" starttime="20140505 20:26:31.693"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.694" starttime="20140505 20:26:31.693"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.694" starttime="20140505 20:26:31.692"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.695" starttime="20140505 20:26:31.685"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:31.697" level="INFO">${value} = "4"</msg>
<status status="PASS" endtime="20140505 20:26:31.697" starttime="20140505 20:26:31.696"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:26:31.698" level="INFO">${match} = "4"</msg>
<msg timestamp="20140505 20:26:31.698" level="INFO">${output} = 4</msg>
<status status="PASS" endtime="20140505 20:26:31.697" starttime="20140505 20:26:31.697"></status>
</kw>
<msg timestamp="20140505 20:26:31.698" level="INFO">${value} = 4</msg>
<status status="PASS" endtime="20140505 20:26:31.698" starttime="20140505 20:26:31.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:31.699" starttime="20140505 20:26:31.698"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.699" starttime="20140505 20:26:31.695"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.699" starttime="20140505 20:26:31.684"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:26:31.699" critical="yes" starttime="20140505 20:26:31.175"></status>
</test>
<test id="s1-t6" name="RunProgram">
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>{"command": "RunProgram", "program": "LeabraBatch"}</arg>
<arg>20 sec</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:31.702" starttime="20140505 20:26:31.702"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:31.702" starttime="20140505 20:26:31.701"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:31.703" starttime="20140505 20:26:31.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:26:51.704" level="INFO">Slept 20 seconds</msg>
<status status="PASS" endtime="20140505 20:26:51.704" starttime="20140505 20:26:31.703"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:26:51.705" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:26:51.705" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:26:51.705" starttime="20140505 20:26:51.705"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:51.707" starttime="20140505 20:26:51.706"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:51.707" starttime="20140505 20:26:51.706"></status>
</kw>
<msg timestamp="20140505 20:26:51.707" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:26:51.707" starttime="20140505 20:26:31.700"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:51.709" starttime="20140505 20:26:51.709"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:51.711" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:26:51.711" starttime="20140505 20:26:51.711"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:26:51.712" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:26:51.712" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:26:51.712" starttime="20140505 20:26:51.712"></status>
</kw>
<msg timestamp="20140505 20:26:51.712" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:26:51.712" starttime="20140505 20:26:51.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:51.713" starttime="20140505 20:26:51.713"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:51.713" starttime="20140505 20:26:51.709"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:51.715" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:26:51.715" starttime="20140505 20:26:51.714"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:51.716" starttime="20140505 20:26:51.714"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:51.716" starttime="20140505 20:26:51.713"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:51.718" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:26:51.718" starttime="20140505 20:26:51.717"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:51.718" starttime="20140505 20:26:51.717"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:51.718" starttime="20140505 20:26:51.716"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:51.718" starttime="20140505 20:26:51.708"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:51.720" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:26:51.720" starttime="20140505 20:26:51.719"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:51.720" starttime="20140505 20:26:51.719"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:51.720" starttime="20140505 20:26:51.718"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:51.720" starttime="20140505 20:26:51.708"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:26:51.721" critical="yes" starttime="20140505 20:26:31.700"></status>
</test>
<test id="s1-t7" name="Program RunState After Init">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetRunState", "program": "LeabraBatch"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:51.725" starttime="20140505 20:26:51.725"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:51.725" starttime="20140505 20:26:51.724"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:51.726" starttime="20140505 20:26:51.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:26:52.227" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:26:52.228" starttime="20140505 20:26:51.726"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:26:52.229" level="INFO">{
	"status" : "OK",
	"result" : "0"
}</msg>
<msg timestamp="20140505 20:26:52.229" level="INFO">${output} = {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140505 20:26:52.229" starttime="20140505 20:26:52.228"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:52.230" starttime="20140505 20:26:52.230"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.230" starttime="20140505 20:26:52.229"></status>
</kw>
<msg timestamp="20140505 20:26:52.231" level="INFO">${output} = {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140505 20:26:52.231" starttime="20140505 20:26:51.722"></status>
</kw>
<msg timestamp="20140505 20:26:52.231" level="INFO">${output} = {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140505 20:26:52.231" starttime="20140505 20:26:51.722"></status>
</kw>
<kw type="kw" name="Status OK Match Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:52.233" starttime="20140505 20:26:52.233"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:52.235" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:26:52.235" starttime="20140505 20:26:52.235"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:26:52.236" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:26:52.236" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:26:52.236" starttime="20140505 20:26:52.236"></status>
</kw>
<msg timestamp="20140505 20:26:52.237" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:26:52.237" starttime="20140505 20:26:52.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:52.237" starttime="20140505 20:26:52.237"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.238" starttime="20140505 20:26:52.233"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:52.240" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': u'0'}</msg>
<status status="FAIL" endtime="20140505 20:26:52.240" starttime="20140505 20:26:52.239"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.240" starttime="20140505 20:26:52.239"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.240" starttime="20140505 20:26:52.238"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:52.242" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': u'0'}</msg>
<status status="FAIL" endtime="20140505 20:26:52.242" starttime="20140505 20:26:52.241"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.242" starttime="20140505 20:26:52.241"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.242" starttime="20140505 20:26:52.240"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.242" starttime="20140505 20:26:52.232"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:52.246" level="INFO">${value} = "0"</msg>
<status status="PASS" endtime="20140505 20:26:52.245" starttime="20140505 20:26:52.245"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:26:52.246" level="INFO">${match} = "0"</msg>
<msg timestamp="20140505 20:26:52.246" level="INFO">${output} = 0</msg>
<status status="PASS" endtime="20140505 20:26:52.246" starttime="20140505 20:26:52.246"></status>
</kw>
<msg timestamp="20140505 20:26:52.247" level="INFO">${value} = 0</msg>
<status status="PASS" endtime="20140505 20:26:52.247" starttime="20140505 20:26:52.244"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:52.247" starttime="20140505 20:26:52.247"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.247" starttime="20140505 20:26:52.243"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.248" starttime="20140505 20:26:52.231"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:26:52.248" critical="yes" starttime="20140505 20:26:51.721"></status>
</test>
<test id="s1-t8" name="General RunState After Init">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetRunState"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:52.251" starttime="20140505 20:26:52.251"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.251" starttime="20140505 20:26:52.250"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:52.252" starttime="20140505 20:26:52.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:26:52.754" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:26:52.754" starttime="20140505 20:26:52.253"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:26:52.755" level="INFO">{
	"status" : "OK",
	"result" : "0"
}</msg>
<msg timestamp="20140505 20:26:52.755" level="INFO">${output} = {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140505 20:26:52.755" starttime="20140505 20:26:52.754"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:52.756" starttime="20140505 20:26:52.756"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.756" starttime="20140505 20:26:52.755"></status>
</kw>
<msg timestamp="20140505 20:26:52.757" level="INFO">${output} = {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140505 20:26:52.757" starttime="20140505 20:26:52.250"></status>
</kw>
<msg timestamp="20140505 20:26:52.757" level="INFO">${output} = {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140505 20:26:52.757" starttime="20140505 20:26:52.249"></status>
</kw>
<kw type="kw" name="Status OK Match Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:52.759" starttime="20140505 20:26:52.759"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:52.761" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:26:52.761" starttime="20140505 20:26:52.761"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:26:52.762" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:26:52.762" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:26:52.762" starttime="20140505 20:26:52.761"></status>
</kw>
<msg timestamp="20140505 20:26:52.762" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:26:52.762" starttime="20140505 20:26:52.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:52.763" starttime="20140505 20:26:52.763"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.763" starttime="20140505 20:26:52.759"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:52.765" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': u'0'}</msg>
<status status="FAIL" endtime="20140505 20:26:52.765" starttime="20140505 20:26:52.764"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.765" starttime="20140505 20:26:52.764"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.766" starttime="20140505 20:26:52.763"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:52.767" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': u'0'}</msg>
<status status="FAIL" endtime="20140505 20:26:52.767" starttime="20140505 20:26:52.767"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.768" starttime="20140505 20:26:52.766"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.768" starttime="20140505 20:26:52.766"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.768" starttime="20140505 20:26:52.758"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:52.770" level="INFO">${value} = "0"</msg>
<status status="PASS" endtime="20140505 20:26:52.770" starttime="20140505 20:26:52.770"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:26:52.771" level="INFO">${match} = "0"</msg>
<msg timestamp="20140505 20:26:52.771" level="INFO">${output} = 0</msg>
<status status="PASS" endtime="20140505 20:26:52.771" starttime="20140505 20:26:52.770"></status>
</kw>
<msg timestamp="20140505 20:26:52.771" level="INFO">${value} = 0</msg>
<status status="PASS" endtime="20140505 20:26:52.771" starttime="20140505 20:26:52.769"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:52.772" starttime="20140505 20:26:52.771"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.772" starttime="20140505 20:26:52.768"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.772" starttime="20140505 20:26:52.757"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:26:52.772" critical="yes" starttime="20140505 20:26:52.248"></status>
</test>
<test id="s1-t9" name="RunProgramAsync">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "RunProgramAsync", "program": "LeabraBatch"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:52.776" starttime="20140505 20:26:52.776"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:52.776" starttime="20140505 20:26:52.775"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:52.778" starttime="20140505 20:26:52.776"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:26:53.279" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:26:53.280" starttime="20140505 20:26:52.778"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:26:53.280" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:26:53.281" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:26:53.280" starttime="20140505 20:26:53.280"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:53.282" starttime="20140505 20:26:53.282"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.282" starttime="20140505 20:26:53.281"></status>
</kw>
<msg timestamp="20140505 20:26:53.283" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:26:53.282" starttime="20140505 20:26:52.774"></status>
</kw>
<msg timestamp="20140505 20:26:53.283" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:26:53.283" starttime="20140505 20:26:52.774"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:53.285" starttime="20140505 20:26:53.285"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:53.288" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:26:53.287" starttime="20140505 20:26:53.287"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:26:53.288" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:26:53.288" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:26:53.288" starttime="20140505 20:26:53.288"></status>
</kw>
<msg timestamp="20140505 20:26:53.289" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:26:53.289" starttime="20140505 20:26:53.286"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:53.290" starttime="20140505 20:26:53.289"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.290" starttime="20140505 20:26:53.285"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:53.292" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:26:53.292" starttime="20140505 20:26:53.291"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.292" starttime="20140505 20:26:53.291"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.292" starttime="20140505 20:26:53.290"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:53.294" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:26:53.295" starttime="20140505 20:26:53.294"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.295" starttime="20140505 20:26:53.293"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.295" starttime="20140505 20:26:53.292"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.295" starttime="20140505 20:26:53.284"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:53.297" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:26:53.297" starttime="20140505 20:26:53.296"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.297" starttime="20140505 20:26:53.296"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.297" starttime="20140505 20:26:53.295"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.297" starttime="20140505 20:26:53.283"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetRunState"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:53.300" starttime="20140505 20:26:53.300"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.300" starttime="20140505 20:26:53.299"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:53.301" starttime="20140505 20:26:53.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:26:53.802" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:26:53.802" starttime="20140505 20:26:53.301"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:26:53.803" level="INFO">{
	"status" : "OK",
	"result" : "2"
}</msg>
<msg timestamp="20140505 20:26:53.803" level="INFO">${output} = {
	"status" : "OK",
	"result" : "2"
}
</msg>
<status status="PASS" endtime="20140505 20:26:53.803" starttime="20140505 20:26:53.802"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:53.805" starttime="20140505 20:26:53.804"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.805" starttime="20140505 20:26:53.803"></status>
</kw>
<msg timestamp="20140505 20:26:53.805" level="INFO">${output} = {
	"status" : "OK",
	"result" : "2"
}
</msg>
<status status="PASS" endtime="20140505 20:26:53.805" starttime="20140505 20:26:53.298"></status>
</kw>
<msg timestamp="20140505 20:26:53.805" level="INFO">${output} = {
	"status" : "OK",
	"result" : "2"
}
</msg>
<status status="PASS" endtime="20140505 20:26:53.805" starttime="20140505 20:26:53.298"></status>
</kw>
<kw type="kw" name="Status OK Match Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>2</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:53.807" starttime="20140505 20:26:53.807"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:53.810" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:26:53.809" starttime="20140505 20:26:53.809"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:26:53.810" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:26:53.810" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:26:53.810" starttime="20140505 20:26:53.810"></status>
</kw>
<msg timestamp="20140505 20:26:53.811" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:26:53.811" starttime="20140505 20:26:53.808"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:53.811" starttime="20140505 20:26:53.811"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.811" starttime="20140505 20:26:53.807"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:53.813" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': u'2'}</msg>
<status status="FAIL" endtime="20140505 20:26:53.813" starttime="20140505 20:26:53.813"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.813" starttime="20140505 20:26:53.812"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.814" starttime="20140505 20:26:53.811"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:53.815" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': u'2'}</msg>
<status status="FAIL" endtime="20140505 20:26:53.815" starttime="20140505 20:26:53.815"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.816" starttime="20140505 20:26:53.815"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.816" starttime="20140505 20:26:53.814"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.816" starttime="20140505 20:26:53.806"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:26:53.819" level="INFO">${value} = "2"</msg>
<status status="PASS" endtime="20140505 20:26:53.818" starttime="20140505 20:26:53.818"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:26:53.819" level="INFO">${match} = "2"</msg>
<msg timestamp="20140505 20:26:53.819" level="INFO">${output} = 2</msg>
<status status="PASS" endtime="20140505 20:26:53.819" starttime="20140505 20:26:53.819"></status>
</kw>
<msg timestamp="20140505 20:26:53.820" level="INFO">${value} = 2</msg>
<status status="PASS" endtime="20140505 20:26:53.820" starttime="20140505 20:26:53.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:26:53.820" starttime="20140505 20:26:53.820"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.820" starttime="20140505 20:26:53.817"></status>
</kw>
<status status="PASS" endtime="20140505 20:26:53.821" starttime="20140505 20:26:53.806"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>20 sec</arg>
</arguments>
<msg timestamp="20140505 20:27:13.822" level="INFO">Slept 20 seconds</msg>
<status status="PASS" endtime="20140505 20:27:13.822" starttime="20140505 20:26:53.821"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetRunState", "program": "LeabraBatch"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:13.825" starttime="20140505 20:27:13.825"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:13.825" starttime="20140505 20:27:13.824"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:13.826" starttime="20140505 20:27:13.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:14.327" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:14.328" starttime="20140505 20:27:13.826"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:14.329" level="INFO">{
	"status" : "OK",
	"result" : "0"
}</msg>
<msg timestamp="20140505 20:27:14.329" level="INFO">${output} = {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140505 20:27:14.329" starttime="20140505 20:27:14.328"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.331" starttime="20140505 20:27:14.331"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.331" starttime="20140505 20:27:14.329"></status>
</kw>
<msg timestamp="20140505 20:27:14.332" level="INFO">${output} = {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140505 20:27:14.332" starttime="20140505 20:27:13.823"></status>
</kw>
<msg timestamp="20140505 20:27:14.333" level="INFO">${output} = {
	"status" : "OK",
	"result" : "0"
}
</msg>
<status status="PASS" endtime="20140505 20:27:14.332" starttime="20140505 20:27:13.823"></status>
</kw>
<kw type="kw" name="Status OK Match Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.336" starttime="20140505 20:27:14.335"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:14.339" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:14.339" starttime="20140505 20:27:14.338"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:14.340" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:14.340" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:14.340" starttime="20140505 20:27:14.339"></status>
</kw>
<msg timestamp="20140505 20:27:14.340" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:14.340" starttime="20140505 20:27:14.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.341" starttime="20140505 20:27:14.340"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.341" starttime="20140505 20:27:14.336"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:14.344" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': u'0'}</msg>
<status status="FAIL" endtime="20140505 20:27:14.344" starttime="20140505 20:27:14.342"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.344" starttime="20140505 20:27:14.342"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.344" starttime="20140505 20:27:14.341"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:14.346" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': u'0'}</msg>
<status status="FAIL" endtime="20140505 20:27:14.346" starttime="20140505 20:27:14.346"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.346" starttime="20140505 20:27:14.345"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.346" starttime="20140505 20:27:14.344"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.347" starttime="20140505 20:27:14.334"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:14.349" level="INFO">${value} = "0"</msg>
<status status="PASS" endtime="20140505 20:27:14.349" starttime="20140505 20:27:14.348"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:14.349" level="INFO">${match} = "0"</msg>
<msg timestamp="20140505 20:27:14.349" level="INFO">${output} = 0</msg>
<status status="PASS" endtime="20140505 20:27:14.349" starttime="20140505 20:27:14.349"></status>
</kw>
<msg timestamp="20140505 20:27:14.350" level="INFO">${value} = 0</msg>
<status status="PASS" endtime="20140505 20:27:14.350" starttime="20140505 20:27:14.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.350" starttime="20140505 20:27:14.350"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.351" starttime="20140505 20:27:14.347"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.351" starttime="20140505 20:27:14.333"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:14.351" critical="yes" starttime="20140505 20:26:52.773"></status>
</test>
<test id="s1-t10" name="JSON Format Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{NotValidJSON}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.355" starttime="20140505 20:27:14.354"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.355" starttime="20140505 20:27:14.354"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.356" starttime="20140505 20:27:14.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:14.857" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:14.857" starttime="20140505 20:27:14.356"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:14.858" level="INFO">{
	"status" : "ERROR",
	"message" : "JSON format error",
	"error" : 1
}</msg>
<msg timestamp="20140505 20:27:14.859" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "JSON format error",
	"error" : 1
}
</msg>
<status status="PASS" endtime="20140505 20:27:14.859" starttime="20140505 20:27:14.858"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.860" starttime="20140505 20:27:14.860"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.860" starttime="20140505 20:27:14.859"></status>
</kw>
<msg timestamp="20140505 20:27:14.861" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "JSON format error",
	"error" : 1
}
</msg>
<status status="PASS" endtime="20140505 20:27:14.860" starttime="20140505 20:27:14.353"></status>
</kw>
<msg timestamp="20140505 20:27:14.861" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "JSON format error",
	"error" : 1
}
</msg>
<status status="PASS" endtime="20140505 20:27:14.861" starttime="20140505 20:27:14.352"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>1</arg>
<arg>JSON format error</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.863" starttime="20140505 20:27:14.862"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:14.865" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:14.865" starttime="20140505 20:27:14.864"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:14.866" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:14.866" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:14.866" starttime="20140505 20:27:14.865"></status>
</kw>
<msg timestamp="20140505 20:27:14.866" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:14.866" starttime="20140505 20:27:14.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.867" starttime="20140505 20:27:14.866"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.867" starttime="20140505 20:27:14.863"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:14.869" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'JSON format error', u'error': 1}</msg>
<status status="FAIL" endtime="20140505 20:27:14.869" starttime="20140505 20:27:14.868"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.869" starttime="20140505 20:27:14.868"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.869" starttime="20140505 20:27:14.867"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.870" starttime="20140505 20:27:14.862"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.870" starttime="20140505 20:27:14.870"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:14.872" level="INFO">${value} = "JSON format error"</msg>
<status status="PASS" endtime="20140505 20:27:14.872" starttime="20140505 20:27:14.872"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:14.873" level="INFO">${match} = "JSON format error"</msg>
<msg timestamp="20140505 20:27:14.873" level="INFO">${output} = JSON format error</msg>
<status status="PASS" endtime="20140505 20:27:14.873" starttime="20140505 20:27:14.873"></status>
</kw>
<msg timestamp="20140505 20:27:14.873" level="INFO">${value} = JSON format error</msg>
<status status="PASS" endtime="20140505 20:27:14.873" starttime="20140505 20:27:14.871"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.874" starttime="20140505 20:27:14.874"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.874" starttime="20140505 20:27:14.870"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.875" starttime="20140505 20:27:14.861"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:14.875" critical="yes" starttime="20140505 20:27:14.352"></status>
</test>
<test id="s1-t11" name="Unknown Command Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "UnknownCommand"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.878" starttime="20140505 20:27:14.878"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:14.878" starttime="20140505 20:27:14.877"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:14.879" starttime="20140505 20:27:14.879"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:15.380" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:15.381" starttime="20140505 20:27:14.879"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:15.382" level="INFO">{
	"status" : "ERROR",
	"message" : "Unknown command: UnknownCommand",
	"error" : 2
}</msg>
<msg timestamp="20140505 20:27:15.382" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown command: UnknownCommand",
	"error" : 2
}
</msg>
<status status="PASS" endtime="20140505 20:27:15.382" starttime="20140505 20:27:15.381"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.383" starttime="20140505 20:27:15.383"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.383" starttime="20140505 20:27:15.382"></status>
</kw>
<msg timestamp="20140505 20:27:15.384" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown command: UnknownCommand",
	"error" : 2
}
</msg>
<status status="PASS" endtime="20140505 20:27:15.384" starttime="20140505 20:27:14.877"></status>
</kw>
<msg timestamp="20140505 20:27:15.384" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown command: UnknownCommand",
	"error" : 2
}
</msg>
<status status="PASS" endtime="20140505 20:27:15.384" starttime="20140505 20:27:14.876"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>2</arg>
<arg>Unknown command: UnknownCommand</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.386" starttime="20140505 20:27:15.386"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:15.389" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:15.388" starttime="20140505 20:27:15.388"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:15.389" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:15.389" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:15.389" starttime="20140505 20:27:15.389"></status>
</kw>
<msg timestamp="20140505 20:27:15.390" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:15.390" starttime="20140505 20:27:15.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.390" starttime="20140505 20:27:15.390"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.391" starttime="20140505 20:27:15.387"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:15.393" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'Unknown command: UnknownCommand', u'error': 2}</msg>
<status status="FAIL" endtime="20140505 20:27:15.393" starttime="20140505 20:27:15.392"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.393" starttime="20140505 20:27:15.392"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.393" starttime="20140505 20:27:15.391"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.393" starttime="20140505 20:27:15.385"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.394" starttime="20140505 20:27:15.394"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:15.396" level="INFO">${value} = "Unknown command: UnknownCommand"</msg>
<status status="PASS" endtime="20140505 20:27:15.396" starttime="20140505 20:27:15.396"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:15.397" level="INFO">${match} = "Unknown command: UnknownCommand"</msg>
<msg timestamp="20140505 20:27:15.397" level="INFO">${output} = Unknown command: UnknownCommand</msg>
<status status="PASS" endtime="20140505 20:27:15.397" starttime="20140505 20:27:15.396"></status>
</kw>
<msg timestamp="20140505 20:27:15.397" level="INFO">${value} = Unknown command: UnknownCommand</msg>
<status status="PASS" endtime="20140505 20:27:15.397" starttime="20140505 20:27:15.395"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.398" starttime="20140505 20:27:15.397"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.398" starttime="20140505 20:27:15.394"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.398" starttime="20140505 20:27:15.384"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:15.399" critical="yes" starttime="20140505 20:27:14.875"></status>
</test>
<test id="s1-t12" name="No Command Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.402" starttime="20140505 20:27:15.402"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.402" starttime="20140505 20:27:15.401"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.403" starttime="20140505 20:27:15.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:15.904" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:15.905" starttime="20140505 20:27:15.403"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:15.905" level="INFO">{
	"status" : "ERROR",
	"message" : "Unknown command: ",
	"error" : 2
}</msg>
<msg timestamp="20140505 20:27:15.906" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown command: ",
	"error" : 2
}
</msg>
<status status="PASS" endtime="20140505 20:27:15.905" starttime="20140505 20:27:15.905"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.907" starttime="20140505 20:27:15.907"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.907" starttime="20140505 20:27:15.906"></status>
</kw>
<msg timestamp="20140505 20:27:15.907" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown command: ",
	"error" : 2
}
</msg>
<status status="PASS" endtime="20140505 20:27:15.907" starttime="20140505 20:27:15.400"></status>
</kw>
<msg timestamp="20140505 20:27:15.908" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown command: ",
	"error" : 2
}
</msg>
<status status="PASS" endtime="20140505 20:27:15.908" starttime="20140505 20:27:15.400"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>2</arg>
<arg>Unknown command: \</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.910" starttime="20140505 20:27:15.909"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:15.912" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:15.912" starttime="20140505 20:27:15.911"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:15.913" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:15.913" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:15.913" starttime="20140505 20:27:15.912"></status>
</kw>
<msg timestamp="20140505 20:27:15.913" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:15.913" starttime="20140505 20:27:15.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.914" starttime="20140505 20:27:15.913"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.914" starttime="20140505 20:27:15.910"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:15.916" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'Unknown command: ', u'error': 2}</msg>
<status status="FAIL" endtime="20140505 20:27:15.916" starttime="20140505 20:27:15.915"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.916" starttime="20140505 20:27:15.915"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.916" starttime="20140505 20:27:15.914"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.916" starttime="20140505 20:27:15.909"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.917" starttime="20140505 20:27:15.917"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:15.920" level="INFO">${value} = "Unknown command: "</msg>
<status status="PASS" endtime="20140505 20:27:15.919" starttime="20140505 20:27:15.919"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:15.920" level="INFO">${match} = "Unknown command: "</msg>
<msg timestamp="20140505 20:27:15.920" level="INFO">${output} = Unknown command: </msg>
<status status="PASS" endtime="20140505 20:27:15.920" starttime="20140505 20:27:15.920"></status>
</kw>
<msg timestamp="20140505 20:27:15.921" level="INFO">${value} = Unknown command: </msg>
<status status="PASS" endtime="20140505 20:27:15.921" starttime="20140505 20:27:15.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.921" starttime="20140505 20:27:15.921"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.922" starttime="20140505 20:27:15.917"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.922" starttime="20140505 20:27:15.908"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:15.922" critical="yes" starttime="20140505 20:27:15.399"></status>
</test>
<test id="s1-t13" name="Unknown Parameter Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetRunState", "irrelevant": "value"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.925" starttime="20140505 20:27:15.925"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:15.926" starttime="20140505 20:27:15.924"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:15.926" starttime="20140505 20:27:15.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:16.427" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:16.428" starttime="20140505 20:27:15.926"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:16.429" level="INFO">{
	"status" : "ERROR",
	"message" : "Unknown parameter: irrelevant",
	"error" : 4
}</msg>
<msg timestamp="20140505 20:27:16.429" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown parameter: irrelevant",
	"error" : 4
}
</msg>
<status status="PASS" endtime="20140505 20:27:16.429" starttime="20140505 20:27:16.428"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.430" starttime="20140505 20:27:16.430"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.431" starttime="20140505 20:27:16.429"></status>
</kw>
<msg timestamp="20140505 20:27:16.431" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown parameter: irrelevant",
	"error" : 4
}
</msg>
<status status="PASS" endtime="20140505 20:27:16.431" starttime="20140505 20:27:15.924"></status>
</kw>
<msg timestamp="20140505 20:27:16.431" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown parameter: irrelevant",
	"error" : 4
}
</msg>
<status status="PASS" endtime="20140505 20:27:16.431" starttime="20140505 20:27:15.923"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>4</arg>
<arg>Unknown parameter: irrelevant</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.433" starttime="20140505 20:27:16.433"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:16.436" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:16.436" starttime="20140505 20:27:16.435"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:16.436" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:16.437" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:16.436" starttime="20140505 20:27:16.436"></status>
</kw>
<msg timestamp="20140505 20:27:16.437" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:16.437" starttime="20140505 20:27:16.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.437" starttime="20140505 20:27:16.437"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.438" starttime="20140505 20:27:16.433"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:16.440" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'Unknown parameter: irrelevant', u'error': 4}</msg>
<status status="FAIL" endtime="20140505 20:27:16.440" starttime="20140505 20:27:16.439"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.440" starttime="20140505 20:27:16.439"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.440" starttime="20140505 20:27:16.438"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.440" starttime="20140505 20:27:16.432"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.441" starttime="20140505 20:27:16.441"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:16.444" level="INFO">${value} = "Unknown parameter: irrelevant"</msg>
<status status="PASS" endtime="20140505 20:27:16.444" starttime="20140505 20:27:16.444"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:16.445" level="INFO">${match} = "Unknown parameter: irrelevant"</msg>
<msg timestamp="20140505 20:27:16.445" level="INFO">${output} = Unknown parameter: irrelevant</msg>
<status status="PASS" endtime="20140505 20:27:16.445" starttime="20140505 20:27:16.445"></status>
</kw>
<msg timestamp="20140505 20:27:16.446" level="INFO">${value} = Unknown parameter: irrelevant</msg>
<status status="PASS" endtime="20140505 20:27:16.446" starttime="20140505 20:27:16.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.447" starttime="20140505 20:27:16.446"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.447" starttime="20140505 20:27:16.441"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.447" starttime="20140505 20:27:16.432"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:16.447" critical="yes" starttime="20140505 20:27:15.922"></status>
</test>
<test id="s1-t14" name="Program Not Found Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "RunProgram", "program": "DoesNotExist"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.451" starttime="20140505 20:27:16.451"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.451" starttime="20140505 20:27:16.450"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.452" starttime="20140505 20:27:16.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:16.953" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:16.954" starttime="20140505 20:27:16.452"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:16.954" level="INFO">{
	"status" : "ERROR",
	"message" : "Program 'DoesNotExist' not found",
	"error" : 5
}</msg>
<msg timestamp="20140505 20:27:16.955" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Program 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:16.955" starttime="20140505 20:27:16.954"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.956" starttime="20140505 20:27:16.956"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.956" starttime="20140505 20:27:16.955"></status>
</kw>
<msg timestamp="20140505 20:27:16.957" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Program 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:16.957" starttime="20140505 20:27:16.449"></status>
</kw>
<msg timestamp="20140505 20:27:16.957" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Program 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:16.957" starttime="20140505 20:27:16.449"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>5</arg>
<arg>Program 'DoesNotExist' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.960" starttime="20140505 20:27:16.959"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:16.962" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:16.962" starttime="20140505 20:27:16.961"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:16.963" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:16.964" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:16.962" starttime="20140505 20:27:16.962"></status>
</kw>
<msg timestamp="20140505 20:27:16.964" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:16.964" starttime="20140505 20:27:16.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.965" starttime="20140505 20:27:16.964"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.965" starttime="20140505 20:27:16.960"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:16.967" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Program 'DoesNotExist' not found", u'error': 5}</msg>
<status status="FAIL" endtime="20140505 20:27:16.967" starttime="20140505 20:27:16.966"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.967" starttime="20140505 20:27:16.966"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.967" starttime="20140505 20:27:16.965"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.967" starttime="20140505 20:27:16.958"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.968" starttime="20140505 20:27:16.968"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:16.971" level="INFO">${value} = "Program 'DoesNotExist' not found"</msg>
<status status="PASS" endtime="20140505 20:27:16.971" starttime="20140505 20:27:16.970"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:16.971" level="INFO">${match} = "Program 'DoesNotExist' not found"</msg>
<msg timestamp="20140505 20:27:16.972" level="INFO">${output} = Program 'DoesNotExist' not found</msg>
<status status="PASS" endtime="20140505 20:27:16.971" starttime="20140505 20:27:16.971"></status>
</kw>
<msg timestamp="20140505 20:27:16.972" level="INFO">${value} = Program 'DoesNotExist' not found</msg>
<status status="PASS" endtime="20140505 20:27:16.972" starttime="20140505 20:27:16.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.973" starttime="20140505 20:27:16.972"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.973" starttime="20140505 20:27:16.968"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.973" starttime="20140505 20:27:16.957"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:16.973" critical="yes" starttime="20140505 20:27:16.448"></status>
</test>
<test id="s1-t15" name="SetVar Int">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetVar", "program": "LeabraTrain", "var_name": "max_epoch", "var_value": 501}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.977" starttime="20140505 20:27:16.977"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:16.978" starttime="20140505 20:27:16.976"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:16.979" starttime="20140505 20:27:16.978"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:17.480" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:17.480" starttime="20140505 20:27:16.979"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:17.481" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:17.481" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:17.481" starttime="20140505 20:27:17.480"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:17.483" starttime="20140505 20:27:17.482"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:17.483" starttime="20140505 20:27:17.481"></status>
</kw>
<msg timestamp="20140505 20:27:17.483" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:17.483" starttime="20140505 20:27:16.976"></status>
</kw>
<msg timestamp="20140505 20:27:17.484" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:17.484" starttime="20140505 20:27:16.975"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:17.486" starttime="20140505 20:27:17.485"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:17.488" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:17.488" starttime="20140505 20:27:17.487"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:17.489" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:17.489" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:17.489" starttime="20140505 20:27:17.488"></status>
</kw>
<msg timestamp="20140505 20:27:17.489" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:17.489" starttime="20140505 20:27:17.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:17.490" starttime="20140505 20:27:17.489"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:17.490" starttime="20140505 20:27:17.486"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:17.494" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:17.494" starttime="20140505 20:27:17.493"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:17.494" starttime="20140505 20:27:17.491"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:17.494" starttime="20140505 20:27:17.490"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:17.496" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:17.496" starttime="20140505 20:27:17.495"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:17.496" starttime="20140505 20:27:17.495"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:17.496" starttime="20140505 20:27:17.494"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:17.496" starttime="20140505 20:27:17.485"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:17.498" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:17.498" starttime="20140505 20:27:17.498"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:17.498" starttime="20140505 20:27:17.497"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:17.498" starttime="20140505 20:27:17.496"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:17.499" starttime="20140505 20:27:17.484"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetVar", "program": "LeabraTrain", "var_name": "max_epoch" }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:17.501" starttime="20140505 20:27:17.501"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:17.501" starttime="20140505 20:27:17.500"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:17.502" starttime="20140505 20:27:17.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:18.003" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:18.003" starttime="20140505 20:27:17.502"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:18.004" level="INFO">{"status":"OK", "result": 501}</msg>
<msg timestamp="20140505 20:27:18.004" level="INFO">${output} =  {"status":"OK", "result": 501} </msg>
<status status="PASS" endtime="20140505 20:27:18.004" starttime="20140505 20:27:18.004"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:18.006" starttime="20140505 20:27:18.005"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.006" starttime="20140505 20:27:18.004"></status>
</kw>
<msg timestamp="20140505 20:27:18.006" level="INFO">${output} =  {"status":"OK", "result": 501} </msg>
<status status="PASS" endtime="20140505 20:27:18.006" starttime="20140505 20:27:17.499"></status>
</kw>
<msg timestamp="20140505 20:27:18.007" level="INFO">${output} =  {"status":"OK", "result": 501} </msg>
<status status="PASS" endtime="20140505 20:27:18.007" starttime="20140505 20:27:17.499"></status>
</kw>
<kw type="kw" name="Status OK Equal Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>501</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:18.009" starttime="20140505 20:27:18.008"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:18.011" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:18.011" starttime="20140505 20:27:18.010"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:18.012" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:18.012" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:18.011" starttime="20140505 20:27:18.011"></status>
</kw>
<msg timestamp="20140505 20:27:18.012" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:18.012" starttime="20140505 20:27:18.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:18.013" starttime="20140505 20:27:18.012"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.013" starttime="20140505 20:27:18.009"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:18.015" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': 501}</msg>
<status status="FAIL" endtime="20140505 20:27:18.015" starttime="20140505 20:27:18.014"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.015" starttime="20140505 20:27:18.014"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.015" starttime="20140505 20:27:18.013"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:18.018" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': 501}</msg>
<status status="FAIL" endtime="20140505 20:27:18.018" starttime="20140505 20:27:18.017"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.018" starttime="20140505 20:27:18.016"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.018" starttime="20140505 20:27:18.016"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.018" starttime="20140505 20:27:18.008"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:18.019" starttime="20140505 20:27:18.019"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.019" starttime="20140505 20:27:18.007"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:18.019" critical="yes" starttime="20140505 20:27:16.974"></status>
</test>
<test id="s1-t16" name="SetVar String">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetVar", "program": "SaveWeights", "var_name": "fname", "var_value": "test string"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:18.023" starttime="20140505 20:27:18.023"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.023" starttime="20140505 20:27:18.022"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:18.024" starttime="20140505 20:27:18.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:18.525" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:18.526" starttime="20140505 20:27:18.024"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:18.526" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:18.527" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:18.527" starttime="20140505 20:27:18.526"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:18.528" starttime="20140505 20:27:18.528"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.528" starttime="20140505 20:27:18.527"></status>
</kw>
<msg timestamp="20140505 20:27:18.529" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:18.528" starttime="20140505 20:27:18.021"></status>
</kw>
<msg timestamp="20140505 20:27:18.529" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:18.529" starttime="20140505 20:27:18.021"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:18.531" starttime="20140505 20:27:18.531"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:18.533" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:18.533" starttime="20140505 20:27:18.533"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:18.534" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:18.534" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:18.534" starttime="20140505 20:27:18.533"></status>
</kw>
<msg timestamp="20140505 20:27:18.534" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:18.534" starttime="20140505 20:27:18.532"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:18.535" starttime="20140505 20:27:18.534"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.535" starttime="20140505 20:27:18.531"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:18.537" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:18.537" starttime="20140505 20:27:18.536"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.537" starttime="20140505 20:27:18.536"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.537" starttime="20140505 20:27:18.535"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:18.539" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:18.540" starttime="20140505 20:27:18.539"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.540" starttime="20140505 20:27:18.538"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.540" starttime="20140505 20:27:18.537"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.540" starttime="20140505 20:27:18.530"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:18.542" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:18.542" starttime="20140505 20:27:18.542"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.542" starttime="20140505 20:27:18.541"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.543" starttime="20140505 20:27:18.540"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.544" starttime="20140505 20:27:18.529"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetVar", "program": "SaveWeights", "var_name": "fname" }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:18.546" starttime="20140505 20:27:18.546"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:18.546" starttime="20140505 20:27:18.545"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:18.547" starttime="20140505 20:27:18.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:19.049" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:19.049" starttime="20140505 20:27:18.547"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:19.050" level="INFO">{"status":"OK", "result": "test string" }</msg>
<msg timestamp="20140505 20:27:19.050" level="INFO">${output} =  {"status":"OK", "result": "test string" }</msg>
<status status="PASS" endtime="20140505 20:27:19.050" starttime="20140505 20:27:19.049"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:19.052" starttime="20140505 20:27:19.052"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.053" starttime="20140505 20:27:19.051"></status>
</kw>
<msg timestamp="20140505 20:27:19.053" level="INFO">${output} =  {"status":"OK", "result": "test string" }</msg>
<status status="PASS" endtime="20140505 20:27:19.053" starttime="20140505 20:27:18.545"></status>
</kw>
<msg timestamp="20140505 20:27:19.054" level="INFO">${output} =  {"status":"OK", "result": "test string" }</msg>
<status status="PASS" endtime="20140505 20:27:19.054" starttime="20140505 20:27:18.544"></status>
</kw>
<kw type="kw" name="Status OK Match Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>test string</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:19.057" starttime="20140505 20:27:19.057"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:19.060" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:19.060" starttime="20140505 20:27:19.060"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:19.061" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:19.061" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:19.061" starttime="20140505 20:27:19.061"></status>
</kw>
<msg timestamp="20140505 20:27:19.062" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:19.061" starttime="20140505 20:27:19.059"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:19.062" starttime="20140505 20:27:19.062"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.062" starttime="20140505 20:27:19.057"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:19.066" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': u'test string'}</msg>
<status status="FAIL" endtime="20140505 20:27:19.066" starttime="20140505 20:27:19.065"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.066" starttime="20140505 20:27:19.064"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.067" starttime="20140505 20:27:19.062"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:19.068" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': u'test string'}</msg>
<status status="FAIL" endtime="20140505 20:27:19.068" starttime="20140505 20:27:19.068"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.069" starttime="20140505 20:27:19.067"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.069" starttime="20140505 20:27:19.067"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.069" starttime="20140505 20:27:19.055"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:19.071" level="INFO">${value} = "test string"</msg>
<status status="PASS" endtime="20140505 20:27:19.071" starttime="20140505 20:27:19.071"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:19.072" level="INFO">${match} = "test string"</msg>
<msg timestamp="20140505 20:27:19.072" level="INFO">${output} = test string</msg>
<status status="PASS" endtime="20140505 20:27:19.072" starttime="20140505 20:27:19.071"></status>
</kw>
<msg timestamp="20140505 20:27:19.072" level="INFO">${value} = test string</msg>
<status status="PASS" endtime="20140505 20:27:19.072" starttime="20140505 20:27:19.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:19.073" starttime="20140505 20:27:19.072"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.073" starttime="20140505 20:27:19.069"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.073" starttime="20140505 20:27:19.054"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:19.073" critical="yes" starttime="20140505 20:27:18.020"></status>
</test>
<test id="s1-t17" name="SetVar Real">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetVar", "program": "LeabraTrain", "var_name": "err_stopcrit", "var_value": 3.14}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:19.077" starttime="20140505 20:27:19.077"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.077" starttime="20140505 20:27:19.076"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:19.078" starttime="20140505 20:27:19.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:19.579" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:19.580" starttime="20140505 20:27:19.078"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:19.580" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:19.581" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:19.581" starttime="20140505 20:27:19.580"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:19.582" starttime="20140505 20:27:19.582"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.582" starttime="20140505 20:27:19.581"></status>
</kw>
<msg timestamp="20140505 20:27:19.583" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:19.583" starttime="20140505 20:27:19.075"></status>
</kw>
<msg timestamp="20140505 20:27:19.583" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:19.583" starttime="20140505 20:27:19.075"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:19.585" starttime="20140505 20:27:19.585"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:19.587" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:19.587" starttime="20140505 20:27:19.587"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:19.588" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:19.588" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:19.588" starttime="20140505 20:27:19.587"></status>
</kw>
<msg timestamp="20140505 20:27:19.588" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:19.588" starttime="20140505 20:27:19.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:19.589" starttime="20140505 20:27:19.589"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.589" starttime="20140505 20:27:19.585"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:19.591" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:19.591" starttime="20140505 20:27:19.591"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.592" starttime="20140505 20:27:19.590"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.592" starttime="20140505 20:27:19.589"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:19.594" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:19.594" starttime="20140505 20:27:19.593"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.594" starttime="20140505 20:27:19.593"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.594" starttime="20140505 20:27:19.592"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.594" starttime="20140505 20:27:19.584"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:19.596" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:19.596" starttime="20140505 20:27:19.596"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.596" starttime="20140505 20:27:19.595"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.597" starttime="20140505 20:27:19.595"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.597" starttime="20140505 20:27:19.583"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetVar", "program": "LeabraTrain", "var_name": "err_stopcrit" }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:19.599" starttime="20140505 20:27:19.599"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:19.599" starttime="20140505 20:27:19.598"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:19.600" starttime="20140505 20:27:19.600"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:20.101" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:20.102" starttime="20140505 20:27:19.600"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:20.103" level="INFO">{"status":"OK", "result": 3.14}</msg>
<msg timestamp="20140505 20:27:20.103" level="INFO">${output} =  {"status":"OK", "result": 3.14} </msg>
<status status="PASS" endtime="20140505 20:27:20.103" starttime="20140505 20:27:20.102"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:20.104" starttime="20140505 20:27:20.104"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.104" starttime="20140505 20:27:20.103"></status>
</kw>
<msg timestamp="20140505 20:27:20.105" level="INFO">${output} =  {"status":"OK", "result": 3.14} </msg>
<status status="PASS" endtime="20140505 20:27:20.105" starttime="20140505 20:27:19.597"></status>
</kw>
<msg timestamp="20140505 20:27:20.105" level="INFO">${output} =  {"status":"OK", "result": 3.14} </msg>
<status status="PASS" endtime="20140505 20:27:20.105" starttime="20140505 20:27:19.597"></status>
</kw>
<kw type="kw" name="Status OK Equal Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>3.14</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:20.107" starttime="20140505 20:27:20.107"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:20.109" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:20.109" starttime="20140505 20:27:20.109"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:20.110" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:20.110" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:20.110" starttime="20140505 20:27:20.109"></status>
</kw>
<msg timestamp="20140505 20:27:20.110" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:20.110" starttime="20140505 20:27:20.108"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:20.111" starttime="20140505 20:27:20.111"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.111" starttime="20140505 20:27:20.107"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:20.113" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': 3.14}</msg>
<status status="FAIL" endtime="20140505 20:27:20.113" starttime="20140505 20:27:20.112"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.113" starttime="20140505 20:27:20.112"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.114" starttime="20140505 20:27:20.111"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:20.115" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': 3.14}</msg>
<status status="FAIL" endtime="20140505 20:27:20.116" starttime="20140505 20:27:20.115"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.116" starttime="20140505 20:27:20.115"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.116" starttime="20140505 20:27:20.114"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.116" starttime="20140505 20:27:20.106"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:20.117" starttime="20140505 20:27:20.116"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.117" starttime="20140505 20:27:20.105"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:20.117" critical="yes" starttime="20140505 20:27:19.074"></status>
</test>
<test id="s1-t18" name="SetVar Boolean Arg">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetVar", "program": "LeabraTrain", "var_name": "no_prompts", "var_value": true}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:20.121" starttime="20140505 20:27:20.120"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.121" starttime="20140505 20:27:20.120"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:20.122" starttime="20140505 20:27:20.121"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:20.623" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:20.623" starttime="20140505 20:27:20.122"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:20.624" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:20.624" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:20.624" starttime="20140505 20:27:20.624"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:20.626" starttime="20140505 20:27:20.625"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.626" starttime="20140505 20:27:20.625"></status>
</kw>
<msg timestamp="20140505 20:27:20.626" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:20.626" starttime="20140505 20:27:20.119"></status>
</kw>
<msg timestamp="20140505 20:27:20.626" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:20.626" starttime="20140505 20:27:20.118"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:20.629" starttime="20140505 20:27:20.628"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:20.631" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:20.631" starttime="20140505 20:27:20.630"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:20.632" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:20.632" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:20.631" starttime="20140505 20:27:20.631"></status>
</kw>
<msg timestamp="20140505 20:27:20.632" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:20.632" starttime="20140505 20:27:20.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:20.633" starttime="20140505 20:27:20.632"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.633" starttime="20140505 20:27:20.629"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:20.635" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:20.635" starttime="20140505 20:27:20.634"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.635" starttime="20140505 20:27:20.634"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.635" starttime="20140505 20:27:20.633"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:20.637" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:20.638" starttime="20140505 20:27:20.637"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.638" starttime="20140505 20:27:20.636"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.638" starttime="20140505 20:27:20.636"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.638" starttime="20140505 20:27:20.627"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:20.640" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:20.640" starttime="20140505 20:27:20.639"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.640" starttime="20140505 20:27:20.639"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.640" starttime="20140505 20:27:20.638"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.640" starttime="20140505 20:27:20.627"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetVar", "program": "LeabraTrain", "var_name": "no_prompts" }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:20.643" starttime="20140505 20:27:20.643"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:20.643" starttime="20140505 20:27:20.642"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:20.644" starttime="20140505 20:27:20.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:21.146" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:21.146" starttime="20140505 20:27:20.645"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:21.147" level="INFO">{"status":"OK", "result": true}</msg>
<msg timestamp="20140505 20:27:21.147" level="INFO">${output} =  {"status":"OK", "result": true} </msg>
<status status="PASS" endtime="20140505 20:27:21.147" starttime="20140505 20:27:21.146"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:21.149" starttime="20140505 20:27:21.148"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.149" starttime="20140505 20:27:21.147"></status>
</kw>
<msg timestamp="20140505 20:27:21.149" level="INFO">${output} =  {"status":"OK", "result": true} </msg>
<status status="PASS" endtime="20140505 20:27:21.149" starttime="20140505 20:27:20.641"></status>
</kw>
<msg timestamp="20140505 20:27:21.149" level="INFO">${output} =  {"status":"OK", "result": true} </msg>
<status status="PASS" endtime="20140505 20:27:21.149" starttime="20140505 20:27:20.641"></status>
</kw>
<kw type="kw" name="Status OK Equal Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>true</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:21.151" starttime="20140505 20:27:21.151"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:21.154" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:21.153" starttime="20140505 20:27:21.153"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:21.154" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:21.154" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:21.154" starttime="20140505 20:27:21.154"></status>
</kw>
<msg timestamp="20140505 20:27:21.155" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:21.155" starttime="20140505 20:27:21.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:21.155" starttime="20140505 20:27:21.155"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.155" starttime="20140505 20:27:21.152"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:21.157" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': True}</msg>
<status status="FAIL" endtime="20140505 20:27:21.158" starttime="20140505 20:27:21.157"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.158" starttime="20140505 20:27:21.156"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.158" starttime="20140505 20:27:21.156"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:21.160" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': True}</msg>
<status status="FAIL" endtime="20140505 20:27:21.160" starttime="20140505 20:27:21.159"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.160" starttime="20140505 20:27:21.159"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.160" starttime="20140505 20:27:21.158"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.160" starttime="20140505 20:27:21.150"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:21.161" starttime="20140505 20:27:21.160"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.161" starttime="20140505 20:27:21.150"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetVar", "program": "LeabraTrain", "var_name": "no_prompts", "var_value": false}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:21.165" starttime="20140505 20:27:21.164"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.165" starttime="20140505 20:27:21.162"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:21.166" starttime="20140505 20:27:21.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:21.667" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:21.667" starttime="20140505 20:27:21.166"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:21.668" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:21.669" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:21.669" starttime="20140505 20:27:21.668"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:21.670" starttime="20140505 20:27:21.670"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.671" starttime="20140505 20:27:21.669"></status>
</kw>
<msg timestamp="20140505 20:27:21.671" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:21.671" starttime="20140505 20:27:21.162"></status>
</kw>
<msg timestamp="20140505 20:27:21.671" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:21.671" starttime="20140505 20:27:21.161"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:21.673" starttime="20140505 20:27:21.673"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:21.676" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:21.676" starttime="20140505 20:27:21.675"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:21.677" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:21.677" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:21.677" starttime="20140505 20:27:21.676"></status>
</kw>
<msg timestamp="20140505 20:27:21.677" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:21.677" starttime="20140505 20:27:21.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:21.678" starttime="20140505 20:27:21.678"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.678" starttime="20140505 20:27:21.674"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:21.680" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:21.680" starttime="20140505 20:27:21.680"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.680" starttime="20140505 20:27:21.679"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.681" starttime="20140505 20:27:21.678"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:21.684" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:21.684" starttime="20140505 20:27:21.682"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.684" starttime="20140505 20:27:21.682"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.684" starttime="20140505 20:27:21.681"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.684" starttime="20140505 20:27:21.672"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:21.686" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:21.686" starttime="20140505 20:27:21.686"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.687" starttime="20140505 20:27:21.685"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.687" starttime="20140505 20:27:21.684"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.687" starttime="20140505 20:27:21.672"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetVar", "program": "LeabraTrain", "var_name": "no_prompts" }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:21.690" starttime="20140505 20:27:21.689"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:21.690" starttime="20140505 20:27:21.689"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:21.691" starttime="20140505 20:27:21.690"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:22.192" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:22.193" starttime="20140505 20:27:21.691"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:22.194" level="INFO">{"status":"OK", "result": false}</msg>
<msg timestamp="20140505 20:27:22.194" level="INFO">${output} =  {"status":"OK", "result": false} </msg>
<status status="PASS" endtime="20140505 20:27:22.194" starttime="20140505 20:27:22.193"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.195" starttime="20140505 20:27:22.195"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.195" starttime="20140505 20:27:22.194"></status>
</kw>
<msg timestamp="20140505 20:27:22.196" level="INFO">${output} =  {"status":"OK", "result": false} </msg>
<status status="PASS" endtime="20140505 20:27:22.196" starttime="20140505 20:27:21.688"></status>
</kw>
<msg timestamp="20140505 20:27:22.196" level="INFO">${output} =  {"status":"OK", "result": false} </msg>
<status status="PASS" endtime="20140505 20:27:22.196" starttime="20140505 20:27:21.687"></status>
</kw>
<kw type="kw" name="Status OK Equal Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>false</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.198" starttime="20140505 20:27:22.198"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:22.200" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:22.200" starttime="20140505 20:27:22.200"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:22.201" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:22.201" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:22.201" starttime="20140505 20:27:22.201"></status>
</kw>
<msg timestamp="20140505 20:27:22.202" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:22.201" starttime="20140505 20:27:22.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.202" starttime="20140505 20:27:22.202"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.202" starttime="20140505 20:27:22.198"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:22.206" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': False}</msg>
<status status="FAIL" endtime="20140505 20:27:22.206" starttime="20140505 20:27:22.205"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.206" starttime="20140505 20:27:22.204"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.206" starttime="20140505 20:27:22.203"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:22.209" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': False}</msg>
<status status="FAIL" endtime="20140505 20:27:22.209" starttime="20140505 20:27:22.208"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.209" starttime="20140505 20:27:22.207"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.209" starttime="20140505 20:27:22.206"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.209" starttime="20140505 20:27:22.197"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.211" starttime="20140505 20:27:22.210"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.211" starttime="20140505 20:27:22.196"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:22.211" critical="yes" starttime="20140505 20:27:20.118"></status>
</test>
<test id="s1-t19" name="SetVar Invalid Program Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetVar", "program": "DoesNotExist", "var_name": "err_stopcrit", "var_value": 3.14}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.215" starttime="20140505 20:27:22.215"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.216" starttime="20140505 20:27:22.214"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.217" starttime="20140505 20:27:22.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:22.718" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:22.718" starttime="20140505 20:27:22.217"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:22.719" level="INFO">{
	"status" : "ERROR",
	"message" : "Program 'DoesNotExist' not found",
	"error" : 5
}</msg>
<msg timestamp="20140505 20:27:22.719" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Program 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:22.719" starttime="20140505 20:27:22.719"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.721" starttime="20140505 20:27:22.720"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.721" starttime="20140505 20:27:22.720"></status>
</kw>
<msg timestamp="20140505 20:27:22.721" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Program 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:22.721" starttime="20140505 20:27:22.214"></status>
</kw>
<msg timestamp="20140505 20:27:22.722" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Program 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:22.722" starttime="20140505 20:27:22.213"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>5</arg>
<arg>Program 'DoesNotExist' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.724" starttime="20140505 20:27:22.724"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:22.726" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:22.726" starttime="20140505 20:27:22.726"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:22.727" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:22.727" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:22.727" starttime="20140505 20:27:22.726"></status>
</kw>
<msg timestamp="20140505 20:27:22.727" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:22.727" starttime="20140505 20:27:22.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.728" starttime="20140505 20:27:22.727"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.728" starttime="20140505 20:27:22.724"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:22.730" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Program 'DoesNotExist' not found", u'error': 5}</msg>
<status status="FAIL" endtime="20140505 20:27:22.730" starttime="20140505 20:27:22.729"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.730" starttime="20140505 20:27:22.729"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.730" starttime="20140505 20:27:22.728"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.731" starttime="20140505 20:27:22.723"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.731" starttime="20140505 20:27:22.731"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:22.734" level="INFO">${value} = "Program 'DoesNotExist' not found"</msg>
<status status="PASS" endtime="20140505 20:27:22.734" starttime="20140505 20:27:22.734"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:22.735" level="INFO">${match} = "Program 'DoesNotExist' not found"</msg>
<msg timestamp="20140505 20:27:22.735" level="INFO">${output} = Program 'DoesNotExist' not found</msg>
<status status="PASS" endtime="20140505 20:27:22.735" starttime="20140505 20:27:22.734"></status>
</kw>
<msg timestamp="20140505 20:27:22.735" level="INFO">${value} = Program 'DoesNotExist' not found</msg>
<status status="PASS" endtime="20140505 20:27:22.735" starttime="20140505 20:27:22.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.736" starttime="20140505 20:27:22.735"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.736" starttime="20140505 20:27:22.731"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.736" starttime="20140505 20:27:22.722"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:22.736" critical="yes" starttime="20140505 20:27:22.212"></status>
</test>
<test id="s1-t20" name="GetVar Invalid Program Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetVar", "program": "DoesNotExist", "var_name": "err_stopcrit"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.740" starttime="20140505 20:27:22.740"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:22.740" starttime="20140505 20:27:22.739"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:22.741" starttime="20140505 20:27:22.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:23.242" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:23.243" starttime="20140505 20:27:22.741"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:23.244" level="INFO">{
	"status" : "ERROR",
	"message" : "Program 'DoesNotExist' not found",
	"error" : 5
}</msg>
<msg timestamp="20140505 20:27:23.244" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Program 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:23.244" starttime="20140505 20:27:23.243"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.245" starttime="20140505 20:27:23.245"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.245" starttime="20140505 20:27:23.244"></status>
</kw>
<msg timestamp="20140505 20:27:23.246" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Program 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:23.246" starttime="20140505 20:27:22.738"></status>
</kw>
<msg timestamp="20140505 20:27:23.246" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Program 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:23.246" starttime="20140505 20:27:22.738"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>5</arg>
<arg>Program 'DoesNotExist' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.248" starttime="20140505 20:27:23.248"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:23.250" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:23.250" starttime="20140505 20:27:23.250"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:23.251" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:23.251" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:23.251" starttime="20140505 20:27:23.251"></status>
</kw>
<msg timestamp="20140505 20:27:23.251" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:23.251" starttime="20140505 20:27:23.249"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.252" starttime="20140505 20:27:23.252"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.252" starttime="20140505 20:27:23.248"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:23.254" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Program 'DoesNotExist' not found", u'error': 5}</msg>
<status status="FAIL" endtime="20140505 20:27:23.254" starttime="20140505 20:27:23.253"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.254" starttime="20140505 20:27:23.253"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.254" starttime="20140505 20:27:23.252"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.255" starttime="20140505 20:27:23.247"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.255" starttime="20140505 20:27:23.255"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:23.258" level="INFO">${value} = "Program 'DoesNotExist' not found"</msg>
<status status="PASS" endtime="20140505 20:27:23.258" starttime="20140505 20:27:23.257"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:23.258" level="INFO">${match} = "Program 'DoesNotExist' not found"</msg>
<msg timestamp="20140505 20:27:23.259" level="INFO">${output} = Program 'DoesNotExist' not found</msg>
<status status="PASS" endtime="20140505 20:27:23.258" starttime="20140505 20:27:23.258"></status>
</kw>
<msg timestamp="20140505 20:27:23.259" level="INFO">${value} = Program 'DoesNotExist' not found</msg>
<status status="PASS" endtime="20140505 20:27:23.259" starttime="20140505 20:27:23.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.259" starttime="20140505 20:27:23.259"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.260" starttime="20140505 20:27:23.255"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.260" starttime="20140505 20:27:23.246"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:23.260" critical="yes" starttime="20140505 20:27:22.737"></status>
</test>
<test id="s1-t21" name="SetVar Invalid Variable Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetVar", "program": "LeabraTrain", "var_name": "DoesNotExist", "var_value": 3.14}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.264" starttime="20140505 20:27:23.263"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.264" starttime="20140505 20:27:23.263"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.264" starttime="20140505 20:27:23.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:23.766" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:23.766" starttime="20140505 20:27:23.265"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:23.767" level="INFO">{
	"status" : "ERROR",
	"message" : "Var 'DoesNotExist' not found",
	"error" : 5
}</msg>
<msg timestamp="20140505 20:27:23.767" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Var 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:23.767" starttime="20140505 20:27:23.766"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.769" starttime="20140505 20:27:23.768"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.769" starttime="20140505 20:27:23.767"></status>
</kw>
<msg timestamp="20140505 20:27:23.769" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Var 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:23.769" starttime="20140505 20:27:23.262"></status>
</kw>
<msg timestamp="20140505 20:27:23.770" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Var 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:23.770" starttime="20140505 20:27:23.261"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>5</arg>
<arg>Var 'DoesNotExist' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.772" starttime="20140505 20:27:23.771"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:23.774" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:23.774" starttime="20140505 20:27:23.773"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:23.775" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:23.775" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:23.774" starttime="20140505 20:27:23.774"></status>
</kw>
<msg timestamp="20140505 20:27:23.775" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:23.775" starttime="20140505 20:27:23.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.776" starttime="20140505 20:27:23.775"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.776" starttime="20140505 20:27:23.772"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:23.778" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Var 'DoesNotExist' not found", u'error': 5}</msg>
<status status="FAIL" endtime="20140505 20:27:23.778" starttime="20140505 20:27:23.777"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.778" starttime="20140505 20:27:23.777"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.778" starttime="20140505 20:27:23.776"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.779" starttime="20140505 20:27:23.771"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.779" starttime="20140505 20:27:23.779"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:23.781" level="INFO">${value} = "Var 'DoesNotExist' not found"</msg>
<status status="PASS" endtime="20140505 20:27:23.781" starttime="20140505 20:27:23.781"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:23.782" level="INFO">${match} = "Var 'DoesNotExist' not found"</msg>
<msg timestamp="20140505 20:27:23.782" level="INFO">${output} = Var 'DoesNotExist' not found</msg>
<status status="PASS" endtime="20140505 20:27:23.782" starttime="20140505 20:27:23.782"></status>
</kw>
<msg timestamp="20140505 20:27:23.783" level="INFO">${value} = Var 'DoesNotExist' not found</msg>
<status status="PASS" endtime="20140505 20:27:23.782" starttime="20140505 20:27:23.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.784" starttime="20140505 20:27:23.784"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.784" starttime="20140505 20:27:23.779"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.785" starttime="20140505 20:27:23.770"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:23.785" critical="yes" starttime="20140505 20:27:23.261"></status>
</test>
<test id="s1-t22" name="GetVar Invalid Variable Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetVar", "program": "LeabraTrain", "var_name": "DoesNotExist"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.788" starttime="20140505 20:27:23.788"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:23.788" starttime="20140505 20:27:23.787"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:23.789" starttime="20140505 20:27:23.789"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:24.291" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:24.291" starttime="20140505 20:27:23.790"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:24.292" level="INFO">{
	"status" : "ERROR",
	"message" : "Var 'DoesNotExist' not found",
	"error" : 5
}</msg>
<msg timestamp="20140505 20:27:24.292" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Var 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:24.292" starttime="20140505 20:27:24.291"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.294" starttime="20140505 20:27:24.293"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.294" starttime="20140505 20:27:24.292"></status>
</kw>
<msg timestamp="20140505 20:27:24.294" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Var 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:24.294" starttime="20140505 20:27:23.787"></status>
</kw>
<msg timestamp="20140505 20:27:24.295" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Var 'DoesNotExist' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:24.294" starttime="20140505 20:27:23.786"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>5</arg>
<arg>Var 'DoesNotExist' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.297" starttime="20140505 20:27:24.296"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:24.299" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:24.299" starttime="20140505 20:27:24.298"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:24.299" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:24.300" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:24.299" starttime="20140505 20:27:24.299"></status>
</kw>
<msg timestamp="20140505 20:27:24.300" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:24.300" starttime="20140505 20:27:24.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.300" starttime="20140505 20:27:24.300"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.301" starttime="20140505 20:27:24.297"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:24.303" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Var 'DoesNotExist' not found", u'error': 5}</msg>
<status status="FAIL" endtime="20140505 20:27:24.304" starttime="20140505 20:27:24.302"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.304" starttime="20140505 20:27:24.302"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.304" starttime="20140505 20:27:24.301"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.304" starttime="20140505 20:27:24.295"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.305" starttime="20140505 20:27:24.304"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:24.307" level="INFO">${value} = "Var 'DoesNotExist' not found"</msg>
<status status="PASS" endtime="20140505 20:27:24.307" starttime="20140505 20:27:24.307"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:24.308" level="INFO">${match} = "Var 'DoesNotExist' not found"</msg>
<msg timestamp="20140505 20:27:24.308" level="INFO">${output} = Var 'DoesNotExist' not found</msg>
<status status="PASS" endtime="20140505 20:27:24.308" starttime="20140505 20:27:24.307"></status>
</kw>
<msg timestamp="20140505 20:27:24.308" level="INFO">${value} = Var 'DoesNotExist' not found</msg>
<status status="PASS" endtime="20140505 20:27:24.308" starttime="20140505 20:27:24.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.309" starttime="20140505 20:27:24.308"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.309" starttime="20140505 20:27:24.305"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.309" starttime="20140505 20:27:24.295"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:24.309" critical="yes" starttime="20140505 20:27:23.785"></status>
</test>
<test id="s1-t23" name="SetVar Missing Value Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetVar", "program": "LeabraTrain", "var_name": "err_stopcrit"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.313" starttime="20140505 20:27:24.313"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.313" starttime="20140505 20:27:24.312"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.314" starttime="20140505 20:27:24.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:24.815" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:24.815" starttime="20140505 20:27:24.314"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:24.816" level="INFO">{
	"status" : "ERROR",
	"message" : "var_value missing",
	"error" : 5
}</msg>
<msg timestamp="20140505 20:27:24.817" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "var_value missing",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:24.816" starttime="20140505 20:27:24.816"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.818" starttime="20140505 20:27:24.818"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.818" starttime="20140505 20:27:24.817"></status>
</kw>
<msg timestamp="20140505 20:27:24.818" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "var_value missing",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:24.818" starttime="20140505 20:27:24.311"></status>
</kw>
<msg timestamp="20140505 20:27:24.819" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "var_value missing",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:24.819" starttime="20140505 20:27:24.311"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>5</arg>
<arg>var_value missing</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.823" starttime="20140505 20:27:24.822"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:24.825" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:24.825" starttime="20140505 20:27:24.824"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:24.826" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:24.826" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:24.826" starttime="20140505 20:27:24.825"></status>
</kw>
<msg timestamp="20140505 20:27:24.826" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:24.826" starttime="20140505 20:27:24.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.827" starttime="20140505 20:27:24.826"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.827" starttime="20140505 20:27:24.823"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:24.829" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'var_value missing', u'error': 5}</msg>
<status status="FAIL" endtime="20140505 20:27:24.829" starttime="20140505 20:27:24.828"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.829" starttime="20140505 20:27:24.828"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.829" starttime="20140505 20:27:24.827"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.829" starttime="20140505 20:27:24.820"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.830" starttime="20140505 20:27:24.830"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:24.832" level="INFO">${value} = "var_value missing"</msg>
<status status="PASS" endtime="20140505 20:27:24.832" starttime="20140505 20:27:24.832"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:24.833" level="INFO">${match} = "var_value missing"</msg>
<msg timestamp="20140505 20:27:24.833" level="INFO">${output} = var_value missing</msg>
<status status="PASS" endtime="20140505 20:27:24.833" starttime="20140505 20:27:24.832"></status>
</kw>
<msg timestamp="20140505 20:27:24.833" level="INFO">${value} = var_value missing</msg>
<status status="PASS" endtime="20140505 20:27:24.833" starttime="20140505 20:27:24.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.834" starttime="20140505 20:27:24.834"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.834" starttime="20140505 20:27:24.830"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.834" starttime="20140505 20:27:24.819"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:24.835" critical="yes" starttime="20140505 20:27:24.310"></status>
</test>
<test id="s1-t24" name="GetData Full Table">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.838" starttime="20140505 20:27:24.838"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:24.838" starttime="20140505 20:27:24.837"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:24.840" starttime="20140505 20:27:24.839"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.342" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:25.342" starttime="20140505 20:27:24.840"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:25.347" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"result" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"result" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 1],
					[1, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				]
			]
		}
	]
}
}</msg>
<msg timestamp="20140505 20:27:25.348" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"n...</msg>
<status status="PASS" endtime="20140505 20:27:25.348" starttime="20140505 20:27:25.342"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.350" starttime="20140505 20:27:25.349"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.350" starttime="20140505 20:27:25.348"></status>
</kw>
<msg timestamp="20140505 20:27:25.351" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"n...</msg>
<status status="PASS" endtime="20140505 20:27:25.350" starttime="20140505 20:27:24.836"></status>
</kw>
<msg timestamp="20140505 20:27:25.351" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"n...</msg>
<status status="PASS" endtime="20140505 20:27:25.351" starttime="20140505 20:27:24.836"></status>
</kw>
<kw type="kw" name="Status OK Has Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.354" starttime="20140505 20:27:25.353"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.357" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:25.357" starttime="20140505 20:27:25.356"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.358" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:25.358" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:25.358" starttime="20140505 20:27:25.357"></status>
</kw>
<msg timestamp="20140505 20:27:25.358" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:25.358" starttime="20140505 20:27:25.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.359" starttime="20140505 20:27:25.359"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.359" starttime="20140505 20:27:25.354"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.363" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [u'checks', u'mitvert', u'midhoriz', u'rdiag', u'ldiag', u'random'], u'type': u'String', u'name': u'Name', u'matrix': False}, {u'result': [[[1, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 1]], [[0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]], [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]], [[1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 1], [0, 0, 0, 0, 0]]], u'dimensions': [5, 5], u'type': u'float', u'name': u'Input', u'matrix': True}, {u'result': [[[1, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 1]], [[0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]], [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]], [[1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 1], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0]]], u'dimensions': [5, 5], u'type': u'float', u'name': u'Output', u'matrix': True}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:25.363" starttime="20140505 20:27:25.361"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.363" starttime="20140505 20:27:25.360"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.363" starttime="20140505 20:27:25.360"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.366" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [u'checks', u'mitvert', u'midhoriz', u'rdiag', u'ldiag', u'random'], u'type': u'String', u'name': u'Name', u'matrix': False}, {u'result': [[[1, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 1]], [[0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]], [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]], [[1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 1], [0, 0, 0, 0, 0]]], u'dimensions': [5, 5], u'type': u'float', u'name': u'Input', u'matrix': True}, {u'result': [[[1, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 1]], [[0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]], [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]], [[1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 1], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0]]], u'dimensions': [5, 5], u'type': u'float', u'name': u'Output', u'matrix': True}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:25.366" starttime="20140505 20:27:25.365"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.366" starttime="20140505 20:27:25.364"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.366" starttime="20140505 20:27:25.363"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.366" starttime="20140505 20:27:25.352"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.367" starttime="20140505 20:27:25.367"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.368" starttime="20140505 20:27:25.351"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/name</arg>
<arg>Name</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.371" level="INFO">${value} = "Name"</msg>
<status status="PASS" endtime="20140505 20:27:25.371" starttime="20140505 20:27:25.370"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.372" level="INFO">${match} = "Name"</msg>
<msg timestamp="20140505 20:27:25.372" level="INFO">${output} = Name</msg>
<status status="PASS" endtime="20140505 20:27:25.371" starttime="20140505 20:27:25.371"></status>
</kw>
<msg timestamp="20140505 20:27:25.372" level="INFO">${value} = Name</msg>
<status status="PASS" endtime="20140505 20:27:25.372" starttime="20140505 20:27:25.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.373" starttime="20140505 20:27:25.372"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.373" starttime="20140505 20:27:25.368"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/name</arg>
<arg>Input</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.377" level="INFO">${value} = "Input"</msg>
<status status="PASS" endtime="20140505 20:27:25.376" starttime="20140505 20:27:25.376"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.377" level="INFO">${match} = "Input"</msg>
<msg timestamp="20140505 20:27:25.378" level="INFO">${output} = Input</msg>
<status status="PASS" endtime="20140505 20:27:25.377" starttime="20140505 20:27:25.377"></status>
</kw>
<msg timestamp="20140505 20:27:25.379" level="INFO">${value} = Input</msg>
<status status="PASS" endtime="20140505 20:27:25.379" starttime="20140505 20:27:25.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.380" starttime="20140505 20:27:25.379"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.380" starttime="20140505 20:27:25.374"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2/name</arg>
<arg>Output</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.383" level="INFO">${value} = "Output"</msg>
<status status="PASS" endtime="20140505 20:27:25.383" starttime="20140505 20:27:25.382"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.384" level="INFO">${match} = "Output"</msg>
<msg timestamp="20140505 20:27:25.384" level="INFO">${output} = Output</msg>
<status status="PASS" endtime="20140505 20:27:25.384" starttime="20140505 20:27:25.383"></status>
</kw>
<msg timestamp="20140505 20:27:25.384" level="INFO">${value} = Output</msg>
<status status="PASS" endtime="20140505 20:27:25.384" starttime="20140505 20:27:25.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.385" starttime="20140505 20:27:25.385"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.385" starttime="20140505 20:27:25.380"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/type</arg>
<arg>String</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.388" level="INFO">${value} = "String"</msg>
<status status="PASS" endtime="20140505 20:27:25.388" starttime="20140505 20:27:25.387"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.389" level="INFO">${match} = "String"</msg>
<msg timestamp="20140505 20:27:25.389" level="INFO">${output} = String</msg>
<status status="PASS" endtime="20140505 20:27:25.389" starttime="20140505 20:27:25.388"></status>
</kw>
<msg timestamp="20140505 20:27:25.390" level="INFO">${value} = String</msg>
<status status="PASS" endtime="20140505 20:27:25.389" starttime="20140505 20:27:25.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.390" starttime="20140505 20:27:25.390"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.391" starttime="20140505 20:27:25.386"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.394" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140505 20:27:25.393" starttime="20140505 20:27:25.393"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.394" level="INFO">${match} = "float"</msg>
<msg timestamp="20140505 20:27:25.394" level="INFO">${output} = float</msg>
<status status="PASS" endtime="20140505 20:27:25.394" starttime="20140505 20:27:25.394"></status>
</kw>
<msg timestamp="20140505 20:27:25.395" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140505 20:27:25.395" starttime="20140505 20:27:25.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.396" starttime="20140505 20:27:25.395"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.396" starttime="20140505 20:27:25.391"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.399" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140505 20:27:25.399" starttime="20140505 20:27:25.398"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.400" level="INFO">${match} = "float"</msg>
<msg timestamp="20140505 20:27:25.400" level="INFO">${output} = float</msg>
<status status="PASS" endtime="20140505 20:27:25.400" starttime="20140505 20:27:25.400"></status>
</kw>
<msg timestamp="20140505 20:27:25.400" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140505 20:27:25.400" starttime="20140505 20:27:25.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.401" starttime="20140505 20:27:25.401"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.401" starttime="20140505 20:27:25.396"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/matrix</arg>
<arg>false</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.402" starttime="20140505 20:27:25.401"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.404" starttime="20140505 20:27:25.403"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.405" starttime="20140505 20:27:25.404"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/0</arg>
<arg>checks</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.408" level="INFO">${value} = "checks"</msg>
<status status="PASS" endtime="20140505 20:27:25.408" starttime="20140505 20:27:25.407"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.409" level="INFO">${match} = "checks"</msg>
<msg timestamp="20140505 20:27:25.410" level="INFO">${output} = checks</msg>
<status status="PASS" endtime="20140505 20:27:25.409" starttime="20140505 20:27:25.408"></status>
</kw>
<msg timestamp="20140505 20:27:25.410" level="INFO">${value} = checks</msg>
<status status="PASS" endtime="20140505 20:27:25.410" starttime="20140505 20:27:25.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.411" starttime="20140505 20:27:25.410"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.411" starttime="20140505 20:27:25.405"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/1</arg>
<arg>mitvert</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.414" level="INFO">${value} = "mitvert"</msg>
<status status="PASS" endtime="20140505 20:27:25.414" starttime="20140505 20:27:25.413"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.415" level="INFO">${match} = "mitvert"</msg>
<msg timestamp="20140505 20:27:25.415" level="INFO">${output} = mitvert</msg>
<status status="PASS" endtime="20140505 20:27:25.415" starttime="20140505 20:27:25.414"></status>
</kw>
<msg timestamp="20140505 20:27:25.415" level="INFO">${value} = mitvert</msg>
<status status="PASS" endtime="20140505 20:27:25.415" starttime="20140505 20:27:25.412"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.416" starttime="20140505 20:27:25.416"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.416" starttime="20140505 20:27:25.411"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/2</arg>
<arg>midhoriz</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.419" level="INFO">${value} = "midhoriz"</msg>
<status status="PASS" endtime="20140505 20:27:25.419" starttime="20140505 20:27:25.418"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.419" level="INFO">${match} = "midhoriz"</msg>
<msg timestamp="20140505 20:27:25.419" level="INFO">${output} = midhoriz</msg>
<status status="PASS" endtime="20140505 20:27:25.419" starttime="20140505 20:27:25.419"></status>
</kw>
<msg timestamp="20140505 20:27:25.420" level="INFO">${value} = midhoriz</msg>
<status status="PASS" endtime="20140505 20:27:25.420" starttime="20140505 20:27:25.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.420" starttime="20140505 20:27:25.420"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.421" starttime="20140505 20:27:25.416"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/3</arg>
<arg>rdiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.424" level="INFO">${value} = "rdiag"</msg>
<status status="PASS" endtime="20140505 20:27:25.424" starttime="20140505 20:27:25.422"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.425" level="INFO">${match} = "rdiag"</msg>
<msg timestamp="20140505 20:27:25.425" level="INFO">${output} = rdiag</msg>
<status status="PASS" endtime="20140505 20:27:25.425" starttime="20140505 20:27:25.425"></status>
</kw>
<msg timestamp="20140505 20:27:25.425" level="INFO">${value} = rdiag</msg>
<status status="PASS" endtime="20140505 20:27:25.425" starttime="20140505 20:27:25.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.426" starttime="20140505 20:27:25.426"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.426" starttime="20140505 20:27:25.421"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/4</arg>
<arg>ldiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.429" level="INFO">${value} = "ldiag"</msg>
<status status="PASS" endtime="20140505 20:27:25.429" starttime="20140505 20:27:25.428"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.430" level="INFO">${match} = "ldiag"</msg>
<msg timestamp="20140505 20:27:25.430" level="INFO">${output} = ldiag</msg>
<status status="PASS" endtime="20140505 20:27:25.429" starttime="20140505 20:27:25.429"></status>
</kw>
<msg timestamp="20140505 20:27:25.430" level="INFO">${value} = ldiag</msg>
<status status="PASS" endtime="20140505 20:27:25.430" starttime="20140505 20:27:25.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.431" starttime="20140505 20:27:25.430"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.431" starttime="20140505 20:27:25.426"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/5</arg>
<arg>random</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.433" level="INFO">${value} = "random"</msg>
<status status="PASS" endtime="20140505 20:27:25.433" starttime="20140505 20:27:25.432"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.434" level="INFO">${match} = "random"</msg>
<msg timestamp="20140505 20:27:25.434" level="INFO">${output} = random</msg>
<status status="PASS" endtime="20140505 20:27:25.434" starttime="20140505 20:27:25.433"></status>
</kw>
<msg timestamp="20140505 20:27:25.434" level="INFO">${value} = random</msg>
<status status="PASS" endtime="20140505 20:27:25.434" starttime="20140505 20:27:25.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.435" starttime="20140505 20:27:25.435"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.435" starttime="20140505 20:27:25.431"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/result/0/0/0</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.436" starttime="20140505 20:27:25.436"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/result/0/1/2</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.437" starttime="20140505 20:27:25.437"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/result/0/2/2</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.438" starttime="20140505 20:27:25.438"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/result/2/2/2</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.439" starttime="20140505 20:27:25.439"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/result/2/1/0</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.440" starttime="20140505 20:27:25.440"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:25.441" critical="yes" starttime="20140505 20:27:24.835"></status>
</test>
<test id="s1-t25" name="GetData Column">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "column": "Name"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.445" starttime="20140505 20:27:25.445"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.445" starttime="20140505 20:27:25.444"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.446" starttime="20140505 20:27:25.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.948" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:25.948" starttime="20140505 20:27:25.447"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:25.949" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
}</msg>
<msg timestamp="20140505 20:27:25.949" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140505 20:27:25.949" starttime="20140505 20:27:25.948"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.951" starttime="20140505 20:27:25.951"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.951" starttime="20140505 20:27:25.950"></status>
</kw>
<msg timestamp="20140505 20:27:25.952" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140505 20:27:25.952" starttime="20140505 20:27:25.442"></status>
</kw>
<msg timestamp="20140505 20:27:25.952" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140505 20:27:25.952" starttime="20140505 20:27:25.442"></status>
</kw>
<kw type="kw" name="Status OK Has Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.954" starttime="20140505 20:27:25.954"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.957" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:25.957" starttime="20140505 20:27:25.956"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.958" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:25.958" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:25.958" starttime="20140505 20:27:25.957"></status>
</kw>
<msg timestamp="20140505 20:27:25.958" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:25.958" starttime="20140505 20:27:25.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.959" starttime="20140505 20:27:25.958"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.959" starttime="20140505 20:27:25.955"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.961" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [u'checks', u'mitvert', u'midhoriz', u'rdiag', u'ldiag', u'random'], u'type': u'String', u'name': u'Name', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:25.961" starttime="20140505 20:27:25.961"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.961" starttime="20140505 20:27:25.960"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.962" starttime="20140505 20:27:25.959"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.965" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [u'checks', u'mitvert', u'midhoriz', u'rdiag', u'ldiag', u'random'], u'type': u'String', u'name': u'Name', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:25.965" starttime="20140505 20:27:25.964"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.965" starttime="20140505 20:27:25.964"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.965" starttime="20140505 20:27:25.962"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.965" starttime="20140505 20:27:25.953"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.966" starttime="20140505 20:27:25.966"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.966" starttime="20140505 20:27:25.952"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/name</arg>
<arg>Name</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.969" level="INFO">${value} = "Name"</msg>
<status status="PASS" endtime="20140505 20:27:25.969" starttime="20140505 20:27:25.968"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.970" level="INFO">${match} = "Name"</msg>
<msg timestamp="20140505 20:27:25.970" level="INFO">${output} = Name</msg>
<status status="PASS" endtime="20140505 20:27:25.970" starttime="20140505 20:27:25.969"></status>
</kw>
<msg timestamp="20140505 20:27:25.970" level="INFO">${value} = Name</msg>
<status status="PASS" endtime="20140505 20:27:25.970" starttime="20140505 20:27:25.967"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.971" starttime="20140505 20:27:25.970"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.971" starttime="20140505 20:27:25.967"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/0</arg>
<arg>checks</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.974" level="INFO">${value} = "checks"</msg>
<status status="PASS" endtime="20140505 20:27:25.973" starttime="20140505 20:27:25.973"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.974" level="INFO">${match} = "checks"</msg>
<msg timestamp="20140505 20:27:25.974" level="INFO">${output} = checks</msg>
<status status="PASS" endtime="20140505 20:27:25.974" starttime="20140505 20:27:25.974"></status>
</kw>
<msg timestamp="20140505 20:27:25.975" level="INFO">${value} = checks</msg>
<status status="PASS" endtime="20140505 20:27:25.975" starttime="20140505 20:27:25.972"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.975" starttime="20140505 20:27:25.975"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.975" starttime="20140505 20:27:25.971"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/1</arg>
<arg>mitvert</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.978" level="INFO">${value} = "mitvert"</msg>
<status status="PASS" endtime="20140505 20:27:25.978" starttime="20140505 20:27:25.977"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.979" level="INFO">${match} = "mitvert"</msg>
<msg timestamp="20140505 20:27:25.979" level="INFO">${output} = mitvert</msg>
<status status="PASS" endtime="20140505 20:27:25.979" starttime="20140505 20:27:25.978"></status>
</kw>
<msg timestamp="20140505 20:27:25.979" level="INFO">${value} = mitvert</msg>
<status status="PASS" endtime="20140505 20:27:25.979" starttime="20140505 20:27:25.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.980" starttime="20140505 20:27:25.979"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.980" starttime="20140505 20:27:25.976"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/2</arg>
<arg>midhoriz</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.984" level="INFO">${value} = "midhoriz"</msg>
<status status="PASS" endtime="20140505 20:27:25.984" starttime="20140505 20:27:25.982"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.985" level="INFO">${match} = "midhoriz"</msg>
<msg timestamp="20140505 20:27:25.985" level="INFO">${output} = midhoriz</msg>
<status status="PASS" endtime="20140505 20:27:25.984" starttime="20140505 20:27:25.984"></status>
</kw>
<msg timestamp="20140505 20:27:25.985" level="INFO">${value} = midhoriz</msg>
<status status="PASS" endtime="20140505 20:27:25.985" starttime="20140505 20:27:25.981"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.986" starttime="20140505 20:27:25.986"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.986" starttime="20140505 20:27:25.980"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/3</arg>
<arg>rdiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.989" level="INFO">${value} = "rdiag"</msg>
<status status="PASS" endtime="20140505 20:27:25.989" starttime="20140505 20:27:25.988"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.990" level="INFO">${match} = "rdiag"</msg>
<msg timestamp="20140505 20:27:25.990" level="INFO">${output} = rdiag</msg>
<status status="PASS" endtime="20140505 20:27:25.990" starttime="20140505 20:27:25.989"></status>
</kw>
<msg timestamp="20140505 20:27:25.990" level="INFO">${value} = rdiag</msg>
<status status="PASS" endtime="20140505 20:27:25.990" starttime="20140505 20:27:25.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.991" starttime="20140505 20:27:25.990"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.991" starttime="20140505 20:27:25.987"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/4</arg>
<arg>ldiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.993" level="INFO">${value} = "ldiag"</msg>
<status status="PASS" endtime="20140505 20:27:25.993" starttime="20140505 20:27:25.993"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.994" level="INFO">${match} = "ldiag"</msg>
<msg timestamp="20140505 20:27:25.994" level="INFO">${output} = ldiag</msg>
<status status="PASS" endtime="20140505 20:27:25.994" starttime="20140505 20:27:25.994"></status>
</kw>
<msg timestamp="20140505 20:27:25.995" level="INFO">${value} = ldiag</msg>
<status status="PASS" endtime="20140505 20:27:25.994" starttime="20140505 20:27:25.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:25.995" starttime="20140505 20:27:25.995"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:25.996" starttime="20140505 20:27:25.991"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/5</arg>
<arg>random</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:25.998" level="INFO">${value} = "random"</msg>
<status status="PASS" endtime="20140505 20:27:25.998" starttime="20140505 20:27:25.998"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:25.999" level="INFO">${match} = "random"</msg>
<msg timestamp="20140505 20:27:25.999" level="INFO">${output} = random</msg>
<status status="PASS" endtime="20140505 20:27:25.999" starttime="20140505 20:27:25.999"></status>
</kw>
<msg timestamp="20140505 20:27:26.000" level="INFO">${value} = random</msg>
<status status="PASS" endtime="20140505 20:27:25.999" starttime="20140505 20:27:25.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.000" starttime="20140505 20:27:26.000"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.001" starttime="20140505 20:27:25.996"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.004" level="FAIL">JsonPointerException: index '1' is out of bounds</msg>
<status status="FAIL" endtime="20140505 20:27:26.004" starttime="20140505 20:27:26.002"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.004" starttime="20140505 20:27:26.002"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.004" starttime="20140505 20:27:26.001"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.006" level="FAIL">JsonPointerException: index '2' is out of bounds</msg>
<status status="FAIL" endtime="20140505 20:27:26.007" starttime="20140505 20:27:26.006"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.007" starttime="20140505 20:27:26.005"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.007" starttime="20140505 20:27:26.005"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:26.007" critical="yes" starttime="20140505 20:27:25.441"></status>
</test>
<test id="s1-t26" name="GetData Row">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 2}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.012" starttime="20140505 20:27:26.011"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.012" starttime="20140505 20:27:26.010"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.013" starttime="20140505 20:27:26.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.515" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:26.515" starttime="20140505 20:27:26.014"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:26.519" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"result" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"result" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		}
	]
}
}</msg>
<msg timestamp="20140505 20:27:26.519" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"ma...</msg>
<status status="PASS" endtime="20140505 20:27:26.519" starttime="20140505 20:27:26.516"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.521" starttime="20140505 20:27:26.521"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.522" starttime="20140505 20:27:26.520"></status>
</kw>
<msg timestamp="20140505 20:27:26.522" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"ma...</msg>
<status status="PASS" endtime="20140505 20:27:26.522" starttime="20140505 20:27:26.009"></status>
</kw>
<msg timestamp="20140505 20:27:26.524" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"ma...</msg>
<status status="PASS" endtime="20140505 20:27:26.523" starttime="20140505 20:27:26.009"></status>
</kw>
<kw type="kw" name="Status OK Has Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.526" starttime="20140505 20:27:26.526"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.529" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:26.529" starttime="20140505 20:27:26.528"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:26.530" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:26.530" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:26.530" starttime="20140505 20:27:26.530"></status>
</kw>
<msg timestamp="20140505 20:27:26.531" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:26.531" starttime="20140505 20:27:26.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.531" starttime="20140505 20:27:26.531"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.532" starttime="20140505 20:27:26.527"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.535" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [u'rdiag', u'ldiag'], u'type': u'String', u'name': u'Name', u'matrix': False}, {u'result': [[[0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]], [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]], u'dimensions': [5, 5], u'type': u'float', u'name': u'Input', u'matrix': True}, {u'result': [[[0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]], [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]], u'dimensions': [5, 5], u'type': u'float', u'name': u'Output', u'matrix': True}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:26.535" starttime="20140505 20:27:26.533"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.535" starttime="20140505 20:27:26.533"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.535" starttime="20140505 20:27:26.532"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.539" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [u'rdiag', u'ldiag'], u'type': u'String', u'name': u'Name', u'matrix': False}, {u'result': [[[0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]], [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]], u'dimensions': [5, 5], u'type': u'float', u'name': u'Input', u'matrix': True}, {u'result': [[[0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]], [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]], u'dimensions': [5, 5], u'type': u'float', u'name': u'Output', u'matrix': True}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:26.539" starttime="20140505 20:27:26.538"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.539" starttime="20140505 20:27:26.537"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.539" starttime="20140505 20:27:26.536"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.540" starttime="20140505 20:27:26.525"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.541" starttime="20140505 20:27:26.540"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.541" starttime="20140505 20:27:26.524"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/name</arg>
<arg>Name</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.545" level="INFO">${value} = "Name"</msg>
<status status="PASS" endtime="20140505 20:27:26.545" starttime="20140505 20:27:26.544"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:26.546" level="INFO">${match} = "Name"</msg>
<msg timestamp="20140505 20:27:26.546" level="INFO">${output} = Name</msg>
<status status="PASS" endtime="20140505 20:27:26.546" starttime="20140505 20:27:26.545"></status>
</kw>
<msg timestamp="20140505 20:27:26.547" level="INFO">${value} = Name</msg>
<status status="PASS" endtime="20140505 20:27:26.546" starttime="20140505 20:27:26.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.547" starttime="20140505 20:27:26.547"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.548" starttime="20140505 20:27:26.541"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/name</arg>
<arg>Input</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.551" level="INFO">${value} = "Input"</msg>
<status status="PASS" endtime="20140505 20:27:26.550" starttime="20140505 20:27:26.550"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:26.551" level="INFO">${match} = "Input"</msg>
<msg timestamp="20140505 20:27:26.551" level="INFO">${output} = Input</msg>
<status status="PASS" endtime="20140505 20:27:26.551" starttime="20140505 20:27:26.551"></status>
</kw>
<msg timestamp="20140505 20:27:26.552" level="INFO">${value} = Input</msg>
<status status="PASS" endtime="20140505 20:27:26.552" starttime="20140505 20:27:26.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.552" starttime="20140505 20:27:26.552"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.553" starttime="20140505 20:27:26.548"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2/name</arg>
<arg>Output</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.556" level="INFO">${value} = "Output"</msg>
<status status="PASS" endtime="20140505 20:27:26.556" starttime="20140505 20:27:26.555"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:26.557" level="INFO">${match} = "Output"</msg>
<msg timestamp="20140505 20:27:26.558" level="INFO">${output} = Output</msg>
<status status="PASS" endtime="20140505 20:27:26.557" starttime="20140505 20:27:26.557"></status>
</kw>
<msg timestamp="20140505 20:27:26.558" level="INFO">${value} = Output</msg>
<status status="PASS" endtime="20140505 20:27:26.558" starttime="20140505 20:27:26.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.559" starttime="20140505 20:27:26.559"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.559" starttime="20140505 20:27:26.553"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/type</arg>
<arg>String</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.564" level="INFO">${value} = "String"</msg>
<status status="PASS" endtime="20140505 20:27:26.564" starttime="20140505 20:27:26.562"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:26.566" level="INFO">${match} = "String"</msg>
<msg timestamp="20140505 20:27:26.566" level="INFO">${output} = String</msg>
<status status="PASS" endtime="20140505 20:27:26.565" starttime="20140505 20:27:26.565"></status>
</kw>
<msg timestamp="20140505 20:27:26.566" level="INFO">${value} = String</msg>
<status status="PASS" endtime="20140505 20:27:26.566" starttime="20140505 20:27:26.561"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.568" starttime="20140505 20:27:26.566"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.568" starttime="20140505 20:27:26.560"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.571" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140505 20:27:26.571" starttime="20140505 20:27:26.570"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:26.572" level="INFO">${match} = "float"</msg>
<msg timestamp="20140505 20:27:26.572" level="INFO">${output} = float</msg>
<status status="PASS" endtime="20140505 20:27:26.572" starttime="20140505 20:27:26.571"></status>
</kw>
<msg timestamp="20140505 20:27:26.573" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140505 20:27:26.573" starttime="20140505 20:27:26.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.574" starttime="20140505 20:27:26.573"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.574" starttime="20140505 20:27:26.568"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.578" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140505 20:27:26.578" starttime="20140505 20:27:26.577"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:26.579" level="INFO">${match} = "float"</msg>
<msg timestamp="20140505 20:27:26.579" level="INFO">${output} = float</msg>
<status status="PASS" endtime="20140505 20:27:26.579" starttime="20140505 20:27:26.578"></status>
</kw>
<msg timestamp="20140505 20:27:26.579" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140505 20:27:26.579" starttime="20140505 20:27:26.576"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.580" starttime="20140505 20:27:26.580"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.580" starttime="20140505 20:27:26.575"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/matrix</arg>
<arg>false</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.581" starttime="20140505 20:27:26.581"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.582" starttime="20140505 20:27:26.582"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.584" starttime="20140505 20:27:26.584"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/0</arg>
<arg>rdiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.588" level="INFO">${value} = "rdiag"</msg>
<status status="PASS" endtime="20140505 20:27:26.588" starttime="20140505 20:27:26.587"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:26.589" level="INFO">${match} = "rdiag"</msg>
<msg timestamp="20140505 20:27:26.589" level="INFO">${output} = rdiag</msg>
<status status="PASS" endtime="20140505 20:27:26.589" starttime="20140505 20:27:26.588"></status>
</kw>
<msg timestamp="20140505 20:27:26.590" level="INFO">${value} = rdiag</msg>
<status status="PASS" endtime="20140505 20:27:26.589" starttime="20140505 20:27:26.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.590" starttime="20140505 20:27:26.590"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.590" starttime="20140505 20:27:26.585"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/1</arg>
<arg>ldiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.594" level="INFO">${value} = "ldiag"</msg>
<status status="PASS" endtime="20140505 20:27:26.594" starttime="20140505 20:27:26.593"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:26.595" level="INFO">${match} = "ldiag"</msg>
<msg timestamp="20140505 20:27:26.595" level="INFO">${output} = ldiag</msg>
<status status="PASS" endtime="20140505 20:27:26.595" starttime="20140505 20:27:26.594"></status>
</kw>
<msg timestamp="20140505 20:27:26.595" level="INFO">${value} = ldiag</msg>
<status status="PASS" endtime="20140505 20:27:26.595" starttime="20140505 20:27:26.591"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.596" starttime="20140505 20:27:26.596"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.597" starttime="20140505 20:27:26.590"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/result/0/2/2</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.598" starttime="20140505 20:27:26.597"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/result/0/1/0</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.599" starttime="20140505 20:27:26.598"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/2</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.601" level="FAIL">JsonPointerException: index '2' is out of bounds</msg>
<status status="FAIL" endtime="20140505 20:27:26.602" starttime="20140505 20:27:26.601"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.602" starttime="20140505 20:27:26.600"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.602" starttime="20140505 20:27:26.599"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/result/2</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.606" level="FAIL">JsonPointerException: index '2' is out of bounds</msg>
<status status="FAIL" endtime="20140505 20:27:26.606" starttime="20140505 20:27:26.605"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.606" starttime="20140505 20:27:26.605"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.607" starttime="20140505 20:27:26.602"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2/result/2</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:26.610" level="FAIL">JsonPointerException: index '2' is out of bounds</msg>
<status status="FAIL" endtime="20140505 20:27:26.610" starttime="20140505 20:27:26.609"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.610" starttime="20140505 20:27:26.608"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.610" starttime="20140505 20:27:26.607"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:26.611" critical="yes" starttime="20140505 20:27:26.008"></status>
</test>
<test id="s1-t27" name="GetData Cell">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Name"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.616" starttime="20140505 20:27:26.615"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:26.617" starttime="20140505 20:27:26.614"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:26.618" starttime="20140505 20:27:26.617"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:27.119" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:27.120" starttime="20140505 20:27:26.618"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:27.121" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["rdiag"]
		}
	]
}
}</msg>
<msg timestamp="20140505 20:27:27.121" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["rdiag"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140505 20:27:27.121" starttime="20140505 20:27:27.120"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.122" starttime="20140505 20:27:27.122"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.123" starttime="20140505 20:27:27.121"></status>
</kw>
<msg timestamp="20140505 20:27:27.123" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["rdiag"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140505 20:27:27.123" starttime="20140505 20:27:26.613"></status>
</kw>
<msg timestamp="20140505 20:27:27.123" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"result" : ["rdiag"]
		}
	]
}
}</msg>
<status status="PASS" endtime="20140505 20:27:27.123" starttime="20140505 20:27:26.612"></status>
</kw>
<kw type="kw" name="Status OK Has Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.125" starttime="20140505 20:27:27.125"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:27.127" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:27.127" starttime="20140505 20:27:27.127"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:27.128" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:27.128" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:27.128" starttime="20140505 20:27:27.128"></status>
</kw>
<msg timestamp="20140505 20:27:27.129" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:27.128" starttime="20140505 20:27:27.126"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.129" starttime="20140505 20:27:27.129"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.129" starttime="20140505 20:27:27.125"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:27.131" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [u'rdiag'], u'type': u'String', u'name': u'Name', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:27.131" starttime="20140505 20:27:27.131"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.132" starttime="20140505 20:27:27.130"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.132" starttime="20140505 20:27:27.129"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:27.134" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [u'rdiag'], u'type': u'String', u'name': u'Name', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:27.134" starttime="20140505 20:27:27.133"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.134" starttime="20140505 20:27:27.133"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.134" starttime="20140505 20:27:27.132"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.134" starttime="20140505 20:27:27.124"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.135" starttime="20140505 20:27:27.134"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.135" starttime="20140505 20:27:27.124"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/name</arg>
<arg>Name</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:27.137" level="INFO">${value} = "Name"</msg>
<status status="PASS" endtime="20140505 20:27:27.137" starttime="20140505 20:27:27.137"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:27.138" level="INFO">${match} = "Name"</msg>
<msg timestamp="20140505 20:27:27.138" level="INFO">${output} = Name</msg>
<status status="PASS" endtime="20140505 20:27:27.138" starttime="20140505 20:27:27.137"></status>
</kw>
<msg timestamp="20140505 20:27:27.138" level="INFO">${value} = Name</msg>
<status status="PASS" endtime="20140505 20:27:27.138" starttime="20140505 20:27:27.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.139" starttime="20140505 20:27:27.138"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.139" starttime="20140505 20:27:27.135"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/type</arg>
<arg>String</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:27.141" level="INFO">${value} = "String"</msg>
<status status="PASS" endtime="20140505 20:27:27.141" starttime="20140505 20:27:27.140"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:27.142" level="INFO">${match} = "String"</msg>
<msg timestamp="20140505 20:27:27.142" level="INFO">${output} = String</msg>
<status status="PASS" endtime="20140505 20:27:27.142" starttime="20140505 20:27:27.141"></status>
</kw>
<msg timestamp="20140505 20:27:27.142" level="INFO">${value} = String</msg>
<status status="PASS" endtime="20140505 20:27:27.142" starttime="20140505 20:27:27.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.143" starttime="20140505 20:27:27.142"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.143" starttime="20140505 20:27:27.139"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/matrix</arg>
<arg>false</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.143" starttime="20140505 20:27:27.143"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/0</arg>
<arg>rdiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:27.146" level="INFO">${value} = "rdiag"</msg>
<status status="PASS" endtime="20140505 20:27:27.146" starttime="20140505 20:27:27.145"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:27.147" level="INFO">${match} = "rdiag"</msg>
<msg timestamp="20140505 20:27:27.147" level="INFO">${output} = rdiag</msg>
<status status="PASS" endtime="20140505 20:27:27.147" starttime="20140505 20:27:27.146"></status>
</kw>
<msg timestamp="20140505 20:27:27.147" level="INFO">${value} = rdiag</msg>
<status status="PASS" endtime="20140505 20:27:27.147" starttime="20140505 20:27:27.144"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.148" starttime="20140505 20:27:27.147"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.148" starttime="20140505 20:27:27.144"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:27.148" critical="yes" starttime="20140505 20:27:26.611"></status>
</test>
<test id="s1-t28" name="GetDataMatrixCell">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Input", "cell": 12}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.152" starttime="20140505 20:27:27.151"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.152" starttime="20140505 20:27:27.151"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.153" starttime="20140505 20:27:27.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:27.654" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:27.654" starttime="20140505 20:27:27.153"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:27.655" level="INFO">{"status":"OK",
	"result" : 1

}</msg>
<msg timestamp="20140505 20:27:27.655" level="INFO">${output} = {"status":"OK",
	"result" : 1

}</msg>
<status status="PASS" endtime="20140505 20:27:27.655" starttime="20140505 20:27:27.654"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.657" starttime="20140505 20:27:27.656"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.657" starttime="20140505 20:27:27.655"></status>
</kw>
<msg timestamp="20140505 20:27:27.657" level="INFO">${output} = {"status":"OK",
	"result" : 1

}</msg>
<status status="PASS" endtime="20140505 20:27:27.657" starttime="20140505 20:27:27.150"></status>
</kw>
<msg timestamp="20140505 20:27:27.657" level="INFO">${output} = {"status":"OK",
	"result" : 1

}</msg>
<status status="PASS" endtime="20140505 20:27:27.657" starttime="20140505 20:27:27.149"></status>
</kw>
<kw type="kw" name="Status OK Equal Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.659" starttime="20140505 20:27:27.659"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:27.662" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:27.661" starttime="20140505 20:27:27.661"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:27.662" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:27.662" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:27.662" starttime="20140505 20:27:27.662"></status>
</kw>
<msg timestamp="20140505 20:27:27.663" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:27.663" starttime="20140505 20:27:27.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.664" starttime="20140505 20:27:27.664"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.664" starttime="20140505 20:27:27.660"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:27.666" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': 1}</msg>
<status status="FAIL" endtime="20140505 20:27:27.667" starttime="20140505 20:27:27.666"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.667" starttime="20140505 20:27:27.665"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.667" starttime="20140505 20:27:27.665"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:27.669" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': 1}</msg>
<status status="FAIL" endtime="20140505 20:27:27.669" starttime="20140505 20:27:27.668"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.669" starttime="20140505 20:27:27.668"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.669" starttime="20140505 20:27:27.667"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.669" starttime="20140505 20:27:27.658"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.670" starttime="20140505 20:27:27.669"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.670" starttime="20140505 20:27:27.658"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:27.670" critical="yes" starttime="20140505 20:27:27.149"></status>
</test>
<test id="s1-t29" name="SetData Row Specified">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "table": "TrialOutputData", "row_from": 3, "data": { "columns": [ { "name": "batch", "values": [8] }, { "name": "epoch", "values": [6] }, { "name": "trial_name", "values": ["letrial"] }, { "name": "sse", "values": [4.4] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.674" starttime="20140505 20:27:27.673"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:27.674" starttime="20140505 20:27:27.673"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:27.675" starttime="20140505 20:27:27.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:28.176" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:28.177" starttime="20140505 20:27:27.675"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:28.177" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:28.178" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:28.177" starttime="20140505 20:27:28.177"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.179" starttime="20140505 20:27:28.179"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.179" starttime="20140505 20:27:28.178"></status>
</kw>
<msg timestamp="20140505 20:27:28.180" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:28.179" starttime="20140505 20:27:27.672"></status>
</kw>
<msg timestamp="20140505 20:27:28.180" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:28.180" starttime="20140505 20:27:27.671"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.182" starttime="20140505 20:27:28.182"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:28.184" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:28.184" starttime="20140505 20:27:28.184"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:28.185" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:28.185" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:28.185" starttime="20140505 20:27:28.185"></status>
</kw>
<msg timestamp="20140505 20:27:28.185" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:28.185" starttime="20140505 20:27:28.183"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.186" starttime="20140505 20:27:28.186"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.186" starttime="20140505 20:27:28.182"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:28.188" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:28.189" starttime="20140505 20:27:28.188"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.189" starttime="20140505 20:27:28.187"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.189" starttime="20140505 20:27:28.186"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:28.191" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:28.191" starttime="20140505 20:27:28.191"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.191" starttime="20140505 20:27:28.190"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.192" starttime="20140505 20:27:28.189"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.192" starttime="20140505 20:27:28.181"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:28.194" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:28.194" starttime="20140505 20:27:28.193"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.194" starttime="20140505 20:27:28.193"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.194" starttime="20140505 20:27:28.192"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.194" starttime="20140505 20:27:28.180"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "TrialOutputData", "row_from": 3, "rows": 1}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.197" starttime="20140505 20:27:28.197"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.197" starttime="20140505 20:27:28.196"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.198" starttime="20140505 20:27:28.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:28.699" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:28.699" starttime="20140505 20:27:28.198"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:28.702" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [8]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"result" : [6]
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"result" : [3]
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"result" : ["letrial"]
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"result" : [""]
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"result" : [2]
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"result" : [50]
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"result" : [4.4]
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"result" : [0]
		}
	]
}
}</msg>
<msg timestamp="20140505 20:27:28.702" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [8]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140505 20:27:28.702" starttime="20140505 20:27:28.700"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.704" starttime="20140505 20:27:28.703"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.704" starttime="20140505 20:27:28.702"></status>
</kw>
<msg timestamp="20140505 20:27:28.704" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [8]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140505 20:27:28.704" starttime="20140505 20:27:28.195"></status>
</kw>
<msg timestamp="20140505 20:27:28.705" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [8]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140505 20:27:28.704" starttime="20140505 20:27:28.194"></status>
</kw>
<kw type="kw" name="Status OK Has Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.707" starttime="20140505 20:27:28.706"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:28.709" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:28.709" starttime="20140505 20:27:28.708"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:28.710" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:28.710" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:28.710" starttime="20140505 20:27:28.709"></status>
</kw>
<msg timestamp="20140505 20:27:28.710" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:28.710" starttime="20140505 20:27:28.708"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.711" starttime="20140505 20:27:28.710"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.711" starttime="20140505 20:27:28.707"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:28.713" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [8], u'type': u'int', u'name': u'batch', u'matrix': False}, {u'result': [6], u'type': u'int', u'name': u'epoch', u'matrix': False}, {u'result': [3], u'type': u'int', u'name': u'trial', u'matrix': False}, {u'result': [u'letrial'], u'type': u'String', u'name': u'trial_name', u'matrix': False}, {u'result': [u''], u'type': u'String', u'name': u'group_name', u'matrix': False}, {u'result': [2], u'type': u'int', u'name': u'phase_no', u'matrix': False}, {u'result': [50], u'type': u'float', u'name': u'minus_cycles', u'matrix': False}, {u'result': [4.4], u'type': u'float', u'name': u'sse', u'matrix': False}, {u'result': [0], u'type': u'float', u'name': u'ext_rew', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:28.714" starttime="20140505 20:27:28.712"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.714" starttime="20140505 20:27:28.712"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.714" starttime="20140505 20:27:28.711"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:28.716" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [8], u'type': u'int', u'name': u'batch', u'matrix': False}, {u'result': [6], u'type': u'int', u'name': u'epoch', u'matrix': False}, {u'result': [3], u'type': u'int', u'name': u'trial', u'matrix': False}, {u'result': [u'letrial'], u'type': u'String', u'name': u'trial_name', u'matrix': False}, {u'result': [u''], u'type': u'String', u'name': u'group_name', u'matrix': False}, {u'result': [2], u'type': u'int', u'name': u'phase_no', u'matrix': False}, {u'result': [50], u'type': u'float', u'name': u'minus_cycles', u'matrix': False}, {u'result': [4.4], u'type': u'float', u'name': u'sse', u'matrix': False}, {u'result': [0], u'type': u'float', u'name': u'ext_rew', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:28.716" starttime="20140505 20:27:28.715"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.716" starttime="20140505 20:27:28.715"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.716" starttime="20140505 20:27:28.714"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.717" starttime="20140505 20:27:28.706"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.717" starttime="20140505 20:27:28.717"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.718" starttime="20140505 20:27:28.705"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/0</arg>
<arg>8</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.718" starttime="20140505 20:27:28.718"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2/result/0</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.719" starttime="20140505 20:27:28.719"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/result/0</arg>
<arg>6</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.720" starttime="20140505 20:27:28.719"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/3/result/0</arg>
<arg>letrial</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:28.722" level="INFO">${value} = "letrial"</msg>
<status status="PASS" endtime="20140505 20:27:28.722" starttime="20140505 20:27:28.722"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:28.723" level="INFO">${match} = "letrial"</msg>
<msg timestamp="20140505 20:27:28.723" level="INFO">${output} = letrial</msg>
<status status="PASS" endtime="20140505 20:27:28.723" starttime="20140505 20:27:28.722"></status>
</kw>
<msg timestamp="20140505 20:27:28.723" level="INFO">${value} = letrial</msg>
<status status="PASS" endtime="20140505 20:27:28.723" starttime="20140505 20:27:28.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.724" starttime="20140505 20:27:28.723"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.724" starttime="20140505 20:27:28.720"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/7/result/0</arg>
<arg>4.4</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.725" starttime="20140505 20:27:28.724"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:28.725" critical="yes" starttime="20140505 20:27:27.671"></status>
</test>
<test id="s1-t30" name="RemoveData First Two Rows">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "RemoveData", "table": "TrialOutputData", "rows": 2}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.729" starttime="20140505 20:27:28.729"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:28.729" starttime="20140505 20:27:28.728"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:28.730" starttime="20140505 20:27:28.729"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:29.231" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:29.232" starttime="20140505 20:27:28.730"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:29.233" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:29.233" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:29.233" starttime="20140505 20:27:29.232"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.234" starttime="20140505 20:27:29.234"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.234" starttime="20140505 20:27:29.233"></status>
</kw>
<msg timestamp="20140505 20:27:29.235" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:29.235" starttime="20140505 20:27:28.727"></status>
</kw>
<msg timestamp="20140505 20:27:29.235" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:29.235" starttime="20140505 20:27:28.727"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.237" starttime="20140505 20:27:29.237"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:29.239" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:29.239" starttime="20140505 20:27:29.239"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:29.240" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:29.240" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:29.240" starttime="20140505 20:27:29.239"></status>
</kw>
<msg timestamp="20140505 20:27:29.240" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:29.240" starttime="20140505 20:27:29.238"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.241" starttime="20140505 20:27:29.241"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.241" starttime="20140505 20:27:29.237"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:29.244" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:29.245" starttime="20140505 20:27:29.244"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.245" starttime="20140505 20:27:29.242"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.245" starttime="20140505 20:27:29.241"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:29.247" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:29.247" starttime="20140505 20:27:29.246"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.247" starttime="20140505 20:27:29.246"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.247" starttime="20140505 20:27:29.245"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.247" starttime="20140505 20:27:29.236"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:29.249" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:29.249" starttime="20140505 20:27:29.249"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.249" starttime="20140505 20:27:29.248"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.249" starttime="20140505 20:27:29.247"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.250" starttime="20140505 20:27:29.235"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.252" starttime="20140505 20:27:29.252"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.252" starttime="20140505 20:27:29.251"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.254" starttime="20140505 20:27:29.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:29.755" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:29.755" starttime="20140505 20:27:29.254"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:29.758" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [9, 8, 9, 9]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"result" : [8, 6, 8, 8]
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"result" : [2, 3, 4, 5]
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"result" : ["checks", "letrial", "rdiag", "midhoriz"]
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"result" : ["", "", "", ""]
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"result" : [2, 2, 2, 2]
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"result" : [50, 50, 50, 50]
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"result" : [0, 4.4, 0, 0]
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"result" : [0, 0, 0, 0]
		}
	]
}
}</msg>
<msg timestamp="20140505 20:27:29.758" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [9, 8, 9, 9]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : fa...</msg>
<status status="PASS" endtime="20140505 20:27:29.758" starttime="20140505 20:27:29.755"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.760" starttime="20140505 20:27:29.759"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.760" starttime="20140505 20:27:29.758"></status>
</kw>
<msg timestamp="20140505 20:27:29.760" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [9, 8, 9, 9]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : fa...</msg>
<status status="PASS" endtime="20140505 20:27:29.760" starttime="20140505 20:27:29.250"></status>
</kw>
<msg timestamp="20140505 20:27:29.760" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [9, 8, 9, 9]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : fa...</msg>
<status status="PASS" endtime="20140505 20:27:29.760" starttime="20140505 20:27:29.250"></status>
</kw>
<kw type="kw" name="Status OK Has Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.762" starttime="20140505 20:27:29.762"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:29.765" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:29.765" starttime="20140505 20:27:29.764"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:29.765" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:29.765" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:29.765" starttime="20140505 20:27:29.765"></status>
</kw>
<msg timestamp="20140505 20:27:29.766" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:29.766" starttime="20140505 20:27:29.763"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.766" starttime="20140505 20:27:29.766"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.767" starttime="20140505 20:27:29.763"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:29.769" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [9, 8, 9, 9], u'type': u'int', u'name': u'batch', u'matrix': False}, {u'result': [8, 6, 8, 8], u'type': u'int', u'name': u'epoch', u'matrix': False}, {u'result': [2, 3, 4, 5], u'type': u'int', u'name': u'trial', u'matrix': False}, {u'result': [u'checks', u'letrial', u'rdiag', u'midhoriz'], u'type': u'String', u'name': u'trial_name', u'matrix': False}, {u'result': [u'', u'', u'', u''], u'type': u'String', u'name': u'group_name', u'matrix': False}, {u'result': [2, 2, 2, 2], u'type': u'int', u'name': u'phase_no', u'matrix': False}, {u'result': [50, 50, 50, 50], u'type': u'float', u'name': u'minus_cycles', u'matrix': False}, {u'result': [0, 4.4, 0, 0], u'type': u'float', u'name': u'sse', u'matrix': False}, {u'result': [0, 0, 0, 0], u'type': u'float', u'name': u'ext_rew', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:29.769" starttime="20140505 20:27:29.768"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.769" starttime="20140505 20:27:29.767"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.769" starttime="20140505 20:27:29.767"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:29.771" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [9, 8, 9, 9], u'type': u'int', u'name': u'batch', u'matrix': False}, {u'result': [8, 6, 8, 8], u'type': u'int', u'name': u'epoch', u'matrix': False}, {u'result': [2, 3, 4, 5], u'type': u'int', u'name': u'trial', u'matrix': False}, {u'result': [u'checks', u'letrial', u'rdiag', u'midhoriz'], u'type': u'String', u'name': u'trial_name', u'matrix': False}, {u'result': [u'', u'', u'', u''], u'type': u'String', u'name': u'group_name', u'matrix': False}, {u'result': [2, 2, 2, 2], u'type': u'int', u'name': u'phase_no', u'matrix': False}, {u'result': [50, 50, 50, 50], u'type': u'float', u'name': u'minus_cycles', u'matrix': False}, {u'result': [0, 4.4, 0, 0], u'type': u'float', u'name': u'sse', u'matrix': False}, {u'result': [0, 0, 0, 0], u'type': u'float', u'name': u'ext_rew', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:29.771" starttime="20140505 20:27:29.770"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.771" starttime="20140505 20:27:29.770"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.771" starttime="20140505 20:27:29.769"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.771" starttime="20140505 20:27:29.761"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.772" starttime="20140505 20:27:29.772"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.772" starttime="20140505 20:27:29.761"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2/result/0</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.773" starttime="20140505 20:27:29.773"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2/result/1</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.774" starttime="20140505 20:27:29.773"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2/result/2</arg>
<arg>4</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.775" starttime="20140505 20:27:29.774"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:29.775" critical="yes" starttime="20140505 20:27:28.726"></status>
</test>
<test id="s1-t31" name="SetData No Row Specified">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [8] }, { "name": "epoch", "values": [6] }, { "name": "trial_name", "values": ["letrial"] }, { "name": "sse", "values": [4.4] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.778" starttime="20140505 20:27:29.778"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:29.778" starttime="20140505 20:27:29.777"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:29.779" starttime="20140505 20:27:29.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:30.281" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:30.281" starttime="20140505 20:27:29.780"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:30.282" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:30.283" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:30.283" starttime="20140505 20:27:30.282"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.285" starttime="20140505 20:27:30.284"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.285" starttime="20140505 20:27:30.283"></status>
</kw>
<msg timestamp="20140505 20:27:30.285" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:30.285" starttime="20140505 20:27:29.777"></status>
</kw>
<msg timestamp="20140505 20:27:30.286" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:30.286" starttime="20140505 20:27:29.776"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.288" starttime="20140505 20:27:30.288"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:30.291" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:30.290" starttime="20140505 20:27:30.290"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:30.291" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:30.291" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:30.291" starttime="20140505 20:27:30.291"></status>
</kw>
<msg timestamp="20140505 20:27:30.292" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:30.292" starttime="20140505 20:27:30.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.293" starttime="20140505 20:27:30.292"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.293" starttime="20140505 20:27:30.288"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:30.295" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:30.295" starttime="20140505 20:27:30.294"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.295" starttime="20140505 20:27:30.294"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.295" starttime="20140505 20:27:30.293"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:30.298" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:30.298" starttime="20140505 20:27:30.297"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.298" starttime="20140505 20:27:30.297"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.298" starttime="20140505 20:27:30.296"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.299" starttime="20140505 20:27:30.287"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:30.301" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:30.301" starttime="20140505 20:27:30.300"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.301" starttime="20140505 20:27:30.300"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.301" starttime="20140505 20:27:30.299"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.301" starttime="20140505 20:27:30.286"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "TrialOutputData", "rows": 1}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.305" starttime="20140505 20:27:30.304"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.305" starttime="20140505 20:27:30.303"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.306" starttime="20140505 20:27:30.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:30.807" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:30.807" starttime="20140505 20:27:30.306"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:30.810" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [8]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"result" : [6]
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"result" : [2]
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"result" : ["letrial"]
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"result" : [""]
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"result" : [2]
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"result" : [50]
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"result" : [4.4]
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"result" : [0]
		}
	]
}
}</msg>
<msg timestamp="20140505 20:27:30.810" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [8]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140505 20:27:30.810" starttime="20140505 20:27:30.808"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.811" starttime="20140505 20:27:30.811"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.812" starttime="20140505 20:27:30.810"></status>
</kw>
<msg timestamp="20140505 20:27:30.812" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [8]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140505 20:27:30.812" starttime="20140505 20:27:30.302"></status>
</kw>
<msg timestamp="20140505 20:27:30.812" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [8]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140505 20:27:30.812" starttime="20140505 20:27:30.301"></status>
</kw>
<kw type="kw" name="Status OK Has Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.814" starttime="20140505 20:27:30.814"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:30.817" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:30.816" starttime="20140505 20:27:30.816"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:30.817" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:30.817" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:30.817" starttime="20140505 20:27:30.817"></status>
</kw>
<msg timestamp="20140505 20:27:30.818" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:30.818" starttime="20140505 20:27:30.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.818" starttime="20140505 20:27:30.818"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.818" starttime="20140505 20:27:30.814"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:30.820" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [8], u'type': u'int', u'name': u'batch', u'matrix': False}, {u'result': [6], u'type': u'int', u'name': u'epoch', u'matrix': False}, {u'result': [2], u'type': u'int', u'name': u'trial', u'matrix': False}, {u'result': [u'letrial'], u'type': u'String', u'name': u'trial_name', u'matrix': False}, {u'result': [u''], u'type': u'String', u'name': u'group_name', u'matrix': False}, {u'result': [2], u'type': u'int', u'name': u'phase_no', u'matrix': False}, {u'result': [50], u'type': u'float', u'name': u'minus_cycles', u'matrix': False}, {u'result': [4.4], u'type': u'float', u'name': u'sse', u'matrix': False}, {u'result': [0], u'type': u'float', u'name': u'ext_rew', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:30.821" starttime="20140505 20:27:30.820"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.821" starttime="20140505 20:27:30.819"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.821" starttime="20140505 20:27:30.819"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:30.824" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [8], u'type': u'int', u'name': u'batch', u'matrix': False}, {u'result': [6], u'type': u'int', u'name': u'epoch', u'matrix': False}, {u'result': [2], u'type': u'int', u'name': u'trial', u'matrix': False}, {u'result': [u'letrial'], u'type': u'String', u'name': u'trial_name', u'matrix': False}, {u'result': [u''], u'type': u'String', u'name': u'group_name', u'matrix': False}, {u'result': [2], u'type': u'int', u'name': u'phase_no', u'matrix': False}, {u'result': [50], u'type': u'float', u'name': u'minus_cycles', u'matrix': False}, {u'result': [4.4], u'type': u'float', u'name': u'sse', u'matrix': False}, {u'result': [0], u'type': u'float', u'name': u'ext_rew', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:30.824" starttime="20140505 20:27:30.822"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.824" starttime="20140505 20:27:30.822"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.824" starttime="20140505 20:27:30.821"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.824" starttime="20140505 20:27:30.813"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.825" starttime="20140505 20:27:30.825"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.825" starttime="20140505 20:27:30.813"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/0</arg>
<arg>8</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.826" starttime="20140505 20:27:30.826"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/result/0</arg>
<arg>6</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.827" starttime="20140505 20:27:30.826"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/2/result/0</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.828" starttime="20140505 20:27:30.827"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/3/result/0</arg>
<arg>letrial</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:30.830" level="INFO">${value} = "letrial"</msg>
<status status="PASS" endtime="20140505 20:27:30.830" starttime="20140505 20:27:30.829"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:30.830" level="INFO">${match} = "letrial"</msg>
<msg timestamp="20140505 20:27:30.831" level="INFO">${output} = letrial</msg>
<status status="PASS" endtime="20140505 20:27:30.830" starttime="20140505 20:27:30.830"></status>
</kw>
<msg timestamp="20140505 20:27:30.831" level="INFO">${value} = letrial</msg>
<status status="PASS" endtime="20140505 20:27:30.831" starttime="20140505 20:27:30.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.831" starttime="20140505 20:27:30.831"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.832" starttime="20140505 20:27:30.828"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/7/result/0</arg>
<arg>4.4</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.832" starttime="20140505 20:27:30.832"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:30.833" critical="yes" starttime="20140505 20:27:29.775"></status>
</test>
<test id="s1-t32" name="RemoveData All Rows">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "RemoveData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.836" starttime="20140505 20:27:30.836"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:30.836" starttime="20140505 20:27:30.835"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:30.837" starttime="20140505 20:27:30.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:31.339" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:31.339" starttime="20140505 20:27:30.838"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:31.340" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:31.340" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:31.340" starttime="20140505 20:27:31.339"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:31.341" starttime="20140505 20:27:31.341"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.341" starttime="20140505 20:27:31.340"></status>
</kw>
<msg timestamp="20140505 20:27:31.342" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:31.342" starttime="20140505 20:27:30.834"></status>
</kw>
<msg timestamp="20140505 20:27:31.342" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:31.342" starttime="20140505 20:27:30.834"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:31.344" starttime="20140505 20:27:31.344"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:31.347" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:31.346" starttime="20140505 20:27:31.346"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:31.347" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:31.347" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:31.347" starttime="20140505 20:27:31.347"></status>
</kw>
<msg timestamp="20140505 20:27:31.348" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:31.348" starttime="20140505 20:27:31.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:31.348" starttime="20140505 20:27:31.348"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.349" starttime="20140505 20:27:31.344"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:31.350" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:31.351" starttime="20140505 20:27:31.350"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.351" starttime="20140505 20:27:31.349"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.351" starttime="20140505 20:27:31.349"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:31.354" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:31.354" starttime="20140505 20:27:31.352"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.354" starttime="20140505 20:27:31.352"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.354" starttime="20140505 20:27:31.351"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.354" starttime="20140505 20:27:31.343"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:31.356" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:31.356" starttime="20140505 20:27:31.356"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.356" starttime="20140505 20:27:31.355"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.357" starttime="20140505 20:27:31.354"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.357" starttime="20140505 20:27:31.343"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:31.359" starttime="20140505 20:27:31.359"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.359" starttime="20140505 20:27:31.358"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:31.360" starttime="20140505 20:27:31.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:31.862" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:31.862" starttime="20140505 20:27:31.361"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:31.866" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"result" : []
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"result" : []
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"result" : []
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"result" : []
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"result" : []
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"result" : []
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"result" : []
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"result" : []
		}
	]
}
}</msg>
<msg timestamp="20140505 20:27:31.866" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"r...</msg>
<status status="PASS" endtime="20140505 20:27:31.866" starttime="20140505 20:27:31.862"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:31.868" starttime="20140505 20:27:31.867"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.868" starttime="20140505 20:27:31.866"></status>
</kw>
<msg timestamp="20140505 20:27:31.868" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"r...</msg>
<status status="PASS" endtime="20140505 20:27:31.868" starttime="20140505 20:27:31.358"></status>
</kw>
<msg timestamp="20140505 20:27:31.869" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"r...</msg>
<status status="PASS" endtime="20140505 20:27:31.869" starttime="20140505 20:27:31.357"></status>
</kw>
<kw type="kw" name="Status OK Has Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:31.872" starttime="20140505 20:27:31.871"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:31.875" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:31.875" starttime="20140505 20:27:31.874"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:31.876" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:31.876" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:31.876" starttime="20140505 20:27:31.875"></status>
</kw>
<msg timestamp="20140505 20:27:31.876" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:31.876" starttime="20140505 20:27:31.873"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:31.877" starttime="20140505 20:27:31.876"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.877" starttime="20140505 20:27:31.872"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:31.881" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [], u'type': u'int', u'name': u'batch', u'matrix': False}, {u'result': [], u'type': u'int', u'name': u'epoch', u'matrix': False}, {u'result': [], u'type': u'int', u'name': u'trial', u'matrix': False}, {u'result': [], u'type': u'String', u'name': u'trial_name', u'matrix': False}, {u'result': [], u'type': u'String', u'name': u'group_name', u'matrix': False}, {u'result': [], u'type': u'int', u'name': u'phase_no', u'matrix': False}, {u'result': [], u'type': u'float', u'name': u'minus_cycles', u'matrix': False}, {u'result': [], u'type': u'float', u'name': u'sse', u'matrix': False}, {u'result': [], u'type': u'float', u'name': u'ext_rew', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:31.881" starttime="20140505 20:27:31.879"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.881" starttime="20140505 20:27:31.878"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.881" starttime="20140505 20:27:31.877"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:31.884" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [], u'type': u'int', u'name': u'batch', u'matrix': False}, {u'result': [], u'type': u'int', u'name': u'epoch', u'matrix': False}, {u'result': [], u'type': u'int', u'name': u'trial', u'matrix': False}, {u'result': [], u'type': u'String', u'name': u'trial_name', u'matrix': False}, {u'result': [], u'type': u'String', u'name': u'group_name', u'matrix': False}, {u'result': [], u'type': u'int', u'name': u'phase_no', u'matrix': False}, {u'result': [], u'type': u'float', u'name': u'minus_cycles', u'matrix': False}, {u'result': [], u'type': u'float', u'name': u'sse', u'matrix': False}, {u'result': [], u'type': u'float', u'name': u'ext_rew', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:31.884" starttime="20140505 20:27:31.883"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.884" starttime="20140505 20:27:31.882"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.884" starttime="20140505 20:27:31.881"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.885" starttime="20140505 20:27:31.870"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:31.886" starttime="20140505 20:27:31.885"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.886" starttime="20140505 20:27:31.869"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/0</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:31.889" level="FAIL">JsonPointerException: index '0' is out of bounds</msg>
<status status="FAIL" endtime="20140505 20:27:31.889" starttime="20140505 20:27:31.888"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.889" starttime="20140505 20:27:31.887"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.889" starttime="20140505 20:27:31.886"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:31.889" critical="yes" starttime="20140505 20:27:30.833"></status>
</test>
<test id="s1-t33" name="AppendData">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] }, { "name": "trial_name", "values": ["mytrial"] }, { "name": "sse", "values": [10.2] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:31.895" starttime="20140505 20:27:31.894"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:31.895" starttime="20140505 20:27:31.893"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:31.898" starttime="20140505 20:27:31.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:32.400" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:32.400" starttime="20140505 20:27:31.898"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:32.401" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:32.401" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:32.401" starttime="20140505 20:27:32.400"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.403" starttime="20140505 20:27:32.402"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.403" starttime="20140505 20:27:32.401"></status>
</kw>
<msg timestamp="20140505 20:27:32.404" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:32.403" starttime="20140505 20:27:31.892"></status>
</kw>
<msg timestamp="20140505 20:27:32.404" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:32.404" starttime="20140505 20:27:31.891"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.406" starttime="20140505 20:27:32.406"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:32.409" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:32.409" starttime="20140505 20:27:32.408"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:32.410" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:32.410" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:32.410" starttime="20140505 20:27:32.409"></status>
</kw>
<msg timestamp="20140505 20:27:32.410" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:32.410" starttime="20140505 20:27:32.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.411" starttime="20140505 20:27:32.411"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.411" starttime="20140505 20:27:32.407"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:32.414" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:32.414" starttime="20140505 20:27:32.413"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.414" starttime="20140505 20:27:32.412"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.414" starttime="20140505 20:27:32.412"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:32.416" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:32.416" starttime="20140505 20:27:32.415"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.416" starttime="20140505 20:27:32.415"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.416" starttime="20140505 20:27:32.414"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.417" starttime="20140505 20:27:32.405"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:32.419" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:32.419" starttime="20140505 20:27:32.418"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.419" starttime="20140505 20:27:32.418"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.419" starttime="20140505 20:27:32.417"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.419" starttime="20140505 20:27:32.404"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.422" starttime="20140505 20:27:32.422"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.422" starttime="20140505 20:27:32.421"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.423" starttime="20140505 20:27:32.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:32.925" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:32.925" starttime="20140505 20:27:32.423"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:32.928" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [7]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"result" : [9]
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"result" : [0]
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"result" : ["mytrial"]
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"result" : [""]
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"result" : [0]
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"result" : [0]
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"result" : [10.2]
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"result" : [0]
		}
	]
}
}</msg>
<msg timestamp="20140505 20:27:32.929" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [7]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140505 20:27:32.928" starttime="20140505 20:27:32.925"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.930" starttime="20140505 20:27:32.930"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.930" starttime="20140505 20:27:32.929"></status>
</kw>
<msg timestamp="20140505 20:27:32.930" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [7]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140505 20:27:32.930" starttime="20140505 20:27:32.420"></status>
</kw>
<msg timestamp="20140505 20:27:32.931" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [7]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140505 20:27:32.931" starttime="20140505 20:27:32.419"></status>
</kw>
<kw type="kw" name="Status OK Has Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.933" starttime="20140505 20:27:32.933"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:32.935" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:32.935" starttime="20140505 20:27:32.935"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:32.936" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:32.936" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:32.936" starttime="20140505 20:27:32.935"></status>
</kw>
<msg timestamp="20140505 20:27:32.936" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:32.936" starttime="20140505 20:27:32.934"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.937" starttime="20140505 20:27:32.936"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.937" starttime="20140505 20:27:32.933"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:32.939" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [7], u'type': u'int', u'name': u'batch', u'matrix': False}, {u'result': [9], u'type': u'int', u'name': u'epoch', u'matrix': False}, {u'result': [0], u'type': u'int', u'name': u'trial', u'matrix': False}, {u'result': [u'mytrial'], u'type': u'String', u'name': u'trial_name', u'matrix': False}, {u'result': [u''], u'type': u'String', u'name': u'group_name', u'matrix': False}, {u'result': [0], u'type': u'int', u'name': u'phase_no', u'matrix': False}, {u'result': [0], u'type': u'float', u'name': u'minus_cycles', u'matrix': False}, {u'result': [10.2], u'type': u'float', u'name': u'sse', u'matrix': False}, {u'result': [0], u'type': u'float', u'name': u'ext_rew', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:32.940" starttime="20140505 20:27:32.938"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.940" starttime="20140505 20:27:32.938"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.940" starttime="20140505 20:27:32.937"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:32.942" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [7], u'type': u'int', u'name': u'batch', u'matrix': False}, {u'result': [9], u'type': u'int', u'name': u'epoch', u'matrix': False}, {u'result': [0], u'type': u'int', u'name': u'trial', u'matrix': False}, {u'result': [u'mytrial'], u'type': u'String', u'name': u'trial_name', u'matrix': False}, {u'result': [u''], u'type': u'String', u'name': u'group_name', u'matrix': False}, {u'result': [0], u'type': u'int', u'name': u'phase_no', u'matrix': False}, {u'result': [0], u'type': u'float', u'name': u'minus_cycles', u'matrix': False}, {u'result': [10.2], u'type': u'float', u'name': u'sse', u'matrix': False}, {u'result': [0], u'type': u'float', u'name': u'ext_rew', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:32.942" starttime="20140505 20:27:32.941"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.942" starttime="20140505 20:27:32.941"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.942" starttime="20140505 20:27:32.940"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.942" starttime="20140505 20:27:32.932"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.944" starttime="20140505 20:27:32.943"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.944" starttime="20140505 20:27:32.931"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/0</arg>
<arg>7</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.945" starttime="20140505 20:27:32.945"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/result/0</arg>
<arg>9</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.946" starttime="20140505 20:27:32.945"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/3/result/0</arg>
<arg>mytrial</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:32.948" level="INFO">${value} = "mytrial"</msg>
<status status="PASS" endtime="20140505 20:27:32.948" starttime="20140505 20:27:32.948"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:32.949" level="INFO">${match} = "mytrial"</msg>
<msg timestamp="20140505 20:27:32.949" level="INFO">${output} = mytrial</msg>
<status status="PASS" endtime="20140505 20:27:32.949" starttime="20140505 20:27:32.948"></status>
</kw>
<msg timestamp="20140505 20:27:32.949" level="INFO">${value} = mytrial</msg>
<status status="PASS" endtime="20140505 20:27:32.949" starttime="20140505 20:27:32.947"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.950" starttime="20140505 20:27:32.949"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.950" starttime="20140505 20:27:32.946"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/7/result/0</arg>
<arg>10.2</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.951" starttime="20140505 20:27:32.950"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:32.951" critical="yes" starttime="20140505 20:27:31.890"></status>
</test>
<test id="s1-t34" name="SetData Add Column">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "create": true, "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [8] }, { "name": "epoch", "values": [10] }, { "name": "trial_name", "values": ["mytrial2"] }, { "name": "sse", "values": [10.3] }, { "name": "new_col", "values": ["new_col_value"] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.955" starttime="20140505 20:27:32.954"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:32.955" starttime="20140505 20:27:32.954"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:32.956" starttime="20140505 20:27:32.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:33.457" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:33.458" starttime="20140505 20:27:32.956"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:33.459" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:33.459" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:33.459" starttime="20140505 20:27:33.458"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:33.460" starttime="20140505 20:27:33.460"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.460" starttime="20140505 20:27:33.459"></status>
</kw>
<msg timestamp="20140505 20:27:33.461" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:33.461" starttime="20140505 20:27:32.953"></status>
</kw>
<msg timestamp="20140505 20:27:33.461" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:33.461" starttime="20140505 20:27:32.952"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:33.463" starttime="20140505 20:27:33.463"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:33.465" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:33.465" starttime="20140505 20:27:33.465"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:33.466" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:33.466" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:33.466" starttime="20140505 20:27:33.466"></status>
</kw>
<msg timestamp="20140505 20:27:33.467" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:33.466" starttime="20140505 20:27:33.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:33.467" starttime="20140505 20:27:33.467"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.467" starttime="20140505 20:27:33.463"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:33.469" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:33.469" starttime="20140505 20:27:33.469"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.470" starttime="20140505 20:27:33.468"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.470" starttime="20140505 20:27:33.468"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:33.472" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:33.472" starttime="20140505 20:27:33.471"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.472" starttime="20140505 20:27:33.471"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.472" starttime="20140505 20:27:33.470"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.472" starttime="20140505 20:27:33.462"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:33.474" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:33.474" starttime="20140505 20:27:33.473"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.474" starttime="20140505 20:27:33.473"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.474" starttime="20140505 20:27:33.472"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.475" starttime="20140505 20:27:33.461"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:33.477" starttime="20140505 20:27:33.477"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.477" starttime="20140505 20:27:33.476"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:33.478" starttime="20140505 20:27:33.478"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:33.979" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:33.980" starttime="20140505 20:27:33.478"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:33.983" level="INFO">{"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [8]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"result" : [10]
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"result" : [0]
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"result" : ["mytrial2"]
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"result" : [""]
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"result" : [0]
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"result" : [0]
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"result" : [10.3]
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"result" : [0]
		},
		{
			"name" : "new_col",
			"type" : "String",
			"matrix" : false,
			"result" : ["new_col_value"]
		}
	]
}
}</msg>
<msg timestamp="20140505 20:27:33.983" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [8]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140505 20:27:33.983" starttime="20140505 20:27:33.980"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:33.985" starttime="20140505 20:27:33.985"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.985" starttime="20140505 20:27:33.983"></status>
</kw>
<msg timestamp="20140505 20:27:33.986" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [8]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140505 20:27:33.985" starttime="20140505 20:27:33.475"></status>
</kw>
<msg timestamp="20140505 20:27:33.986" level="INFO">${output} = {"status":"OK", "result": {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"result" : [8]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"...</msg>
<status status="PASS" endtime="20140505 20:27:33.986" starttime="20140505 20:27:33.475"></status>
</kw>
<kw type="kw" name="Status OK Has Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:33.988" starttime="20140505 20:27:33.988"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:33.991" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:33.991" starttime="20140505 20:27:33.990"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:33.991" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:33.992" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:33.991" starttime="20140505 20:27:33.991"></status>
</kw>
<msg timestamp="20140505 20:27:33.992" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:33.992" starttime="20140505 20:27:33.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:33.993" starttime="20140505 20:27:33.992"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.993" starttime="20140505 20:27:33.988"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:33.995" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [8], u'type': u'int', u'name': u'batch', u'matrix': False}, {u'result': [10], u'type': u'int', u'name': u'epoch', u'matrix': False}, {u'result': [0], u'type': u'int', u'name': u'trial', u'matrix': False}, {u'result': [u'mytrial2'], u'type': u'String', u'name': u'trial_name', u'matrix': False}, {u'result': [u''], u'type': u'String', u'name': u'group_name', u'matrix': False}, {u'result': [0], u'type': u'int', u'name': u'phase_no', u'matrix': False}, {u'result': [0], u'type': u'float', u'name': u'minus_cycles', u'matrix': False}, {u'result': [10.3], u'type': u'float', u'name': u'sse', u'matrix': False}, {u'result': [0], u'type': u'float', u'name': u'ext_rew', u'matrix': False}, {u'result': [u'new_col_value'], u'type': u'String', u'name': u'new_col', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:33.996" starttime="20140505 20:27:33.994"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.996" starttime="20140505 20:27:33.994"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:33.996" starttime="20140505 20:27:33.993"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:33.999" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': {u'columns': [{u'result': [8], u'type': u'int', u'name': u'batch', u'matrix': False}, {u'result': [10], u'type': u'int', u'name': u'epoch', u'matrix': False}, {u'result': [0], u'type': u'int', u'name': u'trial', u'matrix': False}, {u'result': [u'mytrial2'], u'type': u'String', u'name': u'trial_name', u'matrix': False}, {u'result': [u''], u'type': u'String', u'name': u'group_name', u'matrix': False}, {u'result': [0], u'type': u'int', u'name': u'phase_no', u'matrix': False}, {u'result': [0], u'type': u'float', u'name': u'minus_cycles', u'matrix': False}, {u'result': [10.3], u'type': u'float', u'name': u'sse', u'matrix': False}, {u'result': [0], u'type': u'float', u'name': u'ext_rew', u'matrix': False}, {u'result': [u'new_col_value'], u'type': u'String', u'name': u'new_col', u'matrix': False}]}}</msg>
<status status="FAIL" endtime="20140505 20:27:34.000" starttime="20140505 20:27:33.998"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.000" starttime="20140505 20:27:33.998"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.000" starttime="20140505 20:27:33.997"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.000" starttime="20140505 20:27:33.987"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.001" starttime="20140505 20:27:34.001"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.002" starttime="20140505 20:27:33.986"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/0/result/0</arg>
<arg>8</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.002" starttime="20140505 20:27:34.002"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/1/result/0</arg>
<arg>10</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.003" starttime="20140505 20:27:34.003"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/3/result/0</arg>
<arg>mytrial2</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:34.006" level="INFO">${value} = "mytrial2"</msg>
<status status="PASS" endtime="20140505 20:27:34.006" starttime="20140505 20:27:34.005"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:34.007" level="INFO">${match} = "mytrial2"</msg>
<msg timestamp="20140505 20:27:34.007" level="INFO">${output} = mytrial2</msg>
<status status="PASS" endtime="20140505 20:27:34.006" starttime="20140505 20:27:34.006"></status>
</kw>
<msg timestamp="20140505 20:27:34.007" level="INFO">${value} = mytrial2</msg>
<status status="PASS" endtime="20140505 20:27:34.007" starttime="20140505 20:27:34.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.008" starttime="20140505 20:27:34.007"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.008" starttime="20140505 20:27:34.003"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/7/result/0</arg>
<arg>10.3</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.009" starttime="20140505 20:27:34.008"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result/columns/9/result/0</arg>
<arg>new_col_value</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:34.012" level="INFO">${value} = "new_col_value"</msg>
<status status="PASS" endtime="20140505 20:27:34.012" starttime="20140505 20:27:34.011"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:34.013" level="INFO">${match} = "new_col_value"</msg>
<msg timestamp="20140505 20:27:34.013" level="INFO">${output} = new_col_value</msg>
<status status="PASS" endtime="20140505 20:27:34.013" starttime="20140505 20:27:34.012"></status>
</kw>
<msg timestamp="20140505 20:27:34.013" level="INFO">${value} = new_col_value</msg>
<status status="PASS" endtime="20140505 20:27:34.013" starttime="20140505 20:27:34.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.014" starttime="20140505 20:27:34.013"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.014" starttime="20140505 20:27:34.010"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:34.014" critical="yes" starttime="20140505 20:27:32.952"></status>
</test>
<test id="s1-t35" name="SetData Matrix Cell">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "table": "StdInputData", "row_from": 1, "cell": 12, "data": { "columns": [ { "name": "Output", "values": [0] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.018" starttime="20140505 20:27:34.018"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.019" starttime="20140505 20:27:34.017"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.020" starttime="20140505 20:27:34.019"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:34.521" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:34.521" starttime="20140505 20:27:34.020"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:34.522" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:34.522" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:34.522" starttime="20140505 20:27:34.522"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.524" starttime="20140505 20:27:34.524"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.524" starttime="20140505 20:27:34.523"></status>
</kw>
<msg timestamp="20140505 20:27:34.524" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:34.524" starttime="20140505 20:27:34.016"></status>
</kw>
<msg timestamp="20140505 20:27:34.525" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:34.525" starttime="20140505 20:27:34.016"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.527" starttime="20140505 20:27:34.526"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:34.529" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:34.529" starttime="20140505 20:27:34.528"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:34.530" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:34.530" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:34.530" starttime="20140505 20:27:34.529"></status>
</kw>
<msg timestamp="20140505 20:27:34.530" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:34.530" starttime="20140505 20:27:34.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.531" starttime="20140505 20:27:34.530"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.531" starttime="20140505 20:27:34.527"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:34.533" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:34.533" starttime="20140505 20:27:34.532"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.533" starttime="20140505 20:27:34.532"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.533" starttime="20140505 20:27:34.531"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:34.535" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:34.535" starttime="20140505 20:27:34.535"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.535" starttime="20140505 20:27:34.534"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.536" starttime="20140505 20:27:34.534"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.536" starttime="20140505 20:27:34.526"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:34.537" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:34.538" starttime="20140505 20:27:34.537"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.538" starttime="20140505 20:27:34.537"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.538" starttime="20140505 20:27:34.536"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.538" starttime="20140505 20:27:34.525"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 1, "rows": 1, "column": "Output", "cell": 12}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.541" starttime="20140505 20:27:34.540"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:34.541" starttime="20140505 20:27:34.540"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:34.542" starttime="20140505 20:27:34.541"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:35.043" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:35.043" starttime="20140505 20:27:34.542"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:35.044" level="INFO">{"status":"OK",
	"result" : 0

}</msg>
<msg timestamp="20140505 20:27:35.044" level="INFO">${output} = {"status":"OK",
	"result" : 0

}</msg>
<status status="PASS" endtime="20140505 20:27:35.044" starttime="20140505 20:27:35.044"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.046" starttime="20140505 20:27:35.045"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.046" starttime="20140505 20:27:35.044"></status>
</kw>
<msg timestamp="20140505 20:27:35.046" level="INFO">${output} = {"status":"OK",
	"result" : 0

}</msg>
<status status="PASS" endtime="20140505 20:27:35.046" starttime="20140505 20:27:34.539"></status>
</kw>
<msg timestamp="20140505 20:27:35.047" level="INFO">${output} = {"status":"OK",
	"result" : 0

}</msg>
<status status="PASS" endtime="20140505 20:27:35.047" starttime="20140505 20:27:34.538"></status>
</kw>
<kw type="kw" name="Status OK Equal Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.049" starttime="20140505 20:27:35.048"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:35.051" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:35.051" starttime="20140505 20:27:35.051"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:35.052" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:35.052" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:35.052" starttime="20140505 20:27:35.051"></status>
</kw>
<msg timestamp="20140505 20:27:35.052" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:35.052" starttime="20140505 20:27:35.050"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.053" starttime="20140505 20:27:35.053"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.053" starttime="20140505 20:27:35.049"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:35.055" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK', u'result': 0}</msg>
<status status="FAIL" endtime="20140505 20:27:35.055" starttime="20140505 20:27:35.054"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.055" starttime="20140505 20:27:35.054"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.056" starttime="20140505 20:27:35.053"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:35.058" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK', u'result': 0}</msg>
<status status="FAIL" endtime="20140505 20:27:35.058" starttime="20140505 20:27:35.057"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.058" starttime="20140505 20:27:35.057"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.058" starttime="20140505 20:27:35.056"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.058" starttime="20140505 20:27:35.048"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.059" starttime="20140505 20:27:35.058"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.059" starttime="20140505 20:27:35.047"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:35.059" critical="yes" starttime="20140505 20:27:34.015"></status>
</test>
<test id="s1-t36" name="GetData Table Not Found Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "NotATable"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.063" starttime="20140505 20:27:35.063"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.063" starttime="20140505 20:27:35.062"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.064" starttime="20140505 20:27:35.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:35.565" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:35.566" starttime="20140505 20:27:35.064"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:35.566" level="INFO">{
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}</msg>
<msg timestamp="20140505 20:27:35.567" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:35.567" starttime="20140505 20:27:35.566"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.568" starttime="20140505 20:27:35.568"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.568" starttime="20140505 20:27:35.567"></status>
</kw>
<msg timestamp="20140505 20:27:35.568" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:35.568" starttime="20140505 20:27:35.061"></status>
</kw>
<msg timestamp="20140505 20:27:35.569" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:35.569" starttime="20140505 20:27:35.061"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>5</arg>
<arg>Table 'NotATable' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.571" starttime="20140505 20:27:35.570"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:35.573" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:35.573" starttime="20140505 20:27:35.573"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:35.575" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:35.575" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:35.575" starttime="20140505 20:27:35.575"></status>
</kw>
<msg timestamp="20140505 20:27:35.576" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:35.575" starttime="20140505 20:27:35.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.576" starttime="20140505 20:27:35.576"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.576" starttime="20140505 20:27:35.571"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:35.579" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Table 'NotATable' not found", u'error': 5}</msg>
<status status="FAIL" endtime="20140505 20:27:35.579" starttime="20140505 20:27:35.578"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.579" starttime="20140505 20:27:35.577"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.579" starttime="20140505 20:27:35.576"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.579" starttime="20140505 20:27:35.570"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.580" starttime="20140505 20:27:35.579"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:35.582" level="INFO">${value} = "Table 'NotATable' not found"</msg>
<status status="PASS" endtime="20140505 20:27:35.582" starttime="20140505 20:27:35.582"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:35.584" level="INFO">${match} = "Table 'NotATable' not found"</msg>
<msg timestamp="20140505 20:27:35.584" level="INFO">${output} = Table 'NotATable' not found</msg>
<status status="PASS" endtime="20140505 20:27:35.584" starttime="20140505 20:27:35.582"></status>
</kw>
<msg timestamp="20140505 20:27:35.584" level="INFO">${value} = Table 'NotATable' not found</msg>
<status status="PASS" endtime="20140505 20:27:35.584" starttime="20140505 20:27:35.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.585" starttime="20140505 20:27:35.584"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.585" starttime="20140505 20:27:35.580"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.585" starttime="20140505 20:27:35.569"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:35.586" critical="yes" starttime="20140505 20:27:35.060"></status>
</test>
<test id="s1-t37" name="GetDataTableCell Table Not Found Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "NotATable", "row_from": 3, "rows": 1, "column": "Name"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.589" starttime="20140505 20:27:35.589"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:35.589" starttime="20140505 20:27:35.588"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:35.590" starttime="20140505 20:27:35.589"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:36.091" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:36.092" starttime="20140505 20:27:35.590"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:36.093" level="INFO">{
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}</msg>
<msg timestamp="20140505 20:27:36.093" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:36.093" starttime="20140505 20:27:36.092"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.094" starttime="20140505 20:27:36.094"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.094" starttime="20140505 20:27:36.093"></status>
</kw>
<msg timestamp="20140505 20:27:36.095" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:36.095" starttime="20140505 20:27:35.587"></status>
</kw>
<msg timestamp="20140505 20:27:36.095" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:36.095" starttime="20140505 20:27:35.587"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>5</arg>
<arg>Table 'NotATable' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.097" starttime="20140505 20:27:36.097"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:36.099" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:36.099" starttime="20140505 20:27:36.099"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:36.100" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:36.100" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:36.100" starttime="20140505 20:27:36.100"></status>
</kw>
<msg timestamp="20140505 20:27:36.100" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:36.100" starttime="20140505 20:27:36.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.101" starttime="20140505 20:27:36.101"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.101" starttime="20140505 20:27:36.097"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:36.104" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Table 'NotATable' not found", u'error': 5}</msg>
<status status="FAIL" endtime="20140505 20:27:36.104" starttime="20140505 20:27:36.103"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.104" starttime="20140505 20:27:36.102"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.105" starttime="20140505 20:27:36.101"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.105" starttime="20140505 20:27:36.096"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.105" starttime="20140505 20:27:36.105"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:36.108" level="INFO">${value} = "Table 'NotATable' not found"</msg>
<status status="PASS" endtime="20140505 20:27:36.108" starttime="20140505 20:27:36.107"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:36.108" level="INFO">${match} = "Table 'NotATable' not found"</msg>
<msg timestamp="20140505 20:27:36.108" level="INFO">${output} = Table 'NotATable' not found</msg>
<status status="PASS" endtime="20140505 20:27:36.108" starttime="20140505 20:27:36.108"></status>
</kw>
<msg timestamp="20140505 20:27:36.109" level="INFO">${value} = Table 'NotATable' not found</msg>
<status status="PASS" endtime="20140505 20:27:36.109" starttime="20140505 20:27:36.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.109" starttime="20140505 20:27:36.109"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.109" starttime="20140505 20:27:36.106"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.110" starttime="20140505 20:27:36.095"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:36.110" critical="yes" starttime="20140505 20:27:35.586"></status>
</test>
<test id="s1-t38" name="GetDataMatrixCell Table Not Found Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetDataMatrixCell", "table": "NotATable", "row_from": 3, "rows": 1, "column": "Input", "cell": 12}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.114" starttime="20140505 20:27:36.113"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.114" starttime="20140505 20:27:36.113"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.115" starttime="20140505 20:27:36.114"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:36.616" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:36.616" starttime="20140505 20:27:36.115"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:36.617" level="INFO">{
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}</msg>
<msg timestamp="20140505 20:27:36.617" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:36.617" starttime="20140505 20:27:36.617"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.619" starttime="20140505 20:27:36.619"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.619" starttime="20140505 20:27:36.618"></status>
</kw>
<msg timestamp="20140505 20:27:36.619" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:36.619" starttime="20140505 20:27:36.112"></status>
</kw>
<msg timestamp="20140505 20:27:36.620" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:36.620" starttime="20140505 20:27:36.111"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>5</arg>
<arg>Table 'NotATable' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.622" starttime="20140505 20:27:36.621"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:36.624" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:36.624" starttime="20140505 20:27:36.624"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:36.625" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:36.625" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:36.625" starttime="20140505 20:27:36.624"></status>
</kw>
<msg timestamp="20140505 20:27:36.625" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:36.625" starttime="20140505 20:27:36.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.626" starttime="20140505 20:27:36.625"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.626" starttime="20140505 20:27:36.622"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:36.628" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Table 'NotATable' not found", u'error': 5}</msg>
<status status="FAIL" endtime="20140505 20:27:36.628" starttime="20140505 20:27:36.627"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.628" starttime="20140505 20:27:36.627"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.628" starttime="20140505 20:27:36.626"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.628" starttime="20140505 20:27:36.621"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.629" starttime="20140505 20:27:36.629"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:36.631" level="INFO">${value} = "Table 'NotATable' not found"</msg>
<status status="PASS" endtime="20140505 20:27:36.631" starttime="20140505 20:27:36.631"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:36.632" level="INFO">${match} = "Table 'NotATable' not found"</msg>
<msg timestamp="20140505 20:27:36.632" level="INFO">${output} = Table 'NotATable' not found</msg>
<status status="PASS" endtime="20140505 20:27:36.632" starttime="20140505 20:27:36.632"></status>
</kw>
<msg timestamp="20140505 20:27:36.632" level="INFO">${value} = Table 'NotATable' not found</msg>
<status status="PASS" endtime="20140505 20:27:36.632" starttime="20140505 20:27:36.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.633" starttime="20140505 20:27:36.633"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.633" starttime="20140505 20:27:36.629"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.633" starttime="20140505 20:27:36.620"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:36.634" critical="yes" starttime="20140505 20:27:36.110"></status>
</test>
<test id="s1-t39" name="AppendData Table Not Found Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "AppendData", "table": "NotATable", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.637" starttime="20140505 20:27:36.637"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:36.637" starttime="20140505 20:27:36.636"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:36.638" starttime="20140505 20:27:36.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:37.139" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:37.140" starttime="20140505 20:27:36.638"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:37.141" level="INFO">{
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}</msg>
<msg timestamp="20140505 20:27:37.141" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:37.141" starttime="20140505 20:27:37.140"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.142" starttime="20140505 20:27:37.142"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.142" starttime="20140505 20:27:37.141"></status>
</kw>
<msg timestamp="20140505 20:27:37.143" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:37.143" starttime="20140505 20:27:36.636"></status>
</kw>
<msg timestamp="20140505 20:27:37.143" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:37.143" starttime="20140505 20:27:36.635"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>5</arg>
<arg>Table 'NotATable' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.145" starttime="20140505 20:27:37.145"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:37.148" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:37.148" starttime="20140505 20:27:37.147"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:37.149" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:37.149" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:37.149" starttime="20140505 20:27:37.148"></status>
</kw>
<msg timestamp="20140505 20:27:37.149" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:37.149" starttime="20140505 20:27:37.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.150" starttime="20140505 20:27:37.149"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.150" starttime="20140505 20:27:37.145"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:37.152" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Table 'NotATable' not found", u'error': 5}</msg>
<status status="FAIL" endtime="20140505 20:27:37.152" starttime="20140505 20:27:37.151"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.152" starttime="20140505 20:27:37.151"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.153" starttime="20140505 20:27:37.150"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.153" starttime="20140505 20:27:37.144"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.153" starttime="20140505 20:27:37.153"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:37.155" level="INFO">${value} = "Table 'NotATable' not found"</msg>
<status status="PASS" endtime="20140505 20:27:37.155" starttime="20140505 20:27:37.155"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:37.156" level="INFO">${match} = "Table 'NotATable' not found"</msg>
<msg timestamp="20140505 20:27:37.156" level="INFO">${output} = Table 'NotATable' not found</msg>
<status status="PASS" endtime="20140505 20:27:37.156" starttime="20140505 20:27:37.156"></status>
</kw>
<msg timestamp="20140505 20:27:37.157" level="INFO">${value} = Table 'NotATable' not found</msg>
<status status="PASS" endtime="20140505 20:27:37.156" starttime="20140505 20:27:37.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.157" starttime="20140505 20:27:37.157"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.157" starttime="20140505 20:27:37.153"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.157" starttime="20140505 20:27:37.144"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:37.158" critical="yes" starttime="20140505 20:27:36.634"></status>
</test>
<test id="s1-t40" name="SetData Table Not Found Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "table": "NotATable", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.161" starttime="20140505 20:27:37.161"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.161" starttime="20140505 20:27:37.160"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.162" starttime="20140505 20:27:37.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:37.663" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:37.664" starttime="20140505 20:27:37.162"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:37.664" level="INFO">{
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}</msg>
<msg timestamp="20140505 20:27:37.665" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:37.665" starttime="20140505 20:27:37.664"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.666" starttime="20140505 20:27:37.666"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.666" starttime="20140505 20:27:37.665"></status>
</kw>
<msg timestamp="20140505 20:27:37.667" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:37.667" starttime="20140505 20:27:37.160"></status>
</kw>
<msg timestamp="20140505 20:27:37.667" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:37.667" starttime="20140505 20:27:37.159"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>5</arg>
<arg>Table 'NotATable' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.669" starttime="20140505 20:27:37.669"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:37.671" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:37.671" starttime="20140505 20:27:37.671"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:37.672" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:37.672" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:37.672" starttime="20140505 20:27:37.672"></status>
</kw>
<msg timestamp="20140505 20:27:37.673" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:37.673" starttime="20140505 20:27:37.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.673" starttime="20140505 20:27:37.673"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.673" starttime="20140505 20:27:37.669"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:37.675" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Table 'NotATable' not found", u'error': 5}</msg>
<status status="FAIL" endtime="20140505 20:27:37.675" starttime="20140505 20:27:37.675"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.676" starttime="20140505 20:27:37.674"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.676" starttime="20140505 20:27:37.674"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.676" starttime="20140505 20:27:37.668"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.677" starttime="20140505 20:27:37.676"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:37.679" level="INFO">${value} = "Table 'NotATable' not found"</msg>
<status status="PASS" endtime="20140505 20:27:37.679" starttime="20140505 20:27:37.679"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:37.680" level="INFO">${match} = "Table 'NotATable' not found"</msg>
<msg timestamp="20140505 20:27:37.680" level="INFO">${output} = Table 'NotATable' not found</msg>
<status status="PASS" endtime="20140505 20:27:37.680" starttime="20140505 20:27:37.679"></status>
</kw>
<msg timestamp="20140505 20:27:37.680" level="INFO">${value} = Table 'NotATable' not found</msg>
<status status="PASS" endtime="20140505 20:27:37.680" starttime="20140505 20:27:37.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.681" starttime="20140505 20:27:37.681"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.681" starttime="20140505 20:27:37.677"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.681" starttime="20140505 20:27:37.667"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:37.681" critical="yes" starttime="20140505 20:27:37.158"></status>
</test>
<test id="s1-t41" name="RemoveData Table Not Found Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "RemoveData", "table": "NotATable"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.685" starttime="20140505 20:27:37.685"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:37.686" starttime="20140505 20:27:37.684"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:37.686" starttime="20140505 20:27:37.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:38.188" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:38.188" starttime="20140505 20:27:37.686"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:38.189" level="INFO">{
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}</msg>
<msg timestamp="20140505 20:27:38.189" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:38.189" starttime="20140505 20:27:38.188"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.190" starttime="20140505 20:27:38.190"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.191" starttime="20140505 20:27:38.189"></status>
</kw>
<msg timestamp="20140505 20:27:38.191" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:38.191" starttime="20140505 20:27:37.684"></status>
</kw>
<msg timestamp="20140505 20:27:38.191" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Table 'NotATable' not found",
	"error" : 5
}
</msg>
<status status="PASS" endtime="20140505 20:27:38.191" starttime="20140505 20:27:37.683"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>5</arg>
<arg>Table 'NotATable' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.194" starttime="20140505 20:27:38.193"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:38.196" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:38.196" starttime="20140505 20:27:38.195"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:38.197" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:38.197" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:38.197" starttime="20140505 20:27:38.196"></status>
</kw>
<msg timestamp="20140505 20:27:38.197" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:38.197" starttime="20140505 20:27:38.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.198" starttime="20140505 20:27:38.197"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.198" starttime="20140505 20:27:38.194"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:38.200" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Table 'NotATable' not found", u'error': 5}</msg>
<status status="FAIL" endtime="20140505 20:27:38.200" starttime="20140505 20:27:38.199"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.200" starttime="20140505 20:27:38.199"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.200" starttime="20140505 20:27:38.198"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.201" starttime="20140505 20:27:38.192"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.201" starttime="20140505 20:27:38.201"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:38.205" level="INFO">${value} = "Table 'NotATable' not found"</msg>
<status status="PASS" endtime="20140505 20:27:38.205" starttime="20140505 20:27:38.204"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:38.206" level="INFO">${match} = "Table 'NotATable' not found"</msg>
<msg timestamp="20140505 20:27:38.206" level="INFO">${output} = Table 'NotATable' not found</msg>
<status status="PASS" endtime="20140505 20:27:38.206" starttime="20140505 20:27:38.205"></status>
</kw>
<msg timestamp="20140505 20:27:38.206" level="INFO">${value} = Table 'NotATable' not found</msg>
<status status="PASS" endtime="20140505 20:27:38.206" starttime="20140505 20:27:38.204"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.207" starttime="20140505 20:27:38.206"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.207" starttime="20140505 20:27:38.201"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.207" starttime="20140505 20:27:38.192"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:38.207" critical="yes" starttime="20140505 20:27:37.682"></status>
</test>
<test id="s1-t42" name="GetDataTable Invalid Row Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "row_from": 1024, "rows": 1}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.211" starttime="20140505 20:27:38.211"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.211" starttime="20140505 20:27:38.210"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.212" starttime="20140505 20:27:38.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:38.713" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:38.714" starttime="20140505 20:27:38.212"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:38.715" level="INFO">{
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:38.715" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:38.715" starttime="20140505 20:27:38.714"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.716" starttime="20140505 20:27:38.716"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.716" starttime="20140505 20:27:38.715"></status>
</kw>
<msg timestamp="20140505 20:27:38.717" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:38.717" starttime="20140505 20:27:38.209"></status>
</kw>
<msg timestamp="20140505 20:27:38.717" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:38.717" starttime="20140505 20:27:38.209"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>row out of range</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.720" starttime="20140505 20:27:38.719"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:38.722" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:38.722" starttime="20140505 20:27:38.721"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:38.723" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:38.723" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:38.723" starttime="20140505 20:27:38.722"></status>
</kw>
<msg timestamp="20140505 20:27:38.723" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:38.723" starttime="20140505 20:27:38.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.724" starttime="20140505 20:27:38.723"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.724" starttime="20140505 20:27:38.720"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:38.726" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'row out of range', u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:38.726" starttime="20140505 20:27:38.725"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.726" starttime="20140505 20:27:38.725"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.726" starttime="20140505 20:27:38.724"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.726" starttime="20140505 20:27:38.718"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.727" starttime="20140505 20:27:38.727"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:38.729" level="INFO">${value} = "row out of range"</msg>
<status status="PASS" endtime="20140505 20:27:38.729" starttime="20140505 20:27:38.729"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:38.730" level="INFO">${match} = "row out of range"</msg>
<msg timestamp="20140505 20:27:38.734" level="INFO">${output} = row out of range</msg>
<status status="PASS" endtime="20140505 20:27:38.730" starttime="20140505 20:27:38.730"></status>
</kw>
<msg timestamp="20140505 20:27:38.734" level="INFO">${value} = row out of range</msg>
<status status="PASS" endtime="20140505 20:27:38.734" starttime="20140505 20:27:38.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.735" starttime="20140505 20:27:38.734"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.735" starttime="20140505 20:27:38.727"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.735" starttime="20140505 20:27:38.717"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:38.736" critical="yes" starttime="20140505 20:27:38.208"></status>
</test>
<test id="s1-t43" name="GetDataTableCell Invalid Row Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "row_from": 1024, "rows": 1, "column": "Name"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.740" starttime="20140505 20:27:38.739"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:38.740" starttime="20140505 20:27:38.738"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:38.741" starttime="20140505 20:27:38.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:39.242" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:39.242" starttime="20140505 20:27:38.741"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:39.243" level="INFO">{
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:39.244" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:39.244" starttime="20140505 20:27:39.243"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.246" starttime="20140505 20:27:39.245"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.246" starttime="20140505 20:27:39.244"></status>
</kw>
<msg timestamp="20140505 20:27:39.246" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:39.246" starttime="20140505 20:27:38.738"></status>
</kw>
<msg timestamp="20140505 20:27:39.247" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:39.246" starttime="20140505 20:27:38.737"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>row out of range</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.249" starttime="20140505 20:27:39.249"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:39.252" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:39.252" starttime="20140505 20:27:39.251"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:39.253" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:39.253" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:39.253" starttime="20140505 20:27:39.252"></status>
</kw>
<msg timestamp="20140505 20:27:39.253" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:39.253" starttime="20140505 20:27:39.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.254" starttime="20140505 20:27:39.254"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.254" starttime="20140505 20:27:39.249"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:39.257" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'row out of range', u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:39.257" starttime="20140505 20:27:39.256"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.257" starttime="20140505 20:27:39.256"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.258" starttime="20140505 20:27:39.255"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.258" starttime="20140505 20:27:39.248"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.258" starttime="20140505 20:27:39.258"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:39.261" level="INFO">${value} = "row out of range"</msg>
<status status="PASS" endtime="20140505 20:27:39.261" starttime="20140505 20:27:39.261"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:39.262" level="INFO">${match} = "row out of range"</msg>
<msg timestamp="20140505 20:27:39.262" level="INFO">${output} = row out of range</msg>
<status status="PASS" endtime="20140505 20:27:39.262" starttime="20140505 20:27:39.262"></status>
</kw>
<msg timestamp="20140505 20:27:39.263" level="INFO">${value} = row out of range</msg>
<status status="PASS" endtime="20140505 20:27:39.262" starttime="20140505 20:27:39.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.263" starttime="20140505 20:27:39.263"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.263" starttime="20140505 20:27:39.259"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.263" starttime="20140505 20:27:39.247"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:39.264" critical="yes" starttime="20140505 20:27:38.736"></status>
</test>
<test id="s1-t44" name="RemoveData Invalid Row Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "RemoveData", "table": "StdInputData", "row_from": 1024, "rows": 1}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.268" starttime="20140505 20:27:39.267"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.268" starttime="20140505 20:27:39.267"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.269" starttime="20140505 20:27:39.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:39.770" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:39.771" starttime="20140505 20:27:39.269"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:39.772" level="INFO">{
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:39.772" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:39.772" starttime="20140505 20:27:39.771"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.774" starttime="20140505 20:27:39.773"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.774" starttime="20140505 20:27:39.772"></status>
</kw>
<msg timestamp="20140505 20:27:39.774" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:39.774" starttime="20140505 20:27:39.266"></status>
</kw>
<msg timestamp="20140505 20:27:39.775" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:39.774" starttime="20140505 20:27:39.265"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>row out of range</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.777" starttime="20140505 20:27:39.776"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:39.779" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:39.779" starttime="20140505 20:27:39.778"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:39.780" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:39.780" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:39.780" starttime="20140505 20:27:39.779"></status>
</kw>
<msg timestamp="20140505 20:27:39.780" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:39.780" starttime="20140505 20:27:39.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.781" starttime="20140505 20:27:39.781"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.781" starttime="20140505 20:27:39.777"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:39.784" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'row out of range', u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:39.785" starttime="20140505 20:27:39.784"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.785" starttime="20140505 20:27:39.782"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.785" starttime="20140505 20:27:39.781"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.786" starttime="20140505 20:27:39.776"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.786" starttime="20140505 20:27:39.786"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:39.789" level="INFO">${value} = "row out of range"</msg>
<status status="PASS" endtime="20140505 20:27:39.789" starttime="20140505 20:27:39.788"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:39.790" level="INFO">${match} = "row out of range"</msg>
<msg timestamp="20140505 20:27:39.790" level="INFO">${output} = row out of range</msg>
<status status="PASS" endtime="20140505 20:27:39.789" starttime="20140505 20:27:39.789"></status>
</kw>
<msg timestamp="20140505 20:27:39.790" level="INFO">${value} = row out of range</msg>
<status status="PASS" endtime="20140505 20:27:39.790" starttime="20140505 20:27:39.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.791" starttime="20140505 20:27:39.790"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.791" starttime="20140505 20:27:39.787"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.791" starttime="20140505 20:27:39.775"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:39.791" critical="yes" starttime="20140505 20:27:39.265"></status>
</test>
<test id="s1-t45" name="SetData Invalid Row Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "table": "StdInputData", "row_from": 1024, "rows": 1}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.795" starttime="20140505 20:27:39.795"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:39.796" starttime="20140505 20:27:39.794"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:39.797" starttime="20140505 20:27:39.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:40.298" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:40.299" starttime="20140505 20:27:39.797"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:40.300" level="INFO">{
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:40.300" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:40.300" starttime="20140505 20:27:40.299"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:40.302" starttime="20140505 20:27:40.301"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.302" starttime="20140505 20:27:40.300"></status>
</kw>
<msg timestamp="20140505 20:27:40.302" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:40.302" starttime="20140505 20:27:39.794"></status>
</kw>
<msg timestamp="20140505 20:27:40.303" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "row out of range",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:40.302" starttime="20140505 20:27:39.793"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>row out of range</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:40.305" starttime="20140505 20:27:40.304"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:40.307" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:40.307" starttime="20140505 20:27:40.307"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:40.308" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:40.308" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:40.308" starttime="20140505 20:27:40.307"></status>
</kw>
<msg timestamp="20140505 20:27:40.308" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:40.308" starttime="20140505 20:27:40.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:40.309" starttime="20140505 20:27:40.309"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.309" starttime="20140505 20:27:40.305"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:40.311" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'row out of range', u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:40.312" starttime="20140505 20:27:40.311"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.312" starttime="20140505 20:27:40.310"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.312" starttime="20140505 20:27:40.310"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.312" starttime="20140505 20:27:40.304"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:40.313" starttime="20140505 20:27:40.312"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:40.315" level="INFO">${value} = "row out of range"</msg>
<status status="PASS" endtime="20140505 20:27:40.315" starttime="20140505 20:27:40.315"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:40.316" level="INFO">${match} = "row out of range"</msg>
<msg timestamp="20140505 20:27:40.316" level="INFO">${output} = row out of range</msg>
<status status="PASS" endtime="20140505 20:27:40.316" starttime="20140505 20:27:40.316"></status>
</kw>
<msg timestamp="20140505 20:27:40.317" level="INFO">${value} = row out of range</msg>
<status status="PASS" endtime="20140505 20:27:40.316" starttime="20140505 20:27:40.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:40.317" starttime="20140505 20:27:40.317"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.317" starttime="20140505 20:27:40.313"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.318" starttime="20140505 20:27:40.303"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:40.318" critical="yes" starttime="20140505 20:27:39.792"></status>
</test>
<test id="s1-t46" name="SetData Too Many Rows With One Row Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "RemoveData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:40.322" starttime="20140505 20:27:40.321"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.322" starttime="20140505 20:27:40.321"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:40.323" starttime="20140505 20:27:40.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:40.824" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:40.833" starttime="20140505 20:27:40.323"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:40.834" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:40.834" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:40.834" starttime="20140505 20:27:40.834"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:40.836" starttime="20140505 20:27:40.836"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.836" starttime="20140505 20:27:40.835"></status>
</kw>
<msg timestamp="20140505 20:27:40.837" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:40.836" starttime="20140505 20:27:40.320"></status>
</kw>
<msg timestamp="20140505 20:27:40.837" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:40.837" starttime="20140505 20:27:40.319"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:40.839" starttime="20140505 20:27:40.839"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:40.842" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:40.841" starttime="20140505 20:27:40.841"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:40.842" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:40.843" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:40.842" starttime="20140505 20:27:40.842"></status>
</kw>
<msg timestamp="20140505 20:27:40.844" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:40.844" starttime="20140505 20:27:40.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:40.845" starttime="20140505 20:27:40.844"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.845" starttime="20140505 20:27:40.839"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:40.847" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:40.847" starttime="20140505 20:27:40.846"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.847" starttime="20140505 20:27:40.846"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.848" starttime="20140505 20:27:40.845"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:40.850" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:40.850" starttime="20140505 20:27:40.849"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.850" starttime="20140505 20:27:40.849"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.850" starttime="20140505 20:27:40.848"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.850" starttime="20140505 20:27:40.838"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:40.852" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:40.853" starttime="20140505 20:27:40.852"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.853" starttime="20140505 20:27:40.851"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.853" starttime="20140505 20:27:40.850"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.853" starttime="20140505 20:27:40.837"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [8] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:40.856" starttime="20140505 20:27:40.856"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:40.856" starttime="20140505 20:27:40.855"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:40.857" starttime="20140505 20:27:40.856"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:41.359" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:41.359" starttime="20140505 20:27:40.858"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:41.360" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:41.360" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:41.360" starttime="20140505 20:27:41.360"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:41.362" starttime="20140505 20:27:41.362"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.362" starttime="20140505 20:27:41.360"></status>
</kw>
<msg timestamp="20140505 20:27:41.363" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:41.362" starttime="20140505 20:27:40.854"></status>
</kw>
<msg timestamp="20140505 20:27:41.363" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:41.363" starttime="20140505 20:27:40.853"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:41.365" starttime="20140505 20:27:41.364"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:41.367" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:41.367" starttime="20140505 20:27:41.367"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:41.368" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:41.368" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:41.368" starttime="20140505 20:27:41.367"></status>
</kw>
<msg timestamp="20140505 20:27:41.368" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:41.368" starttime="20140505 20:27:41.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:41.369" starttime="20140505 20:27:41.368"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.369" starttime="20140505 20:27:41.365"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:41.371" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:41.371" starttime="20140505 20:27:41.370"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.371" starttime="20140505 20:27:41.370"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.371" starttime="20140505 20:27:41.369"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:41.373" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:41.373" starttime="20140505 20:27:41.373"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.373" starttime="20140505 20:27:41.372"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.374" starttime="20140505 20:27:41.371"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.374" starttime="20140505 20:27:41.364"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:41.376" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:41.376" starttime="20140505 20:27:41.375"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.376" starttime="20140505 20:27:41.375"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.376" starttime="20140505 20:27:41.374"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.376" starttime="20140505 20:27:41.363"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [8, 9] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:41.379" starttime="20140505 20:27:41.379"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.379" starttime="20140505 20:27:41.378"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:41.380" starttime="20140505 20:27:41.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:41.882" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:41.882" starttime="20140505 20:27:41.380"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:41.883" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:41.883" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:41.883" starttime="20140505 20:27:41.882"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:41.884" starttime="20140505 20:27:41.884"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.884" starttime="20140505 20:27:41.883"></status>
</kw>
<msg timestamp="20140505 20:27:41.885" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:41.885" starttime="20140505 20:27:41.377"></status>
</kw>
<msg timestamp="20140505 20:27:41.885" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:41.885" starttime="20140505 20:27:41.377"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>SetData: cell range error</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:41.887" starttime="20140505 20:27:41.887"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:41.890" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:41.889" starttime="20140505 20:27:41.889"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:41.890" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:41.890" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:41.890" starttime="20140505 20:27:41.890"></status>
</kw>
<msg timestamp="20140505 20:27:41.891" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:41.891" starttime="20140505 20:27:41.888"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20140505 20:27:41.893" level="FAIL">'OK' does not match 'ERROR'</msg>
<status status="FAIL" endtime="20140505 20:27:41.893" starttime="20140505 20:27:41.891"></status>
</kw>
<status status="FAIL" endtime="20140505 20:27:41.893" starttime="20140505 20:27:41.887"></status>
</kw>
<status status="FAIL" endtime="20140505 20:27:41.893" starttime="20140505 20:27:41.886"></status>
</kw>
<status status="FAIL" endtime="20140505 20:27:41.893" starttime="20140505 20:27:41.885"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="FAIL" endtime="20140505 20:27:41.894" critical="yes" starttime="20140505 20:27:40.318">'OK' does not match 'ERROR'</status>
</test>
<test id="s1-t47" name="SetData Too Many Rows With No Rows Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "RemoveData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:41.898" starttime="20140505 20:27:41.897"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:41.898" starttime="20140505 20:27:41.896"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:41.898" starttime="20140505 20:27:41.898"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:42.400" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:42.400" starttime="20140505 20:27:41.899"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:42.401" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:42.401" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:42.401" starttime="20140505 20:27:42.400"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:42.403" starttime="20140505 20:27:42.402"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.403" starttime="20140505 20:27:42.401"></status>
</kw>
<msg timestamp="20140505 20:27:42.403" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:42.403" starttime="20140505 20:27:41.896"></status>
</kw>
<msg timestamp="20140505 20:27:42.403" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:42.403" starttime="20140505 20:27:41.895"></status>
</kw>
<kw type="kw" name="Status OK No Result">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="Status OK">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:42.405" starttime="20140505 20:27:42.405"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:42.408" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:42.408" starttime="20140505 20:27:42.407"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:42.409" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:42.409" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:42.408" starttime="20140505 20:27:42.408"></status>
</kw>
<msg timestamp="20140505 20:27:42.409" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:42.409" starttime="20140505 20:27:42.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:42.410" starttime="20140505 20:27:42.409"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.410" starttime="20140505 20:27:42.406"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:42.412" level="FAIL">JsonPointerException: member 'message' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:42.412" starttime="20140505 20:27:42.411"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.412" starttime="20140505 20:27:42.411"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.412" starttime="20140505 20:27:42.410"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:42.414" level="FAIL">JsonPointerException: member 'error' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:42.414" starttime="20140505 20:27:42.414"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.414" starttime="20140505 20:27:42.413"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.414" starttime="20140505 20:27:42.412"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.415" starttime="20140505 20:27:42.404"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:42.416" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'OK'}</msg>
<status status="FAIL" endtime="20140505 20:27:42.417" starttime="20140505 20:27:42.416"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.417" starttime="20140505 20:27:42.416"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.417" starttime="20140505 20:27:42.415"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.417" starttime="20140505 20:27:42.404"></status>
</kw>
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [8] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:42.420" starttime="20140505 20:27:42.419"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.420" starttime="20140505 20:27:42.419"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:42.421" starttime="20140505 20:27:42.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:42.922" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:42.922" starttime="20140505 20:27:42.421"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:42.923" level="INFO">{
	"status" : "OK"
}</msg>
<msg timestamp="20140505 20:27:42.923" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:42.923" starttime="20140505 20:27:42.923"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:42.925" starttime="20140505 20:27:42.924"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.925" starttime="20140505 20:27:42.924"></status>
</kw>
<msg timestamp="20140505 20:27:42.925" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:42.925" starttime="20140505 20:27:42.418"></status>
</kw>
<msg timestamp="20140505 20:27:42.926" level="INFO">${output} = {
	"status" : "OK"
}
</msg>
<status status="PASS" endtime="20140505 20:27:42.925" starttime="20140505 20:27:42.417"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>SetData: cell range error</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:42.928" starttime="20140505 20:27:42.927"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:42.930" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140505 20:27:42.930" starttime="20140505 20:27:42.929"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:42.931" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140505 20:27:42.931" level="INFO">${output} = OK</msg>
<status status="PASS" endtime="20140505 20:27:42.931" starttime="20140505 20:27:42.930"></status>
</kw>
<msg timestamp="20140505 20:27:42.931" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140505 20:27:42.931" starttime="20140505 20:27:42.929"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20140505 20:27:42.932" level="FAIL">'OK' does not match 'ERROR'</msg>
<status status="FAIL" endtime="20140505 20:27:42.932" starttime="20140505 20:27:42.931"></status>
</kw>
<status status="FAIL" endtime="20140505 20:27:42.932" starttime="20140505 20:27:42.928"></status>
</kw>
<status status="FAIL" endtime="20140505 20:27:42.933" starttime="20140505 20:27:42.927"></status>
</kw>
<status status="FAIL" endtime="20140505 20:27:42.933" starttime="20140505 20:27:42.926"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="FAIL" endtime="20140505 20:27:42.933" critical="yes" starttime="20140505 20:27:41.894">'OK' does not match 'ERROR'</status>
</test>
<test id="s1-t48" name="GetData Column Not Found Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "column": "NotAColumn"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:42.937" starttime="20140505 20:27:42.936"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:42.937" starttime="20140505 20:27:42.936"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:42.938" starttime="20140505 20:27:42.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:43.439" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:43.439" starttime="20140505 20:27:42.938"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:43.440" level="INFO">{
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:43.441" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:43.440" starttime="20140505 20:27:43.440"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.442" starttime="20140505 20:27:43.442"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.443" starttime="20140505 20:27:43.441"></status>
</kw>
<msg timestamp="20140505 20:27:43.443" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:43.443" starttime="20140505 20:27:42.935"></status>
</kw>
<msg timestamp="20140505 20:27:43.443" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:43.443" starttime="20140505 20:27:42.934"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>GetData: column not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.446" starttime="20140505 20:27:43.445"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:43.448" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:43.448" starttime="20140505 20:27:43.448"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:43.449" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:43.449" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:43.449" starttime="20140505 20:27:43.449"></status>
</kw>
<msg timestamp="20140505 20:27:43.450" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:43.449" starttime="20140505 20:27:43.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.451" starttime="20140505 20:27:43.450"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.451" starttime="20140505 20:27:43.446"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:43.453" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'GetData: column not found', u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:43.453" starttime="20140505 20:27:43.452"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.453" starttime="20140505 20:27:43.452"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.454" starttime="20140505 20:27:43.451"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.454" starttime="20140505 20:27:43.445"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.454" starttime="20140505 20:27:43.454"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:43.457" level="INFO">${value} = "GetData: column not found"</msg>
<status status="PASS" endtime="20140505 20:27:43.457" starttime="20140505 20:27:43.457"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:43.458" level="INFO">${match} = "GetData: column not found"</msg>
<msg timestamp="20140505 20:27:43.458" level="INFO">${output} = GetData: column not found</msg>
<status status="PASS" endtime="20140505 20:27:43.458" starttime="20140505 20:27:43.457"></status>
</kw>
<msg timestamp="20140505 20:27:43.458" level="INFO">${value} = GetData: column not found</msg>
<status status="PASS" endtime="20140505 20:27:43.458" starttime="20140505 20:27:43.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.459" starttime="20140505 20:27:43.459"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.459" starttime="20140505 20:27:43.455"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.460" starttime="20140505 20:27:43.444"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:43.460" critical="yes" starttime="20140505 20:27:42.934"></status>
</test>
<test id="s1-t49" name="GetDataTableCell Column Not Found Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "NotAColumn"}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.464" starttime="20140505 20:27:43.464"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.464" starttime="20140505 20:27:43.463"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.465" starttime="20140505 20:27:43.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:43.967" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:43.967" starttime="20140505 20:27:43.466"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:43.968" level="INFO">{
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:43.969" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:43.969" starttime="20140505 20:27:43.968"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.971" starttime="20140505 20:27:43.970"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.971" starttime="20140505 20:27:43.969"></status>
</kw>
<msg timestamp="20140505 20:27:43.971" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:43.971" starttime="20140505 20:27:43.462"></status>
</kw>
<msg timestamp="20140505 20:27:43.972" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "GetData: column not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:43.972" starttime="20140505 20:27:43.461"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>GetData: column not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.975" starttime="20140505 20:27:43.974"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:43.977" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:43.977" starttime="20140505 20:27:43.977"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:43.979" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:43.979" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:43.979" starttime="20140505 20:27:43.978"></status>
</kw>
<msg timestamp="20140505 20:27:43.979" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:43.979" starttime="20140505 20:27:43.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.980" starttime="20140505 20:27:43.979"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.980" starttime="20140505 20:27:43.975"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:43.983" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'GetData: column not found', u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:43.984" starttime="20140505 20:27:43.982"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.984" starttime="20140505 20:27:43.981"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.984" starttime="20140505 20:27:43.980"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.984" starttime="20140505 20:27:43.973"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.985" starttime="20140505 20:27:43.985"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:43.989" level="INFO">${value} = "GetData: column not found"</msg>
<status status="PASS" endtime="20140505 20:27:43.988" starttime="20140505 20:27:43.988"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:43.990" level="INFO">${match} = "GetData: column not found"</msg>
<msg timestamp="20140505 20:27:43.990" level="INFO">${output} = GetData: column not found</msg>
<status status="PASS" endtime="20140505 20:27:43.990" starttime="20140505 20:27:43.989"></status>
</kw>
<msg timestamp="20140505 20:27:43.990" level="INFO">${value} = GetData: column not found</msg>
<status status="PASS" endtime="20140505 20:27:43.990" starttime="20140505 20:27:43.987"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.991" starttime="20140505 20:27:43.990"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.991" starttime="20140505 20:27:43.986"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.991" starttime="20140505 20:27:43.972"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:43.992" critical="yes" starttime="20140505 20:27:43.460"></status>
</test>
<test id="s1-t50" name="GetDataMatrixCell Column Not Found Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "NotAColumn", "cell": 12}</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.997" starttime="20140505 20:27:43.997"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:43.997" starttime="20140505 20:27:43.995"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:43.998" starttime="20140505 20:27:43.998"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:44.500" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:44.500" starttime="20140505 20:27:43.999"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:44.501" level="INFO">{
	"status" : "ERROR",
	"message" : "GetDataMatrixCell: column not found",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:44.502" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "GetDataMatrixCell: column not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:44.502" starttime="20140505 20:27:44.501"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:44.504" starttime="20140505 20:27:44.503"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:44.504" starttime="20140505 20:27:44.502"></status>
</kw>
<msg timestamp="20140505 20:27:44.504" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "GetDataMatrixCell: column not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:44.504" starttime="20140505 20:27:43.994"></status>
</kw>
<msg timestamp="20140505 20:27:44.505" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "GetDataMatrixCell: column not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:44.505" starttime="20140505 20:27:43.994"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>GetDataMatrixCell: column not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:44.507" starttime="20140505 20:27:44.507"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:44.510" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:44.510" starttime="20140505 20:27:44.509"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:44.511" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:44.511" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:44.511" starttime="20140505 20:27:44.510"></status>
</kw>
<msg timestamp="20140505 20:27:44.511" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:44.511" starttime="20140505 20:27:44.508"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:44.512" starttime="20140505 20:27:44.512"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:44.512" starttime="20140505 20:27:44.508"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:44.514" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'GetDataMatrixCell: column not found', u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:44.515" starttime="20140505 20:27:44.514"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:44.515" starttime="20140505 20:27:44.513"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:44.515" starttime="20140505 20:27:44.512"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:44.515" starttime="20140505 20:27:44.506"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:44.516" starttime="20140505 20:27:44.516"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:44.518" level="INFO">${value} = "GetDataMatrixCell: column not found"</msg>
<status status="PASS" endtime="20140505 20:27:44.518" starttime="20140505 20:27:44.518"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:44.519" level="INFO">${match} = "GetDataMatrixCell: column not found"</msg>
<msg timestamp="20140505 20:27:44.519" level="INFO">${output} = GetDataMatrixCell: column not found</msg>
<status status="PASS" endtime="20140505 20:27:44.519" starttime="20140505 20:27:44.519"></status>
</kw>
<msg timestamp="20140505 20:27:44.520" level="INFO">${value} = GetDataMatrixCell: column not found</msg>
<status status="PASS" endtime="20140505 20:27:44.520" starttime="20140505 20:27:44.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:44.521" starttime="20140505 20:27:44.520"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:44.521" starttime="20140505 20:27:44.516"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:44.521" starttime="20140505 20:27:44.505"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:44.521" critical="yes" starttime="20140505 20:27:43.993"></status>
</test>
<test id="s1-t51" name="AppendData Column Not Found Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "NotAColumn", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:44.525" starttime="20140505 20:27:44.525"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:44.526" starttime="20140505 20:27:44.524"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:44.526" starttime="20140505 20:27:44.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:45.028" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:45.028" starttime="20140505 20:27:44.527"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:45.029" level="INFO">{
	"status" : "ERROR",
	"message" : "Column name 'NotAColumn' not found in data table 'TrialOutputData'",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:45.029" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column name 'NotAColumn' not found in data table 'TrialOutputData'",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:45.029" starttime="20140505 20:27:45.029"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.031" starttime="20140505 20:27:45.031"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.031" starttime="20140505 20:27:45.030"></status>
</kw>
<msg timestamp="20140505 20:27:45.031" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column name 'NotAColumn' not found in data table 'TrialOutputData'",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:45.031" starttime="20140505 20:27:44.523"></status>
</kw>
<msg timestamp="20140505 20:27:45.032" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column name 'NotAColumn' not found in data table 'TrialOutputData'",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:45.032" starttime="20140505 20:27:44.523"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>Column name 'NotAColumn' not found in data table 'TrialOutputData'</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.034" starttime="20140505 20:27:45.034"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:45.037" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:45.036" starttime="20140505 20:27:45.036"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:45.037" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:45.037" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:45.037" starttime="20140505 20:27:45.037"></status>
</kw>
<msg timestamp="20140505 20:27:45.038" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:45.038" starttime="20140505 20:27:45.035"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.038" starttime="20140505 20:27:45.038"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.038" starttime="20140505 20:27:45.034"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:45.040" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Column name 'NotAColumn' not found in data table 'TrialOutputData'", u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:45.040" starttime="20140505 20:27:45.040"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.041" starttime="20140505 20:27:45.039"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.041" starttime="20140505 20:27:45.039"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.041" starttime="20140505 20:27:45.033"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.041" starttime="20140505 20:27:45.041"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:45.045" level="INFO">${value} = "Column name 'NotAColumn' not found in data table 'TrialOutputData'"</msg>
<status status="PASS" endtime="20140505 20:27:45.045" starttime="20140505 20:27:45.044"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:45.045" level="INFO">${match} = "Column name 'NotAColumn' not found in data table 'TrialOutputData'"</msg>
<msg timestamp="20140505 20:27:45.045" level="INFO">${output} = Column name 'NotAColumn' not found in data table 'TrialOutputData'</msg>
<status status="PASS" endtime="20140505 20:27:45.045" starttime="20140505 20:27:45.045"></status>
</kw>
<msg timestamp="20140505 20:27:45.046" level="INFO">${value} = Column name 'NotAColumn' not found in data table 'TrialOutputData'</msg>
<status status="PASS" endtime="20140505 20:27:45.046" starttime="20140505 20:27:45.042"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.047" starttime="20140505 20:27:45.046"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.047" starttime="20140505 20:27:45.042"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.047" starttime="20140505 20:27:45.032"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:45.047" critical="yes" starttime="20140505 20:27:44.522"></status>
</test>
<test id="s1-t52" name="SetData Column Not Found No Create Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "table": "TrialOutputData", "data": { "columns": [ { "name": "NotAColumn", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.051" starttime="20140505 20:27:45.050"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.051" starttime="20140505 20:27:45.050"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.052" starttime="20140505 20:27:45.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:45.553" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:45.553" starttime="20140505 20:27:45.052"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:45.554" level="INFO">{
	"status" : "ERROR",
	"message" : "Column name 'NotAColumn' not found in data table 'TrialOutputData'",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:45.555" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column name 'NotAColumn' not found in data table 'TrialOutputData'",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:45.554" starttime="20140505 20:27:45.554"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.556" starttime="20140505 20:27:45.556"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.556" starttime="20140505 20:27:45.555"></status>
</kw>
<msg timestamp="20140505 20:27:45.556" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column name 'NotAColumn' not found in data table 'TrialOutputData'",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:45.556" starttime="20140505 20:27:45.049"></status>
</kw>
<msg timestamp="20140505 20:27:45.557" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column name 'NotAColumn' not found in data table 'TrialOutputData'",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:45.557" starttime="20140505 20:27:45.048"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>Column name 'NotAColumn' not found in data table 'TrialOutputData'</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.559" starttime="20140505 20:27:45.559"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:45.561" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:45.561" starttime="20140505 20:27:45.561"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:45.562" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:45.562" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:45.562" starttime="20140505 20:27:45.562"></status>
</kw>
<msg timestamp="20140505 20:27:45.563" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:45.562" starttime="20140505 20:27:45.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.564" starttime="20140505 20:27:45.564"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.564" starttime="20140505 20:27:45.559"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:45.566" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Column name 'NotAColumn' not found in data table 'TrialOutputData'", u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:45.567" starttime="20140505 20:27:45.566"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.567" starttime="20140505 20:27:45.565"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.567" starttime="20140505 20:27:45.565"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.567" starttime="20140505 20:27:45.558"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.568" starttime="20140505 20:27:45.567"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:45.570" level="INFO">${value} = "Column name 'NotAColumn' not found in data table 'TrialOutputData'"</msg>
<status status="PASS" endtime="20140505 20:27:45.570" starttime="20140505 20:27:45.570"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:45.571" level="INFO">${match} = "Column name 'NotAColumn' not found in data table 'TrialOutputData'"</msg>
<msg timestamp="20140505 20:27:45.571" level="INFO">${output} = Column name 'NotAColumn' not found in data table 'TrialOutputData'</msg>
<status status="PASS" endtime="20140505 20:27:45.571" starttime="20140505 20:27:45.571"></status>
</kw>
<msg timestamp="20140505 20:27:45.571" level="INFO">${value} = Column name 'NotAColumn' not found in data table 'TrialOutputData'</msg>
<status status="PASS" endtime="20140505 20:27:45.571" starttime="20140505 20:27:45.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.572" starttime="20140505 20:27:45.572"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.572" starttime="20140505 20:27:45.568"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.572" starttime="20140505 20:27:45.557"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:45.573" critical="yes" starttime="20140505 20:27:45.048"></status>
</test>
<test id="s1-t53" name="SetData Column Not Found Create False Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "create": false, "table": "TrialOutputData", "data": { "columns": [ { "name": "NotAColumn", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.577" starttime="20140505 20:27:45.576"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:45.577" starttime="20140505 20:27:45.575"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:45.578" starttime="20140505 20:27:45.577"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:46.079" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:46.079" starttime="20140505 20:27:45.578"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:46.080" level="INFO">{
	"status" : "ERROR",
	"message" : "Column name 'NotAColumn' not found in data table 'TrialOutputData'",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:46.081" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column name 'NotAColumn' not found in data table 'TrialOutputData'",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:46.081" starttime="20140505 20:27:46.080"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.082" starttime="20140505 20:27:46.082"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.082" starttime="20140505 20:27:46.081"></status>
</kw>
<msg timestamp="20140505 20:27:46.083" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column name 'NotAColumn' not found in data table 'TrialOutputData'",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:46.083" starttime="20140505 20:27:45.575"></status>
</kw>
<msg timestamp="20140505 20:27:46.083" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column name 'NotAColumn' not found in data table 'TrialOutputData'",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:46.083" starttime="20140505 20:27:45.574"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>Column name 'NotAColumn' not found in data table 'TrialOutputData'</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.085" starttime="20140505 20:27:46.085"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:46.088" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:46.088" starttime="20140505 20:27:46.087"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:46.088" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:46.088" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:46.088" starttime="20140505 20:27:46.088"></status>
</kw>
<msg timestamp="20140505 20:27:46.089" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:46.089" starttime="20140505 20:27:46.086"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.089" starttime="20140505 20:27:46.089"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.090" starttime="20140505 20:27:46.086"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:46.091" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Column name 'NotAColumn' not found in data table 'TrialOutputData'", u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:46.092" starttime="20140505 20:27:46.091"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.092" starttime="20140505 20:27:46.090"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.092" starttime="20140505 20:27:46.090"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.092" starttime="20140505 20:27:46.084"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.093" starttime="20140505 20:27:46.092"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:46.095" level="INFO">${value} = "Column name 'NotAColumn' not found in data table 'TrialOutputData'"</msg>
<status status="PASS" endtime="20140505 20:27:46.095" starttime="20140505 20:27:46.095"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:46.096" level="INFO">${match} = "Column name 'NotAColumn' not found in data table 'TrialOutputData'"</msg>
<msg timestamp="20140505 20:27:46.096" level="INFO">${output} = Column name 'NotAColumn' not found in data table 'TrialOutputData'</msg>
<status status="PASS" endtime="20140505 20:27:46.096" starttime="20140505 20:27:46.095"></status>
</kw>
<msg timestamp="20140505 20:27:46.096" level="INFO">${value} = Column name 'NotAColumn' not found in data table 'TrialOutputData'</msg>
<status status="PASS" endtime="20140505 20:27:46.096" starttime="20140505 20:27:46.094"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.097" starttime="20140505 20:27:46.097"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.097" starttime="20140505 20:27:46.093"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.097" starttime="20140505 20:27:46.083"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:46.098" critical="yes" starttime="20140505 20:27:45.573"></status>
</test>
<test id="s1-t54" name="SetData Matrix Cell Error">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "table": "StdInputData", "row_from": 1, "cell": 1024, "data": { "columns": [ { "name": "Output", "values": [0] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.102" starttime="20140505 20:27:46.101"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.102" starttime="20140505 20:27:46.100"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.102" starttime="20140505 20:27:46.102"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:46.604" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:46.604" starttime="20140505 20:27:46.103"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:46.605" level="INFO">{
	"status" : "ERROR",
	"message" : "SetData: cell range error",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:46.605" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "SetData: cell range error",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:46.605" starttime="20140505 20:27:46.604"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.607" starttime="20140505 20:27:46.606"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.607" starttime="20140505 20:27:46.605"></status>
</kw>
<msg timestamp="20140505 20:27:46.607" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "SetData: cell range error",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:46.607" starttime="20140505 20:27:46.100"></status>
</kw>
<msg timestamp="20140505 20:27:46.608" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "SetData: cell range error",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:46.607" starttime="20140505 20:27:46.099"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>SetData: cell range error</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.609" starttime="20140505 20:27:46.609"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:46.612" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:46.612" starttime="20140505 20:27:46.611"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:46.612" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:46.612" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:46.612" starttime="20140505 20:27:46.612"></status>
</kw>
<msg timestamp="20140505 20:27:46.613" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:46.613" starttime="20140505 20:27:46.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.613" starttime="20140505 20:27:46.613"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.614" starttime="20140505 20:27:46.610"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:46.615" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'SetData: cell range error', u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:46.615" starttime="20140505 20:27:46.615"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.616" starttime="20140505 20:27:46.614"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.616" starttime="20140505 20:27:46.614"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.616" starttime="20140505 20:27:46.608"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.617" starttime="20140505 20:27:46.616"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:46.619" level="INFO">${value} = "SetData: cell range error"</msg>
<status status="PASS" endtime="20140505 20:27:46.619" starttime="20140505 20:27:46.618"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:46.619" level="INFO">${match} = "SetData: cell range error"</msg>
<msg timestamp="20140505 20:27:46.619" level="INFO">${output} = SetData: cell range error</msg>
<status status="PASS" endtime="20140505 20:27:46.619" starttime="20140505 20:27:46.619"></status>
</kw>
<msg timestamp="20140505 20:27:46.620" level="INFO">${value} = SetData: cell range error</msg>
<status status="PASS" endtime="20140505 20:27:46.620" starttime="20140505 20:27:46.617"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.621" starttime="20140505 20:27:46.620"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.621" starttime="20140505 20:27:46.617"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.621" starttime="20140505 20:27:46.608"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:46.621" critical="yes" starttime="20140505 20:27:46.098"></status>
</test>
<test id="s1-t55" name="AppendData Bad Data Format (data)">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "AppendData", "table": "TrialOutputData", "dater": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.625" starttime="20140505 20:27:46.624"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:46.625" starttime="20140505 20:27:46.624"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:46.626" starttime="20140505 20:27:46.625"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:47.127" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:47.127" starttime="20140505 20:27:46.626"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:47.128" level="INFO">{
	"status" : "ERROR",
	"message" : "Unknown parameter: dater",
	"error" : 4
}</msg>
<msg timestamp="20140505 20:27:47.128" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown parameter: dater",
	"error" : 4
}
</msg>
<status status="PASS" endtime="20140505 20:27:47.128" starttime="20140505 20:27:47.128"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.130" starttime="20140505 20:27:47.129"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.130" starttime="20140505 20:27:47.128"></status>
</kw>
<msg timestamp="20140505 20:27:47.130" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown parameter: dater",
	"error" : 4
}
</msg>
<status status="PASS" endtime="20140505 20:27:47.130" starttime="20140505 20:27:46.623"></status>
</kw>
<msg timestamp="20140505 20:27:47.131" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown parameter: dater",
	"error" : 4
}
</msg>
<status status="PASS" endtime="20140505 20:27:47.130" starttime="20140505 20:27:46.622"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>4</arg>
<arg>Unknown parameter: dater</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.133" starttime="20140505 20:27:47.132"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:47.135" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:47.135" starttime="20140505 20:27:47.135"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:47.136" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:47.136" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:47.136" starttime="20140505 20:27:47.136"></status>
</kw>
<msg timestamp="20140505 20:27:47.137" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:47.137" starttime="20140505 20:27:47.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.137" starttime="20140505 20:27:47.137"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.137" starttime="20140505 20:27:47.133"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:47.140" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'Unknown parameter: dater', u'error': 4}</msg>
<status status="FAIL" endtime="20140505 20:27:47.140" starttime="20140505 20:27:47.139"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.140" starttime="20140505 20:27:47.138"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.140" starttime="20140505 20:27:47.138"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.140" starttime="20140505 20:27:47.132"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.141" starttime="20140505 20:27:47.141"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:47.144" level="INFO">${value} = "Unknown parameter: dater"</msg>
<status status="PASS" endtime="20140505 20:27:47.144" starttime="20140505 20:27:47.144"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:47.145" level="INFO">${match} = "Unknown parameter: dater"</msg>
<msg timestamp="20140505 20:27:47.145" level="INFO">${output} = Unknown parameter: dater</msg>
<status status="PASS" endtime="20140505 20:27:47.145" starttime="20140505 20:27:47.145"></status>
</kw>
<msg timestamp="20140505 20:27:47.146" level="INFO">${value} = Unknown parameter: dater</msg>
<status status="PASS" endtime="20140505 20:27:47.145" starttime="20140505 20:27:47.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.146" starttime="20140505 20:27:47.146"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.147" starttime="20140505 20:27:47.141"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.147" starttime="20140505 20:27:47.131"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:47.147" critical="yes" starttime="20140505 20:27:46.622"></status>
</test>
<test id="s1-t56" name="AppendData Bad Data Format (columns)">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "AppendData", "table": "TrialOutputData", "data": { "corumns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.151" starttime="20140505 20:27:47.150"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.151" starttime="20140505 20:27:47.150"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.152" starttime="20140505 20:27:47.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:47.653" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:47.653" starttime="20140505 20:27:47.152"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:47.654" level="INFO">{
	"status" : "ERROR",
	"message" : "Columns member not found in data",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:47.655" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Columns member not found in data",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:47.654" starttime="20140505 20:27:47.654"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.656" starttime="20140505 20:27:47.656"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.656" starttime="20140505 20:27:47.655"></status>
</kw>
<msg timestamp="20140505 20:27:47.657" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Columns member not found in data",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:47.656" starttime="20140505 20:27:47.149"></status>
</kw>
<msg timestamp="20140505 20:27:47.657" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Columns member not found in data",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:47.657" starttime="20140505 20:27:47.148"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>Columns member not found in data</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.659" starttime="20140505 20:27:47.659"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:47.662" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:47.662" starttime="20140505 20:27:47.661"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:47.663" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:47.664" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:47.662" starttime="20140505 20:27:47.662"></status>
</kw>
<msg timestamp="20140505 20:27:47.664" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:47.664" starttime="20140505 20:27:47.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.665" starttime="20140505 20:27:47.664"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.665" starttime="20140505 20:27:47.660"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:47.668" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'Columns member not found in data', u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:47.668" starttime="20140505 20:27:47.667"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.668" starttime="20140505 20:27:47.666"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.668" starttime="20140505 20:27:47.665"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.668" starttime="20140505 20:27:47.658"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.669" starttime="20140505 20:27:47.668"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:47.672" level="INFO">${value} = "Columns member not found in data"</msg>
<status status="PASS" endtime="20140505 20:27:47.672" starttime="20140505 20:27:47.671"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:47.673" level="INFO">${match} = "Columns member not found in data"</msg>
<msg timestamp="20140505 20:27:47.673" level="INFO">${output} = Columns member not found in data</msg>
<status status="PASS" endtime="20140505 20:27:47.673" starttime="20140505 20:27:47.672"></status>
</kw>
<msg timestamp="20140505 20:27:47.673" level="INFO">${value} = Columns member not found in data</msg>
<status status="PASS" endtime="20140505 20:27:47.673" starttime="20140505 20:27:47.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.674" starttime="20140505 20:27:47.673"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.674" starttime="20140505 20:27:47.669"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.674" starttime="20140505 20:27:47.657"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:47.675" critical="yes" starttime="20140505 20:27:47.148"></status>
</test>
<test id="s1-t57" name="AppendData Bad Data Format (name)">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "gname": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.679" starttime="20140505 20:27:47.678"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:47.679" starttime="20140505 20:27:47.677"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:47.680" starttime="20140505 20:27:47.679"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:48.181" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:48.181" starttime="20140505 20:27:47.680"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:48.183" level="INFO">{
	"status" : "ERROR",
	"message" : "Column member 'name' not found",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:48.183" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column member 'name' not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:48.183" starttime="20140505 20:27:48.182"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.185" starttime="20140505 20:27:48.184"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.185" starttime="20140505 20:27:48.183"></status>
</kw>
<msg timestamp="20140505 20:27:48.186" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column member 'name' not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:48.185" starttime="20140505 20:27:47.677"></status>
</kw>
<msg timestamp="20140505 20:27:48.186" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column member 'name' not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:48.186" starttime="20140505 20:27:47.676"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>Column member 'name' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.189" starttime="20140505 20:27:48.188"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:48.191" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:48.191" starttime="20140505 20:27:48.191"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:48.192" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:48.192" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:48.192" starttime="20140505 20:27:48.191"></status>
</kw>
<msg timestamp="20140505 20:27:48.192" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:48.192" starttime="20140505 20:27:48.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.193" starttime="20140505 20:27:48.193"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.193" starttime="20140505 20:27:48.189"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:48.196" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Column member 'name' not found", u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:48.196" starttime="20140505 20:27:48.195"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.196" starttime="20140505 20:27:48.195"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.196" starttime="20140505 20:27:48.194"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.197" starttime="20140505 20:27:48.187"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.198" starttime="20140505 20:27:48.197"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:48.200" level="INFO">${value} = "Column member 'name' not found"</msg>
<status status="PASS" endtime="20140505 20:27:48.200" starttime="20140505 20:27:48.200"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:48.201" level="INFO">${match} = "Column member 'name' not found"</msg>
<msg timestamp="20140505 20:27:48.201" level="INFO">${output} = Column member 'name' not found</msg>
<status status="PASS" endtime="20140505 20:27:48.201" starttime="20140505 20:27:48.201"></status>
</kw>
<msg timestamp="20140505 20:27:48.202" level="INFO">${value} = Column member 'name' not found</msg>
<status status="PASS" endtime="20140505 20:27:48.202" starttime="20140505 20:27:48.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.203" starttime="20140505 20:27:48.202"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.203" starttime="20140505 20:27:48.198"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.203" starttime="20140505 20:27:48.186"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:48.203" critical="yes" starttime="20140505 20:27:47.675"></status>
</test>
<test id="s1-t58" name="SetData Bad Data Format (data)">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "table": "TrialOutputData", "dater": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.208" starttime="20140505 20:27:48.207"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.208" starttime="20140505 20:27:48.206"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.209" starttime="20140505 20:27:48.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:48.710" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:48.711" starttime="20140505 20:27:48.209"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:48.712" level="INFO">{
	"status" : "ERROR",
	"message" : "Unknown parameter: dater",
	"error" : 4
}</msg>
<msg timestamp="20140505 20:27:48.712" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown parameter: dater",
	"error" : 4
}
</msg>
<status status="PASS" endtime="20140505 20:27:48.712" starttime="20140505 20:27:48.711"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.715" starttime="20140505 20:27:48.714"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.715" starttime="20140505 20:27:48.712"></status>
</kw>
<msg timestamp="20140505 20:27:48.715" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown parameter: dater",
	"error" : 4
}
</msg>
<status status="PASS" endtime="20140505 20:27:48.715" starttime="20140505 20:27:48.205"></status>
</kw>
<msg timestamp="20140505 20:27:48.716" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Unknown parameter: dater",
	"error" : 4
}
</msg>
<status status="PASS" endtime="20140505 20:27:48.716" starttime="20140505 20:27:48.205"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>4</arg>
<arg>Unknown parameter: dater</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.719" starttime="20140505 20:27:48.718"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:48.722" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:48.722" starttime="20140505 20:27:48.721"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:48.724" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:48.724" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:48.723" starttime="20140505 20:27:48.723"></status>
</kw>
<msg timestamp="20140505 20:27:48.724" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:48.724" starttime="20140505 20:27:48.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.725" starttime="20140505 20:27:48.724"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.725" starttime="20140505 20:27:48.719"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:48.729" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'Unknown parameter: dater', u'error': 4}</msg>
<status status="FAIL" endtime="20140505 20:27:48.729" starttime="20140505 20:27:48.728"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.729" starttime="20140505 20:27:48.727"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.729" starttime="20140505 20:27:48.726"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.729" starttime="20140505 20:27:48.717"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.730" starttime="20140505 20:27:48.730"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:48.733" level="INFO">${value} = "Unknown parameter: dater"</msg>
<status status="PASS" endtime="20140505 20:27:48.733" starttime="20140505 20:27:48.732"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:48.734" level="INFO">${match} = "Unknown parameter: dater"</msg>
<msg timestamp="20140505 20:27:48.734" level="INFO">${output} = Unknown parameter: dater</msg>
<status status="PASS" endtime="20140505 20:27:48.733" starttime="20140505 20:27:48.733"></status>
</kw>
<msg timestamp="20140505 20:27:48.734" level="INFO">${value} = Unknown parameter: dater</msg>
<status status="PASS" endtime="20140505 20:27:48.734" starttime="20140505 20:27:48.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.735" starttime="20140505 20:27:48.734"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.735" starttime="20140505 20:27:48.730"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.736" starttime="20140505 20:27:48.716"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:48.736" critical="yes" starttime="20140505 20:27:48.204"></status>
</test>
<test id="s1-t59" name="SetData Bad Data Format (columns)">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "table": "TrialOutputData", "data": { "corumns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.741" starttime="20140505 20:27:48.741"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:48.741" starttime="20140505 20:27:48.740"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:48.742" starttime="20140505 20:27:48.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:49.246" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:49.246" starttime="20140505 20:27:48.745"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:49.247" level="INFO">{
	"status" : "ERROR",
	"message" : "Columns member not found in data",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:49.247" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Columns member not found in data",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:49.247" starttime="20140505 20:27:49.247"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.249" starttime="20140505 20:27:49.248"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.249" starttime="20140505 20:27:49.247"></status>
</kw>
<msg timestamp="20140505 20:27:49.249" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Columns member not found in data",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:49.249" starttime="20140505 20:27:48.739"></status>
</kw>
<msg timestamp="20140505 20:27:49.250" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Columns member not found in data",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:49.249" starttime="20140505 20:27:48.738"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>Columns member not found in data</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.252" starttime="20140505 20:27:49.251"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:49.254" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:49.254" starttime="20140505 20:27:49.253"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:49.254" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:49.255" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:49.254" starttime="20140505 20:27:49.254"></status>
</kw>
<msg timestamp="20140505 20:27:49.255" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:49.255" starttime="20140505 20:27:49.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.255" starttime="20140505 20:27:49.255"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.256" starttime="20140505 20:27:49.252"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:49.258" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u'Columns member not found in data', u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:49.258" starttime="20140505 20:27:49.257"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.258" starttime="20140505 20:27:49.257"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.259" starttime="20140505 20:27:49.256"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.259" starttime="20140505 20:27:49.251"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.259" starttime="20140505 20:27:49.259"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:49.261" level="INFO">${value} = "Columns member not found in data"</msg>
<status status="PASS" endtime="20140505 20:27:49.261" starttime="20140505 20:27:49.261"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:49.262" level="INFO">${match} = "Columns member not found in data"</msg>
<msg timestamp="20140505 20:27:49.262" level="INFO">${output} = Columns member not found in data</msg>
<status status="PASS" endtime="20140505 20:27:49.262" starttime="20140505 20:27:49.262"></status>
</kw>
<msg timestamp="20140505 20:27:49.263" level="INFO">${value} = Columns member not found in data</msg>
<status status="PASS" endtime="20140505 20:27:49.262" starttime="20140505 20:27:49.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.264" starttime="20140505 20:27:49.264"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.264" starttime="20140505 20:27:49.259"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.264" starttime="20140505 20:27:49.250"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:49.265" critical="yes" starttime="20140505 20:27:48.737"></status>
</test>
<test id="s1-t60" name="SetData Bad Data Format (name)">
<kw type="kw" name="${output} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "SetData", "table": "TrialOutputData", "data": { "columns": [ { "gname": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${output} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.268" starttime="20140505 20:27:49.268"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.268" starttime="20140505 20:27:49.267"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.269" starttime="20140505 20:27:49.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140505 20:27:49.771" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140505 20:27:49.771" starttime="20140505 20:27:49.269"></status>
</kw>
<kw type="kw" name="${output} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140505 20:27:49.772" level="INFO">{
	"status" : "ERROR",
	"message" : "Column member 'name' not found",
	"error" : 7
}</msg>
<msg timestamp="20140505 20:27:49.772" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column member 'name' not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:49.772" starttime="20140505 20:27:49.771"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${output}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${verbose}</arg>
<arg>Log</arg>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.774" starttime="20140505 20:27:49.773"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.774" starttime="20140505 20:27:49.772"></status>
</kw>
<msg timestamp="20140505 20:27:49.774" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column member 'name' not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:49.774" starttime="20140505 20:27:49.266"></status>
</kw>
<msg timestamp="20140505 20:27:49.775" level="INFO">${output} = {
	"status" : "ERROR",
	"message" : "Column member 'name' not found",
	"error" : 7
}
</msg>
<status status="PASS" endtime="20140505 20:27:49.775" starttime="20140505 20:27:49.266"></status>
</kw>
<kw type="kw" name="Status Error Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>7</arg>
<arg>Column member 'name' not found</arg>
</arguments>
<kw type="kw" name="Status Error">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.777" starttime="20140505 20:27:49.777"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/status</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:49.780" level="INFO">${value} = "ERROR"</msg>
<status status="PASS" endtime="20140505 20:27:49.780" starttime="20140505 20:27:49.779"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:49.781" level="INFO">${match} = "ERROR"</msg>
<msg timestamp="20140505 20:27:49.781" level="INFO">${output} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:49.781" starttime="20140505 20:27:49.780"></status>
</kw>
<msg timestamp="20140505 20:27:49.781" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20140505 20:27:49.781" starttime="20140505 20:27:49.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.782" starttime="20140505 20:27:49.782"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.782" starttime="20140505 20:27:49.777"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/result</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:49.785" level="FAIL">JsonPointerException: member 'result' not found in {u'status': u'ERROR', u'message': u"Column member 'name' not found", u'error': 7}</msg>
<status status="FAIL" endtime="20140505 20:27:49.786" starttime="20140505 20:27:49.785"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.786" starttime="20140505 20:27:49.784"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.786" starttime="20140505 20:27:49.783"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.786" starttime="20140505 20:27:49.776"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${output}</arg>
<arg>/error</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.787" starttime="20140505 20:27:49.786"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${output}</arg>
<arg>/message</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140505 20:27:49.790" level="INFO">${value} = "Column member 'name' not found"</msg>
<status status="PASS" endtime="20140505 20:27:49.790" starttime="20140505 20:27:49.789"></status>
</kw>
<kw type="kw" name="${match}, ${output} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140505 20:27:49.791" level="INFO">${match} = "Column member 'name' not found"</msg>
<msg timestamp="20140505 20:27:49.791" level="INFO">${output} = Column member 'name' not found</msg>
<status status="PASS" endtime="20140505 20:27:49.791" starttime="20140505 20:27:49.790"></status>
</kw>
<msg timestamp="20140505 20:27:49.791" level="INFO">${value} = Column member 'name' not found</msg>
<status status="PASS" endtime="20140505 20:27:49.791" starttime="20140505 20:27:49.788"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.792" starttime="20140505 20:27:49.791"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.792" starttime="20140505 20:27:49.787"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:49.792" starttime="20140505 20:27:49.775"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140505 20:27:49.793" critical="yes" starttime="20140505 20:27:49.265"></status>
</test>
<kw type="teardown" name="Shutdown Emergent">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Telnet.Close All Connections">
<doc>Closes all open connections and empties the connection cache.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20140505 20:27:49.802" starttime="20140505 20:27:49.801"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2 sec</arg>
</arguments>
<msg timestamp="20140505 20:27:51.804" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20140505 20:27:51.804" starttime="20140505 20:27:49.803"></status>
</kw>
<kw type="kw" name="${output} = Process.Terminate Process">
<doc>Stops the process gracefully or forcefully.</doc>
<arguments>
<arg>${pid}</arg>
<arg>kill=true</arg>
</arguments>
<msg timestamp="20140505 20:27:51.805" level="INFO">Forcefully killing process.</msg>
<msg timestamp="20140505 20:27:51.906" level="INFO">Process completed.</msg>
<msg timestamp="20140505 20:27:51.906" level="INFO">${output} = &lt;result object with rc -9&gt;</msg>
<status status="PASS" endtime="20140505 20:27:51.906" starttime="20140505 20:27:51.805"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5 sec</arg>
</arguments>
<msg timestamp="20140505 20:27:56.907" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20140505 20:27:56.908" starttime="20140505 20:27:51.906"></status>
</kw>
<status status="PASS" endtime="20140505 20:27:56.908" starttime="20140505 20:27:49.801"></status>
</kw>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20140505 20:27:56.909" starttime="20140505 20:26:24.965"></status>
</suite>
<statistics>
<total>
<stat fail="2" pass="58">Critical Tests</stat>
<stat fail="2" pass="58">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="2" pass="58" id="s1" name="Server">Server</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>

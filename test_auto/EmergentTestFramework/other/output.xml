<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20140228 14:48:45.990" generator="Robot 2.8.4 (Python 2.7.3 on linux2)">
<suite source="/home/djilk/emergent/test_auto/EmergentTestFramework/other/server.txt" id="s1" name="Server">
<kw type="setup" name="Initialize Emergent">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -server -p ../test-projects/LeabraStd.proj</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140228 14:48:46.107" level="INFO">Starting process:
emergent -nogui -server -p ../test-projects/LeabraStd.proj</msg>
<msg timestamp="20140228 14:48:46.112" level="INFO">${pid} = 1</msg>
<status status="PASS" endtime="20140228 14:48:46.111" starttime="20140228 14:48:46.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${pid}</arg>
</arguments>
<msg timestamp="20140228 14:48:46.113" level="INFO">${pid} = 1</msg>
<status status="PASS" endtime="20140228 14:48:46.113" starttime="20140228 14:48:46.112"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4 sec</arg>
</arguments>
<msg timestamp="20140228 14:48:50.115" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20140228 14:48:50.115" starttime="20140228 14:48:46.113"></status>
</kw>
<kw type="kw" name="Telnet.Open Connection">
<doc>Opens a new Telnet connection to the given host and port.</doc>
<arguments>
<arg>127.0.0.1</arg>
<arg>port=5360</arg>
</arguments>
<msg timestamp="20140228 14:48:50.117" level="INFO">Opening connection to 127.0.0.1:5360 with prompt: None</msg>
<status status="PASS" endtime="20140228 14:48:50.125" starttime="20140228 14:48:50.115"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:50.125" starttime="20140228 14:48:46.106"></status>
</kw>
<test id="s1-t1" name="Connection">
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1 sec</arg>
</arguments>
<msg timestamp="20140228 14:48:51.136" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20140228 14:48:51.136" starttime="20140228 14:48:50.135"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:51.138" level="INFO">Emergent Server v6.3.6</msg>
<msg timestamp="20140228 14:48:51.138" level="INFO">${result} = Emergent Server v6.3.6
</msg>
<status status="PASS" endtime="20140228 14:48:51.138" starttime="20140228 14:48:51.137"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:51.139" level="WARN">Emergent Server v6.3.6
</msg>
<status status="PASS" endtime="20140228 14:48:51.140" starttime="20140228 14:48:51.139"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:51.140" starttime="20140228 14:48:51.138"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Emergent Server v6.</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:51.141" starttime="20140228 14:48:51.140"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140228 14:48:51.141" critical="yes" starttime="20140228 14:48:50.126"></status>
</test>
<test id="s1-t2" name="Native Test">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>GetRunState</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:51.145" level="WARN">[Sending] GetRunState</msg>
<status status="PASS" endtime="20140228 14:48:51.145" starttime="20140228 14:48:51.145"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:51.145" starttime="20140228 14:48:51.144"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:51.146" starttime="20140228 14:48:51.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:51.647" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:51.648" starttime="20140228 14:48:51.146"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:51.649" level="INFO">OK 4</msg>
<msg timestamp="20140228 14:48:51.649" level="INFO">${result} = OK 4
</msg>
<status status="PASS" endtime="20140228 14:48:51.649" starttime="20140228 14:48:51.648"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:51.651" level="WARN">[Received] OK 4
</msg>
<status status="PASS" endtime="20140228 14:48:51.651" starttime="20140228 14:48:51.650"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:51.651" starttime="20140228 14:48:51.649"></status>
</kw>
<msg timestamp="20140228 14:48:51.652" level="INFO">${result} = OK 4
</msg>
<status status="PASS" endtime="20140228 14:48:51.652" starttime="20140228 14:48:51.143"></status>
</kw>
<msg timestamp="20140228 14:48:51.652" level="INFO">${result} = OK 4
</msg>
<status status="PASS" endtime="20140228 14:48:51.652" starttime="20140228 14:48:51.143"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:51.653" starttime="20140228 14:48:51.653"></status>
</kw>
<kw type="kw" name="Message Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>4</arg>
</arguments>
<kw type="kw" name="${match}, ${message} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${result}</arg>
<arg>OK (.*)</arg>
</arguments>
<msg timestamp="20140228 14:48:51.656" level="INFO">${match} = OK 4</msg>
<msg timestamp="20140228 14:48:51.656" level="INFO">${message} = 4</msg>
<status status="PASS" endtime="20140228 14:48:51.656" starttime="20140228 14:48:51.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${message}</arg>
</arguments>
<msg timestamp="20140228 14:48:51.658" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140228 14:48:51.658" starttime="20140228 14:48:51.657"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:51.658" starttime="20140228 14:48:51.654"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140228 14:48:51.658" critical="yes" starttime="20140228 14:48:51.142"></status>
</test>
<test id="s1-t3" name="General RunState">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetRunState"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:51.666" level="WARN">[Sending] {"command": "GetRunState"}</msg>
<status status="PASS" endtime="20140228 14:48:51.666" starttime="20140228 14:48:51.666"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:51.667" starttime="20140228 14:48:51.662"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:51.668" starttime="20140228 14:48:51.667"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:52.170" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:52.170" starttime="20140228 14:48:51.668"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:52.171" level="INFO">{
	"status" : "OK",
	"message" : "4"
}</msg>
<msg timestamp="20140228 14:48:52.172" level="INFO">${result} = {
	"status" : "OK",
	"message" : "4"
}
</msg>
<status status="PASS" endtime="20140228 14:48:52.171" starttime="20140228 14:48:52.171"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:52.173" level="WARN">[Received] {
	"status" : "OK",
	"message" : "4"
}
</msg>
<status status="PASS" endtime="20140228 14:48:52.174" starttime="20140228 14:48:52.173"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:52.174" starttime="20140228 14:48:52.172"></status>
</kw>
<msg timestamp="20140228 14:48:52.175" level="INFO">${result} = {
	"status" : "OK",
	"message" : "4"
}
</msg>
<status status="PASS" endtime="20140228 14:48:52.175" starttime="20140228 14:48:51.661"></status>
</kw>
<msg timestamp="20140228 14:48:52.176" level="INFO">${result} = {
	"status" : "OK",
	"message" : "4"
}
</msg>
<status status="PASS" endtime="20140228 14:48:52.175" starttime="20140228 14:48:51.660"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:52.177" starttime="20140228 14:48:52.176"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:52.180" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140228 14:48:52.180" starttime="20140228 14:48:52.179"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:52.181" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140228 14:48:52.182" level="INFO">${result} = OK</msg>
<status status="PASS" endtime="20140228 14:48:52.181" starttime="20140228 14:48:52.181"></status>
</kw>
<msg timestamp="20140228 14:48:52.182" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140228 14:48:52.182" starttime="20140228 14:48:52.178"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:52.183" starttime="20140228 14:48:52.182"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:52.184" starttime="20140228 14:48:52.177"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/message</arg>
<arg>4</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:52.187" level="INFO">${value} = "4"</msg>
<status status="PASS" endtime="20140228 14:48:52.187" starttime="20140228 14:48:52.186"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:52.188" level="INFO">${match} = "4"</msg>
<msg timestamp="20140228 14:48:52.188" level="INFO">${result} = 4</msg>
<status status="PASS" endtime="20140228 14:48:52.188" starttime="20140228 14:48:52.187"></status>
</kw>
<msg timestamp="20140228 14:48:52.188" level="INFO">${value} = 4</msg>
<status status="PASS" endtime="20140228 14:48:52.188" starttime="20140228 14:48:52.185"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:52.189" starttime="20140228 14:48:52.189"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:52.190" starttime="20140228 14:48:52.184"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140228 14:48:52.190" critical="yes" starttime="20140228 14:48:51.659"></status>
</test>
<test id="s1-t4" name="Program RunState">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetRunState", "program": "LeabraBatch"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:52.195" level="WARN">[Sending] {"command": "GetRunState", "program": "LeabraBatch"}</msg>
<status status="PASS" endtime="20140228 14:48:52.197" starttime="20140228 14:48:52.195"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:52.197" starttime="20140228 14:48:52.194"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:52.198" starttime="20140228 14:48:52.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:52.700" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:52.700" starttime="20140228 14:48:52.199"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:52.701" level="INFO">{
	"status" : "OK",
	"message" : "4"
}</msg>
<msg timestamp="20140228 14:48:52.702" level="INFO">${result} = {
	"status" : "OK",
	"message" : "4"
}
</msg>
<status status="PASS" endtime="20140228 14:48:52.701" starttime="20140228 14:48:52.701"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:52.704" level="WARN">[Received] {
	"status" : "OK",
	"message" : "4"
}
</msg>
<status status="PASS" endtime="20140228 14:48:52.705" starttime="20140228 14:48:52.703"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:52.705" starttime="20140228 14:48:52.702"></status>
</kw>
<msg timestamp="20140228 14:48:52.705" level="INFO">${result} = {
	"status" : "OK",
	"message" : "4"
}
</msg>
<status status="PASS" endtime="20140228 14:48:52.705" starttime="20140228 14:48:52.193"></status>
</kw>
<msg timestamp="20140228 14:48:52.706" level="INFO">${result} = {
	"status" : "OK",
	"message" : "4"
}
</msg>
<status status="PASS" endtime="20140228 14:48:52.706" starttime="20140228 14:48:52.192"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:52.707" starttime="20140228 14:48:52.706"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:52.710" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140228 14:48:52.710" starttime="20140228 14:48:52.709"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:52.711" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140228 14:48:52.711" level="INFO">${result} = OK</msg>
<status status="PASS" endtime="20140228 14:48:52.711" starttime="20140228 14:48:52.710"></status>
</kw>
<msg timestamp="20140228 14:48:52.712" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140228 14:48:52.712" starttime="20140228 14:48:52.708"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:52.713" starttime="20140228 14:48:52.712"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:52.713" starttime="20140228 14:48:52.707"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/message</arg>
<arg>4</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:52.717" level="INFO">${value} = "4"</msg>
<status status="PASS" endtime="20140228 14:48:52.717" starttime="20140228 14:48:52.716"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:52.718" level="INFO">${match} = "4"</msg>
<msg timestamp="20140228 14:48:52.718" level="INFO">${result} = 4</msg>
<status status="PASS" endtime="20140228 14:48:52.718" starttime="20140228 14:48:52.718"></status>
</kw>
<msg timestamp="20140228 14:48:52.719" level="INFO">${value} = 4</msg>
<status status="PASS" endtime="20140228 14:48:52.718" starttime="20140228 14:48:52.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:52.719" starttime="20140228 14:48:52.719"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:52.719" starttime="20140228 14:48:52.713"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140228 14:48:52.720" critical="yes" starttime="20140228 14:48:52.191"></status>
</test>
<test id="s1-t5" name="Read Full Data Table">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:52.724" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData"}</msg>
<status status="PASS" endtime="20140228 14:48:52.725" starttime="20140228 14:48:52.724"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:52.725" starttime="20140228 14:48:52.722"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:52.727" starttime="20140228 14:48:52.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.228" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:53.228" starttime="20140228 14:48:52.727"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:53.235" level="INFO">{
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 1],
					[1, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				]
			]
		}
	]
}</msg>
<msg timestamp="20140228 14:48:53.236" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"name" : "Input",
			"type" ...</msg>
<status status="PASS" endtime="20140228 14:48:53.235" starttime="20140228 14:48:53.229"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:53.237" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 1],
					[1, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				]
			]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:53.243" starttime="20140228 14:48:53.237"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.243" starttime="20140228 14:48:53.236"></status>
</kw>
<msg timestamp="20140228 14:48:53.244" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"name" : "Input",
			"type" ...</msg>
<status status="PASS" endtime="20140228 14:48:53.244" starttime="20140228 14:48:52.722"></status>
</kw>
<msg timestamp="20140228 14:48:53.244" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"name" : "Input",
			"type" ...</msg>
<status status="PASS" endtime="20140228 14:48:53.244" starttime="20140228 14:48:52.721"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.246" starttime="20140228 14:48:53.245"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/name</arg>
<arg>Name</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.249" level="INFO">${value} = "Name"</msg>
<status status="PASS" endtime="20140228 14:48:53.249" starttime="20140228 14:48:53.248"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.250" level="INFO">${match} = "Name"</msg>
<msg timestamp="20140228 14:48:53.250" level="INFO">${result} = Name</msg>
<status status="PASS" endtime="20140228 14:48:53.250" starttime="20140228 14:48:53.250"></status>
</kw>
<msg timestamp="20140228 14:48:53.251" level="INFO">${value} = Name</msg>
<status status="PASS" endtime="20140228 14:48:53.251" starttime="20140228 14:48:53.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.252" starttime="20140228 14:48:53.251"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.252" starttime="20140228 14:48:53.246"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/name</arg>
<arg>Input</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.255" level="INFO">${value} = "Input"</msg>
<status status="PASS" endtime="20140228 14:48:53.255" starttime="20140228 14:48:53.254"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.256" level="INFO">${match} = "Input"</msg>
<msg timestamp="20140228 14:48:53.256" level="INFO">${result} = Input</msg>
<status status="PASS" endtime="20140228 14:48:53.256" starttime="20140228 14:48:53.256"></status>
</kw>
<msg timestamp="20140228 14:48:53.257" level="INFO">${value} = Input</msg>
<status status="PASS" endtime="20140228 14:48:53.257" starttime="20140228 14:48:53.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.258" starttime="20140228 14:48:53.257"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.258" starttime="20140228 14:48:53.252"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/2/name</arg>
<arg>Output</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.263" level="INFO">${value} = "Output"</msg>
<status status="PASS" endtime="20140228 14:48:53.262" starttime="20140228 14:48:53.261"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.263" level="INFO">${match} = "Output"</msg>
<msg timestamp="20140228 14:48:53.264" level="INFO">${result} = Output</msg>
<status status="PASS" endtime="20140228 14:48:53.263" starttime="20140228 14:48:53.263"></status>
</kw>
<msg timestamp="20140228 14:48:53.264" level="INFO">${value} = Output</msg>
<status status="PASS" endtime="20140228 14:48:53.264" starttime="20140228 14:48:53.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.265" starttime="20140228 14:48:53.264"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.265" starttime="20140228 14:48:53.258"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/type</arg>
<arg>String</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.269" level="INFO">${value} = "String"</msg>
<status status="PASS" endtime="20140228 14:48:53.268" starttime="20140228 14:48:53.267"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.269" level="INFO">${match} = "String"</msg>
<msg timestamp="20140228 14:48:53.270" level="INFO">${result} = String</msg>
<status status="PASS" endtime="20140228 14:48:53.269" starttime="20140228 14:48:53.269"></status>
</kw>
<msg timestamp="20140228 14:48:53.270" level="INFO">${value} = String</msg>
<status status="PASS" endtime="20140228 14:48:53.270" starttime="20140228 14:48:53.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.271" starttime="20140228 14:48:53.270"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.271" starttime="20140228 14:48:53.265"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.275" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140228 14:48:53.275" starttime="20140228 14:48:53.274"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.276" level="INFO">${match} = "float"</msg>
<msg timestamp="20140228 14:48:53.276" level="INFO">${result} = float</msg>
<status status="PASS" endtime="20140228 14:48:53.276" starttime="20140228 14:48:53.275"></status>
</kw>
<msg timestamp="20140228 14:48:53.277" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140228 14:48:53.277" starttime="20140228 14:48:53.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.278" starttime="20140228 14:48:53.278"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.278" starttime="20140228 14:48:53.271"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/2/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.282" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140228 14:48:53.282" starttime="20140228 14:48:53.281"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.283" level="INFO">${match} = "float"</msg>
<msg timestamp="20140228 14:48:53.283" level="INFO">${result} = float</msg>
<status status="PASS" endtime="20140228 14:48:53.282" starttime="20140228 14:48:53.282"></status>
</kw>
<msg timestamp="20140228 14:48:53.283" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140228 14:48:53.283" starttime="20140228 14:48:53.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.284" starttime="20140228 14:48:53.283"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.284" starttime="20140228 14:48:53.279"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/matrix</arg>
<arg>false</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.285" starttime="20140228 14:48:53.284"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.287" starttime="20140228 14:48:53.286"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/2/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.288" starttime="20140228 14:48:53.287"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/0</arg>
<arg>checks</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.291" level="INFO">${value} = "checks"</msg>
<status status="PASS" endtime="20140228 14:48:53.291" starttime="20140228 14:48:53.290"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.292" level="INFO">${match} = "checks"</msg>
<msg timestamp="20140228 14:48:53.292" level="INFO">${result} = checks</msg>
<status status="PASS" endtime="20140228 14:48:53.292" starttime="20140228 14:48:53.291"></status>
</kw>
<msg timestamp="20140228 14:48:53.294" level="INFO">${value} = checks</msg>
<status status="PASS" endtime="20140228 14:48:53.292" starttime="20140228 14:48:53.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.294" starttime="20140228 14:48:53.294"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.295" starttime="20140228 14:48:53.288"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/1</arg>
<arg>mitvert</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.299" level="INFO">${value} = "mitvert"</msg>
<status status="PASS" endtime="20140228 14:48:53.299" starttime="20140228 14:48:53.298"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.301" level="INFO">${match} = "mitvert"</msg>
<msg timestamp="20140228 14:48:53.301" level="INFO">${result} = mitvert</msg>
<status status="PASS" endtime="20140228 14:48:53.301" starttime="20140228 14:48:53.299"></status>
</kw>
<msg timestamp="20140228 14:48:53.302" level="INFO">${value} = mitvert</msg>
<status status="PASS" endtime="20140228 14:48:53.302" starttime="20140228 14:48:53.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.303" starttime="20140228 14:48:53.302"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.303" starttime="20140228 14:48:53.295"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/2</arg>
<arg>midhoriz</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.306" level="INFO">${value} = "midhoriz"</msg>
<status status="PASS" endtime="20140228 14:48:53.306" starttime="20140228 14:48:53.305"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.307" level="INFO">${match} = "midhoriz"</msg>
<msg timestamp="20140228 14:48:53.307" level="INFO">${result} = midhoriz</msg>
<status status="PASS" endtime="20140228 14:48:53.307" starttime="20140228 14:48:53.307"></status>
</kw>
<msg timestamp="20140228 14:48:53.308" level="INFO">${value} = midhoriz</msg>
<status status="PASS" endtime="20140228 14:48:53.308" starttime="20140228 14:48:53.304"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.309" starttime="20140228 14:48:53.308"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.309" starttime="20140228 14:48:53.303"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/3</arg>
<arg>rdiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.312" level="INFO">${value} = "rdiag"</msg>
<status status="PASS" endtime="20140228 14:48:53.312" starttime="20140228 14:48:53.311"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.313" level="INFO">${match} = "rdiag"</msg>
<msg timestamp="20140228 14:48:53.314" level="INFO">${result} = rdiag</msg>
<status status="PASS" endtime="20140228 14:48:53.313" starttime="20140228 14:48:53.313"></status>
</kw>
<msg timestamp="20140228 14:48:53.314" level="INFO">${value} = rdiag</msg>
<status status="PASS" endtime="20140228 14:48:53.314" starttime="20140228 14:48:53.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.315" starttime="20140228 14:48:53.314"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.315" starttime="20140228 14:48:53.309"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/4</arg>
<arg>ldiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.320" level="INFO">${value} = "ldiag"</msg>
<status status="PASS" endtime="20140228 14:48:53.320" starttime="20140228 14:48:53.319"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.321" level="INFO">${match} = "ldiag"</msg>
<msg timestamp="20140228 14:48:53.321" level="INFO">${result} = ldiag</msg>
<status status="PASS" endtime="20140228 14:48:53.321" starttime="20140228 14:48:53.320"></status>
</kw>
<msg timestamp="20140228 14:48:53.321" level="INFO">${value} = ldiag</msg>
<status status="PASS" endtime="20140228 14:48:53.321" starttime="20140228 14:48:53.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.322" starttime="20140228 14:48:53.321"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.322" starttime="20140228 14:48:53.315"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/5</arg>
<arg>random</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.326" level="INFO">${value} = "random"</msg>
<status status="PASS" endtime="20140228 14:48:53.325" starttime="20140228 14:48:53.325"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.327" level="INFO">${match} = "random"</msg>
<msg timestamp="20140228 14:48:53.327" level="INFO">${result} = random</msg>
<status status="PASS" endtime="20140228 14:48:53.326" starttime="20140228 14:48:53.326"></status>
</kw>
<msg timestamp="20140228 14:48:53.327" level="INFO">${value} = random</msg>
<status status="PASS" endtime="20140228 14:48:53.327" starttime="20140228 14:48:53.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.328" starttime="20140228 14:48:53.327"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.328" starttime="20140228 14:48:53.323"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/values/0/0/0</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.329" starttime="20140228 14:48:53.329"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/values/0/1/2</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.331" starttime="20140228 14:48:53.330"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/values/0/2/2</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.332" starttime="20140228 14:48:53.331"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/values/2/2/2</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.334" starttime="20140228 14:48:53.332"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/values/2/1/0</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.335" starttime="20140228 14:48:53.335"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140228 14:48:53.336" critical="yes" starttime="20140228 14:48:52.720"></status>
</test>
<test id="s1-t6" name="Read Data Table Column">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "column": "Name"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:53.343" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "column": "Name"}</msg>
<status status="PASS" endtime="20140228 14:48:53.344" starttime="20140228 14:48:53.343"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.344" starttime="20140228 14:48:53.342"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.345" starttime="20140228 14:48:53.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.847" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:53.847" starttime="20140228 14:48:53.346"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:53.848" level="INFO">{
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}</msg>
<msg timestamp="20140228 14:48:53.848" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:53.848" starttime="20140228 14:48:53.847"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:53.850" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:53.851" starttime="20140228 14:48:53.850"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.851" starttime="20140228 14:48:53.849"></status>
</kw>
<msg timestamp="20140228 14:48:53.851" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:53.851" starttime="20140228 14:48:53.339"></status>
</kw>
<msg timestamp="20140228 14:48:53.852" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:53.852" starttime="20140228 14:48:53.339"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.853" starttime="20140228 14:48:53.852"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/name</arg>
<arg>Name</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.857" level="INFO">${value} = "Name"</msg>
<status status="PASS" endtime="20140228 14:48:53.857" starttime="20140228 14:48:53.856"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.858" level="INFO">${match} = "Name"</msg>
<msg timestamp="20140228 14:48:53.858" level="INFO">${result} = Name</msg>
<status status="PASS" endtime="20140228 14:48:53.858" starttime="20140228 14:48:53.857"></status>
</kw>
<msg timestamp="20140228 14:48:53.859" level="INFO">${value} = Name</msg>
<status status="PASS" endtime="20140228 14:48:53.859" starttime="20140228 14:48:53.854"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.860" starttime="20140228 14:48:53.859"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.860" starttime="20140228 14:48:53.854"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/0</arg>
<arg>checks</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.864" level="INFO">${value} = "checks"</msg>
<status status="PASS" endtime="20140228 14:48:53.864" starttime="20140228 14:48:53.863"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.865" level="INFO">${match} = "checks"</msg>
<msg timestamp="20140228 14:48:53.865" level="INFO">${result} = checks</msg>
<status status="PASS" endtime="20140228 14:48:53.865" starttime="20140228 14:48:53.864"></status>
</kw>
<msg timestamp="20140228 14:48:53.865" level="INFO">${value} = checks</msg>
<status status="PASS" endtime="20140228 14:48:53.865" starttime="20140228 14:48:53.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.866" starttime="20140228 14:48:53.866"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.866" starttime="20140228 14:48:53.860"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/1</arg>
<arg>mitvert</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.869" level="INFO">${value} = "mitvert"</msg>
<status status="PASS" endtime="20140228 14:48:53.869" starttime="20140228 14:48:53.869"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.870" level="INFO">${match} = "mitvert"</msg>
<msg timestamp="20140228 14:48:53.870" level="INFO">${result} = mitvert</msg>
<status status="PASS" endtime="20140228 14:48:53.870" starttime="20140228 14:48:53.870"></status>
</kw>
<msg timestamp="20140228 14:48:53.871" level="INFO">${value} = mitvert</msg>
<status status="PASS" endtime="20140228 14:48:53.871" starttime="20140228 14:48:53.868"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.872" starttime="20140228 14:48:53.871"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.872" starttime="20140228 14:48:53.867"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/2</arg>
<arg>midhoriz</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.877" level="INFO">${value} = "midhoriz"</msg>
<status status="PASS" endtime="20140228 14:48:53.877" starttime="20140228 14:48:53.876"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.878" level="INFO">${match} = "midhoriz"</msg>
<msg timestamp="20140228 14:48:53.878" level="INFO">${result} = midhoriz</msg>
<status status="PASS" endtime="20140228 14:48:53.878" starttime="20140228 14:48:53.878"></status>
</kw>
<msg timestamp="20140228 14:48:53.879" level="INFO">${value} = midhoriz</msg>
<status status="PASS" endtime="20140228 14:48:53.879" starttime="20140228 14:48:53.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.880" starttime="20140228 14:48:53.879"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.880" starttime="20140228 14:48:53.874"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/3</arg>
<arg>rdiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.883" level="INFO">${value} = "rdiag"</msg>
<status status="PASS" endtime="20140228 14:48:53.883" starttime="20140228 14:48:53.882"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.884" level="INFO">${match} = "rdiag"</msg>
<msg timestamp="20140228 14:48:53.884" level="INFO">${result} = rdiag</msg>
<status status="PASS" endtime="20140228 14:48:53.884" starttime="20140228 14:48:53.883"></status>
</kw>
<msg timestamp="20140228 14:48:53.884" level="INFO">${value} = rdiag</msg>
<status status="PASS" endtime="20140228 14:48:53.884" starttime="20140228 14:48:53.881"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.885" starttime="20140228 14:48:53.885"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.885" starttime="20140228 14:48:53.880"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/4</arg>
<arg>ldiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.888" level="INFO">${value} = "ldiag"</msg>
<status status="PASS" endtime="20140228 14:48:53.888" starttime="20140228 14:48:53.888"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.889" level="INFO">${match} = "ldiag"</msg>
<msg timestamp="20140228 14:48:53.889" level="INFO">${result} = ldiag</msg>
<status status="PASS" endtime="20140228 14:48:53.889" starttime="20140228 14:48:53.889"></status>
</kw>
<msg timestamp="20140228 14:48:53.890" level="INFO">${value} = ldiag</msg>
<status status="PASS" endtime="20140228 14:48:53.890" starttime="20140228 14:48:53.886"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.891" starttime="20140228 14:48:53.890"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.891" starttime="20140228 14:48:53.886"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/5</arg>
<arg>random</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.895" level="INFO">${value} = "random"</msg>
<status status="PASS" endtime="20140228 14:48:53.895" starttime="20140228 14:48:53.894"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:53.897" level="INFO">${match} = "random"</msg>
<msg timestamp="20140228 14:48:53.897" level="INFO">${result} = random</msg>
<status status="PASS" endtime="20140228 14:48:53.896" starttime="20140228 14:48:53.895"></status>
</kw>
<msg timestamp="20140228 14:48:53.898" level="INFO">${value} = random</msg>
<status status="PASS" endtime="20140228 14:48:53.897" starttime="20140228 14:48:53.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.898" starttime="20140228 14:48:53.898"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.899" starttime="20140228 14:48:53.891"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.903" level="FAIL">JsonPointerException: index '1' is out of bounds</msg>
<status status="FAIL" endtime="20140228 14:48:53.903" starttime="20140228 14:48:53.902"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.904" starttime="20140228 14:48:53.900"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.904" starttime="20140228 14:48:53.899"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/2</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:53.907" level="FAIL">JsonPointerException: index '2' is out of bounds</msg>
<status status="FAIL" endtime="20140228 14:48:53.907" starttime="20140228 14:48:53.906"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.907" starttime="20140228 14:48:53.906"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.908" starttime="20140228 14:48:53.905"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140228 14:48:53.908" critical="yes" starttime="20140228 14:48:53.338"></status>
</test>
<test id="s1-t7" name="Read Data Table Row">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 2}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:53.912" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 2}</msg>
<status status="PASS" endtime="20140228 14:48:53.914" starttime="20140228 14:48:53.912"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:53.914" starttime="20140228 14:48:53.911"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:53.915" starttime="20140228 14:48:53.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:54.416" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:54.416" starttime="20140228 14:48:53.915"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:54.421" level="INFO">{
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		}
	]
}</msg>
<msg timestamp="20140228 14:48:54.421" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensio...</msg>
<status status="PASS" endtime="20140228 14:48:54.421" starttime="20140228 14:48:54.417"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:54.423" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:54.426" starttime="20140228 14:48:54.422"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.427" starttime="20140228 14:48:54.421"></status>
</kw>
<msg timestamp="20140228 14:48:54.428" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensio...</msg>
<status status="PASS" endtime="20140228 14:48:54.427" starttime="20140228 14:48:53.910"></status>
</kw>
<msg timestamp="20140228 14:48:54.428" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensio...</msg>
<status status="PASS" endtime="20140228 14:48:54.428" starttime="20140228 14:48:53.909"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.429" starttime="20140228 14:48:54.429"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/name</arg>
<arg>Name</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:54.433" level="INFO">${value} = "Name"</msg>
<status status="PASS" endtime="20140228 14:48:54.433" starttime="20140228 14:48:54.432"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:54.434" level="INFO">${match} = "Name"</msg>
<msg timestamp="20140228 14:48:54.434" level="INFO">${result} = Name</msg>
<status status="PASS" endtime="20140228 14:48:54.434" starttime="20140228 14:48:54.433"></status>
</kw>
<msg timestamp="20140228 14:48:54.435" level="INFO">${value} = Name</msg>
<status status="PASS" endtime="20140228 14:48:54.435" starttime="20140228 14:48:54.431"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.436" starttime="20140228 14:48:54.435"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.436" starttime="20140228 14:48:54.430"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/name</arg>
<arg>Input</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:54.440" level="INFO">${value} = "Input"</msg>
<status status="PASS" endtime="20140228 14:48:54.439" starttime="20140228 14:48:54.439"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:54.441" level="INFO">${match} = "Input"</msg>
<msg timestamp="20140228 14:48:54.441" level="INFO">${result} = Input</msg>
<status status="PASS" endtime="20140228 14:48:54.440" starttime="20140228 14:48:54.440"></status>
</kw>
<msg timestamp="20140228 14:48:54.441" level="INFO">${value} = Input</msg>
<status status="PASS" endtime="20140228 14:48:54.441" starttime="20140228 14:48:54.437"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.442" starttime="20140228 14:48:54.441"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.442" starttime="20140228 14:48:54.436"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/2/name</arg>
<arg>Output</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:54.446" level="INFO">${value} = "Output"</msg>
<status status="PASS" endtime="20140228 14:48:54.446" starttime="20140228 14:48:54.445"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:54.447" level="INFO">${match} = "Output"</msg>
<msg timestamp="20140228 14:48:54.447" level="INFO">${result} = Output</msg>
<status status="PASS" endtime="20140228 14:48:54.447" starttime="20140228 14:48:54.446"></status>
</kw>
<msg timestamp="20140228 14:48:54.447" level="INFO">${value} = Output</msg>
<status status="PASS" endtime="20140228 14:48:54.447" starttime="20140228 14:48:54.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.448" starttime="20140228 14:48:54.448"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.449" starttime="20140228 14:48:54.443"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/type</arg>
<arg>String</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:54.452" level="INFO">${value} = "String"</msg>
<status status="PASS" endtime="20140228 14:48:54.452" starttime="20140228 14:48:54.451"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:54.453" level="INFO">${match} = "String"</msg>
<msg timestamp="20140228 14:48:54.454" level="INFO">${result} = String</msg>
<status status="PASS" endtime="20140228 14:48:54.453" starttime="20140228 14:48:54.453"></status>
</kw>
<msg timestamp="20140228 14:48:54.454" level="INFO">${value} = String</msg>
<status status="PASS" endtime="20140228 14:48:54.454" starttime="20140228 14:48:54.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.455" starttime="20140228 14:48:54.454"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.455" starttime="20140228 14:48:54.449"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:54.459" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140228 14:48:54.459" starttime="20140228 14:48:54.458"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:54.460" level="INFO">${match} = "float"</msg>
<msg timestamp="20140228 14:48:54.460" level="INFO">${result} = float</msg>
<status status="PASS" endtime="20140228 14:48:54.460" starttime="20140228 14:48:54.459"></status>
</kw>
<msg timestamp="20140228 14:48:54.461" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140228 14:48:54.460" starttime="20140228 14:48:54.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.461" starttime="20140228 14:48:54.461"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.462" starttime="20140228 14:48:54.456"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/2/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:54.465" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140228 14:48:54.465" starttime="20140228 14:48:54.464"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:54.466" level="INFO">${match} = "float"</msg>
<msg timestamp="20140228 14:48:54.466" level="INFO">${result} = float</msg>
<status status="PASS" endtime="20140228 14:48:54.466" starttime="20140228 14:48:54.466"></status>
</kw>
<msg timestamp="20140228 14:48:54.467" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140228 14:48:54.467" starttime="20140228 14:48:54.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.468" starttime="20140228 14:48:54.467"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.468" starttime="20140228 14:48:54.462"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/matrix</arg>
<arg>false</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.469" starttime="20140228 14:48:54.469"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.471" starttime="20140228 14:48:54.470"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/2/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.472" starttime="20140228 14:48:54.471"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/0</arg>
<arg>rdiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:54.475" level="INFO">${value} = "rdiag"</msg>
<status status="PASS" endtime="20140228 14:48:54.475" starttime="20140228 14:48:54.474"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:54.476" level="INFO">${match} = "rdiag"</msg>
<msg timestamp="20140228 14:48:54.476" level="INFO">${result} = rdiag</msg>
<status status="PASS" endtime="20140228 14:48:54.476" starttime="20140228 14:48:54.476"></status>
</kw>
<msg timestamp="20140228 14:48:54.477" level="INFO">${value} = rdiag</msg>
<status status="PASS" endtime="20140228 14:48:54.477" starttime="20140228 14:48:54.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.478" starttime="20140228 14:48:54.477"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.478" starttime="20140228 14:48:54.472"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/1</arg>
<arg>ldiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:54.482" level="INFO">${value} = "ldiag"</msg>
<status status="PASS" endtime="20140228 14:48:54.481" starttime="20140228 14:48:54.481"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:54.483" level="INFO">${match} = "ldiag"</msg>
<msg timestamp="20140228 14:48:54.483" level="INFO">${result} = ldiag</msg>
<status status="PASS" endtime="20140228 14:48:54.482" starttime="20140228 14:48:54.482"></status>
</kw>
<msg timestamp="20140228 14:48:54.483" level="INFO">${value} = ldiag</msg>
<status status="PASS" endtime="20140228 14:48:54.483" starttime="20140228 14:48:54.479"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.484" starttime="20140228 14:48:54.484"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.484" starttime="20140228 14:48:54.478"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/values/0/2/2</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.485" starttime="20140228 14:48:54.485"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/values/0/1/0</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.487" starttime="20140228 14:48:54.486"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/2</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:54.490" level="FAIL">JsonPointerException: index '2' is out of bounds</msg>
<status status="FAIL" endtime="20140228 14:48:54.490" starttime="20140228 14:48:54.489"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.491" starttime="20140228 14:48:54.488"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.491" starttime="20140228 14:48:54.487"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/1/values/2</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:54.494" level="FAIL">JsonPointerException: index '2' is out of bounds</msg>
<status status="FAIL" endtime="20140228 14:48:54.494" starttime="20140228 14:48:54.493"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.494" starttime="20140228 14:48:54.492"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.495" starttime="20140228 14:48:54.491"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/2/values/2</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:54.497" level="FAIL">JsonPointerException: index '2' is out of bounds</msg>
<status status="FAIL" endtime="20140228 14:48:54.498" starttime="20140228 14:48:54.497"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.498" starttime="20140228 14:48:54.496"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.498" starttime="20140228 14:48:54.495"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140228 14:48:54.499" critical="yes" starttime="20140228 14:48:53.908"></status>
</test>
<test id="s1-t8" name="Read Data Table Cell">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Name"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:54.504" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Name"}</msg>
<status status="PASS" endtime="20140228 14:48:54.504" starttime="20140228 14:48:54.503"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:54.504" starttime="20140228 14:48:54.502"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:54.505" starttime="20140228 14:48:54.504"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:55.006" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:55.007" starttime="20140228 14:48:54.505"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:55.008" level="INFO">{
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag"]
		}
	]
}</msg>
<msg timestamp="20140228 14:48:55.009" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag"]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:55.008" starttime="20140228 14:48:55.007"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:55.010" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag"]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:55.013" starttime="20140228 14:48:55.010"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:55.013" starttime="20140228 14:48:55.009"></status>
</kw>
<msg timestamp="20140228 14:48:55.014" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag"]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:55.014" starttime="20140228 14:48:54.501"></status>
</kw>
<msg timestamp="20140228 14:48:55.015" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag"]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:55.014" starttime="20140228 14:48:54.500"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:55.015" starttime="20140228 14:48:55.015"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/name</arg>
<arg>Name</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:55.019" level="INFO">${value} = "Name"</msg>
<status status="PASS" endtime="20140228 14:48:55.018" starttime="20140228 14:48:55.018"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:55.020" level="INFO">${match} = "Name"</msg>
<msg timestamp="20140228 14:48:55.020" level="INFO">${result} = Name</msg>
<status status="PASS" endtime="20140228 14:48:55.019" starttime="20140228 14:48:55.019"></status>
</kw>
<msg timestamp="20140228 14:48:55.020" level="INFO">${value} = Name</msg>
<status status="PASS" endtime="20140228 14:48:55.020" starttime="20140228 14:48:55.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:55.022" starttime="20140228 14:48:55.020"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:55.022" starttime="20140228 14:48:55.016"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/type</arg>
<arg>String</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:55.025" level="INFO">${value} = "String"</msg>
<status status="PASS" endtime="20140228 14:48:55.025" starttime="20140228 14:48:55.024"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:55.026" level="INFO">${match} = "String"</msg>
<msg timestamp="20140228 14:48:55.026" level="INFO">${result} = String</msg>
<status status="PASS" endtime="20140228 14:48:55.025" starttime="20140228 14:48:55.025"></status>
</kw>
<msg timestamp="20140228 14:48:55.026" level="INFO">${value} = String</msg>
<status status="PASS" endtime="20140228 14:48:55.026" starttime="20140228 14:48:55.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:55.027" starttime="20140228 14:48:55.026"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:55.027" starttime="20140228 14:48:55.022"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/matrix</arg>
<arg>false</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:55.028" starttime="20140228 14:48:55.028"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/0</arg>
<arg>rdiag</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:55.031" level="INFO">${value} = "rdiag"</msg>
<status status="PASS" endtime="20140228 14:48:55.031" starttime="20140228 14:48:55.030"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:55.032" level="INFO">${match} = "rdiag"</msg>
<msg timestamp="20140228 14:48:55.032" level="INFO">${result} = rdiag</msg>
<status status="PASS" endtime="20140228 14:48:55.032" starttime="20140228 14:48:55.032"></status>
</kw>
<msg timestamp="20140228 14:48:55.033" level="INFO">${value} = rdiag</msg>
<status status="PASS" endtime="20140228 14:48:55.033" starttime="20140228 14:48:55.029"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:55.033" starttime="20140228 14:48:55.033"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:55.034" starttime="20140228 14:48:55.028"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140228 14:48:55.034" critical="yes" starttime="20140228 14:48:54.499"></status>
</test>
<test id="s1-t9" name="Read Data Table Matrix Cell">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Input", "cell": 12}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:55.038" level="WARN">[Sending] {"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Input", "cell": 12}</msg>
<status status="PASS" endtime="20140228 14:48:55.039" starttime="20140228 14:48:55.038"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:55.039" starttime="20140228 14:48:55.037"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:55.040" starttime="20140228 14:48:55.039"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:55.541" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:55.541" starttime="20140228 14:48:55.040"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:55.542" level="INFO">{
	"columns" : [
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"" : [1]
		}
	]
}</msg>
<msg timestamp="20140228 14:48:55.543" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"" : [1]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:55.543" starttime="20140228 14:48:55.541"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:55.544" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"" : [1]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:55.547" starttime="20140228 14:48:55.544"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:55.548" starttime="20140228 14:48:55.543"></status>
</kw>
<msg timestamp="20140228 14:48:55.548" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"" : [1]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:55.548" starttime="20140228 14:48:55.036"></status>
</kw>
<msg timestamp="20140228 14:48:55.549" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"" : [1]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:55.548" starttime="20140228 14:48:55.035"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:55.549" starttime="20140228 14:48:55.549"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/name</arg>
<arg>Input</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:55.553" level="INFO">${value} = "Input"</msg>
<status status="PASS" endtime="20140228 14:48:55.553" starttime="20140228 14:48:55.552"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:55.554" level="INFO">${match} = "Input"</msg>
<msg timestamp="20140228 14:48:55.554" level="INFO">${result} = Input</msg>
<status status="PASS" endtime="20140228 14:48:55.554" starttime="20140228 14:48:55.553"></status>
</kw>
<msg timestamp="20140228 14:48:55.554" level="INFO">${value} = Input</msg>
<status status="PASS" endtime="20140228 14:48:55.554" starttime="20140228 14:48:55.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:55.555" starttime="20140228 14:48:55.555"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:55.555" starttime="20140228 14:48:55.550"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/type</arg>
<arg>float</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:55.560" level="INFO">${value} = "float"</msg>
<status status="PASS" endtime="20140228 14:48:55.560" starttime="20140228 14:48:55.559"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:55.561" level="INFO">${match} = "float"</msg>
<msg timestamp="20140228 14:48:55.561" level="INFO">${result} = float</msg>
<status status="PASS" endtime="20140228 14:48:55.561" starttime="20140228 14:48:55.561"></status>
</kw>
<msg timestamp="20140228 14:48:55.562" level="INFO">${value} = float</msg>
<status status="PASS" endtime="20140228 14:48:55.562" starttime="20140228 14:48:55.558"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:55.563" starttime="20140228 14:48:55.562"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:55.563" starttime="20140228 14:48:55.557"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/matrix</arg>
<arg>true</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:55.564" starttime="20140228 14:48:55.563"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/0/0/0</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20140228 14:48:55.565" level="FAIL">JsonPointerException: member 'values' not found in {u'': [1], u'dimensions': [5, 5], u'type': u'float', u'name': u'Input', u'matrix': True}</msg>
<status status="FAIL" endtime="20140228 14:48:55.565" starttime="20140228 14:48:55.564"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="FAIL" endtime="20140228 14:48:55.566" critical="yes" starttime="20140228 14:48:55.034">JsonPointerException: member 'values' not found in {u'': [1], u'dimensions': [5, 5], u'type': u'float', u'name': u'Input', u'matrix': True}</status>
</test>
<test id="s1-t10" name="Read Data Table Cell Column Error">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "NotAColumn"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:55.574" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "NotAColumn"}</msg>
<status status="PASS" endtime="20140228 14:48:55.574" starttime="20140228 14:48:55.571"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:55.574" starttime="20140228 14:48:55.569"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:55.576" starttime="20140228 14:48:55.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:56.077" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:56.078" starttime="20140228 14:48:55.576"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:56.079" level="INFO">{
	"columns" : []
}</msg>
<msg timestamp="20140228 14:48:56.079" level="INFO">${result} = {
	"columns" : []
}
</msg>
<status status="PASS" endtime="20140228 14:48:56.079" starttime="20140228 14:48:56.078"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:56.081" level="WARN">[Received] {
	"columns" : []
}
</msg>
<status status="PASS" endtime="20140228 14:48:56.082" starttime="20140228 14:48:56.080"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:56.082" starttime="20140228 14:48:56.079"></status>
</kw>
<msg timestamp="20140228 14:48:56.083" level="INFO">${result} = {
	"columns" : []
}
</msg>
<status status="PASS" endtime="20140228 14:48:56.082" starttime="20140228 14:48:55.569"></status>
</kw>
<msg timestamp="20140228 14:48:56.083" level="INFO">${result} = {
	"columns" : []
}
</msg>
<status status="PASS" endtime="20140228 14:48:56.083" starttime="20140228 14:48:55.568"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:56.084" starttime="20140228 14:48:56.084"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/name</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:56.087" level="FAIL">JsonPointerException: index '0' is out of bounds</msg>
<status status="FAIL" endtime="20140228 14:48:56.087" starttime="20140228 14:48:56.086"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:56.087" starttime="20140228 14:48:56.085"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:56.087" starttime="20140228 14:48:56.084"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/message</arg>
<arg>ERROR</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:56.091" level="FAIL">JsonPointerException: member 'message' not found in {u'columns': []}</msg>
<status status="FAIL" endtime="20140228 14:48:56.091" starttime="20140228 14:48:56.090"></status>
</kw>
<status status="FAIL" endtime="20140228 14:48:56.091" starttime="20140228 14:48:56.089"></status>
</kw>
<status status="FAIL" endtime="20140228 14:48:56.092" starttime="20140228 14:48:56.088"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="FAIL" endtime="20140228 14:48:56.094" critical="yes" starttime="20140228 14:48:55.567">JsonPointerException: member 'message' not found in {u'columns': []}</status>
</test>
<test id="s1-t11" name="Append Data Table">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:56.101" level="WARN">[Sending] {"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</msg>
<status status="PASS" endtime="20140228 14:48:56.101" starttime="20140228 14:48:56.100"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:56.101" starttime="20140228 14:48:56.099"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:56.104" starttime="20140228 14:48:56.101"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:56.606" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:56.606" starttime="20140228 14:48:56.104"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:56.607" level="INFO">{
	"status" : "OK",
	"message" : ""
}</msg>
<msg timestamp="20140228 14:48:56.607" level="INFO">${result} = {
	"status" : "OK",
	"message" : ""
}
</msg>
<status status="PASS" endtime="20140228 14:48:56.607" starttime="20140228 14:48:56.606"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:56.609" level="WARN">[Received] {
	"status" : "OK",
	"message" : ""
}
</msg>
<status status="PASS" endtime="20140228 14:48:56.610" starttime="20140228 14:48:56.609"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:56.610" starttime="20140228 14:48:56.608"></status>
</kw>
<msg timestamp="20140228 14:48:56.610" level="INFO">${result} = {
	"status" : "OK",
	"message" : ""
}
</msg>
<status status="PASS" endtime="20140228 14:48:56.610" starttime="20140228 14:48:56.097"></status>
</kw>
<msg timestamp="20140228 14:48:56.611" level="INFO">${result} = {
	"status" : "OK",
	"message" : ""
}
</msg>
<status status="PASS" endtime="20140228 14:48:56.611" starttime="20140228 14:48:56.095"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:56.612" starttime="20140228 14:48:56.611"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:56.615" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140228 14:48:56.615" starttime="20140228 14:48:56.614"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:56.616" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140228 14:48:56.617" level="INFO">${result} = OK</msg>
<status status="PASS" endtime="20140228 14:48:56.616" starttime="20140228 14:48:56.615"></status>
</kw>
<msg timestamp="20140228 14:48:56.617" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140228 14:48:56.617" starttime="20140228 14:48:56.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:56.618" starttime="20140228 14:48:56.618"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:56.618" starttime="20140228 14:48:56.612"></status>
</kw>
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:56.622" level="WARN">[Sending] {"command": "GetData", "table": "TrialOutputData"}</msg>
<status status="PASS" endtime="20140228 14:48:56.622" starttime="20140228 14:48:56.622"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:56.623" starttime="20140228 14:48:56.621"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:56.624" starttime="20140228 14:48:56.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:57.125" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:57.126" starttime="20140228 14:48:56.624"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:57.129" level="INFO">{
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : [7, 0]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : [0, 9]
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"values" : [0, 0]
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"values" : ["", ""]
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"values" : ["", ""]
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"values" : [0, 0]
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"values" : [0, 0]
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"values" : [0, 0]
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"values" : [0, 0]
		}
	]
}</msg>
<msg timestamp="20140228 14:48:57.130" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : [7, 0]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : [0, 9]
		},
	...</msg>
<status status="PASS" endtime="20140228 14:48:57.130" starttime="20140228 14:48:57.126"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:57.132" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : [7, 0]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : [0, 9]
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"values" : [0, 0]
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"values" : ["", ""]
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"values" : ["", ""]
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"values" : [0, 0]
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"values" : [0, 0]
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"values" : [0, 0]
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"values" : [0, 0]
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:57.134" starttime="20140228 14:48:57.131"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:57.134" starttime="20140228 14:48:57.130"></status>
</kw>
<msg timestamp="20140228 14:48:57.135" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : [7, 0]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : [0, 9]
		},
	...</msg>
<status status="PASS" endtime="20140228 14:48:57.134" starttime="20140228 14:48:56.620"></status>
</kw>
<msg timestamp="20140228 14:48:57.135" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : [7, 0]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : [0, 9]
		},
	...</msg>
<status status="PASS" endtime="20140228 14:48:57.135" starttime="20140228 14:48:56.619"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:57.136" starttime="20140228 14:48:57.135"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/0</arg>
<arg>7</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:57.138" starttime="20140228 14:48:57.137"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Json Value Should Equal">
<doc>Fails if the value of the target node of the JSON document</doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/1</arg>
<arg>9</arg>
</arguments>
<msg timestamp="20140228 14:48:57.139" level="FAIL">JSON value "0" does not equal "9", but should have.</msg>
<status status="FAIL" endtime="20140228 14:48:57.139" starttime="20140228 14:48:57.138"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="FAIL" endtime="20140228 14:48:57.140" critical="yes" starttime="20140228 14:48:56.094">JSON value "0" does not equal "9", but should have.</status>
</test>
<test id="s1-t12" name="Remove Data">
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "RemoveData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:57.144" level="WARN">[Sending] {"command": "RemoveData", "table": "TrialOutputData"}</msg>
<status status="PASS" endtime="20140228 14:48:57.144" starttime="20140228 14:48:57.144"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:57.145" starttime="20140228 14:48:57.143"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:57.146" starttime="20140228 14:48:57.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:57.647" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:57.647" starttime="20140228 14:48:57.146"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:57.648" level="INFO">{
	"status" : "OK",
	"message" : ""
}</msg>
<msg timestamp="20140228 14:48:57.648" level="INFO">${result} = {
	"status" : "OK",
	"message" : ""
}
</msg>
<status status="PASS" endtime="20140228 14:48:57.648" starttime="20140228 14:48:57.648"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:57.650" level="WARN">[Received] {
	"status" : "OK",
	"message" : ""
}
</msg>
<status status="PASS" endtime="20140228 14:48:57.650" starttime="20140228 14:48:57.649"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:57.650" starttime="20140228 14:48:57.649"></status>
</kw>
<msg timestamp="20140228 14:48:57.650" level="INFO">${result} = {
	"status" : "OK",
	"message" : ""
}
</msg>
<status status="PASS" endtime="20140228 14:48:57.650" starttime="20140228 14:48:57.142"></status>
</kw>
<msg timestamp="20140228 14:48:57.651" level="INFO">${result} = {
	"status" : "OK",
	"message" : ""
}
</msg>
<status status="PASS" endtime="20140228 14:48:57.650" starttime="20140228 14:48:57.141"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:57.651" starttime="20140228 14:48:57.651"></status>
</kw>
<kw type="kw" name="Json String Should Match">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/status</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${value} = Get Json String">
<doc></doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="${value} = HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:57.653" level="INFO">${value} = "OK"</msg>
<status status="PASS" endtime="20140228 14:48:57.653" starttime="20140228 14:48:57.653"></status>
</kw>
<kw type="kw" name="${match}, ${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${value}</arg>
<arg>"(.*)"</arg>
</arguments>
<msg timestamp="20140228 14:48:57.654" level="INFO">${match} = "OK"</msg>
<msg timestamp="20140228 14:48:57.654" level="INFO">${result} = OK</msg>
<status status="PASS" endtime="20140228 14:48:57.654" starttime="20140228 14:48:57.653"></status>
</kw>
<msg timestamp="20140228 14:48:57.654" level="INFO">${value} = OK</msg>
<status status="PASS" endtime="20140228 14:48:57.654" starttime="20140228 14:48:57.652"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Match">
<doc>Fails unless the given `string` matches the given `pattern`.</doc>
<arguments>
<arg>${value}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:57.655" starttime="20140228 14:48:57.654"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:57.655" starttime="20140228 14:48:57.651"></status>
</kw>
<kw type="kw" name="${result} = Run Command Wait">
<doc></doc>
<arguments>
<arg>{"command": "GetData", "table": "TrialOutputData"}</arg>
</arguments>
<kw type="kw" name="${result} = Run Command">
<doc></doc>
<arguments>
<arg>${command}</arg>
<arg>500ms</arg>
</arguments>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Sending] ${command}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:57.658" level="WARN">[Sending] {"command": "GetData", "table": "TrialOutputData"}</msg>
<status status="PASS" endtime="20140228 14:48:57.659" starttime="20140228 14:48:57.658"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:57.659" starttime="20140228 14:48:57.657"></status>
</kw>
<kw type="kw" name="Telnet.Write Bare">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${command}\n</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:57.660" starttime="20140228 14:48:57.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${wait}</arg>
</arguments>
<msg timestamp="20140228 14:48:58.161" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20140228 14:48:58.161" starttime="20140228 14:48:57.660"></status>
</kw>
<kw type="kw" name="${result} = Telnet.Read">
<doc>Reads everything that is currently available in the output.</doc>
<arguments>
</arguments>
<msg timestamp="20140228 14:48:58.164" level="INFO">{
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"values" : []
		}
	]
}</msg>
<msg timestamp="20140228 14:48:58.164" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"n...</msg>
<status status="PASS" endtime="20140228 14:48:58.164" starttime="20140228 14:48:58.162"></status>
</kw>
<kw type="kw" name="Print">
<doc></doc>
<arguments>
<arg>[Received] ${result}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${text}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140228 14:48:58.165" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"values" : []
		}
	]
}
</msg>
<status status="PASS" endtime="20140228 14:48:58.167" starttime="20140228 14:48:58.165"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:58.167" starttime="20140228 14:48:58.164"></status>
</kw>
<msg timestamp="20140228 14:48:58.167" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"n...</msg>
<status status="PASS" endtime="20140228 14:48:58.167" starttime="20140228 14:48:57.656"></status>
</kw>
<msg timestamp="20140228 14:48:58.168" level="INFO">${result} = {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"n...</msg>
<status status="PASS" endtime="20140228 14:48:58.168" starttime="20140228 14:48:57.655"></status>
</kw>
<kw type="kw" name="HttpLibrary.HTTP.Should Be Valid Json">
<doc>Attempts to parse `json_string` as JSON. Fails, if `json_string` is invalid JSON.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20140228 14:48:58.169" starttime="20140228 14:48:58.168"></status>
</kw>
<kw type="kw" name="Json Value Should Not Exist">
<doc></doc>
<arguments>
<arg>${result}</arg>
<arg>/columns/0/values/0</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Expect Error">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>JsonPointerException*</arg>
<arg>Get Json Value</arg>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<kw type="kw" name="HttpLibrary.HTTP.Get Json Value">
<doc>Get the target node of the JSON document `json_string` specified by `json_pointer`.</doc>
<arguments>
<arg>${json}</arg>
<arg>${pointer}</arg>
</arguments>
<msg timestamp="20140228 14:48:58.171" level="FAIL">JsonPointerException: index '0' is out of bounds</msg>
<status status="FAIL" endtime="20140228 14:48:58.171" starttime="20140228 14:48:58.170"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:58.171" starttime="20140228 14:48:58.169"></status>
</kw>
<status status="PASS" endtime="20140228 14:48:58.171" starttime="20140228 14:48:58.169"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140228 14:48:58.172" critical="yes" starttime="20140228 14:48:57.140"></status>
</test>
<kw type="teardown" name="Shutdown Emergent">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="Telnet.Close All Connections">
<doc>Closes all open connections and empties the connection cache.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20140228 14:48:58.176" starttime="20140228 14:48:58.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2 sec</arg>
</arguments>
<msg timestamp="20140228 14:49:00.177" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20140228 14:49:00.177" starttime="20140228 14:48:58.176"></status>
</kw>
<kw type="kw" name="${result} = Process.Terminate Process">
<doc>Stops the process gracefully or forcefully.</doc>
<arguments>
<arg>${pid}</arg>
<arg>kill=true</arg>
</arguments>
<msg timestamp="20140228 14:49:00.178" level="INFO">Forcefully killing process.</msg>
<msg timestamp="20140228 14:49:00.279" level="INFO">Process completed.</msg>
<msg timestamp="20140228 14:49:00.279" level="INFO">${result} = &lt;result object with rc -9&gt;</msg>
<status status="PASS" endtime="20140228 14:49:00.279" starttime="20140228 14:49:00.177"></status>
</kw>
<status status="PASS" endtime="20140228 14:49:00.279" starttime="20140228 14:48:58.174"></status>
</kw>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20140228 14:49:00.280" starttime="20140228 14:48:45.991"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="9">Critical Tests</stat>
<stat fail="3" pass="9">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" pass="9" id="s1" name="Server">Server</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20140228 14:48:51.139" level="WARN">Emergent Server v6.3.6
</msg>
<msg timestamp="20140228 14:48:51.145" level="WARN">[Sending] GetRunState</msg>
<msg timestamp="20140228 14:48:51.651" level="WARN">[Received] OK 4
</msg>
<msg timestamp="20140228 14:48:51.666" level="WARN">[Sending] {"command": "GetRunState"}</msg>
<msg timestamp="20140228 14:48:52.173" level="WARN">[Received] {
	"status" : "OK",
	"message" : "4"
}
</msg>
<msg timestamp="20140228 14:48:52.195" level="WARN">[Sending] {"command": "GetRunState", "program": "LeabraBatch"}</msg>
<msg timestamp="20140228 14:48:52.704" level="WARN">[Received] {
	"status" : "OK",
	"message" : "4"
}
</msg>
<msg timestamp="20140228 14:48:52.724" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData"}</msg>
<msg timestamp="20140228 14:48:53.237" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[1, 0, 0, 0, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 0, 0, 0, 1]
				],
				[
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 1, 0, 0]
				],
				[
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1],
					[0, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				],
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 1, 0, 0, 1],
					[1, 0, 0, 0, 0],
					[0, 0, 0, 0, 0]
				]
			]
		}
	]
}
</msg>
<msg timestamp="20140228 14:48:53.343" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "column": "Name"}</msg>
<msg timestamp="20140228 14:48:53.850" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["checks", "mitvert", "midhoriz", "rdiag", "ldiag", "random"]
		}
	]
}
</msg>
<msg timestamp="20140228 14:48:53.912" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 2}</msg>
<msg timestamp="20140228 14:48:54.423" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag", "ldiag"]
		},
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		},
		{
			"name" : "Output",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"values" : [
				[
					[0, 0, 0, 0, 1],
					[0, 0, 0, 1, 0],
					[0, 0, 1, 0, 0],
					[0, 1, 0, 0, 0],
					[1, 0, 0, 0, 0]
				],
				[
					[1, 0, 0, 0, 0],
					[0, 1, 0, 0, 0],
					[0, 0, 1, 0, 0],
					[0, 0, 0, 1, 0],
					[0, 0, 0, 0, 1]
				]
			]
		}
	]
}
</msg>
<msg timestamp="20140228 14:48:54.504" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Name"}</msg>
<msg timestamp="20140228 14:48:55.010" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "Name",
			"type" : "String",
			"matrix" : false,
			"values" : ["rdiag"]
		}
	]
}
</msg>
<msg timestamp="20140228 14:48:55.038" level="WARN">[Sending] {"command": "GetDataMatrixCell", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "Input", "cell": 12}</msg>
<msg timestamp="20140228 14:48:55.544" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "Input",
			"type" : "float",
			"matrix" : true,
			"dimensions" : [5, 5],
			"" : [1]
		}
	]
}
</msg>
<msg timestamp="20140228 14:48:55.574" level="WARN">[Sending] {"command": "GetData", "table": "StdInputData", "row_from": 3, "rows": 1, "column": "NotAColumn"}</msg>
<msg timestamp="20140228 14:48:56.081" level="WARN">[Received] {
	"columns" : []
}
</msg>
<msg timestamp="20140228 14:48:56.101" level="WARN">[Sending] {"command": "AppendData", "table": "TrialOutputData", "data": { "columns": [ { "name": "batch", "values": [7] }, { "name": "epoch", "values": [9] } ] } }</msg>
<msg timestamp="20140228 14:48:56.609" level="WARN">[Received] {
	"status" : "OK",
	"message" : ""
}
</msg>
<msg timestamp="20140228 14:48:56.622" level="WARN">[Sending] {"command": "GetData", "table": "TrialOutputData"}</msg>
<msg timestamp="20140228 14:48:57.132" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : [7, 0]
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : [0, 9]
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"values" : [0, 0]
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"values" : ["", ""]
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"values" : ["", ""]
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"values" : [0, 0]
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"values" : [0, 0]
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"values" : [0, 0]
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"values" : [0, 0]
		}
	]
}
</msg>
<msg timestamp="20140228 14:48:57.144" level="WARN">[Sending] {"command": "RemoveData", "table": "TrialOutputData"}</msg>
<msg timestamp="20140228 14:48:57.650" level="WARN">[Received] {
	"status" : "OK",
	"message" : ""
}
</msg>
<msg timestamp="20140228 14:48:57.658" level="WARN">[Sending] {"command": "GetData", "table": "TrialOutputData"}</msg>
<msg timestamp="20140228 14:48:58.165" level="WARN">[Received] {
	"columns" : [
		{
			"name" : "batch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "epoch",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "trial",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "trial_name",
			"type" : "String",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "group_name",
			"type" : "String",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "phase_no",
			"type" : "int",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "minus_cycles",
			"type" : "float",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "sse",
			"type" : "float",
			"matrix" : false,
			"values" : []
		},
		{
			"name" : "ext_rew",
			"type" : "float",
			"matrix" : false,
			"values" : []
		}
	]
}
</msg>
</errors>
</robot>

// ta_Dump File v3.0 -- code v8.0.8.0 rev10712
LeabraProject .projects[0] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [0] {
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
  ClusterRun @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [0] {
   };

   ControlPanelMethod_Group @.mths = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.active_params = [0] {
 };

 ArchivedParams_Group @.archived_params = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp[0] { 
  };
  DataTable_Group @.gp[1] { 
  };
  DataTable_Group @.gp[2] { 
  };
 };

 Program_TopGroup @.programs = [4] {
  Program @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [0] {
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [11] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [1] {
      ProgVar @[0] { };
     };
    };
    Comment @[1] { };
    AssignExpr @[2] { };
    ProgramCall @[3] { 
     ProgArg_List @.prog_args = [0] {
     };
    };
    ForLoop @[4] { 
     ProgEl_List @.loop_code = [1] {
      PrintExpr @[0] { };
     };
    };
    Switch @[5] { 
     ProgEl_List @.cases = [1] {
      CaseBlock @[0] { 
       ProgEl_List @.prog_code = [0] {
       };
      };
     };
    };
    If @[6] { 
     ProgEl_List @.true_code = [1] {
      PrintVar @[0] { };
     };
    };
    Else @[7] { 
     ProgEl_List @.true_code = [1] {
      PrintVar @[0] { };
     };
    };
    PrintVar @[8] { };
    PrintExpr @[9] { };
    BlankLineEl @[10] { };
   };
  };
  Program @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [5] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [6] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    AssignExpr @[1] { };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    AssignExpr @[3] { };
    If @[4] { 
     ProgEl_List @.true_code = [1] {
      PrintExpr @[0] { };
     };
    };
    Else @[5] { 
     ProgEl_List @.true_code = [1] {
      PrintExpr @[0] { };
     };
    };
   };
  };
  Program @[2] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [6] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [9] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    If @[1] { 
     ProgEl_List @.true_code = [1] {
      Comment @[0] { };
     };
    };
    AssignExpr @[2] { };
    AssignExpr @[3] { };
    MemberAssign @[4] { };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[6] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    StaticMethodCall @[7] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    StaticMethodCall @[8] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };
  };
  Program @[3] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [5] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [6] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    AssignExpr @[1] { };
    AssignExpr @[2] { };
    If @[3] { 
     ProgEl_List @.true_code = [2] {
      PrintExpr @[0] { };
      If @[1] { 
       ProgEl_List @.true_code = [2] {
	AssignExpr @[0] { };
	PrintExpr @[1] { };
       };
      };
     };
    };
    Else @[4] { 
     ProgEl_List @.true_code = [1] {
      PrintExpr @[0] { };
     };
    };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @[0] { };
    PanelViewer @[1] { };
    T3PanelViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };

     T3Panel_List @.panels = [1] {
      T3Panel @[0] { 
       T3DataView_List @.root_view.children = [0] {
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
      UserDataItem @[2] { };
      UserDataItem @[3] { };
      UserDataItem @[4] { };
      UserDataItem @[5] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [0] {
 };
};
LeabraProject .projects[0] {
 name="TestCvtFmCode";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 author="Kai Krueger";
 email="kai.krueger@colorado.edu";
 license {
  license=GPLv2;
  owner_name=;
  org=;
  year="2016";
  custom=;
 };
 pub_cite=;
 wiki {wiki="": page_name="": };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_6";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="NO_CLIP": value=1: val_type_fixed=0: };
    UserDataItem @[1] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  master_and_clones=0;
  ControlPanel @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ControlPanel";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
  ClusterRun @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ClusterRun";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=1;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 active_params {
  name="active_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 archived_params {
  name="archived_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.projects[0].programs[0].doc$$: };
   };
   name="ProgElsSet";
   short_nm="PrgSt";
   tags=;
   desc=;
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars1vars";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (1 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="i";
       var_type=T_Int;
       int_val=0;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    Comment @[1] {
     name="Comment_ThisisacommentTh_tThisisacomment";
     desc="This is a comment // This is a comment // This is a comment // This is a comment // This is a comment // This is a comment // This is a comment // This is a comment";
     flags=CAN_REVERT_TO_CODE;
     code_string="// This is a comment // This is a comment // This is a comment // This is a comment // This is a comment // This is a comment // This is a comment // This is a comment";
    };
    AssignExpr @[2] {
     name="AssignExpr_i0";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="i = 0";
     result_var=.projects[0].programs[0].prog_code[0].local_vars[0]$$;
     expr {
      expr="0";
     };
    };
    ProgramCall @[3] {
     name="ProgramCall_TestProgCodeCvtToProgEl";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="TestProgCodeCvtToProgEl()";
     prog_args {
      name="prog_args";
      el_typ=ProgArg;
      el_def=0;
     };
     target=.projects[0].programs[1]$$;
     targ_ld_init="*TestProgCodeCvtToProgEl*";
    };
    ForLoop @[4] {
     name="ForLoop_fori0i0i";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i = 0; i < 0; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      PrintExpr @[0] {
       name="PrintExpr_Printi";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print i";
       expr {
	expr="i";
       };
       debug=0;
      };
     };
     init {
      expr="i = 0";
     };
     test {
      expr="i < 0";
     };
     iter {
      expr="i++";
     };
    };
    Switch @[5] {
     name="Switch_switchi";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="switch(i)";
     switch_var=$.projects[0].programs[0].prog_code[0].local_vars[0]$;
     cases {
      name="cases";
      el_typ=CaseBlock;
      el_def=0;
      CaseBlock @[0] {
       name="CaseBlock_case1";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="case: 1";
       prog_code {
	name="prog_code";
	el_typ=ProgCode;
	el_def=0;
       };
       case_val {
	expr="1";
       };
       is_default=0;
      };
     };
    };
    If @[6] {
     name="If_ifi0";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (i == 0)";
     cond {
      expr="i == 0";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      PrintVar @[0] {
       name="PrintVar_Printi";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print  i";
       message=;
       print_var=$.projects[0].programs[0].prog_code[0].local_vars[0]$;
       print_var2=NULL;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
       debug=0;
      };
     };
    };
    Else @[7] {
     name="Else_If_ifi0";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     cond {
      expr=;
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      PrintVar @[0] {
       name="PrintVar_Printi";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print  i";
       message=;
       print_var=$.projects[0].programs[0].prog_code[0].local_vars[0]$;
       print_var2=NULL;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
       debug=0;
      };
     };
    };
    PrintVar @[8] {
     name="PrintVar_Printi";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print  i";
     message=;
     print_var=$.projects[0].programs[0].prog_code[0].local_vars[0]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    PrintExpr @[9] {
     name="PrintExpr_PrintHelloWorld";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Hello World\"";
     expr {
      expr="\"Hello World\"";
     };
     debug=0;
    };
    BlankLineEl @[10] {
     name="BlankLineEl_";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=" ";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.projects[0].programs[1].doc$$: };
   };
   name="TestProgCodeCvtToProgEl";
   short_nm="TsPrCd";
   tags=;
   desc=;
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="prog_els_set";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects[0].programs[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="progel_idx";
     var_type=T_Int;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="my_prog_code";
     var_type=T_Object;
     object_type=taOBase;
     object_scope=NULL;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="should_match";
     var_type=T_String;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="does_match";
     var_type=T_Bool;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars0vars";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    AssignExpr @[1] {
     name="AssignExpr_myprogcodeprogel_ogcodeprogelidx";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="my_prog_code = prog_els_set.prog_code[progel_idx]";
     result_var=.projects[0].programs[1].vars[2]$$;
     expr {
      expr="prog_els_set.prog_code[progel_idx]";
     };
    };
    MethodCall @[2] {
     name="MethodCall_myprogcodeCvtFmSavedCode";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="my_prog_code->CvtFmSavedCode()";
     result_var=NULL;
     obj=$.projects[0].programs[1].vars[2]$;
     method=ProgEl::CvtFmSavedCode;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="bool CvtFmSavedCode()";
     meth_desc=" call CvtFmCode on code_string string -- for a callback";
    };
    AssignExpr @[3] {
     name="AssignExpr_doesmatchmyprogc_Nameshouldmatch";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="does_match = my_prog_code.DerivesFromName(should_match)";
     result_var=.projects[0].programs[1].vars[4]$$;
     expr {
      expr="my_prog_code.DerivesFromName(should_match)";
     };
    };
    If @[4] {
     name="If_ifdoesmatch";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (does_match)";
     cond {
      expr="does_match";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      PrintExpr @[0] {
       name="PrintExpr_PrintCodecorrect_edtoshouldmatch";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print \"Code correctly converted to \\\"\" << should_match <<\"\\\"\"";
       expr {
	expr="\"Code correctly converted to \\\"\" << should_match <<\"\\\"\"";
       };
       debug=0;
      };
     };
    };
    Else @[5] {
     name="Else_If_ifdoesmatch";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     cond {
      expr=;
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      PrintExpr @[0] {
       name="PrintExpr_PrintCodemyprogc_gcodeGetTypeDef";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print \"Code: \\\"\" << my_prog_code->code_string << \"\\\" did not match \\\"\" << should_match << \"\\\" instead is \\\"\" << my_prog_code.GetTypeDef() << \"\\\"\"";
       expr {
	expr="\"Code: \\\"\" << my_prog_code->code_string << \"\\\" did not match \\\"\" << should_match << \"\\\" instead is \\\"\" << my_prog_code.GetTypeDef() << \"\\\"\"";
       };
       debug=0;
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.projects[0].programs[2].doc$$: };
   };
   name="TestConvertProgCodeStringToProgElCode";
   short_nm="TsCnvP";
   tags=;
   desc=;
   version {
    major=0;
    minor=0;
    step=0;
   };
   author="Kai Krueger";
   email="kai.krueger@colorado.edu";
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="MyProgCode";
     var_type=T_Object;
     object_type=ProgCode;
     object_scope=NULL;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="test_code_str";
     var_type=T_String;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="MyProgEl_list";
     var_type=T_Object;
     object_type=ProgEl_List;
     object_scope=NULL;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="my_prog_code";
     var_type=T_Object;
     object_type=taOBase;
     object_scope=NULL;
     objs_ptr=0;
     flags=EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="i";
     var_type=T_Int;
     object_scope=NULL;
     flags=NULL_CHECK|EDIT_VAL;
     reference=0;
     desc="This is a dummy variable that can be used in code strings to make sure the variable already exists";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="str";
     var_type=T_String;
     object_scope=NULL;
     flags=NULL_CHECK|EDIT_VAL;
     reference=0;
     desc="//This is a string dummy variable that can be used in code strings to make sure the variable already exists";
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars0vars";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    If @[1] {
     name="If_if01";
     desc="We need a ProgEl_list to stick our ProgCode into";
     flags=CAN_REVERT_TO_CODE;
     code_string="if (0 == 1)";
     cond {
      expr="0 == 1";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      Comment @[0] {
       name="Comment_HelloWorld";
       desc="Hello World";
       flags=CAN_REVERT_TO_CODE;
       code_string="// Hello World";
      };
     };
    };
    AssignExpr @[2] {
     name="AssignExpr_MyProgCodenewProgCode";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="MyProgCode = new ProgCode()";
     result_var=.projects[0].programs[2].vars[0]$$;
     expr {
      expr="new ProgCode()";
     };
    };
    AssignExpr @[3] {
     name="AssignExpr_MyProgEllistproj_ogcode1truecode";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="MyProgEl_list = .projects[\"TestCvtFmCode\"].programs[\"TestConvertProgCodeStringToProgElCode\"].prog_code[1].true_code";
     result_var=.projects[0].programs[2].vars[2]$$;
     expr {
      expr=".projects[\"TestCvtFmCode\"].programs[\"TestConvertProgCodeStringToProgElCode\"].prog_code[1].true_code";
     };
    };
    MemberAssign @[4] {
     name="MemberAssign_MyProgCodecodeexprtestcodestr";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="MyProgCode.code.expr = test_code_str";
     obj=$.projects[0].programs[2].vars[0]$;
     path="code.expr";
     expr {
      expr="test_code_str";
     };
     update_after=0;
    };
    MethodCall @[5] {
     name="MethodCall_MyProgEllistTransferMyProgCode";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="MyProgEl_list->Transfer(MyProgCode)";
     result_var=NULL;
     obj=$.projects[0].programs[2].vars[2]$;
     method=taList_impl::Transfer;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase_ptr;
       type="taBase*";
       name="item";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="MyProgCode";
       };
      };
     };
     meth_sig="bool Transfer(taBase* item)";
     meth_desc=;
    };
    MethodCall @[6] {
     name="MethodCall_MyProgCodeConvertToProgEl";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="MyProgCode->ConvertToProgEl()";
     result_var=NULL;
     obj=$.projects[0].programs[2].vars[0]$;
     method=ProgCode::ConvertToProgEl;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void ConvertToProgEl()";
     meth_desc=" overall entry point for converting the code to an appropriate program element -- called in a delayed gui callback routine -- manages whole process";
    };
    StaticMethodCall @[7] {
     name="StaticMethodCall_tabMiscWaitProc";
     desc="In nogui mode, the wait proc is not run, so we need to explicityly call the WaitProc. Also taMisc::WaitProc is not set and so we need to call deeper down the tabMisc one";
     flags=CAN_REVERT_TO_CODE;
     code_string="tabMisc::WaitProc()";
     result_var=NULL;
     object_type=tabMisc;
     method=tabMisc::WaitProc;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
    };
    StaticMethodCall @[8] {
     name="StaticMethodCall_tabMiscWaitProc_1";
     desc="Call it again, just to be sure to have everything processed";
     flags=CAN_REVERT_TO_CODE;
     code_string="tabMisc::WaitProc()";
     result_var=NULL;
     object_type=tabMisc;
     method=tabMisc::WaitProc;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=$.projects[0].programs[2].doc$: };
   };
   name="TestConvertProgCodeStringToProgElVerify";
   short_nm="TsCnvP";
   tags=;
   desc=;
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="MyProgEl_list";
     var_type=T_Object;
     object_type=ProgEl_List;
     object_scope=NULL;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="should_match_type";
     var_type=T_String;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="should_match_code";
     var_type=T_String;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="does_match";
     var_type=T_Bool;
     object_scope=NULL;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="test_code_str";
     var_type=T_String;
     object_scope=NULL;
     flags=CTRL_READ_ONLY|NULL_CHECK|USED;
     reference=0;
     desc=;
     init_from=.projects[0].programs[2]$$;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars0vars";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    AssignExpr @[1] {
     name="AssignExpr_MyProgEllistproj_ogcode1truecode";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="MyProgEl_list = .projects[\"TestCvtFmCode\"].programs[\"TestConvertProgCodeStringToProgElCode\"].prog_code[1].true_code";
     result_var=.projects[0].programs[3].vars[0]$$;
     expr {
      expr=".projects[\"TestCvtFmCode\"].programs[\"TestConvertProgCodeStringToProgElCode\"].prog_code[1].true_code";
     };
    };
    AssignExpr @[2] {
     name="AssignExpr_doesmatchMyProgE_shouldmatchtype";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="does_match = MyProgEl_list[1].DerivesFromName(should_match_type)";
     result_var=.projects[0].programs[3].vars[3]$$;
     expr {
      expr="MyProgEl_list[1].DerivesFromName(should_match_type)";
     };
    };
    If @[3] {
     name="If_ifdoesmatch";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (does_match)";
     cond {
      expr="does_match";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      PrintExpr @[0] {
       name="PrintExpr_PrintCodeMyProgE_shouldmatchtype";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print \"Code (\" << MyProgEl_list[1]->code_string << \") correctly converted to type \\\"\" << should_match_type <<\"\\\"\"";
       expr {
	expr="\"Code (\" << MyProgEl_list[1]->code_string << \") correctly converted to type \\\"\" << should_match_type <<\"\\\"\"";
       };
       debug=0;
      };
      If @[1] {
       name="If_ifshouldmatchcod_list1codestring";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if ((!should_match_code.empty()) && (should_match_code != MyProgEl_list[1]->code_string))";
       cond {
	expr="(!should_match_code.empty()) && (should_match_code != MyProgEl_list[1]->code_string)";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 name="AssignExpr_doesmatchfalse";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="does_match = false";
	 result_var=$.projects[0].programs[3].vars[3]$;
	 expr {
	  expr="false";
	 };
	};
	PrintExpr @[1] {
	 name="PrintExpr_PrintCodestringc_shouldmatchcode";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="Print \"Code string converted to \\\"\" << MyProgEl_list[1]->code_string << \"\\\" but should have converted to \\\"\" << should_match_code << \"\\\"\"";
	 expr {
	  expr="\"Code string converted to \\\"\" << MyProgEl_list[1]->code_string << \"\\\" but should have converted to \\\"\" << should_match_code << \"\\\"\"";
	 };
	 debug=0;
	};
       };
      };
     };
    };
    Else @[4] {
     name="Else_If_ifdoesmatch";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     cond {
      expr=;
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      PrintExpr @[0] {
       name="PrintExpr_PrintCodetestcod_list1GetTypeDef";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print \"Code: \\\"\" << test_code_str << \"\\\" did not convert to type \\\"\" << should_match_type << \"\\\" instead is \\\"\" << MyProgEl_list[1].GetTypeDef() << \"\\\"\"";
       expr {
	expr="\"Code: \\\"\" << test_code_str << \"\\\" did not convert to type \\\"\" << should_match_type << \"\\\" instead is \\\"\" << MyProgEl_list[1].GetTypeDef() << \"\\\"\"";
       };
       debug=0;
      };
     };
    };
    MethodCall @[5] {
     name="MethodCall_MyProgEllistRemoveLast";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="MyProgEl_list->RemoveLast()";
     result_var=NULL;
     obj=$.projects[0].programs[3].vars[0]$;
     method=taList_impl::RemoveLast;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="bool RemoveLast()";
     meth_desc=" remove the last element on the list";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_46";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="view_win_lft": value=0.001594049: val_type_fixed=0: };
    UserDataItem @[1] {name="view_win_top": value=0.04672897: val_type_fixed=0: };
    UserDataItem @[2] {name="view_win_wd": value=1: val_type_fixed=0: };
    UserDataItem @[3] {name="view_win_ht": value=0.7986406: val_type_fixed=0: };
    UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
    UserDataItem @[5] {name="view_splitter_state": value=AAAA/wAAAAEAAAADAAABbQAAA84AAAAAAQAAAAcBAAAAAQE=: val_type_fixed=0: };
   };
   name="Browser2";
   m_data=.projects[0]$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"TestCvtFmCode\"] - TestCvtFmCode.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_47";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_visible": value=1: val_type_fixed=0: };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @[0] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects[0]$;
    };
    PanelViewer @[1] {
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_48";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_panel_selected": value=1: val_type_fixed=0: };
     };
     name="Visualizer";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @[0] {
       name="Frame1";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0: y=0: z=-0.4765596: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=3.52344;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_49";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
      UserDataItem @[1] {name="view_win_top": value=0.008496176: val_type_fixed=0: };
      UserDataItem @[2] {name="view_win_wd": value=0.04357067: val_type_fixed=0: };
      UserDataItem @[3] {name="view_win_ht": value=0.7349193: val_type_fixed=0: };
      UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
      UserDataItem @[5] {name="view_visible": value=1: val_type_fixed=0: };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 tree_state{ .;.docs;.wizards;.ctrl_panels;.data;.programs;.programs.break_points;.networks; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
 };
};

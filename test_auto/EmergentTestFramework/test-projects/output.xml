<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20140326 18:36:58.105" generator="Robot 2.8.4 (Python 2.7.3 on linux2)">
<suite source="/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test" id="s1" name="Test">
<suite source="/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/a_not_b.css.txt" id="s1-s1" name="A Not B.Css">
<test id="s1-s1-t1" name="Leabra Standard Test">
<kw type="kw" name="emergent.Initialize Standard Test">
<doc></doc>
<arguments>
<arg>a_not_b</arg>
<arg>test</arg>
</arguments>
<kw type="kw" name="emergent.Set Variables">
<doc></doc>
<arguments>
<arg>${project}</arg>
<arg>${test-dir}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${S}</arg>
<arg>${SPACE * 4}</arg>
</arguments>
<msg timestamp="20140326 18:36:58.200" level="INFO">${S} =     </msg>
<status status="PASS" endtime="20140326 18:36:58.201" starttime="20140326 18:36:58.200"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140326 18:36:58.201" level="INFO">${name} = a_not_b</msg>
<status status="PASS" endtime="20140326 18:36:58.201" starttime="20140326 18:36:58.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140326 18:36:58.202" level="INFO">${project-file} = a_not_b.proj</msg>
<status status="PASS" endtime="20140326 18:36:58.202" starttime="20140326 18:36:58.202"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${test-dir}/${name}.css.txt</arg>
</arguments>
<msg timestamp="20140326 18:36:58.203" level="INFO">${script-file} = test/a_not_b.css.txt</msg>
<status status="PASS" endtime="20140326 18:36:58.206" starttime="20140326 18:36:58.202"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline-file}</arg>
<arg>${test-dir}/${name}.baseline.json</arg>
</arguments>
<msg timestamp="20140326 18:36:58.206" level="INFO">${baseline-file} = test/a_not_b.baseline.json</msg>
<status status="PASS" endtime="20140326 18:36:58.206" starttime="20140326 18:36:58.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${test-dir}/${name}.record.json</arg>
</arguments>
<msg timestamp="20140326 18:36:58.207" level="INFO">${record-file} = test/a_not_b.record.json</msg>
<status status="PASS" endtime="20140326 18:36:58.207" starttime="20140326 18:36:58.207"></status>
</kw>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
</arguments>
<msg timestamp="20140326 18:36:58.208" level="INFO">@{metric-list} = [ ]</msg>
<status status="PASS" endtime="20140326 18:36:58.208" starttime="20140326 18:36:58.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${metric-list}</arg>
</arguments>
<msg timestamp="20140326 18:36:58.208" level="INFO">${metric-list} = []</msg>
<status status="PASS" endtime="20140326 18:36:58.208" starttime="20140326 18:36:58.208"></status>
</kw>
<status status="PASS" endtime="20140326 18:36:58.209" starttime="20140326 18:36:58.199"></status>
</kw>
<status status="PASS" endtime="20140326 18:36:58.209" starttime="20140326 18:36:58.198"></status>
</kw>
<kw type="kw" name="emergent.Set Timeout">
<doc></doc>
<arguments>
<arg>60 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140326 18:36:58.210" level="INFO">${timeout} = 60 secs</msg>
<status status="PASS" endtime="20140326 18:36:58.210" starttime="20140326 18:36:58.210"></status>
</kw>
<status status="PASS" endtime="20140326 18:36:58.210" starttime="20140326 18:36:58.209"></status>
</kw>
<kw type="kw" name="emergent.Add Metric">
<doc></doc>
<arguments>
<arg>avg</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="Collections.Append To List">
<doc>Adds `values` to the end of `list`.</doc>
<arguments>
<arg>${metric-list}</arg>
<arg>@{metric}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:36:58.212" starttime="20140326 18:36:58.211"></status>
</kw>
<status status="PASS" endtime="20140326 18:36:58.212" starttime="20140326 18:36:58.211"></status>
</kw>
<kw type="kw" name="emergent.Add Metric">
<doc></doc>
<arguments>
<arg>max</arg>
<arg>0.40</arg>
<arg>0.80</arg>
</arguments>
<kw type="kw" name="Collections.Append To List">
<doc>Adds `values` to the end of `list`.</doc>
<arguments>
<arg>${metric-list}</arg>
<arg>@{metric}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:36:58.213" starttime="20140326 18:36:58.213"></status>
</kw>
<status status="PASS" endtime="20140326 18:36:58.213" starttime="20140326 18:36:58.212"></status>
</kw>
<kw type="kw" name="emergent.Add Metric">
<doc></doc>
<arguments>
<arg>min</arg>
<arg>0.20</arg>
<arg>0.35</arg>
</arguments>
<kw type="kw" name="Collections.Append To List">
<doc>Adds `values` to the end of `list`.</doc>
<arguments>
<arg>${metric-list}</arg>
<arg>@{metric}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:36:58.214" starttime="20140326 18:36:58.214"></status>
</kw>
<status status="PASS" endtime="20140326 18:36:58.215" starttime="20140326 18:36:58.213"></status>
</kw>
<kw type="kw" name="emergent.Run Standard Test">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${output} = emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140326 18:36:58.217" level="INFO">Starting process:
emergent -nogui -ni -p a_not_b.proj -s test/a_not_b.css.txt</msg>
<status status="PASS" endtime="20140326 18:36:58.221" starttime="20140326 18:36:58.217"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140326 18:36:58.223" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140326 18:37:00.227" level="INFO">Process completed.</msg>
<msg timestamp="20140326 18:37:00.228" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140326 18:37:00.227" starttime="20140326 18:36:58.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140326 18:37:00.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140326 18:37:00.230" starttime="20140326 18:37:00.228"></status>
</kw>
<msg timestamp="20140326 18:37:00.231" level="INFO">${output} = A Program is already running -- cannot run until it is done
A Program is already running -- cannot run until it is done
A Program is already running -- cannot run until it is done
A Program is already...</msg>
<status status="PASS" endtime="20140326 18:37:00.231" starttime="20140326 18:36:58.216"></status>
</kw>
<kw type="kw" name="${actuals} = emergent.Get Results">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
<arg>msg=No results found in output for ${name}: ${output}</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20140326 18:37:00.234" level="INFO">${result} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.60842 }</msg>
<status status="PASS" endtime="20140326 18:37:00.234" starttime="20140326 18:37:00.233"></status>
</kw>
<msg timestamp="20140326 18:37:00.234" level="INFO">${actuals} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.60842 }</msg>
<status status="PASS" endtime="20140326 18:37:00.234" starttime="20140326 18:37:00.231"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals}\n</arg>
</arguments>
<msg timestamp="20140326 18:37:00.236" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/a_not_b.record.json"&gt;/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/a_not_b.record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140326 18:37:00.236" starttime="20140326 18:37:00.234"></status>
</kw>
<kw type="kw" name="${baseline} = emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${status}, ${content} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Get File</arg>
<arg>${file}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.238" html="yes" level="INFO">Getting file '&lt;a href="file:///home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/a_not_b.baseline.json"&gt;/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/a_not_b.baseline.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140326 18:37:00.238" starttime="20140326 18:37:00.238"></status>
</kw>
<msg timestamp="20140326 18:37:00.239" level="INFO">${status} = PASS</msg>
<msg timestamp="20140326 18:37:00.239" level="INFO">${content} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140326 18:37:00.238" starttime="20140326 18:37:00.237"></status>
</kw>
<kw type="kw" name="${content} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${EMPTY}</arg>
<arg>${content}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.240" level="INFO">${content} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140326 18:37:00.239" starttime="20140326 18:37:00.239"></status>
</kw>
<kw type="kw" name="${status}, ${baseline} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.241" starttime="20140326 18:37:00.240"></status>
</kw>
<msg timestamp="20140326 18:37:00.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20140326 18:37:00.241" level="INFO">${baseline} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140326 18:37:00.241" starttime="20140326 18:37:00.240"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${status}</arg>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.242" level="INFO">${baseline} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140326 18:37:00.242" starttime="20140326 18:37:00.242"></status>
</kw>
<msg timestamp="20140326 18:37:00.243" level="INFO">${baseline} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140326 18:37:00.242" starttime="20140326 18:37:00.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Add To Baseline</arg>
<arg>${baseline-file}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.243" starttime="20140326 18:37:00.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Set Variable</arg>
<arg>${baseline}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.244" starttime="20140326 18:37:00.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.244" level="INFO">${baseline} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.608421 }</msg>
<status status="PASS" endtime="20140326 18:37:00.244" starttime="20140326 18:37:00.244"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.245" level="INFO">${actuals} = { "name": "a_not_b", "min": 0.582603, "max": 0.629062, "avg": 0.60842 }</msg>
<status status="PASS" endtime="20140326 18:37:00.245" starttime="20140326 18:37:00.245"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.245" starttime="20140326 18:36:58.215"></status>
</kw>
<kw type="kw" name="emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${fail-if-outside} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${False}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.247" level="INFO">${fail-if-outside} = False</msg>
<status status="PASS" endtime="20140326 18:37:00.247" starttime="20140326 18:37:00.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.247" level="INFO">${fail-if-outside} = False</msg>
<status status="PASS" endtime="20140326 18:37:00.247" starttime="20140326 18:37:00.247"></status>
</kw>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:00.252" level="INFO">${match} = "avg": 0.60842</msg>
<msg timestamp="20140326 18:37:00.252" level="INFO">${value} = 0.60842</msg>
<status status="PASS" endtime="20140326 18:37:00.252" starttime="20140326 18:37:00.251"></status>
</kw>
<msg timestamp="20140326 18:37:00.252" level="INFO">${value} = 0.60842</msg>
<status status="PASS" endtime="20140326 18:37:00.252" starttime="20140326 18:37:00.250"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:00.254" level="INFO">${match} = "avg": 0.608421</msg>
<msg timestamp="20140326 18:37:00.254" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140326 18:37:00.254" starttime="20140326 18:37:00.254"></status>
</kw>
<msg timestamp="20140326 18:37:00.254" level="INFO">${target} = 0.608421</msg>
<status status="PASS" endtime="20140326 18:37:00.254" starttime="20140326 18:37:00.253"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.256" level="INFO">${low} = 0.51715785</msg>
<status status="PASS" endtime="20140326 18:37:00.256" starttime="20140326 18:37:00.256"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.257" level="INFO">${high} = 0.69968415</msg>
<status status="PASS" endtime="20140326 18:37:00.257" starttime="20140326 18:37:00.256"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.259" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.259" starttime="20140326 18:37:00.259"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.261" starttime="20140326 18:37:00.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.262" starttime="20140326 18:37:00.262"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.263" starttime="20140326 18:37:00.262"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.263" starttime="20140326 18:37:00.260"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.263" starttime="20140326 18:37:00.258"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.265" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.265" starttime="20140326 18:37:00.264"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.266" starttime="20140326 18:37:00.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.268" starttime="20140326 18:37:00.267"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.268" starttime="20140326 18:37:00.267"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.268" starttime="20140326 18:37:00.265"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.268" starttime="20140326 18:37:00.263"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.268" starttime="20140326 18:37:00.257"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.268" starttime="20140326 18:37:00.255"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.268" starttime="20140326 18:37:00.248"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.268" starttime="20140326 18:37:00.248"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.269" starttime="20140326 18:37:00.248"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.40, ${required} = 0.80">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:00.272" level="INFO">${match} = "max": 0.629062</msg>
<msg timestamp="20140326 18:37:00.272" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140326 18:37:00.272" starttime="20140326 18:37:00.271"></status>
</kw>
<msg timestamp="20140326 18:37:00.273" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140326 18:37:00.272" starttime="20140326 18:37:00.270"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:00.274" level="INFO">${match} = "max": 0.629062</msg>
<msg timestamp="20140326 18:37:00.274" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140326 18:37:00.274" starttime="20140326 18:37:00.274"></status>
</kw>
<msg timestamp="20140326 18:37:00.275" level="INFO">${target} = 0.629062</msg>
<status status="PASS" endtime="20140326 18:37:00.274" starttime="20140326 18:37:00.273"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.276" level="INFO">${low} = 0.3774372</msg>
<status status="PASS" endtime="20140326 18:37:00.276" starttime="20140326 18:37:00.276"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.277" level="INFO">${high} = 0.8806868</msg>
<status status="PASS" endtime="20140326 18:37:00.277" starttime="20140326 18:37:00.276"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.279" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.279" starttime="20140326 18:37:00.279"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.281" starttime="20140326 18:37:00.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.282" starttime="20140326 18:37:00.282"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.282" starttime="20140326 18:37:00.281"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.282" starttime="20140326 18:37:00.280"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.282" starttime="20140326 18:37:00.278"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.284" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.284" starttime="20140326 18:37:00.284"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.286" starttime="20140326 18:37:00.286"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.287" starttime="20140326 18:37:00.287"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.287" starttime="20140326 18:37:00.286"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.287" starttime="20140326 18:37:00.284"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.287" starttime="20140326 18:37:00.283"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.287" starttime="20140326 18:37:00.277"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.288" starttime="20140326 18:37:00.275"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.288" starttime="20140326 18:37:00.269"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.288" starttime="20140326 18:37:00.269"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.288" starttime="20140326 18:37:00.269"></status>
</kw>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.20, ${required} = 0.35">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:00.291" level="INFO">${match} = "min": 0.582603</msg>
<msg timestamp="20140326 18:37:00.291" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140326 18:37:00.291" starttime="20140326 18:37:00.290"></status>
</kw>
<msg timestamp="20140326 18:37:00.292" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140326 18:37:00.291" starttime="20140326 18:37:00.289"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:00.293" level="INFO">${match} = "min": 0.582603</msg>
<msg timestamp="20140326 18:37:00.294" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140326 18:37:00.293" starttime="20140326 18:37:00.293"></status>
</kw>
<msg timestamp="20140326 18:37:00.294" level="INFO">${target} = 0.582603</msg>
<status status="PASS" endtime="20140326 18:37:00.294" starttime="20140326 18:37:00.292"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.296" level="INFO">${low} = 0.4660824</msg>
<status status="PASS" endtime="20140326 18:37:00.296" starttime="20140326 18:37:00.295"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.297" level="INFO">${high} = 0.6991236</msg>
<status status="PASS" endtime="20140326 18:37:00.297" starttime="20140326 18:37:00.297"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.300" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.300" starttime="20140326 18:37:00.299"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.301" starttime="20140326 18:37:00.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.302" starttime="20140326 18:37:00.302"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.303" starttime="20140326 18:37:00.302"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.303" starttime="20140326 18:37:00.300"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.303" starttime="20140326 18:37:00.298"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.304" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.304" starttime="20140326 18:37:00.304"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.306" starttime="20140326 18:37:00.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.307" starttime="20140326 18:37:00.307"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.307" starttime="20140326 18:37:00.306"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.307" starttime="20140326 18:37:00.305"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.307" starttime="20140326 18:37:00.303"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.307" starttime="20140326 18:37:00.297"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.307" starttime="20140326 18:37:00.294"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.308" starttime="20140326 18:37:00.288"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.308" starttime="20140326 18:37:00.288"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.308" starttime="20140326 18:37:00.288"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.308" starttime="20140326 18:37:00.247"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.308" starttime="20140326 18:37:00.246"></status>
</kw>
<kw type="kw" name="emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${fail-if-outside} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${True}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.309" level="INFO">${fail-if-outside} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.309" starttime="20140326 18:37:00.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.310" level="INFO">${fail-if-outside} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.310" starttime="20140326 18:37:00.309"></status>
</kw>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:00.313" level="INFO">${match} = "avg": 0.60842</msg>
<msg timestamp="20140326 18:37:00.313" level="INFO">${value} = 0.60842</msg>
<status status="PASS" endtime="20140326 18:37:00.313" starttime="20140326 18:37:00.313"></status>
</kw>
<msg timestamp="20140326 18:37:00.314" level="INFO">${value} = 0.60842</msg>
<status status="PASS" endtime="20140326 18:37:00.314" starttime="20140326 18:37:00.312"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:00.315" level="INFO">${match} = "avg": 0.608421</msg>
<msg timestamp="20140326 18:37:00.315" level="INFO">${value} = 0.608421</msg>
<status status="PASS" endtime="20140326 18:37:00.315" starttime="20140326 18:37:00.315"></status>
</kw>
<msg timestamp="20140326 18:37:00.316" level="INFO">${target} = 0.608421</msg>
<status status="PASS" endtime="20140326 18:37:00.316" starttime="20140326 18:37:00.314"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.317" level="INFO">${low} = 0.45631575</msg>
<status status="PASS" endtime="20140326 18:37:00.317" starttime="20140326 18:37:00.317"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.318" level="INFO">${high} = 0.76052625</msg>
<status status="PASS" endtime="20140326 18:37:00.318" starttime="20140326 18:37:00.318"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.320" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.320" starttime="20140326 18:37:00.320"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.323" starttime="20140326 18:37:00.322"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.323" starttime="20140326 18:37:00.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.323" starttime="20140326 18:37:00.323"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.323" starttime="20140326 18:37:00.321"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.324" starttime="20140326 18:37:00.319"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.325" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.325" starttime="20140326 18:37:00.325"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.327" starttime="20140326 18:37:00.327"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.327" starttime="20140326 18:37:00.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.328" starttime="20140326 18:37:00.327"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.328" starttime="20140326 18:37:00.325"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.328" starttime="20140326 18:37:00.324"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.328" starttime="20140326 18:37:00.318"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.328" starttime="20140326 18:37:00.316"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.328" starttime="20140326 18:37:00.311"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.328" starttime="20140326 18:37:00.310"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.328" starttime="20140326 18:37:00.310"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.40, ${required} = 0.80">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:00.331" level="INFO">${match} = "max": 0.629062</msg>
<msg timestamp="20140326 18:37:00.332" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140326 18:37:00.331" starttime="20140326 18:37:00.331"></status>
</kw>
<msg timestamp="20140326 18:37:00.332" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140326 18:37:00.332" starttime="20140326 18:37:00.330"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:00.334" level="INFO">${match} = "max": 0.629062</msg>
<msg timestamp="20140326 18:37:00.334" level="INFO">${value} = 0.629062</msg>
<status status="PASS" endtime="20140326 18:37:00.333" starttime="20140326 18:37:00.333"></status>
</kw>
<msg timestamp="20140326 18:37:00.334" level="INFO">${target} = 0.629062</msg>
<status status="PASS" endtime="20140326 18:37:00.334" starttime="20140326 18:37:00.332"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.336" level="INFO">${low} = 0.1258124</msg>
<status status="PASS" endtime="20140326 18:37:00.335" starttime="20140326 18:37:00.335"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.336" level="INFO">${high} = 1.1323116</msg>
<status status="PASS" endtime="20140326 18:37:00.336" starttime="20140326 18:37:00.336"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.339" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.339" starttime="20140326 18:37:00.338"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.341" starttime="20140326 18:37:00.340"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.341" starttime="20140326 18:37:00.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.341" starttime="20140326 18:37:00.341"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.341" starttime="20140326 18:37:00.339"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.342" starttime="20140326 18:37:00.337"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.343" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.343" starttime="20140326 18:37:00.343"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.345" starttime="20140326 18:37:00.345"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.345" starttime="20140326 18:37:00.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.346" starttime="20140326 18:37:00.345"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.346" starttime="20140326 18:37:00.343"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.346" starttime="20140326 18:37:00.342"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.346" starttime="20140326 18:37:00.336"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.346" starttime="20140326 18:37:00.334"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.346" starttime="20140326 18:37:00.329"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.347" starttime="20140326 18:37:00.329"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.347" starttime="20140326 18:37:00.329"></status>
</kw>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.20, ${required} = 0.35">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:00.350" level="INFO">${match} = "min": 0.582603</msg>
<msg timestamp="20140326 18:37:00.350" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140326 18:37:00.350" starttime="20140326 18:37:00.349"></status>
</kw>
<msg timestamp="20140326 18:37:00.350" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140326 18:37:00.350" starttime="20140326 18:37:00.348"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:00.352" level="INFO">${match} = "min": 0.582603</msg>
<msg timestamp="20140326 18:37:00.352" level="INFO">${value} = 0.582603</msg>
<status status="PASS" endtime="20140326 18:37:00.352" starttime="20140326 18:37:00.351"></status>
</kw>
<msg timestamp="20140326 18:37:00.352" level="INFO">${target} = 0.582603</msg>
<status status="PASS" endtime="20140326 18:37:00.352" starttime="20140326 18:37:00.350"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.354" level="INFO">${low} = 0.37869195</msg>
<status status="PASS" endtime="20140326 18:37:00.354" starttime="20140326 18:37:00.354"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.355" level="INFO">${high} = 0.78651405</msg>
<status status="PASS" endtime="20140326 18:37:00.355" starttime="20140326 18:37:00.354"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.359" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.359" starttime="20140326 18:37:00.357"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.361" starttime="20140326 18:37:00.361"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.361" starttime="20140326 18:37:00.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.362" starttime="20140326 18:37:00.361"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.362" starttime="20140326 18:37:00.359"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.362" starttime="20140326 18:37:00.356"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:00.364" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:00.364" starttime="20140326 18:37:00.363"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.366" starttime="20140326 18:37:00.365"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.366" starttime="20140326 18:37:00.365"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.366" starttime="20140326 18:37:00.366"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.366" starttime="20140326 18:37:00.364"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.367" starttime="20140326 18:37:00.362"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.367" starttime="20140326 18:37:00.355"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.367" starttime="20140326 18:37:00.352"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.367" starttime="20140326 18:37:00.347"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.367" starttime="20140326 18:37:00.347"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.367" starttime="20140326 18:37:00.347"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.367" starttime="20140326 18:37:00.310"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.367" starttime="20140326 18:37:00.308"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.367" starttime="20140326 18:36:58.215"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140326 18:37:00.368" critical="yes" starttime="20140326 18:36:58.197"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20140326 18:37:00.369" starttime="20140326 18:36:58.151"></status>
</suite>
<suite source="/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStd.css.txt" id="s1-s2" name="LeabraStd.css">
<test id="s1-s2-t1" name="Leabra Standard Test">
<kw type="kw" name="emergent.Initialize Standard Test">
<doc></doc>
<arguments>
<arg>LeabraStd</arg>
<arg>test</arg>
</arguments>
<kw type="kw" name="emergent.Set Variables">
<doc></doc>
<arguments>
<arg>${project}</arg>
<arg>${test-dir}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${S}</arg>
<arg>${SPACE * 4}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.382" level="INFO">${S} =     </msg>
<status status="PASS" endtime="20140326 18:37:00.382" starttime="20140326 18:37:00.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.382" level="INFO">${name} = LeabraStd</msg>
<status status="PASS" endtime="20140326 18:37:00.382" starttime="20140326 18:37:00.382"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140326 18:37:00.383" level="INFO">${project-file} = LeabraStd.proj</msg>
<status status="PASS" endtime="20140326 18:37:00.384" starttime="20140326 18:37:00.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${test-dir}/${name}.css.txt</arg>
</arguments>
<msg timestamp="20140326 18:37:00.384" level="INFO">${script-file} = test/LeabraStd.css.txt</msg>
<status status="PASS" endtime="20140326 18:37:00.384" starttime="20140326 18:37:00.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline-file}</arg>
<arg>${test-dir}/${name}.baseline.json</arg>
</arguments>
<msg timestamp="20140326 18:37:00.385" level="INFO">${baseline-file} = test/LeabraStd.baseline.json</msg>
<status status="PASS" endtime="20140326 18:37:00.385" starttime="20140326 18:37:00.385"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${test-dir}/${name}.record.json</arg>
</arguments>
<msg timestamp="20140326 18:37:00.386" level="INFO">${record-file} = test/LeabraStd.record.json</msg>
<status status="PASS" endtime="20140326 18:37:00.386" starttime="20140326 18:37:00.385"></status>
</kw>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
</arguments>
<msg timestamp="20140326 18:37:00.386" level="INFO">@{metric-list} = [ ]</msg>
<status status="PASS" endtime="20140326 18:37:00.386" starttime="20140326 18:37:00.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${metric-list}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.387" level="INFO">${metric-list} = []</msg>
<status status="PASS" endtime="20140326 18:37:00.387" starttime="20140326 18:37:00.387"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.387" starttime="20140326 18:37:00.380"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.387" starttime="20140326 18:37:00.380"></status>
</kw>
<kw type="kw" name="emergent.Set Timeout">
<doc></doc>
<arguments>
<arg>60 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.389" level="INFO">${timeout} = 60 secs</msg>
<status status="PASS" endtime="20140326 18:37:00.389" starttime="20140326 18:37:00.388"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.389" starttime="20140326 18:37:00.388"></status>
</kw>
<kw type="kw" name="emergent.Add Metric">
<doc></doc>
<arguments>
<arg>avg</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="Collections.Append To List">
<doc>Adds `values` to the end of `list`.</doc>
<arguments>
<arg>${metric-list}</arg>
<arg>@{metric}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.390" starttime="20140326 18:37:00.390"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.390" starttime="20140326 18:37:00.389"></status>
</kw>
<kw type="kw" name="emergent.Add Metric">
<doc></doc>
<arguments>
<arg>max</arg>
<arg>0.25</arg>
<arg>0.30</arg>
</arguments>
<kw type="kw" name="Collections.Append To List">
<doc>Adds `values` to the end of `list`.</doc>
<arguments>
<arg>${metric-list}</arg>
<arg>@{metric}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.391" starttime="20140326 18:37:00.391"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.392" starttime="20140326 18:37:00.390"></status>
</kw>
<kw type="kw" name="emergent.Add Metric">
<doc></doc>
<arguments>
<arg>min</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="Collections.Append To List">
<doc>Adds `values` to the end of `list`.</doc>
<arguments>
<arg>${metric-list}</arg>
<arg>@{metric}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:00.393" starttime="20140326 18:37:00.393"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:00.393" starttime="20140326 18:37:00.392"></status>
</kw>
<kw type="kw" name="emergent.Run Standard Test">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${output} = emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140326 18:37:00.401" level="INFO">Starting process:
emergent -nogui -ni -p LeabraStd.proj -s test/LeabraStd.css.txt</msg>
<status status="PASS" endtime="20140326 18:37:00.405" starttime="20140326 18:37:00.401"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140326 18:37:00.406" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140326 18:37:12.430" level="INFO">Process completed.</msg>
<msg timestamp="20140326 18:37:12.431" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140326 18:37:12.430" starttime="20140326 18:37:00.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140326 18:37:12.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140326 18:37:12.432" starttime="20140326 18:37:12.431"></status>
</kw>
<msg timestamp="20140326 18:37:12.433" level="INFO">${output} = Network: Network_0 auto building
A Program is already running -- cannot run until it is done
A Program is already running -- cannot run until it is done
A Program is already running -- cannot run unti...</msg>
<status status="PASS" endtime="20140326 18:37:12.433" starttime="20140326 18:37:00.400"></status>
</kw>
<kw type="kw" name="${actuals} = emergent.Get Results">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
<arg>msg=No results found in output for ${name}: ${output}</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20140326 18:37:12.435" level="INFO">${result} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.8 }</msg>
<status status="PASS" endtime="20140326 18:37:12.435" starttime="20140326 18:37:12.434"></status>
</kw>
<msg timestamp="20140326 18:37:12.435" level="INFO">${actuals} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.8 }</msg>
<status status="PASS" endtime="20140326 18:37:12.435" starttime="20140326 18:37:12.433"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals}\n</arg>
</arguments>
<msg timestamp="20140326 18:37:12.437" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStd.record.json"&gt;/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStd.record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140326 18:37:12.437" starttime="20140326 18:37:12.435"></status>
</kw>
<kw type="kw" name="${baseline} = emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${status}, ${content} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Get File</arg>
<arg>${file}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.439" html="yes" level="INFO">Getting file '&lt;a href="file:///home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStd.baseline.json"&gt;/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStd.baseline.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140326 18:37:12.440" starttime="20140326 18:37:12.439"></status>
</kw>
<msg timestamp="20140326 18:37:12.440" level="INFO">${status} = PASS</msg>
<msg timestamp="20140326 18:37:12.441" level="INFO">${content} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.5 }</msg>
<status status="PASS" endtime="20140326 18:37:12.440" starttime="20140326 18:37:12.438"></status>
</kw>
<kw type="kw" name="${content} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${EMPTY}</arg>
<arg>${content}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.442" level="INFO">${content} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.5 }</msg>
<status status="PASS" endtime="20140326 18:37:12.442" starttime="20140326 18:37:12.441"></status>
</kw>
<kw type="kw" name="${status}, ${baseline} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.444" starttime="20140326 18:37:12.443"></status>
</kw>
<msg timestamp="20140326 18:37:12.444" level="INFO">${status} = PASS</msg>
<msg timestamp="20140326 18:37:12.444" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.5 }</msg>
<status status="PASS" endtime="20140326 18:37:12.444" starttime="20140326 18:37:12.443"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${status}</arg>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.445" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.5 }</msg>
<status status="PASS" endtime="20140326 18:37:12.445" starttime="20140326 18:37:12.445"></status>
</kw>
<msg timestamp="20140326 18:37:12.445" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.5 }</msg>
<status status="PASS" endtime="20140326 18:37:12.445" starttime="20140326 18:37:12.437"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Add To Baseline</arg>
<arg>${baseline-file}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.446" starttime="20140326 18:37:12.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Set Variable</arg>
<arg>${baseline}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.447" starttime="20140326 18:37:12.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.447" level="INFO">${baseline} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.5 }</msg>
<status status="PASS" endtime="20140326 18:37:12.447" starttime="20140326 18:37:12.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.448" level="INFO">${actuals} = { "name": "LeabraStd", "min": 9, "max": 13, "avg": 10.8 }</msg>
<status status="PASS" endtime="20140326 18:37:12.448" starttime="20140326 18:37:12.448"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.448" starttime="20140326 18:37:00.399"></status>
</kw>
<kw type="kw" name="emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${fail-if-outside} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${False}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.450" level="INFO">${fail-if-outside} = False</msg>
<status status="PASS" endtime="20140326 18:37:12.450" starttime="20140326 18:37:12.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.451" level="INFO">${fail-if-outside} = False</msg>
<status status="PASS" endtime="20140326 18:37:12.451" starttime="20140326 18:37:12.451"></status>
</kw>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:12.455" level="INFO">${match} = "avg": 10.8</msg>
<msg timestamp="20140326 18:37:12.455" level="INFO">${value} = 10.8</msg>
<status status="PASS" endtime="20140326 18:37:12.454" starttime="20140326 18:37:12.454"></status>
</kw>
<msg timestamp="20140326 18:37:12.455" level="INFO">${value} = 10.8</msg>
<status status="PASS" endtime="20140326 18:37:12.455" starttime="20140326 18:37:12.453"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:12.457" level="INFO">${match} = "avg": 10.5</msg>
<msg timestamp="20140326 18:37:12.457" level="INFO">${value} = 10.5</msg>
<status status="PASS" endtime="20140326 18:37:12.456" starttime="20140326 18:37:12.456"></status>
</kw>
<msg timestamp="20140326 18:37:12.457" level="INFO">${target} = 10.5</msg>
<status status="PASS" endtime="20140326 18:37:12.457" starttime="20140326 18:37:12.455"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.459" level="INFO">${low} = 8.925</msg>
<status status="PASS" endtime="20140326 18:37:12.459" starttime="20140326 18:37:12.458"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.460" level="INFO">${high} = 12.075</msg>
<status status="PASS" endtime="20140326 18:37:12.459" starttime="20140326 18:37:12.459"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.463" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.463" starttime="20140326 18:37:12.463"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.465" starttime="20140326 18:37:12.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.466" starttime="20140326 18:37:12.465"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.466" starttime="20140326 18:37:12.465"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.466" starttime="20140326 18:37:12.463"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.466" starttime="20140326 18:37:12.461"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.468" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.468" starttime="20140326 18:37:12.467"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.470" starttime="20140326 18:37:12.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.470" starttime="20140326 18:37:12.470"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.471" starttime="20140326 18:37:12.470"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.471" starttime="20140326 18:37:12.468"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.471" starttime="20140326 18:37:12.467"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.471" starttime="20140326 18:37:12.460"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.471" starttime="20140326 18:37:12.457"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.471" starttime="20140326 18:37:12.452"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.471" starttime="20140326 18:37:12.452"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.471" starttime="20140326 18:37:12.451"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.25, ${required} = 0.30">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:12.474" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140326 18:37:12.475" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140326 18:37:12.474" starttime="20140326 18:37:12.474"></status>
</kw>
<msg timestamp="20140326 18:37:12.475" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140326 18:37:12.475" starttime="20140326 18:37:12.473"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:12.476" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140326 18:37:12.477" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140326 18:37:12.476" starttime="20140326 18:37:12.476"></status>
</kw>
<msg timestamp="20140326 18:37:12.477" level="INFO">${target} = 13</msg>
<status status="PASS" endtime="20140326 18:37:12.477" starttime="20140326 18:37:12.475"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.479" level="INFO">${low} = 9.75</msg>
<status status="PASS" endtime="20140326 18:37:12.478" starttime="20140326 18:37:12.478"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.480" level="INFO">${high} = 16.25</msg>
<status status="PASS" endtime="20140326 18:37:12.479" starttime="20140326 18:37:12.479"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.483" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.483" starttime="20140326 18:37:12.482"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.485" starttime="20140326 18:37:12.484"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.486" starttime="20140326 18:37:12.485"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.486" starttime="20140326 18:37:12.485"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.486" starttime="20140326 18:37:12.483"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.486" starttime="20140326 18:37:12.481"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.487" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.487" starttime="20140326 18:37:12.487"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.490" starttime="20140326 18:37:12.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.491" starttime="20140326 18:37:12.491"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.491" starttime="20140326 18:37:12.490"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.491" starttime="20140326 18:37:12.488"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.491" starttime="20140326 18:37:12.486"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.492" starttime="20140326 18:37:12.480"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.492" starttime="20140326 18:37:12.477"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.492" starttime="20140326 18:37:12.472"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.492" starttime="20140326 18:37:12.472"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.492" starttime="20140326 18:37:12.472"></status>
</kw>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:12.495" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140326 18:37:12.495" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140326 18:37:12.495" starttime="20140326 18:37:12.495"></status>
</kw>
<msg timestamp="20140326 18:37:12.496" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140326 18:37:12.495" starttime="20140326 18:37:12.494"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:12.497" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140326 18:37:12.497" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140326 18:37:12.497" starttime="20140326 18:37:12.497"></status>
</kw>
<msg timestamp="20140326 18:37:12.498" level="INFO">${target} = 9</msg>
<status status="PASS" endtime="20140326 18:37:12.497" starttime="20140326 18:37:12.496"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.499" level="INFO">${low} = 7.65</msg>
<status status="PASS" endtime="20140326 18:37:12.499" starttime="20140326 18:37:12.499"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.501" level="INFO">${high} = 10.35</msg>
<status status="PASS" endtime="20140326 18:37:12.501" starttime="20140326 18:37:12.500"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.503" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.503" starttime="20140326 18:37:12.503"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.505" starttime="20140326 18:37:12.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.506" starttime="20140326 18:37:12.506"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.506" starttime="20140326 18:37:12.505"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.506" starttime="20140326 18:37:12.504"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.506" starttime="20140326 18:37:12.502"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.508" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.508" starttime="20140326 18:37:12.508"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.510" starttime="20140326 18:37:12.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.510" starttime="20140326 18:37:12.510"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.511" starttime="20140326 18:37:12.510"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.511" starttime="20140326 18:37:12.508"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.511" starttime="20140326 18:37:12.507"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.511" starttime="20140326 18:37:12.501"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.511" starttime="20140326 18:37:12.498"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.511" starttime="20140326 18:37:12.493"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.511" starttime="20140326 18:37:12.492"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.511" starttime="20140326 18:37:12.492"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.511" starttime="20140326 18:37:12.451"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.512" starttime="20140326 18:37:12.449"></status>
</kw>
<kw type="kw" name="emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${fail-if-outside} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${True}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.513" level="INFO">${fail-if-outside} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.513" starttime="20140326 18:37:12.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.513" level="INFO">${fail-if-outside} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.513" starttime="20140326 18:37:12.513"></status>
</kw>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:12.517" level="INFO">${match} = "avg": 10.8</msg>
<msg timestamp="20140326 18:37:12.517" level="INFO">${value} = 10.8</msg>
<status status="PASS" endtime="20140326 18:37:12.516" starttime="20140326 18:37:12.516"></status>
</kw>
<msg timestamp="20140326 18:37:12.517" level="INFO">${value} = 10.8</msg>
<status status="PASS" endtime="20140326 18:37:12.517" starttime="20140326 18:37:12.515"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:12.519" level="INFO">${match} = "avg": 10.5</msg>
<msg timestamp="20140326 18:37:12.519" level="INFO">${value} = 10.5</msg>
<status status="PASS" endtime="20140326 18:37:12.519" starttime="20140326 18:37:12.518"></status>
</kw>
<msg timestamp="20140326 18:37:12.520" level="INFO">${target} = 10.5</msg>
<status status="PASS" endtime="20140326 18:37:12.520" starttime="20140326 18:37:12.517"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.522" level="INFO">${low} = 7.875</msg>
<status status="PASS" endtime="20140326 18:37:12.522" starttime="20140326 18:37:12.522"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.523" level="INFO">${high} = 13.125</msg>
<status status="PASS" endtime="20140326 18:37:12.523" starttime="20140326 18:37:12.522"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.525" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.525" starttime="20140326 18:37:12.525"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.527" starttime="20140326 18:37:12.527"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.527" starttime="20140326 18:37:12.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.528" starttime="20140326 18:37:12.528"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.528" starttime="20140326 18:37:12.525"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.528" starttime="20140326 18:37:12.524"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.531" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.531" starttime="20140326 18:37:12.530"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.533" starttime="20140326 18:37:12.532"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.533" starttime="20140326 18:37:12.532"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.533" starttime="20140326 18:37:12.533"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.534" starttime="20140326 18:37:12.531"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.534" starttime="20140326 18:37:12.529"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.534" starttime="20140326 18:37:12.523"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.534" starttime="20140326 18:37:12.521"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.534" starttime="20140326 18:37:12.514"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.534" starttime="20140326 18:37:12.514"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.534" starttime="20140326 18:37:12.514"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.25, ${required} = 0.30">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:12.537" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140326 18:37:12.537" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140326 18:37:12.537" starttime="20140326 18:37:12.537"></status>
</kw>
<msg timestamp="20140326 18:37:12.538" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140326 18:37:12.538" starttime="20140326 18:37:12.536"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:12.539" level="INFO">${match} = "max": 13</msg>
<msg timestamp="20140326 18:37:12.539" level="INFO">${value} = 13</msg>
<status status="PASS" endtime="20140326 18:37:12.539" starttime="20140326 18:37:12.539"></status>
</kw>
<msg timestamp="20140326 18:37:12.540" level="INFO">${target} = 13</msg>
<status status="PASS" endtime="20140326 18:37:12.540" starttime="20140326 18:37:12.538"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.542" level="INFO">${low} = 9.1</msg>
<status status="PASS" endtime="20140326 18:37:12.542" starttime="20140326 18:37:12.542"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.543" level="INFO">${high} = 16.9</msg>
<status status="PASS" endtime="20140326 18:37:12.543" starttime="20140326 18:37:12.542"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.545" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.545" starttime="20140326 18:37:12.545"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.547" starttime="20140326 18:37:12.547"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.547" starttime="20140326 18:37:12.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.548" starttime="20140326 18:37:12.548"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.548" starttime="20140326 18:37:12.545"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.548" starttime="20140326 18:37:12.544"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.550" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.550" starttime="20140326 18:37:12.549"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.552" starttime="20140326 18:37:12.551"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.552" starttime="20140326 18:37:12.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.552" starttime="20140326 18:37:12.552"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.552" starttime="20140326 18:37:12.550"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.553" starttime="20140326 18:37:12.548"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.553" starttime="20140326 18:37:12.543"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.553" starttime="20140326 18:37:12.541"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.553" starttime="20140326 18:37:12.535"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.553" starttime="20140326 18:37:12.535"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.553" starttime="20140326 18:37:12.534"></status>
</kw>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:12.556" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140326 18:37:12.556" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140326 18:37:12.556" starttime="20140326 18:37:12.556"></status>
</kw>
<msg timestamp="20140326 18:37:12.557" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140326 18:37:12.556" starttime="20140326 18:37:12.555"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:12.558" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140326 18:37:12.558" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140326 18:37:12.558" starttime="20140326 18:37:12.558"></status>
</kw>
<msg timestamp="20140326 18:37:12.559" level="INFO">${target} = 9</msg>
<status status="PASS" endtime="20140326 18:37:12.558" starttime="20140326 18:37:12.557"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.561" level="INFO">${low} = 6.75</msg>
<status status="PASS" endtime="20140326 18:37:12.561" starttime="20140326 18:37:12.561"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.562" level="INFO">${high} = 11.25</msg>
<status status="PASS" endtime="20140326 18:37:12.562" starttime="20140326 18:37:12.561"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.564" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.564" starttime="20140326 18:37:12.564"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.567" starttime="20140326 18:37:12.566"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.567" starttime="20140326 18:37:12.566"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.567" starttime="20140326 18:37:12.567"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.567" starttime="20140326 18:37:12.564"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.568" starttime="20140326 18:37:12.563"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:12.570" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:12.570" starttime="20140326 18:37:12.570"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.572" starttime="20140326 18:37:12.572"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.572" starttime="20140326 18:37:12.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.573" starttime="20140326 18:37:12.572"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.573" starttime="20140326 18:37:12.570"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.573" starttime="20140326 18:37:12.568"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.573" starttime="20140326 18:37:12.562"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.573" starttime="20140326 18:37:12.559"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.573" starttime="20140326 18:37:12.554"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.574" starttime="20140326 18:37:12.554"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.574" starttime="20140326 18:37:12.553"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.574" starttime="20140326 18:37:12.513"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.574" starttime="20140326 18:37:12.512"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.574" starttime="20140326 18:37:00.398"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140326 18:37:12.574" critical="yes" starttime="20140326 18:37:00.379"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20140326 18:37:12.576" starttime="20140326 18:37:00.370"></status>
</suite>
<suite source="/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStdCopy.css.txt" id="s1-s3" name="LeabraStdCopy.css">
<test id="s1-s3-t1" name="Leabra Standard Test">
<kw type="kw" name="emergent.Initialize Standard Test">
<doc></doc>
<arguments>
<arg>LeabraStdCopy</arg>
<arg>test</arg>
</arguments>
<kw type="kw" name="emergent.Set Variables">
<doc></doc>
<arguments>
<arg>${project}</arg>
<arg>${test-dir}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${S}</arg>
<arg>${SPACE * 4}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.590" level="INFO">${S} =     </msg>
<status status="PASS" endtime="20140326 18:37:12.590" starttime="20140326 18:37:12.589"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.590" level="INFO">${name} = LeabraStdCopy</msg>
<status status="PASS" endtime="20140326 18:37:12.590" starttime="20140326 18:37:12.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140326 18:37:12.591" level="INFO">${project-file} = LeabraStdCopy.proj</msg>
<status status="PASS" endtime="20140326 18:37:12.591" starttime="20140326 18:37:12.591"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${test-dir}/${name}.css.txt</arg>
</arguments>
<msg timestamp="20140326 18:37:12.592" level="INFO">${script-file} = test/LeabraStdCopy.css.txt</msg>
<status status="PASS" endtime="20140326 18:37:12.593" starttime="20140326 18:37:12.591"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline-file}</arg>
<arg>${test-dir}/${name}.baseline.json</arg>
</arguments>
<msg timestamp="20140326 18:37:12.593" level="INFO">${baseline-file} = test/LeabraStdCopy.baseline.json</msg>
<status status="PASS" endtime="20140326 18:37:12.593" starttime="20140326 18:37:12.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${test-dir}/${name}.record.json</arg>
</arguments>
<msg timestamp="20140326 18:37:12.594" level="INFO">${record-file} = test/LeabraStdCopy.record.json</msg>
<status status="PASS" endtime="20140326 18:37:12.594" starttime="20140326 18:37:12.594"></status>
</kw>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
</arguments>
<msg timestamp="20140326 18:37:12.595" level="INFO">@{metric-list} = [ ]</msg>
<status status="PASS" endtime="20140326 18:37:12.595" starttime="20140326 18:37:12.594"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${metric-list}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.595" level="INFO">${metric-list} = []</msg>
<status status="PASS" endtime="20140326 18:37:12.595" starttime="20140326 18:37:12.595"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.595" starttime="20140326 18:37:12.588"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.596" starttime="20140326 18:37:12.588"></status>
</kw>
<kw type="kw" name="emergent.Set Timeout">
<doc></doc>
<arguments>
<arg>60 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.597" level="INFO">${timeout} = 60 secs</msg>
<status status="PASS" endtime="20140326 18:37:12.597" starttime="20140326 18:37:12.596"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.597" starttime="20140326 18:37:12.596"></status>
</kw>
<kw type="kw" name="emergent.Add Metric">
<doc></doc>
<arguments>
<arg>avg</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="Collections.Append To List">
<doc>Adds `values` to the end of `list`.</doc>
<arguments>
<arg>${metric-list}</arg>
<arg>@{metric}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.598" starttime="20140326 18:37:12.598"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.598" starttime="20140326 18:37:12.597"></status>
</kw>
<kw type="kw" name="emergent.Add Metric">
<doc></doc>
<arguments>
<arg>max</arg>
<arg>0.25</arg>
<arg>0.30</arg>
</arguments>
<kw type="kw" name="Collections.Append To List">
<doc>Adds `values` to the end of `list`.</doc>
<arguments>
<arg>${metric-list}</arg>
<arg>@{metric}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.600" starttime="20140326 18:37:12.599"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.600" starttime="20140326 18:37:12.599"></status>
</kw>
<kw type="kw" name="emergent.Add Metric">
<doc></doc>
<arguments>
<arg>min</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="Collections.Append To List">
<doc>Adds `values` to the end of `list`.</doc>
<arguments>
<arg>${metric-list}</arg>
<arg>@{metric}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:12.601" starttime="20140326 18:37:12.601"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:12.601" starttime="20140326 18:37:12.600"></status>
</kw>
<kw type="kw" name="emergent.Run Standard Test">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${output} = emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140326 18:37:12.604" level="INFO">Starting process:
emergent -nogui -ni -p LeabraStdCopy.proj -s test/LeabraStdCopy.css.txt</msg>
<status status="PASS" endtime="20140326 18:37:12.607" starttime="20140326 18:37:12.603"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140326 18:37:12.608" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140326 18:37:25.033" level="INFO">Process completed.</msg>
<msg timestamp="20140326 18:37:25.033" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140326 18:37:25.033" starttime="20140326 18:37:12.607"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140326 18:37:25.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140326 18:37:25.034" starttime="20140326 18:37:25.034"></status>
</kw>
<msg timestamp="20140326 18:37:25.035" level="INFO">${output} = Network: Network_0 auto building
A Program is already running -- cannot run until it is done
A Program is already running -- cannot run until it is done
A Program is already running -- cannot run unti...</msg>
<status status="PASS" endtime="20140326 18:37:25.035" starttime="20140326 18:37:12.603"></status>
</kw>
<kw type="kw" name="${actuals} = emergent.Get Results">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
<arg>msg=No results found in output for ${name}: ${output}</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20140326 18:37:25.037" level="INFO">${result} = { "name": "LeabraStdCopy", "min": 7, "max": 22, "avg": 12.1 }</msg>
<status status="PASS" endtime="20140326 18:37:25.037" starttime="20140326 18:37:25.037"></status>
</kw>
<msg timestamp="20140326 18:37:25.038" level="INFO">${actuals} = { "name": "LeabraStdCopy", "min": 7, "max": 22, "avg": 12.1 }</msg>
<status status="PASS" endtime="20140326 18:37:25.038" starttime="20140326 18:37:25.036"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals}\n</arg>
</arguments>
<msg timestamp="20140326 18:37:25.039" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStdCopy.record.json"&gt;/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStdCopy.record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140326 18:37:25.040" starttime="20140326 18:37:25.038"></status>
</kw>
<kw type="kw" name="${baseline} = emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${status}, ${content} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Get File</arg>
<arg>${file}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.043" html="yes" level="INFO">Getting file '&lt;a href="file:///home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStdCopy.baseline.json"&gt;/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStdCopy.baseline.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140326 18:37:25.043" starttime="20140326 18:37:25.042"></status>
</kw>
<msg timestamp="20140326 18:37:25.043" level="INFO">${status} = PASS</msg>
<msg timestamp="20140326 18:37:25.043" level="INFO">${content} = { "name": "LeabraStdCopy", "min": 9, "max": 22, "avg": 12.2 }</msg>
<status status="PASS" endtime="20140326 18:37:25.043" starttime="20140326 18:37:25.042"></status>
</kw>
<kw type="kw" name="${content} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${EMPTY}</arg>
<arg>${content}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.045" level="INFO">${content} = { "name": "LeabraStdCopy", "min": 9, "max": 22, "avg": 12.2 }</msg>
<status status="PASS" endtime="20140326 18:37:25.044" starttime="20140326 18:37:25.044"></status>
</kw>
<kw type="kw" name="${status}, ${baseline} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.047" starttime="20140326 18:37:25.046"></status>
</kw>
<msg timestamp="20140326 18:37:25.047" level="INFO">${status} = PASS</msg>
<msg timestamp="20140326 18:37:25.047" level="INFO">${baseline} = { "name": "LeabraStdCopy", "min": 9, "max": 22, "avg": 12.2 }</msg>
<status status="PASS" endtime="20140326 18:37:25.047" starttime="20140326 18:37:25.045"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${status}</arg>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.049" level="INFO">${baseline} = { "name": "LeabraStdCopy", "min": 9, "max": 22, "avg": 12.2 }</msg>
<status status="PASS" endtime="20140326 18:37:25.048" starttime="20140326 18:37:25.048"></status>
</kw>
<msg timestamp="20140326 18:37:25.049" level="INFO">${baseline} = { "name": "LeabraStdCopy", "min": 9, "max": 22, "avg": 12.2 }</msg>
<status status="PASS" endtime="20140326 18:37:25.049" starttime="20140326 18:37:25.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Add To Baseline</arg>
<arg>${baseline-file}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.050" starttime="20140326 18:37:25.050"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Set Variable</arg>
<arg>${baseline}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.051" starttime="20140326 18:37:25.050"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.052" level="INFO">${baseline} = { "name": "LeabraStdCopy", "min": 9, "max": 22, "avg": 12.2 }</msg>
<status status="PASS" endtime="20140326 18:37:25.052" starttime="20140326 18:37:25.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.053" level="INFO">${actuals} = { "name": "LeabraStdCopy", "min": 7, "max": 22, "avg": 12.1 }</msg>
<status status="PASS" endtime="20140326 18:37:25.053" starttime="20140326 18:37:25.053"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.053" starttime="20140326 18:37:12.602"></status>
</kw>
<kw type="kw" name="emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${fail-if-outside} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${False}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.055" level="INFO">${fail-if-outside} = False</msg>
<status status="PASS" endtime="20140326 18:37:25.055" starttime="20140326 18:37:25.054"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.056" level="INFO">${fail-if-outside} = False</msg>
<status status="PASS" endtime="20140326 18:37:25.056" starttime="20140326 18:37:25.055"></status>
</kw>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:25.060" level="INFO">${match} = "avg": 12.1</msg>
<msg timestamp="20140326 18:37:25.061" level="INFO">${value} = 12.1</msg>
<status status="PASS" endtime="20140326 18:37:25.060" starttime="20140326 18:37:25.060"></status>
</kw>
<msg timestamp="20140326 18:37:25.061" level="INFO">${value} = 12.1</msg>
<status status="PASS" endtime="20140326 18:37:25.061" starttime="20140326 18:37:25.059"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:25.063" level="INFO">${match} = "avg": 12.2</msg>
<msg timestamp="20140326 18:37:25.063" level="INFO">${value} = 12.2</msg>
<status status="PASS" endtime="20140326 18:37:25.062" starttime="20140326 18:37:25.062"></status>
</kw>
<msg timestamp="20140326 18:37:25.063" level="INFO">${target} = 12.2</msg>
<status status="PASS" endtime="20140326 18:37:25.063" starttime="20140326 18:37:25.061"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.065" level="INFO">${low} = 10.37</msg>
<status status="PASS" endtime="20140326 18:37:25.065" starttime="20140326 18:37:25.064"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.065" level="INFO">${high} = 14.03</msg>
<status status="PASS" endtime="20140326 18:37:25.065" starttime="20140326 18:37:25.065"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.068" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.068" starttime="20140326 18:37:25.068"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.070" starttime="20140326 18:37:25.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.071" starttime="20140326 18:37:25.070"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.071" starttime="20140326 18:37:25.070"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.071" starttime="20140326 18:37:25.068"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.071" starttime="20140326 18:37:25.067"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.073" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.073" starttime="20140326 18:37:25.072"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.075" starttime="20140326 18:37:25.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.076" starttime="20140326 18:37:25.075"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.076" starttime="20140326 18:37:25.075"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.076" starttime="20140326 18:37:25.073"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.076" starttime="20140326 18:37:25.071"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.076" starttime="20140326 18:37:25.066"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.076" starttime="20140326 18:37:25.063"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.077" starttime="20140326 18:37:25.058"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.077" starttime="20140326 18:37:25.057"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.077" starttime="20140326 18:37:25.056"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.25, ${required} = 0.30">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:25.080" level="INFO">${match} = "max": 22</msg>
<msg timestamp="20140326 18:37:25.080" level="INFO">${value} = 22</msg>
<status status="PASS" endtime="20140326 18:37:25.080" starttime="20140326 18:37:25.079"></status>
</kw>
<msg timestamp="20140326 18:37:25.080" level="INFO">${value} = 22</msg>
<status status="PASS" endtime="20140326 18:37:25.080" starttime="20140326 18:37:25.078"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:25.082" level="INFO">${match} = "max": 22</msg>
<msg timestamp="20140326 18:37:25.082" level="INFO">${value} = 22</msg>
<status status="PASS" endtime="20140326 18:37:25.082" starttime="20140326 18:37:25.081"></status>
</kw>
<msg timestamp="20140326 18:37:25.082" level="INFO">${target} = 22</msg>
<status status="PASS" endtime="20140326 18:37:25.082" starttime="20140326 18:37:25.080"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.084" level="INFO">${low} = 16.5</msg>
<status status="PASS" endtime="20140326 18:37:25.084" starttime="20140326 18:37:25.083"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.084" level="INFO">${high} = 27.5</msg>
<status status="PASS" endtime="20140326 18:37:25.084" starttime="20140326 18:37:25.084"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.087" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.087" starttime="20140326 18:37:25.086"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.088" starttime="20140326 18:37:25.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.089" starttime="20140326 18:37:25.089"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.090" starttime="20140326 18:37:25.089"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.090" starttime="20140326 18:37:25.087"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.090" starttime="20140326 18:37:25.086"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.091" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.091" starttime="20140326 18:37:25.091"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.093" starttime="20140326 18:37:25.093"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.094" starttime="20140326 18:37:25.094"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.094" starttime="20140326 18:37:25.093"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.094" starttime="20140326 18:37:25.092"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.094" starttime="20140326 18:37:25.090"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.094" starttime="20140326 18:37:25.085"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.095" starttime="20140326 18:37:25.082"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.095" starttime="20140326 18:37:25.077"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.095" starttime="20140326 18:37:25.077"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.095" starttime="20140326 18:37:25.077"></status>
</kw>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:25.098" level="INFO">${match} = "min": 7</msg>
<msg timestamp="20140326 18:37:25.098" level="INFO">${value} = 7</msg>
<status status="PASS" endtime="20140326 18:37:25.098" starttime="20140326 18:37:25.097"></status>
</kw>
<msg timestamp="20140326 18:37:25.098" level="INFO">${value} = 7</msg>
<status status="PASS" endtime="20140326 18:37:25.098" starttime="20140326 18:37:25.096"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:25.100" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140326 18:37:25.100" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140326 18:37:25.100" starttime="20140326 18:37:25.099"></status>
</kw>
<msg timestamp="20140326 18:37:25.100" level="INFO">${target} = 9</msg>
<status status="PASS" endtime="20140326 18:37:25.100" starttime="20140326 18:37:25.098"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.102" level="INFO">${low} = 7.65</msg>
<status status="PASS" endtime="20140326 18:37:25.102" starttime="20140326 18:37:25.101"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.103" level="INFO">${high} = 10.35</msg>
<status status="PASS" endtime="20140326 18:37:25.102" starttime="20140326 18:37:25.102"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.105" level="INFO">${isGreater} = False</msg>
<status status="PASS" endtime="20140326 18:37:25.105" starttime="20140326 18:37:25.105"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.107" starttime="20140326 18:37:25.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140326 18:37:25.108" level="WARN">min = 7 is LOW (7.65)</msg>
<status status="PASS" endtime="20140326 18:37:25.108" starttime="20140326 18:37:25.108"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.109" starttime="20140326 18:37:25.107"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.109" starttime="20140326 18:37:25.107"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.109" starttime="20140326 18:37:25.105"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.109" starttime="20140326 18:37:25.104"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.111" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.111" starttime="20140326 18:37:25.110"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.112" starttime="20140326 18:37:25.112"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.113" starttime="20140326 18:37:25.113"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.113" starttime="20140326 18:37:25.112"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.113" starttime="20140326 18:37:25.111"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.113" starttime="20140326 18:37:25.109"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.114" starttime="20140326 18:37:25.103"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.114" starttime="20140326 18:37:25.100"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.114" starttime="20140326 18:37:25.095"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.114" starttime="20140326 18:37:25.095"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.114" starttime="20140326 18:37:25.095"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.114" starttime="20140326 18:37:25.056"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.114" starttime="20140326 18:37:25.054"></status>
</kw>
<kw type="kw" name="emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${fail-if-outside} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${True}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.115" level="INFO">${fail-if-outside} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.115" starttime="20140326 18:37:25.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.116" level="INFO">${fail-if-outside} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.116" starttime="20140326 18:37:25.116"></status>
</kw>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:25.120" level="INFO">${match} = "avg": 12.1</msg>
<msg timestamp="20140326 18:37:25.120" level="INFO">${value} = 12.1</msg>
<status status="PASS" endtime="20140326 18:37:25.120" starttime="20140326 18:37:25.120"></status>
</kw>
<msg timestamp="20140326 18:37:25.121" level="INFO">${value} = 12.1</msg>
<status status="PASS" endtime="20140326 18:37:25.121" starttime="20140326 18:37:25.118"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:25.122" level="INFO">${match} = "avg": 12.2</msg>
<msg timestamp="20140326 18:37:25.123" level="INFO">${value} = 12.2</msg>
<status status="PASS" endtime="20140326 18:37:25.122" starttime="20140326 18:37:25.122"></status>
</kw>
<msg timestamp="20140326 18:37:25.123" level="INFO">${target} = 12.2</msg>
<status status="PASS" endtime="20140326 18:37:25.123" starttime="20140326 18:37:25.121"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.125" level="INFO">${low} = 9.15</msg>
<status status="PASS" endtime="20140326 18:37:25.125" starttime="20140326 18:37:25.124"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.126" level="INFO">${high} = 15.25</msg>
<status status="PASS" endtime="20140326 18:37:25.125" starttime="20140326 18:37:25.125"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.128" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.128" starttime="20140326 18:37:25.128"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.130" starttime="20140326 18:37:25.130"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.130" starttime="20140326 18:37:25.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.131" starttime="20140326 18:37:25.130"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.131" starttime="20140326 18:37:25.128"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.131" starttime="20140326 18:37:25.127"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.132" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.132" starttime="20140326 18:37:25.132"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.134" starttime="20140326 18:37:25.134"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.135" starttime="20140326 18:37:25.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.138" starttime="20140326 18:37:25.137"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.138" starttime="20140326 18:37:25.133"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.138" starttime="20140326 18:37:25.131"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.139" starttime="20140326 18:37:25.126"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.139" starttime="20140326 18:37:25.123"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.139" starttime="20140326 18:37:25.117"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.139" starttime="20140326 18:37:25.116"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.139" starttime="20140326 18:37:25.116"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.25, ${required} = 0.30">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:25.143" level="INFO">${match} = "max": 22</msg>
<msg timestamp="20140326 18:37:25.143" level="INFO">${value} = 22</msg>
<status status="PASS" endtime="20140326 18:37:25.143" starttime="20140326 18:37:25.142"></status>
</kw>
<msg timestamp="20140326 18:37:25.143" level="INFO">${value} = 22</msg>
<status status="PASS" endtime="20140326 18:37:25.143" starttime="20140326 18:37:25.141"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:25.145" level="INFO">${match} = "max": 22</msg>
<msg timestamp="20140326 18:37:25.145" level="INFO">${value} = 22</msg>
<status status="PASS" endtime="20140326 18:37:25.145" starttime="20140326 18:37:25.144"></status>
</kw>
<msg timestamp="20140326 18:37:25.145" level="INFO">${target} = 22</msg>
<status status="PASS" endtime="20140326 18:37:25.145" starttime="20140326 18:37:25.143"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.147" level="INFO">${low} = 15.4</msg>
<status status="PASS" endtime="20140326 18:37:25.147" starttime="20140326 18:37:25.146"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.148" level="INFO">${high} = 28.6</msg>
<status status="PASS" endtime="20140326 18:37:25.148" starttime="20140326 18:37:25.147"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.150" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.150" starttime="20140326 18:37:25.150"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.152" starttime="20140326 18:37:25.152"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.152" starttime="20140326 18:37:25.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.153" starttime="20140326 18:37:25.153"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.153" starttime="20140326 18:37:25.150"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.153" starttime="20140326 18:37:25.149"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.155" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.155" starttime="20140326 18:37:25.155"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.157" starttime="20140326 18:37:25.157"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.157" starttime="20140326 18:37:25.156"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.158" starttime="20140326 18:37:25.158"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.158" starttime="20140326 18:37:25.155"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.158" starttime="20140326 18:37:25.154"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.159" starttime="20140326 18:37:25.148"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.159" starttime="20140326 18:37:25.145"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.159" starttime="20140326 18:37:25.140"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.159" starttime="20140326 18:37:25.140"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.159" starttime="20140326 18:37:25.139"></status>
</kw>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:25.162" level="INFO">${match} = "min": 7</msg>
<msg timestamp="20140326 18:37:25.162" level="INFO">${value} = 7</msg>
<status status="PASS" endtime="20140326 18:37:25.162" starttime="20140326 18:37:25.162"></status>
</kw>
<msg timestamp="20140326 18:37:25.163" level="INFO">${value} = 7</msg>
<status status="PASS" endtime="20140326 18:37:25.162" starttime="20140326 18:37:25.161"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:25.164" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140326 18:37:25.164" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140326 18:37:25.164" starttime="20140326 18:37:25.164"></status>
</kw>
<msg timestamp="20140326 18:37:25.165" level="INFO">${target} = 9</msg>
<status status="PASS" endtime="20140326 18:37:25.164" starttime="20140326 18:37:25.163"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.166" level="INFO">${low} = 6.75</msg>
<status status="PASS" endtime="20140326 18:37:25.166" starttime="20140326 18:37:25.166"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.167" level="INFO">${high} = 11.25</msg>
<status status="PASS" endtime="20140326 18:37:25.167" starttime="20140326 18:37:25.166"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.169" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.169" starttime="20140326 18:37:25.169"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.172" starttime="20140326 18:37:25.171"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.172" starttime="20140326 18:37:25.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.173" starttime="20140326 18:37:25.172"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.173" starttime="20140326 18:37:25.170"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.173" starttime="20140326 18:37:25.168"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:25.175" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:25.175" starttime="20140326 18:37:25.174"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.177" starttime="20140326 18:37:25.176"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.177" starttime="20140326 18:37:25.176"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.177" starttime="20140326 18:37:25.177"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.178" starttime="20140326 18:37:25.175"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.178" starttime="20140326 18:37:25.173"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.178" starttime="20140326 18:37:25.167"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.178" starttime="20140326 18:37:25.165"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.178" starttime="20140326 18:37:25.160"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.178" starttime="20140326 18:37:25.159"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.179" starttime="20140326 18:37:25.159"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.179" starttime="20140326 18:37:25.116"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.179" starttime="20140326 18:37:25.114"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.179" starttime="20140326 18:37:12.601"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20140326 18:37:25.179" critical="yes" starttime="20140326 18:37:12.587"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20140326 18:37:25.180" starttime="20140326 18:37:12.577"></status>
</suite>
<suite source="/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStdEmbedded.css.txt" id="s1-s4" name="LeabraStdEmbedded.css">
<test id="s1-s4-t1" name="Leabra Standard Test">
<kw type="kw" name="emergent.Initialize Standard Test">
<doc></doc>
<arguments>
<arg>LeabraStdEmbedded</arg>
<arg>test</arg>
</arguments>
<kw type="kw" name="emergent.Set Variables">
<doc></doc>
<arguments>
<arg>${project}</arg>
<arg>${test-dir}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${S}</arg>
<arg>${SPACE * 4}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.193" level="INFO">${S} =     </msg>
<status status="PASS" endtime="20140326 18:37:25.193" starttime="20140326 18:37:25.192"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${name}</arg>
<arg>${namearg}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.194" level="INFO">${name} = LeabraStdEmbedded</msg>
<status status="PASS" endtime="20140326 18:37:25.194" starttime="20140326 18:37:25.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${project-file}</arg>
<arg>${name}.proj</arg>
</arguments>
<msg timestamp="20140326 18:37:25.195" level="INFO">${project-file} = LeabraStdEmbedded.proj</msg>
<status status="PASS" endtime="20140326 18:37:25.195" starttime="20140326 18:37:25.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${script-file}</arg>
<arg>${test-dir}/${name}.css.txt</arg>
</arguments>
<msg timestamp="20140326 18:37:25.196" level="INFO">${script-file} = test/LeabraStdEmbedded.css.txt</msg>
<status status="PASS" endtime="20140326 18:37:25.196" starttime="20140326 18:37:25.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline-file}</arg>
<arg>${test-dir}/${name}.baseline.json</arg>
</arguments>
<msg timestamp="20140326 18:37:25.197" level="INFO">${baseline-file} = test/LeabraStdEmbedded.baseline.json</msg>
<status status="PASS" endtime="20140326 18:37:25.197" starttime="20140326 18:37:25.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${test-dir}/${name}.record.json</arg>
</arguments>
<msg timestamp="20140326 18:37:25.198" level="INFO">${record-file} = test/LeabraStdEmbedded.record.json</msg>
<status status="PASS" endtime="20140326 18:37:25.198" starttime="20140326 18:37:25.197"></status>
</kw>
<kw type="kw" name="@{metric-list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
</arguments>
<msg timestamp="20140326 18:37:25.199" level="INFO">@{metric-list} = [ ]</msg>
<status status="PASS" endtime="20140326 18:37:25.199" starttime="20140326 18:37:25.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${metric-list}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.199" level="INFO">${metric-list} = []</msg>
<status status="PASS" endtime="20140326 18:37:25.199" starttime="20140326 18:37:25.199"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.199" starttime="20140326 18:37:25.192"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.200" starttime="20140326 18:37:25.191"></status>
</kw>
<kw type="kw" name="emergent.Set Timeout">
<doc></doc>
<arguments>
<arg>60 secs</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${time}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.201" level="INFO">${timeout} = 60 secs</msg>
<status status="PASS" endtime="20140326 18:37:25.201" starttime="20140326 18:37:25.200"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.201" starttime="20140326 18:37:25.200"></status>
</kw>
<kw type="kw" name="emergent.Add Metric">
<doc></doc>
<arguments>
<arg>avg</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="Collections.Append To List">
<doc>Adds `values` to the end of `list`.</doc>
<arguments>
<arg>${metric-list}</arg>
<arg>@{metric}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.203" starttime="20140326 18:37:25.202"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.203" starttime="20140326 18:37:25.201"></status>
</kw>
<kw type="kw" name="emergent.Add Metric">
<doc></doc>
<arguments>
<arg>max</arg>
<arg>0.25</arg>
<arg>0.30</arg>
</arguments>
<kw type="kw" name="Collections.Append To List">
<doc>Adds `values` to the end of `list`.</doc>
<arguments>
<arg>${metric-list}</arg>
<arg>@{metric}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.204" starttime="20140326 18:37:25.204"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.204" starttime="20140326 18:37:25.203"></status>
</kw>
<kw type="kw" name="emergent.Add Metric">
<doc></doc>
<arguments>
<arg>min</arg>
<arg>0.15</arg>
<arg>0.25</arg>
</arguments>
<kw type="kw" name="Collections.Append To List">
<doc>Adds `values` to the end of `list`.</doc>
<arguments>
<arg>${metric-list}</arg>
<arg>@{metric}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:25.205" starttime="20140326 18:37:25.205"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:25.206" starttime="20140326 18:37:25.204"></status>
</kw>
<kw type="kw" name="emergent.Run Standard Test">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="emergent.Run Model">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${output} = emergent.Run Emergent">
<doc></doc>
<arguments>
<arg>${project-file}</arg>
<arg>${script-file}</arg>
<arg>${timeout}</arg>
</arguments>
<kw type="kw" name="Process.Start Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>emergent -nogui -ni -p ${project} -s ${script}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20140326 18:37:25.208" level="INFO">Starting process:
emergent -nogui -ni -p LeabraStdEmbedded.proj -s test/LeabraStdEmbedded.css.txt</msg>
<status status="PASS" endtime="20140326 18:37:25.211" starttime="20140326 18:37:25.208"></status>
</kw>
<kw type="kw" name="${result} = Process.Wait For Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
</arguments>
<msg timestamp="20140326 18:37:25.213" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20140326 18:37:38.536" level="INFO">Process completed.</msg>
<msg timestamp="20140326 18:37:38.537" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20140326 18:37:38.537" starttime="20140326 18:37:25.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20140326 18:37:38.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20140326 18:37:38.539" starttime="20140326 18:37:38.538"></status>
</kw>
<msg timestamp="20140326 18:37:38.540" level="INFO">${output} = Network: Network_0 auto building
A Program is already running -- cannot run until it is done
A Program is already running -- cannot run until it is done
A Program is already running -- cannot run unti...</msg>
<status status="PASS" endtime="20140326 18:37:38.539" starttime="20140326 18:37:25.207"></status>
</kw>
<kw type="kw" name="${actuals} = emergent.Get Results">
<doc></doc>
<arguments>
<arg>${output}</arg>
</arguments>
<kw type="kw" name="${result} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${output}</arg>
<arg>{.*}</arg>
<arg>msg=No results found in output for ${name}: ${output}</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20140326 18:37:38.542" level="INFO">${result} = { "name": "LeabraStdEmbedded", "min": 9, "max": 23, "avg": 12.1 }</msg>
<status status="PASS" endtime="20140326 18:37:38.542" starttime="20140326 18:37:38.541"></status>
</kw>
<msg timestamp="20140326 18:37:38.542" level="INFO">${actuals} = { "name": "LeabraStdEmbedded", "min": 9, "max": 23, "avg": 12.1 }</msg>
<status status="PASS" endtime="20140326 18:37:38.542" starttime="20140326 18:37:38.540"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${record-file}</arg>
<arg>${actuals}\n</arg>
</arguments>
<msg timestamp="20140326 18:37:38.544" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStdEmbedded.record.json"&gt;/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStdEmbedded.record.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140326 18:37:38.544" starttime="20140326 18:37:38.543"></status>
</kw>
<kw type="kw" name="${baseline} = emergent.Get Baseline">
<doc></doc>
<arguments>
<arg>${baseline-file}</arg>
</arguments>
<kw type="kw" name="${status}, ${content} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Get File</arg>
<arg>${file}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${file}</arg>
</arguments>
<msg timestamp="20140326 18:37:38.547" html="yes" level="INFO">Getting file '&lt;a href="file:///home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStdEmbedded.baseline.json"&gt;/home/djilk/emergent/test_auto/EmergentTestFramework/test-projects/test/LeabraStdEmbedded.baseline.json&lt;/a&gt;'</msg>
<status status="PASS" endtime="20140326 18:37:38.548" starttime="20140326 18:37:38.547"></status>
</kw>
<msg timestamp="20140326 18:37:38.548" level="INFO">${status} = PASS</msg>
<msg timestamp="20140326 18:37:38.548" level="INFO">${content} = { "name": "LeabraStdEmbedded", "min": 7, "max": 16, "avg": 11.9 }</msg>
<status status="PASS" endtime="20140326 18:37:38.548" starttime="20140326 18:37:38.546"></status>
</kw>
<kw type="kw" name="${content} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${EMPTY}</arg>
<arg>${content}</arg>
</arguments>
<msg timestamp="20140326 18:37:38.549" level="INFO">${content} = { "name": "LeabraStdEmbedded", "min": 7, "max": 16, "avg": 11.9 }</msg>
<status status="PASS" endtime="20140326 18:37:38.549" starttime="20140326 18:37:38.548"></status>
</kw>
<kw type="kw" name="${status}, ${baseline} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${content}</arg>
<arg>{[^\"]*\"name\"[^:]*:[^\"]*\"${name}\"[^}]*}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.551" starttime="20140326 18:37:38.550"></status>
</kw>
<msg timestamp="20140326 18:37:38.552" level="INFO">${status} = PASS</msg>
<msg timestamp="20140326 18:37:38.552" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 7, "max": 16, "avg": 11.9 }</msg>
<status status="PASS" endtime="20140326 18:37:38.552" starttime="20140326 18:37:38.550"></status>
</kw>
<kw type="kw" name="${baseline} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>${status}</arg>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140326 18:37:38.553" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 7, "max": 16, "avg": 11.9 }</msg>
<status status="PASS" endtime="20140326 18:37:38.553" starttime="20140326 18:37:38.552"></status>
</kw>
<msg timestamp="20140326 18:37:38.553" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 7, "max": 16, "avg": 11.9 }</msg>
<status status="PASS" endtime="20140326 18:37:38.553" starttime="20140326 18:37:38.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Add To Baseline</arg>
<arg>${baseline-file}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.554" starttime="20140326 18:37:38.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${baseline}' == 'FAIL'</arg>
<arg>Set Variable</arg>
<arg>${baseline}</arg>
<arg>${actuals}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.555" starttime="20140326 18:37:38.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${baseline}</arg>
</arguments>
<msg timestamp="20140326 18:37:38.556" level="INFO">${baseline} = { "name": "LeabraStdEmbedded", "min": 7, "max": 16, "avg": 11.9 }</msg>
<status status="PASS" endtime="20140326 18:37:38.556" starttime="20140326 18:37:38.555"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${actuals}</arg>
</arguments>
<msg timestamp="20140326 18:37:38.556" level="INFO">${actuals} = { "name": "LeabraStdEmbedded", "min": 9, "max": 23, "avg": 12.1 }</msg>
<status status="PASS" endtime="20140326 18:37:38.556" starttime="20140326 18:37:38.556"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.557" starttime="20140326 18:37:25.206"></status>
</kw>
<kw type="kw" name="emergent.Check Preferred">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${fail-if-outside} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${False}</arg>
</arguments>
<msg timestamp="20140326 18:37:38.558" level="INFO">${fail-if-outside} = False</msg>
<status status="PASS" endtime="20140326 18:37:38.558" starttime="20140326 18:37:38.558"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
</arguments>
<msg timestamp="20140326 18:37:38.559" level="INFO">${fail-if-outside} = False</msg>
<status status="PASS" endtime="20140326 18:37:38.559" starttime="20140326 18:37:38.559"></status>
</kw>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:38.564" level="INFO">${match} = "avg": 12.1</msg>
<msg timestamp="20140326 18:37:38.564" level="INFO">${value} = 12.1</msg>
<status status="PASS" endtime="20140326 18:37:38.563" starttime="20140326 18:37:38.563"></status>
</kw>
<msg timestamp="20140326 18:37:38.564" level="INFO">${value} = 12.1</msg>
<status status="PASS" endtime="20140326 18:37:38.564" starttime="20140326 18:37:38.562"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:38.566" level="INFO">${match} = "avg": 11.9</msg>
<msg timestamp="20140326 18:37:38.566" level="INFO">${value} = 11.9</msg>
<status status="PASS" endtime="20140326 18:37:38.566" starttime="20140326 18:37:38.566"></status>
</kw>
<msg timestamp="20140326 18:37:38.567" level="INFO">${target} = 11.9</msg>
<status status="PASS" endtime="20140326 18:37:38.567" starttime="20140326 18:37:38.565"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.569" level="INFO">${low} = 10.115</msg>
<status status="PASS" endtime="20140326 18:37:38.569" starttime="20140326 18:37:38.568"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.570" level="INFO">${high} = 13.685</msg>
<status status="PASS" endtime="20140326 18:37:38.570" starttime="20140326 18:37:38.569"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.574" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:38.574" starttime="20140326 18:37:38.573"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.576" starttime="20140326 18:37:38.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.577" starttime="20140326 18:37:38.577"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.577" starttime="20140326 18:37:38.576"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.578" starttime="20140326 18:37:38.574"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.578" starttime="20140326 18:37:38.572"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.580" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:38.580" starttime="20140326 18:37:38.579"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.582" starttime="20140326 18:37:38.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.584" starttime="20140326 18:37:38.583"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.584" starttime="20140326 18:37:38.583"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.584" starttime="20140326 18:37:38.580"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.584" starttime="20140326 18:37:38.578"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.584" starttime="20140326 18:37:38.570"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.584" starttime="20140326 18:37:38.567"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.585" starttime="20140326 18:37:38.560"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.585" starttime="20140326 18:37:38.560"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.585" starttime="20140326 18:37:38.560"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.25, ${required} = 0.30">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:38.590" level="INFO">${match} = "max": 23</msg>
<msg timestamp="20140326 18:37:38.590" level="INFO">${value} = 23</msg>
<status status="PASS" endtime="20140326 18:37:38.589" starttime="20140326 18:37:38.589"></status>
</kw>
<msg timestamp="20140326 18:37:38.590" level="INFO">${value} = 23</msg>
<status status="PASS" endtime="20140326 18:37:38.590" starttime="20140326 18:37:38.588"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:38.592" level="INFO">${match} = "max": 16</msg>
<msg timestamp="20140326 18:37:38.592" level="INFO">${value} = 16</msg>
<status status="PASS" endtime="20140326 18:37:38.592" starttime="20140326 18:37:38.591"></status>
</kw>
<msg timestamp="20140326 18:37:38.592" level="INFO">${target} = 16</msg>
<status status="PASS" endtime="20140326 18:37:38.592" starttime="20140326 18:37:38.590"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.595" level="INFO">${low} = 12.0</msg>
<status status="PASS" endtime="20140326 18:37:38.594" starttime="20140326 18:37:38.594"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.595" level="INFO">${high} = 20.0</msg>
<status status="PASS" endtime="20140326 18:37:38.595" starttime="20140326 18:37:38.595"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.599" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:38.599" starttime="20140326 18:37:38.598"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.601" starttime="20140326 18:37:38.600"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.602" starttime="20140326 18:37:38.601"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.602" starttime="20140326 18:37:38.601"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.602" starttime="20140326 18:37:38.599"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.602" starttime="20140326 18:37:38.597"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.604" level="INFO">${isLess} = False</msg>
<status status="PASS" endtime="20140326 18:37:38.604" starttime="20140326 18:37:38.604"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.606" starttime="20140326 18:37:38.606"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140326 18:37:38.608" level="WARN">max = 23 is HIGH (20.0)</msg>
<status status="PASS" endtime="20140326 18:37:38.609" starttime="20140326 18:37:38.608"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.609" starttime="20140326 18:37:38.607"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.609" starttime="20140326 18:37:38.607"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.609" starttime="20140326 18:37:38.605"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.609" starttime="20140326 18:37:38.603"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.610" starttime="20140326 18:37:38.596"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.610" starttime="20140326 18:37:38.593"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.610" starttime="20140326 18:37:38.586"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.610" starttime="20140326 18:37:38.585"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.610" starttime="20140326 18:37:38.585"></status>
</kw>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${preferred}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:38.614" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140326 18:37:38.614" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140326 18:37:38.614" starttime="20140326 18:37:38.613"></status>
</kw>
<msg timestamp="20140326 18:37:38.615" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140326 18:37:38.615" starttime="20140326 18:37:38.612"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:38.617" level="INFO">${match} = "min": 7</msg>
<msg timestamp="20140326 18:37:38.617" level="INFO">${value} = 7</msg>
<status status="PASS" endtime="20140326 18:37:38.617" starttime="20140326 18:37:38.616"></status>
</kw>
<msg timestamp="20140326 18:37:38.618" level="INFO">${target} = 7</msg>
<status status="PASS" endtime="20140326 18:37:38.617" starttime="20140326 18:37:38.615"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.621" level="INFO">${low} = 5.95</msg>
<status status="PASS" endtime="20140326 18:37:38.621" starttime="20140326 18:37:38.620"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.622" level="INFO">${high} = 8.05</msg>
<status status="PASS" endtime="20140326 18:37:38.622" starttime="20140326 18:37:38.621"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.625" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:38.625" starttime="20140326 18:37:38.624"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.628" starttime="20140326 18:37:38.628"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.630" starttime="20140326 18:37:38.629"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.630" starttime="20140326 18:37:38.629"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.630" starttime="20140326 18:37:38.625"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.630" starttime="20140326 18:37:38.623"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.632" level="INFO">${isLess} = False</msg>
<status status="PASS" endtime="20140326 18:37:38.632" starttime="20140326 18:37:38.631"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.634" starttime="20140326 18:37:38.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<msg timestamp="20140326 18:37:38.636" level="WARN">min = 9 is HIGH (8.05)</msg>
<status status="PASS" endtime="20140326 18:37:38.636" starttime="20140326 18:37:38.635"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.637" starttime="20140326 18:37:38.635"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.637" starttime="20140326 18:37:38.634"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.637" starttime="20140326 18:37:38.632"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.637" starttime="20140326 18:37:38.630"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.638" starttime="20140326 18:37:38.622"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.638" starttime="20140326 18:37:38.618"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.638" starttime="20140326 18:37:38.611"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.638" starttime="20140326 18:37:38.611"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.639" starttime="20140326 18:37:38.610"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.639" starttime="20140326 18:37:38.559"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.639" starttime="20140326 18:37:38.557"></status>
</kw>
<kw type="kw" name="emergent.Check Required">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${fail-if-outside} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${True}</arg>
</arguments>
<msg timestamp="20140326 18:37:38.641" level="INFO">${fail-if-outside} = True</msg>
<status status="PASS" endtime="20140326 18:37:38.641" starttime="20140326 18:37:38.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Test Variable">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
</arguments>
<msg timestamp="20140326 18:37:38.642" level="INFO">${fail-if-outside} = True</msg>
<status status="PASS" endtime="20140326 18:37:38.642" starttime="20140326 18:37:38.642"></status>
</kw>
<kw type="for" name="${metric} | ${preferred} | ${required} IN [ @{metric-list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${metric} = avg, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:38.648" level="INFO">${match} = "avg": 12.1</msg>
<msg timestamp="20140326 18:37:38.648" level="INFO">${value} = 12.1</msg>
<status status="PASS" endtime="20140326 18:37:38.647" starttime="20140326 18:37:38.647"></status>
</kw>
<msg timestamp="20140326 18:37:38.648" level="INFO">${value} = 12.1</msg>
<status status="PASS" endtime="20140326 18:37:38.648" starttime="20140326 18:37:38.646"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:38.651" level="INFO">${match} = "avg": 11.9</msg>
<msg timestamp="20140326 18:37:38.651" level="INFO">${value} = 11.9</msg>
<status status="PASS" endtime="20140326 18:37:38.650" starttime="20140326 18:37:38.649"></status>
</kw>
<msg timestamp="20140326 18:37:38.651" level="INFO">${target} = 11.9</msg>
<status status="PASS" endtime="20140326 18:37:38.651" starttime="20140326 18:37:38.648"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.653" level="INFO">${low} = 8.925</msg>
<status status="PASS" endtime="20140326 18:37:38.653" starttime="20140326 18:37:38.653"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.654" level="INFO">${high} = 14.875</msg>
<status status="PASS" endtime="20140326 18:37:38.654" starttime="20140326 18:37:38.654"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.658" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:38.657" starttime="20140326 18:37:38.657"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.661" starttime="20140326 18:37:38.660"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.661" starttime="20140326 18:37:38.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.662" starttime="20140326 18:37:38.662"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.662" starttime="20140326 18:37:38.658"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.662" starttime="20140326 18:37:38.656"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.667" level="INFO">${isLess} = True</msg>
<status status="PASS" endtime="20140326 18:37:38.665" starttime="20140326 18:37:38.664"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.671" starttime="20140326 18:37:38.670"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.671" starttime="20140326 18:37:38.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.672" starttime="20140326 18:37:38.672"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.673" starttime="20140326 18:37:38.668"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.673" starttime="20140326 18:37:38.663"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.673" starttime="20140326 18:37:38.654"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.673" starttime="20140326 18:37:38.651"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.674" starttime="20140326 18:37:38.644"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.674" starttime="20140326 18:37:38.643"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.674" starttime="20140326 18:37:38.643"></status>
</kw>
<kw type="foritem" name="${metric} = max, ${preferred} = 0.25, ${required} = 0.30">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:38.677" level="INFO">${match} = "max": 23</msg>
<msg timestamp="20140326 18:37:38.677" level="INFO">${value} = 23</msg>
<status status="PASS" endtime="20140326 18:37:38.677" starttime="20140326 18:37:38.676"></status>
</kw>
<msg timestamp="20140326 18:37:38.678" level="INFO">${value} = 23</msg>
<status status="PASS" endtime="20140326 18:37:38.678" starttime="20140326 18:37:38.676"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:38.680" level="INFO">${match} = "max": 16</msg>
<msg timestamp="20140326 18:37:38.680" level="INFO">${value} = 16</msg>
<status status="PASS" endtime="20140326 18:37:38.679" starttime="20140326 18:37:38.679"></status>
</kw>
<msg timestamp="20140326 18:37:38.680" level="INFO">${target} = 16</msg>
<status status="PASS" endtime="20140326 18:37:38.680" starttime="20140326 18:37:38.678"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.682" level="INFO">${low} = 11.2</msg>
<status status="PASS" endtime="20140326 18:37:38.682" starttime="20140326 18:37:38.682"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.683" level="INFO">${high} = 20.8</msg>
<status status="PASS" endtime="20140326 18:37:38.683" starttime="20140326 18:37:38.682"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.686" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:38.686" starttime="20140326 18:37:38.686"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.688" starttime="20140326 18:37:38.688"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.689" starttime="20140326 18:37:38.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.689" starttime="20140326 18:37:38.689"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.690" starttime="20140326 18:37:38.686"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.690" starttime="20140326 18:37:38.684"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.692" level="INFO">${isLess} = False</msg>
<status status="PASS" endtime="20140326 18:37:38.692" starttime="20140326 18:37:38.691"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<msg timestamp="20140326 18:37:38.697" level="FAIL">max = 23 is HIGH (20.8)</msg>
<status status="FAIL" endtime="20140326 18:37:38.697" starttime="20140326 18:37:38.694"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.697" starttime="20140326 18:37:38.693"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.698" starttime="20140326 18:37:38.692"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.698" starttime="20140326 18:37:38.690"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.698" starttime="20140326 18:37:38.683"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.698" starttime="20140326 18:37:38.680"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.699" starttime="20140326 18:37:38.674"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.699" starttime="20140326 18:37:38.674"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.699" starttime="20140326 18:37:38.674"></status>
</kw>
<kw type="foritem" name="${metric} = min, ${preferred} = 0.15, ${required} = 0.25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Check Metric</arg>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="emergent.Check Metric">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${required}</arg>
<arg>${actuals}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${value} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${actuals}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:38.703" level="INFO">${match} = "min": 9</msg>
<msg timestamp="20140326 18:37:38.703" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140326 18:37:38.703" starttime="20140326 18:37:38.703"></status>
</kw>
<msg timestamp="20140326 18:37:38.704" level="INFO">${value} = 9</msg>
<status status="PASS" endtime="20140326 18:37:38.704" starttime="20140326 18:37:38.702"></status>
</kw>
<kw type="kw" name="${target} = emergent.Get Value From JSON">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${baseline}</arg>
</arguments>
<kw type="kw" name="${match}, ${value} = BuiltIn.Should Match Regexp">
<doc>Fails if `string` does not match `pattern` as a regular expression.</doc>
<arguments>
<arg>${json}</arg>
<arg>(?i)\"${field}\"[^:]*:\\s*(\\d+\\.?\\d*)</arg>
</arguments>
<msg timestamp="20140326 18:37:38.706" level="INFO">${match} = "min": 7</msg>
<msg timestamp="20140326 18:37:38.706" level="INFO">${value} = 7</msg>
<status status="PASS" endtime="20140326 18:37:38.706" starttime="20140326 18:37:38.705"></status>
</kw>
<msg timestamp="20140326 18:37:38.707" level="INFO">${target} = 7</msg>
<status status="PASS" endtime="20140326 18:37:38.707" starttime="20140326 18:37:38.704"></status>
</kw>
<kw type="kw" name="emergent.In Range Fraction">
<doc></doc>
<arguments>
<arg>${metric}</arg>
<arg>${value}</arg>
<arg>${target}</arg>
<arg>${fraction}</arg>
</arguments>
<kw type="kw" name="${low} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1-${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.709" level="INFO">${low} = 5.25</msg>
<status status="PASS" endtime="20140326 18:37:38.709" starttime="20140326 18:37:38.708"></status>
</kw>
<kw type="kw" name="${high} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>((1+${fraction})*${target})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.710" level="INFO">${high} = 8.75</msg>
<status status="PASS" endtime="20140326 18:37:38.710" starttime="20140326 18:37:38.709"></status>
</kw>
<kw type="kw" name="emergent.In Range">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="emergent.Greater Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${low}</arg>
</arguments>
<kw type="kw" name="${isGreater} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &gt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.714" level="INFO">${isGreater} = True</msg>
<status status="PASS" endtime="20140326 18:37:38.714" starttime="20140326 18:37:38.712"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isGreater}</arg>
<arg>${name} = ${left} is LOW (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.716" starttime="20140326 18:37:38.716"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.716" starttime="20140326 18:37:38.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Run Keyword Unless</arg>
<arg>${condition}</arg>
<arg>Log</arg>
<arg>${message}</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.717" starttime="20140326 18:37:38.716"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.717" starttime="20140326 18:37:38.714"></status>
</kw>
<status status="PASS" endtime="20140326 18:37:38.717" starttime="20140326 18:37:38.711"></status>
</kw>
<kw type="kw" name="emergent.Less Or Equal">
<doc></doc>
<arguments>
<arg>${name}</arg>
<arg>${value}</arg>
<arg>${high}</arg>
</arguments>
<kw type="kw" name="${isLess} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${left} &lt;= ${right})</arg>
</arguments>
<msg timestamp="20140326 18:37:38.719" level="INFO">${isLess} = False</msg>
<status status="PASS" endtime="20140326 18:37:38.719" starttime="20140326 18:37:38.718"></status>
</kw>
<kw type="kw" name="emergent.Range Message">
<doc></doc>
<arguments>
<arg>${isLess}</arg>
<arg>${name} = ${left} is HIGH (${right})</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${fail-if-outside}</arg>
<arg>Should Be True</arg>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be True">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${condition}</arg>
<arg>${message}</arg>
</arguments>
<msg timestamp="20140326 18:37:38.722" level="FAIL">min = 9 is HIGH (8.75)</msg>
<status status="FAIL" endtime="20140326 18:37:38.722" starttime="20140326 18:37:38.721"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.722" starttime="20140326 18:37:38.720"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.722" starttime="20140326 18:37:38.719"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.722" starttime="20140326 18:37:38.717"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.723" starttime="20140326 18:37:38.710"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.723" starttime="20140326 18:37:38.707"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.723" starttime="20140326 18:37:38.700"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.723" starttime="20140326 18:37:38.700"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.723" starttime="20140326 18:37:38.699"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.723" starttime="20140326 18:37:38.643"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.724" starttime="20140326 18:37:38.639"></status>
</kw>
<status status="FAIL" endtime="20140326 18:37:38.724" starttime="20140326 18:37:25.206"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="FAIL" endtime="20140326 18:37:38.725" critical="yes" starttime="20140326 18:37:25.190">Several failures occurred:

1) max = 23 is HIGH (20.8)

2) min = 9 is HIGH (8.75)</status>
</test>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20140326 18:37:38.726" starttime="20140326 18:37:25.181"></status>
</suite>
<kw type="teardown" name="Process.Terminate All Processes">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" endtime="20140326 18:37:38.730" starttime="20140326 18:37:38.729"></status>
</kw>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20140326 18:37:38.730" starttime="20140326 18:36:58.106"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="3">Critical Tests</stat>
<stat fail="1" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" pass="3" id="s1" name="Test">Test</stat>
<stat fail="0" pass="1" id="s1-s1" name="A Not B.Css">Test.A Not B.Css</stat>
<stat fail="0" pass="1" id="s1-s2" name="LeabraStd.css">Test.LeabraStd.css</stat>
<stat fail="0" pass="1" id="s1-s3" name="LeabraStdCopy.css">Test.LeabraStdCopy.css</stat>
<stat fail="1" pass="0" id="s1-s4" name="LeabraStdEmbedded.css">Test.LeabraStdEmbedded.css</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20140326 18:37:25.108" level="WARN">min = 7 is LOW (7.65)</msg>
<msg timestamp="20140326 18:37:38.608" level="WARN">max = 23 is HIGH (20.0)</msg>
<msg timestamp="20140326 18:37:38.636" level="WARN">min = 9 is HIGH (8.05)</msg>
</errors>
</robot>

// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
LeabraProject .projects[0] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [0] {
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
  ClusterRun @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [0] {
   };

   ControlPanelMethod_Group @.mths = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.active_params = [0] {
 };

 ArchivedParams_Group @.archived_params = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp[0] = [1] { 
   DataTable @[0] { 
    DataTableCols @.data = [1] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[1] { 
  };
  DataTable_Group @.gp[2] { 
  };
 };

 Program_TopGroup @.programs = [2] {
  Program @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [1] {
    DataTable @[0] { 
     DataTableCols @.data = [1] {
      int_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [1] {
    ProgVar @[0] { };
   };

   Function_List @.functions = [4] {
    Function @[0] { 
     ProgVar_List @.args = [1] {
      ProgVar @[0] { };
     };

     ProgEl_List @.fun_code = [4] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [0] {
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    Function @[1] { 
     ProgVar_List @.args = [2] {
      ProgVar @[0] { };
      ProgVar @[1] { };
     };

     ProgEl_List @.fun_code = [4] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
       };
      };
      ForLoop @[1] { 
       ProgEl_List @.loop_code = [1] {
	AssignExpr @[0] { };
       };
      };
      PrintVar @[2] { };
      PrintExpr @[3] { };
     };
    };
    Function @[2] { 
     ProgVar_List @.args = [3] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
     };

     ProgEl_List @.fun_code = [3] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [0] {
       };
      };
      PrintVar @[1] { };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
     };
    };
    Function @[3] { 
     ProgVar_List @.args = [3] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
     };

     ProgEl_List @.fun_code = [4] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [0] {
       };
      };
      FunctionCall @[1] { 
       ProgArg_List @.fun_args = [1] {
	ProgArg @[0] { };
       };
      };
      FunctionCall @[2] { 
       ProgArg_List @.fun_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      FunctionCall @[3] { 
       ProgArg_List @.fun_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
     };
    };
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [15] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    PrintExpr @[1] { };
    PrintExpr @[2] { };
    FunctionCall @[3] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[4] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[5] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[6] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[7] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintExpr @[8] { };
    FunctionCall @[9] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[10] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[11] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[12] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[13] { 
     ProgArg_List @.fun_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    BlankLineEl @[14] { };
   };
  };
  Program @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [1] {
    ProgVar @[0] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [4] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @[0] { };
    PanelViewer @[1] { };
    T3PanelViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };

     T3Panel_List @.panels = [1] {
      T3Panel @[0] { 
       T3DataView_List @.root_view.children = [0] {
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
      UserDataItem @[2] { };
      UserDataItem @[3] { };
      UserDataItem @[4] { };
      UserDataItem @[5] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [0] {
 };
};
LeabraProject .projects[0] {
 name="TestRemoveRows";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 author="rohrlich";
 email="john.rohrlich@colorado.edu";
 license {
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2017";
  custom=;
 };
 pub_cite=;
 wiki {wiki="": page_name="": };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_6";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="NO_CLIP": value=1: val_type_fixed=0: };
    UserDataItem @[1] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  master_and_clones=0;
  ControlPanel @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ControlPanel";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
  ClusterRun @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ClusterRun";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=1;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=1;
  };
 };
 active_params {
  name="active_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 archived_params {
  name="archived_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="SomeTable";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_91";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="one";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [10] 0;1;2;3;4;5;6;7;8;9;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [10] 0;1;2;3;4;5;6;7;8;9;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[0].doc$$: };
   };
   name="TestRemoveRows";
   short_nm="TsRmRw";
   tags=;
   desc=;
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="SomeTable";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_91";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="one";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
       ar {
	name="ar";
       [10] 0;1;2;3;4;5;6;7;8;9;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [10] 0;1;2;3;4;5;6;7;8;9;
     };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="some_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[0].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
    Function @[0] {
     name="ResetTable";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ResetTable(DataTable* our_table) returns: int";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="our_table";
       var_type=T_Object;
       object_type=DataTable;
       object_val=$.programs[0].objs[0]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars0vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (0 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
       };
      };
      MethodCall @[1] {
       name="MethodCall_ourtableRemoveAllRows";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="our_table->RemoveAllRows()";
       result_var=NULL;
       obj=.programs[0].functions[0].args[0]$$;
       method=DataTable::RemoveAllRows;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void RemoveAllRows()";
       meth_desc=" remove all of the rows of data, but keep the column structure";
      };
      MethodCall @[2] {
       name="MethodCall_ourtableAddRows10";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="our_table->AddRows(10)";
       result_var=NULL;
       obj=$.programs[0].functions[0].args[0]$;
       method=DataTable::AddRows;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="n";
	 required=0;
	 def_val="1";
	 prev_expr=;
	 expr {
	  expr="10";
	 };
	};
       };
       meth_sig="bool AddRows(int n = 1)";
       meth_desc=" add n rows, returns true if successfully added";
      };
      MethodCall @[3] {
       name="MethodCall_ourtableInitValsToRowNoone";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="our_table->InitValsToRowNo(\"one\")";
       result_var=NULL;
       obj=$.programs[0].functions[0].args[0]$;
       method=DataTable::InitValsToRowNo;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"one\"";
	 };
	};
       };
       meth_sig="bool InitValsToRowNo(Variant& col)";
       meth_desc=" initialize all values in given column to be equal to the row number -- only valid for scalar (not matrix) columns -- column can be specified as either integer index or a string that is then used to find the given column name";
      };
     };
    };
    Function @[1] {
     name="PrintColumn";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="PrintColumn(DataTable* our_table, String column) returns: int";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="our_table";
       var_type=T_Object;
       object_type=DataTable;
       object_val=$.programs[0].objs[0]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="column";
       var_type=T_String;
       string_val=;
       object_scope=NULL;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars2vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (2 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @[0] {
	 name="i";
	 var_type=T_Int;
	 int_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[1] {
	 name="values";
	 var_type=T_String;
	 string_val=;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      ForLoop @[1] {
       name="ForLoop_fori0iourtablerowsi";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="for (i=0; i<our_table.rows; i++)";
       loop_code {
	name="loop_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 name="AssignExpr_valuesvaluesourtablecolumni";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="values = values + our_table[column][i] + \", \"";
	 result_var=.programs[0].functions[1].fun_code[0].local_vars[1]$$;
	 expr {
	  expr="values + our_table[column][i] + \", \"";
	 };
	};
       };
       init {
	expr="i=0";
       };
       test {
	expr="i<our_table.rows";
       };
       iter {
	expr="i++";
       };
      };
      PrintVar @[2] {
       name="PrintVar_Printvalues";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print  values";
       message=;
       print_var=$.programs[0].functions[1].fun_code[0].local_vars[1]$;
       print_var2=NULL;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
       debug=0;
      };
      PrintExpr @[3] {
       name="PrintExpr_Print";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print \"\"";
       expr {
	expr="\"\"";
       };
       debug=0;
      };
     };
    };
    Function @[2] {
     name="RemoveRows";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RemoveRows(DataTable* our_table, int st_row, int n_rows) returns: int";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="our_table";
       var_type=T_Object;
       object_type=DataTable;
       object_val=NULL;
       object_scope=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="st_row";
       var_type=T_Int;
       int_val=0;
       object_scope=NULL;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="n_rows";
       var_type=T_Int;
       int_val=0;
       object_scope=NULL;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars0vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (0 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
       };
      };
      PrintVar @[1] {
       name="PrintVar_Printstrownrows";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print  st_row n_rows";
       message=;
       print_var=.programs[0].functions[2].args[1]$$;
       print_var2=.programs[0].functions[2].args[2]$$;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
       debug=0;
      };
      MethodCall @[2] {
       name="MethodCall_ourtableRemoveRowsstrownrows";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="our_table->RemoveRows(st_row, n_rows)";
       result_var=NULL;
       obj=.programs[0].functions[2].args[0]$$;
       method=DataTable::RemoveRows;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="st_row";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="n_rows";
	 required=0;
	 def_val="1";
	 prev_expr=;
	 expr {
	  expr="n_rows";
	 };
	};
       };
       meth_sig="bool RemoveRows(int st_row, int n_rows = 1)";
       meth_desc=" Remove n rows of data, starting at st_row. st_row = -1 means last row, and n_rows = -1 means remove from starting row to end, n_rows = -2 means remove upto and including the next to last row, etc.";
      };
     };
    };
    Function @[3] {
     name="RunTest";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RunTest(DataTable* our_table, int st_row, int n_rows) returns: int";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="our_table";
       var_type=T_Object;
       object_type=DataTable;
       object_val=NULL;
       object_scope=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="st_row";
       var_type=T_Int;
       int_val=0;
       object_scope=NULL;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="n_rows";
       var_type=T_Int;
       int_val=0;
       object_scope=NULL;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars0vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (0 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
       };
      };
      FunctionCall @[1] {
       name="FunctionCall_ResetTableourtable";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="ResetTable(our_table)";
       result_var=NULL;
       fun=.programs[0].functions[0]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="our_table";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="our_table";
	 };
	};
       };
      };
      FunctionCall @[2] {
       name="FunctionCall_RemoveRowsourtablestrownrows";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="RemoveRows(our_table, st_row, n_rows)";
       result_var=NULL;
       fun=.programs[0].functions[2]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="our_table";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="our_table";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="st_row";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="n_rows";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="n_rows";
	 };
	};
       };
      };
      FunctionCall @[3] {
       name="FunctionCall_PrintColumnourtableone";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="PrintColumn(our_table, \"one\")";
       result_var=NULL;
       fun=.programs[0].functions[1]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable;
	 type="DataTable*";
	 name="our_table";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="our_table";
	 };
	};
	ProgArg @[1] {
	 arg_type=taString;
	 type="String";
	 name="column";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"one\"";
	 };
	};
       };
      };
     };
    };
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars0vars";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    PrintExpr @[1] {
     name="PrintExpr_Printforeachtest_itdwithvalues09";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"for each test the table is initialized to 10 rows init'd with values 0 - 9\"";
     expr {
      expr="\"for each test the table is initialized to 10 rows init'd with values 0 - 9\"";
     };
     debug=0;
    };
    PrintExpr @[2] {
     name="PrintExpr_PrintTestsforinrangevalues";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Tests for in range values\"";
     expr {
      expr="\"Tests for in range values\"";
     };
     debug=0;
    };
    FunctionCall @[3] {
     name="FunctionCall_RunTestsometable52";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RunTest(some_table, 5, 2)";
     result_var=NULL;
     fun=.programs[0].functions[3]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="our_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="some_table";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="st_row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="5";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="2";
       };
      };
     };
    };
    FunctionCall @[4] {
     name="FunctionCall_RunTestsometable11";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RunTest(some_table, -1, 1)";
     result_var=NULL;
     fun=$.programs[0].functions[3]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="our_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="some_table";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="st_row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-1";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="1";
       };
      };
     };
    };
    FunctionCall @[5] {
     name="FunctionCall_RunTestsometable11";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RunTest(some_table, -1, -1)";
     result_var=NULL;
     fun=$.programs[0].functions[3]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="our_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="some_table";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="st_row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-1";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-1";
       };
      };
     };
    };
    FunctionCall @[6] {
     name="FunctionCall_RunTestsometable21";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RunTest(some_table, -2, 1)";
     result_var=NULL;
     fun=$.programs[0].functions[3]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="our_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="some_table";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="st_row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-2";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="1";
       };
      };
     };
    };
    FunctionCall @[7] {
     name="FunctionCall_RunTestsometable22";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RunTest(some_table, -2, -2)";
     result_var=NULL;
     fun=$.programs[0].functions[3]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="our_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="some_table";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="st_row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-2";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-2";
       };
      };
     };
    };
    PrintExpr @[8] {
     name="PrintExpr_PrintTestsforoutofrangevalues";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Tests for out of range values\"";
     expr {
      expr="\"Tests for out of range values\"";
     };
     debug=0;
    };
    FunctionCall @[9] {
     name="FunctionCall_RunTestsometable3100";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RunTest(some_table, 3, 100)";
     result_var=NULL;
     fun=$.programs[0].functions[3]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="our_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="some_table";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="st_row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="3";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="100";
       };
      };
     };
    };
    FunctionCall @[10] {
     name="FunctionCall_RunTestsometable250";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RunTest(some_table, -2, 50)";
     result_var=NULL;
     fun=$.programs[0].functions[3]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="our_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="some_table";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="st_row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-2";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="50";
       };
      };
     };
    };
    FunctionCall @[11] {
     name="FunctionCall_RunTestsometable253";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="RunTest(some_table, -25, 3)";
     result_var=NULL;
     fun=$.programs[0].functions[3]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="our_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="some_table";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="st_row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-25";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="3";
       };
      };
     };
    };
    FunctionCall @[12] {
     name="FunctionCall_RunTestsometable76";
     desc="end less than start";
     flags=CAN_REVERT_TO_CODE;
     code_string="RunTest(some_table, 7, -6)";
     result_var=NULL;
     fun=$.programs[0].functions[3]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="our_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="some_table";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="st_row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="7";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-6";
       };
      };
     };
    };
    FunctionCall @[13] {
     name="FunctionCall_RunTestsometable26";
     desc="end less than start";
     flags=CAN_REVERT_TO_CODE;
     code_string="RunTest(some_table, -2, -6)";
     result_var=NULL;
     fun=$.programs[0].functions[3]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable;
       type="DataTable*";
       name="our_table";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="some_table";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="st_row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-2";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-6";
       };
      };
     };
    };
    BlankLineEl @[14] {
     name="BlankLineEl_";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=" ";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
    html_text="<html>
<head></head>
<body>
<h2> Enter Title Here </h2>
</body>
</html>
";
   };
  };
  Program @[1] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_321";
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[1].doc$$: };
   };
   name="RestoreSomeTable";
   short_nm="RstSTb";
   tags=;
   desc=;
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="some_table";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[0][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars0vars";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     name="MethodCall_sometableRemoveAllRows";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="some_table->RemoveAllRows()";
     result_var=NULL;
     obj=.programs[1].vars[0]$$;
     method=DataTable::RemoveAllRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void RemoveAllRows()";
     meth_desc=" remove all of the rows of data, but keep the column structure";
    };
    MethodCall @[2] {
     name="MethodCall_sometableAddRows10";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="some_table->AddRows(10)";
     result_var=NULL;
     obj=$.programs[1].vars[0]$;
     method=DataTable::AddRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="n";
       required=0;
       def_val="1";
       prev_expr=;
       expr {
	expr="10";
       };
      };
     };
     meth_sig="bool AddRows(int n = 1)";
     meth_desc=" add n rows, returns true if successfully added";
    };
    MethodCall @[3] {
     name="MethodCall_sometableInitValsToRowNoone";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="some_table->InitValsToRowNo(\"one\")";
     result_var=NULL;
     obj=$.programs[1].vars[0]$;
     method=DataTable::InitValsToRowNo;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"one\"";
       };
      };
     };
     meth_sig="bool InitValsToRowNo(Variant& col)";
     meth_desc=" initialize all values in given column to be equal to the row number -- only valid for scalar (not matrix) columns -- column can be specified as either integer index or a string that is then used to find the given column name";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
    html_text="<html>
<head></head>
<body>
<h2> Enter Title Here </h2>
</body>
</html>
";
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_46";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
    UserDataItem @[1] {name="view_win_top": value=0.04502974: val_type_fixed=0: };
    UserDataItem @[2] {name="view_win_wd": value=1: val_type_fixed=0: };
    UserDataItem @[3] {name="view_win_ht": value=0.7994902: val_type_fixed=0: };
    UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
    UserDataItem @[5] {name="view_splitter_state": value=AAAA/wAAAAEAAAADAAABJAAAAbEAAAJqAQAAAAcBAAAAAQE=: val_type_fixed=0: };
   };
   name="Browser2";
   m_data=.$$;
   cur_font_size=13;
   visible=1;
   win_name=".projects[\"TestRemoveRows\"] - TestRemoveRows.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_47";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_visible": value=1: val_type_fixed=0: };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=13;
     visible=1;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @[0] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=13;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.$;
    };
    PanelViewer @[1] {
     name="Editor";
     m_data=NULL;
     cur_font_size=13;
     visible=1;
    };
    T3PanelViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_48";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_panel_selected": value=1: val_type_fixed=0: };
     };
     name="Visualizer";
     m_data=NULL;
     cur_font_size=13;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @[0] {
       name="Frame1";
       m_data=NULL;
       cur_font_size=13;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=13;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0: y=0: z=-0.4765596: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=3.52344;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_49";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
      UserDataItem @[1] {name="view_win_top": value=0.008496176: val_type_fixed=0: };
      UserDataItem @[2] {name="view_win_wd": value=0.04357067: val_type_fixed=0: };
      UserDataItem @[3] {name="view_win_ht": value=0.7357689: val_type_fixed=0: };
      UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
      UserDataItem @[5] {name="view_visible": value=1: val_type_fixed=0: };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=13;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 tree_state{ .;.docs;.wizards;.ctrl_panels;.active_params;.archived_params;.data;.data.gp[0];.data.gp[1];.data.gp[2];.programs;.networks; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
 };
};

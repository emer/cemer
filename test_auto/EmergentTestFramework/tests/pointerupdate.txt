** Settings ***

Library          Telnet
Library          HttpLibrary.HTTP
Library          Process
Library          OperatingSystem

Resource         Server_lib.txt

Suite Setup      Initialize Emergent    ./test-projects/TestPointerUpdates.proj
Suite Teardown   Shutdown Emergent

*** Variables ***

# use 'pybot -v debug:true server.txt' on the command line to
#      output the transmissions to/from Emergent using warnings
${debug} =       false

*** Test Cases ***

# Ideas on things to test
#  - SetDataTableCell and Matrix Cell

#
# Initialization and general tests
#

Initialize
    Set Suite Variable     ${verbose}       ${false}
    Set Suite Variable     ${project}       ./test-projects/TestPointerUpdates.proj
    Run Keyword If         '${debug}' == 'true'       Set Suite Variable   ${verbose}  ${true}

Connection
    Sleep                  1 sec
    ${output} =            Read
    Print                  ${output}
    Should Contain         ${output}    Emergent Server v8.

# TODO: Start another process and check for the "Too many connections already" error.

#
# ParserTest
#

General RunState
    ${output} =                Run Command Wait      {"command": "GetRunState"}
    Status OK Match Result     ${output}             4


MoveProgramGroupUpOneLevel
    Set Suite Variable     ${program_test}       "TestGroup"
    Ensure Emergent Free
    Run Emergent Program       move_programgroup_up_one_level
    Run Emergent Program       ProgramInSubgroup
    Prog Group Should Match    1                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"]
        

CopyProgram
    Set Suite Variable     ${program_test}       "TestGroup"
    Ensure Emergent Free
    Prog Group Should Match    1                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"]
    Prog Group Should Match    2                     NONE  
    
    Run Emergent Program	copy_callee_caller

    Prog Group Should Match    2                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_two\\"]
    Prog Group Should Match    1                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"] 

MoveProgram
    Set Suite Variable     ${program_test}       "TestGroup"
    Restart Emergent
    Ensure Emergent Free

    Prog Group Should Match    2                     NONE
    Prog Group Should Match    1                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"] 

    Run Emergent Program       move_callee_caller

    Prog Group Should Match    1                     NONE
    Prog Group Should Match    2                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_two\\"] 

CopyDataTable
    Set Suite Variable   ${program_test}         "TestDataTableValue"
    Restart Emergent
    Ensure Emergent Free

    DataTable Value Should Match        1       cat
    DataTable Value Should Match        2       -1

    Run Emergent Program   copy_hasdatatable
    
    DataTable Value Should Match        1       cat
    DataTable Value Should Match        2       cat

    ${output} =                Run Command Wait      {"command": "SetVar", "program": "edit_datatable", "var_name": "which_group", "var_value": 2}
    Status OK                  ${output}    

    ${output} =                Run Command Wait      {"command": "SetVar", "program": "edit_datatable", "var_name": "SetValue", "var_value": "dog"}
    Status OK                  ${output}    
    
    Run Emergent Program	edit_datatable

    DataTable Value Should Match        1       cat
    DataTable Value Should Match        2       dog

    ${output} =                Run Command Wait      {"command": "SetVar", "program": "edit_datatable", "var_name": "which_group", "var_value": 1}
    Status OK                  ${output}    

    ${output} =                Run Command Wait      {"command": "SetVar", "program": "edit_datatable", "var_name": "SetValue", "var_value": "lion"}
    Status OK                  ${output}    
    
    Run Emergent Program	edit_datatable
    
    DataTable Value Should Match        1       lion
    DataTable Value Should Match        2       dog

MoveDataTable
    Set Suite Variable   ${program_test}         "TestDataTableValue"
    Restart Emergent
    Ensure Emergent Free

    DataTable Value Should Match        1       cat
    DataTable Value Should Match        2       -1

    Run Emergent Program   move_hasdatatable

    DataTable Value Should Match        1       -1
    DataTable Value Should Match        2       cat

    ${output} =                Run Command Wait      {"command": "SetVar", "program": "edit_datatable", "var_name": "which_group", "var_value": 2}
    Status OK                  ${output}    

    ${output} =                Run Command Wait      {"command": "SetVar", "program": "edit_datatable", "var_name": "SetValue", "var_value": "dog"}
    Status OK                  ${output}    
    
    Run Emergent Program	edit_datatable

    DataTable Value Should Match        2       dog    

CopyProgramGlobalTable
    Set Suite Variable   ${program_test}         "TestDataTableValue"
    Restart Emergent
    Ensure Emergent Free
    Set Emergent Var	RefsGlobalTable		set_value	"cat"
    Run Emergent Program	.projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"][\\"RefsGlobalTable\\"]
    DataTable Cell Value Should Match    .projects[\\"TestPointerUpdates\\"].data.gp[\\"InputData\\"][\\"data_group_DataTable\\"]	0	col_one		cat
    Run Emergent Program   copy_refsglobaltable
    Set Emergent Var	.projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"][\\"RefsGlobalTable\\"]		set_value	"mouse"
    Run Emergent Program	.projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"][\\"RefsGlobalTable\\"]
    DataTable Cell Value Should Match    .projects[\\"TestPointerUpdates\\"].data.gp[\\"InputData\\"][\\"data_group_DataTable\\"]	0	col_one		mouse    
    Set Emergent Var	.projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_two\\"][\\"RefsGlobalTable\\"]		set_value	"bird"
    Run Emergent Program	.projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_two\\"][\\"RefsGlobalTable\\"]
    DataTable Cell Value Should Match    .projects[\\"TestPointerUpdates\\"].data.gp[\\"InputData\\"][\\"data_group_DataTable\\"]	0	col_one		bird

MoveProgramGlobalTable
    Set Suite Variable   ${program_test}         "TestDataTableValue"
    #Restart Emergent
    Ensure Emergent Free
    Set Emergent Var	RefsGlobalTable		set_value	"cat"
    Run Emergent Program	.projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"][\\"RefsGlobalTable\\"]
    DataTable Cell Value Should Match    .projects[\\"TestPointerUpdates\\"].data.gp[\\"InputData\\"][\\"data_group_DataTable\\"]	0	col_one		cat
    Run Emergent Program   move_refsglobaltable
    Set Emergent Var	.projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_two\\"][\\"RefsGlobalTable\\"]		set_value	"mouse"
    Run Emergent Program	.projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_two\\"][\\"RefsGlobalTable\\"]
    DataTable Cell Value Should Match    .projects[\\"TestPointerUpdates\\"].data.gp[\\"InputData\\"][\\"data_group_DataTable\\"]	0	col_one		mouse    


CopyFunctionCodeIntoLoop
    Set Suite Variable   ${program_test}         "LoopCodeFunction"
    Ensure Emergent Free

    Run Emergent Program	LoopCodeFunction

    Prog Var Should Equal      j            1

    Run Emergent Program       copy_function_code_into_loop

    Run Emergent Program       LoopCodeFunction
    
    Prog Var Should Equal      j            3

CopyFunctionCodeOutOfLoop
    Set Suite Variable   ${program_test}         "LoopCodeFunction"
    Ensure Emergent Free

    Run Emergent Program	LoopCodeFunction

    Prog Var Should Equal      j            3

    Run Emergent Program       copy_function_code_out_of_loop

    Run Emergent Program       LoopCodeFunction

    Prog Var Should Equal      j            4

CopyProgramCodeIntoLoop
    Set Suite Variable   ${program_test}         "LoopCodeProgram"
    Ensure Emergent Free

    Run Emergent Program	LoopCodeProgram

    Run Emergent Program       copy_program_code_into_loop

    Run Emergent Program       LoopCodeProgram
    
CopyProgramCodeOutOfLoop
    Set Suite Variable   ${program_test}         "LoopCodeProgram"
    Ensure Emergent Free

    Run Emergent Program       LoopCodeProgram

    Run Emergent Program       copy_program_code_out_of_loop

    Run Emergent Program       LoopCodeProgram


MoveFunctionCodeIntoLoop
    Set Suite Variable   ${program_test}         "LoopCodeFunction"
    Restart Emergent
    Ensure Emergent Free

    Run Emergent Program       LoopCodeFunction

    Prog Var Should Equal      j            1

    Run Emergent Program       move_function_code_into_loop

    Run Emergent Program       LoopCodeFunction

    Prog Var Should Equal      j            2

MoveFunctionCodeOutOfLoop
    Set Suite Variable   ${program_test}         "LoopCodeFunction"
    Ensure Emergent Free

    Run Emergent Program       LoopCodeFunction

    Prog Var Should Equal      j            2

    Run Emergent Program       move_function_code_out_of_loop

    Run Emergent Program       LoopCodeFunction

    Prog Var Should Equal      j            1

MoveProgramCodeIntoLoop
    Set Suite Variable   ${program_test}         "LoopCodeProgram"
    Ensure Emergent Free

    Run Emergent Program       LoopCodeProgram

    Run Emergent Program       move_program_code_into_loop

    Run Emergent Program       LoopCodeProgram

MoveProgramCodeOutOfLoop
    Set Suite Variable   ${program_test}         "LoopCodeProgram"
    Ensure Emergent Free

    Run Emergent Program       LoopCodeProgram
    
    Run Emergent Program       move_program_code_out_of_loop
    
    Run Emergent Program       LoopCodeProgram
    
CopyProgramSubGroup 
    Set Suite Variable     ${program_test}       "TestGroup" 
    Restart Emergent 
    Ensure Emergent Free 
 
    Prog Group Should Match    3                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_three\\"] 
    Prog Group Should Match    -3                     NONE   
     
    Run Emergent Program	copy_callee_caller_into_subgroup
 
 
    Prog Group Should Match    3                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_three\\"] 
    Prog Group Should Match    -3                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_three\\"].gp[\\"sub_group_three\\"] 
 
MoveProgramIntoSubGroup 
    Set Suite Variable     ${program_test}       "TestGroup" 
    Restart Emergent 
    Ensure Emergent Free 
 
    Prog Group Should Match    3                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_three\\"] 
    Prog Group Should Match    -3                     NONE   
     
    Run Emergent Program	move_callee_caller_into_subgroup
 
 
    Prog Group Should Match    3                     NONE 
    Prog Group Should Match    -3                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_three\\"].gp[\\"sub_group_three\\"]  

MoveProgramOutOfSubGroup 
    Set Suite Variable     ${program_test}       "TestGroup" 
    Ensure Emergent Free 
 
    Prog Group Should Match    3                     NONE 
    Prog Group Should Match    -3                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_three\\"].gp[\\"sub_group_three\\"]  
     
    Run Emergent Program	move_callee_caller_out_of_subgroup
 
    Prog Group Should Match    3                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_three\\"] 
    Prog Group Should Match    -3                     NONE 


CopyExpressionWithVariableToProgram
    Set Suite Variable     ${program_test}       "EmptyProgram" 
    Ensure Emergent Free 
 
    ${output} =                Run Command Wait      {"command": "GetVar", "program": "EmptyProgram", "var_name": "i"}
    Status Error Match       ${output}     5         Var 'i' not found
    
    Run Emergent Program       copy_expression_with_variable_to_other_program 

    Prog Var Should Equal      i	0

    Run Emergent Program       EmptyProgram

    Prog Var Should Equal      i	1

MoveExpressionWithVariableToProgram
    Set Suite Variable     ${program_test}       "EmptyProgram"
    Restart Emergent 
    Ensure Emergent Free 
 
    ${output} =                Run Command Wait      {"command": "GetVar", "program": "EmptyProgram", "var_name": "i"}
    Status Error Match       ${output}     5         Var 'i' not found
    
    Run Emergent Program       move_expression_with_variable_to_other_program 

    Prog Var Should Equal      i	0

    Run Emergent Program       EmptyProgram

    Prog Var Should Equal      i	1
 

CopyProgramCodeBetweenProjects
    Restart Emergent
    Set Suite Variable     ${program_test}       "TestGroup"

    Ensure Emergent Free

    ${output} =                Run Command Completion          {"command": "OpenProject", "project": "TestPointerUpdates_copy_into.proj"}   300 sec
    Status OK No Result        ${output}

    Prog Group Should Match    1                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"]
    Prog Group Should Match    2                     NONE
    Prog Group Secondary Project Should Match	     1	  .projects[\\"TestPointerUpdates_copy_into\\"].programs.gp[\\"group_one\\"]
    Prog Group Secondary Project Should Match	     2	  NONE
    
    Run Emergent Program	copy_callee_caller_into_project


    Prog Group Should Match    2                     NONE
    Prog Group Should Match    1                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"] 
    Prog Group Secondary Project Should Match	     1	  .projects[\\"TestPointerUpdates_copy_into\\"].programs.gp[\\"group_one\\"]
    Prog Group Secondary Project Should Match	     2	  .projects[\\"TestPointerUpdates_copy_into\\"].programs.gp[\\"group_two\\"]

CopyProgEl_listWithProgramCallToOtherProgram
    Ensure Emergent Free
    Run Emergent Program	copy_if_expression_with_programcall_to_other_program_if_expression
    Run Emergent Program	ProgWithIf

MoveProgramBetweenProjects
    Set Suite Variable     ${program_test}       "TestGroup"
    Restart Emergent
    Ensure Emergent Free

    ${output} =                Run Command Completion          {"command": "OpenProject", "project": "TestPointerUpdates_copy_into.proj"}   300 sec
    Status OK No Result        ${output}

    Prog Group Should Match    2                     NONE
    Prog Group Should Match    1                     .projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"] 
    Prog Group Secondary Project Should Match        1    .projects[\\"TestPointerUpdates_copy_into\\"].programs.gp[\\"group_one\\"]
    Prog Group Secondary Project Should Match        2    NONE
    
    Run Emergent Program	move_callee_caller_into_project

    Prog Group Should Match    2                     NONE
    Prog Group Should Match    1                     NONE
    Prog Group Secondary Project Should Match        1    .projects[\\"TestPointerUpdates_copy_into\\"].programs.gp[\\"group_one\\"]
    Prog Group Secondary Project Should Match        2    .projects[\\"TestPointerUpdates_copy_into\\"].programs.gp[\\"group_two\\"]

CopyControlpanelBetweenProjects
    Set Suite Variable     ${program_test}       "TestGroup"
    Restart Emergent
    Ensure Emergent Free

    ${output} =                Run Command Completion          {"command": "OpenProject", "project": "TestPointerUpdates_copy_into.proj"}   300 sec
    Status OK No Result        ${output}

    Prog Var Should Equal      which_group           0

    Run Emergent Program       copy_control_var_into_proj

    ${output} =                Run Command Wait      {"command": "SetVar", "program": ".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"TesterPrograms\\\"][\\\"TestCtrlPanel\\\"]", "var_name": "set_val", "var_value": 2345}
    Status OK No Result        ${output}

    ${output} =                Run Command Wait      {"command": "RunProgram", "program": ".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"TesterPrograms\\\"][\\\"TestCtrlPanel\\\"]"}
    Status OK No Result        ${output}

    ${output} =                Run Command Wait      {"command": "GetVar", "program": ".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"TesterPrograms\\\"][\\\"TestGroup\\\"]", "var_name":"which_group"}
    Status OK        ${output}
    Json Value Should Equal    ${output}             /result   2345

    Prog Var Should Equal      which_group           0

CopyProgramGlobalTableBetweenProjects
    Set Suite Variable   ${program_test}         "TestDataTableValue"
    Restart Emergent
    Ensure Emergent Free

    ${output} =                Run Command Completion          {"command": "OpenProject", "project": "TestPointerUpdates_copy_into.proj"}   300 sec
    Status OK No Result        ${output}

    Set Emergent Var	RefsGlobalTable		set_value	"cat"
    Run Emergent Program	.projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"][\\"RefsGlobalTable\\"]
    DataTable Cell Value Should Match    .projects[\\"TestPointerUpdates\\"].data.gp[\\"InputData\\"][\\"data_group_DataTable\\"]	0	col_one		cat
    Run Emergent Program   copy_refsglobaltable_into_project
    Set Emergent Var	.projects[\\"TestPointerUpdates_copy_into\\"].programs.gp[\\"group_two\\"][\\"RefsGlobalTable\\"]		set_value	"mouse"
    Run Emergent Program	.projects[\\"TestPointerUpdates_copy_into\\"].programs.gp[\\"group_two\\"][\\"RefsGlobalTable\\"]
    DataTable Cell Value Should Match    .projects[\\"TestPointerUpdates_copy_into\\"].data.gp[\\"InputData\\"][\\"data_group_DataTable\\"]	0	col_one		mouse    
    DataTable Cell Value Should Match    .projects[\\"TestPointerUpdates\\"].data.gp[\\"InputData\\"][\\"data_group_DataTable\\"]	0	col_one		cat    
    
    Set Emergent Var	.projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"][\\"RefsGlobalTable\\"]		set_value	"bird"
    Run Emergent Program	.projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"][\\"RefsGlobalTable\\"]
    DataTable Cell Value Should Match    .projects[\\"TestPointerUpdates\\"].data.gp[\\"InputData\\"][\\"data_group_DataTable\\"]	0	col_one		bird
    DataTable Cell Value Should Match    .projects[\\"TestPointerUpdates_copy_into\\"].data.gp[\\"InputData\\"][\\"data_group_DataTable\\"]	0	col_one		mouse    


MoveProgramGlobalTableBetweenProjects
    Set Suite Variable   ${program_test}         "TestDataTableValue"
    Restart Emergent
    Ensure Emergent Free

    ${output} =                Run Command Completion          {"command": "OpenProject", "project": "TestPointerUpdates_copy_into.proj"}   300 sec
    Status OK No Result        ${output}

    Set Emergent Var	RefsGlobalTable		set_value	"cat"
    Run Emergent Program	.projects[\\"TestPointerUpdates\\"].programs.gp[\\"group_one\\"][\\"RefsGlobalTable\\"]
    DataTable Cell Value Should Match    .projects[\\"TestPointerUpdates\\"].data.gp[\\"InputData\\"][\\"data_group_DataTable\\"]	0	col_one		cat
    Run Emergent Program   move_refsglobaltable_into_project
    Set Emergent Var	.projects[\\"TestPointerUpdates_copy_into\\"].programs.gp[\\"group_two\\"][\\"RefsGlobalTable\\"]		set_value	"mouse"
    Run Emergent Program	.projects[\\"TestPointerUpdates_copy_into\\"].programs.gp[\\"group_two\\"][\\"RefsGlobalTable\\"]
    DataTable Cell Value Should Match    .projects[\\"TestPointerUpdates_copy_into\\"].data.gp[\\"InputData\\"][\\"data_group_DataTable\\"]	0	col_one		mouse
    


*** Keywords ***


Prog Group Should Match
    [Arguments]        ${prog_group}   ${group_name}
    ${output} =                Run Command Wait      {"command": "SetVar", "program": "TestGroup", "var_name": "which_group", "var_value": ${prog_group}}
    Status OK                  ${output}

    Run Emergent Program       TestGroup

    Prog Var Should Match      group_name            ${group_name}

Prog Group Secondary Project Should Match
    [Arguments]        ${prog_group}   ${group_name}
    ${output} =                Run Command Wait      {"command": "SetVar", "program": ".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"TesterPrograms\\\"][\\\"TestGroup\\\"]", "var_name": "which_group", "var_value": ${prog_group}}
    Status OK                  ${output}

    ${output} =                Run Command Wait      {"command": "RunProgram", "program": ".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"TesterPrograms\\\"][\\\"TestGroup\\\"]"}
    Status OK No Result        ${output}

    ${output} =                Run Command Wait      {"command": "GetVar", "program": ".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"TesterPrograms\\\"][\\\"TestGroup\\\"]", "var_name": "group_name"}
    Status OK                  ${output}
    Json String Should Match    ${output}             /result   ${group_name}

DataTable Value Should Match
    [Arguments]        ${prog_group}   ${table_value}
    ${output} =                Run Command Wait      {"command": "SetVar", "program": "TestDataTableValue", "var_name": "which_group", "var_value": ${prog_group}}
    Status OK                  ${output}

    Run Emergent Program       TestDataTableValue

    Prog Var Should Match      data_table_value           ${table_value}

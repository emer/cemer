// ta_Dump File v3.0 -- code v7.8.4.0 rev8739
LeabraProject .projects["TestLookupParse"] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
    UserDataItem @["user_pinned"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @["ControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };
  };
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [31] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["label"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_running.last_sort_spec.ops = [0] {
   };

   DataTableCols @.jobs_done.data = [31] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["label"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_done.last_sort_spec.ops = [0] {
   };

   DataTableCols @.jobs_archive.data = [31] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["label"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_archive.last_sort_spec.ops = [0] {
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataOpList @.file_list.last_sort_spec.ops = [0] {
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   DataOpList @.cluster_info.last_sort_spec.ops = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] { 
  };
  DataTable_Group @.gp["OutputData"] { 
  };
  DataTable_Group @.gp["AnalysisData"] { 
  };
 };

 Program_TopGroup @.programs = [0] {
  Program_Group @.gp["TestPrograms"] = [7] { 
   Program @["no_text"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [9] {
     ProgVar @["lookup_type"] { };
     ProgVar @["lookup_seed"] { };
     ProgVar @["prepend_txt"] { };
     ProgVar @["append_txt"] { };
     ProgVar @["prog_el_txt"] { };
     ProgVar @["path_var"] { };
     ProgVar @["path_prepend_txt"] { };
     ProgVar @["path_rest"] { };
     ProgVar @["base_path"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [7] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["test_name"] { };
       ProgVar @["input"] { };
       ProgVar @["cursor_pos"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     StaticMethodCall @[4] { 
      ProgArg_List @.meth_args = [11] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
       ProgArg @[4] { };
       ProgArg @[5] { };
       ProgArg @[6] { };
       ProgArg @[7] { };
       ProgArg @[8] { };
       ProgArg @[9] { };
       ProgArg @[10] { };
      };
     };
     PrintVar @[5] { };
     PrintVar @[6] { };
    };
   };
   Program @["object_select_method_or_member"] { 
    ProgObjList @.objs = [1] {
     DataTable @["DataTable_28"] { 
      DataTableCols @.data = [0] {
      };

      DataOpList @.last_sort_spec.ops = [0] {
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [10] {
     ProgVar @["DataTable_28"] { };
     ProgVar @["lookup_type"] { };
     ProgVar @["lookup_seed"] { };
     ProgVar @["prepend_txt"] { };
     ProgVar @["append_txt"] { };
     ProgVar @["prog_el_txt"] { };
     ProgVar @["path_var"] { };
     ProgVar @["path_prepend_txt"] { };
     ProgVar @["path_rest"] { };
     ProgVar @["base_path"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [7] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["test_name"] { };
       ProgVar @["input"] { };
       ProgVar @["cursor_pos"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     StaticMethodCall @[4] { 
      ProgArg_List @.meth_args = [11] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
       ProgArg @[4] { };
       ProgArg @[5] { };
       ProgArg @[6] { };
       ProgArg @[7] { };
       ProgArg @[8] { };
       ProgArg @[9] { };
       ProgArg @[10] { };
      };
     };
     PrintVar @[5] { };
     PrintVar @[6] { };
    };
   };
   Program @["static_method_random"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [9] {
     ProgVar @["lookup_type"] { };
     ProgVar @["lookup_seed"] { };
     ProgVar @["prepend_txt"] { };
     ProgVar @["append_txt"] { };
     ProgVar @["prog_el_txt"] { };
     ProgVar @["path_var"] { };
     ProgVar @["path_prepend_txt"] { };
     ProgVar @["path_rest"] { };
     ProgVar @["base_path"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [7] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["test_name"] { };
       ProgVar @["input"] { };
       ProgVar @["cursor_pos"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     StaticMethodCall @[4] { 
      ProgArg_List @.meth_args = [11] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
       ProgArg @[4] { };
       ProgArg @[5] { };
       ProgArg @[6] { };
       ProgArg @[7] { };
       ProgArg @[8] { };
       ProgArg @[9] { };
       ProgArg @[10] { };
      };
     };
     PrintVar @[5] { };
     PrintVar @[6] { };
    };
   };
   Program @["static_method_random_seeded"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [9] {
     ProgVar @["lookup_type"] { };
     ProgVar @["lookup_seed"] { };
     ProgVar @["prepend_txt"] { };
     ProgVar @["append_txt"] { };
     ProgVar @["prog_el_txt"] { };
     ProgVar @["path_var"] { };
     ProgVar @["path_prepend_txt"] { };
     ProgVar @["path_rest"] { };
     ProgVar @["base_path"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [7] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["test_name"] { };
       ProgVar @["input"] { };
       ProgVar @["cursor_pos"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     StaticMethodCall @[4] { 
      ProgArg_List @.meth_args = [11] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
       ProgArg @[4] { };
       ProgArg @[5] { };
       ProgArg @[6] { };
       ProgArg @[7] { };
       ProgArg @[8] { };
       ProgArg @[9] { };
       ProgArg @[10] { };
      };
     };
     PrintVar @[5] { };
     PrintVar @[6] { };
    };
   };
   Program @["object_member_select_method_or_member"] { 
    ProgObjList @.objs = [1] {
     DataTable @["DataTable_28"] { 
      DataTableCols @.data = [0] {
      };

      DataOpList @.last_sort_spec.ops = [0] {
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [10] {
     ProgVar @["DataTable_28"] { };
     ProgVar @["lookup_type"] { };
     ProgVar @["lookup_seed"] { };
     ProgVar @["prepend_txt"] { };
     ProgVar @["append_txt"] { };
     ProgVar @["prog_el_txt"] { };
     ProgVar @["path_var"] { };
     ProgVar @["path_prepend_txt"] { };
     ProgVar @["path_rest"] { };
     ProgVar @["base_path"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [7] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["test_name"] { };
       ProgVar @["input"] { };
       ProgVar @["cursor_pos"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     StaticMethodCall @[4] { 
      ProgArg_List @.meth_args = [11] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
       ProgArg @[4] { };
       ProgArg @[5] { };
       ProgArg @[6] { };
       ProgArg @[7] { };
       ProgArg @[8] { };
       ProgArg @[9] { };
       ProgArg @[10] { };
      };
     };
     PrintVar @[5] { };
     PrintVar @[6] { };
    };
   };
   Program @["object_member_select_method_or_member_seeded"] { 
    ProgObjList @.objs = [1] {
     DataTable @["DataTable_28"] { 
      DataTableCols @.data = [0] {
      };

      DataOpList @.last_sort_spec.ops = [0] {
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [10] {
     ProgVar @["DataTable_28"] { };
     ProgVar @["lookup_type"] { };
     ProgVar @["lookup_seed"] { };
     ProgVar @["prepend_txt"] { };
     ProgVar @["append_txt"] { };
     ProgVar @["prog_el_txt"] { };
     ProgVar @["path_var"] { };
     ProgVar @["path_prepend_txt"] { };
     ProgVar @["path_rest"] { };
     ProgVar @["base_path"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [7] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["test_name"] { };
       ProgVar @["input"] { };
       ProgVar @["cursor_pos"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     StaticMethodCall @[4] { 
      ProgArg_List @.meth_args = [11] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
       ProgArg @[4] { };
       ProgArg @[5] { };
       ProgArg @[6] { };
       ProgArg @[7] { };
       ProgArg @[8] { };
       ProgArg @[9] { };
       ProgArg @[10] { };
      };
     };
     PrintVar @[5] { };
     PrintVar @[6] { };
    };
   };
   Program @["call_function_other_program"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [9] {
     ProgVar @["lookup_type"] { };
     ProgVar @["lookup_seed"] { };
     ProgVar @["prepend_txt"] { };
     ProgVar @["append_txt"] { };
     ProgVar @["prog_el_txt"] { };
     ProgVar @["path_var"] { };
     ProgVar @["path_prepend_txt"] { };
     ProgVar @["path_rest"] { };
     ProgVar @["base_path"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [7] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["test_name"] { };
       ProgVar @["input"] { };
       ProgVar @["cursor_pos"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     StaticMethodCall @[4] { 
      ProgArg_List @.meth_args = [11] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
       ProgArg @[4] { };
       ProgArg @[5] { };
       ProgArg @[6] { };
       ProgArg @[7] { };
       ProgArg @[8] { };
       ProgArg @[9] { };
       ProgArg @[10] { };
      };
     };
     PrintVar @[5] { };
     PrintVar @[6] { };
    };
   };
  };
  Program_Group @.gp["SupportPrograms"] = [1] { 
   Program @["has_function"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [0] {
    };

    Function_List @.functions = [1] {
     Function @["Function_2"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [1] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [1] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser2"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["T3Frames"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [1] {
      T3Panel @["Frame1"] { 
       T3DataView_List @.root_view.children = [0] {
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [0] {
 };
};
LeabraProject .projects["TestLookupParse"] {
 name="TestLookupParse";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 author="rohrlich";
 email="john.rohrlich@colorado.edu";
 license {
  owner="Regents of the University of Colorado";
  license=NO_LIC;
  org="CCNLab at the University of Colorado Boulder";
  year="2011";
  custom=;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_0"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_6";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ControlPanel @["ControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ControlPanel";
   running_updt=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   running_updt=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    name="jobs_running";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   jobs_done {
    name="jobs_done";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   jobs_archive {
    name="jobs_archive";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   file_list {
    name="file_list";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_name"] {
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["size"] {
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["kind"] {
      name="kind";
      desc="type of file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_modified"] {
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_created"] {
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["svn_file_path"] {
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["proj_file_path"] {
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_path"] {
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   cluster_info {
    name="cluster_info";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["state"] {
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["procs"] {
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   cluster=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=1;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=1;
  };
 };
 param_sets {
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["OutputData"] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["AnalysisData"] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program_Group @.gp["TestPrograms"] {
   name="TestPrograms";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   debug_mode=0;
   Program @["no_text"] {
    name="no_text";
    short_nm="notext";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=DataTable;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["lookup_type"] {
      name="lookup_type";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="return value from method";
      init_from=NULL;
     };
     ProgVar @["lookup_seed"] {
      name="lookup_seed";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prepend_txt"] {
      name="prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["append_txt"] {
      name="append_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prog_el_txt"] {
      name="prog_el_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_var"] {
      name="path_var";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_prepend_txt"] {
      name="path_prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_rest"] {
      name="path_rest";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["base_path"] {
      name="base_path";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (12 vars)";
      pre_compile_code_string="LocalVars (3 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["test_name"] {
	name="test_name";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["input"] {
	name="input";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cursor_pos"] {
	name="cursor_pos";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc="position of cursor when control+l pressed";
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="test_name = this.name";
      pre_compile_code_string="test_name = this.name";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].prog_code[0].local_vars["test_name"]$$;
      expr {
       expr="this.name";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="input = \"\"";
      pre_compile_code_string="input = \"\"";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].prog_code[0].local_vars["input"]$$;
      expr {
       expr="\"\"";
      };
     };
     MethodCall @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cursor_pos = input->length()";
      pre_compile_code_string="cursor_pos = input->length()";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].prog_code[0].local_vars["cursor_pos"]$$;
      obj=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].prog_code[0].local_vars["input"]$;
      method=taString::length;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int length()";
      meth_desc=" how many characters in the string";
     };
     StaticMethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, lookup_seed, prepend_txt, append_txt, prog_el_txt, path_var, path_prepend_txt, path_rest, base_path)";
      pre_compile_code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, lookup_seed, prepend_txt, append_txt, prog_el_txt, path_var, path_prepend_txt, path_rest, base_path)";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].vars["lookup_type"]$$;
      object_type=ProgExprBase;
      method=ProgExprBase::Test_ParseForLookup;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString;
	type="const taString";
	name="test_name";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="this.name";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString;
	type="const taString";
	name="input_text";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input";
	};
       };
       ProgArg @[2] {
	arg_type=const_int;
	type="const int";
	name="cursor_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="cursor_pos";
	};
       };
       ProgArg @[3] {
	arg_type=taString_ref;
	type="taString&";
	name="lookup_seed";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="lookup_seed";
	};
       };
       ProgArg @[4] {
	arg_type=taString_ref;
	type="taString&";
	name="prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prepend_txt";
	};
       };
       ProgArg @[5] {
	arg_type=taString_ref;
	type="taString&";
	name="append_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="append_txt";
	};
       };
       ProgArg @[6] {
	arg_type=taString_ref;
	type="taString&";
	name="prog_el_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prog_el_txt";
	};
       };
       ProgArg @[7] {
	arg_type=taString_ref;
	type="taString&";
	name="path_var";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_var";
	};
       };
       ProgArg @[8] {
	arg_type=taString_ref;
	type="taString&";
	name="path_prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_prepend_txt";
	};
       };
       ProgArg @[9] {
	arg_type=taString_ref;
	type="taString&";
	name="path_rest";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_rest";
	};
       };
       ProgArg @[10] {
	arg_type=taString_ref;
	type="taString&";
	name="base_path";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="base_path";
	};
       };
      };
     };
     PrintVar @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      pre_compile_code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].prog_code[0].local_vars["test_name"]$;
      print_var2=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].vars["lookup_type"]$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].vars["lookup_seed"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].vars["prepend_txt"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].vars["append_txt"]$$;
      print_var6=.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].vars["prog_el_txt"]$$;
      debug=0;
     };
     PrintVar @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name path_var path_prepend_txt path_rest base_path";
      pre_compile_code_string="Print: test_name path_var path_prepend_txt path_rest base_path";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].prog_code[0].local_vars["test_name"]$;
      print_var2=.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].vars["path_var"]$$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].vars["path_prepend_txt"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].vars["path_rest"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["no_text"].vars["base_path"]$$;
      print_var6=NULL;
      debug=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["object_select_method_or_member"] {
    name="object_select_method_or_member";
    short_nm="bjcslc";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=DataTable;
     el_def=0;
     DataTable @["DataTable_28"] {
      name="DataTable_28";
      desc=;
      data {
       name="data";
       el_typ=DataColT;
       el_def=0;
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
      row_indexes {
       name="row_indexes";
      [0]       };
      last_sort_spec {
       name="last_sort_spec";
       ops {
	name="ops";
	el_typ=DataSortEl;
	el_def=0;
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["DataTable_28"] {
      name="DataTable_28";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].objs["DataTable_28"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["lookup_type"] {
      name="lookup_type";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="return value from method";
      init_from=NULL;
     };
     ProgVar @["lookup_seed"] {
      name="lookup_seed";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prepend_txt"] {
      name="prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["append_txt"] {
      name="append_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prog_el_txt"] {
      name="prog_el_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_var"] {
      name="path_var";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_prepend_txt"] {
      name="path_prepend_txt";
      var_type=T_String;
      string_val="DataTable_28->";
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_rest"] {
      name="path_rest";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["base_path"] {
      name="base_path";
      var_type=T_String;
      string_val="DataTable_28";
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (3 vars)";
      pre_compile_code_string="LocalVars (3 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["test_name"] {
	name="test_name";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["input"] {
	name="input";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cursor_pos"] {
	name="cursor_pos";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc="position of cursor when control+l pressed";
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="test_name = this.name";
      pre_compile_code_string="test_name = this.name";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].prog_code[0].local_vars["test_name"]$$;
      expr {
       expr="this.name";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="input = DataTable_28.GetName() + \"->\"";
      pre_compile_code_string="input = DataTable_28.GetName() + \"->\"";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].prog_code[0].local_vars["input"]$$;
      expr {
       expr="DataTable_28.GetName() + \"->\"";
      };
     };
     MethodCall @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cursor_pos = input->length()";
      pre_compile_code_string="cursor_pos = input->length()";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].prog_code[0].local_vars["cursor_pos"]$$;
      obj=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].prog_code[0].local_vars["input"]$;
      method=taString::length;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int length()";
      meth_desc=" how many characters in the string";
     };
     StaticMethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, lookup_seed, prepend_txt, append_txt, prog_el_txt, path_var, path_prepend_txt, path_rest, base_path)";
      pre_compile_code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, lookup_seed, prepend_txt, append_txt, prog_el_txt, path_var, path_prepend_txt, path_rest, base_path)";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].vars["lookup_type"]$$;
      object_type=ProgExprBase;
      method=ProgExprBase::Test_ParseForLookup;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString;
	type="const taString";
	name="test_name";
	required=1;
	def_val=;
	prev_expr="this.name";
	expr {
	 expr="this.name";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString;
	type="const taString";
	name="input_text";
	required=1;
	def_val=;
	prev_expr="input";
	expr {
	 expr="input";
	};
       };
       ProgArg @[2] {
	arg_type=const_int;
	type="const int";
	name="cursor_pos";
	required=1;
	def_val=;
	prev_expr="cursor_pos";
	expr {
	 expr="cursor_pos";
	};
       };
       ProgArg @[3] {
	arg_type=taString_ref;
	type="taString&";
	name="lookup_seed";
	required=1;
	def_val=;
	prev_expr="prepend";
	expr {
	 expr="lookup_seed";
	};
       };
       ProgArg @[4] {
	arg_type=taString_ref;
	type="taString&";
	name="prepend_txt";
	required=1;
	def_val=;
	prev_expr="prog_el_text";
	expr {
	 expr="prepend_txt";
	};
       };
       ProgArg @[5] {
	arg_type=taString_ref;
	type="taString&";
	name="append_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="append_txt";
	};
       };
       ProgArg @[6] {
	arg_type=taString_ref;
	type="taString&";
	name="prog_el_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prog_el_txt";
	};
       };
       ProgArg @[7] {
	arg_type=taString_ref;
	type="taString&";
	name="path_var";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_var";
	};
       };
       ProgArg @[8] {
	arg_type=taString_ref;
	type="taString&";
	name="path_prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_prepend_txt";
	};
       };
       ProgArg @[9] {
	arg_type=taString_ref;
	type="taString&";
	name="path_rest";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_rest";
	};
       };
       ProgArg @[10] {
	arg_type=taString_ref;
	type="taString&";
	name="base_path";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="base_path";
	};
       };
      };
     };
     PrintVar @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      pre_compile_code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].prog_code[0].local_vars["test_name"]$;
      print_var2=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].vars["lookup_type"]$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].vars["lookup_seed"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].vars["prepend_txt"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].vars["append_txt"]$$;
      print_var6=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].vars["prog_el_txt"]$$;
      debug=0;
     };
     PrintVar @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name path_var path_prepend_txt path_rest base_path";
      pre_compile_code_string="Print: test_name path_var path_prepend_txt path_rest base_path";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].prog_code[0].local_vars["test_name"]$;
      print_var2=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].vars["path_var"]$$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].vars["path_prepend_txt"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].vars["path_rest"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_select_method_or_member"].vars["base_path"]$$;
      print_var6=NULL;
      debug=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["static_method_random"] {
    name="static_method_random";
    short_nm="sttmth";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=DataTable;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["lookup_type"] {
      name="lookup_type";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="return value from method";
      init_from=NULL;
     };
     ProgVar @["lookup_seed"] {
      name="lookup_seed";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prepend_txt"] {
      name="prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["append_txt"] {
      name="append_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prog_el_txt"] {
      name="prog_el_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_var"] {
      name="path_var";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_prepend_txt"] {
      name="path_prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_rest"] {
      name="path_rest";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["base_path"] {
      name="base_path";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (6 vars)";
      pre_compile_code_string="LocalVars (12 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["test_name"] {
	name="test_name";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["input"] {
	name="input";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cursor_pos"] {
	name="cursor_pos";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc="position of cursor when control+l pressed";
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="test_name = this.name";
      pre_compile_code_string="test_name = this.name";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].prog_code[0].local_vars["test_name"]$$;
      expr {
       expr="this.name";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="input = \"Random::\"";
      pre_compile_code_string="input = \"Random::\"";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].prog_code[0].local_vars["input"]$$;
      expr {
       expr="\"Random::\"";
      };
     };
     MethodCall @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cursor_pos = input->length()";
      pre_compile_code_string="cursor_pos = input->length()";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].prog_code[0].local_vars["cursor_pos"]$$;
      obj=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].prog_code[0].local_vars["input"]$;
      method=taString::length;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int length()";
      meth_desc=" how many characters in the string";
     };
     StaticMethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, , prepend_txt, , prog_el_text, , , , )";
      pre_compile_code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, lookup_seed, prepend_txt, append_txt, prog_el_txt, path_var, path_prepend_txt, path_rest, base_path)";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].vars["lookup_type"]$$;
      object_type=ProgExprBase;
      method=ProgExprBase::Test_ParseForLookup;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString;
	type="const taString";
	name="test_name";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="this.name";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString;
	type="const taString";
	name="input_text";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input";
	};
       };
       ProgArg @[2] {
	arg_type=const_int;
	type="const int";
	name="cursor_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="cursor_pos";
	};
       };
       ProgArg @[3] {
	arg_type=taString_ref;
	type="taString&";
	name="lookup_seed";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="lookup_seed";
	};
       };
       ProgArg @[4] {
	arg_type=taString_ref;
	type="taString&";
	name="prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prepend_txt";
	};
       };
       ProgArg @[5] {
	arg_type=taString_ref;
	type="taString&";
	name="append_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="append_txt";
	};
       };
       ProgArg @[6] {
	arg_type=taString_ref;
	type="taString&";
	name="prog_el_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prog_el_txt";
	};
       };
       ProgArg @[7] {
	arg_type=taString_ref;
	type="taString&";
	name="path_var";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_var";
	};
       };
       ProgArg @[8] {
	arg_type=taString_ref;
	type="taString&";
	name="path_prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_prepend_txt";
	};
       };
       ProgArg @[9] {
	arg_type=taString_ref;
	type="taString&";
	name="path_rest";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_rest";
	};
       };
       ProgArg @[10] {
	arg_type=taString_ref;
	type="taString&";
	name="base_path";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="base_path";
	};
       };
      };
     };
     PrintVar @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      pre_compile_code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].prog_code[0].local_vars["test_name"]$;
      print_var2=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].vars["lookup_type"]$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].vars["lookup_seed"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].vars["prepend_txt"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].vars["append_txt"]$$;
      print_var6=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].vars["prog_el_txt"]$$;
      debug=0;
     };
     PrintVar @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name path_var prepend_txt path_rest base_path";
      pre_compile_code_string="Print: test_name path_var path_prepend_txt path_rest base_path";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].prog_code[0].local_vars["test_name"]$;
      print_var2=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].vars["path_var"]$$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].vars["path_prepend_txt"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].vars["path_rest"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random"].vars["base_path"]$$;
      print_var6=NULL;
      debug=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["static_method_random_seeded"] {
    name="static_method_random_seeded";
    short_nm="sttmth";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=DataTable;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["lookup_type"] {
      name="lookup_type";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="return value from method";
      init_from=NULL;
     };
     ProgVar @["lookup_seed"] {
      name="lookup_seed";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prepend_txt"] {
      name="prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["append_txt"] {
      name="append_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prog_el_txt"] {
      name="prog_el_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_var"] {
      name="path_var";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_prepend_txt"] {
      name="path_prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_rest"] {
      name="path_rest";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["base_path"] {
      name="base_path";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (6 vars)";
      pre_compile_code_string="LocalVars (12 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["test_name"] {
	name="test_name";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["input"] {
	name="input";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cursor_pos"] {
	name="cursor_pos";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc="position of cursor when control+l pressed";
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="test_name = this.name";
      pre_compile_code_string="test_name = this.name";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].prog_code[0].local_vars["test_name"]$$;
      expr {
       expr="this.name";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="input = \"Random::Int\"";
      pre_compile_code_string="input = \"Random::Int\"";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].prog_code[0].local_vars["input"]$$;
      expr {
       expr="\"Random::Int\"";
      };
     };
     MethodCall @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cursor_pos = input->length()";
      pre_compile_code_string="cursor_pos = input->length()";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].prog_code[0].local_vars["cursor_pos"]$$;
      obj=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].prog_code[0].local_vars["input"]$;
      method=taString::length;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int length()";
      meth_desc=" how many characters in the string";
     };
     StaticMethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, , prepend_txt, , prog_el_text, , , , )";
      pre_compile_code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, lookup_seed, prepend_txt, append_txt, prog_el_txt, path_var, path_prepend_txt, path_rest, base_path)";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].vars["lookup_type"]$$;
      object_type=ProgExprBase;
      method=ProgExprBase::Test_ParseForLookup;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString;
	type="const taString";
	name="test_name";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="this.name";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString;
	type="const taString";
	name="input_text";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input";
	};
       };
       ProgArg @[2] {
	arg_type=const_int;
	type="const int";
	name="cursor_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="cursor_pos";
	};
       };
       ProgArg @[3] {
	arg_type=taString_ref;
	type="taString&";
	name="lookup_seed";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="lookup_seed";
	};
       };
       ProgArg @[4] {
	arg_type=taString_ref;
	type="taString&";
	name="prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prepend_txt";
	};
       };
       ProgArg @[5] {
	arg_type=taString_ref;
	type="taString&";
	name="append_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="append_txt";
	};
       };
       ProgArg @[6] {
	arg_type=taString_ref;
	type="taString&";
	name="prog_el_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prog_el_txt";
	};
       };
       ProgArg @[7] {
	arg_type=taString_ref;
	type="taString&";
	name="path_var";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_var";
	};
       };
       ProgArg @[8] {
	arg_type=taString_ref;
	type="taString&";
	name="path_prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_prepend_txt";
	};
       };
       ProgArg @[9] {
	arg_type=taString_ref;
	type="taString&";
	name="path_rest";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_rest";
	};
       };
       ProgArg @[10] {
	arg_type=taString_ref;
	type="taString&";
	name="base_path";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="base_path";
	};
       };
      };
     };
     PrintVar @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      pre_compile_code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].prog_code[0].local_vars["test_name"]$;
      print_var2=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].vars["lookup_type"]$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].vars["lookup_seed"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].vars["prepend_txt"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].vars["append_txt"]$$;
      print_var6=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].vars["prog_el_txt"]$$;
      debug=0;
     };
     PrintVar @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name path_var prepend_txt path_rest base_path";
      pre_compile_code_string="Print: test_name path_var path_prepend_txt path_rest base_path";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].prog_code[0].local_vars["test_name"]$;
      print_var2=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].vars["path_var"]$$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].vars["path_prepend_txt"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].vars["path_rest"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["static_method_random_seeded"].vars["base_path"]$$;
      print_var6=NULL;
      debug=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["object_member_select_method_or_member"] {
    name="object_member_select_method_or_member";
    short_nm="bjcmmb";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=DataTable;
     el_def=0;
     DataTable @["DataTable_28"] {
      name="DataTable_28";
      desc=;
      data {
       name="data";
       el_typ=DataColT;
       el_def=0;
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
      row_indexes {
       name="row_indexes";
      [0]       };
      last_sort_spec {
       name="last_sort_spec";
       ops {
	name="ops";
	el_typ=DataSortEl;
	el_def=0;
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["DataTable_28"] {
      name="DataTable_28";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].objs["DataTable_28"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["lookup_type"] {
      name="lookup_type";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="return value from method";
      init_from=NULL;
     };
     ProgVar @["lookup_seed"] {
      name="lookup_seed";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prepend_txt"] {
      name="prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["append_txt"] {
      name="append_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prog_el_txt"] {
      name="prog_el_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_var"] {
      name="path_var";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_prepend_txt"] {
      name="path_prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_rest"] {
      name="path_rest";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["base_path"] {
      name="base_path";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (6 vars)";
      pre_compile_code_string="LocalVars (12 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["test_name"] {
	name="test_name";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["input"] {
	name="input";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cursor_pos"] {
	name="cursor_pos";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc="position of cursor when control+l pressed";
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="test_name = this.name";
      pre_compile_code_string="test_name = this.name";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].prog_code[0].local_vars["test_name"]$$;
      expr {
       expr="this.name";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="input = DataTable_28.GetName() + \".cell_view.\"";
      pre_compile_code_string="input = DataTable_28.GetName() + \".cell_view.\"";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].prog_code[0].local_vars["input"]$$;
      expr {
       expr="DataTable_28.GetName() + \".cell_view.\"";
      };
     };
     MethodCall @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cursor_pos = input->length()";
      pre_compile_code_string="cursor_pos = input->length()";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].prog_code[0].local_vars["cursor_pos"]$$;
      obj=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].prog_code[0].local_vars["input"]$;
      method=taString::length;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int length()";
      meth_desc=" how many characters in the string";
     };
     StaticMethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, , prepend_txt, , prog_el_text, , , , )";
      pre_compile_code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, lookup_seed, prepend_txt, append_txt, prog_el_txt, path_var, path_prepend_txt, path_rest, base_path)";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].vars["lookup_type"]$$;
      object_type=ProgExprBase;
      method=ProgExprBase::Test_ParseForLookup;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString;
	type="const taString";
	name="test_name";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="this.name";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString;
	type="const taString";
	name="input_text";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input";
	};
       };
       ProgArg @[2] {
	arg_type=const_int;
	type="const int";
	name="cursor_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="cursor_pos";
	};
       };
       ProgArg @[3] {
	arg_type=taString_ref;
	type="taString&";
	name="lookup_seed";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="lookup_seed";
	};
       };
       ProgArg @[4] {
	arg_type=taString_ref;
	type="taString&";
	name="prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prepend_txt";
	};
       };
       ProgArg @[5] {
	arg_type=taString_ref;
	type="taString&";
	name="append_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="append_txt";
	};
       };
       ProgArg @[6] {
	arg_type=taString_ref;
	type="taString&";
	name="prog_el_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prog_el_txt";
	};
       };
       ProgArg @[7] {
	arg_type=taString_ref;
	type="taString&";
	name="path_var";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_var";
	};
       };
       ProgArg @[8] {
	arg_type=taString_ref;
	type="taString&";
	name="path_prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_prepend_txt";
	};
       };
       ProgArg @[9] {
	arg_type=taString_ref;
	type="taString&";
	name="path_rest";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_rest";
	};
       };
       ProgArg @[10] {
	arg_type=taString_ref;
	type="taString&";
	name="base_path";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="base_path";
	};
       };
      };
     };
     PrintVar @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      pre_compile_code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].prog_code[0].local_vars["test_name"]$;
      print_var2=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].vars["lookup_type"]$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].vars["lookup_seed"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].vars["prepend_txt"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].vars["append_txt"]$$;
      print_var6=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].vars["prog_el_txt"]$$;
      debug=0;
     };
     PrintVar @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name path_var prepend_txt path_rest base_path";
      pre_compile_code_string="Print: test_name path_var path_prepend_txt path_rest base_path";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].prog_code[0].local_vars["test_name"]$;
      print_var2=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].vars["path_var"]$$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].vars["path_prepend_txt"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].vars["path_rest"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member"].vars["base_path"]$$;
      print_var6=NULL;
      debug=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["object_member_select_method_or_member_seeded"] {
    name="object_member_select_method_or_member_seeded";
    short_nm="bjcmmb";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=DataTable;
     el_def=0;
     DataTable @["DataTable_28"] {
      name="DataTable_28";
      desc=;
      data {
       name="data";
       el_typ=DataColT;
       el_def=0;
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
      row_indexes {
       name="row_indexes";
      [0]       };
      last_sort_spec {
       name="last_sort_spec";
       ops {
	name="ops";
	el_typ=DataSortEl;
	el_def=0;
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["DataTable_28"] {
      name="DataTable_28";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].objs["DataTable_28"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["lookup_type"] {
      name="lookup_type";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="return value from method";
      init_from=NULL;
     };
     ProgVar @["lookup_seed"] {
      name="lookup_seed";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prepend_txt"] {
      name="prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["append_txt"] {
      name="append_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prog_el_txt"] {
      name="prog_el_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_var"] {
      name="path_var";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_prepend_txt"] {
      name="path_prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_rest"] {
      name="path_rest";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["base_path"] {
      name="base_path";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (6 vars)";
      pre_compile_code_string="LocalVars (12 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["test_name"] {
	name="test_name";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["input"] {
	name="input";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cursor_pos"] {
	name="cursor_pos";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc="position of cursor when control+l pressed";
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="test_name = this.name";
      pre_compile_code_string="test_name = this.name";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].prog_code[0].local_vars["test_name"]$$;
      expr {
       expr="this.name";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="input = DataTable_28.GetName() + \".cell_view.af\"";
      pre_compile_code_string="input = DataTable_28.GetName() + \".cell_view.af\"";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].prog_code[0].local_vars["input"]$$;
      expr {
       expr="DataTable_28.GetName() + \".cell_view.af\"";
      };
     };
     MethodCall @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cursor_pos = input->length()";
      pre_compile_code_string="cursor_pos = input->length()";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].prog_code[0].local_vars["cursor_pos"]$$;
      obj=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].prog_code[0].local_vars["input"]$;
      method=taString::length;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int length()";
      meth_desc=" how many characters in the string";
     };
     StaticMethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, , prepend_txt, , prog_el_text, , , , )";
      pre_compile_code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, lookup_seed, prepend_txt, append_txt, prog_el_txt, path_var, path_prepend_txt, path_rest, base_path)";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].vars["lookup_type"]$$;
      object_type=ProgExprBase;
      method=ProgExprBase::Test_ParseForLookup;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString;
	type="const taString";
	name="test_name";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="this.name";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString;
	type="const taString";
	name="input_text";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input";
	};
       };
       ProgArg @[2] {
	arg_type=const_int;
	type="const int";
	name="cursor_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="cursor_pos";
	};
       };
       ProgArg @[3] {
	arg_type=taString_ref;
	type="taString&";
	name="lookup_seed";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="lookup_seed";
	};
       };
       ProgArg @[4] {
	arg_type=taString_ref;
	type="taString&";
	name="prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prepend_txt";
	};
       };
       ProgArg @[5] {
	arg_type=taString_ref;
	type="taString&";
	name="append_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="append_txt";
	};
       };
       ProgArg @[6] {
	arg_type=taString_ref;
	type="taString&";
	name="prog_el_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prog_el_txt";
	};
       };
       ProgArg @[7] {
	arg_type=taString_ref;
	type="taString&";
	name="path_var";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_var";
	};
       };
       ProgArg @[8] {
	arg_type=taString_ref;
	type="taString&";
	name="path_prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_prepend_txt";
	};
       };
       ProgArg @[9] {
	arg_type=taString_ref;
	type="taString&";
	name="path_rest";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_rest";
	};
       };
       ProgArg @[10] {
	arg_type=taString_ref;
	type="taString&";
	name="base_path";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="base_path";
	};
       };
      };
     };
     PrintVar @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      pre_compile_code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].prog_code[0].local_vars["test_name"]$;
      print_var2=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].vars["lookup_type"]$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].vars["lookup_seed"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].vars["prepend_txt"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].vars["append_txt"]$$;
      print_var6=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].vars["prog_el_txt"]$$;
      debug=0;
     };
     PrintVar @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name path_var prepend_txt path_rest base_path";
      pre_compile_code_string="Print: test_name path_var path_prepend_txt path_rest base_path";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].prog_code[0].local_vars["test_name"]$;
      print_var2=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].vars["path_var"]$$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].vars["path_prepend_txt"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].vars["path_rest"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["object_member_select_method_or_member_seeded"].vars["base_path"]$$;
      print_var6=NULL;
      debug=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["call_function_other_program"] {
    name="call_function_other_program";
    short_nm="cllfnc";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=DataTable;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["lookup_type"] {
      name="lookup_type";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="return value from method";
      init_from=NULL;
     };
     ProgVar @["lookup_seed"] {
      name="lookup_seed";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prepend_txt"] {
      name="prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["append_txt"] {
      name="append_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["prog_el_txt"] {
      name="prog_el_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_var"] {
      name="path_var";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_prepend_txt"] {
      name="path_prepend_txt";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["path_rest"] {
      name="path_rest";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
     ProgVar @["base_path"] {
      name="base_path";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="set by parser";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (6 vars)";
      pre_compile_code_string="LocalVars (12 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["test_name"] {
	name="test_name";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["input"] {
	name="input";
	var_type=T_String;
	string_val=;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cursor_pos"] {
	name="cursor_pos";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc="position of cursor when control+l pressed";
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="test_name = this.name";
      pre_compile_code_string="test_name = this.name";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].prog_code[0].local_vars["test_name"]$$;
      expr {
       expr="this.name";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="input = \"has_function()\"";
      pre_compile_code_string="input = \"has_function()\"";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].prog_code[0].local_vars["input"]$$;
      expr {
       expr="\"has_function()\"";
      };
     };
     MethodCall @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cursor_pos = input->length()";
      pre_compile_code_string="cursor_pos = input->length()";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].prog_code[0].local_vars["cursor_pos"]$$;
      obj=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].prog_code[0].local_vars["input"]$;
      method=taString::length;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int length()";
      meth_desc=" how many characters in the string";
     };
     StaticMethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, lookup_seed, prepend_txt, append_txt, prog_el_txt, path_var, path_prepend_txt, path_rest, base_path)";
      pre_compile_code_string="lookup_type = ProgExprBase::Test_ParseForLookup(this.name, input, cursor_pos, lookup_seed, prepend_txt, append_txt, prog_el_txt, path_var, path_prepend_txt, path_rest, base_path)";
      result_var=.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].vars["lookup_type"]$$;
      object_type=ProgExprBase;
      method=ProgExprBase::Test_ParseForLookup;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString;
	type="const taString";
	name="test_name";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="this.name";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString;
	type="const taString";
	name="input_text";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input";
	};
       };
       ProgArg @[2] {
	arg_type=const_int;
	type="const int";
	name="cursor_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="cursor_pos";
	};
       };
       ProgArg @[3] {
	arg_type=taString_ref;
	type="taString&";
	name="lookup_seed";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="lookup_seed";
	};
       };
       ProgArg @[4] {
	arg_type=taString_ref;
	type="taString&";
	name="prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prepend_txt";
	};
       };
       ProgArg @[5] {
	arg_type=taString_ref;
	type="taString&";
	name="append_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="append_txt";
	};
       };
       ProgArg @[6] {
	arg_type=taString_ref;
	type="taString&";
	name="prog_el_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="prog_el_txt";
	};
       };
       ProgArg @[7] {
	arg_type=taString_ref;
	type="taString&";
	name="path_var";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_var";
	};
       };
       ProgArg @[8] {
	arg_type=taString_ref;
	type="taString&";
	name="path_prepend_txt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_prepend_txt";
	};
       };
       ProgArg @[9] {
	arg_type=taString_ref;
	type="taString&";
	name="path_rest";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="path_rest";
	};
       };
       ProgArg @[10] {
	arg_type=taString_ref;
	type="taString&";
	name="base_path";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="base_path";
	};
       };
      };
     };
     PrintVar @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      pre_compile_code_string="Print: test_name lookup_type lookup_seed prepend_txt append_txt prog_el_txt";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].prog_code[0].local_vars["test_name"]$;
      print_var2=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].vars["lookup_type"]$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].vars["lookup_seed"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].vars["prepend_txt"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].vars["append_txt"]$$;
      print_var6=.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].vars["prog_el_txt"]$$;
      debug=0;
     };
     PrintVar @[6] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print: test_name path_var path_prepend_txt path_rest base_path";
      pre_compile_code_string="Print: test_name path_var path_prepend_txt path_rest base_path";
      message=;
      print_var=$.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].prog_code[0].local_vars["test_name"]$;
      print_var2=.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].vars["path_var"]$$;
      print_var3=.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].vars["path_prepend_txt"]$$;
      print_var4=.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].vars["path_rest"]$$;
      print_var5=.projects["TestLookupParse"].programs.gp["TestPrograms"]["call_function_other_program"].vars["base_path"]$$;
      print_var6=NULL;
      debug=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp["SupportPrograms"] {
   name="SupportPrograms";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   debug_mode=0;
   Program @["has_function"] {
    name="has_function";
    short_nm="hsfnct";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["Function_2"] {
      desc=;
      flags=0;
      code_string=;
      pre_compile_code_string="Function_2() returns: int";
      name="Function_2";
      return_type=T_Int;
      object_type=taOBase;
      args {
       name="ProgVar_List_1";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       name="ProgEl_List_83";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	desc=;
	flags=0;
	code_string=;
	pre_compile_code_string="LocalVars (0 vars)";
	local_vars {
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
      };
     };
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=0;
      code_string=;
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser2"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_46";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     name="view_win_lft";
     value 8 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     name="view_win_top";
     value 8 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     name="view_win_wd";
     value 8 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     name="view_win_ht";
     value 8 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAADVwAABMgAAAAAAQAAAAcBAAAAAQE=";
     val_type_fixed=0;
    };
   };
   name="Browser2";
   m_data=.projects["TestLookupParse"]$$;
   visible=1;
   win_name=".projects[\"TestLookupParse\"] - TestLookupParse.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_47";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     name="Navigator";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["TestLookupParse"]$;
    };
    PanelViewer @["Editor"] {
     name="Editor";
     m_data=NULL;
     visible=1;
    };
    T3PanelViewer @["T3Frames"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_48";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="T3Frames";
     m_data=NULL;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["Frame1"] {
       name="Frame1";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       camera_params {
	field_of_view=45;
	near=0.1;
	focal=5;
	far=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0: y=0: z=-0.4765596: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=3.52344;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_49";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       name="view_win_lft";
       value 8 0=-0.002785515;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       name="view_win_top";
       value 8 0=0.03078677;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       name="view_win_wd";
       value 8 0=0.05710306;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       name="view_win_ht";
       value 8 0=0.8950969;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
 };
};

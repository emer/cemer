// ta_Dump File v3.0 -- code v7.8.4.0 rev8904
LeabraProject .projects["TestPointerUpdates"] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
    UserDataItem @["user_pinned"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @["ControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [1] {
    EditMbrItem @[0] { };
   };

   EditMthItem_Group @.mths = [0] {
   };
  };
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [31] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["label"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_running.last_sort_spec.ops = [0] {
   };

   DataTableCols @.jobs_done.data = [31] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["label"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_done.last_sort_spec.ops = [0] {
   };

   DataTableCols @.jobs_archive.data = [31] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["label"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_archive.last_sort_spec.ops = [0] {
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataOpList @.file_list.last_sort_spec.ops = [0] {
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   DataOpList @.cluster_info.last_sort_spec.ops = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] = [1] { 
   DataTable @["data_group_DataTable"] { 
    DataTableCols @.data = [0] {
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp["OutputData"] { 
  };
  DataTable_Group @.gp["AnalysisData"] { 
  };
 };

 Program_TopGroup @.programs = [0] {
  Program_Group @.gp["group_one"] = [5] { 
   Program @["HasDataTable"] { 
    ProgObjList @.objs = [1] {
     DataTable @["aDataTable"] { 
      DataTableCols @.data = [1] {
       String_Data @["col_one"] { 
	UserDataItem_List @*(.user_data_) {
	 UserDataItem @["view_panel_wd"] { };
	};
       };
      };

      DataOpList @.last_sort_spec.ops = [0] {
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["aDataTable"] { };
     ProgVar @["SetValue"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     MatrixAssign @[1] { };
    };
   };
   Program @["Callee"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["group_name"] { };
    };

    Function_List @.functions = [1] {
     Function @["Function_2"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [3] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       PrintExpr @[1] { };
       AssignExpr @[2] { };
      };
     };
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     FunctionCall @[1] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
    };
   };
   Program @["Caller"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["group_name"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     AssignExpr @[1] { };
     ProgramCall @[2] { 
      ProgArg_List @.prog_args = [0] {
      };
     };
     OtherProgramVar @[3] { };
    };
   };
   Program @["LoopCodeFunction"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["j"] { };
    };

    Function_List @.functions = [1] {
     Function @["addOne"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [2] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       AssignExpr @[1] { };
      };
     };
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["i"] { };
      };
     };
     AssignExpr @[1] { };
     FunctionCall @[2] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     ForLoop @[3] { 
      ProgEl_List @.loop_code = [0] {
      };
     };
     PrintVar @[4] { };
    };
   };
   Program @["LoopCodeProgram"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["j"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["i"] { };
      };
     };
     ProgramCall @[1] { 
      ProgArg_List @.prog_args = [0] {
      };
     };
     ForLoop @[2] { 
      ProgEl_List @.loop_code = [0] {
      };
     };
     PrintVar @[3] { };
    };
   };
  };
  Program_Group @.gp["group_two"] { 
  };
  Program_Group @.gp["TesterPrograms"] = [4] { 
   Program @["TestGroup"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["group_two"] { };
     ProgVar @["group_one"] { };
     ProgVar @["which_group"] { };
     ProgVar @["group_name"] { };
     ProgVar @["group_three"] { };
     ProgVar @["sub_group_three"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [8] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["myProgram"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     ElseIf @[2] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     ElseIf @[3] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     ElseIf @[4] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [1] {
       AssignExpr @[0] { };
      };
     };
     Else @[6] { 
      ProgEl_List @.else_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
       MethodCall @[2] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     PrintVar @[7] { };
    };
   };
   Program @["TestDataTableValue"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [5] {
     ProgVar @["group_two"] { };
     ProgVar @["group_one"] { };
     ProgVar @["which_group"] { };
     ProgVar @["data_table_value"] { };
     ProgVar @["data_table"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["myProgram"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     ElseIf @[2] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     If @[3] { 
      ProgEl_List @.true_code = [1] {
       AssignExpr @[0] { };
      };
     };
     Else @[4] { 
      ProgEl_List @.else_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
       PrintVar @[2] { };
      };
     };
    };
   };
   Program @["edit_datatable"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [4] {
     ProgVar @["group_two"] { };
     ProgVar @["group_one"] { };
     ProgVar @["which_group"] { };
     ProgVar @["SetValue"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["myProgram"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     ElseIf @[2] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     If @[3] { 
      ProgEl_List @.true_code = [1] {
       AssignExpr @[0] { };
      };
     };
     Else @[4] { 
      ProgEl_List @.else_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       MethodCall @[2] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
    };
   };
   Program @["TestCtrlPanel"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["ctrlPanel"] { };
     ProgVar @["ctrlPanelVar"] { };
     ProgVar @["set_val"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     CssExpr @[1] { };
     AssignExpr @[2] { };
     CssExpr @[3] { };
    };
   };
  };
  Program_Group @.gp["TesteePrograms"] = [20] { 
   Program @["copy_callee_caller"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["callee"] { };
     ProgVar @["caller"] { };
     ProgVar @["group_two"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [3] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["copy_control_var_into_proj"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["ctrlPanel"] { };
     ProgVar @["ctrlPanelElem"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     CssExpr @[1] { };
     CssExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["copy_callee_caller_into_project"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["callee"] { };
     ProgVar @["caller"] { };
     ProgVar @["group_two"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     AssignExpr @[1] { };
     CssExpr @[2] { };
     PrintVar @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["copy_callee_caller_into_subgroup"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["callee"] { };
     ProgVar @["caller"] { };
     ProgVar @["group_three_sub"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [3] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["move_callee_caller"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["callee"] { };
     ProgVar @["caller"] { };
     ProgVar @["group_two"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [3] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["move_callee_caller_into_project"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["callee"] { };
     ProgVar @["caller"] { };
     ProgVar @["group_two"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     CssExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["move_callee_caller_into_subgroup"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["callee"] { };
     ProgVar @["caller"] { };
     ProgVar @["group_three_sub"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [3] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["move_callee_caller_out_of_subgroup"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [4] {
     ProgVar @["callee"] { };
     ProgVar @["caller"] { };
     ProgVar @["group_three_sub"] { };
     ProgVar @["group_three"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["copy_hasdatatable"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["group_two"] { };
     ProgVar @["hasdatatable"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["copy_hasdatatable_into_project"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["group_two"] { };
     ProgVar @["hasdatatable"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [3] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     CssExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["move_hasdatatable"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["group_two"] { };
     ProgVar @["hasdatatable"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["move_hasdatatable_into_project"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["group_two"] { };
     ProgVar @["hasdatatable"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [3] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     CssExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["copy_function_code_into_loop"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["program_a"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["the_prog_code"] { };
       ProgVar @["call_program_element"] { };
       ProgVar @["the_loop_code"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["copy_function_code_out_of_loop"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["program_a"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["the_prog_code"] { };
       ProgVar @["call_program_element"] { };
       ProgVar @["the_loop_code"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["move_function_code_into_loop"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["program_a"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["the_prog_code"] { };
       ProgVar @["call_program_element"] { };
       ProgVar @["the_loop_code"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["move_function_code_out_of_loop"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["program_a"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["the_prog_code"] { };
       ProgVar @["call_program_element"] { };
       ProgVar @["the_loop_code"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["copy_program_code_into_loop"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["program_a"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["the_prog_code"] { };
       ProgVar @["call_program_element"] { };
       ProgVar @["the_loop_code"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["copy_program_code_out_of_loop"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["program_a"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["the_prog_code"] { };
       ProgVar @["call_program_element"] { };
       ProgVar @["the_loop_code"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["move_program_code_into_loop"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["program_a"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["the_prog_code"] { };
       ProgVar @["call_program_element"] { };
       ProgVar @["the_loop_code"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["move_program_code_out_of_loop"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["program_a"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [5] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @["the_prog_code"] { };
       ProgVar @["call_program_element"] { };
       ProgVar @["the_loop_code"] { };
      };
     };
     AssignExpr @[1] { };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
  };
  Program_Group @.gp["group_three"] = [2] { 
   Program @["Callee"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["group_name"] { };
    };

    Function_List @.functions = [1] {
     Function @["Function_2"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [3] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       PrintExpr @[1] { };
       AssignExpr @[2] { };
      };
     };
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     FunctionCall @[1] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
    };
   };
   Program @["Caller"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [0] {
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["group_name"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [0] {
      };
     };
     AssignExpr @[1] { };
     ProgramCall @[2] { 
      ProgArg_List @.prog_args = [0] {
      };
     };
     OtherProgramVar @[3] { };
    };
   };
   Program_Group @.gp["sub_group_three"] { 
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser2"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["Visualizer"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [1] {
      T3Panel @["Frame1"] { 
       T3DataView_List @.root_view.children = [0] {
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [0] {
 };
};
LeabraProject .projects["TestPointerUpdates"] {
 name="TestPointerUpdates";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 author="rohrlich";
 email="john.rohrlich@colorado.edu";
 license {
  owner="Regents of the University of Colorado";
  license=NO_LIC;
  org="CCNLab at the University of Colorado Boulder";
  year="2011";
  custom=;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_0"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_6";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ControlPanel @["ControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ControlPanel";
   running_updt=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="TestGroup_which_group";
     desc=" integer value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].vars["which_group"]$$;
     mbr=ProgVar::int_val;
     is_numeric=1;
     is_single=1;
     param_search {
      record=1;
      search=0;
      range=;
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   running_updt=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    name="jobs_running";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   jobs_done {
    name="jobs_done";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   jobs_archive {
    name="jobs_archive";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   file_list {
    name="file_list";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_name"] {
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["size"] {
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["kind"] {
      name="kind";
      desc="type of file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_modified"] {
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_created"] {
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["svn_file_path"] {
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["proj_file_path"] {
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_path"] {
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   cluster_info {
    name="cluster_info";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["state"] {
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["procs"] {
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   cluster=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=1;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 param_sets {
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["data_group_DataTable"] {
    name="data_group_DataTable";
    desc=;
    data {
     name="data";
     el_typ=DataColT;
     el_def=0;
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
  };
  DataTable_Group @.gp["OutputData"] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
  DataTable_Group @.gp["AnalysisData"] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program_Group @.gp["group_one"] {
   name="group_one";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   debug_mode=0;
   Program @["HasDataTable"] {
    name="HasDataTable";
    short_nm="HDTbl";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=DataTable;
     el_def=0;
     DataTable @["aDataTable"] {
      name="aDataTable";
      desc=;
      data {
       name="data";
       el_typ=String_Data;
       el_def=0;
       String_Data @["col_one"] {
	UserDataItem_List @*(.user_data_) {
	 name=;
	 el_typ=UserDataItem;
	 el_def=0;
	 UserDataItem @["view_panel_wd"] {
	  name="view_panel_wd";
	  value 8 0=0.09574468;
	  val_type_fixed=0;
	 };
	};
	name="col_one";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=54;
	ar {
	 name="ar";
	[1] "cat";	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
      row_indexes {
       name="row_indexes";
      [1] 0;      };
      last_sort_spec {
       name="last_sort_spec";
       ops {
	name="ops";
	el_typ=DataSortEl;
	el_def=0;
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["aDataTable"] {
      name="aDataTable";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["TestPointerUpdates"].programs.gp["group_one"]["HasDataTable"].objs["aDataTable"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["SetValue"] {
      name="SetValue";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     MatrixAssign @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="aDataTable[\"col_one\"][0] = SetValue";
      pre_compile_code_string="aDataTable[\"col_one\"][0] = SetValue";
      variable=.projects["TestPointerUpdates"].programs.gp["group_one"]["HasDataTable"].vars["aDataTable"]$$;
      data_table=1;
      col {
       expr="\"col_one\"";
      };
      dim0 {
       expr="0";
      };
      dim1 {
       expr=;
      };
      dim2 {
       expr=;
      };
      dim3 {
       expr=;
      };
      dim4 {
       expr=;
      };
      dim5 {
       expr=;
      };
      expr {
       expr="SetValue";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["Callee"] {
    name="Callee";
    short_nm="Callee";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["group_name"] {
      name="group_name";
      var_type=T_String;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["Function_2"] {
      desc=;
      flags=0;
      code_string=;
      pre_compile_code_string="Function_2() returns: int";
      name="Function_2";
      return_type=T_Int;
      object_type=taOBase;
      args {
       name="ProgVar_List_1";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       name="ProgEl_List_56";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	desc=;
	flags=0;
	code_string=;
	pre_compile_code_string="LocalVars (0 vars)";
	local_vars {
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="print";
	pre_compile_code_string="Print this.prog_gp";
	expr {
	 expr="this.prog_gp";
	};
	debug=0;
       };
       AssignExpr @[2] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_name = this.prog_gp";
	pre_compile_code_string="group_name = this.prog_gp";
	result_var=.projects["TestPointerUpdates"].programs.gp["group_one"]["Callee"].vars["group_name"]$$;
	expr {
	 expr="this.prog_gp";
	};
       };
      };
     };
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=0;
      code_string=;
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     FunctionCall @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Function_2()";
      pre_compile_code_string="Function_2()";
      result_var=NULL;
      fun=.projects["TestPointerUpdates"].programs.gp["group_one"]["Callee"].functions["Function_2"]$$;
      fun_args {
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["Caller"] {
    name="Caller";
    short_nm="Caller";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["group_name"] {
      name="group_name";
      var_type=T_String;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_name = \"\"";
      pre_compile_code_string="group_name = \"\"";
      result_var=.projects["TestPointerUpdates"].programs.gp["group_one"]["Caller"].vars["group_name"]$$;
      expr {
       expr="\"\"";
      };
     };
     ProgramCall @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Callee()";
      pre_compile_code_string="Callee()";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
      };
      target=.projects["TestPointerUpdates"].programs.gp["group_one"]["Callee"]$$;
      targ_ld_init="*Callee*";
     };
     OtherProgramVar @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Vars Fm:  program=Callee set=from  var_1=group_name  var_2=?  var_3=?  var_4=? ";
      pre_compile_code_string="Vars Fm:  program=Callee set=from  var_1=group_name  var_2=?  var_3=?  var_4=? ";
      other_prog=$.projects["TestPointerUpdates"].programs.gp["group_one"]["Callee"]$;
      set_other=0;
      var_1=$.projects["TestPointerUpdates"].programs.gp["group_one"]["Caller"].vars["group_name"]$;
      var_2=NULL;
      var_3=NULL;
      var_4=NULL;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LoopCodeFunction"] {
    name="LoopCodeFunction";
    short_nm="LCFnct";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["j"] {
      name="j";
      var_type=T_Int;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["addOne"] {
      desc=;
      flags=0;
      code_string=;
      pre_compile_code_string="addOne() returns: int";
      name="addOne";
      return_type=T_Int;
      object_type=taOBase;
      args {
       name="ProgVar_List_1";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       name="ProgEl_List_128";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	desc=;
	flags=0;
	code_string=;
	pre_compile_code_string="LocalVars (0 vars)";
	local_vars {
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       AssignExpr @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="j = j + 1";
	pre_compile_code_string="j = j + 1";
	result_var=.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeFunction"].vars["j"]$$;
	expr {
	 expr="j + 1";
	};
       };
      };
     };
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      pre_compile_code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["i"] {
	name="i";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="j = 0";
      pre_compile_code_string="j = 0";
      result_var=$.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeFunction"].vars["j"]$;
      expr {
       expr="0";
      };
     };
     FunctionCall @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="addOne()";
      pre_compile_code_string="addOne()";
      result_var=NULL;
      fun=.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeFunction"].functions["addOne"]$$;
      fun_args {
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ForLoop @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (i = 0; i < 2; i++)";
      pre_compile_code_string="for (i = 0; i < 2; i++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
      };
      init {
       expr="i = 0";
      };
      test {
       expr="i < 2";
      };
      iter {
       expr="i++";
      };
     };
     PrintVar @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print  j";
      pre_compile_code_string="Print  j";
      message=;
      print_var=$.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeFunction"].vars["j"]$;
      print_var2=NULL;
      print_var3=NULL;
      print_var4=NULL;
      print_var5=NULL;
      print_var6=NULL;
      debug=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LoopCodeProgram"] {
    name="LoopCodeProgram";
    short_nm="LCPrgr";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["j"] {
      name="j";
      var_type=T_Int;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      pre_compile_code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["i"] {
	name="i";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     ProgramCall @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Callee()";
      pre_compile_code_string="Callee()";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
      };
      target=$.projects["TestPointerUpdates"].programs.gp["group_one"]["Callee"]$;
      targ_ld_init="*Callee*";
     };
     ForLoop @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (i = 0; i < 2; i++)";
      pre_compile_code_string="for (i = 0; i < 2; i++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
      };
      init {
       expr="i = 0";
      };
      test {
       expr="i < 2";
      };
      iter {
       expr="i++";
      };
     };
     PrintVar @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print  j";
      pre_compile_code_string="Print  j";
      message=;
      print_var=.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeProgram"].vars["j"]$$;
      print_var2=NULL;
      print_var3=NULL;
      print_var4=NULL;
      print_var5=NULL;
      print_var6=NULL;
      debug=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp["group_two"] {
   name="group_two";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   debug_mode=0;
  };
  Program_Group @.gp["TesterPrograms"] {
   name="TesterPrograms";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   debug_mode=0;
   Program @["TestGroup"] {
    name="TestGroup";
    short_nm="TstGrp";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["group_two"] {
      name="group_two";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=.projects["TestPointerUpdates"].programs.gp["group_two"]$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_one"] {
      name="group_one";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=.projects["TestPointerUpdates"].programs.gp["group_one"]$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["which_group"] {
      name="which_group";
      var_type=T_Int;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_name"] {
      name="group_name";
      var_type=T_String;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_three"] {
      name="group_three";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=.projects["TestPointerUpdates"].programs.gp["group_three"]$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["sub_group_three"] {
      name="sub_group_three";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=.projects["TestPointerUpdates"].programs.gp["group_three"].gp["sub_group_three"]$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=0;
      code_string=;
      pre_compile_code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["myProgram"] {
	name="myProgram";
	var_type=T_Object;
	object_type=Program;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (which_group == 1)";
      pre_compile_code_string="if (which_group == 1)";
      cond {
       expr="which_group == 1";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_one.FindLeafName()";
	pre_compile_code_string="myProgram = group_one->FindName(\"Caller\")";
	result_var=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].prog_code[0].local_vars["myProgram"]$$;
	obj=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].vars["group_one"]$$;
	method=taGroup_Program_::FindName;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="item_nm";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="\"Caller\"";
	  };
	 };
	};
	meth_sig="Program_ptr FindName(taString& item_nm)";
	meth_desc=" Find element in top-level list with given name (nm) (NULL = not here)";
       };
      };
     };
     ElseIf @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else if (which_group == 2)";
      pre_compile_code_string="else if (which_group == 2)";
      cond {
       expr="which_group == 2";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_one.FindLeafName()";
	pre_compile_code_string="myProgram = group_two->FindName(\"Caller\")";
	result_var=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].prog_code[0].local_vars["myProgram"]$;
	obj=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].vars["group_two"]$$;
	method=taGroup_Program_::FindName;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="item_nm";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="\"Caller\"";
	  };
	 };
	};
	meth_sig="Program_ptr FindName(taString& item_nm)";
	meth_desc=" Find element in top-level list with given name (nm) (NULL = not here)";
       };
      };
     };
     ElseIf @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else if (which_group == 3)";
      pre_compile_code_string="else if (which_group == 3)";
      cond {
       expr="which_group == 3";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_one.FindLeafName()";
	pre_compile_code_string="myProgram = group_three->FindName(\"Caller\")";
	result_var=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].prog_code[0].local_vars["myProgram"]$;
	obj=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].vars["group_three"]$$;
	method=taGroup_Program_::FindName;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="item_nm";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="\"Caller\"";
	  };
	 };
	};
	meth_sig="Program_ptr FindName(taString& item_nm)";
	meth_desc=" Find element in top-level list with given name (nm) (NULL = not here)";
       };
      };
     };
     ElseIf @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else if (which_group == 3)";
      pre_compile_code_string="else if (which_group == -3)";
      cond {
       expr="which_group == -3";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_one.FindLeafName()";
	pre_compile_code_string="myProgram = sub_group_three->FindName(\"Caller\")";
	result_var=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].prog_code[0].local_vars["myProgram"]$;
	obj=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].vars["sub_group_three"]$$;
	method=taGroup_Program_::FindName;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="item_nm";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="\"Caller\"";
	  };
	 };
	};
	meth_sig="Program_ptr FindName(taString& item_nm)";
	meth_desc=" Find element in top-level list with given name (nm) (NULL = not here)";
       };
      };
     };
     If @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (myProgram == NULL)";
      pre_compile_code_string="if (myProgram == NULL)";
      cond {
       expr="myProgram == NULL";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_name = \"NONE\"";
	pre_compile_code_string="group_name = \"NONE\"";
	result_var=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].vars["group_name"]$$;
	expr {
	 expr="\"NONE\"";
	};
       };
      };
     };
     Else @[6] {
      desc=;
      flags=0;
      code_string=;
      pre_compile_code_string="else";
      else_code {
       name="else_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="myProgram->CallInit(this)";
	pre_compile_code_string="myProgram->CallInit(this)";
	result_var=NULL;
	obj=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].prog_code[0].local_vars["myProgram"]$;
	method=Program::CallInit;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Program_ptr;
	  type="Program*";
	  name="caller";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="this";
	  };
	 };
	};
	meth_sig="int CallInit(Program* caller)";
	meth_desc=" runs the program's Init from a superProg Init, 0=success";
       };
       MethodCall @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="myProgram->Call()";
	pre_compile_code_string="myProgram->Call(this)";
	result_var=NULL;
	obj=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].prog_code[0].local_vars["myProgram"]$;
	method=Program::Call;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Program_ptr;
	  type="Program*";
	  name="caller";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="this";
	  };
	 };
	};
	meth_sig="int Call(Program* caller)";
	meth_desc=" runs the program as a subprogram called from another running program, 0=success -- args are passed by setting global args variables in advance of calling";
       };
       MethodCall @[2] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="myProgram->GetVar(group_name)";
	pre_compile_code_string="group_name = myProgram->GetVar(\"group_name\")";
	result_var=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].vars["group_name"]$;
	obj=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].prog_code[0].local_vars["myProgram"]$;
	method=Program::GetVar;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="var_nm";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="\"group_name\"";
	  };
	 };
	};
	meth_sig="Variant GetVar(taString& var_nm)";
	meth_desc=" get the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
       };
      };
     };
     PrintVar @[7] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Print  group_name";
      pre_compile_code_string="Print  group_name";
      message=;
      print_var=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestGroup"].vars["group_name"]$;
      print_var2=NULL;
      print_var3=NULL;
      print_var4=NULL;
      print_var5=NULL;
      print_var6=NULL;
      debug=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["TestDataTableValue"] {
    name="TestDataTableValue";
    short_nm="TsDTbl";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["group_two"] {
      name="group_two";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_two"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_one"] {
      name="group_one";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["which_group"] {
      name="which_group";
      var_type=T_Int;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["data_table_value"] {
      name="data_table_value";
      var_type=T_String;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["data_table"] {
      name="data_table";
      var_type=T_Object;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      pre_compile_code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["myProgram"] {
	name="myProgram";
	var_type=T_Object;
	object_type=Program;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (which_group == 1)";
      pre_compile_code_string="if (which_group == 1)";
      cond {
       expr="which_group == 1";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_one.FindLeafName()";
	pre_compile_code_string="myProgram = group_one->FindLeafName(\"HasDataTable\")";
	result_var=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestDataTableValue"].prog_code[0].local_vars["myProgram"]$$;
	obj=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestDataTableValue"].vars["group_one"]$$;
	method=taGroup_Program_::FindLeafName;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="item_nm";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="\"HasDataTable\"";
	  };
	 };
	};
	meth_sig="Program_ptr FindLeafName(taString& item_nm)";
	meth_desc=" Find element anywhere in full group and subgroups with given name (item_nm)";
       };
      };
     };
     ElseIf @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else if (which_group == 2)";
      pre_compile_code_string="else if (which_group == 2)";
      cond {
       expr="which_group == 2";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_one.FindLeafName()";
	pre_compile_code_string="myProgram = group_two->FindLeafName(\"HasDataTable\")";
	result_var=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestDataTableValue"].prog_code[0].local_vars["myProgram"]$;
	obj=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestDataTableValue"].vars["group_two"]$$;
	method=taGroup_Program_::FindLeafName;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="item_nm";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="\"HasDataTable\"";
	  };
	 };
	};
	meth_sig="Program_ptr FindLeafName(taString& item_nm)";
	meth_desc=" Find element anywhere in full group and subgroups with given name (item_nm)";
       };
      };
     };
     If @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (myProgram == NULL)";
      pre_compile_code_string="if (myProgram == NULL)";
      cond {
       expr="myProgram == NULL";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_name = \"NONE\"";
	pre_compile_code_string="data_table_value = -1";
	result_var=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestDataTableValue"].vars["data_table_value"]$$;
	expr {
	 expr="-1";
	};
       };
      };
     };
     Else @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else";
      pre_compile_code_string="else";
      else_code {
       name="else_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="myProgram->GetVar(group_name)";
	pre_compile_code_string="data_table = myProgram->GetVar(\"aDataTable\")";
	result_var=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestDataTableValue"].vars["data_table"]$$;
	obj=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestDataTableValue"].prog_code[0].local_vars["myProgram"]$;
	method=Program::GetVar;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="var_nm";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="\"aDataTable\"";
	  };
	 };
	};
	meth_sig="Variant GetVar(taString& var_nm)";
	meth_desc=" get the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
       };
       AssignExpr @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="data_table_value = data_table[\"col_one\"][0]";
	pre_compile_code_string="data_table_value = data_table[\"col_one\"][0]";
	result_var=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestDataTableValue"].vars["data_table_value"]$;
	expr {
	 expr="data_table[\"col_one\"][0]";
	};
       };
       PrintVar @[2] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="print data_table_value";
	pre_compile_code_string="Print  data_table_value";
	message=;
	print_var=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestDataTableValue"].vars["data_table_value"]$;
	print_var2=NULL;
	print_var3=NULL;
	print_var4=NULL;
	print_var5=NULL;
	print_var6=NULL;
	debug=0;
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["edit_datatable"] {
    name="edit_datatable";
    short_nm="dtdttb";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["group_two"] {
      name="group_two";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_two"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_one"] {
      name="group_one";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["which_group"] {
      name="which_group";
      var_type=T_Int;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["SetValue"] {
      name="SetValue";
      var_type=T_String;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      pre_compile_code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["myProgram"] {
	name="myProgram";
	var_type=T_Object;
	object_type=Program;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (which_group == 1)";
      pre_compile_code_string="if (which_group == 1)";
      cond {
       expr="which_group == 1";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_one.FindLeafName()";
	pre_compile_code_string="myProgram = group_one->FindLeafName(\"HasDataTable\")";
	result_var=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["edit_datatable"].prog_code[0].local_vars["myProgram"]$$;
	obj=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["edit_datatable"].vars["group_one"]$$;
	method=taGroup_Program_::FindLeafName;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="item_nm";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="\"HasDataTable\"";
	  };
	 };
	};
	meth_sig="Program_ptr FindLeafName(taString& item_nm)";
	meth_desc=" Find element anywhere in full group and subgroups with given name (item_nm)";
       };
      };
     };
     ElseIf @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else if (which_group == 2)";
      pre_compile_code_string="else if (which_group == 2)";
      cond {
       expr="which_group == 2";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_one.FindLeafName()";
	pre_compile_code_string="myProgram = group_two->FindLeafName(\"HasDataTable\")";
	result_var=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["edit_datatable"].prog_code[0].local_vars["myProgram"]$;
	obj=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["edit_datatable"].vars["group_two"]$$;
	method=taGroup_Program_::FindLeafName;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="item_nm";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="\"HasDataTable\"";
	  };
	 };
	};
	meth_sig="Program_ptr FindLeafName(taString& item_nm)";
	meth_desc=" Find element anywhere in full group and subgroups with given name (item_nm)";
       };
      };
     };
     If @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (myProgram == NULL)";
      pre_compile_code_string="if (myProgram == NULL)";
      cond {
       expr="myProgram == NULL";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       AssignExpr @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_name = \"NONE\"";
	pre_compile_code_string="SetValue = \"NONE\"";
	result_var=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["edit_datatable"].vars["SetValue"]$$;
	expr {
	 expr="\"NONE\"";
	};
       };
      };
     };
     Else @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else";
      pre_compile_code_string="else";
      else_code {
       name="else_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="myProgram->CallInit(this)";
	pre_compile_code_string="myProgram->CallInit(this)";
	result_var=NULL;
	obj=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["edit_datatable"].prog_code[0].local_vars["myProgram"]$;
	method=Program::CallInit;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Program_ptr;
	  type="Program*";
	  name="caller";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="this";
	  };
	 };
	};
	meth_sig="int CallInit(Program* caller)";
	meth_desc=" runs the program's Init from a superProg Init, 0=success";
       };
       MethodCall @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="myProgram->SetVar()";
	pre_compile_code_string="myProgram->SetVar(\"SetValue\", SetValue)";
	result_var=NULL;
	obj=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["edit_datatable"].prog_code[0].local_vars["myProgram"]$;
	method=Program::SetVar;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=const_taString_ref;
	  type="taString&";
	  name="var_nm";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="\"SetValue\"";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=const_Variant_ref;
	  type="Variant&";
	  name="value";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="SetValue";
	  };
	 };
	};
	meth_sig="bool SetVar(taString& var_nm, Variant& value)";
	meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
       };
       MethodCall @[2] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="myProgram->Call()";
	pre_compile_code_string="myProgram->Call(this)";
	result_var=NULL;
	obj=$.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["edit_datatable"].prog_code[0].local_vars["myProgram"]$;
	method=Program::Call;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Program_ptr;
	  type="Program*";
	  name="caller";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="this";
	  };
	 };
	};
	meth_sig="int Call(Program* caller)";
	meth_desc=" runs the program as a subprogram called from another running program, 0=success -- args are passed by setting global args variables in advance of calling";
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["TestCtrlPanel"] {
    name="TestCtrlPanel";
    short_nm="TsCtrP";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["ctrlPanel"] {
      name="ctrlPanel";
      var_type=T_Object;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["ctrlPanelVar"] {
      name="ctrlPanelVar";
      var_type=T_Int;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["set_val"] {
      name="set_val";
      var_type=T_Int;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     CssExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ctrlPanel = tabMisc::root->ElemPath(\".ctrl_panels[\\\"ControlPanel\\\"].mbrs[\\\"TestGroup_which_group\\\"]\",NULL,true);";
      pre_compile_code_string="ctrlPanel = tabMisc::root->ElemPath(\".ctrl_panels[\\\"ControlPanel\\\"].mbrs[\\\"TestGroup_which_group\\\"]\",NULL,true);";
      expr {
       expr="ctrlPanel = tabMisc::root->ElemPath(\".ctrl_panels[\\\"ControlPanel\\\"].mbrs[\\\"TestGroup_which_group\\\"]\",NULL,true);";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ctrlPanelVar2 = ctrlPanel->base";
      pre_compile_code_string="ctrlPanelVar = ctrlPanel->base";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesterPrograms"]["TestCtrlPanel"].vars["ctrlPanelVar"]$$;
      expr {
       expr="ctrlPanel->base";
      };
     };
     CssExpr @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ctrlPanelVar2->int_val = 12345;";
      pre_compile_code_string="ctrlPanelVar->int_val = set_val;";
      expr {
       expr="ctrlPanelVar->int_val = set_val;";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp["TesteePrograms"] {
   name="TesteePrograms";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   debug_mode=0;
   Program @["copy_callee_caller"] {
    name="copy_callee_caller";
    short_nm="cpycll";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["callee"] {
      name="callee";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["Callee"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["caller"] {
      name="caller";
      var_type=T_Object;
      object_type=Program;
      object_val=.projects["TestPointerUpdates"].programs.gp["group_one"]["Caller"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_two"] {
      name="group_two";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_two"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc=;
      flags=WARNING|CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(callee, -1)";
      pre_compile_code_string="group_two->CopyChildBeforeIndex(callee, -1)";
      result_var=NULL;
      obj=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_callee_caller"].vars["group_two"]$$;
      method=taList_impl::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="callee";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
     MethodCall @[2] {
      desc=;
      flags=WARNING|CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(caller, -1)";
      pre_compile_code_string="group_two->CopyChildBeforeIndex(caller, -1)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_callee_caller"].vars["group_two"]$;
      method=taList_impl::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="caller";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["copy_control_var_into_proj"] {
    name="copy_control_var_into_proj";
    short_nm="cpycnt";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["ctrlPanel"] {
      name="ctrlPanel";
      var_type=T_Object;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["ctrlPanelElem"] {
      name="ctrlPanelElem";
      var_type=T_Object;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     CssExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ctrlPanel = tabMisc::root->ElemPath(\".ctrl_panels[\\\"ControlPanel\\\"].mbrs[\\\"TestGroup_which_group\\\"]\",NULL,true);";
      pre_compile_code_string="ctrlPanelElem = tabMisc::root->ElemPath(\".ctrl_panels[\\\"ControlPanel\\\"].mbrs[\\\"TestGroup_which_group\\\"]\",NULL,true);";
      expr {
       expr="ctrlPanelElem = tabMisc::root->ElemPath(\".ctrl_panels[\\\"ControlPanel\\\"].mbrs[\\\"TestGroup_which_group\\\"]\",NULL,true);";
      };
     };
     CssExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ctrlPanel = tabMisc::root->ElemPath(\".projects[\"TestPointerUpdates_copy_into\"].ctrl_panels[\\\"ControlPanel\\\"]\",NULL, false);";
      pre_compile_code_string="ctrlPanel = tabMisc::root->ElemPath(\".projects[\\\"TestPointerUpdates_copy_into\\\"].ctrl_panels[\\\"ControlPanel\\\"]\",NULL, false);";
      expr {
       expr="ctrlPanel = tabMisc::root->ElemPath(\".projects[\\\"TestPointerUpdates_copy_into\\\"].ctrl_panels[\\\"ControlPanel\\\"]\",NULL, false);";
      };
     };
     MethodCall @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ctrlPanel->CopyChildBeforeIndex(ctrlPanelElem,-1)";
      pre_compile_code_string="ctrlPanel->CopyChildBeforeIndex()";
      result_var=NULL;
      obj=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_control_var_into_proj"].vars["ctrlPanel"]$$;
      method=taBase::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="ctrlPanelElem";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["copy_callee_caller_into_project"] {
    name="copy_callee_caller_into_project";
    short_nm="cpycll";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["callee"] {
      name="callee";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["Callee"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["caller"] {
      name="caller";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["Caller"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_two"] {
      name="group_two";
      var_type=T_Object;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two = NULL";
      pre_compile_code_string="group_two = NULL";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_callee_caller_into_project"].vars["group_two"]$$;
      expr {
       expr="NULL";
      };
     };
     CssExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two = tabMisc::root->ElemPath(\".projects[\"TestPointerUpdates\"].programs.gp[\"group_two\"]\",NULL, false);";
      pre_compile_code_string="group_two = tabMisc::root->ElemPath(\".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"group_two\\\"]\",NULL, false);";
      expr {
       expr="group_two = tabMisc::root->ElemPath(\".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"group_two\\\"]\",NULL, false);";
      };
     };
     PrintVar @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="print group_two";
      pre_compile_code_string="Print  group_two";
      message=;
      print_var=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_callee_caller_into_project"].vars["group_two"]$;
      print_var2=NULL;
      print_var3=NULL;
      print_var4=NULL;
      print_var5=NULL;
      print_var6=NULL;
      debug=0;
     };
     MethodCall @[4] {
      desc=;
      flags=WARNING|CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(callee, -1)";
      pre_compile_code_string="group_two->CopyChildBeforeIndex(callee, -1)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_callee_caller_into_project"].vars["group_two"]$;
      method=taList_impl::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="callee";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
     MethodCall @[5] {
      desc=;
      flags=WARNING|CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(caller, -1)";
      pre_compile_code_string="group_two->CopyChildBeforeIndex(caller, -1)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_callee_caller_into_project"].vars["group_two"]$;
      method=taList_impl::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="caller";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["copy_callee_caller_into_subgroup"] {
    name="copy_callee_caller_into_subgroup";
    short_nm="cpycll";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["callee"] {
      name="callee";
      var_type=T_Object;
      object_type=Program;
      object_val=.projects["TestPointerUpdates"].programs.gp["group_three"]["Callee"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["caller"] {
      name="caller";
      var_type=T_Object;
      object_type=Program;
      object_val=.projects["TestPointerUpdates"].programs.gp["group_three"]["Caller"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_three_sub"] {
      name="group_three_sub";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_three"].gp["sub_group_three"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc=;
      flags=WARNING|CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(callee, -1)";
      pre_compile_code_string="group_three_sub->CopyChildBeforeIndex(callee, -1)";
      result_var=NULL;
      obj=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_callee_caller_into_subgroup"].vars["group_three_sub"]$$;
      method=taList_impl::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="callee";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
     MethodCall @[2] {
      desc=;
      flags=WARNING|CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(caller, -1)";
      pre_compile_code_string="group_three_sub->CopyChildBeforeIndex(caller, -1)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_callee_caller_into_subgroup"].vars["group_three_sub"]$;
      method=taList_impl::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="caller";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["move_callee_caller"] {
    name="move_callee_caller";
    short_nm="mvcllc";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["callee"] {
      name="callee";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["Callee"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["caller"] {
      name="caller";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["Caller"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_two"] {
      name="group_two";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_two"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two->Transfer(callee)";
      pre_compile_code_string="group_two->Transfer(callee)";
      result_var=NULL;
      obj=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_callee_caller"].vars["group_two"]$$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr="callee";
	expr {
	 expr="callee";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
     MethodCall @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two->Transfer(caller)";
      pre_compile_code_string="group_two->Transfer(caller)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_callee_caller"].vars["group_two"]$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr="caller";
	expr {
	 expr="caller";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["move_callee_caller_into_project"] {
    name="move_callee_caller_into_project";
    short_nm="mvcllc";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["callee"] {
      name="callee";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["Callee"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["caller"] {
      name="caller";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["Caller"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_two"] {
      name="group_two";
      var_type=T_Object;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     CssExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two = tabMisc::root->ElemPath(\".projects[\"TestPointerUpdates\"].programs.gp[\"group_two\"]\",NULL, false);";
      pre_compile_code_string="group_two = tabMisc::root->ElemPath(\".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"group_two\\\"]\",NULL, false);";
      expr {
       expr="group_two = tabMisc::root->ElemPath(\".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"group_two\\\"]\",NULL, false);";
      };
     };
     MethodCall @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two->Transfer(callee)";
      pre_compile_code_string="group_two->Transfer(callee)";
      result_var=NULL;
      obj=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_callee_caller_into_project"].vars["group_two"]$$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="callee";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
     MethodCall @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two->Transfer(caller)";
      pre_compile_code_string="group_two->Transfer(caller)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_callee_caller_into_project"].vars["group_two"]$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="caller";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["move_callee_caller_into_subgroup"] {
    name="move_callee_caller_into_subgroup";
    short_nm="mvcllc";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["callee"] {
      name="callee";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_three"]["Callee"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["caller"] {
      name="caller";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_three"]["Caller"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_three_sub"] {
      name="group_three_sub";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_three"].gp["sub_group_three"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc=;
      flags=WARNING|CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(callee, -1)";
      pre_compile_code_string="group_three_sub->Transfer(callee)";
      result_var=NULL;
      obj=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_callee_caller_into_subgroup"].vars["group_three_sub"]$$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr="callee";
	expr {
	 expr="callee";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
     MethodCall @[2] {
      desc=;
      flags=WARNING|CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(caller, -1)";
      pre_compile_code_string="group_three_sub->Transfer(caller)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_callee_caller_into_subgroup"].vars["group_three_sub"]$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr="caller";
	expr {
	 expr="caller";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["move_callee_caller_out_of_subgroup"] {
    name="move_callee_caller_out_of_subgroup";
    short_nm="mvcllc";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["callee"] {
      name="callee";
      var_type=T_Object;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["caller"] {
      name="caller";
      var_type=T_Object;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_three_sub"] {
      name="group_three_sub";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_three"].gp["sub_group_three"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["group_three"] {
      name="group_three";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_three"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_one.FindLeafName()";
      pre_compile_code_string="caller = group_three_sub->FindLeafName(\"Caller\")";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_callee_caller_out_of_subgroup"].vars["caller"]$$;
      obj=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_callee_caller_out_of_subgroup"].vars["group_three_sub"]$$;
      method=taGroup_Program_::FindLeafName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="item_nm";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\"Caller\"";
	};
       };
      };
      meth_sig="Program_ptr FindLeafName(taString& item_nm)";
      meth_desc=" Find element anywhere in full group and subgroups with given name (item_nm)";
     };
     MethodCall @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_one.FindLeafName()";
      pre_compile_code_string="callee = group_three_sub->FindLeafName(\"Callee\")";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_callee_caller_out_of_subgroup"].vars["callee"]$$;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_callee_caller_out_of_subgroup"].vars["group_three_sub"]$;
      method=taGroup_Program_::FindLeafName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="item_nm";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\"Callee\"";
	};
       };
      };
      meth_sig="Program_ptr FindLeafName(taString& item_nm)";
      meth_desc=" Find element anywhere in full group and subgroups with given name (item_nm)";
     };
     MethodCall @[3] {
      desc=;
      flags=WARNING|CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(callee, -1)";
      pre_compile_code_string="group_three->Transfer(callee)";
      result_var=NULL;
      obj=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_callee_caller_out_of_subgroup"].vars["group_three"]$$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="callee";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
     MethodCall @[4] {
      desc=;
      flags=WARNING|CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(caller, -1)";
      pre_compile_code_string="group_three->Transfer(caller)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_callee_caller_out_of_subgroup"].vars["group_three"]$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="caller";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["copy_hasdatatable"] {
    name="copy_hasdatatable";
    short_nm="cpyhsd";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["group_two"] {
      name="group_two";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_two"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["hasdatatable"] {
      name="hasdatatable";
      var_type=T_Object;
      object_type=Program;
      object_val=.projects["TestPointerUpdates"].programs.gp["group_one"]["HasDataTable"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(hasdatatable, -1)";
      pre_compile_code_string="group_two->CopyChildBeforeIndex(hasdatatable, -1)";
      result_var=NULL;
      obj=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_hasdatatable"].vars["group_two"]$$;
      method=taList_impl::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="hasdatatable";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["copy_hasdatatable_into_project"] {
    name="copy_hasdatatable_into_project";
    short_nm="cpyhsd";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["group_two"] {
      name="group_two";
      var_type=T_Object;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["hasdatatable"] {
      name="hasdatatable";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["HasDataTable"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     CssExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two = tabMisc::root->ElemPath(\".projects[\"TestPointerUpdates\"].programs.gp[\"group_two\"]\",NULL, false);";
      pre_compile_code_string="group_two = tabMisc::root->ElemPath(\".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"group_two\\\"]\",NULL, false);";
      expr {
       expr="group_two = tabMisc::root->ElemPath(\".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"group_two\\\"]\",NULL, false);";
      };
     };
     MethodCall @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(hasdatatable, -1)";
      pre_compile_code_string="group_two->CopyChildBeforeIndex(hasdatatable, -1)";
      result_var=NULL;
      obj=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_hasdatatable_into_project"].vars["group_two"]$$;
      method=taList_impl::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="hasdatatable";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["move_hasdatatable"] {
    name="move_hasdatatable";
    short_nm="mvhsdt";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["group_two"] {
      name="group_two";
      var_type=T_Object;
      object_type=Program_Group;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_two"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["hasdatatable"] {
      name="hasdatatable";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["HasDataTable"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(hasdatatable, -1)";
      pre_compile_code_string="group_two->Transfer(hasdatatable)";
      result_var=NULL;
      obj=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_hasdatatable"].vars["group_two"]$$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr="hasdatatable";
	expr {
	 expr="hasdatatable";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["move_hasdatatable_into_project"] {
    name="move_hasdatatable_into_project";
    short_nm="mvhsdn";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["group_two"] {
      name="group_two";
      var_type=T_Object;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["hasdatatable"] {
      name="hasdatatable";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["HasDataTable"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     CssExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two = tabMisc::root->ElemPath(\".projects[\"TestPointerUpdates\"].programs.gp[\"group_two\"]\",NULL, false);";
      pre_compile_code_string="group_two = tabMisc::root->ElemPath(\".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"group_two\\\"]\",NULL, false);";
      expr {
       expr="group_two = tabMisc::root->ElemPath(\".projects[\\\"TestPointerUpdates_copy_into\\\"].programs.gp[\\\"group_two\\\"]\",NULL, false);";
      };
     };
     MethodCall @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_two->CopyChildBeforeIndex(hasdatatable, -1)";
      pre_compile_code_string="group_two->Transfer(hasdatatable)";
      result_var=NULL;
      obj=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_hasdatatable_into_project"].vars["group_two"]$$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="hasdatatable";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["copy_function_code_into_loop"] {
    name="copy_function_code_into_loop";
    short_nm="cpyfnc";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["program_a"] {
      name="program_a";
      var_type=T_Object;
      object_type=Program;
      object_val=.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeFunction"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (3 vars)";
      pre_compile_code_string="LocalVars (3 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["the_prog_code"] {
	name="the_prog_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["call_program_element"] {
	name="call_program_element";
	var_type=T_Object;
	object_type=taOBase;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["the_loop_code"] {
	name="the_loop_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_prog_code = program_a.prog_code";
      pre_compile_code_string="the_prog_code = program_a.prog_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_function_code_into_loop"].prog_code[0].local_vars["the_prog_code"]$$;
      expr {
       expr="program_a.prog_code";
      };
     };
     AssignExpr @[2] {
      desc="// target reference should not be updated if copy within program";
      flags=CAN_REVERT_TO_CODE;
      code_string="call_program_element = the_prog_code[1]";
      pre_compile_code_string="call_program_element = the_prog_code[2]";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_function_code_into_loop"].prog_code[0].local_vars["call_program_element"]$$;
      expr {
       expr="the_prog_code[2]";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_loop_code = the_prog_code[2].loop_code";
      pre_compile_code_string="the_loop_code = the_prog_code[3].loop_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_function_code_into_loop"].prog_code[0].local_vars["the_loop_code"]$$;
      expr {
       expr="the_prog_code[3].loop_code";
      };
     };
     MethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_loop_code->CopyChildBeforeIndex(call_program_element, -1)";
      pre_compile_code_string="the_loop_code->CopyChildBeforeIndex(call_program_element, -1)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_function_code_into_loop"].prog_code[0].local_vars["the_loop_code"]$;
      method=taBase::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr="the_code";
	expr {
	 expr="call_program_element";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["copy_function_code_out_of_loop"] {
    name="copy_function_code_out_of_loop";
    short_nm="cpyfnc";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["program_a"] {
      name="program_a";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeFunction"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (3 vars)";
      pre_compile_code_string="LocalVars (3 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["the_prog_code"] {
	name="the_prog_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["call_program_element"] {
	name="call_program_element";
	var_type=T_Object;
	object_type=taOBase;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["the_loop_code"] {
	name="the_loop_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_prog_code = program_a.prog_code";
      pre_compile_code_string="the_prog_code = program_a.prog_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_function_code_out_of_loop"].prog_code[0].local_vars["the_prog_code"]$$;
      expr {
       expr="program_a.prog_code";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_loop_code = the_prog_code[2].loop_code";
      pre_compile_code_string="the_loop_code = the_prog_code[3].loop_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_function_code_out_of_loop"].prog_code[0].local_vars["the_loop_code"]$$;
      expr {
       expr="the_prog_code[3].loop_code";
      };
     };
     AssignExpr @[3] {
      desc="// target reference should not be updated if copy within program";
      flags=CAN_REVERT_TO_CODE;
      code_string="call_program_element = the_prog_code[1]";
      pre_compile_code_string="call_program_element = the_loop_code[0]";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_function_code_out_of_loop"].prog_code[0].local_vars["call_program_element"]$$;
      expr {
       expr="the_loop_code[0]";
      };
     };
     MethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_loop_code->CopyChildBeforeIndex(call_program_element, -1)";
      pre_compile_code_string="the_prog_code->CopyChildBeforeIndex(call_program_element, -1)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_function_code_out_of_loop"].prog_code[0].local_vars["the_prog_code"]$;
      method=taList_impl::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="call_program_element";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["move_function_code_into_loop"] {
    name="move_function_code_into_loop";
    short_nm="mvfncc";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["program_a"] {
      name="program_a";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeFunction"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (3 vars)";
      pre_compile_code_string="LocalVars (3 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["the_prog_code"] {
	name="the_prog_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["call_program_element"] {
	name="call_program_element";
	var_type=T_Object;
	object_type=taOBase;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["the_loop_code"] {
	name="the_loop_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_prog_code = program_a.prog_code";
      pre_compile_code_string="the_prog_code = program_a.prog_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_function_code_into_loop"].prog_code[0].local_vars["the_prog_code"]$$;
      expr {
       expr="program_a.prog_code";
      };
     };
     AssignExpr @[2] {
      desc="// target reference should not be updated if copy within program";
      flags=CAN_REVERT_TO_CODE;
      code_string="call_program_element = the_prog_code[1]";
      pre_compile_code_string="call_program_element = the_prog_code[2]";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_function_code_into_loop"].prog_code[0].local_vars["call_program_element"]$$;
      expr {
       expr="the_prog_code[2]";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_loop_code = the_prog_code[2].loop_code";
      pre_compile_code_string="the_loop_code = the_prog_code[3].loop_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_function_code_into_loop"].prog_code[0].local_vars["the_loop_code"]$$;
      expr {
       expr="the_prog_code[3].loop_code";
      };
     };
     MethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_loop_code->Transfer(call_program_element)";
      pre_compile_code_string="the_loop_code->Transfer(call_program_element)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_function_code_into_loop"].prog_code[0].local_vars["the_loop_code"]$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="call_program_element";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["move_function_code_out_of_loop"] {
    name="move_function_code_out_of_loop";
    short_nm="mvfncc";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["program_a"] {
      name="program_a";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeFunction"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (3 vars)";
      pre_compile_code_string="LocalVars (3 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["the_prog_code"] {
	name="the_prog_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["call_program_element"] {
	name="call_program_element";
	var_type=T_Object;
	object_type=taOBase;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["the_loop_code"] {
	name="the_loop_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_prog_code = program_a.prog_code";
      pre_compile_code_string="the_prog_code = program_a.prog_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_function_code_out_of_loop"].prog_code[0].local_vars["the_prog_code"]$$;
      expr {
       expr="program_a.prog_code";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_loop_code = the_prog_code[2].loop_code";
      pre_compile_code_string="the_loop_code = the_prog_code[2].loop_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_function_code_out_of_loop"].prog_code[0].local_vars["the_loop_code"]$$;
      expr {
       expr="the_prog_code[2].loop_code";
      };
     };
     AssignExpr @[3] {
      desc="// target reference should not be updated if copy within program";
      flags=CAN_REVERT_TO_CODE;
      code_string="call_program_element = the_prog_code[1]";
      pre_compile_code_string="call_program_element = the_loop_code[0]";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_function_code_out_of_loop"].prog_code[0].local_vars["call_program_element"]$$;
      expr {
       expr="the_loop_code[0]";
      };
     };
     MethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_loop_code->Transfer(call_program_element)";
      pre_compile_code_string="the_prog_code->Transfer(call_program_element)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_function_code_out_of_loop"].prog_code[0].local_vars["the_prog_code"]$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="call_program_element";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["copy_program_code_into_loop"] {
    name="copy_program_code_into_loop";
    short_nm="cpyprg";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["program_a"] {
      name="program_a";
      var_type=T_Object;
      object_type=Program;
      object_val=.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeProgram"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (3 vars)";
      pre_compile_code_string="LocalVars (3 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["the_prog_code"] {
	name="the_prog_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["call_program_element"] {
	name="call_program_element";
	var_type=T_Object;
	object_type=taOBase;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["the_loop_code"] {
	name="the_loop_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_prog_code = program_a.prog_code";
      pre_compile_code_string="the_prog_code = program_a.prog_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_program_code_into_loop"].prog_code[0].local_vars["the_prog_code"]$$;
      expr {
       expr="program_a.prog_code";
      };
     };
     AssignExpr @[2] {
      desc="// target reference should not be updated if copy within program";
      flags=CAN_REVERT_TO_CODE;
      code_string="call_program_element = the_prog_code[2]";
      pre_compile_code_string="call_program_element = the_prog_code[1]";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_program_code_into_loop"].prog_code[0].local_vars["call_program_element"]$$;
      expr {
       expr="the_prog_code[1]";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=PROG_ERROR|CAN_REVERT_TO_CODE;
      code_string="the_loop_code = the_prog_code[3].loop_code";
      pre_compile_code_string="the_loop_code = the_prog_code[2].loop_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_program_code_into_loop"].prog_code[0].local_vars["the_loop_code"]$$;
      expr {
       expr="the_prog_code[2].loop_code";
      };
     };
     MethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_loop_code->CopyChildBeforeIndex(call_program_element, -1)";
      pre_compile_code_string="the_loop_code->CopyChildBeforeIndex(call_program_element, -1)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_program_code_into_loop"].prog_code[0].local_vars["the_loop_code"]$;
      method=taBase::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="call_program_element";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["copy_program_code_out_of_loop"] {
    name="copy_program_code_out_of_loop";
    short_nm="cpyprg";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["program_a"] {
      name="program_a";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeProgram"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (3 vars)";
      pre_compile_code_string="LocalVars (3 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["the_prog_code"] {
	name="the_prog_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["call_program_element"] {
	name="call_program_element";
	var_type=T_Object;
	object_type=taOBase;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["the_loop_code"] {
	name="the_loop_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_prog_code = program_a.prog_code";
      pre_compile_code_string="the_prog_code = program_a.prog_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_program_code_out_of_loop"].prog_code[0].local_vars["the_prog_code"]$$;
      expr {
       expr="program_a.prog_code";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=PROG_ERROR|CAN_REVERT_TO_CODE;
      code_string="the_loop_code = the_prog_code[3].loop_code";
      pre_compile_code_string="the_loop_code = the_prog_code[2].loop_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_program_code_out_of_loop"].prog_code[0].local_vars["the_loop_code"]$$;
      expr {
       expr="the_prog_code[2].loop_code";
      };
     };
     AssignExpr @[3] {
      desc="// target reference should not be updated if copy within program";
      flags=CAN_REVERT_TO_CODE;
      code_string="call_program_element = the_prog_code[2]";
      pre_compile_code_string="call_program_element = the_loop_code[0]";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_program_code_out_of_loop"].prog_code[0].local_vars["call_program_element"]$$;
      expr {
       expr="the_loop_code[0]";
      };
     };
     MethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_loop_code->CopyChildBeforeIndex(call_program_element, -1)";
      pre_compile_code_string="the_prog_code->CopyChildBeforeIndex(call_program_element, -1)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["copy_program_code_out_of_loop"].prog_code[0].local_vars["the_prog_code"]$;
      method=taList_impl::CopyChildBeforeIndex;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="src";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="call_program_element";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="child_pos";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
      };
      meth_sig="taBase_ptr CopyChildBeforeIndex(taBase* src, int child_pos)";
      meth_desc=" implemented by container (list) objects: make a copy of the src object and insert it at the position of the child_pos object within this list -- copies the name of the object too";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["move_program_code_into_loop"] {
    name="move_program_code_into_loop";
    short_nm="mvprgc";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["program_a"] {
      name="program_a";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeProgram"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (3 vars)";
      pre_compile_code_string="LocalVars (3 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["the_prog_code"] {
	name="the_prog_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["call_program_element"] {
	name="call_program_element";
	var_type=T_Object;
	object_type=taOBase;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["the_loop_code"] {
	name="the_loop_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_prog_code = program_a.prog_code";
      pre_compile_code_string="the_prog_code = program_a.prog_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_program_code_into_loop"].prog_code[0].local_vars["the_prog_code"]$$;
      expr {
       expr="program_a.prog_code";
      };
     };
     AssignExpr @[2] {
      desc="// target reference should not be updated if copy within program";
      flags=CAN_REVERT_TO_CODE;
      code_string="call_program_element = the_prog_code[2]";
      pre_compile_code_string="call_program_element = the_prog_code[1]";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_program_code_into_loop"].prog_code[0].local_vars["call_program_element"]$$;
      expr {
       expr="the_prog_code[1]";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=PROG_ERROR|CAN_REVERT_TO_CODE;
      code_string="the_loop_code = the_prog_code[3].loop_code";
      pre_compile_code_string="the_loop_code = the_prog_code[2].loop_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_program_code_into_loop"].prog_code[0].local_vars["the_loop_code"]$$;
      expr {
       expr="the_prog_code[2].loop_code";
      };
     };
     MethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_loop_code->Transfer(call_program_element)";
      pre_compile_code_string="the_loop_code->Transfer(call_program_element)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_program_code_into_loop"].prog_code[0].local_vars["the_loop_code"]$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="call_program_element";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["move_program_code_out_of_loop"] {
    name="move_program_code_out_of_loop";
    short_nm="mvprgc";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["program_a"] {
      name="program_a";
      var_type=T_Object;
      object_type=Program;
      object_val=$.projects["TestPointerUpdates"].programs.gp["group_one"]["LoopCodeProgram"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (3 vars)";
      pre_compile_code_string="LocalVars (3 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["the_prog_code"] {
	name="the_prog_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["call_program_element"] {
	name="call_program_element";
	var_type=T_Object;
	object_type=taOBase;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["the_loop_code"] {
	name="the_loop_code";
	var_type=T_Object;
	object_type=ProgEl_List;
	object_val=NULL;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_prog_code = program_a.prog_code";
      pre_compile_code_string="the_prog_code = program_a.prog_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_program_code_out_of_loop"].prog_code[0].local_vars["the_prog_code"]$$;
      expr {
       expr="program_a.prog_code";
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=PROG_ERROR|CAN_REVERT_TO_CODE;
      code_string="the_loop_code = the_prog_code[3].loop_code";
      pre_compile_code_string="the_loop_code = the_prog_code[1].loop_code";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_program_code_out_of_loop"].prog_code[0].local_vars["the_loop_code"]$$;
      expr {
       expr="the_prog_code[1].loop_code";
      };
     };
     AssignExpr @[3] {
      desc="// target reference should not be updated if copy within program";
      flags=CAN_REVERT_TO_CODE;
      code_string="call_program_element = the_prog_code[2]";
      pre_compile_code_string="call_program_element = the_loop_code[0]";
      result_var=.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_program_code_out_of_loop"].prog_code[0].local_vars["call_program_element"]$$;
      expr {
       expr="the_loop_code[0]";
      };
     };
     MethodCall @[4] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="the_loop_code->Transfer(call_program_element)";
      pre_compile_code_string="the_prog_code->Transfer(call_program_element)";
      result_var=NULL;
      obj=$.projects["TestPointerUpdates"].programs.gp["TesteePrograms"]["move_program_code_out_of_loop"].prog_code[0].local_vars["the_prog_code"]$;
      method=taList_impl::Transfer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=taBase_ptr;
	type="taBase*";
	name="item";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="call_program_element";
	};
       };
      };
      meth_sig="bool Transfer(taBase* item)";
      meth_desc=;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp["group_three"] {
   name="group_three";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   debug_mode=0;
   Program @["Callee"] {
    name="Callee";
    short_nm="Callee";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["group_name"] {
      name="group_name";
      var_type=T_String;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["Function_2"] {
      desc=;
      flags=0;
      code_string=;
      pre_compile_code_string="Function_2() returns: int";
      name="Function_2";
      return_type=T_Int;
      object_type=taOBase;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	desc=;
	flags=0;
	code_string=;
	pre_compile_code_string="LocalVars (0 vars)";
	local_vars {
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="print";
	pre_compile_code_string="Print this.prog_gp";
	expr {
	 expr="this.prog_gp";
	};
	debug=0;
       };
       AssignExpr @[2] {
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="group_name = this.prog_gp";
	pre_compile_code_string="group_name = this.prog_gp";
	result_var=.projects["TestPointerUpdates"].programs.gp["group_three"]["Callee"].vars["group_name"]$$;
	expr {
	 expr="this.prog_gp";
	};
       };
      };
     };
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=0;
      code_string=;
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     FunctionCall @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Function_2()";
      pre_compile_code_string="Function_2()";
      result_var=NULL;
      fun=.projects["TestPointerUpdates"].programs.gp["group_three"]["Callee"].functions["Function_2"]$$;
      fun_args {
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["Caller"] {
    name="Caller";
    short_nm="Caller";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["group_name"] {
      name="group_name";
      var_type=T_String;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (0 vars)";
      pre_compile_code_string="LocalVars (0 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="group_name = \"\"";
      pre_compile_code_string="group_name = \"\"";
      result_var=.projects["TestPointerUpdates"].programs.gp["group_three"]["Caller"].vars["group_name"]$$;
      expr {
       expr="\"\"";
      };
     };
     ProgramCall @[2] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Callee()";
      pre_compile_code_string="Callee()";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
      };
      target=$.projects["TestPointerUpdates"].programs.gp["group_three"]["Callee"]$;
      targ_ld_init="*Callee*";
     };
     OtherProgramVar @[3] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Vars Fm:  program=Callee set=from  var_1=group_name  var_2=?  var_3=?  var_4=? ";
      pre_compile_code_string="Vars Fm:  program=Callee set=from  var_1=group_name  var_2=?  var_3=?  var_4=? ";
      other_prog=$.projects["TestPointerUpdates"].programs.gp["group_three"]["Callee"]$;
      set_other=0;
      var_1=$.projects["TestPointerUpdates"].programs.gp["group_three"]["Caller"].vars["group_name"]$;
      var_2=NULL;
      var_3=NULL;
      var_4=NULL;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program_Group @.gp["sub_group_three"] {
    name="sub_group_three";
    el_typ=Program;
    el_def=0;
    tags=;
    desc=;
    debug_mode=0;
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser2"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_46";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     name="view_win_lft";
     value 8 0=-0.002785515;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     name="view_win_top";
     value 8 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     name="view_win_wd";
     value 8 0=1.002786;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     name="view_win_ht";
     value 8 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAABOQAABFUAAAAAAQAAAAcBAAAAAQE=";
     val_type_fixed=0;
    };
   };
   name="Browser2";
   m_data=.projects["TestPointerUpdates"]$$;
   visible=1;
   win_name=".projects[\"TestPointerUpdates\"] - TestPointerUpdates.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_47";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     name="Navigator";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["TestPointerUpdates"]$;
    };
    PanelViewer @["Editor"] {
     name="Editor";
     m_data=NULL;
     visible=1;
    };
    T3PanelViewer @["Visualizer"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_48";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Visualizer";
     m_data=NULL;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["Frame1"] {
       name="Frame1";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       camera_params {
	field_of_view=45;
	near=0.1;
	focal=5;
	far=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0: y=0: z=-0.4765596: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=3.52344;
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_49";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       name="view_win_lft";
       value 8 0=-0.002785515;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       name="view_win_top";
       value 8 0=0.05555556;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       name="view_win_wd";
       value 8 0=0.05710306;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       name="view_win_ht";
       value 8 0=0.9222222;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
 };
};

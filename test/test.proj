// ta_Dump File v3.0 -- code v7.8.1.0 rev8433
LeabraProject .projects["test"] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
    UserDataItem @["user_pinned"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @["ControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [3] {
    EditMbrItem @[0] { };
    EditMbrItem @[1] { };
    EditMbrItem @[2] { };
   };

   EditMthItem_Group @.mths = [4] {
    EditMthItem @[0] { };
    EditMthItem @[1] { };
    EditMthItem @[2] { };
    EditMthItem @[3] { };
   };
  };
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [30] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_running.last_sort_spec.ops = [0] {
   };

   DataTableCols @.jobs_done.data = [30] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_done.last_sort_spec.ops = [0] {
   };

   DataTableCols @.jobs_archive.data = [30] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
   };

   DataOpList @.jobs_archive.last_sort_spec.ops = [0] {
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataOpList @.file_list.last_sort_spec.ops = [0] {
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   DataOpList @.cluster_info.last_sort_spec.ops = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] = [1] { 
   DataTable @["StdInputData"] { 
    DataTableCols @.data = [3] {
     String_Data @["Name"] { };
     float_Data @["Input"] { };
     float_Data @["Output"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp["OutputData"] = [4] { 
   DataTable @["TrialOutputData"] { 
    DataTableCols @.data = [29] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     String_Data @["train_mode"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["group"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["trial"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["tick"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["time"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     String_Data @["trial_name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     String_Data @["group_name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     String_Data @["output_name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["rt_cycles"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["sse"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["norm_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["cos_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["ext_rew"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_sse"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_norm_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_cos_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Hidden_lay_net_sd"] { };
     float_Data @["Output_lay_net_sd"] { };
     float_Data @["net_cos_diff"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["net_trial_cos_diff"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["net_avg_act_diff"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Hidden_cos_diff"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_cos_diff"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Hidden_trial_cos_diff"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_trial_cos_diff"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Hidden_avg_act_diff"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_avg_act_diff"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @["EpochOutputData"] { 
    DataTableCols @.data = [40] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_sse"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["cnt_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["pct_cor"] { };
     float_Data @["pct_err"] { };
     float_Data @["avg_norm_err"] { };
     float_Data @["avg_cos_err"] { };
     float_Data @["avg_ext_rew"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_cycles"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["epoch_time_tot"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["epoch_time_usr"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_avg_sse"] { };
     float_Data @["Output_lay_cnt_err"] { };
     float_Data @["Output_lay_pct_cor"] { };
     float_Data @["Output_lay_pct_err"] { };
     float_Data @["Output_lay_avg_norm_err"] { };
     float_Data @["Output_lay_avg_cos_err"] { };
     float_Data @["net_avg_cos_diff"] { };
     float_Data @["net_avg_trial_cos_diff"] { };
     float_Data @["net_avg_avg_act_diff"] { };
     float_Data @["Hidden_avg_cos_diff"] { };
     float_Data @["Output_avg_cos_diff"] { };
     float_Data @["Hidden_avg_trial_cos_diff"] { };
     float_Data @["Output_avg_trial_cos_diff"] { };
     float_Data @["Hidden_avg_avg_act_diff"] { };
     float_Data @["Output_avg_avg_act_diff"] { };
     float_Data @["Hidden_avg_net_sd"] { };
     float_Data @["Output_avg_net_sd"] { };
     float_Data @["Hidden_hog_pct"] { };
     float_Data @["Output_hog_pct"] { };
     float_Data @["Hidden_dead_pct"] { };
     float_Data @["Output_dead_pct"] { };
     float_Data @["Hidden_netmax"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_netmax"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Hidden_avg_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_avg_act"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Hidden_Fm_Input_netrel"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Hidden_Fm_Output_netrel"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_Fm_Hidden_netrel"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @["TestTrialOutputData"] { 
    DataTableCols @.data = [20] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     String_Data @["train_mode"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["group"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["trial"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["tick"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["time"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     String_Data @["trial_name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     String_Data @["group_name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     String_Data @["output_name"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["rt_cycles"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["sse"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["norm_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["cos_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["ext_rew"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_sse"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_norm_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_cos_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Hidden_lay_net_sd"] { };
     float_Data @["Output_lay_net_sd"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @["TestEpochOutputData"] { 
    DataTableCols @.data = [20] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_sse"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["cnt_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["pct_cor"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["pct_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_norm_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_cos_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_ext_rew"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["avg_cycles"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["epoch_time_tot"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["epoch_time_usr"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_avg_sse"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_cnt_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_pct_cor"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_pct_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_avg_norm_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Output_lay_avg_cos_err"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["view_panel_wd"] { };
      };
     };
     float_Data @["Hidden_avg_net_sd"] { };
     float_Data @["Output_avg_net_sd"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] { 
  };
 };

 Program_TopGroup @.programs = [1] {
  Program @["LeabraStartup"] { 
   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [2] {
    ProgVar @["network"] { };
    ProgVar @["input_data"] { };
   };

   ProgVar_List @.vars = [14] {
    ProgVar @["train"] { };
    ProgVar @["batch"] { };
    ProgVar @["batches"] { };
    ProgVar @["epochs"] { };
    ProgVar @["param_set"] { };
    ProgVar @["tag"] { };
    ProgVar @["batch_str"] { };
    ProgVar @["log_dir"] { };
    ProgVar @["log_file_nm"] { };
    ProgVar @["batch_start"] { };
    ProgVar @["EpochOutputData"] { };
    ProgVar @["TrialOutputData"] { };
    ProgVar @["MyClusterRun"] { };
    ProgVar @["param_sets"] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [32] {
    IfReturn @[0] { };
    RegisterArgs @[1] { };
    PrintExpr @[2] { };
    Comment @[3] { };
    ProgVarFmArg @[4] { };
    ProgVarFmArg @[5] { };
    ProgVarFmArg @[6] { };
    ProgVarFmArg @[7] { };
    ProgVarFmArg @[8] { };
    ProgVarFmArg @[9] { };
    ProgVarFmArg @[10] { };
    ProgVarFmArg @[11] { };
    ProgVarFmArg @[12] { };
    ProgVarFmArg @[13] { };
    ControlPanelsFmArgs @[14] { };
    If @[15] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    Comment @[16] { };
    Comment @[17] { };
    If @[18] { 
     ProgEl_List @.true_code = [5] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      ProgVarFmArg @[1] { };
      MiscCall @[2] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      VarIncr @[3] { };
      If @[4] { 
       ProgEl_List @.true_code = [2] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [4] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	  ProgArg @[3] { };
	 };
	};
	MiscCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
    Else @[19] { 
     ProgEl_List @.else_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    MiscCall @[20] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    Comment @[21] { };
    MethodCall @[22] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[23] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintVar @[24] { };
    Comment @[25] { };
    MethodCall @[26] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[27] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintVar @[28] { };
    OtherProgramVar @[29] { };
    PrintExpr @[30] { };
    ProgramCall @[31] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program_Group @.gp["LeabraAll_Std"] = [10] { 
   Program @["LeabraBatch"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["batch"] { };
     ProgVar @["init_batch"] { };
     ProgVar @["max_batch"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [3] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       NetCounterInit @[0] { };
      };
     };
     Else @[1] { 
      ProgEl_List @.else_code = [1] {
       MemberAssign @[0] { };
      };
     };
     WhileLoop @[2] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @["LeabraTrain"] { 
    ProgObjList @.objs = [2] {
     RndSeed_List @["rnd_seeds"] { 
      taList @.seeds = [25] {
       RndSeed @["RndSeed_1"] { };
       RndSeed @["RndSeed_2"] { };
       RndSeed @["RndSeed_3"] { };
       RndSeed @["RndSeed_4"] { };
       RndSeed @["RndSeed_5"] { };
       RndSeed @["RndSeed_6"] { };
       RndSeed @["RndSeed_7"] { };
       RndSeed @["RndSeed_8"] { };
       RndSeed @["RndSeed_9"] { };
       RndSeed @["RndSeed_10"] { };
       RndSeed @["RndSeed_11"] { };
       RndSeed @["RndSeed_12"] { };
       RndSeed @["RndSeed_13"] { };
       RndSeed @["RndSeed_14"] { };
       RndSeed @["RndSeed_15"] { };
       RndSeed @["RndSeed_16"] { };
       RndSeed @["RndSeed_17"] { };
       RndSeed @["RndSeed_18"] { };
       RndSeed @["RndSeed_19"] { };
       RndSeed @["RndSeed_20"] { };
       RndSeed @["RndSeed_21"] { };
       RndSeed @["RndSeed_22"] { };
       RndSeed @["RndSeed_23"] { };
       RndSeed @["RndSeed_24"] { };
       RndSeed @["RndSeed_25"] { };
      };
     };
     RndSeed @["rnd_seed"] { };
    };

    ProgType_List @.types = [1] {
     DynEnumType @["RndInitType"] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @["OLD_SEED"] { };
       DynEnumItem @["NEW_SEED"] { };
       DynEnumItem @["BATCH_SEEDS"] { };
      };
     };
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["no_prompts"] { };
    };

    ProgVar_List @.vars = [12] {
     ProgVar @["max_epoch"] { };
     ProgVar @["epoch"] { };
     ProgVar @["train_mode"] { };
     ProgVar @["rnd_init"] { };
     ProgVar @["err_stopcrit"] { };
     ProgVar @["n_under_thr"] { };
     ProgVar @["save_final_wts"] { };
     ProgVar @["save_wts_interval"] { };
     ProgVar @["n_under_cnt"] { };
     ProgVar @["rnd_seeds"] { };
     ProgVar @["train_timer"] { };
     ProgVar @["rnd_seed"] { };
    };

    Function_List @.functions = [1] {
     Function @["GetRandomSeed"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [2] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       Switch @[1] { 
	ProgEl_List @.cases = [3] {
	 CaseBlock @[0] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[1] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[2] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [7] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     WtInitPrompt @[5] { 
      ProgEl_List @.yes_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
     AssignExpr @[6] { };
    };

    ProgEl_List @.prog_code = [10] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     MemberAssign @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[1] { };
      };
     };
     AssignExpr @[6] { };
     WhileLoop @[7] { 
      ProgEl_List @.loop_code = [5] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [2] {
	 VarIncr @[0] { };
	 IfBreak @[1] { };
	};
       };
       Else @[3] { 
	ProgEl_List @.else_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       If @[4] { 
	ProgEl_List @.true_code = [1] {
	 If @[0] { 
	  ProgEl_List @.true_code = [1] {
	   ProgramCall @[0] { 
	    ProgArg_List @.prog_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     If @[8] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraEpoch"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["step_on_err"] { };
     ProgVar @["epoch_timer"] { };
     ProgVar @["data_loop_index"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [9] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[4] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 StopStepPoint @[0] { };
	};
       };
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[6] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["LeabraTrial"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["qtr"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraQuarter"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["cycle"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @["cycle_max"] { };
       ProgVar @["cyc"] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraCycle"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["ApplyInputs"] { 
    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["LayerWriter_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraTrialMonitor"] { 
    ProgObjList @.objs = [1] {
     NetMonitor @["trial_netmon"] { 
      NetMonItem_List @.items = [25] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["train_mode"] { };
       NetMonItem @["group"] { };
       NetMonItem @["trial"] { };
       NetMonItem @["tick"] { };
       NetMonItem @["time"] { };
       NetMonItem @["trial_name"] { };
       NetMonItem @["group_name"] { };
       NetMonItem @["output_name"] { };
       NetMonItem @["rt_cycles"] { };
       NetMonItem @["sse"] { };
       NetMonItem @["norm_err"] { };
       NetMonItem @["cos_err"] { };
       NetMonItem @["ext_rew"] { };
       NetMonItem @["lay_sse"] { };
       NetMonItem @["lay_norm_err"] { };
       NetMonItem @["lay_cos_err"] { };
       NetMonItem @["lay_net_sd"] { };
       NetMonItem @["net_cos_diff"] { };
       NetMonItem @["net_trial_cos_diff"] { };
       NetMonItem @["net_avg_act_diff"] { };
       NetMonItem @["cos_diff"] { };
       NetMonItem @["trial_cos_diff"] { };
       NetMonItem @["avg_act_diff"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["trial_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["LeabraEpochMonitor"] { 
    ProgObjList @.objs = [1] {
     NetMonitor @["epoch_netmon"] { 
      NetMonItem_List @.items = [30] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["avg_sse"] { };
       NetMonItem @["cnt_err"] { };
       NetMonItem @["pct_cor"] { };
       NetMonItem @["pct_err"] { };
       NetMonItem @["avg_norm_err"] { };
       NetMonItem @["avg_cos_err"] { };
       NetMonItem @["avg_ext_rew"] { };
       NetMonItem @["avg_cycles"] { };
       NetMonItem @["epoch_time_tot"] { };
       NetMonItem @["epoch_time_usr"] { };
       NetMonItem @["lay_avg_sse"] { };
       NetMonItem @["lay_cnt_err"] { };
       NetMonItem @["lay_pct_cor"] { };
       NetMonItem @["lay_pct_err"] { };
       NetMonItem @["lay_avg_norm_err"] { };
       NetMonItem @["lay_avg_cos_err"] { };
       NetMonItem @["net_avg_cos_diff"] { };
       NetMonItem @["net_avg_trial_cos_diff"] { };
       NetMonItem @["net_avg_avg_act_diff"] { };
       NetMonItem @["avg_cos_diff"] { };
       NetMonItem @["avg_trial_cos_diff"] { };
       NetMonItem @["avg_avg_act_diff"] { };
       NetMonItem @["avg_net_sd"] { };
       NetMonItem @["hog_pct"] { };
       NetMonItem @["dead_pct"] { };
       NetMonItem @["netmax"] { };
       NetMonItem @["avg_act"] { };
       NetMonItem @["netrel"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["epoch_mon_data"] { };
     ProgVar @["epoch_netmon"] { };
     ProgVar @["epoch_timer"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [7] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[6] { };
    };
   };
   Program @["SaveWeights"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["tag"] { };
     ProgVar @["wts_subdir"] { };
     ProgVar @["fname"] { };
     ProgVar @["epoch_str"] { };
     ProgVar @["batch_str"] { };
     ProgVar @["final_tag"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     IfReturn @[0] { };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
  Program_Group @.gp["LeabraAll_Test"] = [7] { 
   Program @["LeabraEpochTest"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["input_data"] { };
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["epoch_timer"] { };
     ProgVar @["data_loop_index"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [11] {
     NetCounterInit @[0] { };
     MemberAssign @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MemberAssign @[10] { };
    };
   };
   Program @["LeabraTrialTest"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["qtr"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraQuarterTest"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["cycle"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @["cycle_max"] { };
       ProgVar @["cyc"] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraCycleTest"] { 
    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["ApplyInputsTest"] { 
    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["LayerWriter_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraTrialMonitorTest"] { 
    ProgObjList @.objs = [1] {
     NetMonitor @["trial_netmon"] { 
      NetMonItem_List @.items = [19] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["train_mode"] { };
       NetMonItem @["group"] { };
       NetMonItem @["trial"] { };
       NetMonItem @["tick"] { };
       NetMonItem @["time"] { };
       NetMonItem @["trial_name"] { };
       NetMonItem @["group_name"] { };
       NetMonItem @["output_name"] { };
       NetMonItem @["rt_cycles"] { };
       NetMonItem @["sse"] { };
       NetMonItem @["norm_err"] { };
       NetMonItem @["cos_err"] { };
       NetMonItem @["ext_rew"] { };
       NetMonItem @["lay_sse"] { };
       NetMonItem @["lay_norm_err"] { };
       NetMonItem @["lay_cos_err"] { };
       NetMonItem @["lay_net_sd"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["trial_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["LeabraEpochMonitorTest"] { 
    ProgObjList @.objs = [1] {
     NetMonitor @["epoch_netmon"] { 
      NetMonItem_List @.items = [19] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["avg_sse"] { };
       NetMonItem @["cnt_err"] { };
       NetMonItem @["pct_cor"] { };
       NetMonItem @["pct_err"] { };
       NetMonItem @["avg_norm_err"] { };
       NetMonItem @["avg_cos_err"] { };
       NetMonItem @["avg_ext_rew"] { };
       NetMonItem @["avg_cycles"] { };
       NetMonItem @["epoch_time_tot"] { };
       NetMonItem @["epoch_time_usr"] { };
       NetMonItem @["lay_avg_sse"] { };
       NetMonItem @["lay_cnt_err"] { };
       NetMonItem @["lay_pct_cor"] { };
       NetMonItem @["lay_pct_err"] { };
       NetMonItem @["lay_avg_norm_err"] { };
       NetMonItem @["lay_avg_cos_err"] { };
       NetMonItem @["avg_net_sd"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["epoch_mon_data"] { };
     ProgVar @["epoch_netmon"] { };
     ProgVar @["epoch_timer"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser2"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["Visualizer"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [1] {
      T3Panel @["EpochOutputData"] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @["EpochOutputData_Graph"] { 
	 T3DataView_List @.children = [40] {
	  GraphColView @["batch"] { };
	  GraphColView @["epoch"] { };
	  GraphColView @["avg_sse"] { };
	  GraphColView @["cnt_err"] { };
	  GraphColView @["pct_cor"] { };
	  GraphColView @["pct_err"] { };
	  GraphColView @["avg_norm_err"] { };
	  GraphColView @["avg_cos_err"] { };
	  GraphColView @["avg_ext_rew"] { };
	  GraphColView @["avg_cycles"] { };
	  GraphColView @["epoch_time_tot"] { };
	  GraphColView @["epoch_time_usr"] { };
	  GraphColView @["Output_lay_avg_sse"] { };
	  GraphColView @["Output_lay_cnt_err"] { };
	  GraphColView @["Output_lay_pct_cor"] { };
	  GraphColView @["Output_lay_pct_err"] { };
	  GraphColView @["Output_lay_avg_norm_err"] { };
	  GraphColView @["Output_lay_avg_cos_err"] { };
	  GraphColView @["net_avg_cos_diff"] { };
	  GraphColView @["net_avg_trial_cos_diff"] { };
	  GraphColView @["net_avg_avg_act_diff"] { };
	  GraphColView @["Hidden_avg_cos_diff"] { };
	  GraphColView @["Output_avg_cos_diff"] { };
	  GraphColView @["Hidden_avg_trial_cos_diff"] { };
	  GraphColView @["Output_avg_trial_cos_diff"] { };
	  GraphColView @["Hidden_avg_avg_act_diff"] { };
	  GraphColView @["Output_avg_avg_act_diff"] { };
	  GraphColView @["Hidden_avg_net_sd"] { };
	  GraphColView @["Output_avg_net_sd"] { };
	  GraphColView @["Hidden_hog_pct"] { };
	  GraphColView @["Output_hog_pct"] { };
	  GraphColView @["Hidden_dead_pct"] { };
	  GraphColView @["Output_dead_pct"] { };
	  GraphColView @["Hidden_netmax"] { };
	  GraphColView @["Output_netmax"] { };
	  GraphColView @["Hidden_avg_act"] { };
	  GraphColView @["Output_avg_act"] { };
	  GraphColView @["Hidden_Fm_Input_netrel"] { };
	  GraphColView @["Hidden_Fm_Output_netrel"] { };
	  GraphColView @["Output_Fm_Hidden_netrel"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @["EpochOutputData_Graph_plot_1"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_2"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_3"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_4"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_5"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_6"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_7"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_8"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_9"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_10"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_11"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_12"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_13"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_14"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_15"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_16"] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @["EpochOutputData_Graph_err_1"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_2"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_3"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_4"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_5"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_6"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_7"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_8"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_9"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_10"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_11"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_12"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_13"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_14"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_15"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_16"] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @["Network_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["maxda"] { };
   };

   BaseSpec_Group @.specs = [4] {
    LeabraLayerSpec @["HiddenLayer"] { 
     BaseSpec_Group @.children = [1] {
      LeabraLayerSpec @["Input_Output"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] { 
     BaseSpec_Group @.children = [2] {
      LeabraBiasSpec @["LeabraBiasSpec_0"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
      LeabraConSpec @["TopDownCons"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    FullPrjnSpec @["FullPrjnSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   Layer_Group @.layers = [3] {
    LeabraLayer @["Input"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [25] {
     };
    };
    LeabraLayer @["Hidden"] { 
     Projection_Group @.projections = [2] {
      LeabraPrjn @["Fm_Input"] { };
      LeabraPrjn @["Fm_Output"] { };
     };

     Unit_Group @.units = [25] {
     };
    };
    LeabraLayer @["Output"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Hidden"] { };
     };

     Unit_Group @.units = [25] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };

   NetTiming_List NULL = [5] {
    LeabraNetTiming @[0] { };
    LeabraNetTiming @[1] { };
    LeabraNetTiming @[2] { };
    LeabraNetTiming @[3] { };
    LeabraNetTiming @[4] { };
   };
  };
 };
};
LeabraProject .projects["test"] {
 name="test";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 author=;
 email=;
 license {
  owner="Regents of the University of Colorado";
  license=NO_LIC;
  org="CCNLab at the University of Colorado Boulder";
  year="2011";
  custom=;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_0"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_6";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ControlPanel @["ControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ControlPanel";
   running_updt=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="LeabraConSpec_0_lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     cust_desc=0;
     base=.projects["test"].networks["Network_0"].specs["LeabraConSpec_0"]$$;
     mbr=LeabraConSpec::lrate;
     is_numeric=1;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
    EditMbrItem @[1] {
     label="LeabraCycle_update_net_view";
     desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     cust_desc=1;
     base=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
    EditMbrItem @[2] {
     label="cycle_qtr";
     desc="[Default: true]  one CycleRun runs for a full quarter number of actual cycles -- this greatly speeds up processing by reducing threading overhead, but prevents e.g., interactive viewing at the individual cycle level -- this is not saved -- have to re-engage it when needed, to prevent unintentionally slowing everything down";
     cust_desc=0;
     base=.projects["test"].networks["Network_0"].times$$;
     mbr=LeabraTimes::cycle_qtr;
     is_numeric=0;
     is_single=1;
     param_search {
      srch=NO;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
     param_set_value {
      saved_value=;
     };
     notes {
      notes=;
     };
    };
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Train_Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Train_Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     label="Train_Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[3] {
     label="Train_Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Stop;
    };
   };
  };
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   running_updt=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    name="jobs_running";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   jobs_done {
    name="jobs_done";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   jobs_archive {
    name="jobs_archive";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_ROWS|SAVE_DATA|READ_ONLY;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   file_list {
    name="file_list";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_name"] {
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["tag"] {
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["size"] {
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["kind"] {
      name="kind";
      desc="type of file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_modified"] {
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["date_created"] {
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["svn_file_path"] {
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["proj_file_path"] {
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["file_path"] {
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   cluster_info {
    name="cluster_info";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["user"] {
      name="user";
      desc="user name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["state"] {
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["procs"] {
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   extra_files=;
   svn_repo=;
   repo_url=;
   cluster=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=-1;
   n_threads=2;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_nodes=0;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 param_sets {
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["StdInputData"] {
    name="StdInputData";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] "checks";"mitvert";"midhoriz";"rdiag";"ldiag";"random";      };
     };
     float_Data @["Input"] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [5 5 6] 1;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;0;
      };
     };
     float_Data @["Output"] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      ar {
       name="ar";
      [5 5 6] 1;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;1;
1;0;0;0;0;0;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [6] 0;1;2;3;4;5;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
  };
  DataTable_Group @.gp["OutputData"] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["TrialOutputData"] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_47";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 5;5;5;5;5;5;      };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_48";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 19;19;19;19;19;19;      };
     };
     String_Data @["train_mode"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_107";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="train_mode";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] "TRAIN";"TRAIN";"TRAIN";"TRAIN";"TRAIN";"TRAIN";      };
     };
     int_Data @["group"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_134";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="group";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0;0;0;0;0;0;      };
     };
     int_Data @["trial"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_49";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0;1;2;3;4;5;      };
     };
     int_Data @["tick"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_646";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="tick";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0;0;0;0;0;0;      };
     };
     float_Data @["time"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_108";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="time";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 11.500001;11.6;11.700001;11.8;11.900001;12.000001;      };
     };
     String_Data @["trial_name"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_53";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] "midhoriz";"rdiag";"random";"mitvert";"checks";"ldiag";      };
     };
     String_Data @["group_name"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_54";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] ;;;;;;      };
     };
     String_Data @["output_name"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_109";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="output_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] ;;;;;;      };
     };
     float_Data @["rt_cycles"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_110";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="rt_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 8;8;8;7;8;7;      };
     };
     float_Data @["sse"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_56";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0;0;0;0.27953309;0.31560129;0.51997405;      };
     };
     float_Data @["norm_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_111";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="norm_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0;0;0;0.1;0.1;0.1;      };
     };
     float_Data @["cos_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_112";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="cos_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0.9805088;0.989169;0.99160582;0.94140482;0.94624603;0.92228323;      };
     };
     float_Data @["ext_rew"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_57";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0;0;0;0;0;0;      };
     };
     float_Data @["Output_lay_sse"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_113";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_lay_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0;0;0;0.27953309;0.31560129;0.51997405;      };
     };
     float_Data @["Output_lay_norm_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_114";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_lay_norm_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0;0;0;0.1;0.1;0.1;      };
     };
     float_Data @["Output_lay_cos_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_115";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_lay_cos_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0.9805088;0.989169;0.99160582;0.94140482;0.94624603;0.92228323;      };
     };
     float_Data @["Hidden_lay_net_sd"] {
      name="Hidden_lay_net_sd";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0.34615779;0.38783288;0.40298602;0.39159662;0.43520176;0.37443563;      };
     };
     float_Data @["Output_lay_net_sd"] {
      name="Output_lay_net_sd";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0.31952733;0.22035009;0.16701753;0.27366933;0.22237508;0.30616581;      };
     };
     float_Data @["net_cos_diff"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_116";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="net_cos_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0.99881566;0.99908447;0.99955505;0.99873185;0.99459952;0.99875373;      };
     };
     float_Data @["net_trial_cos_diff"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_117";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="net_trial_cos_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0.20551917;0.16705041;0.16478074;-0.10101476;0.028557841;0.62319946;      };
     };
     float_Data @["net_avg_act_diff"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_118";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="net_avg_act_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 7.4970347e-05;0.00089230208;0.0004085321;0.00053472444;0.00051360426;-0.00013800031;      };
     };
     float_Data @["Hidden_cos_diff"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_119";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Hidden_cos_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0.99763125;0.99816895;0.9991101;0.99746364;0.98919904;0.99750745;      };
     };
     float_Data @["Output_cos_diff"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_120";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_cos_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0.97674829;0.98755664;0.98953468;0.92804414;0.93357813;0.90186787;      };
     };
     float_Data @["Hidden_trial_cos_diff"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_121";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Hidden_trial_cos_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0.41103834;0.33410081;0.32956147;0.047318783;0.057115678;0.74765116;      };
     };
     float_Data @["Output_trial_cos_diff"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_122";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_trial_cos_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 6.1744796e-09;-1.0291367e-08;4.1167678e-09;-0.24934831;3.0878993e-09;0.49874783;      };
     };
     float_Data @["Hidden_avg_act_diff"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_123";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Hidden_avg_act_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0.00014994069;0.0017846042;0.0008170642;0.0010694489;0.0010272085;-0.00027600062;      };
     };
     float_Data @["Output_avg_act_diff"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_124";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_avg_act_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [6] 0.0026584642;0.023601575;0.035350788;0.0020705224;0.017343715;0.013843405;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [6] 0;1;2;3;4;5;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   DataTable @["EpochOutputData"] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_49";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;5;5;5;5;5;5;5;5;5;
5;5;5;5;5;5;5;5;5;5;
5;      };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_50";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;0;1;2;3;4;5;6;7;
8;9;10;11;12;13;14;15;16;17;
18;0;1;2;3;4;5;6;7;8;
9;10;11;12;13;14;15;16;17;18;
19;20;21;22;23;24;25;0;1;2;
3;4;5;6;7;8;9;10;11;12;
13;14;15;16;17;18;19;20;21;22;
23;24;25;26;27;0;1;2;3;4;
5;6;7;8;9;10;11;12;13;14;
15;16;17;18;19;20;21;22;23;24;
25;0;1;2;3;4;5;6;7;8;
9;10;11;12;13;14;15;16;17;18;
19;      };
     };
     float_Data @["avg_sse"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_123";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 7.7164612;7.0782123;6.3035889;5.1959839;3.713506;3.5131741;2.5670574;2.0589223;1.6932049;1.7295719;
1.2728887;0.72715932;0.5201214;0.66253996;0.37190115;0.23994915;0.16269149;0.087864019;0.075375445;0.057530086;
0;0;7.2421641;6.0709481;5.6037803;5.0739517;4.0235271;3.8331842;3.148484;2.3421376;
1.3463202;1.1946443;0.9819029;0.56562185;0.47792235;0.10160792;0.042422462;0.0908584;0.047423195;0;
0;8.0616426;7.5617299;6.3679862;5.3985062;5.0174098;4.0408587;3.7536957;2.8451748;2.2268727;
1.20601;0.94373029;0.80097944;0.74553031;0.36021063;0.28868112;0.39160919;0.20249976;0.14600252;0.13667725;
0.08414676;0.11917996;0.065931685;0.056010533;0.044899758;0;0;6.6813087;6.0007343;5.3692708;
5.0942035;4.2890429;3.8259017;3.5275695;3.0251379;2.5176826;2.1915705;2.976506;1.8969535;1.6570557;
1.2518865;1.0438201;0.79980856;0.57346219;0.53028595;0.37288117;0.2221414;0.27809748;0.24857314;0.20183045;
0.1473766;0.10940031;0.061630707;0;0;7.0227532;5.880609;5.38621;4.5686345;4.0320325;
3.9120395;3.1482117;3.5301533;2.8443053;2.0472109;2.2621906;1.8045663;1.628282;1.5063187;1.5407523;
1.0973209;1.1234844;0.6351229;0.53302354;0.44891682;0.46552888;0.14259993;0.046334818;0.042346884;0;
0;6.8812099;6.4273248;5.8073297;4.7999382;4.0243106;3.5084765;2.758393;1.8666919;1.5246502;
1.4599108;1.4015141;0.85899782;0.67659312;0.59287989;0.45239738;0.50428873;0.2713564;0.2466289;0.20075752;
0.18585141;      };
     };
     float_Data @["cnt_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_124";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 6;6;6;6;6;6;5;5;5;5;
4;4;3;4;3;2;2;1;1;1;
0;0;6;6;6;6;6;6;6;6;
6;5;5;3;4;2;1;1;1;0;
0;6;6;6;6;6;6;6;6;6;
6;5;5;5;3;3;4;3;2;2;
1;2;1;1;1;0;0;6;6;6;
6;6;6;6;6;6;6;6;6;6;
5;4;4;4;4;4;1;1;1;1;
1;1;1;0;0;6;6;6;6;6;
6;6;6;6;6;6;6;6;6;6;
5;5;5;3;4;4;2;1;1;0;
0;6;6;6;6;6;6;6;6;6;
5;6;5;5;4;4;4;3;3;3;
3;      };
     };
     float_Data @["pct_cor"] {
      name="pct_cor";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0;0;0;0;0;0;0.16666669;0.16666669;0.16666669;0.16666669;
0.33333331;0.33333331;0.5;0.33333331;0.5;0.66666663;0.66666663;0.83333331;0.83333331;0.83333331;
1;1;0;0;0;0;0;0;0;0;
0;0.16666669;0.16666669;0.5;0.33333331;0.66666663;0.83333331;0.83333331;0.83333331;1;
1;0;0;0;0;0;0;0;0;0;
0;0.16666669;0.16666669;0.16666669;0.5;0.5;0.33333331;0.5;0.66666663;0.66666663;
0.83333331;0.66666663;0.83333331;0.83333331;0.83333331;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.16666669;0.33333331;0.33333331;0.33333331;0.33333331;0.33333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.16666669;0.16666669;0.16666669;0.5;0.33333331;0.33333331;0.66666663;0.83333331;0.83333331;1;
1;0;0;0;0;0;0;0;0;0;
0.16666669;0;0.16666669;0.16666669;0.33333331;0.33333331;0.33333331;0.5;0.5;0.5;
0.5;      };
     };
     float_Data @["pct_err"] {
      name="pct_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 1;1;1;1;1;1;0.83333331;0.83333331;0.83333331;0.83333331;
0.66666669;0.66666669;0.5;0.66666669;0.5;0.33333334;0.33333334;0.16666667;0.16666667;0.16666667;
0;0;1;1;1;1;1;1;1;1;
1;0.83333331;0.83333331;0.5;0.66666669;0.33333334;0.16666667;0.16666667;0.16666667;0;
0;1;1;1;1;1;1;1;1;1;
1;0.83333331;0.83333331;0.83333331;0.5;0.5;0.66666669;0.5;0.33333334;0.33333334;
0.16666667;0.33333334;0.16666667;0.16666667;0.16666667;0;0;1;1;1;
1;1;1;1;1;1;1;1;1;1;
0.83333331;0.66666669;0.66666669;0.66666669;0.66666669;0.66666669;0.16666667;0.16666667;0.16666667;0.16666667;
0.16666667;0.16666667;0.16666667;0;0;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
0.83333331;0.83333331;0.83333331;0.5;0.66666669;0.66666669;0.33333334;0.16666667;0.16666667;0;
0;1;1;1;1;1;1;1;1;1;
0.83333331;1;0.83333331;0.83333331;0.66666669;0.66666669;0.66666669;0.5;0.5;0.5;
0.5;      };
     };
     float_Data @["avg_norm_err"] {
      name="avg_norm_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.91666669;0.86666662;0.7833333;0.68333334;0.51666671;0.5;0.38333333;0.30000001;0.25;0.26666668;
0.21666665;0.1;0.06666667;0.11666667;0.06666667;0.033333335;0.033333335;0.016666668;0.016666668;0.016666668;
0;0;0.90000004;0.75;0.7166667;0.68333334;0.5333333;0.55000001;0.45000002;0.39999998;
0.26666668;0.23333335;0.16666667;0.1;0.1;0.033333335;0.016666668;0.033333335;0.016666668;0;
0;0.90000004;0.90000004;0.80000001;0.69999999;0.66666669;0.53333336;0.53333336;0.40000001;0.36666667;
0.16666667;0.11666667;0.15000001;0.11666667;0.050000001;0.050000001;0.083333336;0.050000001;0.033333335;0.033333335;
0.016666668;0.033333335;0.016666668;0.016666668;0.016666668;0;0;0.79999995;0.73333335;0.7166667;
0.65000004;0.59999996;0.53333336;0.5333333;0.4666667;0.38333336;0.33333334;0.40000001;0.30000001;0.31666669;
0.25;0.18333334;0.15000001;0.11666667;0.11666667;0.083333336;0.033333335;0.050000001;0.033333335;0.033333335;
0.016666668;0.016666668;0.016666668;0;0;0.83333331;0.76666665;0.73333335;0.61666667;0.61666662;
0.56666666;0.46666667;0.51666665;0.41666666;0.30000004;0.36666667;0.28333333;0.26666665;0.25;0.23333335;
0.21666668;0.18333335;0.13333334;0.1;0.1;0.1;0.050000001;0.016666668;0.016666668;0;
0;0.83333331;0.81666666;0.73333335;0.66666669;0.55000001;0.5;0.38333333;0.30000001;0.25000003;
0.23333335;0.25;0.16666667;0.13333334;0.11666667;0.1;0.1;0.06666667;0.050000001;0.050000001;
0.050000001;      };
     };
     float_Data @["avg_cos_err"] {
      name="avg_cos_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.21145298;0.25858608;0.34091055;0.44636789;0.56195784;0.58436745;0.67026919;0.71063232;0.74907368;0.7675662;
0.81361228;0.87292033;0.90392131;0.90399623;0.93441814;0.95082706;0.96671885;0.97453851;0.97877711;0.98326063;
0.98699254;0.98900646;0.26292154;0.35645482;0.37919974;0.40445125;0.52286583;0.53796703;0.62344497;0.69104105;
0.80603242;0.83553284;0.85208601;0.91477633;0.90812868;0.95647883;0.95978028;0.96629339;0.96837234;0.97949958;
0.98028344;0.14251651;0.18341547;0.28214437;0.36667547;0.40634719;0.48970532;0.53967845;0.63720655;0.68653673;
0.8149218;0.84740955;0.86887699;0.89250547;0.9373824;0.95030099;0.94016403;0.96876115;0.97114724;0.974374;
0.97832817;0.97744042;0.9803862;0.98340589;0.9864642;0.98297423;0.99027473;0.341719;0.36232379;0.41181734;
0.44508398;0.50540715;0.55810076;0.58442783;0.60218877;0.65841037;0.69839686;0.60412443;0.73088104;0.78125548;
0.81309193;0.83592272;0.86241442;0.8894096;0.90408474;0.91604131;0.9325996;0.93317825;0.94493455;0.95032191;
0.95831728;0.96875602;0.97883481;0.98253125;0.98451948;0.28970814;0.37576196;0.40820149;0.5043627;0.53580326;
0.55475348;0.62485766;0.5706448;0.62951964;0.7171188;0.69841188;0.76014662;0.78442281;0.79659384;0.7924819;
0.84234256;0.82936198;0.89707941;0.90596586;0.91857767;0.92415196;0.95588565;0.96875101;0.97627038;0.98132819;
0.98388964;0.31050119;0.31212983;0.37479305;0.47388768;0.54479635;0.58920097;0.64675033;0.75206715;0.7828694;
0.79252553;0.8098138;0.8742128;0.89242083;0.90452462;0.92865425;0.92112827;0.947586;0.94180125;0.95651084;
0.96186966;      };
     };
     float_Data @["avg_ext_rew"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_125";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;      };
     };
     float_Data @["avg_cycles"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_126";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 5.8333335;6;6;6;6;6;6.5;6.8333335;6.8333335;6.8333335;
7.1666665;7.1666665;7.1666665;7.1666665;7.1666665;7.1666665;7.1666665;7.1666665;7.1666665;7.1666665;
7.3333335;8;6;6;6;6;6;6.1666665;6;6.6666665;
7;7;7.5;7.3333335;7.3333335;7.3333335;7.5;7.5;7.5;7.5;
7.5;6;6;6;6;6.1666665;6.3333335;6;6.1666665;7.1666665;
7;8;7.8333335;7.5;7.5;7.8333335;7.6666665;7.6666665;7.6666665;7.6666665;
7.5;7.6666665;7.6666665;7.5;7.3333335;7.1666665;7.3333335;6;6;6;
6;6;6;6.1666665;7;7;7;7.1666665;7.1666665;7.1666665;
7.1666665;7.1666665;7.1666665;7.1666665;7.1666665;7.1666665;7.1666665;7.1666665;7.1666665;7.1666665;
8.5;8.5;8.5;8.5;8.5;6;6;6;6;6;
6;6;6.1666665;6.6666665;6.5;7;7;7;7;7;
7;7;7;7;7;7;7;7;7;7;
7;6;6;6;6;6;6.3333335;6.8333335;6.8333335;6.5;
6.8333335;7.1666665;7.3333335;7;7.3333335;7.1666665;7.6666665;8;7.8333335;7.6666665;
7.6666665;      };
     };
     float_Data @["epoch_time_tot"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_127";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.12;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;0.050000001;
0.059999999;0.050000001;0.059999999;0.059999999;0.059999999;0.050000001;0.059999999;0.059999999;0.059999999;0.059999999;
0.07;0.059999999;0.059999999;0.07;0.07;0.059999999;0.079999998;0.079999998;0.07;0.07;
0.07;0.079999998;0.079999998;0.090000004;0.079999998;0.090000004;0.079999998;0.090000004;0.079999998;0.090000004;
0.1;0.090000004;0.090000004;0.11;0.1;0.1;0.1;0.1;0.11;0.11;
0.11;0.11;0.11;0.11;0.11;0.12;0.13;0.11;0.12;0.12;
0.12;0.13;0.12;0.12;0.12;0.12;0.13;0.13;0.13;0.16;
0.13;0.13;0.14;0.14;0.14;0.15000001;0.14;0.14;0.15000001;0.15000001;
0.15000001;0.15000001;0.18000001;0.16;0.16;0.16;0.16;0.18000001;0.17;0.16;
0.17;0.17;0.2;0.2;0.18000001;0.18000001;0.2;0.18000001;0.2;0.19;
0.19;0.19;0.19;0.2;0.2;0.28;0.2;0.20999999;0.20999999;0.20999999;
0.20999999;0.22;0.20999999;0.20999999;0.22;0.22;0.25;0.039999999;0.22;0.23999999;
0.23999999;0.25;0.25;0.25;0.23999999;0.25;0.23999999;0.25;0.25;0.039999999;
0.25;0.27000001;0.25999999;0.25999999;0.25999999;0.25999999;0.27000001;0.28;0.28999999;0.31999999;
0.28;      };
     };
     float_Data @["epoch_time_usr"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_128";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.11;0.079999998;0.1;0.090000004;0.079999998;0.090000004;0.090000004;0.1;0.1;0.090000004;
0.1;0.11;0.11;0.11;0.12;0.12;0.13;0.13;0.12;0.13;
0.14;0.13;0.14;0.15000001;0.16;0.14;0.16;0.16;0.15000001;0.16;
0.18000001;0.18000001;0.17;0.19;0.18000001;0.19;0.2;0.19;0.19;0.22;
0.22;0.2;0.22;0.23999999;0.23999999;0.23;0.23999999;0.23;0.28999999;0.31999999;
0.31;0.28999999;0.25999999;0.25;0.23999999;0.28;0.28999999;0.25999999;0.25999999;0.28;
0.25999999;0.28999999;0.28;0.28999999;0.28;0.28;0.28999999;0.30000001;0.28999999;0.36000001;
0.30000001;0.30000001;0.31999999;0.31;0.31;0.34;0.33000001;0.33000001;0.33000001;0.33000001;
0.36000001;0.34;0.38999999;0.37;0.34999999;0.34999999;0.36000001;0.40000001;0.38;0.37;
0.38;0.38;0.51999998;0.54000002;0.41;0.38;0.43000001;0.41;0.44;0.41;
0.41999999;0.40000001;0.41;0.44;0.44999999;0.62;0.44;0.46000001;0.44;0.46000001;
0.44999999;0.47;0.46000001;0.44999999;0.49000001;0.5;0.55000001;0.13;0.47;0.51999998;
0.51999998;0.64999998;0.54000002;0.52999997;0.50999999;0.51999998;0.51999998;0.56;0.54000002;0.13;
0.54000002;0.57999998;0.56999999;0.55000001;0.56;0.56;0.56999999;0.61000001;0.62;0.63999999;
0.58999997;      };
     };
     float_Data @["Output_lay_avg_sse"] {
      name="Output_lay_avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 7.7164612;7.0782123;6.3035889;5.1959839;3.713506;3.5131741;2.5670574;2.0589223;1.6932049;1.7295719;
1.2728887;0.72715932;0.5201214;0.66253996;0.37190115;0.23994915;0.16269149;0.087864019;0.075375445;0.057530086;
0;0;7.2421641;6.0709481;5.6037803;5.0739517;4.0235271;3.8331842;3.148484;2.3421376;
1.3463202;1.1946443;0.9819029;0.56562185;0.47792235;0.10160792;0.042422462;0.0908584;0.047423195;0;
0;8.0616426;7.5617299;6.3679862;5.3985062;5.0174098;4.0408587;3.7536957;2.8451748;2.2268727;
1.20601;0.94373029;0.80097944;0.74553031;0.36021063;0.28868112;0.39160919;0.20249976;0.14600252;0.13667725;
0.08414676;0.11917996;0.065931685;0.056010533;0.044899758;0;0;6.6813087;6.0007343;5.3692708;
5.0942035;4.2890429;3.8259017;3.5275695;3.0251379;2.5176826;2.1915705;2.976506;1.8969535;1.6570557;
1.2518865;1.0438201;0.79980856;0.57346219;0.53028595;0.37288117;0.2221414;0.27809748;0.24857314;0.20183045;
0.1473766;0.10940031;0.061630707;0;0;7.0227532;5.880609;5.38621;4.5686345;4.0320325;
3.9120395;3.1482117;3.5301533;2.8443053;2.0472109;2.2621906;1.8045663;1.628282;1.5063187;1.5407523;
1.0973209;1.1234844;0.6351229;0.53302354;0.44891682;0.46552888;0.14259993;0.046334818;0.042346884;0;
0;6.8812099;6.4273248;5.8073297;4.7999382;4.0243106;3.5084765;2.758393;1.8666919;1.5246502;
1.4599108;1.4015141;0.85899782;0.67659312;0.59287989;0.45239738;0.50428873;0.2713564;0.2466289;0.20075752;
0.18585141;      };
     };
     float_Data @["Output_lay_cnt_err"] {
      name="Output_lay_cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 6;6;6;6;6;6;5;5;5;5;
4;4;3;4;3;2;2;1;1;1;
0;0;6;6;6;6;6;6;6;6;
6;5;5;3;4;2;1;1;1;0;
0;6;6;6;6;6;6;6;6;6;
6;5;5;5;3;3;4;3;2;2;
1;2;1;1;1;0;0;6;6;6;
6;6;6;6;6;6;6;6;6;6;
5;4;4;4;4;4;1;1;1;1;
1;1;1;0;0;6;6;6;6;6;
6;6;6;6;6;6;6;6;6;6;
5;5;5;3;4;4;2;1;1;0;
0;6;6;6;6;6;6;6;6;6;
5;6;5;5;4;4;4;3;3;3;
3;      };
     };
     float_Data @["Output_lay_pct_cor"] {
      name="Output_lay_pct_cor";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0;0;0;0;0;0;0.16666669;0.16666669;0.16666669;0.16666669;
0.33333331;0.33333331;0.5;0.33333331;0.5;0.66666663;0.66666663;0.83333331;0.83333331;0.83333331;
1;1;0;0;0;0;0;0;0;0;
0;0.16666669;0.16666669;0.5;0.33333331;0.66666663;0.83333331;0.83333331;0.83333331;1;
1;0;0;0;0;0;0;0;0;0;
0;0.16666669;0.16666669;0.16666669;0.5;0.5;0.33333331;0.5;0.66666663;0.66666663;
0.83333331;0.66666663;0.83333331;0.83333331;0.83333331;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.16666669;0.33333331;0.33333331;0.33333331;0.33333331;0.33333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.16666669;0.16666669;0.16666669;0.5;0.33333331;0.33333331;0.66666663;0.83333331;0.83333331;1;
1;0;0;0;0;0;0;0;0;0;
0.16666669;0;0.16666669;0.16666669;0.33333331;0.33333331;0.33333331;0.5;0.5;0.5;
0.5;      };
     };
     float_Data @["Output_lay_pct_err"] {
      name="Output_lay_pct_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 1;1;1;1;1;1;0.83333331;0.83333331;0.83333331;0.83333331;
0.66666669;0.66666669;0.5;0.66666669;0.5;0.33333334;0.33333334;0.16666667;0.16666667;0.16666667;
0;0;1;1;1;1;1;1;1;1;
1;0.83333331;0.83333331;0.5;0.66666669;0.33333334;0.16666667;0.16666667;0.16666667;0;
0;1;1;1;1;1;1;1;1;1;
1;0.83333331;0.83333331;0.83333331;0.5;0.5;0.66666669;0.5;0.33333334;0.33333334;
0.16666667;0.33333334;0.16666667;0.16666667;0.16666667;0;0;1;1;1;
1;1;1;1;1;1;1;1;1;1;
0.83333331;0.66666669;0.66666669;0.66666669;0.66666669;0.66666669;0.16666667;0.16666667;0.16666667;0.16666667;
0.16666667;0.16666667;0.16666667;0;0;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
0.83333331;0.83333331;0.83333331;0.5;0.66666669;0.66666669;0.33333334;0.16666667;0.16666667;0;
0;1;1;1;1;1;1;1;1;1;
0.83333331;1;0.83333331;0.83333331;0.66666669;0.66666669;0.66666669;0.5;0.5;0.5;
0.5;      };
     };
     float_Data @["Output_lay_avg_norm_err"] {
      name="Output_lay_avg_norm_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.91666669;0.86666662;0.7833333;0.68333334;0.51666671;0.5;0.38333333;0.30000001;0.25;0.26666668;
0.21666665;0.1;0.06666667;0.11666667;0.06666667;0.033333335;0.033333335;0.016666668;0.016666668;0.016666668;
0;0;0.90000004;0.75;0.7166667;0.68333334;0.5333333;0.55000001;0.45000002;0.39999998;
0.26666668;0.23333335;0.16666667;0.1;0.1;0.033333335;0.016666668;0.033333335;0.016666668;0;
0;0.90000004;0.90000004;0.80000001;0.69999999;0.66666669;0.53333336;0.53333336;0.40000001;0.36666667;
0.16666667;0.11666667;0.15000001;0.11666667;0.050000001;0.050000001;0.083333336;0.050000001;0.033333335;0.033333335;
0.016666668;0.033333335;0.016666668;0.016666668;0.016666668;0;0;0.79999995;0.73333335;0.7166667;
0.65000004;0.59999996;0.53333336;0.5333333;0.4666667;0.38333336;0.33333334;0.40000001;0.30000001;0.31666669;
0.25;0.18333334;0.15000001;0.11666667;0.11666667;0.083333336;0.033333335;0.050000001;0.033333335;0.033333335;
0.016666668;0.016666668;0.016666668;0;0;0.83333331;0.76666665;0.73333335;0.61666667;0.61666662;
0.56666666;0.46666667;0.51666665;0.41666666;0.30000004;0.36666667;0.28333333;0.26666665;0.25;0.23333335;
0.21666668;0.18333335;0.13333334;0.1;0.1;0.1;0.050000001;0.016666668;0.016666668;0;
0;0.83333331;0.81666666;0.73333335;0.66666669;0.55000001;0.5;0.38333333;0.30000001;0.25000003;
0.23333335;0.25;0.16666667;0.13333334;0.11666667;0.1;0.1;0.06666667;0.050000001;0.050000001;
0.050000001;      };
     };
     float_Data @["Output_lay_avg_cos_err"] {
      name="Output_lay_avg_cos_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.21145298;0.25858608;0.34091055;0.44636789;0.56195784;0.58436745;0.67026919;0.71063232;0.74907368;0.7675662;
0.81361228;0.87292033;0.90392131;0.90399623;0.93441814;0.95082706;0.96671885;0.97453851;0.97877711;0.98326063;
0.98699254;0.98900646;0.26292154;0.35645482;0.37919974;0.40445125;0.52286583;0.53796703;0.62344497;0.69104105;
0.80603242;0.83553284;0.85208601;0.91477633;0.90812868;0.95647883;0.95978028;0.96629339;0.96837234;0.97949958;
0.98028344;0.14251651;0.18341547;0.28214437;0.36667547;0.40634719;0.48970532;0.53967845;0.63720655;0.68653673;
0.8149218;0.84740955;0.86887699;0.89250547;0.9373824;0.95030099;0.94016403;0.96876115;0.97114724;0.974374;
0.97832817;0.97744042;0.9803862;0.98340589;0.9864642;0.98297423;0.99027473;0.341719;0.36232379;0.41181734;
0.44508398;0.50540715;0.55810076;0.58442783;0.60218877;0.65841037;0.69839686;0.60412443;0.73088104;0.78125548;
0.81309193;0.83592272;0.86241442;0.8894096;0.90408474;0.91604131;0.9325996;0.93317825;0.94493455;0.95032191;
0.95831728;0.96875602;0.97883481;0.98253125;0.98451948;0.28970814;0.37576196;0.40820149;0.5043627;0.53580326;
0.55475348;0.62485766;0.5706448;0.62951964;0.7171188;0.69841188;0.76014662;0.78442281;0.79659384;0.7924819;
0.84234256;0.82936198;0.89707941;0.90596586;0.91857767;0.92415196;0.95588565;0.96875101;0.97627038;0.98132819;
0.98388964;0.31050119;0.31212983;0.37479305;0.47388768;0.54479635;0.58920097;0.64675033;0.75206715;0.7828694;
0.79252553;0.8098138;0.8742128;0.89242083;0.90452462;0.92865425;0.92112827;0.947586;0.94180125;0.95651084;
0.96186966;      };
     };
     float_Data @["net_avg_cos_diff"] {
      name="net_avg_cos_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.94864506;0.95555592;0.94607306;0.97635108;0.99052113;0.99339414;0.99675077;0.99603575;0.99617559;0.99377745;
0.99729425;0.9972561;0.99803329;0.99670929;0.99523163;0.99965668;0.99967748;0.9995296;0.99965811;0.99969023;
0.99966884;0.99967045;0.92361075;0.95685822;0.96703833;0.97977418;0.99174064;0.9853785;0.99349421;0.99168301;
0.99708241;0.99716789;0.99540728;0.99227333;0.99645597;0.99800092;0.9981842;0.9965685;0.9981721;0.99766713;
0.99908596;0.95079881;0.96667033;0.98193574;0.97245336;0.97194308;0.98767263;0.96946901;0.98724866;0.99171114;
0.99587518;0.99746537;0.99441147;0.9972226;0.99846172;0.99900967;0.99829173;0.99855471;0.9991315;0.9991529;
0.99890471;0.9991973;0.9990828;0.99945813;0.99845332;0.99912578;0.99909371;0.94633484;0.98249882;0.98402804;
0.9883458;0.99496293;0.98957759;0.99277574;0.99255842;0.99406832;0.99724865;0.99213558;0.99823332;0.99790496;
0.99882418;0.99849939;0.99865669;0.99808079;0.99818039;0.99901009;0.99852115;0.99859732;0.99823159;0.99928409;
0.99872297;0.99837828;0.99895185;0.99849087;0.99841148;0.9569521;0.96638221;0.9628396;0.98994893;0.99508518;
0.98988485;0.99257058;0.97726578;0.98530608;0.99181145;0.98909777;0.99732536;0.99686784;0.99161339;0.98982245;
0.99471569;0.99303085;0.99862766;0.99496049;0.99804044;0.99561208;0.9987011;0.9990766;0.99884057;0.99920911;
0.99875402;0.97459;0.97391742;0.96989328;0.97405767;0.98589963;0.98811454;0.98592347;0.99747729;0.99662071;
0.99715132;0.99402875;0.99811536;0.99771613;0.9976694;0.99796677;0.99773097;0.99789906;0.99728227;0.9974243;
0.99825668;      };
     };
     float_Data @["net_avg_trial_cos_diff"] {
      name="net_avg_trial_cos_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.10478732;0.31239155;0.02814351;0.0443445;0.24895217;0.13917227;0.10916129;0.12581544;0.15146817;0.081612788;
0.24519823;0.25579268;0.15844667;0.24611239;0.092857294;0.10923598;0.050855827;0.014720552;0.11023161;0.17383178;
0.072264954;0.097961582;0.14568807;0.039709266;0.043978143;0.21930988;-0.00010842582;0.086545296;0.084775873;0.055418711;
0.13035758;0.035565607;0.10984384;0.23073693;0.12896727;0.013498426;0.11176757;-0.028542407;0.115872;0.16993122;
0.042908374;0.11061195;0.12763941;0.18652034;0.17356892;0.053449068;0.07696081;0.18462314;0.38911605;0.14984046;
0.098615259;0.17595272;0.012260355;0.1072536;0.1927691;0.1843621;0.020775162;0.079874396;0.042894896;0.079758532;
0.17169957;0.15115207;0.0049369433;0.15723462;0.16802466;0.15165795;0.19168861;0.17649041;0.19439591;0.36330786;
0.32171169;0.24321467;0.17908275;0.096463613;0.14338003;0.2101595;0.18056719;0.17076576;0.24006446;0.24120767;
0.32155654;0.29897788;0.22872669;0.2470807;0.19252634;0.23718518;0.17030092;0.29182723;0.15573665;0.23432954;
0.16725445;0.17236006;0.1352779;0.16701241;0.16994178;0.16694592;0.16075476;0.28051329;0.28047699;0.15079601;
0.25877246;0.18227892;0.23180515;0.20316841;0.14309138;0.16607115;0.19259357;0.13514487;0.13605344;0.24017215;
0.11776689;0.17121927;0.25932917;0.32763919;0.12093612;0.072539873;0.088105537;0.10361808;0.13226034;0.15459509;
0.10750162;0.096064843;0.19243009;0.12068323;0.12997003;0.11541382;0.15303482;0.1606667;0.24740012;0.10604549;
0.19756512;0.21456091;0.17461483;0.088163219;0.095994562;0.22893594;0.19504172;0.17902255;0.19596772;0.13150547;
0.1813488;      };
     };
     float_Data @["net_avg_avg_act_diff"] {
      name="net_avg_avg_act_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] -0.0009869705;0.0020654215;0.0020049759;0.0042236708;0.00030290941;-0.00054329302;0.00084106211;0.00018222851;0.00025352483;-0.0017620665;
0.00076639047;0.00043328665;3.9462157e-05;0.00010595941;0.00055094686;0.00031948104;0.00031462501;0.00031186143;0.00031079675;0.00030944424;
0.00034872442;0.00047548287;-0.0032885883;-0.0037064601;-0.0017943134;0.000746754;-0.00029060151;-0.0017176914;-0.00096297456;-0.00093340856;
-0.00081649813;-0.00087001617;0.00017539419;-0.00099868758;-0.00040789167;-0.00038092074;-0.00012425343;-9.3524715e-05;-0.00017098557;-0.00018503354;
-0.00014046009;-0.0038277272;-0.0026500644;-0.003435109;-0.0021050584;-0.0029058603;-0.00036330553;-0.00079153123;-0.0013226705;-0.00029053565;
-0.00051117566;-7.4723073e-05;0.00017574329;0.00014104266;6.1453589e-05;0.00011375301;0.00049684331;-0.00019780286;0.00014446375;0.00014454614;
0.00010163316;0.00031757983;0.00021233475;0.00027257166;0.00020712461;5.9877155e-05;0.0002253813;-0.0054008453;-0.0021819409;-0.0029963825;
-0.0018713068;-0.0014169185;-0.0025991995;-0.00086358347;-0.00076647988;-0.00018653421;0.00071605062;0.0031695387;0.0010644076;9.9267736e-06;
0.00035958376;1.852813e-05;9.0639609e-05;-0.0004097973;-0.0004570852;-1.3577058e-05;-0.0002679688;-3.4203946e-05;-0.00038253973;-9.0233574e-05;
-5.1819468e-05;0.000260325;0.00022418564;0.00036660061;0.0003025613;-0.0048301187;-0.0035750351;-0.0027369866;-0.0011943717;-0.001815725;
0.0013153896;0.00069834618;8.4796608e-05;-0.00076311454;0.0012689532;0.00071611017;0.00048726459;0.00046404041;0.00071000605;0.00053666363;
0.00081957382;-0.00058185059;0.00048278549;0.00073345361;0.00022892102;0.00064126187;0.0006737705;0.00052850874;0.00052139006;0.00058155105;
0.00053665292;-0.0016319294;0.00066746958;0.00071787392;0.00036893031;0.00039960397;-0.00088832661;-0.00058777322;5.6368426e-05;-0.00070851418;
-3.5196699e-05;0.00059828133;-0.00016010662;-0.00013013954;-0.00028453817;-0.00031922013;0.00065224525;-0.00014410357;0.00056850613;0.00020718931;
0.00038102214;      };
     };
     float_Data @["Hidden_avg_cos_diff"] {
      name="Hidden_avg_cos_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.91488552;0.91111201;0.89214617;0.95270228;0.98104209;0.98678821;0.99350148;0.99207157;0.99235111;0.98755485;
0.99458855;0.99451226;0.99606663;0.9934184;0.99046326;0.99931335;0.99935508;0.99905914;0.99931604;0.99938041;
0.99933773;0.99934077;0.84722155;0.9137165;0.93407655;0.95954823;0.98348135;0.97075701;0.98698837;0.98336607;
0.99416471;0.99433565;0.99081463;0.98454672;0.99291188;0.9960019;0.99636841;0.99313694;0.99634415;0.99533433;
0.99817187;0.90159768;0.93334055;0.96387148;0.94490665;0.94388634;0.97534519;0.93893796;0.97449732;0.98342234;
0.99175048;0.99493068;0.98882294;0.99444515;0.99692351;0.99801952;0.9965834;0.99710947;0.99826306;0.9983058;
0.99780947;0.99839467;0.99816561;0.99891633;0.99690646;0.99825168;0.99818748;0.89266974;0.96499753;0.96805602;
0.97669166;0.98992586;0.97915524;0.98555154;0.98511678;0.98813659;0.9944973;0.98427129;0.99646664;0.99580985;
0.9976483;0.99699873;0.9973135;0.99616164;0.99636084;0.99802035;0.99704248;0.99719453;0.99646312;0.99856824;
0.99744582;0.99675655;0.99790359;0.99698168;0.99682283;0.91390437;0.93276435;0.92567915;0.97989774;0.9901703;
0.97976965;0.9851411;0.95453137;0.97061211;0.98362279;0.97819567;0.99465078;0.99373561;0.98322672;0.97964478;
0.98943132;0.98606181;0.99725527;0.98992091;0.99608094;0.99122405;0.99740225;0.99815321;0.99768114;0.99841833;
0.99750799;0.94918013;0.94783479;0.93978661;0.94811529;0.97179919;0.97622919;0.97184688;0.99495465;0.99324155;
0.99430251;0.98805743;0.99623078;0.9954322;0.99533874;0.99593359;0.99546194;0.99579811;0.99456471;0.99484855;
0.99651343;      };
     };
     float_Data @["Output_avg_cos_diff"] {
      name="Output_avg_cos_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] -0.039162967;0.025892144;0.13542821;0.27717924;0.42570996;0.45727238;0.56934458;0.62469691;0.67532855;0.70226151;
0.76026267;0.83797342;0.87843442;0.87794393;0.91759324;0.93838471;0.9587751;0.96870011;0.97408444;0.97978407;
0.98442006;0.9867242;0.0273026;0.15531774;0.18576641;0.21873403;0.37888527;0.39595416;0.51170737;0.60023665;
0.74933624;0.78899783;0.81112242;0.89284778;0.88460845;0.94670206;0.95109493;0.95894247;0.96182346;0.97576231;
0.97680217;-0.12311823;-0.063765474;0.06337852;0.17383929;0.22103556;0.33362937;0.39756608;0.52732748;0.59242862;
0.76194316;0.8052206;0.83301735;0.86348575;0.92146403;0.93802452;0.92510003;0.96153933;0.96449584;0.96857435;
0.97350758;0.97236633;0.97626024;0.98008561;0.98382115;0.97948718;0.98859257;0.11681541;0.15652736;0.22448029;
0.27066112;0.34650159;0.41962767;0.45058748;0.47716597;0.5535745;0.60691208;0.4892045;0.64997131;0.71686745;
0.75705558;0.78800797;0.82309198;0.85839629;0.87809497;0.89397436;0.91554254;0.91539758;0.93133372;0.9381476;
0.94825155;0.96186393;0.97515649;0.97978574;0.98220044;0.054841381;0.16581275;0.21583343;0.34782898;0.38405171;
0.41508082;0.50690937;0.44006452;0.51770622;0.63306826;0.60823983;0.69140989;0.72293729;0.73827416;0.73505026;
0.79772788;0.78058672;0.86983824;0.88068563;0.89741176;0.90484166;0.94621652;0.96225095;0.97171479;0.97795773;
0.98114759;0.081366651;0.085334025;0.17951627;0.30912331;0.40408778;0.469017;0.54144037;0.67970198;0.7198875;
0.73183298;0.75492626;0.83960742;0.86356562;0.8791495;0.91052991;0.90049309;0.93459606;0.92717165;0.94592339;
0.95288825;      };
     };
     float_Data @["Hidden_avg_trial_cos_diff"] {
      name="Hidden_avg_trial_cos_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.12835829;0.38051423;0.097081937;0.047811966;0.33386394;0.31944469;0.13601594;0.2104473;0.17924134;0.2045182;
0.36641893;0.26334333;0.23406267;0.32650521;0.18571459;0.13548969;0.10168952;0.029441109;0.13736999;0.26453891;
0.14452991;0.15433349;0.25070676;0.079418533;0.12880072;0.23417783;0.040786803;0.17309059;0.16955175;0.11083741;
0.17819168;0.071131214;0.1370054;0.33731759;0.1751039;0.026996858;0.18209024;-0.015597224;0.14874132;0.25679979;
0.085816748;0.22122389;0.21451712;0.29138422;0.26529589;0.14791469;0.1539216;0.28700221;0.44864011;0.21719016;
0.19723053;0.26921037;0.065909721;0.13168672;0.30263343;0.28577876;0.083044939;0.15974879;0.12731273;0.15951709;
0.30184761;0.30230415;-0.031715799;0.23129676;0.25284502;0.17850547;0.30015159;0.27164498;0.30727118;0.48174724;
0.4797107;0.44536269;0.31705344;0.23408055;0.28676006;0.37908998;0.31986412;0.3002356;0.43870601;0.35817572;
0.47738412;0.39064506;0.33301976;0.41113329;0.34353241;0.39129713;0.29905501;0.41739285;0.26988363;0.38547722;
0.3345089;0.30311659;0.27055579;0.29240215;0.2982634;0.25263491;0.2806783;0.39784691;0.35651076;0.21950884;
0.35321233;0.36455783;0.38120711;0.36505112;0.32748273;0.24946004;0.34377012;0.18745911;0.27206662;0.31451789;
0.19406432;0.25941664;0.26952109;0.36451674;0.20030122;0.14507975;0.093048573;0.20723616;0.22292812;0.22597355;
0.17338717;0.19212969;0.30333957;0.24136645;0.25994006;0.23082764;0.30606964;0.23902674;0.37127841;0.25332794;
0.27118006;0.26369429;0.26648578;0.17632644;0.23343718;0.29204547;0.26558575;0.31654024;0.35042354;0.30455759;
0.32113102;      };
     };
     float_Data @["Output_avg_trial_cos_diff"] {
      name="Output_avg_trial_cos_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.08121635;0.24426894;-0.040794916;0.081826612;0.16404043;-0.041100152;0.082306646;0.041183554;0.16495676;-0.0412926;
0.16533136;0.24824204;0.12425575;0.20715414;4.0216728e-09;0.1244803;0.041529957;-1.9715907e-09;0.12463242;0.12468047;
-1.5443238e-09;0.041589681;0.040669397;0.04068708;-0.040844433;0.20444191;-0.041003663;-3.3931962e-09;8.3703523e-11;1.7852709e-09;
0.12380096;-1.2770455e-09;0.12401018;0.1241563;0.12425575;-1.1124333e-09;0.041444935;-0.041487593;0.083002694;0.083062612;
-5.7444134e-09;0.040628452;0.040761698;0.12245139;0.12273312;-0.041016553;6.1060201e-09;0.12341726;0.37078428;0.082490779;
4.2576431e-10;0.12402967;-0.041389;0.082820512;0.12433929;0.082945429;-0.041494619;-5.6549077e-09;-0.041522942;-5.5726304e-09;
0.083102837;-2.8309823e-09;0.041589689;0.083172493;0.16639645;0.16641991;0.12484057;0.12192331;0.081520639;0.28568026;
0.16371273;0.041066624;0.041112088;-0.041153327;-9.3507302e-10;0.041229032;0.041270278;0.041295912;0.041422945;0.16565502;
0.20718129;0.20731068;0.1244336;0.0830281;0.08304029;0.083073236;0.041546799;0.20783387;0.041589681;0.08318188;
-3.4344401e-09;0.083213009;7.7295956e-09;0.041622672;0.083246149;0.12192482;0.040831171;0.16317967;0.24539284;0.12308685;
0.20544378;-3.5665952e-09;0.082403176;0.041285727;-0.041299958;0.1240361;0.041417025;0.08283063;4.0248036e-05;0.1658264;
0.041469462;0.083021939;0.24913727;0.29076165;0.083122358;0.041566405;0.083162524;0.041586243;0.083192058;0.08321663;
0.083226673;0.040648364;0.081520632;-1.681551e-09;6.5868146e-09;-5.9255272e-09;8.3088176e-09;0.082306653;0.12352192;-0.041236963;
0.12395016;0.20676869;0.082743846;0.041425128;-4.4032931e-06;0.20729518;0.12449766;0.041504864;0.041511897;-0.04154662;
0.041566584;      };
     };
     float_Data @["Hidden_avg_avg_act_diff"] {
      name="Hidden_avg_avg_act_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] -0.001973941;0.0041308431;0.0040099518;0.0084473416;0.00060581882;-0.001086586;0.0016821242;0.00036445702;0.00050704967;-0.003524133;
0.0015327809;0.0008665733;7.8924313e-05;0.00021191883;0.0011018937;0.00063896208;0.00062925002;0.00062372285;0.0006215935;0.00061888847;
0.00069744885;0.00095096574;-0.0065771765;-0.0074129202;-0.0035886269;0.001493508;-0.00058120303;-0.0034353829;-0.0019259491;-0.0018668171;
-0.0016329963;-0.0017400323;0.00035078838;-0.0019973752;-0.00081578334;-0.00076184148;-0.00024850687;-0.00018704943;-0.00034197114;-0.00037006708;
-0.00028092018;-0.0076554543;-0.0053001288;-0.0068702181;-0.0042101168;-0.0058117206;-0.00072661106;-0.0015830625;-0.002645341;-0.0005810713;
-0.0010223513;-0.00014944615;0.00035148658;0.00028208533;0.00012290718;0.00022750603;0.00099368661;-0.00039560572;0.00028892749;0.00028909228;
0.00020326632;0.00063515967;0.0004246695;0.00054514332;0.00041424923;0.00011975431;0.0004507626;-0.010801691;-0.0043638819;-0.0059927651;
-0.0037426136;-0.0028338369;-0.0051983991;-0.0017271669;-0.0015329598;-0.00037306841;0.0014321012;0.0063390774;0.0021288153;1.9853547e-05;
0.00071916752;3.7056259e-05;0.00018127922;-0.0008195946;-0.00091417041;-2.7154116e-05;-0.00053593761;-6.8407891e-05;-0.00076507946;-0.00018046715;
-0.00010363894;0.00052065001;0.00044837128;0.00073320122;0.00060512259;-0.0096602375;-0.0071500703;-0.0054739732;-0.0023887435;-0.00363145;
0.0026307793;0.0013966924;0.00016959322;-0.0015262291;0.0025379064;0.0014322203;0.00097452919;0.00092808082;0.0014200121;0.0010733273;
0.0016391476;-0.0011637012;0.00096557097;0.0014669072;0.00045784205;0.0012825237;0.001347541;0.0010570175;0.0010427801;0.0011631021;
0.0010733058;-0.0032638588;0.0013349392;0.0014357478;0.00073786062;0.00079920795;-0.0017766532;-0.0011755464;0.00011273685;-0.0014170284;
-7.0393398e-05;0.0011965627;-0.00032021324;-0.00026027908;-0.00056907634;-0.00063844025;0.0013044905;-0.00028820714;0.0011370123;0.00041437862;
0.00076204428;      };
     };
     float_Data @["Output_avg_avg_act_diff"] {
      name="Output_avg_avg_act_diff";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] -0.047483753;-0.044475928;-0.041090105;-0.035386521;-0.026188483;-0.025541956;-0.011616367;0.0025500187;0.0042719194;0.0035518541;
0.0072615985;0.0093482463;0.01086586;0.01185035;0.010626218;0.0085965479;0.0079620704;0.0081348382;0.0077778078;0.0078449948;
0.010080753;0.018499142;-0.051726144;-0.041376859;-0.031953424;-0.020362474;-0.018980755;-0.019028073;-0.016503857;0.0044755549;
0.006175051;0.0063302908;0.0066979812;0.013010242;0.0045436625;0.0083503546;0.0050078272;0.0077729109;0.005092429;0.0081177121;
0.0055650999;-0.035021614;-0.025766285;-0.017866582;-0.013461284;-0.018806186;-0.0025311508;-0.0087169139;-0.0047840434;0.012854357;
0.014410258;0.015744668;0.013543509;0.015323508;0.016696924;0.015924228;0.013227746;0.015698593;0.014668175;0.014123672;
0.014227345;0.013060787;0.012240167;0.012192416;0.012787276;0.011167455;0.012627934;-0.071034081;-0.046856444;-0.036985543;
-0.032567609;-0.036623724;-0.027624197;-0.024618903;-0.0019562456;-0.0031073606;-0.00026418749;0.0069941916;0.0048313206;0.0043264092;
0.0037984264;0.0048579369;0.0049142172;0.0052538905;0.0053749979;0.0050719068;0.0066217226;0.0074591576;0.0081301462;0.0067839231;
0.019703576;0.019168066;0.018689239;0.0179781;0.017665887;-0.059397388;-0.053309705;-0.041894287;-0.038507942;-0.036734536;
-0.031678211;-0.029503869;-0.011320132;-7.4220974e-05;0.00055323943;0.0038979249;0.0088929432;0.010037012;0.007341241;0.0099601224;
0.0065854918;0.0022118448;0.0061141769;0.0074198288;0.0037203794;0.0076530031;0.0048796004;0.0066002705;0.0074902619;0.0082952101;
0.0081547778;-0.064021893;-0.048318997;-0.034169178;-0.0381037;-0.027410196;-0.015430006;-0.0010114777;-0.0005556618;-0.00028581792;
0.0010779187;0.0059644706;0.0040988401;0.00454588;0.004831607;0.0050608367;0.010170136;0.017627487;0.015835082;0.016828962;
0.015811412;      };
     };
     float_Data @["Hidden_avg_net_sd"] {
      name="Hidden_avg_net_sd";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.46462536;0.45978776;0.45817479;0.45789167;0.45299521;0.45602453;0.45157549;0.45010182;0.44910371;0.42565641;
0.33616921;0.33669439;0.33505329;0.33570638;0.33514714;0.33578333;0.33593211;0.33619919;0.33638036;0.33677742;
0.3366712;0.33610359;0.43087545;0.42827162;0.42152235;0.41393676;0.4104538;0.40910468;0.40684628;0.40481248;
0.40433466;0.38501737;0.3038229;0.30303991;0.30313495;0.30252057;0.30431211;0.30390441;0.30436295;0.30389637;
0.30467471;0.40656903;0.40585032;0.3995032;0.39276636;0.39545617;0.38871971;0.3845686;0.38896859;0.38552186;
0.37078533;0.29135391;0.2894375;0.29050109;0.29047731;0.29107881;0.29125473;0.2909033;0.29151884;0.29192281;
0.29171342;0.29260439;0.29279187;0.29295859;0.29342392;0.29378477;0.29405454;0.48934993;0.48284152;0.48037815;
0.47775599;0.47680616;0.4746373;0.47387388;0.4692364;0.47031811;0.45131388;0.34779155;0.34998754;0.34968147;
0.34788072;0.34771189;0.34723839;0.34735012;0.34670284;0.34616518;0.34599486;0.34531292;0.34667575;0.34638104;
0.34478489;0.34532717;0.34585366;0.34599957;0.34634265;0.44911495;0.43215784;0.42460456;0.4104549;0.40656614;
0.39683914;0.3930788;0.39827761;0.39103237;0.36973575;0.2890622;0.28783759;0.28609103;0.28546131;0.28883931;
0.28346822;0.28841421;0.28404424;0.28256664;0.28530446;0.28305519;0.28311953;0.28334126;0.28335944;0.28334758;
0.28310814;0.54927242;0.54311508;0.53764486;0.53635681;0.53166699;0.52807778;0.52808106;0.52818877;0.52608073;
0.50499129;0.39352977;0.39114323;0.39038077;0.39094341;0.39158154;0.38891122;0.39010796;0.38974866;0.39064172;
0.38970175;      };
     };
     float_Data @["Output_avg_net_sd"] {
      name="Output_avg_net_sd";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.57420355;0.52039856;0.51120895;0.47657695;0.44431654;0.44283608;0.37441075;0.31322458;0.31036153;0.3243635;
0.29983678;0.30007675;0.30390069;0.30357674;0.30592814;0.31418076;0.31524366;0.31674612;0.3184213;0.3202959;
0.31065205;0.25877216;0.56533414;0.49518046;0.4504908;0.399066;0.40881881;0.37635174;0.39206457;0.31070146;
0.27636388;0.2794714;0.27419409;0.26146212;0.27901268;0.27420938;0.28669342;0.27625707;0.29235235;0.28600082;
0.29809907;0.47650287;0.41738701;0.36607298;0.34414315;0.35331526;0.30061239;0.31137374;0.30346391;0.22844653;
0.2317984;0.22592448;0.22689222;0.23460539;0.2312959;0.23477663;0.24121578;0.24006908;0.24293435;0.24609555;
0.24650033;0.25059247;0.25329879;0.25655761;0.25855801;0.26208135;0.26366562;0.63516265;0.56046098;0.52782184;
0.49375272;0.49607155;0.46917811;0.44681382;0.33187807;0.33259922;0.32517579;0.30359215;0.3103981;0.31057811;
0.30787721;0.30791843;0.30801144;0.30898333;0.30667695;0.30694875;0.3084124;0.30757788;0.30840576;0.31096831;
0.24946713;0.25235084;0.25419751;0.25662619;0.25874463;0.57153243;0.52500105;0.48469678;0.45294538;0.44360828;
0.43895021;0.42416891;0.35726246;0.30472168;0.30922604;0.28451645;0.28594658;0.28495404;0.2829816;0.28341803;
0.28474155;0.30123889;0.29450616;0.28863683;0.30307525;0.29571375;0.30264044;0.30377379;0.30408955;0.30492327;
0.30670449;0.56525391;0.50279301;0.47198796;0.47018754;0.43851677;0.39246729;0.31554291;0.32272121;0.32228684;
0.31402716;0.29431614;0.30167231;0.30185327;0.30077186;0.30211112;0.27020863;0.2443672;0.2455187;0.24760146;
0.2515175;      };
     };
     float_Data @["Hidden_hog_pct"] {
      name="Hidden_hog_pct";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0.079999998;0.079999998;0.079999998;0.079999998;0.079999998;0.12;0.12;
0.12;0.12;0;0;0;0;0;0;0;0;
0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;
0.039999999;0;0;0;0;0;0;0;0;0;
0;0;0.039999999;0.039999999;0.079999998;0.079999998;0.079999998;0.079999998;0.079999998;0.079999998;
0.079999998;0.079999998;0.079999998;0.079999998;0.12;0.16;0.16;0;0;0;
0;0;0;0;0;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;
0.079999998;0.12;0.16;0.16;0.16;0.2;0.23999999;0.23999999;0.23999999;0.23999999;
0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0;0;0;0;0;
0;0;0;0;0;0.079999998;0.079999998;0.12;0.16;0.16;
0.16;0.16;0.16;0.16;0.16;0.16;0.16;0.16;0.16;0.16;
0.16;0;0;0;0;0;0;0;0;0;
0;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.12;0.23999999;0.23999999;0.23999999;
0.23999999;      };
     };
     float_Data @["Output_hog_pct"] {
      name="Output_hog_pct";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0;0;0;0;0;0;0;0;0.039999999;0.039999999;
0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;
0.079999998;0.079999998;0;0;0;0;0;0;0;0;
0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;
0.039999999;0;0;0;0;0;0;0;0;0.039999999;
0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;
0.039999999;0.079999998;0.079999998;0.079999998;0.079999998;0.079999998;0.079999998;0;0;0;
0;0;0;0;0;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;
0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.079999998;0.079999998;0.079999998;
0.079999998;0.079999998;0.079999998;0.079999998;0.079999998;0;0;0;0;0;
0;0;0;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;
0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.079999998;0.079999998;0.079999998;0.079999998;0.079999998;
0.079999998;0;0;0;0;0;0;0;0;0.039999999;
0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;0.039999999;
0.039999999;      };
     };
     float_Data @["Hidden_dead_pct"] {
      name="Hidden_dead_pct";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;      };
     };
     float_Data @["Output_dead_pct"] {
      name="Output_dead_pct";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;      };
     };
     float_Data @["Hidden_netmax"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_130";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="Hidden_netmax";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.95407224;0.95596957;0.95880538;0.9608857;0.96207428;0.96346807;0.96418399;0.96506804;0.96572638;0.92392617;
0.72537273;0.72609323;0.72637486;0.72669595;0.72688836;0.72713774;0.72743171;0.72765976;0.72783017;0.72792965;
0.72811538;0.72837496;0.93009776;0.93150121;0.93271703;0.93630761;0.93812603;0.93903464;0.93998069;0.94082278;
0.94179672;0.9041509;0.70705318;0.70736742;0.7079193;0.70827132;0.70845598;0.70875645;0.70905763;0.7093479;
0.70964557;0.93008065;0.93299371;0.93601161;0.93809348;0.93950605;0.94036418;0.94175786;0.94291943;0.9434244;
0.9062922;0.70825243;0.7083537;0.7085976;0.70898527;0.70940918;0.70965487;0.70997006;0.71028012;0.71062917;
0.71075869;0.71105576;0.71125382;0.71141249;0.71176511;0.7119599;0.71226281;0.95657879;0.95818752;0.95858407;
0.95943022;0.9595719;0.95960641;0.96017259;0.96044779;0.96110755;0.92210573;0.72162628;0.72208172;0.72232842;
0.72244138;0.72261375;0.72275352;0.72305816;0.72308153;0.72326618;0.723414;0.72364736;0.72377414;0.72393078;
0.72410589;0.72444111;0.72473782;0.72511172;0.72542518;0.96132082;0.96170431;0.96085733;0.96015197;0.95831722;
0.95640379;0.95508337;0.95346624;0.95244306;0.91342193;0.71351337;0.71340114;0.7133705;0.71338016;0.71369272;
0.7138502;0.71430898;0.71431357;0.71445298;0.71469599;0.714782;0.71484041;0.71496439;0.71508199;0.71537572;
0.71539217;0.99683714;0.99642438;0.99644607;0.99588984;0.99459118;0.99472922;0.99490285;0.99504346;0.99484253;
0.9549706;0.74646205;0.74625152;0.74644309;0.74644661;0.74657273;0.74677396;0.74699575;0.74733806;0.74753904;
0.74776763;      };
     };
     float_Data @["Output_netmax"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_131";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="Output_netmax";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 1.1977676;1.1216414;1.1062227;1.0781566;1.0873493;1.0957615;0.94169164;0.81446856;0.81648844;0.82462007;
0.74952215;0.75098652;0.75735933;0.75624007;0.75205785;0.7571187;0.75757289;0.75860351;0.75932747;0.76083499;
0.73496127;0.60878223;1.1144828;1.0900016;1.0659543;1.0210793;1.0477794;1.0372028;1.0443302;0.87214822;
0.76972324;0.75401133;0.6928243;0.70548147;0.70497161;0.70565659;0.70036101;0.70443267;0.7058869;0.70516235;
0.7058323;1.0634196;1.0497866;1.0342163;1.008788;1.0113078;0.95747393;0.95364302;0.95853251;0.70544457;
0.69451064;0.65126199;0.65004587;0.64516997;0.64911127;0.650374;0.64794779;0.65749246;0.65493447;0.65645254;
0.66078299;0.65988427;0.66215283;0.66389918;0.66577744;0.66600186;0.66884637;1.1784002;1.1499876;1.1518472;
1.1038158;1.1119571;1.1025878;1.0371951;0.80112499;0.80155772;0.78019971;0.71059304;0.72958541;0.74170512;
0.73419183;0.74320346;0.73838043;0.74671888;0.74574089;0.73983818;0.74505025;0.7420066;0.74530154;0.73863548;
0.59428471;0.59095114;0.59175706;0.5923667;0.59421325;1.1049021;1.0758499;1.0432931;1.0212049;1.019745;
0.99594623;0.99119186;0.87680584;0.75789768;0.728297;0.68503302;0.68799025;0.69067335;0.68274957;0.68430465;
0.68536681;0.71024722;0.69672799;0.68822438;0.6993373;0.69337445;0.68869162;0.69089609;0.69013351;0.69056386;
0.69133061;1.2015723;1.1626072;1.1679016;1.1653017;1.151751;1.0289167;0.86789703;0.86538333;0.86807626;
0.84596044;0.78153759;0.7915532;0.79156154;0.7926442;0.79465479;0.69589585;0.6377756;0.63246983;0.63626403;
0.63680023;      };
     };
     float_Data @["Hidden_avg_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_133";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="Hidden_avg_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.10736729;0.11431277;0.12085287;0.12700285;0.13278465;0.13822848;0.1433444;0.14814019;0.15263027;0.15668687;
0.15955208;0.16225195;0.16479458;0.16718283;0.16943611;0.17157841;0.1735885;0.17548166;0.17726168;0.17893501;
0.18050903;0.1819942;0.1064414;0.11267032;0.11860044;0.12413196;0.12934141;0.13421927;0.13874407;0.14298873;
0.14699365;0.1504893;0.1529319;0.15522024;0.15737012;0.1593817;0.16126236;0.16300891;0.1646588;0.16620275;
0.1676417;0.10616361;0.11202781;0.11761674;0.12279785;0.12763691;0.13217139;0.1364149;0.14033043;0.1439677;
0.14715727;0.14938518;0.1514861;0.15344152;0.1552783;0.15700403;0.15862037;0.16013587;0.16154188;0.1628699;
0.16411451;0.16526447;0.16635154;0.16738038;0.16833743;0.16924083;0.17008556;0.10709653;0.11386895;0.12020507;
0.12607481;0.13159727;0.13672967;0.14154068;0.1460802;0.15038162;0.15428506;0.15707071;0.1597326;0.1622494;
0.16460115;0.16681333;0.16887908;0.17082596;0.17263582;0.17431131;0.17588261;0.17734669;0.17872173;0.18001784;
0.1812084;0.18232542;0.18338205;0.18437058;0.18530653;0.1064485;0.11261467;0.11840715;0.12382282;0.12894115;
0.13369781;0.13819852;0.14245568;0.1463923;0.14991884;0.15233506;0.15458779;0.15670902;0.15867972;0.16052653;
0.16226181;0.16391906;0.16544768;0.16686343;0.16816902;0.16939744;0.1705388;0.17161739;0.17261492;0.17354146;
0.17441645;0.10838426;0.1163047;0.12386412;0.13095434;0.1376445;0.14393234;0.14977442;0.15524063;0.16040337;
0.16503374;0.16829774;0.17134398;0.17420711;0.17690495;0.1794271;0.18179609;0.18404017;0.18612687;0.18811226;
0.18998505;      };
     };
     float_Data @["Output_avg_act"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_134";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="Output_avg_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.10526679;0.11022536;0.11489377;0.11928898;0.12342698;0.12732282;0.13099068;0.13444388;0.13769501;0.14075589;
0.14363767;0.14635077;0.14890511;0.15131;0.15357412;0.15570578;0.15771267;0.15960212;0.16138102;0.16305581;
0.16463257;0.16611707;0.10526679;0.11022536;0.11489377;0.11928898;0.12342698;0.12732282;0.13099068;0.13444388;
0.13769501;0.14075589;0.14363767;0.14635077;0.14890511;0.15131;0.15357412;0.15570578;0.15771267;0.15960212;
0.16138102;0.10526679;0.11022536;0.11489377;0.11928898;0.12342698;0.12732282;0.13099068;0.13444388;0.13769501;
0.14075589;0.14363767;0.14635077;0.14890511;0.15131;0.15357412;0.15570578;0.15771267;0.15960212;0.16138102;
0.16305581;0.16463257;0.16611707;0.16751471;0.16883054;0.1700694;0.17123573;0.10526679;0.11022536;0.11489377;
0.11928898;0.12342698;0.12732282;0.13099068;0.13444388;0.13769501;0.14075589;0.14363767;0.14635077;0.14890511;
0.15131;0.15357412;0.15570578;0.15771267;0.15960212;0.16138102;0.16305581;0.16463257;0.16611707;0.16751471;
0.16883054;0.1700694;0.17123573;0.17233379;0.17336762;0.10526679;0.11022536;0.11489377;0.11928898;0.12342698;
0.12732282;0.13099068;0.13444388;0.13769501;0.14075589;0.14363767;0.14635077;0.14890511;0.15131;0.15357412;
0.15570578;0.15771267;0.15960212;0.16138102;0.16305581;0.16463257;0.16611707;0.16751471;0.16883054;0.1700694;
0.17123573;0.10526679;0.11022536;0.11489377;0.11928898;0.12342698;0.12732282;0.13099068;0.13444388;0.13769501;
0.14075589;0.14363767;0.14635077;0.14890511;0.15131;0.15357412;0.15570578;0.15771267;0.15960212;0.16138102;
0.16305581;      };
     };
     float_Data @["Hidden_Fm_Input_netrel"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_135";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="Hidden_Fm_Input_netrel";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.8363297;0.8363297;0.8363297;0.8363297;0.8363297;0.8363297;0.8363297;0.8363297;0.8363297;0.8363297;
0.83013332;0.83013332;0.83013332;0.83013332;0.83013332;0.83013332;0.83013332;0.83013332;0.83013332;0.83013332;
0.83264416;0.83264416;0.84466106;0.84466106;0.84466106;0.84466106;0.84466106;0.84466106;0.84466106;0.84466106;
0.84466106;0.84466106;0.84029871;0.84029871;0.84029871;0.84029871;0.84029871;0.84029871;0.84029871;0.84029871;
0.84029871;0.84748471;0.84748471;0.84748471;0.84748471;0.84748471;0.84748471;0.84748471;0.84748471;0.84748471;
0.84748471;0.84524697;0.84524697;0.84524697;0.84524697;0.84524697;0.84524697;0.84524697;0.84524697;0.84524697;
0.84524697;0.83262855;0.83262855;0.83262855;0.83262855;0.83262855;0.83262855;0.83840829;0.83840829;0.83840829;
0.83840829;0.83840829;0.83840829;0.83840829;0.83840829;0.83840829;0.83840829;0.83383739;0.83383739;0.83383739;
0.83383739;0.83383739;0.83383739;0.83383739;0.83383739;0.83383739;0.83383739;0.83166939;0.83166939;0.83166939;
0.83166939;0.83166939;0.83166939;0.83166939;0.83166939;0.85270858;0.85270858;0.85270858;0.85270858;0.85270858;
0.85270858;0.85270858;0.85270858;0.85270858;0.85270858;0.84729201;0.84729201;0.84729201;0.84729201;0.84729201;
0.84729201;0.84729201;0.84729201;0.84729201;0.84729201;0.83189362;0.83189362;0.83189362;0.83189362;0.83189362;
0.83189362;0.85107321;0.85107321;0.85107321;0.85107321;0.85107321;0.85107321;0.85107321;0.85107321;0.85107321;
0.85107321;0.84430641;0.84430641;0.84430641;0.84430641;0.84430641;0.84430641;0.84430641;0.84430641;0.84430641;
0.84430641;      };
     };
     float_Data @["Hidden_Fm_Output_netrel"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_136";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="Hidden_Fm_Output_netrel";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 0.16367029;0.16367029;0.16367029;0.16367029;0.16367029;0.16367029;0.16367029;0.16367029;0.16367029;0.16367029;
0.1698667;0.1698667;0.1698667;0.1698667;0.1698667;0.1698667;0.1698667;0.1698667;0.1698667;0.1698667;
0.16735582;0.16735582;0.15533893;0.15533893;0.15533893;0.15533893;0.15533893;0.15533893;0.15533893;0.15533893;
0.15533893;0.15533893;0.15970126;0.15970126;0.15970126;0.15970126;0.15970126;0.15970126;0.15970126;0.15970126;
0.15970126;0.15251532;0.15251532;0.15251532;0.15251532;0.15251532;0.15251532;0.15251532;0.15251532;0.15251532;
0.15251532;0.15475298;0.15475298;0.15475298;0.15475298;0.15475298;0.15475298;0.15475298;0.15475298;0.15475298;
0.15475298;0.16737148;0.16737148;0.16737148;0.16737148;0.16737148;0.16737148;0.16159174;0.16159174;0.16159174;
0.16159174;0.16159174;0.16159174;0.16159174;0.16159174;0.16159174;0.16159174;0.16616258;0.16616258;0.16616258;
0.16616258;0.16616258;0.16616258;0.16616258;0.16616258;0.16616258;0.16616258;0.16833062;0.16833062;0.16833062;
0.16833062;0.16833062;0.16833062;0.16833062;0.16833062;0.14729145;0.14729145;0.14729145;0.14729145;0.14729145;
0.14729145;0.14729145;0.14729145;0.14729145;0.14729145;0.15270802;0.15270802;0.15270802;0.15270802;0.15270802;
0.15270802;0.15270802;0.15270802;0.15270802;0.15270802;0.16810635;0.16810635;0.16810635;0.16810635;0.16810635;
0.16810635;0.14892678;0.14892678;0.14892678;0.14892678;0.14892678;0.14892678;0.14892678;0.14892678;0.14892678;
0.14892678;0.15569361;0.15569361;0.15569361;0.15569361;0.15569361;0.15569361;0.15569361;0.15569361;0.15569361;
0.15569361;      };
     };
     float_Data @["Output_Fm_Hidden_netrel"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_137";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.1572327017784119;
	val_type_fixed=0;
       };
      };
      name="Output_Fm_Hidden_netrel";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [141] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [141] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   DataTable @["TestTrialOutputData"] {
    name="TestTrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["train_mode"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_93";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="train_mode";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["group"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_133";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="group";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["trial"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["tick"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="tick";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["time"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_135";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="time";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["trial_name"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["group_name"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @["output_name"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_94";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="output_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["rt_cycles"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_95";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="rt_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["sse"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["norm_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_96";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="norm_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["cos_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_97";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="cos_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["ext_rew"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Output_lay_sse"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_98";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_lay_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Output_lay_norm_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_99";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_lay_norm_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Output_lay_cos_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_100";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_lay_cos_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Hidden_lay_net_sd"] {
      name="Hidden_lay_net_sd";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Output_lay_net_sd"] {
      name="Output_lay_net_sd";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
   DataTable @["TestEpochOutputData"] {
    name="TestEpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_sse"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["cnt_err"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["pct_cor"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_110";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="pct_cor";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["pct_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_111";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="pct_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_norm_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_112";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="avg_norm_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_cos_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_113";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="avg_cos_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_ext_rew"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["avg_cycles"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_tot"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_usr"] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Output_lay_avg_sse"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_114";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_lay_avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Output_lay_cnt_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_115";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_lay_cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Output_lay_pct_cor"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_116";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_lay_pct_cor";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Output_lay_pct_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_117";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_lay_pct_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Output_lay_avg_norm_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_118";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_lay_avg_norm_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Output_lay_avg_cos_err"] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_119";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["view_panel_wd"] {
	name="view_panel_wd";
	value 6 0=0.156739816069603;
	val_type_fixed=0;
       };
      };
      name="Output_lay_avg_cos_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Hidden_avg_net_sd"] {
      name="Hidden_avg_net_sd";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @["Output_avg_net_sd"] {
      name="Output_avg_net_sd";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      ar {
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @["LeabraStartup"] {
   name="LeabraStartup";
   short_nm="Startup";
   tags="Leabra, Startup, Parallel Batch";
   desc="run project in the background command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batches=xxx] [tag=xxx] | [b_start=xxx] [b_end=xxx] for parallel-batch mode";
   flags=STARTUP_RUN;
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["network"] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.projects["test"].networks["Network_0"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
    ProgVar @["input_data"] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["test"].data.gp["InputData"]["StdInputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["train"] {
     name="train";
     var_type=T_Object;
     object_type=Program;
     object_val=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="set this to point to your train process";
     init_from=NULL;
    };
    ProgVar @["batch"] {
     name="batch";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="set this to point to your batch process";
     init_from=NULL;
    };
    ProgVar @["batches"] {
     name="batches";
     var_type=T_Int;
     int_val=100;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="this is a \"dummy\" var for ClusterRun to set the startup arg";
     init_from=NULL;
    };
    ProgVar @["epochs"] {
     name="epochs";
     var_type=T_Int;
     int_val=10000;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="this is a \"dummy\" var for ClusterRun to set the startup arg";
     init_from=NULL;
    };
    ProgVar @["param_set"] {
     name="param_set";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of saved parameter set to apply at startup";
     init_from=NULL;
    };
    ProgVar @["tag"] {
     name="tag";
     var_type=T_String;
     string_val="_gui";
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["batch_str"] {
     name="batch_str";
     var_type=T_String;
     string_val="00";
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch number as a string (leading zeros)";
     init_from=NULL;
    };
    ProgVar @["log_dir"] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="log file directory";
     init_from=NULL;
    };
    ProgVar @["log_file_nm"] {
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @["batch_start"] {
     name="batch_start";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch starting number";
     init_from=NULL;
    };
    ProgVar @["EpochOutputData"] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["test"].data.gp["OutputData"]["EpochOutputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["TrialOutputData"] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["test"].data.gp["OutputData"]["TrialOutputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["MyClusterRun"] {
     name="MyClusterRun";
     var_type=T_Object;
     object_type=ClusterRun;
     object_val=.projects["test"].ctrl_panels["ClusterRun"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["param_sets"] {
     name="param_sets";
     var_type=T_Object;
     object_type=ParamSet_Group;
     object_val=.projects["test"].param_sets$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    IfReturn @[0] {
     desc="don't run if running in the gui!";
     flags=0;
     orig_prog_code=;
     cond {
      expr="taMisc::gui_active";
     };
    };
    RegisterArgs @[1] {
     desc="This is KEY!!! actually processes all args, including those from ProgVarFmArg guys below";
     flags=0;
     orig_prog_code=;
    };
    PrintExpr @[2] {
     desc=;
     flags=0;
     orig_prog_code=;
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
     debug=0;
    };
    Comment @[3] {
     desc="= Std variables in startup program itself =";
     flags=0;
     orig_prog_code=;
    };
    ProgVarFmArg @[4] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=.projects["test"].programs["LeabraStartup"]$$;
     var_name="tag";
     arg_name="tag";
    };
    ProgVarFmArg @[5] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=$.projects["test"].programs["LeabraStartup"]$;
     var_name="log_dir";
     arg_name="log_dir";
    };
    ProgVarFmArg @[6] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=$.projects["test"].programs["LeabraStartup"]$;
     var_name="param_set";
     arg_name="param_set";
    };
    ProgVarFmArg @[7] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[8] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="rnd_init";
     arg_name="rnd_init";
    };
    ProgVarFmArg @[9] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     var_name="max_batch";
     arg_name="batches";
    };
    ProgVarFmArg @[10] {
     desc="b_end is parallel-batch mode of operation (see b_start)";
     flags=0;
     orig_prog_code=;
     prog=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     var_name="max_batch";
     arg_name="b_end";
    };
    ProgVarFmArg @[11] {
     desc="b_start is parallel-batch mode of operation (see also b_end)";
     flags=0;
     orig_prog_code=;
     prog=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     var_name="batch";
     arg_name="b_start";
    };
    ProgVarFmArg @[12] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="save_wts_interval";
     arg_name="save_wts_interval";
    };
    ProgVarFmArg @[13] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="save_final_wts";
     arg_name="save_final_wts";
    };
    ControlPanelsFmArgs @[14] {
     desc="sets any arg listed in the control panel";
     flags=NEW_EL;
     orig_prog_code=;
     ctrl_panel_var=.projects["test"].programs["LeabraStartup"].vars["MyClusterRun"]$$;
    };
    If @[15] {
     desc="set variables to values stored in a param set";
     flags=0;
     orig_prog_code="if (Act";
     cond {
      expr="param_set.nonempty()";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc=;
       flags=CAN_REVERT_TO_CODE;
       orig_prog_code="ActiveParamSet->CopySavedToActive()";
       result_var=NULL;
       obj=.projects["test"].programs["LeabraStartup"].vars["param_sets"]$$;
       method=ParamSet_Group::LoadParamSet;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="set_name";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="param_set";
	 };
	};
       };
       meth_sig="bool LoadParamSet(taString& set_name)";
       meth_desc=;
      };
     };
    };
    Comment @[16] {
     desc="= Add your own variables here =";
     flags=0;
     orig_prog_code=;
    };
    Comment @[17] {
     desc="= Below saves log files of standard data tables =";
     flags=0;
     orig_prog_code=;
    };
    If @[18] {
     desc="if passed b_start, then turn off init_batch in Batch program, so it starts here instead of 0";
     flags=0;
     orig_prog_code=;
     cond {
      expr="taMisc::CheckArgByName(\"b_start\")";
     };
     true_code {
      name=;
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc="directly set variable on batch program";
       flags=0;
       orig_prog_code=;
       result_var=NULL;
       obj=.projects["test"].programs["LeabraStartup"].vars["batch"]$$;
       method=Program::SetVar;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="var_nm";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="\"init_batch\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="value";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="bool SetVar(taString& var_nm, Variant& value)";
       meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
      };
      ProgVarFmArg @[1] {
       desc="read in the arg to us too, so we can set file names based on it";
       flags=0;
       orig_prog_code=;
       prog=$.projects["test"].programs["LeabraStartup"]$;
       var_name="batch_start";
       arg_name="b_start";
      };
      MiscCall @[2] {
       desc="string version with leading zeros";
       flags=0;
       orig_prog_code=;
       result_var=.projects["test"].programs["LeabraStartup"].vars["batch_str"]$$;
       object_type=taMisc;
       method=taMisc::LeadingZeros;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="num";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="batch_start";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="len";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="2";
	 };
	};
       };
      };
      VarIncr @[3] {
       desc="add to tag for setting log file names";
       flags=0;
       orig_prog_code=;
       var=.projects["test"].programs["LeabraStartup"].vars["tag"]$$;
       expr {
	expr="\".\" + batch_str";
       };
      };
      If @[4] {
       desc="save startup args: only for first job in parallel batch mode, or this should be 0 otherwise in any case";
       flags=0;
       orig_prog_code=;
       cond {
	expr="batch_start == 0";
       };
       true_code {
	name=;
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 desc="save args to file: last arg is to include dmem proc number";
	 flags=0;
	 orig_prog_code=;
	 result_var=.projects["test"].programs["LeabraStartup"].vars["log_file_nm"]$$;
	 obj=.projects["test"].programs["LeabraStartup"].vars["EpochOutputData"]$$;
	 method=taBase::GetFileNameFmProject;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="ext";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="\".args\"";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="tag";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    expr="tag.before(\".00\",-1)";
	   };
	  };
	  ProgArg @[2] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="subdir";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    expr="log_dir";
	   };
	  };
	  ProgArg @[3] {
	   arg_type=bool;
	   type="bool";
	   name="dmem_proc_no";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    expr="false";
	   };
	  };
	 };
	 meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
	 meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
	};
	MiscCall @[1] {
	 desc=;
	 flags=0;
	 orig_prog_code=;
	 result_var=NULL;
	 object_type=taMisc;
	 method=taMisc::FullArgStringToFile;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="fname";
	   required=1;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    expr="log_file_nm";
	   };
	  };
	 };
	};
       };
      };
     };
    };
    Else @[19] {
     desc=;
     flags=0;
     orig_prog_code=;
     else_code {
      name=;
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       desc="save args to file: last arg is to include dmem proc number";
       flags=0;
       orig_prog_code=;
       result_var=$.projects["test"].programs["LeabraStartup"].vars["log_file_nm"]$;
       obj=$.projects["test"].programs["LeabraStartup"].vars["EpochOutputData"]$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\".args\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="tag";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
       meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
      };
      MiscCall @[1] {
       desc=;
       flags=0;
       orig_prog_code=;
       result_var=NULL;
       object_type=taMisc;
       method=taMisc::FullArgStringToFile;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_file_nm";
	 };
	};
       };
      };
     };
    };
    MiscCall @[20] {
     desc="report any args that didn't get used!";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     orig_prog_code="taMisc::ReportUnusedArgs()";
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::ReportUnusedArgs;
     meth_args {
      name="ProgArg_List_0";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="err";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
    };
    Comment @[21] {
     desc="== Save epoch log -- on by default ==";
     flags=0;
     orig_prog_code=;
    };
    MethodCall @[22] {
     desc="last arg is to include dmem proc number";
     flags=0;
     orig_prog_code=;
     result_var=$.projects["test"].programs["LeabraStartup"].vars["log_file_nm"]$;
     obj=$.projects["test"].programs["LeabraStartup"].vars["EpochOutputData"]$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[23] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=0;
     orig_prog_code=;
     result_var=NULL;
     obj=$.projects["test"].programs["LeabraStartup"].vars["EpochOutputData"]$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    PrintVar @[24] {
     desc=;
     flags=0;
     orig_prog_code=;
     message="Saving epoch log data to:";
     print_var=$.projects["test"].programs["LeabraStartup"].vars["log_file_nm"]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    Comment @[25] {
     desc="== Save trial log -- OFF by default ==";
     flags=0;
     orig_prog_code=;
    };
    MethodCall @[26] {
     desc="last arg is to include dmem proc number";
     flags=OFF;
     orig_prog_code=;
     result_var=$.projects["test"].programs["LeabraStartup"].vars["log_file_nm"]$;
     obj=.projects["test"].programs["LeabraStartup"].vars["TrialOutputData"]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[27] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF;
     orig_prog_code=;
     result_var=NULL;
     obj=$.projects["test"].programs["LeabraStartup"].vars["TrialOutputData"]$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    PrintVar @[28] {
     desc=;
     flags=OFF;
     orig_prog_code=;
     message="Saving trial log data to:";
     print_var=$.projects["test"].programs["LeabraStartup"].vars["log_file_nm"]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    OtherProgramVar @[29] {
     desc="propagate the tag";
     flags=0;
     orig_prog_code=;
     other_prog=.projects["test"].programs.gp["LeabraAll_Std"]["SaveWeights"]$$;
     set_other=1;
     var_1=$.projects["test"].programs["LeabraStartup"].vars["tag"]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[30] {
     desc=;
     flags=0;
     orig_prog_code=;
     expr {
      expr="\"Running: \" << batch.name";
     };
     debug=0;
    };
    ProgramCall @[31] {
     desc=;
     flags=0;
     orig_prog_code=;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="input_data";
       };
      };
     };
     target=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     targ_ld_init="*LeabraBatch*";
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program_Group @.gp["LeabraAll_Std"] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @["LeabraBatch"] {
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["batch"] {
      name="batch";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @["init_batch"] {
      name="init_batch";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="initialize batch counter at start of run -- turn off if using \"parallel batch\" mode to run different batches on different processes";
      init_from=NULL;
     };
     ProgVar @["max_batch"] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of batch runs to perform";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=0;
      orig_prog_code=;
      network_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$$;
      local_ctr_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="init_batch";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       NetCounterInit @[0] {
	desc="initializes local batch counter and batch field on network";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
	local_ctr_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
	counter=Network::batch;
	update_after=0;
       };
      };
     };
     Else @[1] {
      desc=;
      flags=0;
      orig_prog_code=;
      else_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MemberAssign @[0] {
	desc="just set directly to current batch value";
	flags=0;
	orig_prog_code=;
	obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
	path="batch";
	expr {
	 expr="batch";
	};
	update_after=0;
       };
      };
     };
     WhileLoop @[2] {
      desc="the main loop over training runs";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="true";
	  };
	 };
	};
	target=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
	local_ctr_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraTrain"] {
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Train, RndSeedList";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task.  Also has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
    flags=0;
    objs {
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed_List @["rnd_seeds"] {
      name="rnd_seeds";
      seeds {
       name="seeds";
       el_typ=RndSeed;
       el_def=0;
       RndSeed @["RndSeed_1"] {
	name="RndSeed_1";
	rnd_seed=2878175685;
       };
       RndSeed @["RndSeed_2"] {
	name="RndSeed_2";
	rnd_seed=2878175686;
       };
       RndSeed @["RndSeed_3"] {
	name="RndSeed_3";
	rnd_seed=2878175687;
       };
       RndSeed @["RndSeed_4"] {
	name="RndSeed_4";
	rnd_seed=2878175688;
       };
       RndSeed @["RndSeed_5"] {
	name="RndSeed_5";
	rnd_seed=2878175689;
       };
       RndSeed @["RndSeed_6"] {
	name="RndSeed_6";
	rnd_seed=2878175690;
       };
       RndSeed @["RndSeed_7"] {
	name="RndSeed_7";
	rnd_seed=2878175691;
       };
       RndSeed @["RndSeed_8"] {
	name="RndSeed_8";
	rnd_seed=2878175692;
       };
       RndSeed @["RndSeed_9"] {
	name="RndSeed_9";
	rnd_seed=2878175693;
       };
       RndSeed @["RndSeed_10"] {
	name="RndSeed_10";
	rnd_seed=2878175694;
       };
       RndSeed @["RndSeed_11"] {
	name="RndSeed_11";
	rnd_seed=2878175695;
       };
       RndSeed @["RndSeed_12"] {
	name="RndSeed_12";
	rnd_seed=2878175696;
       };
       RndSeed @["RndSeed_13"] {
	name="RndSeed_13";
	rnd_seed=2878175697;
       };
       RndSeed @["RndSeed_14"] {
	name="RndSeed_14";
	rnd_seed=2878175698;
       };
       RndSeed @["RndSeed_15"] {
	name="RndSeed_15";
	rnd_seed=2878175699;
       };
       RndSeed @["RndSeed_16"] {
	name="RndSeed_16";
	rnd_seed=2878175700;
       };
       RndSeed @["RndSeed_17"] {
	name="RndSeed_17";
	rnd_seed=2878175701;
       };
       RndSeed @["RndSeed_18"] {
	name="RndSeed_18";
	rnd_seed=2878175702;
       };
       RndSeed @["RndSeed_19"] {
	name="RndSeed_19";
	rnd_seed=2878175703;
       };
       RndSeed @["RndSeed_20"] {
	name="RndSeed_20";
	rnd_seed=2878175704;
       };
       RndSeed @["RndSeed_21"] {
	name="RndSeed_21";
	rnd_seed=2878175705;
       };
       RndSeed @["RndSeed_22"] {
	name="RndSeed_22";
	rnd_seed=2878175706;
       };
       RndSeed @["RndSeed_23"] {
	name="RndSeed_23";
	rnd_seed=2878175707;
       };
       RndSeed @["RndSeed_24"] {
	name="RndSeed_24";
	rnd_seed=2878175708;
       };
       RndSeed @["RndSeed_25"] {
	name="RndSeed_25";
	rnd_seed=2878175709;
       };
      };
     };
     RndSeed @["rnd_seed"] {
      name="rnd_seed";
      rnd_seed=1208639044;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @["RndInitType"] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @["OLD_SEED"] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @["NEW_SEED"] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
       DynEnumItem @["BATCH_SEEDS"] {
	name="BATCH_SEEDS";
	value=2;
	desc="use a fixed list of random seeds with the current batch number selecting the seed to use -- provides a consistent set of initial conditions for each batch regardless..";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["no_prompts"] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["max_epoch"] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["epoch"] {
      name="epoch";
      var_type=T_Int;
      int_val=19;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["train_mode"] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["rnd_init"] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].types["RndInitType"]$$;
       value=2;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @["err_stopcrit"] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion for training, in terms of count of trials with errors in the epoch (nework cnt_err)";
      init_from=NULL;
     };
     ProgVar @["n_under_thr"] {
      name="n_under_thr";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of times network needs to be under stopcrit threshold to actually stop";
      init_from=NULL;
     };
     ProgVar @["save_final_wts"] {
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the network's weights at the end of training?  ";
      init_from=NULL;
     };
     ProgVar @["save_wts_interval"] {
      name="save_wts_interval";
      var_type=T_Int;
      int_val=-1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the weights every this many epochs, if number is >= 1 (otherwise do not save weights)";
      init_from=NULL;
     };
     ProgVar @["n_under_cnt"] {
      name="n_under_cnt";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current under threshold counter";
      init_from=NULL;
     };
     ProgVar @["rnd_seeds"] {
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      object_val=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seeds"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["train_timer"] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["test"].networks["Network_0"].train_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["rnd_seed"] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seed"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["GetRandomSeed"] {
      desc=;
      flags=0;
      orig_prog_code=;
      name="GetRandomSeed";
      return_type=T_Int;
      object_type=taOBase;
      args {
       name=;
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	local_vars {
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       Switch @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	switch_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_init"]$$;
	cases {
	 name=;
	 el_typ=CaseBlock;
	 el_def=0;
	 CaseBlock @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  prog_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    desc="restore previous random seed (all runs produce same results) -- click on rnd_seed object to generate a new seed to use for this if you want";
	    flags=0;
	    orig_prog_code=;
	    result_var=NULL;
	    obj=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$$;
	    method=RndSeed::OldSeed;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void OldSeed()";
	    meth_desc=" restore current seed to random num generator";
	   };
	  };
	  case_val {
	   expr="OLD_SEED";
	  };
	 };
	 CaseBlock @[1] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  prog_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    desc="new random numbers each time";
	    flags=0;
	    orig_prog_code=;
	    result_var=NULL;
	    obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$;
	    method=RndSeed::NewSeed;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void NewSeed()";
	    meth_desc=" set the seed to a new random value (based on time and process id)";
	   };
	  };
	  case_val {
	   expr="NEW_SEED";
	  };
	 };
	 CaseBlock @[2] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  prog_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	    flags=0;
	    orig_prog_code=;
	    result_var=NULL;
	    obj=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seeds"]$$;
	    method=RndSeed_List::UseSeed;
	    meth_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=int;
	      type="int";
	      name="idx";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network.batch % rnd_seeds.seeds.size";
	      };
	     };
	    };
	    meth_sig="void UseSeed(int idx)";
	    meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
	   };
	  };
	  case_val {
	   expr="BATCH_SEEDS";
	  };
	 };
	};
       };
      };
     };
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["no_prompts"]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     AssignExpr @[2] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$$;
      expr {
       expr="network.train_time";
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$$;
      expr {
       expr="0";
      };
     };
     FunctionCall @[4] {
      desc="initialize random seed";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      fun=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].functions["GetRandomSeed"]$$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WtInitPrompt @[5] {
      desc="don't initialize weights without checking";
      flags=0;
      orig_prog_code=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="need to have built network by now in any case, so do it here to make double sure -- prevents errs when loading project with startup program";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Build;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
       MethodCall @[1] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[2] {
	desc=;
	flags=0;
	orig_prog_code=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=0;
      orig_prog_code=;
      result_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$$;
      expr {
       expr="network.epoch";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     AssignExpr @[2] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
      expr {
       expr="0";
      };
     };
     MemberAssign @[3] {
      desc="set network's training mode to our local value";
      flags=0;
      orig_prog_code=;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     FunctionCall @[4] {
      desc="initialize random seed";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      fun=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].functions["GetRandomSeed"]$;
      fun_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[7] {
      desc=;
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter";
	flags=0;
	orig_prog_code=;
	network_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	local_ctr_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
	counter=Network::epoch;
	update_after=0;
       };
       If @[2] {
	desc=;
	flags=0;
	orig_prog_code=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 VarIncr @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
	  expr {
	   expr="1";
	  };
	 };
	 IfBreak @[1] {
	  desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	  flags=0;
	  orig_prog_code=;
	  cond {
	   expr="n_under_cnt >=  n_under_thr";
	  };
	 };
	};
       };
       Else @[3] {
	desc=;
	flags=0;
	orig_prog_code=;
	else_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  result_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       If @[4] {
	desc=;
	flags=0;
	orig_prog_code=;
	cond {
	 expr="save_wts_interval >= 1";
	};
	true_code {
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	  cond {
	   expr="epoch % save_wts_interval == 0";
	  };
	  true_code {
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   ProgramCall @[0] {
	    desc=;
	    flags=0;
	    orig_prog_code=;
	    prog_args {
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=Network;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network";
	      };
	     };
	    };
	    target=$.projects["test"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	    targ_ld_init="*SaveWeights*";
	   };
	  };
	 };
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     If @[8] {
      desc=;
      flags=0;
      orig_prog_code=;
      cond {
       expr="save_final_wts";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.projects["test"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	targ_ld_init="*SaveWeights*";
       };
      };
     };
     MethodCall @[9] {
      desc=;
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
    };
    step_prog=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"]$$;
    step_n=1;
   };
   Program @["LeabraEpoch"] {
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=2;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["data_loop_order"] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      name="trial";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["step_on_err"] {
      name="step_on_err";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["test"].networks["Network_0"].epoch_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=6;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      orig_prog_code=;
      network_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$$;
      local_ctr_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=0;
      orig_prog_code=;
      result_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      local_ctr_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      desc="start the epoch timer to record computation time per epoch";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[3] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[4] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrial"]$$;
	targ_ld_init="*LeabraTrial*";
       };
       If @[1] {
	desc=;
	flags=0;
	orig_prog_code=;
	cond {
	 expr="step_on_err && network.sse > 0.0";
	};
	true_code {
	 name="ProgEl_List_100";
	 el_typ=ProgCode;
	 el_def=0;
	 StopStepPoint @[0] {
	  desc=;
	  flags=0;
	  orig_prog_code=;
	 };
	};
       };
      };
      data_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["input_data"]$$;
      index_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_index"]$$;
      order_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_order"]$$;
      order=PERMUTED;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[5] {
      desc="if full batch mode, update only at end of epoch";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[6] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[7] {
      desc="done with the computation in the epoch -- record time it took";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[8] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpoch"]$;
    step_n=1;
   };
   Program @["LeabraTrial"] {
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["qtr"] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      desc="initializes various counters at start of trial";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      orig_prog_code="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=0;
      orig_prog_code=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects["test"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      desc=;
      flags=0;
      orig_prog_code="for(qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"]$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      desc="after the trial is over, do final computations";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      update_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["update_net_view"]$$;
     };
    };
    step_prog=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraCycle"]$$;
    step_n=1;
   };
   Program @["LeabraQuarter"] {
    name="LeabraQuarter";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      name="cycle";
      var_type=T_Int;
      int_val=100;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=0;
      orig_prog_code=;
      network_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$$;
      local_ctr_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["cycle_max"] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cyc"] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      orig_prog_code="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.projects["test"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      desc="initializes various counters at start of settling";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      orig_prog_code="cycle_max = network.CycleRunMax()";
      result_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].prog_code[0].local_vars["cycle_max"]$$;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      desc="// the main loop over cycles of updating";
      flags=0;
      orig_prog_code="for(cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraCycle"]$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	orig_prog_code="cycle = network.cycle";
	result_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["cycle"]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      update_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraCycle"] {
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing lthreads.n_cycles cycles of activation updating";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$;
      update_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["ApplyInputs"] {
    name="ApplyInputs";
    short_nm="Inputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      name="LayerWriter_0";
      data=$.projects["test"].data.gp["InputData"]["StdInputData"]$;
      network=$.projects["test"].networks["Network_0"]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="RandomSpec_7": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	col_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="RandomSpec_8": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="RandomSpec_9": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["LayerWriter_0"] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["test"].programs.gp["LeabraAll_Std"]["ApplyInputs"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraTrialMonitor"] {
    name="LeabraTrialMonitor";
    short_nm="TrialMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	monitor=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["train_mode"] {
	name="train_mode";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group"] {
	name="group";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	name="trial";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["tick"] {
	name="tick";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["time"] {
	name="time";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	name="trial_name";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	name="group_name";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["output_name"] {
	name="output_name";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["rt_cycles"] {
	name="rt_cycles";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	name="sse";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["norm_err"] {
	name="norm_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_err"] {
	name="cos_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	name="ext_rew";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_sse"] {
	name="lay_sse";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_norm_err"] {
	name="lay_norm_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cos_err"] {
	name="lay_cos_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_net_sd"] {
	name="lay_net_sd";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_cos_diff"] {
	name="net_cos_diff";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="cos_diff";
	var_label="net_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_trial_cos_diff"] {
	name="net_trial_cos_diff";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="trial_cos_diff";
	var_label="net_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_act_diff"] {
	name="net_avg_act_diff";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_act_diff";
	var_label="net_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_diff"] {
	name="cos_diff";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.cos_diff";
	var_label="cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_cos_diff"] {
	name="trial_cos_diff";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.trial_cos_diff";
	var_label="trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_act_diff"] {
	name="avg_act_diff";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_act_diff";
	var_label="avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["test"].networks["Network_0"]$;
      data=$.projects["test"].data.gp["OutputData"]["TrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"]$;
    step_n=1;
   };
   Program @["LeabraEpochMonitor"] {
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	monitor=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	name="avg_sse";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	name="cnt_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_cor"] {
	name="pct_cor";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_err"] {
	name="pct_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_norm_err"] {
	name="avg_norm_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_err"] {
	name="avg_cos_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	name="avg_ext_rew";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	name="avg_cycles";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	name="epoch_time_tot";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	name="epoch_time_usr";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_sse"] {
	name="lay_avg_sse";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cnt_err"] {
	name="lay_cnt_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_cor"] {
	name="lay_pct_cor";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_err"] {
	name="lay_pct_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_norm_err"] {
	name="lay_avg_norm_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_cos_err"] {
	name="lay_avg_cos_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_cos_diff"] {
	name="net_avg_cos_diff";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_cos_diff";
	var_label="net_avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_trial_cos_diff"] {
	name="net_avg_trial_cos_diff";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_trial_cos_diff";
	var_label="net_avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_avg_act_diff"] {
	name="net_avg_avg_act_diff";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_avg_act_diff";
	var_label="net_avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_diff"] {
	name="avg_cos_diff";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_cos_diff";
	var_label="avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_trial_cos_diff"] {
	name="avg_trial_cos_diff";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_trial_cos_diff";
	var_label="avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_avg_act_diff"] {
	name="avg_avg_act_diff";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_avg_act_diff";
	var_label="avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_net_sd"] {
	name="avg_net_sd";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["hog_pct"] {
	name="hog_pct";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.hog_pct";
	var_label="hog_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["dead_pct"] {
	name="dead_pct";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.dead_pct";
	var_label="dead_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["netmax"] {
	name="netmax";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_netin.max";
	var_label="netmax";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_act"] {
	name="avg_act";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable=".layers.acts_p_avg";
	var_label="avg_act";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["netrel"] {
	name="netrel";
	monitor=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="prjns.avg_netin_rel";
	var_label="netrel";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["test"].networks["Network_0"]$;
      data=$.projects["test"].data.gp["OutputData"]["EpochOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["OutputData"]["EpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["test"].networks["Network_0"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=0;
      orig_prog_code=;
      result_var=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     Comment @[6] {
      desc="NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
      flags=0;
      orig_prog_code=;
     };
    };
    step_prog=$.projects["test"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"]$;
    step_n=1;
   };
   Program @["SaveWeights"] {
    name="SaveWeights";
    short_nm="SavWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["tag"] {
      name="tag";
      var_type=T_String;
      string_val="_gui";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @["wts_subdir"] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @["fname"] {
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/emergent/test/leabra_std.00_0010.wts.gz";
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @["epoch_str"] {
      name="epoch_str";
      var_type=T_String;
      string_val="0010";
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["batch_str"] {
      name="batch_str";
      var_type=T_String;
      string_val="00";
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["final_tag"] {
      name="final_tag";
      var_type=T_String;
      string_val=".00_0010";
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=0;
      orig_prog_code=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=0;
      orig_prog_code=;
      result_var=.projects["test"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["batch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=0;
      orig_prog_code=;
      result_var=.projects["test"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["epoch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=0;
      orig_prog_code=;
      result_var=.projects["test"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["final_tag"]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=0;
      orig_prog_code=;
      result_var=.projects["test"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["fname"]$$;
      obj=.projects["test"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp["LeabraAll_Test"] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   debug_mode=0;
   Program @["LeabraEpochTest"] {
    name="LeabraEpochTest";
    short_nm="EpcTest";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @["data_loop_order"] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["test"].data.gp["OutputData"]["TestTrialOutputData"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["test"].networks["Network_0"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=6;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      orig_prog_code=;
      network_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$$;
      local_ctr_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=0;
      orig_prog_code=;
      result_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      local_ctr_var=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[1] {
      desc="set to testing mode";
      flags=NEW_EL;
      orig_prog_code=;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[2] {
      desc="get pointer to epoch timer object on network";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="start the epoch timer to record computation time per epoch";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[4] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=0;
      orig_prog_code=;
      loop_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["input_data"]$$;
      index_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_index"]$$;
      order_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_order"]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      desc="if full batch mode, update only at end of epoch";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[8] {
      desc="done with the computation in the epoch -- record time it took";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[10] {
      desc="set back to training mode";
      flags=NEW_EL;
      orig_prog_code=;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
    step_prog=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"]$;
    step_n=1;
   };
   Program @["LeabraTrialTest"] {
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["qtr"] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=0;
      orig_prog_code=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=0;
	orig_prog_code=;
	result_var=NULL;
	obj=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      desc="initializes various counters at start of trial";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      orig_prog_code="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=0;
      orig_prog_code=;
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects["test"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      desc=;
      flags=0;
      orig_prog_code="for(qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      desc="after the trial is over, do final computations";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=0;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      update_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"]$$;
    step_n=1;
   };
   Program @["LeabraQuarterTest"] {
    name="LeabraQuarterTest";
    short_nm="QrtTst";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=0;
      orig_prog_code=;
      network_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$$;
      local_ctr_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      desc=;
      flags=0;
      orig_prog_code=;
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["cycle_max"] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cyc"] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	objs_ptr=0;
	flags=SAVE_VAL|LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      orig_prog_code="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF;
      orig_prog_code=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="grab_camera_img";
	required=1;
	def_val=;
	prev_expr="input_data";
	expr {
	 expr=;
	};
       };
      };
      target=NULL;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      desc="initializes various counters at start of settling";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      desc=;
      flags=CAN_REVERT_TO_CODE;
      orig_prog_code="cycle_max = network.CycleRunMax()";
      result_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].prog_code[0].local_vars["cycle_max"]$$;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      desc="// the main loop over cycles of updating";
      flags=0;
      orig_prog_code="for(cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=0;
	orig_prog_code=;
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"]$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	orig_prog_code="cycle = network.cycle";
	result_var=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["cycle"]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      update_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraCycleTest"] {
    name="LeabraCycleTest";
    short_nm="CycTest";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=0;
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=0;
      orig_prog_code=;
      network_var=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$;
      update_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["ApplyInputsTest"] {
    name="ApplyInputsTest";
    short_nm="InTest";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      name="LayerWriter_0";
      data=$.projects["test"].data.gp["InputData"]["StdInputData"]$;
      network=$.projects["test"].networks["Network_0"]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	col_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["LayerWriter_0"] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["test"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr="true";
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraTrialMonitorTest"] {
    name="LeabraTrialMonitorTest";
    short_nm="TrlMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	monitor=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["train_mode"] {
	name="train_mode";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group"] {
	name="group";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	name="trial";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["tick"] {
	name="tick";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["time"] {
	name="time";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	name="trial_name";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	name="group_name";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["output_name"] {
	name="output_name";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["rt_cycles"] {
	name="rt_cycles";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	name="sse";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["norm_err"] {
	name="norm_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_err"] {
	name="cos_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	name="ext_rew";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_sse"] {
	name="lay_sse";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_norm_err"] {
	name="lay_norm_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cos_err"] {
	name="lay_cos_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_net_sd"] {
	name="lay_net_sd";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["test"].networks["Network_0"]$;
      data=$.projects["test"].data.gp["OutputData"]["TestTrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["OutputData"]["TestTrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @["LeabraEpochMonitorTest"] {
    name="LeabraEpochMonitorTest";
    short_nm="EpcMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	name="batch";
	monitor=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	name="epoch";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	name="avg_sse";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	name="cnt_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_cor"] {
	name="pct_cor";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_err"] {
	name="pct_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_norm_err"] {
	name="avg_norm_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_err"] {
	name="avg_cos_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	name="avg_ext_rew";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	name="avg_cycles";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	name="epoch_time_tot";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	name="epoch_time_usr";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_sse"] {
	name="lay_avg_sse";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cnt_err"] {
	name="lay_cnt_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_cor"] {
	name="lay_pct_cor";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_err"] {
	name="lay_pct_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_norm_err"] {
	name="lay_avg_norm_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_cos_err"] {
	name="lay_avg_cos_err";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_net_sd"] {
	name="avg_net_sd";
	monitor=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["test"].networks["Network_0"]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["test"].networks["Network_0"]$;
      data=.projects["test"].data.gp["OutputData"]["TestEpochOutputData"]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["test"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["test"].data.gp["OutputData"]["TestEpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["test"].networks["Network_0"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=0;
      orig_prog_code=;
      result_var=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_timer"]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=0;
      orig_prog_code=;
      result_var=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_timer"]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=0;
      orig_prog_code=;
      result_var=NULL;
      obj=$.projects["test"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser2"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_91";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     name="view_win_lft";
     value 6 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     name="view_win_top";
     value 6 0=0.02378929406404495;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     name="view_win_wd";
     value 6 0=0.9957559704780579;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     name="view_win_ht";
     value 6 0=0.8181818127632141;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAABAAAAAfwAAAKMAQAAAAcBAAAAAQE=";
     val_type_fixed=0;
    };
   };
   name="Browser2";
   m_data=.projects["test"]$$;
   visible=1;
   win_name=".projects[\"test\"] - test.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_92";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     name="Navigator";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["test"]$;
    };
    PanelViewer @["Editor"] {
     name="Editor";
     m_data=NULL;
     visible=1;
    };
    T3PanelViewer @["Visualizer"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_93";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Visualizer";
     m_data=NULL;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["EpochOutputData"] {
       name="EpochOutputData";
       m_data=NULL;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @["EpochOutputData_Graph"] {
	  name="EpochOutputData_Graph";
	  m_data=$.projects["test"].data.gp["OutputData"]["EpochOutputData"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["batch"] {
	    name="batch";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["batch"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=5: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["epoch"] {
	    name="epoch";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["epoch"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=27: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_sse"] {
	    name="avg_sse";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["avg_sse"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=8.06164: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["cnt_err"] {
	    name="cnt_err";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["cnt_err"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=6: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["pct_cor"] {
	    name="pct_cor";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["pct_cor"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["pct_err"] {
	    name="pct_err";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["pct_err"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_norm_err"] {
	    name="avg_norm_err";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["avg_norm_err"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_cos_err"] {
	    name="avg_cos_err";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["avg_cos_err"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_ext_rew"] {
	    name="avg_ext_rew";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["avg_ext_rew"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["avg_cycles"] {
	    name="avg_cycles";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["avg_cycles"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=5.83333: fix_max=0: max=8.5: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["epoch_time_tot"] {
	    name="epoch_time_tot";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_tot"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["epoch_time_usr"] {
	    name="epoch_time_usr";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_usr"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_lay_avg_sse"] {
	    name="Output_lay_avg_sse";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_lay_avg_sse"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_lay_cnt_err"] {
	    name="Output_lay_cnt_err";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_lay_cnt_err"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_lay_pct_cor"] {
	    name="Output_lay_pct_cor";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_lay_pct_cor"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_lay_pct_err"] {
	    name="Output_lay_pct_err";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_lay_pct_err"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_lay_avg_norm_err"] {
	    name="Output_lay_avg_norm_err";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_lay_avg_norm_err"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_lay_avg_cos_err"] {
	    name="Output_lay_avg_cos_err";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_lay_avg_cos_err"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["net_avg_cos_diff"] {
	    name="net_avg_cos_diff";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_cos_diff"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["net_avg_trial_cos_diff"] {
	    name="net_avg_trial_cos_diff";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_trial_cos_diff"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["net_avg_avg_act_diff"] {
	    name="net_avg_avg_act_diff";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_avg_act_diff"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_cos_diff"] {
	    name="Hidden_avg_cos_diff";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_cos_diff"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.921425: fix_max=0: max=0.998647: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_avg_cos_diff"] {
	    name="Output_avg_cos_diff";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_avg_cos_diff"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_trial_cos_diff"] {
	    name="Hidden_avg_trial_cos_diff";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_trial_cos_diff"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_avg_trial_cos_diff"] {
	    name="Output_avg_trial_cos_diff";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_avg_trial_cos_diff"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_avg_act_diff"] {
	    name="Hidden_avg_avg_act_diff";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_avg_act_diff"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_avg_avg_act_diff"] {
	    name="Output_avg_avg_act_diff";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_avg_avg_act_diff"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_net_sd"] {
	    name="Hidden_avg_net_sd";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_net_sd"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.282567: fix_max=0: max=0.549272: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_avg_net_sd"] {
	    name="Output_avg_net_sd";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_avg_net_sd"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hidden_hog_pct"] {
	    name="Hidden_hog_pct";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_hog_pct"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_hog_pct"] {
	    name="Output_hog_pct";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_hog_pct"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hidden_dead_pct"] {
	    name="Hidden_dead_pct";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_dead_pct"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_dead_pct"] {
	    name="Output_dead_pct";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_dead_pct"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hidden_netmax"] {
	    name="Hidden_netmax";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_netmax"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_netmax"] {
	    name="Output_netmax";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_netmax"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_act"] {
	    name="Hidden_avg_act";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_act"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_avg_act"] {
	    name="Output_avg_act";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_avg_act"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hidden_Fm_Input_netrel"] {
	    name="Hidden_Fm_Input_netrel";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_Fm_Input_netrel"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Hidden_Fm_Output_netrel"] {
	    name="Hidden_Fm_Output_netrel";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_Fm_Output_netrel"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @["Output_Fm_Hidden_netrel"] {
	    name="Output_Fm_Hidden_netrel";
	    m_data=.projects["test"].data.gp["OutputData"]["EpochOutputData"].data["Output_Fm_Hidden_netrel"]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=140: };
	  page_rows=412;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE_AND_POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=27: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Z;
	   col_name="batch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=5: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["EpochOutputData_Graph_plot_1"] {
	    name="EpochOutputData_Graph_plot_1";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="avg_sse";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=8.06164: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_2"] {
	    name="EpochOutputData_Graph_plot_2";
	    m_data=NULL;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_sse";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=8.061643: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_3"] {
	    name="EpochOutputData_Graph_plot_3";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="avg_cycles";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=5.83333: fix_max=0: max=8.5: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_4"] {
	    name="EpochOutputData_Graph_plot_4";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_avg_net_sd";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.282567: fix_max=0: max=0.549272: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=1;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_5"] {
	    name="EpochOutputData_Graph_plot_5";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_avg_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.921425: fix_max=0: max=0.998647: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_6"] {
	    name="EpochOutputData_Graph_plot_6";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_7"] {
	    name="EpochOutputData_Graph_plot_7";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_8"] {
	    name="EpochOutputData_Graph_plot_8";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_9"] {
	    name="EpochOutputData_Graph_plot_9";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_10"] {
	    name="EpochOutputData_Graph_plot_10";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_11"] {
	    name="EpochOutputData_Graph_plot_11";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_12"] {
	    name="EpochOutputData_Graph_plot_12";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_13"] {
	    name="EpochOutputData_Graph_plot_13";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_14"] {
	    name="EpochOutputData_Graph_plot_14";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_15"] {
	    name="EpochOutputData_Graph_plot_15";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_16"] {
	    name="EpochOutputData_Graph_plot_16";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["EpochOutputData_Graph_err_1"] {
	    name="EpochOutputData_Graph_err_1";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_2"] {
	    name="EpochOutputData_Graph_err_2";
	    m_data=NULL;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="pct_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_3"] {
	    name="EpochOutputData_Graph_err_3";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_4"] {
	    name="EpochOutputData_Graph_err_4";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_5"] {
	    name="EpochOutputData_Graph_err_5";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_6"] {
	    name="EpochOutputData_Graph_err_6";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_7"] {
	    name="EpochOutputData_Graph_err_7";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_8"] {
	    name="EpochOutputData_Graph_err_8";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_9"] {
	    name="EpochOutputData_Graph_err_9";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_10"] {
	    name="EpochOutputData_Graph_err_10";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_11"] {
	    name="EpochOutputData_Graph_err_11";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_12"] {
	    name="EpochOutputData_Graph_err_12";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_13"] {
	    name="EpochOutputData_Graph_err_13";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_14"] {
	    name="EpochOutputData_Graph_err_14";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_15"] {
	    name="EpochOutputData_Graph_err_15";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_16"] {
	    name="EpochOutputData_Graph_err_16";
	    m_data=NULL;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0: y=0: z=5: };
	 look_at {x=0: y=0: z=0: };
	 up {x=0: y=1: z=0: };
	};
	T3SavedView @["Vw_1"] {
	 name="Vw_1";
	 view_saved=1;
	 pos {x=-1.040131e-7: y=2.174579: z=5.584352: };
	 look_at {x=0: y=0: z=0: };
	 up {x=3.632906e-8: y=0.9318419: z=-0.3628646: };
	};
	T3SavedView @["Vw_2"] {
	 name="Vw_2";
	 view_saved=1;
	 pos {x=-2.919118: y=2.369285e-6: z=4.059401: };
	 look_at {x=-0.176192: y=-5.260867e-6: z=-0.1210694: };
	 up {x=-1.445057e-7: y=1: z=-1.920004e-6: };
	};
	T3SavedView @["Vw_3"] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 look_at {x=0: y=0: z=0: };
	 up {x=0: y=1: z=0: };
	};
	T3SavedView @["Vw_4"] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 look_at {x=0: y=0: z=0: };
	 up {x=0: y=1: z=0: };
	};
	T3SavedView @["Vw_5"] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 look_at {x=0: y=0: z=0: };
	 up {x=0: y=1: z=0: };
	};
	T3SavedView @["Vw_6"] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 look_at {x=0: y=0: z=0: };
	 up {x=0: y=1: z=0: };
	};
	T3SavedView @["Vw_7"] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 look_at {x=0: y=0: z=0: };
	 up {x=0: y=1: z=0: };
	};
	T3SavedView @["Vw_8"] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 look_at {x=0: y=0: z=0: };
	 up {x=0: y=1: z=0: };
	};
	T3SavedView @["Vw_9"] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 look_at {x=0: y=0: z=0: };
	 up {x=0: y=1: z=0: };
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_94";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       name="view_win_lft";
       value 6 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       name="view_win_top";
       value 6 0=0.008496176451444626;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       name="view_win_wd";
       value 6 0=0.04031830281019211;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       name="view_win_ht";
       value 6 0=0.7544605135917664;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @["Network_0"] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_7";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_cos_diff"] {
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="Network_0";
   desc=;
   specs {
    name="specs";
    el_typ=LeabraLayerSpec;
    el_def=0;
    LeabraLayerSpec @["HiddenLayer"] {
     name="HiddenLayer";
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @["Input_Output"] {
       name="Input_Output";
       desc=;
       unique{ lay_inhib;kwta;       };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
       avg_act {init=0.1: fixed=0: tau=100: adjust=1: dt=0.01: };
       inhib_misc {self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       lstats {
	cos_diff_avg_tau=100;
	hog_thr=0.3;
	dead_thr=0.01;
	cos_diff_avg_dt=0.01;
       };
       lay_lrate=1;
       lay_gp_inhib {on=0: gp_g=0.5: };
      };
     };
     lay_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     avg_act {init=0.1: fixed=0: tau=100: adjust=1: dt=0.01: };
     inhib_misc {self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     lstats {
      cos_diff_avg_tau=100;
      hog_thr=0.3;
      dead_thr=0.01;
      cos_diff_avg_dt=0.01;
     };
     lay_lrate=1;
     lay_gp_inhib {on=0: gp_g=0.5: };
    };
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     name="LeabraUnitSpec_0";
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_spec {type=LeabraBiasSpec: spec=.projects["test"].networks["Network_0"].specs["LeabraConSpec_0"].children["LeabraBiasSpec_0"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.5: gain=100: nvar=0.005: };
     act_misc {rec_nd=1: avg_nd=1: act_max_hz=100: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0.3;
      t_r=3;
      clamp_max_p=0.12;
      clamp_type=REGULAR;
      eff_spk_thr=0.5;
     };
     opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=2: range=2: scale=0.5: };
     v_m_init {name="v_m_init": type=NONE: mean=0.4: var=0: par=1: };
     act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
     dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: };
     avg_l {init=0.4: max=2: min=0.1: tau=10: lrn_max=0.05: lrn_min=0.005: err_mod=1: err_min=0.01: act_thr=0.2: dt=0.1: lrn_fact=0.02368421: };
     g_bar {e=1: l=0.1: i=1: };
     e_rev {e=1: l=0.3: i=0.25: };
     adapt {
      on=0;
      tau=144;
      vm_gain=0.04;
      spike_gain=0.00805;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
     syn_delay {
      on=0;
      delay=4;
     };
     dropout {
      net_on=0;
      net_p=0.1;
      net_drop=0.9;
     };
     deep_qtr=Q4;
     deep {on=0: thr=0.2: d_to_d=0.5: d_to_s=0: ctxt_to_s=0.15: ctxt_rel=0: thal_to_d=0: thal_to_s=0: };
     deep_norm {on=0: mod=1: raw_val=GROUP_MAX: raw_thr=0.2: binary=0: contrast=1: ctxt_fm_lay=0.5: ctxt_fm_ctxt=0.5: min_ctxt=0.05: copy_def=0: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {trial_fixed=1: drop_thr=0.1: mode=FIXED_NOISE: };
     noise_sched {
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] {
     name="LeabraConSpec_0";
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @["LeabraBiasSpec_0"] {
       name="LeabraBiasSpec_0";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.02;
       use_lrate_sched=1;
       cur_lrate=0.04;
       lrs_mult=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       ignore_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: dwt_norm=0: };
       fast_wts {on=0: nofast_lrate=2: decay_tau=6000: wt_tau=200: fast_lrate=10: decay_dt=0.0001666667: wt_dt=0.005: slow_lrate=0.1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       dwt_thresh=0.1;
      };
      LeabraConSpec @["TopDownCons"] {
       name="TopDownCons";
       desc="top-down connections from output layers down to hidden etc typically need to be weaker than bottom-up";
       unique{ wt_scale;wt_sig;       };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=0.2: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.02;
       use_lrate_sched=1;
       cur_lrate=0.04;
       lrs_mult=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       ignore_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: dwt_norm=0: };
       fast_wts {on=0: nofast_lrate=2: decay_tau=6000: wt_tau=200: fast_lrate=10: decay_dt=0.0001666667: wt_dt=0.005: slow_lrate=0.1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
      };
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.02;
     use_lrate_sched=1;
     cur_lrate=0.04;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     ignore_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1: dwt_norm=0: };
     fast_wts {on=0: nofast_lrate=2: decay_tau=6000: wt_tau=200: fast_lrate=10: decay_dt=0.0001666667: wt_dt=0.005: slow_lrate=0.1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
    };
    FullPrjnSpec @["FullPrjnSpec_0"] {
     name="FullPrjnSpec_0";
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     add_rnd_var=0;
    };
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=5: y=5: z=3: };
    max_disp_size2d {x=5: y=18: };
    LeabraLayer @["Input"] {
     name="Input";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["test"].networks["Network_0"].layers["Hidden"].projections["Fm_Input"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects["test"].networks["Network_0"].specs["LeabraUnitSpec_0"]$$: };
     dist {
      fm_input=0;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.1;
     acts_p_avg=0.1;
     acts_p_avg_eff=0.1;
     spec {type=LeabraLayerSpec: spec=.projects["test"].networks["Network_0"].specs["HiddenLayer"].children["Input_Output"]$$: };
    };
    LeabraLayer @["Hidden"] {
     name="Hidden";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     pos2d {x=0: y=13: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
     n_recv_prjns=2;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Input"] {
       name="Fm_Input";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["test"].networks["Network_0"].layers["Input"]$$;
       spec {type=FullPrjnSpec: spec=.projects["test"].networks["Network_0"].specs["FullPrjnSpec_0"]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["test"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_Output"] {
       name="Fm_Output";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["test"].networks["Network_0"].layers["Output"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["test"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.projects["test"].networks["Network_0"].specs["LeabraConSpec_0"].children["TopDownCons"]$$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["test"].networks["Network_0"].layers["Output"].projections["Fm_Hidden"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["test"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=1;
      fm_output=1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.1;
     acts_p_avg=0.1;
     acts_p_avg_eff=0.1;
     spec {type=LeabraLayerSpec: spec=.projects["test"].networks["Network_0"].specs["HiddenLayer"]$$: };
    };
    LeabraLayer @["Output"] {
     name="Output";
     desc=;
     flags=0;
     layer_type=TARGET;
     pos {x=0: y=0: z=2: };
     pos2d {x=0: y=6: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Hidden"] {
       name="Fm_Hidden";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["test"].networks["Network_0"].layers["Hidden"]$$;
       spec {type=FullPrjnSpec: spec=$.projects["test"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.projects["test"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["test"].networks["Network_0"].layers["Hidden"].projections["Fm_Output"];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects["test"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
     dist {
      fm_input=2;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.1;
     acts_p_avg=0.1;
     acts_p_avg_eff=0.1;
     spec {type=LeabraLayerSpec: spec=$.projects["test"].networks["Network_0"].specs["HiddenLayer"].children["Input_Output"]$: };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    run_time {name="TimeUsedHR_3": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    sync_time {name="TimeUsedHR_4": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    total_time {name="TimeUsedHR_5": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=2.298735696848069e-314;
   };
   net_timing {
    name="net_timing";
    el_typ=LeabraNetTiming;
    el_def=0;
    LeabraNetTiming @[0] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[1] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[2] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[3] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
    LeabraNetTiming @[4] {
     netin {name="netin": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act {name="act": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     dwt {name="dwt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     wt {name="wt": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_integ {name="netin_integ": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     netin_stats {name="netin_stats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     inhib {name="inhib": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     act_post {name="act_post": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
     cycstats {name="cycstats": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: };
    };
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=75;
   n_cons=1875;
   max_prjns=2;
   max_disp_size {x=5: y=5: z=3: };
   max_disp_size2d {x=5: y=18: };
   cuda {
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
   };
   times {
    quarter=25;
    deep_cyc=5;
    time_inc=0.001;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    cos_err_lrn_thr=-1;
   };
   net_misc {
    spike=0;
    deep=0;
    bias_learn=1;
    trial_decay=1;
    diff_scale_p=0;
    diff_scale_q1=0;
    dwt_norm=0;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   rel_netin {
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
 };
};

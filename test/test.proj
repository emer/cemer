// ta_Dump File v2.0
LeabraProject .projects[0] { 
 UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
 };

  Doc_Group @.docs = [3] {
    taDoc @[0] { };
    taDoc @[1] { };
    taDoc @[2] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  SelectEdit_Group @.edits = [1] {
    SelectEdit @[0] { 
      EditMbrItem_Group @.mbrs = [3] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
      };

      EditMthItem_Group @.mths = [4] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem_Group @.gp[0] = [4] { 
	  EditMthItem @[0] { };
	  EditMthItem @[1] { };
	  EditMthItem @[2] { };
	  EditMthItem @[3] { };
	};
	EditMthItem_Group @.gp[1] = [1] { 
	  EditMthItem @[0] { };
	};
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [1] { 
      DataTable @[0] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [2] { 
      DataTable @[0] { 
	DataTableCols @.data = [10] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [9] {
	  int_Data @[0] { };
	  int_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	};
      };
    };
    DataTable_Group @.gp[2] { };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [1] {
    Program @[0] { 
      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgVar_List @.vars = [6] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
      };

      ProgEl_List @.prog_code = [20] {
	IfReturn @[0] { };
	Comment @[1] { };
	MiscCall @[2] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[3] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	RegisterArgs @[4] { };
	Comment @[5] { };
	PrintExpr @[6] { };
	MethodCall @[7] { };
	MiscCall @[8] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MiscCall @[9] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	ProgVarFmArg @[10] { };
	ProgVarFmArg @[11] { };
	Comment @[12] { };
	MethodCall @[13] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[14] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[15] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[16] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	OtherProgramVar @[17] { };
	PrintExpr @[18] { };
	ProgramCall @[19] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
      };
    };
    Program_Group @.gp[0] = [10] { 
      Program @[0] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  WtInitPrompt @[4] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [7] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	  AssignExpr @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[6] { };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { };
	  NetDataLoop @[4] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      IfElse @[1] { 
		ProgEl_List @.true_code = [1] {
		  MethodCall @[0] { };
		};
	      };
	    };
	  };
	  IfElse @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[6] { };
	  ProgramCall @[7] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[8] { };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [6] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { };
	    };
	  };
	  MethodCall @[3] { };
	  ProgramCall @[4] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[5] { };
	};
      };
      Program @[4] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  IfElse @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[5] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { };
	  NetUpdateView @[1] { };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [3] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	    };
	  };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [10] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [9] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[5] { };
	};
      };
      Program @[9] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
   };

      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
     };
};
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
     };

	  T3DataViewFrame_List @.frames = [3] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [4] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [6] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		    ScaleRange @[3] { };
		    ScaleRange @[4] { };
		    ScaleRange @[5] { };
		  };
		};
		GridTableView @[1] { 
		  T3DataView_List @.children = [10] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		    GridColView @[5] { };
		    GridColView @[6] { };
		    GridColView @[7] { };
		    GridColView @[8] { };
		    GridColView @[9] { };
		  };
		};
		GridTableView @[2] { 
		  T3DataView_List @.children = [9] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		    GridColView @[5] { };
		    GridColView @[6] { };
		    GridColView @[7] { };
		    GridColView @[8] { };
		  };
		};
		GraphTableView @[3] { 
		  T3DataView_List @.children = [9] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [9] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [3] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		  };
		};
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
	    UserDataItem @[1] { };
	    UserDataItem @[2] { };
	    UserDataItem @[3] { };
	    UserDataItem @[4] { };
	    UserDataItem @[5] { };
     };
};
      };
    };
  };

  Network_Group @.networks = [1] {
    LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
	UserData_DocLink @[19] { };
   };

      BaseSpec_Group @.specs = [4] {
	LeabraUnitSpec @[0] { };
	LeabraLayerSpec @[1] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraLayerSpec @[0] { };
	  };
	};
	FullPrjnSpec @[2] { };
	LeabraConSpec @[3] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraBiasSpec @[0] { };
	  };
	};
      };

      Layer_Group @.layers = [3] {
	LeabraLayer @[0] { 
	  Unit_Group @.units = [25] {
	  };
	};
	LeabraLayer @[1] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [25] {
	  };
	};
	LeabraLayer @[2] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [25] {
	  };
	};
      };
    };
  };
};
LeabraProject .projects[0] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {
   name="DocLink";
   doc=.projects[0].docs[0]$0$;
  };
 };
 name="LeabraProject_0";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ProjectDocs";
   auto_open=1;
   text="<html>
<head>
<title>Project Docs</title>
</head>
<body>

= Project Documentation =

== Overview ==
This is an overview of the project.

* It has many features
* including some good stuff
* and some test stuff
** this doc is a test
** it does urls
* and other things

The [[.wizards.LeabraWizard_0]] is important for doing various ''configuration'' things.
The [[.edits.ControlPanel]] has all the main '''parameters''' and buttons at bottom for running the sim.

# Explicit [[ta:.docs.ChangeLog]] syntax
# Function calling! [[.networks[0].Init_Weights()]]
# Tab viewing! [[.T3Tab.EpochOutputData]]
# Back to [[.T3Tab.DefaultFrame]]
# Panel viewing! [[.PanelTab.ControlPanel]]

The [[http://grey.colorado.edu/emergent/index.php/Main_Page|Emergent Wiki]] has lots of info.

=== Some Details ===
This is the details.

</body>
";
  };
  taDoc @[1] {
   name="NetworkDocs";
   auto_open=0;
   text="<html>
<head></head>
<body>
<h2>Overview</h2>
This is an overview of the network.
<h2>Details</h2>
This is the details.
</body>
</html>";
  };
  taDoc @[2] {
   name="ChangeLog";
   auto_open=0;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>

<li>Tue Jul 10 02:59:02 2007 oreilly <code>leabra_ra.proj</code><br>
  Added test stuff to ProjectDocs, including Wiki formatting, some ta: links, and some external links.  very nice.  we need to figure out a syntax for downloaded wiki links..


<li>Sun Jul  8 01:03:06 2007 oreilly <code>leabra_ra.proj</code><br>
  Set the Doc link for Network, added this change log!
</ul>
</body>
</html>
";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="LeabraWizard_0";
   auto_open=1;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="Input";
     n_units=25;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="Hidden";
     n_units=25;
     io_type=HIDDEN;
    };
    LayerWizEl @[2] {
     name="Output";
     n_units=25;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   name="ControlPanel";
   auto_edit=1;
   desc="control panel for main parameters and functions in model";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="LeabraConSpec_0 lrate";
     desc=" [0.01 for std leabra, .04-.08 for CtLeabra] learning rate -- how fast do the weights change per experience";
     base=.projects[0].networks[0].specs[3]$1$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[1] {
     label="HiddenLayer kwta";
     desc=" desired activity level over entire layer (NOTE: used to set target activity for UNIT_INHIB, AVG_MAX_PT_INHIB, but not used for actually computing inhib for these cases)<br>  k from:  how is the active_k determined: directly by k, by pct, or by no. of units where ext > pat_q<br>    USE K:  use the k specified directly<br>    USE PCT:  use the percentage pct to compute the k as a function of layer size<br>    USE PAT K:  use the activity level of the current event pattern (k = of units > pat_q)<br>  k:  desired number of active units in the layer<br>  pct:  desired proportion of activity (used to compute a k value based on layer size, .25 std)<br>  diff act pct: [Default: false]  if true, use different actual percent activity for overall layer activation<br>  act pct:  actual percent activity to put in kwta.pct field of layer<br>  gp i:  compute inhibition including all of the layers in the same group, or unit groups within the layer: each items computed inhib vals are multipled by gp_g scaling, then MAX'd, and each item's inhib is the MAX of this pooled MAX value and its original own value<br>  gp g:  how much this item (layer or unit group) contributes to the pooled layer group values";
     base=.projects[0].networks[0].specs[1]$2$;
     mbr=LeabraLayerSpec::kwta;
    };
    EditMbrItem @[2] {
     label="LeabraConSpec_0 wt sig";
     desc=" sigmoidal weight function for contrast enhancement: high gain makes weights more binary & discriminative<br>  gain: [Default: 6]  gain (contrast, sharpness) of the weight contrast function (1 = linear)<br>  off: [Default: 1;1.25]  offset of the function (1=centered at .5, >1=higher, <1=lower)";
     base=$1$;
     mbr=LeabraConSpec::wt_sig;
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Train Init";
     desc=" set the program state back to the beginning";
     base=.projects[0].programs.gp[0][1]$3$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Train Run";
     desc=" run the program";
     base=$3$;
     mth=Program::Run;
    };
    EditMthItem @[2] {
     label="Train Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$3$;
     mth=Program::Step;
    };
    EditMthItem @[3] {
     label="Train Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     base=$3$;
     mth=Program::Stop;
    };
    EditMthItem_Group @.gp[0] {
     name="Batch";
     el_typ=EditMthItem;
     el_def=0;
     group_type=GT_MENU_BUTTON;
     EditMthItem @[0] {
      label="Batch Init";
      desc=" set the program state back to the beginning";
      base=.projects[0].programs.gp[0][0]$4$;
      mth=Program::Init;
     };
     EditMthItem @[1] {
      label="Batch Run";
      desc=" run the program";
      base=$4$;
      mth=Program::Run;
     };
     EditMthItem @[2] {
      label="Batch Step";
      desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
      base=$4$;
      mth=Program::Step;
     };
     EditMthItem @[3] {
      label="Batch Stop";
      desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
      base=$4$;
      mth=Program::Stop;
     };
    };
    EditMthItem_Group @.gp[1] {
     name="Network";
     el_typ=EditMthItem;
     el_def=0;
     group_type=GT_MENU;
     EditMthItem @[0] {
      label="Build";
      desc=" Build the network units and Connect them (calls BuildLayers/Units/Prjns and Connect)";
      base=.projects[0].networks[0]$5$;
      mth=Network::Build;
     };
    };
   };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="SimpleLines5x5";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] "checks";"mitvert";"midhoriz";"rdiag";"ldiag";"random";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [5 5 6] 1;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;0;
      };
     };
     float_Data @[2] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [5 5 6] 1;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;1;
1;0;0;0;0;0;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] 0;0;0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] 8;8;8;8;8;8;      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] 0;1;2;3;4;5;      };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] "checks";"random";"midhoriz";"rdiag";"mitvert";"ldiag";      };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] ;;;;;;      };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] 2;2;2;2;2;2;      };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] 15;15;15;15;15;15;      };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] 0;0;0;0;0;0;      };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6] 0;0;0;0;0;0;      };
     };
     float_Data @[9] {
      name="Output_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [5 5 6] 0.94999999;0;0;0;0.94999999;0;0;0;0;0;
0;0;0.94999999;0;0;0;0;0;0;0;
0.94999999;0;0;0;0.94999999;0.94999999;0;0;0;0;
0;0;0;0.94999999;0;0;0.94999999;0;0;0.94999999;
0.94999999;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.94999999;
0;0;0;0.94999999;0;0;0;0.94999999;0;0;
0;0.94999999;0;0;0;0.94999999;0;0;0;0;
0;0;0.94999999;0;0;0;0;0.94999999;0;0;
0;0;0.94999999;0;0;0;0;0.94999999;0;0;
0;0;0.94999999;0;0;0.94999999;0;0;0;0;
0;0.94999999;0;0;0;0;0;0.94999999;0;0;
0;0;0;0.94999999;0;0;0;0;0;0.94999999;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [9] 0;0;0;0;0;0;0;0;0;      };
     };
     int_Data @[1] {
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [9] 0;1;2;3;4;5;6;7;8;      };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [9] 5.6058383;4.4240956;2.6877892;0.85319948;1.2435641;0.09565606;0.15708357;0.10109991;0;      };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [9] 6;6;4;2;2;2;1;1;0;      };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [9] 0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [9] 25;24;18.666666;15.333333;16.5;15;15;15;15;      };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [9] 0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [9] 0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[8] {
      name="Hidden_Fm_Input_r_wt";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;5;5;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [5 5 5 5 9] 0.36570632;0.49523523;0.68752897;0.34069893;0.39091295;0.51574641;0.31256461;0.62772614;0.38053119;0.38708526;
0.32602382;0.62913972;0.39237839;0.31299502;0.38602093;0.33911493;0.38527498;0.50230312;0.5428279;0.76265049;
0.27403417;0.35071146;0.58780044;0.67131341;0.68742275;0.60373634;0.20708004;0.55458945;0.42056361;0.55670726;
0.22844301;0.59698105;0.74081618;0.54250002;0.21715349;0.2651971;0.54532915;0.61007279;0.39124486;0.27574423;
0.30351976;0.27493504;0.65258133;0.45971906;0.18445954;0.63275975;0.42870829;0.67341948;0.21107586;0.71781218;
0.39290351;0.58849347;0.64155245;0.5273152;0.26432893;0.65722311;0.46635672;0.34435964;0.74362397;0.50375611;
0.44314578;0.76404887;0.61003786;0.73069286;0.47281757;0.53867322;0.37425444;0.64969879;0.37486845;0.69988865;
0.35994425;0.36379823;0.46781519;0.29661086;0.24394156;0.4345389;0.40989265;0.43089762;0.40393406;0.24145566;
0.48723143;0.63636935;0.41964865;0.26357669;0.48639563;0.69671911;0.39956614;0.717013;0.53587633;0.53580189;
0.58809924;0.51731652;0.74548668;0.54379994;0.54720706;0.24832594;0.59385294;0.73195094;0.43691665;0.29780838;
0.79693472;0.42097008;0.54741818;0.49453384;0.47033024;0.4329083;0.2869733;0.47627875;0.44249883;0.58726937;
0.30156818;0.38952684;0.54830611;0.42426315;0.51097798;0.68717086;0.42698175;0.41162616;0.29824144;0.46888161;
0.6893416;0.63021487;0.57526463;0.28472307;0.3789767;0.25051081;0.5230068;0.33642951;0.68207383;0.29416832;
0.61375403;0.68852776;0.3458904;0.31687593;0.30325085;0.46228498;0.40704441;0.49259669;0.45121369;0.80001616;
0.27020031;0.37962356;0.51389462;0.64780778;0.31284928;0.44347396;0.38573006;0.41104233;0.65779233;0.294076;
0.4747144;0.50221115;0.15363197;0.67068434;0.63204247;0.30035955;0.53170002;0.50926149;0.70477569;0.48177949;
0.47440106;0.61321294;0.51127964;0.51709795;0.61624712;0.24528001;0.77689672;0.46860817;0.65228099;0.27295667;
0.51862621;0.5692504;0.39039916;0.5091458;0.53114557;0.58243811;0.62636226;0.51749253;0.31475958;0.45965442;
0.24958028;0.49226037;0.20287944;0.22675399;0.53208989;0.74488419;0.82921946;0.21586286;0.49870804;0.55896038;
0.76739007;0.54482138;0.19586873;0.7876147;0.77728426;0.59941059;0.55146152;0.48974654;0.29866335;0.76256549;
0.50587535;0.60296255;0.64261568;0.45838839;0.21023597;0.58596182;0.41984165;0.49910551;0.38727087;0.39403045;
0.35922116;0.47752935;0.31809121;0.52522081;0.69183838;0.61639643;0.48234656;0.77225751;0.68795961;0.53445369;
0.49262094;0.38781041;0.7316339;0.54226333;0.62623006;0.35309184;0.62002069;0.38334435;0.63728654;0.63223594;
0.66916502;0.32824674;0.16857591;0.63491166;0.71302348;0.79787111;0.5877161;0.57294297;0.74013293;0.49784151;
0.66748345;0.36432856;0.40005836;0.67428541;0.52920824;0.68878675;0.43745494;0.38211957;0.49331498;0.30327937;
0.28462806;0.43466359;0.26158077;0.53847706;0.37905091;0.41717923;0.58612341;0.66936165;0.50306427;0.50787485;
0.45540956;0.5954293;0.47324088;0.39916021;0.36680424;0.4110058;0.22397149;0.70607018;0.17718197;0.5744704;
0.27973667;0.38803542;0.71906918;0.58867913;0.4636938;0.36440936;0.33754057;0.59879744;0.4370572;0.68758893;
0.4733758;0.58108425;0.47969371;0.4745186;0.47780091;0.52154249;0.40347061;0.4283002;0.62069339;0.53486001;
0.63206458;0.49603751;0.63367522;0.38863891;0.27240866;0.70805627;0.56876791;0.48197266;0.25512192;0.7126956;
0.12392464;0.41228285;0.54150867;0.47494087;0.83135223;0.56439799;0.33979109;0.58900499;0.49838474;0.29546061;
0.26653278;0.46175122;0.8834433;0.39446989;0.55764103;0.26255807;0.57691222;0.29292929;0.29658857;0.4332467;
0.5803892;0.30836073;0.6736874;0.4163045;0.23228469;0.61426604;0.31682622;0.52273077;0.50390983;0.28182027;
0.44841406;0.45749259;0.31194058;0.31581765;0.72823203;0.53537357;0.3191067;0.27084365;0.52518821;0.74879509;
0.62924081;0.67436135;0.660155;0.62082386;0.29488829;0.57780671;0.52354401;0.56016695;0.62706935;0.4988949;
0.62277412;0.4711594;0.56959069;0.3299368;0.62709647;0.2744346;0.28155687;0.34231746;0.75234318;0.32565722;
0.62386906;0.6290018;0.3386631;0.61237723;0.20476295;0.64764649;0.59909987;0.23402722;0.70727861;0.57232034;
0.43782726;0.4004184;0.24757774;0.61559141;0.6643247;0.66586888;0.36524498;0.23807603;0.32770458;0.47207612;
0.45271784;0.54101235;0.65050066;0.48974869;0.6149295;0.66939527;0.26145592;0.69970727;0.22678059;0.37107965;
0.60659403;0.26892233;0.3603254;0.74197185;0.38942984;0.26950091;0.34062809;0.41720253;0.4373115;0.57801223;
0.64110368;0.48671088;0.60699898;0.57770586;0.41525048;0.3561531;0.66880167;0.6681307;0.47066516;0.45463485;
0.40360802;0.56869388;0.38154218;0.43410066;0.66132414;0.40118718;0.38344258;0.31103134;0.70474988;0.70272273;
0.21617676;0.40547538;0.47799304;0.53659141;0.61528808;0.34108102;0.60544354;0.61096704;0.33093071;0.68858576;
0.37561491;0.47593656;0.6065951;0.45562279;0.54446715;0.52471232;0.34672484;0.27181569;0.38537121;0.3570433;
0.77315223;0.67931956;0.27548987;0.30761999;0.72271371;0.44690239;0.33059621;0.57726943;0.70210892;0.37887496;
0.25122309;0.29568043;0.73749846;0.67412472;0.7800107;0.21690577;0.50314164;0.65491498;0.448452;0.59811831;
0.41379654;0.27424023;0.62461358;0.20254102;0.60358095;0.23513883;0.33804736;0.40872818;0.57470316;0.66859692;
0.66724896;0.24093296;0.56632662;0.25050339;0.431905;0.2748543;0.63745308;0.29698971;0.64541239;0.47992951;
0.39070657;0.69458228;0.72177315;0.67888474;0.23708332;0.31767607;0.48153719;0.41574645;0.23155639;0.49498251;
0.27849162;0.79685205;0.23516189;0.71012771;0.278359;0.68803108;0.70866859;0.38465363;0.29777423;0.4497585;
0.66306925;0.30748817;0.71290481;0.70875299;0.67111248;0.24589156;0.55960393;0.34343424;0.76185131;0.63817477;
0.52723938;0.41397512;0.60149187;0.5929361;0.54031986;0.61753321;0.68848789;0.47178206;0.41055673;0.20769587;
0.48835692;0.25139517;0.51343179;0.60599589;0.35705587;0.26499024;0.44442549;0.7742328;0.48931843;0.53741932;
0.3783274;0.15922089;0.64912939;0.29457992;0.33448809;0.30063269;0.30936015;0.682127;0.45999268;0.60875869;
0.28393;0.43856585;0.82504696;0.3125765;0.27390218;0.49912941;0.30350727;0.75995696;0.64249098;0.16777912;
0.52501249;0.33157167;0.28209323;0.38600376;0.24784233;0.33936048;0.30022478;0.26794612;0.45463243;0.25719035;
0.551184;0.60357207;0.60995799;0.54405642;0.57878619;0.55647254;0.71107495;0.46732304;0.56174266;0.3122502;
0.33895987;0.24716768;0.51723683;0.47043163;0.32902062;0.70243478;0.50410008;0.52868533;0.47282112;0.40771681;
0.38284463;0.45412397;0.36440605;0.48295018;0.48650396;0.31336495;0.57591707;0.39129165;0.46581385;0.42460132;
0.66141218;0.54562831;0.4096756;0.42179549;0.71211243;0.2892541;0.56385517;0.63076621;0.51683342;0.6847387;
0.80090433;0.42061964;0.24682732;0.42898333;0.32124436;0.63161778;0.22940886;0.42577231;0.71184349;0.51250434;
0.78164256;0.77899957;0.52873981;0.53961873;0.71622926;0.75797367;0.56927186;0.3289865;0.26101181;0.85871732;
0.56582952;0.63924992;0.53573745;0.64479691;0.64867502;0.36527902;0.48477972;0.74489993;0.33185348;0.3813484;
0.50521511;0.3042002;0.692294;0.38001615;0.37756869;0.31742299;0.62734079;0.46820265;0.30462295;0.37651783;
0.33884269;0.37578163;0.57656997;0.53225178;0.76060647;0.26641592;0.34170851;0.65628725;0.66138059;0.67767692;
0.79268914;0.15637879;0.37331316;0.33355448;0.5827198;0.17318505;0.74107611;0.56198692;0.4998596;0.1642814;
0.2025287;0.44870138;0.7707389;0.3078731;0.2110551;0.23374754;0.24916428;0.46567869;0.63349813;0.13877152;
0.65480137;0.34077591;0.48715213;0.1595093;0.85968894;0.36499512;0.52186459;0.75930578;0.46130687;0.22020464;
0.59232718;0.40280929;0.50261509;0.71144676;0.43848988;0.38572097;0.73228973;0.73503703;0.6712051;0.41334233;
0.50492537;0.31757164;0.76532179;0.31812799;0.666188;0.30464125;0.30811563;0.61949813;0.24834737;0.20261104;
0.49850771;0.37554836;0.49948585;0.36984593;0.21755801;0.45040256;0.68747258;0.48841774;0.23794907;0.44958532;
0.74827355;0.47250563;0.87409258;0.60414368;0.6040737;0.55052787;0.47995842;0.78622234;0.6028837;0.50957835;
0.22388025;0.55633068;0.77461624;0.40152651;0.35931438;0.90837133;0.34369242;0.50942934;0.41138986;0.46526971;
0.3544758;0.42385057;0.44040266;0.36384359;0.50133115;0.23969319;0.34052587;0.76508743;0.34665915;0.42694563;
0.63129479;0.32528937;0.37879634;0.43609253;0.41443586;0.67243886;0.54493541;0.53684092;0.22554235;0.61788255;
0.21495891;0.49496743;0.31337485;0.65569204;0.27314845;0.58592772;0.63410079;0.32242307;0.2947242;0.28176782;
0.65437865;0.60515422;0.65193051;0.64483219;0.89033258;0.25046897;0.35481682;0.48593542;0.59165353;0.29089174;
0.41671792;0.36070314;0.38517833;0.63076419;0.25356987;0.3585591;0.48273057;0.14501552;0.6521014;0.64657342;
0.28533557;0.42189744;0.48972866;0.72734016;0.4624916;0.5341;0.66516268;0.5131982;0.57525128;0.66794401;
0.23238222;0.7947337;0.4494769;0.54162627;0.25894642;0.53653151;0.5495798;0.37270668;0.48961341;0.40971115;
0.42238235;0.59871548;0.4894987;0.29270878;0.43253088;0.2310324;0.39248171;0.18725716;0.17934655;0.50398803;
0.74227309;0.78442943;0.17921907;0.49963242;0.55891401;0.69292635;0.51666391;0.18071386;0.69800091;0.70428222;
0.57142383;0.52328849;0.46208286;0.27741191;0.66856778;0.37537256;0.56788367;0.78387952;0.42451867;0.19021721;
0.55072445;0.30197033;0.6752758;0.35597435;0.36243692;0.33817241;0.45278391;0.41557884;0.49968594;0.66726762;
0.58150369;0.44789088;0.86866361;0.55341202;0.49923876;0.45795959;0.35648939;0.8432011;0.5069977;0.48899895;
0.26757243;0.58732176;0.35407636;0.60490876;0.6058495;0.63760853;0.30165049;0.15305319;0.68035406;0.6830979;
0.85411215;0.68578631;0.68086934;0.81007653;0.60584575;0.63587558;0.42078263;0.37010771;0.64288884;0.49616629;
0.66102445;0.40620506;0.35290295;0.46073025;0.22687672;0.29936984;0.40830228;0.46947807;0.51052856;0.3544257;
0.39130047;0.59741169;0.81916118;0.47540486;0.48016086;0.42855477;0.56759369;0.71140712;0.37383956;0.34263924;
0.3853116;0.20709568;0.84190971;0.18972324;0.54650813;0.25961134;0.36308998;0.84974736;0.56079149;0.4776834;
0.36190137;0.33704427;0.59821206;0.4364908;0.6897226;0.47279564;0.57819074;0.47911063;0.47720009;0.47721943;
0.52095103;0.40292314;0.42880729;0.6201148;0.5342679;0.63149023;0.49870482;0.63310182;0.38603792;0.27197954;
0.71009207;0.56817687;0.48138908;0.25471312;0.71010286;0.10781042;0.3429172;0.50751895;0.40072143;0.82898128;
0.48686463;0.27835885;0.55419058;0.48916709;0.23999436;0.21537974;0.38838875;0.89687586;0.32683238;0.48019764;
0.21202213;0.56595659;0.27154419;0.24096094;0.36203969;0.5873152;0.25107557;0.63906515;0.34656924;0.20131381;
0.59375727;0.31672567;0.52260602;0.50378597;0.28172722;0.44829351;0.43745598;0.31184101;0.31571692;0.72812468;
0.53524864;0.31900555;0.25616357;0.52506322;0.7486918;0.62911958;0.67424506;0.66003704;0.60038471;0.29479235;
0.57768232;0.52341902;0.56004196;0.62694818;0.47834966;0.64511722;0.43108684;0.52812147;0.29679883;0.58653963;
0.2454325;0.2519834;0.30835935;0.76878643;0.29281142;0.4976435;0.56658787;0.24516757;0.48612937;0.14395279;
0.66902637;0.55809677;0.20848604;0.669361;0.5963015;0.39920342;0.36314067;0.22083557;0.57455122;0.62455207;
0.82779878;0.31911886;0.10289249;0.28475785;0.62753278;0.4010379;0.55149984;0.37022191;0.42824459;0.56075513;
0.61698788;0.22518387;0.66068709;0.19450574;0.32450113;0.55227262;0.22636533;0.16501735;0.74705338;0.34150106;
0.4256978;0.29653525;0.19761766;0.38641158;0.7713905;0.78842187;0.46298292;0.5830664;0.5535664;0.39289629;
0.33558285;0.77853721;0.64519656;0.49392766;0.43141398;0.31351474;0.50990885;0.45978209;0.34017831;0.55939573;
0.42500898;0.36197847;0.29219636;0.80497259;0.71839994;0.20196004;0.3833769;0.4543846;0.51244551;0.73762858;
0.30009833;0.60429859;0.60982531;0.32996926;0.68752277;0.37457988;0.47479609;0.60545075;0.40746891;0.54330534;
0.52355194;0.30529195;0.27097583;0.38432187;0.35603696;0.73149526;0.67824411;0.27464166;0.30670351;0.67693514;
0.44578359;0.32963541;0.57611203;0.7010659;0.37783459;0.26467994;0.25149092;0.50494176;0.61580884;0.81212759;
0.18251927;0.4481962;0.41645524;0.43849093;0.53741008;0.35878214;0.23252945;0.49830273;0.17013963;0.54294437;
0.19831748;0.3314583;0.22004916;0.51853198;0.61000168;0.71193403;0.20335783;0.33638161;0.21170568;0.44502461;
0.27143463;0.63290042;0.29337442;0.64088893;0.45460504;0.38643324;0.69029796;0.71766514;0.6538834;0.23403043;
0.31389177;0.47690403;0.39201173;0.22856057;0.49032101;0.27503887;0.77651262;0.23212869;0.70594013;0.27490744;
0.66325969;0.70447141;0.38041437;0.29415253;0.44521886;0.49197739;0.28027031;0.68074572;0.67640251;0.54509526;
0.22292764;0.5240187;0.31409961;0.80790818;0.60343462;0.48817125;0.40832573;0.47204247;0.5537957;0.5011307;
0.6115604;0.72196233;0.43731222;0.37804526;0.20935397;0.37248924;0.22801983;0.4781754;0.57068938;0.21026698;
0.24384807;0.41525674;0.83213198;0.45918131;0.51602709;0.3513734;0.14552608;0.73049432;0.27959982;0.30949298;
0.27740413;0.28565568;0.76451159;0.43043813;0.5783326;0.26165086;0.41878214;0.87136275;0.28870037;0.25221691;
0.47817934;0.28012016;0.82091177;0.61263031;0.15341751;0.50399774;0.3083865;0.26140073;0.36058301;0.22911821;
0.3158218;0.2849499;0.24804352;0.42720136;0.23791029;0.76615644;0.80020928;0.80857182;0.76131111;0.78442913;
0.52785492;0.68526095;0.43962401;0.54050684;0.28998762;0.31543931;0.22848429;0.4888106;0.44267148;0.31263459;
0.71109819;0.47586411;0.50021899;0.44506502;0.38160598;0.35758364;0.4014273;0.33985034;0.52476573;0.45851275;
0.18570355;0.45336545;0.22244702;0.29581019;0.26415622;0.69652426;0.51708084;0.38350353;0.37087277;0.74367195;
0.26821211;0.53529137;0.60280913;0.48846206;0.6319862;0.82415473;0.36375338;0.2075716;0.37155184;0.28481922;
0.57001179;0.2079096;0.36855459;0.71022785;0.45104265;0.77132928;0.81503201;0.55563265;0.53158998;0.70579487;
0.7596944;0.50182611;0.28007767;0.23671696;0.85827786;0.516348;0.57788408;0.47370443;0.58362418;0.62489325;
0.44811004;0.4663671;0.73926526;0.31652585;0.36469117;0.48662838;0.2869848;0.68646461;0.46678966;0.36100215;
0.30253926;0.69989717;0.45978424;0.2901535;0.35997644;0.42405397;0.35925865;0.57093281;0.5098809;0.81227887;
0.25329709;0.32609165;0.6504333;0.64351845;0.65664393;0.81629956;0.12086771;0.30044332;0.26605406;0.61681342;
0.13414907;0.71609932;0.4750948;0.46807361;0.1271017;0.15755934;0.36781314;0.82923257;0.24422811;0.16441649;
0.18279484;0.23211871;0.38340461;0.60748231;0.10704406;0.68426597;0.27224568;0.40336058;0.12333521;0.87556225;
0.24595895;0.4719874;0.7682485;0.41322234;0.19104642;0.54211336;0.357676;0.51927692;0.56247604;0.39141899;
0.36923924;0.61402661;0.76747173;0.65104574;0.39599511;0.35935646;0.27870375;0.77402145;0.27921209;0.51329046;
0.26691324;0.27007622;0.63340384;0.21612473;0.17546874;0.59742111;0.32431814;0.47468758;0.31909502;0.18361837;
0.39402196;0.78689754;0.46387392;0.1769225;0.39324886;0.74352419;0.42832693;0.94052333;0.60123366;0.6011647;
0.44659323;0.42215264;0.76425511;0.72273463;0.40778559;0.18909949;0.49657539;0.75210792;0.34826759;0.50674707;
0.91705543;0.26473534;0.45632944;0.32262674;0.44172055;0.27379146;0.36663413;0.39103991;0.3446658;0.40372336;
0.18029873;0.31232098;0.79220718;0.26722124;0.33629468;0.58712071;0.2598677;0.33412609;0.37784296;0.38018033;
0.64185137;0.44497389;0.48275065;0.1691819;0.61283249;0.187012;0.46650544;0.29082814;0.6278953;0.25274527;
0.55709511;0.60585433;0.29943326;0.25870851;0.26088193;0.68841112;0.62205219;0.68610305;0.67940229;0.90389395;
0.21872847;0.33036143;0.45761058;0.5628621;0.25522599;0.39000842;0.33600187;0.35952517;0.60245866;0.23430932;
0.33659574;0.45753697;0.1344164;0.62730992;0.78412008;0.26650923;0.39794159;0.46443656;0.83889276;0.43763387;
0.51431578;0.64610058;0.68742681;0.5553875;0.64892906;0.21634062;0.88150895;0.42487496;0.51590449;0.24145579;
0.70147318;0.523839;0.35023817;0.46432322;0.38608402;0.56444037;0.5821839;0.47308272;0.28018162;0.40632835;
0.22058786;0.50533873;0.17851126;0.19775714;0.48746806;0.72813714;0.79714561;0.25782797;0.48314157;0.54224157;
0.71043676;0.50007397;0.17223686;0.77790779;0.72124904;0.54356045;0.50667042;0.44593665;0.26536626;0.74568516;
0.35018548;0.53908938;0.80813378;0.39768344;0.17512712;0.52192748;0.28008765;0.70781302;0.33156455;0.3377603;
0.31453735;0.42521852;0.45498896;0.47127169;0.63987011;0.55275971;0.42043996;0.88452262;0.52461094;0.47083059;
0.43027717;0.33205795;0.86174834;0.47849393;0.46073732;0.13410519;0.55701953;0.32843167;0.57476598;0.59080362;
0.60797209;0.27860853;0.13998152;0.45772177;0.65463877;0.87017155;0.50970697;0.72296649;0.83025992;0.63957411;
0.39772701;0.40816948;0.34377205;0.6133613;0.28034991;0.64605933;0.37850162;0.32731065;0.43147191;0.20840436;
0.29456875;0.37923092;0.50803393;0.47899348;0.32757458;0.36286351;0.58704329;0.83931011;0.44444638;0.44910705;
0.3988072;0.53575879;0.75626183;0.34611812;0.3163532;0.35711294;0.18920618;0.85984677;0.18764828;0.51468968;
0.23807293;0.33584046;0.86689728;0.5289495;0.46893719;0.36074397;0.33593494;0.59690118;0.43522456;0.69937968;
0.47149652;0.57687008;0.4778066;0.48931772;0.47591665;0.51962757;0.40169975;0.44091055;0.61881852;0.53294206;
0.63020408;0.51075763;0.63181758;0.38483965;0.27102101;0.71931285;0.5668534;0.48008382;0.25380048;0.70892656;
0.10491411;0.29554796;0.51331019;0.34859556;0.85466594;0.42997122;0.23764189;0.55906242;0.51380044;0.20384689;
0.18238896;0.33717719;0.93143964;0.28099269;0.42356798;0.17947485;0.58828992;0.27992648;0.20469281;0.31296632;
0.64132559;0.21356331;0.64211971;0.2988649;0.19332621;0.59375727;0.31672567;0.52260602;0.50378597;0.28172722;
0.44829351;0.43745598;0.31184101;0.31571692;0.72812468;0.53524864;0.31900555;0.25616357;0.52506322;0.7486918;
0.62911958;0.67424506;0.66003704;0.60038471;0.29479235;0.57768232;0.52341902;0.56004196;0.62694818;0.47834966;
0.68245286;0.40469545;0.50009656;0.27568141;0.55850399;0.2271637;0.23332773;0.28666046;0.7965284;0.27189961;
0.46992087;0.60777348;0.22691482;0.45857218;0.1324898;0.70483285;0.52997094;0.19252387;0.642672;0.63624579;
0.37376177;0.33900562;0.20407966;0.54645532;0.59692919;0.85824299;0.2683886;0.084268354;0.23815899;0.49316728;
0.34223205;0.54967046;0.31414795;0.26330644;0.49445003;0.55103624;0.18669304;0.59027743;0.16062234;0.27316263;
0.48605946;0.12894557;0.13581589;0.74203277;0.28830969;0.31211221;0.24847357;0.16325466;0.32885501;0.81036615;
0.85435045;0.42004827;0.53834492;0.50882638;0.28059933;0.29949704;0.81302953;0.60156506;0.61425406;0.38972947;
0.27907839;0.62849569;0.43662399;0.30376455;0.51463419;0.55040342;0.32409117;0.25947452;0.83573884;0.79856062;
0.13649929;0.34417048;0.41175964;0.46818632;0.70530641;0.30440021;0.60378075;0.6093092;0.32953548;0.68704152;
0.37411228;0.47428098;0.60493344;0.41222131;0.54278016;0.52302784;0.30962664;0.27059695;0.38384819;0.3555828;
0.73497438;0.67775732;0.27425924;0.30629009;0.68088222;0.44527823;0.32920173;0.57558894;0.70059383;0.37736517;
0.29242244;0.22274552;0.46144107;0.57210362;0.88784683;0.16063835;0.32345921;0.376028;0.45288128;0.49340874;
0.32161161;0.20556606;0.56681061;0.14959714;0.49889278;0.1747732;0.34616029;0.19430327;0.38499871;0.56619817;
0.82230049;0.17929377;0.30072474;0.18679282;0.46301457;0.26737973;0.62742609;0.2890844;0.63544792;0.4975788;
0.38134605;0.68513322;0.71270597;0.689722;0.23041463;0.30939779;0.47136912;0.43459967;0.225013;0.4847489;
0.27094415;0.80246246;0.22853659;0.70088828;0.27081412;0.69847816;0.69940853;0.37536821;0.28985471;0.43980283;
0.51032388;0.2664915;0.66304356;0.65861291;0.6707691;0.21141763;0.50511366;0.29915723;0.88659966;0.58465314;
0.46951839;0.42744732;0.60603702;0.53482509;0.48236549;0.62713534;0.81096673;0.419328;0.36128169;0.2253513;
0.5096494;0.21629335;0.45962575;0.55174005;0.19930574;0.22439593;0.38745645;0.85262519;0.43017313;0.4860785;
0.32603589;0.13313863;0.76040417;0.25796175;0.28619915;0.25589409;0.26366916;0.79155064;0.40217468;0.54820579;
0.24108253;0.39086995;0.88757324;0.26654133;0.23223348;0.44877693;0.25845179;0.84256583;0.58280766;0.14041087;
0.260795;0.28521916;0.24090779;0.33491626;0.21068272;0.29226705;0.26306799;0.22838074;0.20990673;0.21889734;
0.79298073;0.61373413;0.83141261;0.78856295;0.80959028;0.27798939;0.65717292;0.41118783;0.51046908;0.13225977;
0.29190454;0.21009085;0.45931092;0.41415459;0.28924453;0.85092956;0.44892114;0.47291452;0.41875181;0.35717025;
0.33405456;0.37192395;0.3170568;0.73299533;0.43190217;0.17149252;0.67738658;0.20300671;0.27507854;0.24510695;
0.84540308;0.48959705;0.35900104;0.34263068;0.87222856;0.24893805;0.50768197;0.57536691;0.46131679;0.60005009;
0.83009911;0.31325912;0.17481256;0.32038483;0.2486784;0.5098533;0.17510426;0.31764337;0.7148397;0.39432237;
0.77284145;0.85455269;0.57018059;0.5387457;0.70888257;0.76291245;0.44287983;0.23812386;0.20007621;0.85892814;
0.46510109;0.51772428;0.41585681;0.52348214;0.57324338;0.46865606;0.43791822;0.72202939;0.29343879;0.33940402;
0.45780453;0.26545522;0.6680423;0.48724827;0.33586818;0.28017047;0.71495163;0.44172406;0.26844978;0.33488554;
0.44462776;0.33419749;0.55168253;0.4807367;0.82232845;0.23372845;0.30253339;0.6315046;0.61496031;0.62838084;
0.84364086;0.093466565;0.2388767;0.21011481;0.66049987;0.10386105;0.69802284;0.39338976;0.44675285;0.098339804;
0.12230189;0.29670969;0.8838551;0.1921069;0.12773402;0.14236522;0.22204058;0.31039464;0.58980989;0.082695171;
0.72226375;0.21525756;0.32808533;0.095394321;0.89428657;0.22711733;0.44384485;0.79368412;0.38656136;0.1758074;
0.51316029;0.3330451;0.55807561;0.53349268;0.36548364;0.34413689;0.58540112;0.79297376;0.62307721;0.36989945;
0.33465549;0.2579422;0.79896051;0.25842223;0.48453957;0.2468224;0.24980313;0.66811365;0.19918309;0.16133368;
0.42339677;0.27403113;0.44354656;0.26938555;0.089670628;0.33699179;0.78440255;0.43309781;0.14641097;0.33628246;
0.73211712;0.42114329;0.89920491;0.59052104;0.59045315;0.38575098;0.36293986;0.73497748;0.72120643;0.34964675;
0.092484668;0.43321052;0.72220916;0.29545644;0.34343344;0.93270189;0.22042638;0.40412703;0.27113894;0.46480277;
0.22828259;0.36727911;0.34296313;0.30733189;0.34427482;0.14842413;0.2620244;0.84621787;0.22257999;0.2832877;
0.52027249;0.22997232;0.29081795;0.37825197;0.32277581;0.65922904;0.38250443;0.42932022;0.13910045;0.67136198;
0.17156328;0.43752259;0.26868936;0.59849685;0.2328539;0.52712017;0.57614291;0.27682173;0.23844893;0.24048956;
0.72150409;0.65913528;0.71935481;0.71310687;0.91632515;0.2010508;0.30616197;0.42882404;0.53288841;0.23518066;
0.3632547;0.31153131;0.33399099;0.57270926;0.21559437;0.34444019;0.40216535;0.11300619;0.56967455;0.82422042;
0.22731131;0.3462263;0.4087306;0.84192437;0.38333157;0.50327861;0.6333307;0.77658802;0.5436185;0.63614357;
0.18335268;0.88320273;0.37133935;0.45832047;0.20526884;0.75435209;0.46606407;0.30239296;0.40862268;0.39263621;
0.43012476;0.55452305;0.44613263;0.26021913;0.25205812;0.20407861;0.53285247;0.16475993;0.18271306;0.46027988;
0.70380902;0.77633709;0.17983647;0.4560205;0.51454413;0.68541944;0.47271341;0.15891793;0.79490131;0.69664276;
0.36165586;0.47923201;0.41954839;0.24621005;0.61756742;0.32567507;0.50990778;0.83044249;0.37131572;0.16090323;
0.49285734;0.25907999;0.73858476;0.3078984;0.31380612;0.29169852;0.39797574;0.49520025;0.44291091;0.61142933;
0.52353722;0.3933382;0.89882278;0.49551931;0.44247863;0.40289003;0.3083685;0.87856925;0.44999778;0.4325929;
0.12446228;0.53184122;0.30810362;0.54961991;0.56574225;0.58306015;0.26051083;0.12994391;0.43349558;0.63045156;
0.87711036;0.53038567;0.73728186;0.83937055;0.65709215;0.37495556;0.38509947;0.32283539;0.5885095;0.26216781;
0.62170327;0.35632819;0.30702862;0.40780416;0.19407026;0.2723152;0.35299772;0.54861808;0.44988793;0.30361059;
0.3372941;0.55728853;0.85887945;0.41610071;0.42064372;0.37184945;0.50597572;0.78378445;0.32128114;0.29294869;
0.33178893;0.17366223;0.87720364;0.17221674;0.48507321;0.21919125;0.31147936;0.88347316;0.49920905;0.44002607;
0.36074397;0.33593494;0.59690118;0.43522456;0.69937968;0.47149652;0.57687008;0.4778066;0.48931772;0.47591665;
0.51962757;0.40169975;0.44091055;0.61881852;0.53294206;0.63020408;0.51075763;0.63181758;0.38483965;0.27102101;
0.71931285;0.5668534;0.48008382;0.25380048;0.70892656;0.090325817;0.25473183;0.52084684;0.30275232;0.85925442;
0.37824768;0.20329206;0.56570554;0.52636433;0.1737047;0.15507205;0.29234004;0.94794506;0.24170987;0.37222144;
0.15255044;0.59919626;0.28964224;0.17444155;0.27040127;0.65462118;0.18217987;0.64692891;0.2577087;0.16720118;
0.59375727;0.31672567;0.52260602;0.50378597;0.28172722;0.44829351;0.43745598;0.31184101;0.31571692;0.72812468;
0.53524864;0.31900555;0.25616357;0.52506322;0.7486918;0.62911958;0.67424506;0.66003704;0.60038471;0.29479235;
0.57768232;0.52341902;0.56004196;0.62694818;0.47834966;0.71532547;0.37787655;0.47102934;0.25475809;0.52903879;
0.20921974;0.21498398;0.26511782;0.82019752;0.25119463;0.44135752;0.64483947;0.20898727;0.43024823;0.12139787;
0.73615921;0.50060338;0.17693661;0.61405307;0.67189234;0.34807128;0.31480271;0.1876861;0.51700866;0.56763494;
0.88478678;0.2303272;0.071129434;0.20360494;0.49228609;0.29675463;0.56089836;0.27128994;0.22581613;0.43955526;
0.49493104;0.15868627;0.6511842;0.13618684;0.23457097;0.43145722;0.10905793;0.11492355;0.74790758;0.24808156;
0.31476513;0.21269353;0.1384515;0.28459352;0.8448562;0.75475842;0.37078583;0.48472103;0.45578626;0.13615225;
0.25975281;0.81816256;0.54791671;0.61677021;0.34240967;0.24139653;0.6307357;0.27751428;0.26360458;0.46145174;
0.55412871;0.28202829;0.22388548;0.84003162;0.79777724;0.063354954;0.30035171;0.362997;0.41650966;0.51937181;
0.30440021;0.60378075;0.6093092;0.32953548;0.68704152;0.37411228;0.47428098;0.60493344;0.41222131;0.54278016;
0.52302784;0.30962664;0.27059695;0.38384819;0.3555828;0.73497438;0.67775732;0.27425924;0.30629009;0.68088222;
0.44527823;0.32920173;0.57558894;0.70059383;0.37736517;0.46454263;0.19267805;0.41228908;0.52064919;0.94892555;
0.13812898;0.28323889;0.33167738;0.47192684;0.44311538;0.28155157;0.17749782;0.77056962;0.1285225;0.4484404;
0.15046559;0.3653459;0.16758484;0.34002927;0.51474571;0.91747993;0.15442024;0.26254919;0.16099089;0.63207763;
0.26290846;0.62129235;0.28435004;0.62934911;0.50230348;0.37571034;0.67932904;0.70712501;0.69323695;0.22643302;
0.30443472;0.4652141;0.43944341;0.22110736;0.47854835;0.26642826;0.8047893;0.22458123;0.6952064;0.26629975;
0.70191163;0.69371414;0.36978015;0.28511149;0.43378773;0.48081791;0.2445671;0.63267809;0.62812775;0.69954813;
0.1932566;0.47373086;0.2752564;0.89890707;0.55297273;0.4387655;0.39983919;0.63792282;0.50314772;0.45135063;
0.59760696;0.82985395;0.38995409;0.3341842;0.20789966;0.54427648;0.1977783;0.42909998;0.51999092;0.18204091;
0.2061681;0.36054552;0.87097466;0.40183043;0.4564445;0.30182201;0.12170573;0.78788233;0.23755914;0.2641151;
0.23561971;0.24291542;0.816172;0.37472832;0.51795602;0.22175013;0.36383098;0.90195572;0.24561319;0.21348083;
0.41992894;0.23801866;0.86200744;0.55260926;0.12839332;0.2406611;0.26366708;0.22200234;0.31080264;0.19376728;
0.27032498;0.24279755;0.21028256;0.1930445;0.20142694;0.81659526;0.64999038;0.85129851;0.81258422;0.83163428;
0.25684649;0.62875652;0.38404241;0.48115054;0.12114043;0.26998207;0.19321585;0.43085063;0.38691413;0.26746842;
0.86953759;0.42007095;0.4435235;0.39075553;0.33149835;0.30944762;0.34562594;0.29329816;0.76289654;0.40350986;
0.15705675;0.71139938;0.18626045;0.25364017;0.22551551;0.86461377;0.45990479;0.33324897;0.31761688;0.88845021;
0.22910173;0.47773385;0.54513383;0.43217152;0.56998831;0.83420026;0.2694343;0.14777681;0.27585104;0.21200186;
0.4530791;0.14802752;0.27338037;0.72308946;0.34343845;0.7695778;0.88448364;0.57030988;0.53950918;0.70646447;
0.76945776;0.38888735;0.20273399;0.16958018;0.86199909;0.40998584;0.46074367;0.36348534;0.46636853;0.51557809;
0.5043723;0.41301492;0.6974864;0.27378988;0.31769657;0.43246782;0.24722421;0.6417557;0.52285105;0.31430718;
0.26117843;0.74190331;0.41555074;0.25006118;0.31336495;0.48034847;0.3127059;0.52405041;0.45499456;0.84097433;
0.21724935;0.28244999;0.60445321;0.58897227;0.60257941;0.8635115;0.071875982;0.18702242;0.16370086;0.70054662;
0.079907492;0.67361975;0.3181701;0.42617294;0.075638324;0.094217822;0.23488785;0.92025334;0.14925015;0.098449692;
0.10988747;0.21258745;0.24641736;0.56572181;0.063576803;0.75642043;0.16784883;0.2614435;0.073363647;0.90751261;
0.20909664;0.41574574;0.81695151;0.36026272;0.161358;0.48380336;0.30901241;0.59611803;0.50396836;0.3400121;
0.31959;0.55588263;0.81630641;0.59397066;0.34424734;0.31054679;0.23797411;0.82173979;0.23842537;0.45557567;
0.22753878;0.23033416;0.70103478;0.18305741;0.14796175;0.44515243;0.23575066;0.40666029;0.23161334;0.044698246;
0.29246199;0.87823445;0.39666301;0.12422045;0.29181606;0.73470914;0.42991751;0.90281427;0.59635162;0.59628522;
0.3372553;0.31620055;0.69896859;0.8397705;0.30401152;0.046097707;0.3816441;0.68552679;0.25491297;0.37402508;
0.94323343;0.18324405;0.35082394;0.22702405;0.48538837;0.18997364;0.36156166;0.29490522;0.27180067;0.29167858;
0.12238214;0.21909517;0.87980878;0.18508698;0.2376359;0.45586586;0.20203643;0.24823932;0.37220278;0.2724756;
0.67391509;0.32625222;0.37425545;0.11460017;0.71728545;0.15721735;0.40916526;0.24777156;0.56862646;0.21418504;
0.4971855;0.54611999;0.25542399;0.2194149;0.22132382;0.75215667;0.69412726;0.75017405;0.74440384;0.92724228;
0.18455331;0.28312936;0.40071216;0.50291407;0.21635926;0.33749315;0.28821626;0.30955151;0.54267365;0.19808388;
0.48035768;0.34019083;0.091593236;0.49969557;0.90418011;0.18655872;0.28976989;0.34619445;0.83754593;0.32306981;
0.48170963;0.6101476;0.89550167;0.52121896;0.61296308;0.14960679;0.87894768;0.3122462;0.39216048;0.16795622;
0.86337209;0.39943928;0.25113007;0.34609538;0.52846676;0.50483292;0.54639518;0.43833223;0.25457478;0.24655072;
0.19944002;0.60427105;0.16091189;0.17849545;0.45239574;0.69649655;0.7700063;0.23401861;0.4481599;0.50645179;
0.67792135;0.46476576;0.15519291;0.8352564;0.6892553;0.35459942;0.47125489;0.41193745;0.24080239;0.68219042;
0.30190575;0.48047093;0.85097432;0.34550768;0.14751315;0.46364647;0.23896679;0.76763213;0.28502807;0.29063055;
0.26969692;0.37116221;0.53603387;0.41472659;0.58204138;0.49396703;0.36668959;0.91175491;0.46626878;0.41430518;
0.37590662;0.28547353;0.89385736;0.42163575;0.40468651;0.11492444;0.50513077;0.28742978;0.52284575;0.53896773;
0.55634868;0.24225163;0.12000891;0.40828946;0.60425007;0.89074749;0.56582743;0.76302201;0.85667044;0.68783385;
0.35152054;0.36131266;0.30148816;0.5618313;0.2438188;0.59536976;0.33358556;0.28640521;0.38329846;0.1797573;
0.25113425;0.32762322;0.58863729;0.42114225;0.28066179;0.31264102;0.5271619;0.87650156;0.38831294;0.39271343;
0.34567067;0.47618297;0.80908328;0.29741228;0.27058256;0.30740041;0.15912637;0.89275891;0.15778939;0.45558947;
0.20139562;0.28811404;0.89830452;0.46950591;0.41153517;0.36074397;0.33593494;0.59690118;0.43522456;0.69937968;
0.47149652;0.57687008;0.4778066;0.48931772;0.47591665;0.51962757;0.40169975;0.44091055;0.61881852;0.53294206;
0.63020408;0.51075763;0.63181758;0.38483965;0.27102101;0.71931285;0.5668534;0.48008382;0.25380048;0.70892656;
0.078664936;0.21867077;0.53216845;0.26154482;0.86498779;0.33039889;0.17346573;0.5759958;0.5394277;0.14777528;
0.13170378;0.25218993;0.96135527;0.20715927;0.32483318;0.12953463;0.61055052;0.30303499;0.14841267;0.23258667;
0.67002642;0.1551123;0.65501702;0.22130887;0.14581625;0.59375727;0.31672567;0.52260602;0.50378597;0.28172722;
0.44829351;0.43745598;0.31184101;0.31571692;0.72812468;0.53524864;0.31900555;0.25616357;0.52506322;0.7486918;
0.62911958;0.67424506;0.66003704;0.60038471;0.29479235;0.57768232;0.52341902;0.56004196;0.62694818;0.47834966;
0.74620259;0.35173902;0.44212398;0.23485644;0.49934751;0.19229129;0.19766088;0.24458762;0.84178209;0.23151341;
0.41313869;0.68038613;0.19207475;0.40233445;0.11107744;0.76540697;0.47120351;0.16231142;0.58461964;0.70580363;
0.32318655;0.29151505;0.17227669;0.48741791;0.53784525;0.90555131;0.19592707;0.05977802;0.17265601;0.48966551;
0.25465849;0.57006508;0.23198874;0.19198523;0.38577899;0.43865228;0.13395542;0.70456415;0.11475033;0.19964088;
0.37814739;0.091735557;0.096699305;0.75202304;0.21149759;0.31602618;0.18054941;0.11667829;0.2438073;0.87234414;
0.78685892;0.32598519;0.43374524;0.40594643;0.069464244;0.22500575;0.90163445;0.49556592;0.62631238;0.29982424;
0.20865293;0.63991505;0.3249774;0.22844902;0.41136563;0.56514317;0.2449743;0.19313534;0.91377884;0.80199754;
0.032313328;0.26150542;0.31877881;0.36869079;0.541807;0.30440021;0.60378075;0.6093092;0.32953548;0.68704152;
0.37411228;0.47428098;0.60493344;0.41222131;0.54278016;0.52302784;0.30962664;0.27059695;0.38384819;0.3555828;
0.73497438;0.67775732;0.27425924;0.30629009;0.68088222;0.44527823;0.32920173;0.57558894;0.70059383;0.37736517;
0.46151736;0.16544902;0.36430895;0.4682422;0.9775449;0.11805279;0.13263726;0.28963959;0.48927727;0.39344007;
0.24423276;0.15219189;0.77828068;0.10977163;0.39850584;0.12871464;0.38330048;0.14356372;0.16358325;0.46246582;
0.9637233;0.13213958;0.22720985;0.13783707;0.606776;0.26008669;0.61736846;0.28135991;0.62544554;0.50619656;
0.37213954;0.67560613;0.70354062;0.69627017;0.22392307;0.3012979;0.46130151;0.44338784;0.21864568;0.4746047;
0.26357809;0.80688989;0.22208819;0.69155931;0.26345009;0.7048828;0.6900593;0.36623988;0.28211603;0.42996842;
0.45838097;0.22557478;0.60396868;0.59933972;0.7344082;0.17767051;0.44519165;0.25442857;0.91107428;0.52361536;
0.41102201;0.37327701;0.67709631;0.47414201;0.42329106;0.56842202;0.84927082;0.36374021;0.31028798;0.19130035;
0.58781713;0.18187594;0.40162075;0.49080402;0.17113788;0.18910767;0.33458656;0.88728684;0.37424713;0.42725241;
0.27874503;0.11114947;0.81288064;0.21835408;0.24322262;0.21654256;0.22336034;0.8383922;0.34817263;0.48772946;
0.20360516;0.33773008;0.91463774;0.22588389;0.19590652;0.39174262;0.2187835;0.87933218;0.52218306;0.11728691;
0.22160855;0.24318568;0.20417269;0.28767762;0.17789249;0.24944642;0.22360867;0.19324932;0.17722106;0.1850096;
0.838534;0.68523288;0.86961579;0.83492368;0.85203719;0.23677953;0.59949124;0.35761735;0.45199886;0.11082184;
0.24912405;0.17738034;0.40286633;0.36038083;0.24675927;0.88612765;0.39193502;0.41471058;0.36362675;0.30693057;
0.28600496;0.32038546;0.27073613;0.79035741;0.3759217;0.14368217;0.74311215;0.17067027;0.23343758;0.20714936;
0.88176334;0.43068847;0.30859557;0.29374662;0.90284121;0.21049422;0.44814551;0.5147863;0.40367135;0.53962982;
0.83771276;0.22962952;0.12421339;0.23530523;0.17936651;0.39754653;0.12442664;0.23311822;0.73046541;0.29588595;
0.7719816;0.91166824;0.57769811;0.54756367;0.71049374;0.77523011;0.33749059;0.17134285;0.14282228;0.86457223;
0.35705769;0.40482438;0.3141475;0.41017988;0.45759287;0.54227608;0.38749218;0.6720075;0.25416437;0.29584599;
0.40640298;0.22909705;0.61481649;0.56044048;0.29261693;0.2422502;0.76876676;0.3899534;0.23176885;0.29171956;
0.51851267;0.29109222;0.49644226;0.42839286;0.859128;0.20094383;0.26236036;0.57695961;0.56134355;0.57506657;
0.88342845;0.055654481;0.14619702;0.12756395;0.73401535;0.061869428;0.65521652;0.25462058;0.40405586;0.058564503;
0.072971299;0.18501297;0.94608414;0.11610211;0.076262236;0.085176259;0.20197345;0.19448586;0.54851925;0.0492424;
0.7844609;0.13086553;0.20690787;0.056804985;0.9209401;0.19217128;0.38825899;0.83870429;0.33483705;0.14789437;
0.45465156;0.28601661;0.63385409;0.47451499;0.31548792;0.2960526;0.52607614;0.83812368;0.56430894;0.31952813;
0.28747115;0.21912332;0.8430118;0.21954568;0.42699569;0.20936874;0.21197994;0.73274857;0.16797905;0.13552763;
0.45950824;0.20231;0.36071488;0.19866286;0.037936453;0.252783;0.88020086;0.35134706;0.10548303;0.25220293;
0.73871464;0.44035658;0.92587441;0.60382694;0.60376173;0.29332256;0.27418986;0.65114909;0.84300572;0.26317653;
0.039119191;0.33412865;0.63699299;0.2192625;0.38897839;0.95622128;0.15435304;0.30226913;0.19219241;0.50178111;
0.16013645;0.36892432;0.25194749;0.23383453;0.24907584;0.10254489;0.18530044;0.9075895;0.15593562;0.20144355;
0.3998034;0.1724388;0.21072009;0.37944651;0.23204872;0.68510509;0.28002825;0.32367316;0.095979132;0.77255476;
0.14388828;0.38150626;0.22802792;0.5384016;0.19667193;0.4674055;0.51590592;0.23519836;0.20154238;0.20332111;
0.78039396;0.7269184;0.77858102;0.77329934;0.93683094;0.16915637;0.26124209;0.37334338;0.47305512;0.19869609;
0.31274465;0.26603854;0.28620601;0.51247168;0.1817039;0.46520087;0.27770269;0.072168961;0.42282349;0.9183262;
0.14830023;0.23424312;0.2829487;0.82832235;0.26282758;0.45348263;0.57952875;0.92628145;0.49185425;0.58233696;
0.11838952;0.87068206;0.25348762;0.323641;0.13319188;0.88357127;0.3301734;0.20162082;0.28286242;0.51201624;
0.55488938;0.52225608;0.41547039;0.23835996;0.23074122;0.18618327;0.65019608;0.14995161;0.16646509;0.42924955;
0.67433053;0.75060046;0.27516538;0.42509574;0.48253778;0.65525407;0.44139835;0.14458814;0.85923076;0.66688466;
0.33411333;0.44778261;0.38970003;0.22528848;0.72251725;0.27923906;0.45131713;0.86931247;0.32068074;0.13508917;
0.43482625;0.22001441;0.79418403;0.26329014;0.26857874;0.24884605;0.34523112;0.57605475;0.38721612;0.55223441;
0.46459123;0.34094188;0.92312491;0.43739259;0.38680804;0.34978515;0.26371044;0.90735942;0.39391023;0.37750602;
0.10560077;0.47713423;0.26666796;0.49467608;0.51070029;0.52803928;0.22405852;0.11029093;0.38239115;0.57618093;
0.90374684;0.60252255;0.78831065;0.87328696;0.7186268;0.32770598;0.33709583;0.27999583;0.53352273;0.22553118;
0.56721568;0.3105529;0.26569772;0.35824305;0.16563927;0.23119932;0.30338034;0.62732238;0.39312908;0.25894064;
0.28915876;0.49708366;0.89217097;0.36142543;0.36566198;0.32056698;0.44678897;0.83199281;0.27474591;0.24945408;
0.28419429;0.14566381;0.90653253;0.1444304;0.42663625;0.18479718;0.2659663;0.91141862;0.44024447;0.38382855;
0.36074397;0.33593494;0.59690118;0.43522456;0.69937968;0.47149652;0.57687008;0.4778066;0.48931772;0.47591665;
0.51962757;0.40169975;0.44091055;0.61881852;0.53294206;0.63020408;0.51075763;0.63181758;0.38483965;0.27102101;
0.71931285;0.5668534;0.48008382;0.25380048;0.70892656;0.066370443;0.1864468;0.5399406;0.22417587;0.86742687;
0.28589946;0.14719611;0.58286321;0.55176878;0.12511103;0.11136943;0.21589945;0.97053164;0.17640181;0.28085536;
0.10951895;0.62115121;0.31328595;0.12565729;0.19863659;0.67890245;0.13140306;0.66006207;0.1887535;0.12343302;
0.59375727;0.31672567;0.52260602;0.50378597;0.28172722;0.44829351;0.43745598;0.31184101;0.31571692;0.72812468;
0.53524864;0.31900555;0.25616357;0.52506322;0.7486918;0.62911958;0.67424506;0.66003704;0.60038471;0.29479235;
0.57768232;0.52341902;0.56004196;0.62694818;0.47834966;0.77479625;0.32652318;0.41369361;0.21608944;0.46976423;
0.17644712;0.18143246;0.22519296;0.86124277;0.21296534;0.38555869;0.71394545;0.17624603;0.37511626;0.10153747;
0.79234368;0.4420982;0.14869025;0.55469447;0.73757905;0.29931849;0.26931846;0.15790217;0.45801583;0.50789696;
0.92851985;0.16568209;0.050150391;0.14565064;0.50457233;0.2168812;0.57930547;0.19700493;0.16227938;0.33500034;
0.38432086;0.11262551;0.76629287;0.096358322;0.16889188;0.32796645;0.076956272;0.08113306;0.75625807;0.17916317;
0.33222255;0.15242991;0.097988017;0.20734854;0.90277421;0.8332004;0.2829068;0.38269126;0.35656741;0.058849122;
0.19273202;0.90333897;0.4418143;0.6344381;0.25925633;0.17839803;0.64768881;0.34120193;0.19575983;0.36163777;
0.57473433;0.21033262;0.16485891;0.91508782;0.8051821;0.027452083;0.22498651;0.27637076;0.32198146;0.55575383;
0.30440021;0.60378075;0.6093092;0.32953548;0.68704152;0.37411228;0.47428098;0.60493344;0.41222131;0.54278016;
0.52302784;0.30962664;0.27059695;0.38384819;0.3555828;0.73497438;0.67775732;0.27425924;0.30629009;0.68088222;
0.44527823;0.32920173;0.57558894;0.70059383;0.37736517;0.47169301;0.13916519;0.31466153;0.41168913;0.98301637;
0.098926939;0.11125657;0.24734454;0.50109559;0.34144759;0.20728272;0.12785946;0.82585591;0.091945037;0.34613711;
0.10793607;0.39642224;0.12052343;0.13757174;0.40618649;0.97250611;0.11083507;0.19242118;0.11566341;0.61391038;
0.25638101;0.61215222;0.27743161;0.62025571;0.51129746;0.36743462;0.67064524;0.69875884;0.70021433;0.22063082;
0.29717427;0.45613003;0.44857043;0.21541724;0.46938995;0.25983512;0.80960941;0.21881811;0.68669659;0.25970852;
0.70874465;0.68518662;0.36157653;0.27817973;0.42492604;0.43006796;0.2077387;0.5747512;0.57007462;0.76337415;
0.16315214;0.4171921;0.23476671;0.92237538;0.4943015;0.38400191;0.34761143;0.71018696;0.44550252;0.39589188;
0.53897417;0.86754733;0.33846077;0.28748876;0.17580327;0.62559372;0.16705273;0.37491164;0.46187699;0.15709835;
0.17325976;0.30979186;0.90181434;0.34767959;0.39880756;0.25694951;0.10146154;0.8355841;0.20042129;0.2236249;
0.19873503;0.20508449;0.85843384;0.32273614;0.45786965;0.18670706;0.31278366;0.92585742;0.20743637;0.17956229;
0.36449242;0.20082109;0.89479268;0.49188116;0.10708556;0.20366861;0.22382441;0.18743581;0.26563203;0.1630571;
0.2296872;0.20553391;0.17729039;0.16243552;0.16964899;0.85831159;0.71843171;0.88599133;0.85508251;0.87036312;
0.21783221;0.56959528;0.33206809;0.42323428;0.10127565;0.22938494;0.16258296;0.37554938;0.3347123;0.22716974;
0.90082645;0.36469981;0.38668105;0.33752534;0.28356847;0.26380569;0.29631835;0.24943434;0.81533587;0.34930828;
0.13133465;0.77235484;0.15621509;0.21449813;0.19001353;0.89697534;0.40216604;0.28514454;0.27110785;0.91553718;
0.19312249;0.41914582;0.48458105;0.37601352;0.50923383;0.84095746;0.19477308;0.10426788;0.19972841;0.15127581;
0.34562451;0.10444835;0.19781782;0.73737359;0.25320879;0.77426982;0.93267614;0.58484781;0.55537683;0.71435559;
0.78061032;0.29060364;0.14439288;0.12005172;0.86693335;0.30839139;0.3523798;0.26955304;0.35736388;0.40196311;
0.5805558;0.3620156;0.64491451;0.23506047;0.27441627;0.3802855;0.21152836;0.58656329;0.5981999;0.271357;
0.22386354;0.79421109;0.36438951;0.21403174;0.27050716;0.55732948;0.2699129;0.46825105;0.40161729;0.8759231;
0.18521488;0.24277669;0.54837751;0.53272343;0.54647672;0.90073824;0.042961143;0.11324679;0.09862718;0.76512843;
0.047737263;0.63707209;0.2005152;0.38354763;0.045196876;0.056280125;0.14403179;0.9641726;0.089680038;0.058815919;
0.065693781;0.19251816;0.15161774;0.53189129;0.038036969;0.81021643;0.10121047;0.1616119;0.043844964;0.93256176;
0.17624645;0.3613939;0.85782838;0.31026119;0.13531734;0.42574224;0.26400462;0.66917145;0.44517547;0.29187593;
0.27347815;0.49602899;0.85730755;0.53413391;0.29570884;0.26537624;0.20130315;0.86168945;0.20169701;0.398826;
0.19222157;0.19465125;0.76153237;0.15384889;0.12393392;0.47112352;0.17292653;0.31475049;0.16974379;0.032215104;
0.21733052;0.88130122;0.30615109;0.089463435;0.21681641;0.74336016;0.45162714;0.94280624;0.61205047;0.6119867;
0.25350747;0.23637404;0.59774649;0.84508049;0.22656028;0.033214439;0.29041877;0.58311862;0.1877653;0.40131742;
0.96685004;0.12957604;0.2583771;0.16195127;0.51537567;0.13450207;0.37965932;0.21385272;0.19900842;0.21133515;
0.085779682;0.15602806;0.92986387;0.13092309;0.16992249;0.34706506;0.14578782;0.17793819;0.3901009;0.1964571;
0.69378948;0.23860139;0.27755958;0.080266878;0.82133371;0.13156596;0.35476243;0.20951343;0.50811827;0.18034065;
0.43805817;0.4857946;0.21620679;0.18486191;0.18651402;0.80615956;0.75730824;0.80451494;0.79971939;0.94522363;
0.15486501;0.24058954;0.34692582;0.44359216;0.1822191;0.2891548;0.2450927;0.26407075;0.48239651;0.1664685;
0.46303236;0.22911175;0.058266208;0.35836712;0.9342044;0.12022112;0.1919498;0.23364213;0.82393056;0.21631937;
0.4189252;0.54178685;0.94795215;0.45587334;0.54457533;0.095732123;0.86630702;0.20832613;0.2691257;0.10782434;
0.9059509;0.27488023;0.16446386;0.23356771;0.50879014;0.5913617;0.49472675;0.38993511;0.22079773;0.21363834;
0.17193851;0.68274552;0.13823339;0.15357363;0.40333018;0.64821333;0.72731853;0.30795857;0.39928848;0.45548096;
0.62866139;0.41516989;0.13325809;0.87537432;0.64057124;0.31156719;0.42140356;0.36497995;0.2085197;0.750543;
0.25759929;0.42246473;0.88555294;0.29678389;0.12352148;0.40640745;0.20211925;0.8182053;0.24260038;0.24756919;
0.22905435;0.32014593;0.61473984;0.36036825;0.52203739;0.4354319;0.31605598;0.93304807;0.40890279;0.35997561;
0.32449231;0.24299499;0.91919303;0.36681348;0.3510344;0.096807837;0.44888422;0.24658343;0.46614206;0.48196515;
0.49914977;0.20659092;0.10112076;0.35677296;0.54721951;0.91563743;0.63886094;0.81210542;0.88859314;0.74814421;
0.3044028;0.31335568;0.25915357;0.50459844;0.20796829;0.53822726;0.28808856;0.24566944;0.33357808;0.15221281;
0.21241893;0.2802217;0.66367137;0.36586383;0.23837072;0.26679036;0.46711716;0.90576071;0.33543226;0.3394872;
0.29650289;0.41783905;0.85221273;0.25321558;0.22948144;0.26211047;0.13316432;0.91842914;0.13202924;0.3982484;
0.16928792;0.24496397;0.92272973;0.41146782;0.35691577;0.36074397;0.33593494;0.59690118;0.43522456;0.69937968;
0.47149652;0.57687008;0.4778066;0.48931772;0.47591665;0.51962757;0.40169975;0.44091055;0.61881852;0.53294206;
0.63020408;0.51075763;0.63181758;0.38483965;0.27102101;0.71931285;0.5668534;0.48008382;0.25380048;0.70892656;
0.055989943;0.15838234;0.56341118;0.19122426;0.86980635;0.2457957;0.12458893;0.60482067;0.56388062;0.10572579;
0.094038606;0.18398812;0.97866118;0.14969917;0.24129441;0.092467479;0.63150126;0.33886576;0.10619136;0.168953;
0.68754113;0.1110896;0.67861646;0.1603799;0.10429683;0.59375727;0.31672567;0.52260602;0.50378597;0.28172722;
0.44829351;0.43745598;0.31184101;0.31571692;0.72812468;0.53524864;0.31900555;0.25616357;0.52506322;0.7486918;
0.62911958;0.67424506;0.66003704;0.60038471;0.29479235;0.57768232;0.52341902;0.56004196;0.62694818;0.47834966;
0.80099499;0.30238134;0.38597035;0.19849765;0.44055504;0.16169633;0.16631143;0.20698327;0.87865227;0.19558883;
0.35882738;0.745242;0.1615102;0.34879413;0.092753515;0.81690109;0.41353849;0.1360655;0.52455556;0.76700741;
0.2765919;0.24830632;0.14455992;0.4290624;0.47806668;0.9458462;0.13945349;0.042028867;0.12237515;0.51521438;
0.18355793;0.58944076;0.16635472;0.13654603;0.28817928;0.3332096;0.094411284;0.81677163;0.080715939;0.14219896;
0.28182504;0.064438909;0.067938253;0.76124638;0.1510016;0.34470004;0.12814456;0.082085907;0.17529429;0.92598426;
0.86861688;0.24328078;0.33393085;0.30988288;0.04969142;0.1639401;0.90297061;0.38924453;0.64212966;0.22225097;
0.15152732;0.65503174;0.35195479;0.16656874;0.31453216;0.58389431;0.17925243;0.13984835;0.91455638;0.80807424;
0.023263179;0.19206311;0.23745266;0.2783961;0.56356162;0.30440021;0.60378075;0.6093092;0.32953548;0.68704152;
0.37411228;0.47428098;0.60493344;0.41222131;0.54278016;0.52302784;0.30962664;0.27059695;0.38384819;0.3555828;
0.73497438;0.67775732;0.27425924;0.30629009;0.68088222;0.44527823;0.32920173;0.57558894;0.70059383;0.37736517;
0.48355556;0.11669262;0.26949495;0.3581427;0.98727494;0.082751639;0.093117848;0.20984311;0.5121181;0.29363778;
0.17498609;0.10712285;0.86544108;0.076893173;0.29788947;0.090323284;0.40889829;0.10092801;0.11534207;0.35302383;
0.97935623;0.092762999;0.16216861;0.096829712;0.62266171;0.25359148;0.60817647;0.27447203;0.61629885;0.515163;
0.36388034;0.66685516;0.6951015;0.70318449;0.21815491;0.29406571;0.45221129;0.45250642;0.2129896;0.46543646;
0.25701669;0.81165129;0.21635877;0.68297887;0.25689119;0.71165216;0.68146217;0.35805425;0.27521425;0.42110953;
0.40225977;0.1909721;0.54509133;0.54040015;0.79017872;0.14960459;0.38976765;0.21619503;0.9324072;0.46509716;
0.35772288;0.32283649;0.74127543;0.41727868;0.36917713;0.50933284;0.88399112;0.3141036;0.26574063;0.16131291;
0.66197902;0.15321209;0.34898439;0.43326706;0.14400975;0.15852551;0.28614351;0.91438073;0.32214174;0.37116387;
0.23637766;0.092550345;0.85560107;0.18367086;0.20524274;0.18210654;0.18799922;0.87598652;0.29841188;0.42846403;
0.17096084;0.28897637;0.93549705;0.19018342;0.16435021;0.33820456;0.18404175;0.90819252;0.46180439;0.097695246;
0.18689421;0.20565583;0.17183013;0.24478269;0.14927998;0.21112533;0.18862784;0.16243531;0.14870611;0.15536889;
0.87601024;0.74933535;0.90053964;0.87313759;0.88671046;0.2000716;0.53937888;0.30758557;0.39513102;0.092489392;
0.2108431;0.14884205;0.34913427;0.31010157;0.208776;0.91378421;0.33851117;0.35960117;0.31256968;0.26147491;
0.24289224;0.27350017;0.22942147;0.83786905;0.32380071;0.11996631;0.79906046;0.14285551;0.19681935;0.17408717;
0.91039884;0.37451714;0.26295981;0.24975021;0.92668784;0.17696822;0.39092928;0.45475134;0.34935415;0.47904232;
0.84399861;0.16446565;0.087388627;0.16874221;0.12718977;0.2978653;0.08754053;0.16709273;0.74391913;0.21532829;
0.77637458;0.94883281;0.59169537;0.5628854;0.7179817;0.78568846;0.24839887;0.12133261;0.10070238;0.86913496;
0.26428255;0.30400866;0.22973002;0.30855128;0.34959209;0.61861473;0.33682841;0.6163733;0.21662402;0.25358713;
0.35436809;0.19464257;0.55721933;0.63554376;0.2507045;0.20615421;0.81800038;0.3391037;0.19697686;0.24990405;
0.59619421;0.24934442;0.43975064;0.3749297;0.89129144;0.17016348;0.22385113;0.51895618;0.50336933;0.51706052;
0.91520703;0.033225413;0.08748287;0.076123953;0.79270822;0.036892608;0.61950803;0.15650821;0.36469749;0.034941994;
0.043454912;0.11157642;0.97629088;0.06919542;0.045403931;0.050693598;0.18409924;0.11755383;0.51612473;0.02944467;
0.83279884;0.078127392;0.12545423;0.033904042;0.94223297;0.16145006;0.33553383;0.87567109;0.28685221;0.12370668;
0.39752567;0.24322692;0.70371735;0.41641498;0.26946715;0.25213048;0.46623152;0.87520832;0.50393999;0.27308634;
0.2445152;0.18467505;0.87910116;0.18504085;0.37149301;0.17624635;0.17850009;0.7890076;0.14076748;0.11324861;
0.4823027;0.14715464;0.27245325;0.14440353;0.027338929;0.1857968;0.88223559;0.26469165;0.075717643;0.18534668;
0.74827957;0.4633638;0.95612484;0.62061197;0.62055063;0.2176598;0.20252509;0.54254454;0.8469314;0.19389214;
0.028182138;0.25055009;0.52779526;0.16001353;0.41331413;0.9749921;0.10853349;0.2194472;0.13601533;0.52773339;
0.11269966;0.39118826;0.18060669;0.16841325;0.1784274;0.071699582;0.1309696;0.94699794;0.10967244;0.14281954;
0.29863489;0.12275486;0.14967713;0.40154603;0.16558301;0.70136219;0.20212537;0.23636134;0.067086488;0.86139476;
0.12020266;0.32906333;0.19222045;0.47800559;0.16516386;0.40934291;0.45600882;0.19844688;0.16934873;0.17087863;
0.82911873;0.78478295;0.82763529;0.82330638;0.95241511;0.14163926;0.22118986;0.32158187;0.41472727;0.16690205;
0.26678768;0.22540069;0.2431853;0.4526704;0.15234248;0.46951303;0.19224799;0.048290025;0.30660802;0.94943309;
0.099757336;0.16033421;0.19616523;0.82562423;0.18121792;0.38740972;0.50579751;0.96358031;0.42262995;0.50852966;
0.079338349;0.86693782;0.17434958;0.2270661;0.089406446;0.92740923;0.23211488;0.13697278;0.19610111;0.51440889;
0.62774432;0.46661231;0.36441889;0.20378987;0.19709542;0.15825108;0.7143873;0.12702894;0.14122088;0.37736014;
0.62059093;0.70220178;0.34363195;0.37345177;0.42807928;0.6006676;0.38882747;0.12243249;0.8902961;0.61279243;
0.28937727;0.39487633;0.34040076;0.19231343;0.77728879;0.23722757;0.3943643;0.9002319;0.27411518;0.11287607;
0.37882712;0.18544249;0.84028041;0.22317769;0.22782789;0.21052113;0.29623845;0.65238106;0.33456722;0.49195087;
0.4069511;0.29235831;0.94192696;0.38123778;0.3341918;0.30036542;0.22354677;0.9298104;0.34073815;0.32564557;
0.088605739;0.42079484;0.22740588;0.43766314;0.45318493;0.47010368;0.19002904;0.092562258;0.33178815;0.51777917;
0.92604661;0.67329478;0.83353919;0.90209103;0.77522421;0.28190953;0.29040116;0.2392071;0.47548136;0.19131227;
0.5088203;0.26647288;0.22654881;0.30963457;0.13959371;0.19491255;0.25835767;0.69877845;0.33966723;0.21910523;
0.24572732;0.43767408;0.91809797;0.31061676;0.31447679;0.27371031;0.38970888;0.87078691;0.23299412;0.21080607;
0.24133392;0.12166461;0.92920256;0.12062182;0.37078217;0.1549381;0.22526926;0.93296498;0.38354495;0.33110639;
0.36074397;0.33593494;0.59690118;0.43522456;0.69937968;0.47149652;0.57687008;0.4778066;0.48931772;0.47591665;
0.51962757;0.40169975;0.44091055;0.61881852;0.53294206;0.63020408;0.51075763;0.63181758;0.38483965;0.27102101;
0.71931285;0.5668534;0.48008382;0.25380048;0.70892656;0.047110297;0.13379313;0.57155401;0.16205554;0.87161362;
0.20963377;0.10497102;0.61201006;0.57478809;0.088984728;0.07911244;0.15580574;0.98384136;0.12636332;0.20567819;
0.077787094;0.64066553;0.35006684;0.089378417;0.14286108;0.69506717;0.093523592;0.68394107;0.13550463;0.08777643;
0.59375727;0.31672567;0.52260602;0.50378597;0.28172722;0.44829351;0.43745598;0.31184101;0.31571692;0.72812468;
0.53524864;0.31900555;0.25616357;0.52506322;0.7486918;0.62911958;0.67424506;0.66003704;0.60038471;0.29479235;
0.57768232;0.52341902;0.56004196;0.62694818;0.47834966;0.82486278;0.27932829;0.3590349;0.18202369;0.41183442;
0.14796765;0.15222777;0.18990536;0.89417922;0.17932448;0.33300459;0.77421385;0.14779611;0.32341963;0.0846579;
0.83917344;0.38562468;0.12436204;0.49434268;0.79407817;0.25499967;0.22845091;0.13217533;0.40066618;0.44848579;
0.9591524;0.11700419;0.035217807;0.10255004;0.52513909;0.15463848;0.59982759;0.13990352;0.11453914;0.24598818;
0.28633204;0.079007603;0.8581481;0.067526944;0.11933368;0.24034794;0.053916086;0.056839541;0.76644999;0.1268141;
0.35669491;0.10742597;0.068674043;0.14755131;0.94397032;0.898094;0.20764928;0.28860039;0.26687706;0.041875817;
0.13871565;0.90310347;0.33929837;0.64968562;0.18921632;0.12807296;0.66223907;0.3638621;0.14097415;0.2710622;
0.59292734;0.15189424;0.11809091;0.91447771;0.81089324;0.019686721;0.16296409;0.20252848;0.23871014;0.57248974;
0.30440021;0.60378075;0.6093092;0.32953548;0.68704152;0.37411228;0.47428098;0.60493344;0.41222131;0.54278016;
0.52302784;0.30962664;0.27059695;0.38384819;0.3555828;0.73497438;0.67775732;0.27425924;0.30629009;0.68088222;
0.44527823;0.32920173;0.57558894;0.70059383;0.37736517;0.49472278;0.097626686;0.22916377;0.30861911;0.99049121;
0.069141209;0.077820249;0.17707783;0.52357048;0.25054795;0.14709993;0.089574225;0.89704418;0.064243197;0.25433311;
0.075478852;0.42189288;0.084370866;0.09648928;0.30395871;0.98454326;0.077522948;0.13615447;0.080932252;0.63070428;
0.25042313;0.60360956;0.27110857;0.61175209;0.5200336;0.35983023;0.66249222;0.69088668;0.70696419;0.21534517;
0.2905308;0.44773361;0.45745486;0.21023513;0.46091709;0.25381517;0.81427842;0.21356796;0.67869633;0.25369093;
0.71535438;0.67717147;0.3540414;0.27184397;0.41675302;0.37508315;0.17524527;0.51515657;0.51048368;0.81478387;
0.1369819;0.36303788;0.19869918;0.94128156;0.43616083;0.33228073;0.29902023;0.77021086;0.38960662;0.34325132;
0.47966561;0.89871025;0.29072967;0.24506555;0.14778717;0.69664091;0.1403093;0.32392776;0.40511888;0.13182513;
0.14492722;0.263805;0.92572063;0.29784203;0.34458786;0.21713109;0.084403373;0.87390238;0.168147;0.1881422;
0.16669975;0.17215337;0.89195776;0.27537829;0.39983612;0.15639895;0.26647484;0.94416195;0.17417613;0.15029794;
0.31310794;0.16849042;0.92029983;0.43230093;0.089104913;0.17127153;0.1886792;0.15733244;0.22516204;0.13652721;
0.19376448;0.17287768;0.14865586;0.13599862;0.14213812;0.89155793;0.77748859;0.91323459;0.88901144;0.90102899;
0.18349235;0.50908345;0.28426316;0.3678658;0.084420107;0.1935018;0.13612373;0.32375607;0.28664538;0.19157954;
0.9251886;0.31341359;0.33353412;0.2887809;0.24062668;0.22322731;0.2519179;0.21065083;0.85810339;0.29942966;
0.10949533;0.82330489;0.13050897;0.18033479;0.15929447;0.92222297;0.34781703;0.24201947;0.22964188;0.93647063;
0.16195674;0.36358431;0.4254294;0.32374713;0.44919854;0.84690636;0.13817817;0.0730564;0.14182965;0.10653105;
0.2544218;0.073183812;0.14042072;0.75022125;0.18190832;0.77771676;0.96112806;0.59752166;0.56936681;0.7207256;
0.79056507;0.21071878;0.10158601;0.084221996;0.87123394;0.22466986;0.25990251;0.1944164;0.26396337;0.30096403;
0.65531409;0.31257695;0.58711684;0.19927214;0.23385218;0.32932517;0.17880988;0.5275678;0.67137086;0.23114699;
0.18951666;0.83966452;0.31474632;0.18097937;0.23039651;0.63392532;0.22987147;0.41171026;0.34903339;0.90502179;
0.15610753;0.20601588;0.48949119;0.47407624;0.48761374;0.92762321;0.025774913;0.067564107;0.05878602;0.81683141;
0.028594088;0.60245556;0.12153579;0.34606323;0.027094707;0.033637695;0.08626876;0.98430616;0.053442299;0.035135742;
0.039201956;0.17573841;0.090929709;0.50108844;0.022867212;0.85237139;0.060332667;0.097103864;0.026296692;0.95052743;
0.14769535;0.31069848;0.89156288;0.26459074;0.11297513;0.37006897;0.22363314;0.73602909;0.38831326;0.248229;
0.23196551;0.43678907;0.89115369;0.47384429;0.25163069;0.22483768;0.16915779;0.89459497;0.16949648;0.34504446;
0.16135955;0.16344371;0.81407231;0.12864621;0.1033867;0.49312356;0.12466943;0.23401539;0.12231226;0.023173215;
0.15796414;0.8830291;0.22711883;0.063930005;0.15757416;0.75294006;0.47481611;0.96647096;0.62882727;0.62876785;
0.18569218;0.17248932;0.48665103;0.84859347;0.16498421;0.02388343;0.21459776;0.47213975;0.13571064;0.42503694;
0.98124117;0.090846419;0.1855628;0.11404954;0.5390051;0.094354339;0.40339649;0.15205331;0.14161403;0.15018468;
0.059962116;0.10977751;0.96004272;0.091805242;0.11981852;0.25521591;0.10283431;0.12564331;0.41366434;0.13919614;
0.70800936;0.17056894;0.20028448;0.056108035;0.89375234;0.1097407;0.3044962;0.17611624;0.44826585;0.15109478;
0.38141835;0.42673975;0.18188991;0.15495783;0.15637079;0.85022163;0.81033111;0.84889442;0.84501857;0.95884949;
0.12942426;0.20303041;0.29739156;0.38662416;0.15269895;0.24567077;0.20695373;0.22355561;0.42348197;0.1392744;
0.479132;0.16199511;0.040409472;0.26224673;0.96187186;0.083435997;0.13466661;0.16536722;0.82923257;0.1525209;
0.3356005;0.44748193;0.97260606;0.36830899;0.45013145;0.066324748;0.86917883;0.14663704;0.19211473;0.074753657;
0.94505048;0.19650988;0.11481695;0.16531242;0.52321702;0.66330427;0.43835551;0.3393164;0.18755038;0.18131721;
0.14527716;0.74455744;0.11645631;0.12954132;0.35174388;0.59182936;0.67550683;0.38169783;0.34798726;0.40076473;
0.57165891;0.36278298;0.11222367;0.90387803;0.58392203;0.26786357;0.36861619;0.31633484;0.17686881;0.80235267;
0.2180375;0.36703917;0.91322285;0.25261128;0.10305097;0.35209697;0.16987757;0.86013192;0.20492885;0.20926405;
0.19314763;0.27346042;0.68814182;0.30979365;0.4620468;0.37918007;0.26979762;0.94970495;0.35441208;0.30943635;
0.27735955;0.20527281;0.93913811;0.31566873;0.30131203;0.080992512;0.39312154;0.20922461;0.40950283;0.42462918;
0.44117591;0.17442933;0.084614858;0.30762595;0.48813841;0.93566912;0.70708227;0.85372823;0.91462094;0.80109447;
0.26036888;0.26838285;0.22025664;0.44644821;0.17562057;0.47927469;0.24583295;0.20842445;0.28658107;0.1278023;
0.17858061;0.23772109;0.73160148;0.31453517;0.20105481;0.22589484;0.40882128;0.92894292;0.28695187;0.29060793;
0.25213358;0.36243361;0.88731605;0.21399929;0.19333495;0.22178744;0.11106116;0.93864715;0.11010498;0.3442589;
0.14164023;0.20679568;0.9419297;0.35650656;0.30639032;0.36074397;0.33593494;0.59690118;0.43522456;0.69937968;
0.47149652;0.57687008;0.4778066;0.48931772;0.47591665;0.51962757;0.40169975;0.44091055;0.61881852;0.53294206;
0.63020408;0.51075763;0.63181758;0.38483965;0.27102101;0.71931285;0.5668534;0.48008382;0.25380048;0.70892656;
0.039650414;0.11276121;0.5794369;0.1368984;0.8734256;0.17796238;0.088318475;0.61894822;0.58556533;0.074826628;
0.066515006;0.13154544;0.98778552;0.1064447;0.17452629;0.065400109;0.64969319;0.36115959;0.075158402;0.12048636;
0.70247239;0.078653052;0.6890536;0.11421809;0.073808581;0.59375727;0.31672567;0.52260602;0.50378597;0.28172722;
0.44829351;0.43745598;0.31184101;0.31571692;0.72812468;0.53524864;0.31900555;0.25616357;0.52506322;0.7486918;
0.62911958;0.67424506;0.66003704;0.60038471;0.29479235;0.57768232;0.52341902;0.56004196;0.62694818;0.47834966;
0.84634304;0.25755265;0.33317566;0.16673794;0.38394621;0.1352994;0.13922319;0.17403774;0.9078958;0.16424032;
0.30834812;0.80066413;0.13514151;0.29923856;0.077251337;0.85913891;0.35867351;0.11360035;0.46445256;0.81865263;
0.23469952;0.20987588;0.12077467;0.37316;0.41952676;0.96929097;0.097958758;0.029521188;0.085793748;0.53485036;
0.12983374;0.61001432;0.1173171;0.09588141;0.20865352;0.24421564;0.066057548;0.89126015;0.056462403;0.099923022;
0.20372048;0.045105435;0.047543358;0.77153057;0.10623847;0.36864051;0.089893155;0.057420254;0.1238073;0.95776433;
0.92150289;0.17630109;0.2475573;0.22824852;0.035276331;0.11699608;0.90314001;0.29319286;0.6572423;0.16032863;
0.1079374;0.66944808;0.3755641;0.11892148;0.2319577;0.60196495;0.12824699;0.099461906;0.91431433;0.81375903;
0.016661625;0.13772799;0.1718552;0.20342062;0.58102643;0.30440021;0.60378075;0.6093092;0.32953548;0.68704152;
0.37411228;0.47428098;0.60493344;0.41222131;0.54278016;0.52302784;0.30962664;0.27059695;0.38384819;0.3555828;
0.73497438;0.67775732;0.27425924;0.30629009;0.68088222;0.44527823;0.32920173;0.57558894;0.70059383;0.37736517;
0.50568277;0.081572674;0.19377245;0.26383075;0.99290735;0.057749558;0.064995736;0.14884032;0.53484434;0.21243882;
0.12329544;0.074825712;0.92177367;0.053664178;0.21575712;0.063039906;0.4348112;0.070471615;0.080619037;0.25966734;
0.98844767;0.064747259;0.11402068;0.067596391;0.63851988;0.24721424;0.59892863;0.26770017;0.60709006;0.52475965;
0.3557145;0.65801001;0.68655103;0.71057981;0.21250267;0.28694686;0.4431701;0.46227863;0.20744859;0.45630944;
0.25057292;0.81676656;0.21074487;0.6742937;0.25044981;0.71889383;0.67276073;0.3499645;0.26842895;0.41231769;
0.34878013;0.1605942;0.4852666;0.48064429;0.83710605;0.125293;0.33723241;0.18233523;0.94907469;0.40778178;
0.30787402;0.2763252;0.79679251;0.36274138;0.31832498;0.45028457;0.91176915;0.26849255;0.22556707;0.13524176;
0.72917265;0.12835498;0.29993159;0.37770006;0.12055042;0.13236915;0.24273627;0.93565017;0.27476868;0.31910896;
0.19913748;0.07694111;0.89014304;0.15375711;0.17223707;0.15242189;0.15745522;0.90606302;0.25360495;0.37206233;
0.14292665;0.24524133;0.95171583;0.15932311;0.13730963;0.28920376;0.15407407;0.93091536;0.40346992;0.081232361;
0.15675896;0.17286292;0.1438956;0.2067636;0.12474551;0.17757583;0.15824303;0.13590223;0.12425972;0.12990451;
0.90560669;0.80367553;0.92465061;0.90336299;0.9139393;0.16806003;0.47891724;0.26214612;0.34156299;0.077016287;
0.1773324;0.12437465;0.29949808;0.26439154;0.17555059;0.93516421;0.28958216;0.30867946;0.26630482;0.22111182;
0.20487945;0.2316727;0.19317719;0.87611252;0.27635416;0.099904537;0.84509099;0.11916676;0.16507047;0.14564428;
0.93257344;0.32228288;0.222413;0.21085779;0.945005;0.14809889;0.3373456;0.39691123;0.29938069;0.42001686;
0.84942353;0.11583271;0.061070036;0.11892802;0.089123391;0.21600837;0.061176524;0.11773327;0.75588912;0.15310578;
0.78062946;0.97076905;0.6053046;0.57782239;0.72522098;0.79490179;0.17792398;0.08496768;0.070407964;0.87300962;
0.19002242;0.22082369;0.16385384;0.22439767;0.25719473;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  step_prog=NULL;
  tags=;
  desc=;
  Program @[0] {
   name="LeabraStartup";
   tags="Leabra, Startup";
   desc="run project in the background (replaces leabra_startup.css)
command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batches=xxx] [tag=xxx]";
   flags=STARTUP_RUN;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$5$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[0][0]$6$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="batch";
     var_type=T_Object;
     object_type=Program;
     object_val=$4$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="set this to point to your batch process";
    };
    ProgVar @[1] {
     name="tag";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[2] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc="log file directory";
    };
    ProgVar @[3] {
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=NULL_CHECK|USED;
     reference=0;
     desc="name of log file";
    };
    ProgVar @[4] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][1]$7$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
    ProgVar @[5] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][0]$8$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED;
     reference=0;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    IfReturn @[0] {
     desc="don't run if running in the gui!";
     flags=;
     cond {
      expr="taMisc::gui_active";
     };
    };
    Comment @[1] {
     desc="add our special args from command line";
     flags=;
    };
    MiscCall @[2] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"tag=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[3] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"logdir=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    RegisterArgs @[4] {
     desc="This is KEY!!! actuall processes all args, including those from ProgVarFmArg guys below";
     flags=;
    };
    Comment @[5] {
     desc="Initialize and set variables from args";
     flags=;
    };
    PrintExpr @[6] {
     desc=;
     flags=;
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
    };
    MethodCall @[7] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[0].vars[0]$9$;
     method=Program::Init;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    MiscCall @[8] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[1]$10$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[9] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[2]$11$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    ProgVarFmArg @[10] {
     desc=;
     flags=;
     prog=$3$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[11] {
     desc=;
     flags=;
     prog=$4$;
     var_name="max_batch";
     arg_name="batches";
    };
    Comment @[12] {
     desc="Set log files";
     flags=;
    };
    MethodCall @[13] {
     desc="last arg is to include dmem proc number";
     flags=;
     result_var=.projects[0].programs[0].vars[3]$12$;
     obj=.projects[0].programs[0].vars[4]$13$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MethodCall @[14] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=;
     result_var=NULL;
     obj=$13$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[15] {
     desc="last arg is to include dmem proc number";
     flags=OFF;
     result_var=$12$;
     obj=.projects[0].programs[0].vars[5]$14$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[16] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF;
     result_var=NULL;
     obj=$14$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="false";
       };
      };
     };
    };
    OtherProgramVar @[17] {
     desc=;
     flags=;
     other_prog=.projects[0].programs.gp[0][9]$15$;
     set_other=1;
     var_1=$10$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[18] {
     desc=;
     flags=;
     expr {
      expr="\"Running: \" << batch.name";
     };
    };
    ProgramCall @[19] {
     desc=;
     flags=;
     target=$4$;
     targ_ld_init="*LeabraBatch*";
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       expr {
	expr="input_data";
       };
      };
     };
    };
   };
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   step_prog=.projects[0].programs.gp[0][4]$16$;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraBatch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$6$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="batch counter";
     };
     ProgVar @[1] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="maximum number of batch runs to perform";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$17$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$18$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=$17$;
      local_ctr_var=$18$;
      counter=Network::batch;
      update_after=0;
     };
     WhileLoop @[1] {
      desc="the main loop over training runs";
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=;
	target=$3$;
	targ_ld_init="*LeabraTrain*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=;
	network_var=$17$;
	local_ctr_var=$18$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
   };
   Program @[1] {
    name="LeabraTrain";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;      };
      mti=156;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to train";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$6$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="datatable with training patterns";
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="maximum number of epochs to run";
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=9;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][1].types[0]$19$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
     };
     ProgVar @[5] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[0][1].objs[0]$20$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
     };
     ProgVar @[6] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].train_time$21$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].args[2]$22$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].args[0]$23$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[6]$24$;
      expr {
       expr="network.train_time";
      };
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[0][1].vars[5]$25$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$25$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     WtInitPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$23$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=$24$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$24$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[2] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$23$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     IfElse @[3] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$23$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     AssignExpr @[4] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[1]$26$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[5] {
      desc="main loop over epochs of training";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=;
	target=.projects[0].programs.gp[0][2]$27$;
	targ_ld_init="*LeabraEpoch*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=;
	network_var=$23$;
	local_ctr_var=$26$;
	counter=Network::epoch;
	update_after=0;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[6] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=;
      result_var=NULL;
      obj=$24$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[2] {
    name="LeabraEpoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to operate on";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$6$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$8$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].epoch_time$28$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=6;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$29$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$30$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[3]$31$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$29$;
      local_ctr_var=$30$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$31$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$31$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[2]$32$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[4] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	target=.projects[0].programs.gp[0][3]$33$;
	targ_ld_init="*LeabraTrial*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       IfElse @[1] {
	desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
	flags=;
	cond {
	 expr="network.Compute_Weights_Test(trial+1)";
	};
	true_code {
	 name=;
	 el_typ=MethodCall;
	 el_def=0;
	 MethodCall @[0] {
	  desc="update the weight values based on changes computed by trial program";
	  flags=;
	  result_var=NULL;
	  obj=$29$;
	  method=Network::Compute_Weights;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
      };
      data_var=.projects[0].programs.gp[0][2].args[1]$34$;
      index_var=.projects[0].programs.gp[0][2].vars[4]$35$;
      order_var=.projects[0].programs.gp[0][2].vars[0]$36$;
      order=PERMUTED;
      item_idx_list{ 0;5;2;3;1;4;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     IfElse @[5] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$29$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[6] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$29$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[7] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      target=.projects[0].programs.gp[0][8]$37$;
      targ_ld_init="*LeabraEpochMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[8] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$31$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[3] {
    name="LeabraTrial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$6$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[0][3].args[0]$38$;
      local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$39$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$38$;
      local_ctr_var=$39$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$38$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	target=$16$;
	targ_ld_init="*LeabraSettle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$38$;
	local_ctr_var=$39$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$38$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$38$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[4] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      target=.projects[0].programs.gp[0][7]$40$;
      targ_ld_init="*LeabraTrialMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     NetUpdateView @[5] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$38$;
      update_var=.projects[0].programs.gp[0][3].vars[1]$41$;
     };
    };
   };
   Program @[4] {
    name="LeabraSettle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$6$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="current cycle of settling (local loop counter)";
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="if true, will update network views at end of settling";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[0][4].args[0]$42$;
      local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$43$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$42$;
      local_ctr_var=$43$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$42$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      target=.projects[0].programs.gp[0][6]$44$;
      targ_ld_init="*ApplyInputs*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$42$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[0][4].vars[1]$45$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$45$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	target=.projects[0].programs.gp[0][5]$46$;
	targ_ld_init="*LeabraCycle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$42$;
	local_ctr_var=$43$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$42$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=MethodCall;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$42$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     IfElse @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$42$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$42$;
      update_var=.projects[0].programs.gp[0][4].vars[2]$47$;
     };
    };
   };
   Program @[5] {
    name="LeabraCycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].args[0]$48$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$48$;
      update_var=.projects[0].programs.gp[0][5].vars[0]$49$;
     };
    };
   };
   Program @[6] {
    name="ApplyInputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$6$;
      network=$5$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$6$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="input datatable containing input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[0][6].objs[0]$50$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[0]$51$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$51$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$51$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[7] {
    name="LeabraTrialMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="Output_act";
	computed=0;
	object_type=LeabraLayer;
	object=.projects[0].networks[0].layers[2]$52$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$5$;
      data=$8$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to record data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$8$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][7].objs[0]$53$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[1]$54$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$54$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$54$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[0]$55$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$54$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$55$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].args[0]$56$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[8] {
    name="LeabraEpochMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="Hidden_Fm_Input_r_wt";
	computed=0;
	object_type=LeabraPrjn;
	object=.projects[0].networks[0].layers[1].projections[0]$57$;
	variable="r.wt";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$5$;
      data=$7$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="network to get data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$7$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="data table to write the epoch data to";
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][8].objs[0]$58$;
      objs_ptr=1;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$28$;
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[2]$59$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[1]$60$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$60$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$60$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[0]$61$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$60$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$59$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$61$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$61$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$61$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[9] {
    name="SaveWeights";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED;
      reference=0;
      desc="user-provided subdirectory to save weights in";
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED;
      reference=0;
      desc="final generated file name -- do not edit!";
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of epoch with leading zeros";
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="string rep of batch with leading zeros";
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED;
      reference=0;
      desc="batch + epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[4]$62$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[3]$63$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[5]$64$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[2]$65$;
      obj=.projects[0].programs.gp[0][9].args[0]$66$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=;
      result_var=NULL;
      obj=$66$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="view_win_lft";
     value 6 0=0;
    };
    UserDataItem @[1] {
     name="view_win_top";
     value 6 0=0;
    };
    UserDataItem @[2] {
     name="view_win_wd";
     value 6 0=1;
    };
    UserDataItem @[3] {
     name="view_win_ht";
     value 6 0=0.7996604442596436;
    };
    UserDataItem @[4] {
     name="view_win_iconified";
     value 1 0=0;
    };
    UserDataItem @[5] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAAAAAADAAABSgAAAo8AAANDAQAAAAcBAAAAAQ==";
    };
   };
   m_data=.projects[0]$67$;
   name="DefaultProjectBrowser";
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_visible";
       value 1 0=1;
      };
     };
     m_data=NULL;
     name="Application";
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     m_data=NULL;
     name="Tree";
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$67$;
    };
    PanelViewer @[1] {
     m_data=NULL;
     name="Panels";
     visible=1;
    };
    T3DataViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_frame_selected";
       value 1 0=1;
      };
     };
     m_data=NULL;
     name="DefaultViewer";
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       m_data=NULL;
       name="DefaultFrame";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 NetView @[0] {
	  m_data=$5$;
FloatTransform @*(.m_transform) {scale={x=0.6753985: y=0.6753985: z=0.6753985: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=0.6753985: y=0.6753985: z=0.6753985: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=1;
	  net_text=1;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  net_box_offset=0.5;
	  ordered_uvg_list{ act;	  };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=5: y=5: z=3: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_F;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name=;
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$68$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="targ";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="net";
	    auto_scale=0;
	    min=-0.5904;
	    max=0.5904;
	   };
	   ScaleRange @[3] {
	    name="bias_wt";
	    auto_scale=0;
	    min=-0.1503;
	    max=0.1503;
	   };
	   ScaleRange @[4] {
	    name="bias.wt";
	    auto_scale=0;
	    min=-0.4302;
	    max=0.4302;
	   };
	   ScaleRange @[5] {
	    name="r.wt";
	    auto_scale=0;
	    min=-0.81;
	    max=0.81;
	   };
	  };
	  lay_disp_modes{ Input=0;Hidden=0;Output=0;	  };
	 };
	 GridTableView @[1] {
	  m_data=$8$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=-0.9999813: y=-0.0055778: z=0.00252403: rot=0.8499027: }: translate={x=0.8457018: y=-0.06940984: z=0.08394016: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].data.gp[1][0].data[0]$69$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].data.gp[1][0].data[1]$70$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    m_data=.projects[0].data.gp[1][0].data[2]$71$;
	    m_transform=NULL;
	    name="trial";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    m_data=.projects[0].data.gp[1][0].data[3]$72$;
	    m_transform=NULL;
	    name="trial_name";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    m_data=.projects[0].data.gp[1][0].data[4]$73$;
	    m_transform=NULL;
	    name="group_name";
	    visible=0;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    m_data=.projects[0].data.gp[1][0].data[5]$74$;
	    m_transform=NULL;
	    name="phase_no";
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    m_data=.projects[0].data.gp[1][0].data[6]$75$;
	    m_transform=NULL;
	    name="minus_cycles";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    m_data=.projects[0].data.gp[1][0].data[7]$76$;
	    m_transform=NULL;
	    name="sse";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[8] {
	    m_data=.projects[0].data.gp[1][0].data[8]$77$;
	    m_transform=NULL;
	    name="ext_rew";
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[9] {
	    m_data=.projects[0].data.gp[1][0].data[9]$78$;
	    m_transform=NULL;
	    name="Output_act";
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=-0.9999813: y=-0.0055778: z=0.00252403: rot=0.8499027: }: translate={x=0.8457018: y=-0.06940984: z=0.08394016: }: };
	  view_rows=6;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=2: max=6: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name=;
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$68$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0.2;
	  mat_rot=45;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.05: max=0.1: };
	 };
	 GridTableView @[2] {
	  m_data=$7$;
FloatTransform @*(.m_transform) {scale={x=0.8087503: y=0.80875: z=0.80875: }: rotate={x=-0.9999999: y=0: z=0: rot=0.4634896: }: translate={x=0.9402148: y=0.7504291: z=-0.673673: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].data.gp[1][1].data[0]$79$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].data.gp[1][1].data[1]$80$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    m_data=.projects[0].data.gp[1][1].data[2]$81$;
	    m_transform=NULL;
	    name="avg_sse";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    m_data=.projects[0].data.gp[1][1].data[3]$82$;
	    m_transform=NULL;
	    name="cnt_err";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    m_data=.projects[0].data.gp[1][1].data[4]$83$;
	    m_transform=NULL;
	    name="avg_ext_rew";
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    m_data=.projects[0].data.gp[1][1].data[5]$84$;
	    m_transform=NULL;
	    name="avg_cycles";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    m_data=.projects[0].data.gp[1][1].data[6]$85$;
	    m_transform=NULL;
	    name="epoch_time_tot";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    m_data=.projects[0].data.gp[1][1].data[7]$86$;
	    m_transform=NULL;
	    name="epoch_time_usr";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[8] {
	    m_data=.projects[0].data.gp[1][1].data[8]$87$;
	    m_transform=NULL;
	    name="Hidden_Fm_Input_r_wt";
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=0.8087503: y=0.80875: z=0.80875: }: rotate={x=-0.9999999: y=0: z=0: rot=0.4634896: }: translate={x=0.9402148: y=0.7504291: z=-0.673673: }: };
	  view_rows=1;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=1;
	  col_range {min=7: max=7: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name=;
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$68$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0.2;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	 GraphTableView @[3] {
	  m_data=$7$;
FloatTransform @*(.m_transform) {scale={x=0.4119503: y=0.4119501: z=0.4119501: }: rotate={x=-1.000219: y=0: z=0: rot=0.005980202: }: translate={x=0.2203933: y=0.9595687: z=0.002735832: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=$79$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=$80$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=$81$;
	    m_transform=NULL;
	    name="avg_sse";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=$82$;
	    m_transform=NULL;
	    name="cnt_err";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=$83$;
	    m_transform=NULL;
	    name="avg_ext_rew";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=$84$;
	    m_transform=NULL;
	    name="avg_cycles";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=$85$;
	    m_transform=NULL;
	    name="epoch_time_tot";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=$86$;
	    m_transform=NULL;
	    name="epoch_time_usr";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=$87$;
	    m_transform=NULL;
	    name="Hidden_Fm_Input_r_wt";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.4119503: y=0.4119501: z=0.4119501: }: rotate={x=-1.000219: y=0: z=0: rot=0.005980202: }: translate={x=0.2203933: y=0.9595687: z=0.002735832: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=8: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=8: };
	   range {min=0: max=8: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Z;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="avg_sse";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green": r=0: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="violet": r=0.9333333: g=0.509804: b=0.9333333: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name=;
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$68$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=0.8699911: y=1.253086: z=2.261982: };
       camera_orient {x=-0.9986469: y=-0.03246701: z=0.04067912: rot=0.2368263: };
       camera_focdist=2.806019;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       headlight_on=1;
       fullscreen_on=0;
       stereo_view=STEREO_NONE;
      };
      T3DataViewFrame @[1] {
       m_data=NULL;
       name="EpochOutputData";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$7$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=$79$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=$80$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=$81$;
	    m_transform=NULL;
	    name="avg_sse";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=$82$;
	    m_transform=NULL;
	    name="cnt_err";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=$83$;
	    m_transform=NULL;
	    name="avg_ext_rew";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=$84$;
	    m_transform=NULL;
	    name="avg_cycles";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=$85$;
	    m_transform=NULL;
	    name="epoch_time_tot";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=$86$;
	    m_transform=NULL;
	    name="epoch_time_usr";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=$87$;
	    m_transform=NULL;
	    name="Hidden_Fm_Input_r_wt";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=8: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=8: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=8: };
	   range {min=0: max=8: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Z;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="avg_sse";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=5.605838: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=5.605838: };
	   range {min=0: max=5.605838: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="green": r=0: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="violet": r=0.9333333: g=0.509804: b=0.9333333: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name=;
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$68$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.465061: y=0.4675: z=1.544333: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=2.054333;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       headlight_on=1;
       fullscreen_on=0;
       stereo_view=STEREO_NONE;
      };
      T3DataViewFrame @[2] {
       m_data=NULL;
       name="SimpleLines5x5";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GridTableView @[0] {
	  m_data=$6$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].data.gp[0][0].data[0]$88$;
	    m_transform=NULL;
	    name="Name";
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].data.gp[0][0].data[1]$89$;
	    m_transform=NULL;
	    name="Input";
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    m_data=.projects[0].data.gp[0][0].data[2]$90$;
	    m_transform=NULL;
	    name="Output";
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10;
	  view_range {min=0: max=5: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=2: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$68$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=1.5325: y=0.5175: z=1.443747: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.453747;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       headlight_on=1;
       fullscreen_on=0;
       stereo_view=STEREO_NONE;
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_lft";
       value 6 0=0;
      };
      UserDataItem @[1] {
       name="view_win_top";
       value 6 0=0.009337861090898514;
      };
      UserDataItem @[2] {
       name="view_win_wd";
       value 6 0=0.03966597095131874;
      };
      UserDataItem @[3] {
       name="view_win_ht";
       value 6 0=0.7359932065010071;
      };
      UserDataItem @[4] {
       name="view_win_iconified";
       value 1 0=0;
      };
      UserDataItem @[5] {
       name="view_visible";
       value 1 0=1;
      };
     };
     m_data=NULL;
     name="Tools";
     visible=1;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 last_change_desc="Added test stuff to ProjectDocs, including Wiki formatting, some ta: links, and some external links.  very nice.  we need to figure out a syntax for downloaded wiki links..
";
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=1;
    };
    UserDataItem @[1] {
     name="ext_rew";
     value 1 0=1;
    };
    UserDataItem @[2] {
     name="maxda";
     value 1 0=1;
    };
    UserDataItem @[3] {
     name="minus_output_name";
     value 1 0=1;
    };
    UserDataItem @[4] {
     name="minus_cycles";
     value 1 0=1;
    };
    UserDataItem @[5] {
     name="ct_cycle";
     value 1 0=1;
    };
    UserDataItem @[6] {
     name="phase_no";
     value 1 0=1;
    };
    UserDataItem @[7] {
     name="phase";
     value 1 0=1;
    };
    UserDataItem @[8] {
     name="sse";
     value 1 0=1;
    };
    UserDataItem @[9] {
     name="output_name";
     value 1 0=1;
    };
    UserDataItem @[10] {
     name="trial_name";
     value 1 0=1;
    };
    UserDataItem @[11] {
     name="group_name";
     value 1 0=1;
    };
    UserDataItem @[12] {
     name="time";
     value 1 0=1;
    };
    UserDataItem @[13] {
     name="cycle";
     value 1 0=1;
    };
    UserDataItem @[14] {
     name="tick";
     value 1 0=1;
    };
    UserDataItem @[15] {
     name="trial";
     value 1 0=1;
    };
    UserDataItem @[16] {
     name="group";
     value 1 0=1;
    };
    UserDataItem @[17] {
     name="epoch";
     value 1 0=1;
    };
    UserDataItem @[18] {
     name="batch";
     value 1 0=1;
    };
    UserData_DocLink @[19] {
     name="DocLink";
     doc=.projects[0].docs[1]$91$;
    };
   };
   name="LeabraNetwork_0";
   desc=;
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="LeabraUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[3].children[0]$92$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=1: decay=0.05: g_gain=4: window=20: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: clamp_norm_max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     opt_thresh {send=0.1: delta=0.005: learn=0.01: phase_dif=0: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
     dt {vm=0.3: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     noise_type=NO_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
     noise_adapt {trial_fixed=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraLayerSpec @[1] {
     name="HiddenLayer";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Input_Output";
       desc=;
       unique{ compute_i;i_kwta_pt;kwta;inhib;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PAT_K: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       net_rescale {on=0: max_net=0.6: net_extra=0.2: };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.05;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.5: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.05;
     };
    };
    FullPrjnSpec @[2] {
     name="FullPrjnSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
    };
    LeabraConSpec @[3] {
     name="LeabraConSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_0";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.1;
       cur_lrate=0.1;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=1;
       };
       wt_sig {gain=6: off=1.1: };
       lmix {hebb=0.1: err=0.9: err_sb=1: };
       xcal {lrn_var=XCAL_SR: mvl_mix=0.05: svm_mix=0.95: s_mix=0.9: m_mix=0.1: l_dt=0.03: l_gain=1.8: ml_dt=0.4: d_rev=0.15: d_gain=2.5: d_rev_ratio=5.666667: };
       xcal_c {s_dt=0.2: m_dt=0.1: };
       xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.05;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.1;
     cur_lrate=0.1;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=1;
     };
     wt_sig {gain=6: off=1.1: };
     lmix {hebb=0.1: err=0.9: err_sb=1: };
     xcal {lrn_var=XCAL_SR: mvl_mix=0.05: svm_mix=0.95: s_mix=0.9: m_mix=0.1: l_dt=0.03: l_gain=1.8: ml_dt=0.4: d_rev=0.15: d_gain=2.5: d_rev_ratio=5.666667: };
     xcal_c {s_dt=0.2: m_dt=0.1: };
     xcalm {ml_mix=0: sm_mix=1: use_sb=1: use_nd=0: avg_init=0.15: rnd_min_avg=-1: rnd_var=0.1: };
     savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.05;
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    LeabraLayer @[0] {
     name="Input";
     desc=;
     flags=;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[0].specs[0]$93$: };
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.19: max=0.95: max_i=0: };
     acts_p {cmpt=1: avg=0.19: max=0.95: max_i=0: };
     acts_m {cmpt=1: avg=0.19: max=0.95: max_i=0: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=5: pct=0.2: pct_c=0.8: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.48: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1].children[0]$94$: };
     hard_clamped=1;
     ravg_l_avg=0.15;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
    };
    LeabraLayer @[1] {
     name="Hidden";
     desc=;
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[0]$95$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[2]$96$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$1$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Output";
       from_type=CUSTOM;
       from=$52$;
       spec {type=FullPrjnSpec: spec=$96$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$1$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$93$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.4536511: max=0.7552818: max_i=15: };
     i_thrs {cmpt=1: avg=3.299414: max=5.575238: max_i=15: };
     acts {cmpt=1: avg=0.2187969: max=0.9435799: max_i=15: };
     acts_p {cmpt=1: avg=0.2187969: max=0.9435799: max_i=15: };
     acts_m {cmpt=1: avg=0.2189425: max=0.9437802: max_i=15: };
     phase_dif_ratio=1.000665;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=6: pct=0.24: pct_c=0.76: adth_k=1: k_ithr=5.090858: k1_ithr=2.733696: ithr_r=0.621792: ithr_diff=0.4630187: tie_brk=0: };
     i_val {kwta=4.147993: g_i=4.147993: gp_g_i=0: g_i_orig=4.147993: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.2276461: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0.0001017451;
     spec {type=LeabraLayerSpec: spec=$2$: };
     hard_clamped=0;
     ravg_l_avg=0.15;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
    };
    LeabraLayer @[2] {
     name="Output";
     desc=;
     flags=;
     layer_type=TARGET;
     pos {x=0: y=0: z=2: };
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[1]$97$;
       spec {type=FullPrjnSpec: spec=$96$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$1$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$93$: };
     ext_flag=TARG|EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.4016315: max=0.6768439: max_i=18: };
     i_thrs {cmpt=1: avg=2.900903: max=4.964278: max_i=18: };
     acts {cmpt=1: avg=0.19: max=0.95: max_i=0: };
     acts_p {cmpt=1: avg=0.19: max=0.95: max_i=0: };
     acts_m {cmpt=1: avg=0.1941837: max=0.9626221: max_i=18: };
     phase_dif_ratio=1.02202;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=5: pct=0.2: pct_c=0.8: adth_k=1: k_ithr=3.639605: k1_ithr=3.107419: ithr_r=0.1580826: ithr_diff=0.1462208: tie_brk=0: };
     i_val {kwta=3.240466: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.4096766: i_kwta_pt=1.146957: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     spec {type=LeabraLayerSpec: spec=$94$: };
     hard_clamped=1;
     ravg_l_avg=0.15;
     dav=0;
     net_rescale=1;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=2;
   batch=0;
   epoch=9;
   group=0;
   trial=5;
   tick=0;
   cycle=15;
   time=1767;
   group_name=;
   trial_name="ldiag";
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=1;
   cur_sum_sse=0;
   avg_sse_n=0;
   cur_cnt_err=0;
   train_time {name="train_time": start={usr=283: sys=40: tot=3787856423: }: end={usr=347: sys=44: tot=3787856491: }: used={usr=64: sys=4: tot=68: }: s_used=0.68: n_used=1: };
   epoch_time {name="epoch_time": start={usr=341: sys=44: tot=3787856484: }: end={usr=347: sys=44: tot=3787856491: }: used={usr=6: sys=0: tot=7: }: s_used=0.07000000000000001: n_used=1: };
   trial_time {name="trial_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="settle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="cycle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="wt_sync_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="misc_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    log_timing=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=75;
   n_cons=1875;
   max_size {x=5: y=5: z=3: };
   font_sizes {
    net_name=0.05;
    net_vals=0.05;
    layer=0.04;
    layer_vals=0.03;
    prjn=0.01;
    unit=0.02;
    un_nm_len=3;
   };
   view_params {
    xy_square=0;
    unit_spacing=0.05;
    prjn_disp=L_R_F;
    prjn_name=0;
    prjn_width=0.001;
    prjn_trans=0.5;
    lay_trans=0.5;
    unit_trans=0.9;
   };
   learn_rule=LEABRA_CHL;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase=PLUS_PHASE;
   nothing_phase=0;
   phase_no=2;
   phase_max=2;
   ct_cycle=30;
   time_inc=1;
   cycle_max=60;
   min_cycles=15;
   min_cycles_phase2=35;
   ct_time {
    minus=50;
    plus=20;
    inhib=20;
    n_avg_only_epcs=1;
    total_cycles=90;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=20;
    interval=5;
    plus_s_st=19;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0.05;
    trough_i=0.05;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=1;
    m_sum=0;
    m_nrm=1;
    do_s=0;
   };
   minus_cycles=15;
   avg_cycles=15;
   avg_cycles_sum=0;
   avg_cycles_n=0;
   minus_output_name=;
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=75;
   avg_send_pct=0.03548146;
   avg_send_pct_sum=0;
   avg_send_pct_n=0;
   maxda_stopcrit=0.005;
   maxda=0.0001017451;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0;
   pvlv_lve=0;
   pvlv_lvi=0;
   pv_detected=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   off_errs=1;
   on_errs=1;
   norm_err=0;
   avg_norm_err=0;
   avg_norm_err_sum=0;
   avg_norm_err_n=0;
  };
 };
};
